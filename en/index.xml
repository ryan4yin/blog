<feed xmlns="http://www.w3.org/2005/Atom"><title>This Cute World</title><link href="https://thiscute.world/en/index.xml" rel="self"/><link href="https://thiscute.world/en/"/><updated>2023-05-10T21:23:28+08:00</updated><id>https://thiscute.world/en/</id><author><name>ryan4yin</name></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">NixOS &amp;amp; Nix Flakes - A Guide for Beginners</title><link href="https://thiscute.world/en/posts/nixos-and-flake-basics/"/><id>https://thiscute.world/en/posts/nixos-and-flake-basics/</id><author><name>ryan4yin</name></author><published>2023-05-10T21:23:28+08:00</published><updated>2023-06-22T02:50:00+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/en/posts/nixos-and-flake-basics/screenshot_2023-05-07-21-21.webp" height="3840" width="2160"><figcaption></figcaption>
        </figure><blockquote>
<p>The target NixOS version of this post is 22.11, and the Nix version is 2.13.3. In this environment, Flakes is still an experimental feature.</p>
</blockquote>
<h2 id="changelog" class="headerLink">
    <a href="#changelog" class="header-mark"></a>Changelog</h2><ul>
<li>2022/6/22
<ul>
<li>Polish the language of the post.</li>
<li>Add a new section <code>XI. Best Practices</code>.</li>
<li>Add a new section into <code>VI-7</code>, introduces <code>lib.mkOverride</code>, <code>lib.mkDefault</code>, <code>lib.mkForce</code>, <code>lib.mkOrder</code>, <code>lib.mkBefore</code> and <code>lib.mkAfter</code></li>
</ul>
</li>
<li>2023/6/21
<ul>
<li>Add some details about the usage of <code>callPackage</code>, <code>override</code> and <code>overlays</code> in section <code>VIII. Advanced Usage of Nixpkgs</code>.</li>
<li>Add some command line tools I used frequently in section VI-6.</li>
<li>Add a new section <code>When will flakes stablized?</code></li>
</ul>
</li>
<li>2023/6/6
<ul>
<li>Add examples of flake&rsquo;s inputs &amp; outputs into section <code>VII. Usage of Nix Flakes</code></li>
</ul>
</li>
<li>2023/6/4
<ul>
<li>Replace <code>nix-env --list-generations</code> by <code>nix profile history</code></li>
<li>Replace <code>nix-collect-garbage</code> by <code>nix store gc</code></li>
</ul>
</li>
<li>2023/6/1
<ul>
<li>Update VI-9 according to <a href="https://discourse.nixos.org/t/1000-instances-of-nixpkgs/17347" target="_blank" rel="noopener noreferrer">1000 instances of nixpkgs</a>, create all nixpkgs instances globally in <code>flake.nix</code> to avoid this problem.</li>
</ul>
</li>
<li>2023/5/21
<ul>
<li>Complete the section &ldquo;Overlays&rdquo;.</li>
<li>Remove the section &ldquo;IX. Nix Packaging&rdquo;, which may be moved to a separate post in the future.</li>
<li>Add an example of installing programs via flakes at section VI-4.</li>
</ul>
</li>
</ul>
<h2 id="0-why-nix" class="headerLink">
    <a href="#0-why-nix" class="header-mark"></a>0. Why Nix</h2><p>I heard about the Nix package manager several years ago. It uses the Nix language to describe system configuration, and the Linux distribution built on top of it can roll back to any historical state at any time. Although it sounds impressive, it requires learning a new language and writing code to install packages, I thought it was too troublesome and didn&rsquo;t study it at the time.</p>
<p>But recently I encountered two troublesome things when migrating the system, which made me decide to try Nix.</p>
<p>The first problem was installing EndeavourOS (a derivative distribution of Arch Linux) on a newly assembled PC. Because My old PC also uses EndeavourOS, to save time, I directly <code>rsync</code> the old PC&rsquo;s home directory to the new PC.
However, this synchronization caused problems &ndash; All functions works normally, but video playback always stuck, firefox, chrome, and mpv would all get stuck. I searched various resources online but could not solve the problem until I realized it might be caused by the home directory synchronization. After clearing the home directory, the problem was solved immediately… Later, I spent a long time recovering things from the old PC one by one.</p>
<p>The second problem is that I recently wanted to give wayland a try, so I changed the compositor from i3 to sway.
However, because there was little difference between the two and many inconveniences (hidpi, Sway configuration tuning, etc.), I decided to switch back to i3. After switching back, GUI programs such as firefox and thunar would all get stuck for about one minute after the system started…</p>
<p>I was too tired to deal with the second problem, after thinking about it carefully, I realized that the root cause was that the system did not have any version control and rollback mechanism, which caused the system to be unable to be restored when problems occurred. And another problem, when installing a new system, I had to manually export the package list from the old machine and then install them on the new machine.</p>
<p>So I decided to switch to NixOS.</p>
<p>The first step I took was to create a NixOS virtual machine in my Homelab, and debug step by step in this virtual machine to migrate my old PC&rsquo;s EndeavourOS i3 configuration to NixOS + Flakes and restore the entire desktop environment.</p>
<p>Once I had it working on the virtual machine, the rest was easy. I simply backed up my home directory from my work computer, reinstalled the system as NixOS, <code>rysnc</code> the NixOS configuration from the virtual machine, made some adjustments to the disk mounting parameters, and added some extra configuration for my Nvidia graphics card. Finally, with just a few commands, I deployed the configuration and was able to restore the entire i3 environment and my commonly used software on my fresh NixOS system.
It was a truly satisfying moment!</p>
<p>The rollback capability of NixOS gave me a lot of confidence - I no longer fear breaking the system. So a few days ago, I further migrated to the hyprland compositor, which is indeed much better than i3, and I love its animation effects! (On EndeavourOS before, I wouldn&rsquo;t have dared to make such a switch for the reasons mentioned earlier - it would have been a big hassle if something went wrong with the system.)</p>
<blockquote>
<p>Note: some friends on V2EX gave feedback that <code>btrfs</code>&rsquo;s snapshot feature can also provide similar rollback capabilities, and it is much simpler. After some research, I found that to be true. <code>btrfs</code> can even be configured to boot from a snapshot using GRUB(just like the NixOS does). So if you only want the system rollback capability, then btrfs based snapshot tools(e.g. <a href="https://github.com/digint/btrbk" target="_blank" rel="noopener noreferrer">btrbk</a>) are also a good choice. Or if you&rsquo;re still interested in Nix, It is definitely worth learning, as Nix&rsquo;s capabilities are far beyond just system snapshots.</p>
</blockquote>
<figure><img src="./screenshot_2023-05-07-21-21.webp"
         alt="My NixOS Desktop"/><figcaption>
            <p>My NixOS Desktop</p>
        </figcaption>
</figure>

<p>So after studying NixOS and Flakes for about half a month, I finally completed my system switch, and this post is born out of the notes I wrote during this period time, hope you like it~</p>
<p>Now that the background information is out of the way, it&rsquo;s time to dive into the world of Nix!</p>
<h2 id="i-introduction-to-nix" class="headerLink">
    <a href="#i-introduction-to-nix" class="header-mark"></a>I. Introduction to Nix</h2><p>Nix package manager is a declarative configuration management tool similar to pulumi/terraform/kubernetes which are currently popular in the DevOps field. Users need to declare the expected system state in some configuration, and Nix is responsible for achieving that goal. The difference is that Nix manages software packages, while pulumi/terraform manages cloud resources.</p>
<blockquote>
<p>To put it simply, &ldquo;declarative configuration&rdquo; means that users only need to declare the results they want. For example, you declare that you want to replace the i3 window manager with sway, then Nix will help you achieve the goal. You don&rsquo;t need to worry about the underlying details (such as which packages sway needs to install, which i3-related packages need to be uninstalled, which system configuration or environment variables need to be adjusted for sway, what adjustments need to be made to the Sway parameters if an Nvidia graphics card is used, etc.), Nix will automatically handle these details for the user(prerequisite: if the sway&rsquo;s nix packages are designed properly&hellip;).</p>
</blockquote>
<p>NixOS, the Linux distribution built on top of the Nix package manager, can be simply described as &ldquo;OS as Code&rdquo;, which describes the entire operating system&rsquo;s state using declarative Nix configuration files.</p>
<p>the configuration of NixOS manages only the system-level state, user&rsquo;s HOME directory is not under its control. Another important community project, <a href="https://github.com/nix-community/home-manager" target="_blank" rel="noopener noreferrer">home-manager</a>, filled this gap, home-manager is designed to manage user-level packages &amp; HOME directories. <strong>By combining home-manager with NixOS and Git, a fully reproducible and rollbackable system environment can be obtained</strong>(ideally).</p>
<p>Due to Nix&rsquo;s features such as declarative and reproducible, Nix is not only used to manage desktop environments but also widely used to manage development environments, compilation environments, cloud virtual machines, container image construction, etc. <a href="https://github.com/NixOS/nixops" target="_blank" rel="noopener noreferrer">NixOps</a> from the Nix official and <a href="https://github.com/serokell/deploy-rs" target="_blank" rel="noopener noreferrer">deploy-rs</a> from the community are both operations tools based on Nix.</p>
<blockquote>
<p>Since there are numerous files in the home directory with varying behaviors, it is impossible to version control all of them due to the high cost. Generally, only some important configuration files are managed using home-manager, and other files that need to be backed up can be backed up and synchronized using rsync/synthing, or use tools like <a href="https://github.com/digint/btrbk" target="_blank" rel="noopener noreferrer">btrbk</a> to take snapshots of the home directory.</p>
</blockquote>
<h3 id="advantages-of-nix" class="headerLink">
    <a href="#advantages-of-nix" class="header-mark"></a>Advantages of Nix</h3><ul>
<li><strong>Declarative configuration, Environment as Code, can be managed with Git</strong>
<ul>
<li>As long as the configuration files are not lost, the system can be restored to any historical state at any time(ideally).</li>
<li>Nix lock dependences&rsquo;s version through a lock file named <code>flake.lock</code>, to ensure that the system is reproducible, this idea actually borrows from some package managers such as npm, cargo, etc.</li>
<li>Compared with Docker, Nix provides a much stronger guarantee for the reproducibility of build results, because Dockerfile is actually an imperative configuration and there is no such thing as <code>flake.lock</code> in Docker, Docker&rsquo;s reproducibility relies on sharing the build result(which is MUCH MORE LARGER than Dockerfile itself) through image registry(e.g. DockerHub).</li>
</ul>
</li>
<li><strong>Highly convenient system customization capability</strong>
<ul>
<li>By changing a few lines of configuration, various components of NixOS can be easily customized. This is because Nix encapsulates all the underlying complex operations in nix packages and only exports concise and necessary declarative parameters.</li>
<li>Moreover, this modification is very safe. An example is that one NixOS user on the V2EX forum stated that &ldquo;<a href="https://www.v2ex.com/t/938569#r_13053251" target="_blank" rel="noopener noreferrer"><strong>on NixOS, switching between different desktop environments is very simple and clean, and it is very safe. I often switch between gnome/kde/sway.</strong></a>&rdquo;</li>
</ul>
</li>
<li><strong>Rollback</strong>: The system can be rolled back to any historical environment at any time, and NixOS even adds all old versions to the boot options by default to ensure that the system can be rolled back at any time even though it crashes. Therefore, NixOS is also considered one of the most stable Linux Systems.</li>
<li><strong>No dependency conflicts</strong>: Because each software package in Nix has a unique hash, its installation path also includes this hash value, so multiple versions can coexist.</li>
<li><strong>The community is very active, and there are quite a few third-party projects</strong>. The official package repository, nixpkgs, has many contributors, and many people share their Nix configuration on Github/Gitlab. After browsing through it, the entire ecosystem gives me a sense of excitement in discovering a new continent.</li>
</ul>
<figure><img src="./nixos-bootloader.avif"
         alt="All historical versions are listed in the boot options of NixOS. Image from NixOS Discourse - 10074"/><figcaption>
            <p>All historical versions are listed in the boot options of NixOS. Image from <a href="https://discourse.nixos.org/t/how-to-make-uefis-grub2-menu-the-same-as-bioss-one/10074" target="_blank" rel="noopener noreferrer">NixOS Discourse - 10074</a></p>
        </figcaption>
</figure>

<h3 id="disadvantages-of-nix" class="headerLink">
    <a href="#disadvantages-of-nix" class="header-mark"></a>Disadvantages of Nix</h3><ul>
<li><strong>Relatively high learning curve:</strong>: If you want the system to be completely reproducible and avoid pitfalls caused by improper use, you need to learn about the entire design of Nix and manage the system in a declarative manner. You cannot blindly use <code>nix-env -i</code> (which is similar to <code>apt-get install</code>).</li>
<li><strong>Chaotic documentation</strong>: Flakes is still an experimental feature, and there are currently few documents introducing it, Most of the Nix community&rsquo;s documentation only introduces the old cli such as <code>nix-env</code>/<code>nix-channel</code>. If you want to start learning Nix directly from Flakes, you need to refer to a large number of old documents and extract what you need from them. In addition, some of Nix&rsquo;s current core functions are not well-documented (such as <code>imports</code> and Nix Module System), to figure out what it does, it is best to look at the source code&hellip;</li>
<li><del>Relatively few packages</del>: Retract this one. The official claim is that nixpkgs has <a href="https://search.nixos.org/packages" target="_blank" rel="noopener noreferrer">80000+</a> packages, and indeed, most packages can be found in nixpkgs.</li>
<li><strong>Relatively high disk space usage</strong>: To ensure that the system can be rolled back at any time, Nix preserves all historical environments by default, which can take up a lot of disk space. Although you can manually clean up old historical environments periodically with <code>nix-collect-garbage</code>, it is still recommended to buy a larger hard drive.</li>
</ul>
<h3 id="summary" class="headerLink">
    <a href="#summary" class="header-mark"></a>Summary</h3><p>Generally speaking, I think NixOS is suitable for developers who have some experience in using Linux and programming and want to have more control over their systems.</p>
<p>I don&rsquo;t recommend you getting started with NixOS if you are new to Linux, it can be a very painful journey.</p>
<h2 id="ii-installation" class="headerLink">
    <a href="#ii-installation" class="header-mark"></a>II. Installation</h2><p>Nix can be installed in multiple ways and supports being installed on macOS/Linux/WSL as a package manager. Nix also provides NixOS, a Linux distribution that uses Nix to manage the entire system environment.</p>
<p>I chose to directly install NixOS system using its ISO image, to manage the entire system through Nix as much as possible.</p>
<p>The installation process is simple, and I won&rsquo;t go into details here.</p>
<p>some materials that may be useful:</p>
<ol>
<li><a href="https://nixos.org/download.html" target="_blank" rel="noopener noreferrer">Official installation method of Nix</a>: written in bash script, <code>nix-command</code> &amp; <code>flakes</code> are still experimental features as of 2023-04-23, and need to be manually enabled.
<ol>
<li>You need to refer to the instructions in <a href="https://nixos.wiki/wiki/Flakes" target="_blank" rel="noopener noreferrer">Enable flakes - NixOS Wiki</a> to enable <code>nix-command</code> &amp; <code>flakes</code>.</li>
<li>The official installer does not provide any uninstallation method. To uninstall Nix on Linux/macOS, you need to manually delete all related files, users, and groups.</li>
</ol>
</li>
<li><a href="https://github.com/DeterminateSystems/nix-installer" target="_blank" rel="noopener noreferrer">The Determinate Nix Installer</a>: a third-party installer written in Rust, which enables <code>nix-command</code> &amp; <code>flakes</code> by default and provides an uninstallation command.</li>
</ol>
<h2 id="iii-nix-flakes-and-the-classic-nix" class="headerLink">
    <a href="#iii-nix-flakes-and-the-classic-nix" class="header-mark"></a>III. Nix Flakes and the classic Nix</h2><p>As <code>nix-command</code> &amp; <code>flakes</code> are still experimental features, the official documentation does not cover them in detail, and the community&rsquo;s documentation about them is also very scattered.
However, from the perspective of reproducibility and ease of management and maintenance, the classic Nix package structure and cli are no longer recommended for use.
So I will not introduce the usage of the classic Nix. It&rsquo;s recommended that beginners just start with <code>nix-command</code> &amp; <code>flakes</code> and ignore all thecontents about the classic Nix.</p>
<p>Here are the classic Nix commands and related concepts that are no longer needed after you enabling <code>nix-command</code> and <code>flakes</code>, when searching for information, you can safely ignore them:</p>
<ol>
<li><code>nix-channel</code>: <code>nix-channel</code> is similar to other package management tools such as apt/yum/pacman, managing software package versions through stable/unstable/test channels.
<ol>
<li>In Flakes, the functionality of <code>nix-channel</code> is completely replaced by <code>inputs</code> in <code>flake.nix</code> to declare dependency sources and <code>flake.lock</code> to lock dependency versions.</li>
</ol>
</li>
<li><code>nix-env</code>: <code>nix-env</code> is a core command-line tool for traditional Nix used to manage software packages in the user environment. It installs software packages from the data sources defined by <code>nix-channel</code>, so the installed package versions are influenced by the channel. Packages installed with <code>nix-env</code> are not automatically recorded in Nix&rsquo;s declarative configuration and are entirely outside of its control, making them difficult to reproduce on other machines. Therefore, it is not recommended to use this tool.
<ol>
<li>The corresponding command in Flakes is <code>nix profile</code>.</li>
</ol>
</li>
<li><code>nix-shell</code>: <code>nix-shell</code> is used to create a temporary shell environment.
<ol>
<li>In Flakes, it is replaced by <code>nix develop</code> and <code>nix shell</code>.</li>
</ol>
</li>
<li><code>nix-build</code>: <code>nix-build</code> is used to build Nix packages, and it places the build results in <code>/nix/store</code>, but it does not record them in Nix&rsquo;s declarative configuration.
<ol>
<li>The corresponding command in Flakes is <code>nix build</code>.</li>
</ol>
</li>
<li>&hellip;</li>
</ol>
<blockquote>
<p>maybe <code>nix-env -qa</code> is still useful some times, which returns all packages installed in the System.</p>
</blockquote>
<h2 id="iv-package-repositories-of-nix" class="headerLink">
    <a href="#iv-package-repositories-of-nix" class="header-mark"></a>IV. Package Repositories of Nix</h2><p>Similar to Arch Linux, Nix also has official and community software package repositories:</p>
<ol>
<li><a href="https://github.com/NixOS/nixpkgs" target="_blank" rel="noopener noreferrer">nixpkgs</a> is a Git repository containing all Nix packages and NixOS modules.
<ol>
<li>Its <code>master</code> branch contains the latest Nix packages and modules.</li>
<li>The <code>nixos-unstable</code> branch contains the latest tested modules, but some bugs may still exist.</li>
<li>And the <code>nixos-XX.YY</code> branch(the stable branch) contains the latest stable Nix packages and modules.</li>
</ol>
</li>
<li><a href="https://github.com/nix-community/NUR" target="_blank" rel="noopener noreferrer">NUR</a> is similar to Arch Linux&rsquo;s AUR.
<ol>
<li>NUR is a third-party Nix package repository and serves as a supplement to nixpkgs, use it at your own risk.</li>
</ol>
</li>
<li>Flakes can also install software packages directly from Git repositories, which can be used to install Flakes provided by anyone, we will talk about this later.</li>
</ol>
<h2 id="v-basics-of-the-nix-language" class="headerLink">
    <a href="#v-basics-of-the-nix-language" class="header-mark"></a>V. Basics of The Nix language</h2><p>The Nix language is used to declare the configuration to be built by Nix, if you want to play with NixOS and Flakes and enjoy the benefits they bring, you must learn the basics of this language first.</p>
<p>The Nix language is a simple functional language, if you already have some experience in programming, it should take less than 2 hours to go through Nix lanuage&rsquo;s basics.</p>
<p>Please read <a href="https://nix.dev/tutorials/first-steps/nix-language" target="_blank" rel="noopener noreferrer"><strong>Nix language basics - nix.dev</strong></a> and <a href="https://nixos.org/guides/nix-pills/basics-of-language.html" target="_blank" rel="noopener noreferrer">Chapter 4. The Basics of the Language - Nix Pills</a> to get a basic understanding of Nix language now, they are all good introductory materials.</p>
<h2 id="vi-managing-the-system-declaratively" class="headerLink">
    <a href="#vi-managing-the-system-declaratively" class="header-mark"></a>VI. Managing the system declaratively</h2><blockquote>
<p><a href="https://nixos.wiki/wiki/Overview_of_the_NixOS_Linux_distribution" target="_blank" rel="noopener noreferrer">https://nixos.wiki/wiki/Overview_of_the_NixOS_Linux_distribution</a></p>
</blockquote>
<p>After learning the basics of the Nix language, we can start using it to configure our NixOS. The default configuration for NixOS is located at <code>/etc/nixos/configuration.nix</code>, which contains all the declarative configuration for the system, such as time zone, language, keyboard layout, network, users, file system, boot options, etc.</p>
<p>If we want to modify the system state in a reproducible way (<strong>which is also the most recommended way</strong>), we need to manually edit <code>/etc/nixos/configuration.nix</code>, and then execute <code>sudo nixos-rebuild switch</code> to apply the modified configuration, it will generate a new system environment based on the configuration file we modified, sets the new environment as the default one, and also preserves &amp; added the previous environment into the boot options of grub/sytemd-boot. This ensures we can always roll back to the old environment(even if the new environment fails to start).</p>
<p><code>/etc/nixos/configuration.nix</code> is the classic method to configure NixOS, which relies on data sources configured by <code>nix-channel</code> and has no version-locking mechanism, making it difficult to ensure the reproducibility of the system. <strong>A better approach is to use Flakes</strong>, which can ensure the reproducibility of the system and make it easy to manage the configuration.</p>
<p>Now first, let&rsquo;s learn how to manage NixOS through the classic method, <code>/etc/nixos/configuration.nix</code>, and then migrate to the more advanced Flakes.</p>
<h3 id="1-configuring-the-system-using-etcnixosconfigurationnix" class="headerLink">
    <a href="#1-configuring-the-system-using-etcnixosconfigurationnix" class="header-mark"></a>1. Configuring the system using <code>/etc/nixos/configuration.nix</code></h3><p>As I mentioned earlier, this is the classic method to configured NixOS, and also the default method currently used by NixOS. It relies on data sources configured by <code>nix-channel</code> and has no version-locking mechanism, making it difficult to ensure the reproducibility of the system.</p>
<p>For example, to enable ssh and add a user &ldquo;ryan&rdquo;, simply add the following content into <code>/etc/nixos/configuration.nix</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="c1"># Edit this configuration file to define what should be installed on</span>
</span></span><span class="line"><span class="cl"><span class="c1"># your system.  Help is available in the configuration.nix(5) man page</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and in the NixOS manual (accessible by running &#39;nixos-help&#39;).</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">imports</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="c1"># Include the results of the hardware scan.</span>
</span></span><span class="line"><span class="cl">      <span class="sr">./hardware-configuration.nix</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Omit the previous configuration.......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># add user ryan</span>
</span></span><span class="line"><span class="cl">  <span class="n">users</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">isNormalUser</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;ryan&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">extraGroups</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;networkmanager&#34;</span> <span class="s2">&#34;wheel&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">openssh</span><span class="o">.</span><span class="n">authorizedKeys</span><span class="o">.</span><span class="n">keys</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># replace with your own public key</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ssh-ed25519 &lt;some-public-key&gt; ryan@ryan-pc&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="n">firefox</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#  thunderbird</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># enable openssh-server</span>
</span></span><span class="line"><span class="cl">  <span class="n">services</span><span class="o">.</span><span class="n">openssh</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">permitRootLogin</span> <span class="o">=</span> <span class="s2">&#34;no&#34;</span><span class="p">;</span>         <span class="c1"># disable root login</span>
</span></span><span class="line"><span class="cl">    <span class="n">passwordAuthentication</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span> <span class="c1"># disable password login</span>
</span></span><span class="line"><span class="cl">    <span class="n">openFirewall</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">forwardX11</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>              <span class="c1"># enable X11 forwarding</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># omit the rest of the configuration.......</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In this configuration, we declared that we want to enable the openssh service, add an ssh public key for the user ryan, and disable password login.</p>
<p>Now, let&rsquo;s run <code>sudo nixos-rebuild switch</code> to deploy the modified configuration, and then we can login to the system using ssh with the ssh keys we configured.</p>
<p>Any reproducible changes to the system can be made by modifying <code>/etc/nixos/configuration.nix</code> and deploying the changes by running <code>sudo nixos-rebuild switch</code>.</p>
<p>All configuration options in <code>/etc/nixos/configuration.nix</code> can be found in the following places:</p>
<ul>
<li>By searching on Google, such as <code>Chrome NixOS</code>, which will provide NixOS informations related to Chrome. Generally, the NixOS Wiki and the source code of Nixpkgs will be among the top results.</li>
<li>By searching for keywords in <a href="https://search.nixos.org/options" target="_blank" rel="noopener noreferrer">NixOS Options Search</a>.</li>
<li>For system-level configuration, relevant documentation can be found in <a href="https://nixos.org/manual/nixos/unstable/index.html#ch-configuration" target="_blank" rel="noopener noreferrer">Configuration - NixOS Manual</a>.</li>
<li>By searching for keywords directly in the source code of <a href="https://github.com/NixOS/nixpkgs" target="_blank" rel="noopener noreferrer">nixpkgs</a> on GitHub.</li>
</ul>
<h3 id="2-enabling-nixos-flakes-support" class="headerLink">
    <a href="#2-enabling-nixos-flakes-support" class="header-mark"></a>2. Enabling NixOS Flakes Support</h3><p>Compared to the default configuration approach of NixOS, Flakes provide better reproducibility and a clearer package structure that is easier to maintain. Therefore, it is recommended to manage NixOS with Flakes.</p>
<p>However, as Flakes is still an experimental feature currently, it&rsquo;s not enabled by default yet, we need to enable it manually by modifying <code>/etc/nixos/configuration.nix</code>, example as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="c1"># Edit this configuration file to define what should be installed on</span>
</span></span><span class="line"><span class="cl"><span class="c1"># your system.  Help is available in the configuration.nix(5) man page</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and in the NixOS manual (accessible by running &#39;nixos-help&#39;).</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">imports</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="c1"># Include the results of the hardware scan.</span>
</span></span><span class="line"><span class="cl">      <span class="sr">./hardware-configuration.nix</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># omit the previous configuration.......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># enable Flakes and the new command line tool</span>
</span></span><span class="line"><span class="cl">  <span class="n">nix</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">experimental-features</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;nix-command&#34;</span> <span class="s2">&#34;flakes&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">environment</span><span class="o">.</span><span class="n">systemPackages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Flakes uses git to pull dependencies from data sources, so git must be installed first</span>
</span></span><span class="line"><span class="cl">    <span class="n">git</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim</span>
</span></span><span class="line"><span class="cl">    <span class="n">wget</span>
</span></span><span class="line"><span class="cl">    <span class="n">curl</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># omit the rest of the configuration.......</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now run <code>sudo nixos-rebuild switch</code> to apply the changes, and then you can write the configuration for NixOS with Flakes.</p>
<h3 id="3-switching-system-configuration-to-flakenix" class="headerLink">
    <a href="#3-switching-system-configuration-to-flakenix" class="header-mark"></a>3. Switching System Configuration to <code>flake.nix</code></h3><p>After enabling <code>flakes</code>, <code>sudo nixos-rebuild switch</code> will try to read<code>/etc/nixos/flake.nix</code> first every time you run it, if not found, it will fallback to <code>/etc/nixos/configuration.nix</code>.</p>
<p>Now to learn how to write a flake, let&rsquo;s take a look at the official flake templates provided by Nix. First, check which templates are available:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nix flake show templates
</span></span></code></pre></td></tr></table>
</div>
</div><p>The templates <code>templates#full</code> contains all possible usecases, let&rsquo;s take a look at it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nix flake init -t templates#full
</span></span><span class="line"><span class="cl">cat flake.nix
</span></span></code></pre></td></tr></table>
</div>
</div><p>After reading this example, let&rsquo;s create a file <code>/etc/nixos/flake.nix</code> and copy the content of the example into it.
With <code>/etc/nixos/flake.nix</code>, all system modifications will be taken over by Flakes from now on.</p>
<p>The template we copied can not jsut be used directly, we need to modify it to make it work, an example of <code>/etc/nixos/flake.nix</code> is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Ryan&#39;s NixOS Flake&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># This is the standard format for flake.nix. `inputs` are the dependencies of the flake,</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># and `outputs` function will return all the build results of the flake.</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Each item in `inputs` will be passed as a parameter to the `outputs` function after being pulled and built.</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># There are many ways to reference flake inputs. The most widely used is github:owner/name/reference,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># which represents the GitHub repository URL + branch/commit-id/tag.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Official NixOS package source, using nixos-unstable branch here</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:NixOS/nixpkgs/nixos-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># home-manager, used for managing user configuration</span>
</span></span><span class="line"><span class="cl">    <span class="n">home-manager</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nix-community/home-manager/release-22.11&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># The `follows` keyword in inputs is used for inheritance.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># Here, `inputs.nixpkgs` of home-manager is kept consistent with the `inputs.nixpkgs` of the current flake,</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># to avoid problems caused by different versions of nixpkgs.</span>
</span></span><span class="line"><span class="cl">      <span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">follows</span> <span class="o">=</span> <span class="s2">&#34;nixpkgs&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># `outputs` are all the build result of the flake.</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># A flake can have many use cases and different types of outputs.</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># parameters in `outputs` are defined in `inputs` and can be referenced by their names.</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># However, `self` is an exception, This special parameter points to the `outputs` itself (self-reference)</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># The `@` syntax here is used to alias the attribute set of the inputs&#39;s parameter, making it convenient to use inside the function.</span>
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}</span><span class="o">@</span><span class="n">inputs</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixosConfigurations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># By default, NixOS will try to refer the nixosConfiguration with its hostname.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># so the system named `nixos-test` will use this configuration.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># However, the configuration name can also be specified using `sudo nixos-rebuild switch --flake /path/to/flakes/directory#&lt;name&gt;`.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># The `nixpkgs.lib.nixosSystem` function is used to build this configuration, the following attribute set is its parameter.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># Run `sudo nixos-rebuild switch --flake .#nixos-test` in the flake&#39;s directory to deploy this configuration on any NixOS system</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;nixos-test&#34;</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">nixosSystem</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">system</span> <span class="o">=</span> <span class="s2">&#34;x86_64-linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># The Nix module system can modularize configuration, improving the maintainability of configuration.</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Each parameter in the `modules` is a Nix Module, and there is a partial introduction to it in the nixpkgs manual:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#    &lt;https://nixos.org/manual/nixpkgs/unstable/#module-system-introduction&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># It is said to be partial because the documentation is not complete, only some simple introductions</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#    (such is the current state of Nix documentation...)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># A Nix Module can be an attribute set, or a function that returns an attribute set.</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># If a Module is a function, according to the Nix Wiki description, this function can have up to four parameters:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#  lib:     the nixpkgs function library, which provides many useful functions for operating Nix expressions</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#            https://nixos.org/manual/nixpkgs/stable/#id-1.4</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#  config:  all config options of the current flake</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#  options: all options defined in all NixOS Modules in the current flake</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#  pkgs:   a collection of all packages defined in nixpkgs.</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#           you can assume its default value is `nixpkgs.legacyPackages.&#34;${system}&#34;` for now.</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#           can be customed by `nixpkgs.pkgs` option</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#  modulesPath: the default path of nixpkgs&#39;s builtin modules folder,</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#               used to import some extra modules from nixpkgs.</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#               this parameter is rarely used, you can ignore it for now.</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Only these parameters can be passed by default.</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># If you need to pass other parameters, you must use `specialArgs` by uncomment the following line</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># specialArgs = {...}  # pass custom arguments into sub module.</span>
</span></span><span class="line"><span class="cl">        <span class="n">modules</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># Import the configuration.nix we used before, so that the old configuration file can still take effect.</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># Note: /etc/nixos/configuration.nix itself is also a Nix Module, so you can import it directly here</span>
</span></span><span class="line"><span class="cl">          <span class="sr">./configuration.nix</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here we defined a NixOS system called <code>nixos-test</code>, whose configuration file is <code>./configuration.nix</code>, which is the classic configuration we modified before, so we can still make use of it.</p>
<p>Now run <code>sudo nixos-rebuild switch</code> to apply the configuration, and no changes will be made to the system, because we imported the old configuration file in <code>/etc/nixos/flake.nix</code>, so the actual state we declared remains unchanged.</p>
<h3 id="4-manage-system-software-through-flakes" class="headerLink">
    <a href="#4-manage-system-software-through-flakes" class="header-mark"></a>4. Manage system software through Flakes</h3><p>After the switch, we can now manage the system through Flakes. The most common requirement for managing a system is to install softwares. We have seen how to install packages through <code>environment.systemPackages</code> before, and these packages are all from the official nixpkgs repository.</p>
<p>Now let&rsquo;s learn how to install packages from other sources through Flakes. This is much more flexible than installing from nixpkgs directly. The most obvious benefit is that you can easily set the version of the software.</p>
<p>Use <a href="https://github.com/helix-editor/helix" target="_blank" rel="noopener noreferrer">helix</a> editor as an example, first we need to add the helix as an input into <code>flake.nix</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;NixOS configuration of Ryan Yin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># helix editor, use the tag 23.05</span>
</span></span><span class="line"><span class="cl">    <span class="n">helix</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:helix-editor/helix/23.05&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="n">inputs</span><span class="o">@</span><span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixosConfigurations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">nixos-test</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">nixosSystem</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">system</span> <span class="o">=</span> <span class="s2">&#34;x86_64-linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># set all inputs parameters as specialArgs of all sub module</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># so that we can use `helix` input in sub modules</span>
</span></span><span class="line"><span class="cl">        <span class="n">specialArgs</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">modules</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="sr">./configuration.nix</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then udpate <code>configuration.nix</code> to install <code>helix</code> from the input <code>helix</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="c1"># Nix will automatically inject `helix` from specialArgs</span>
</span></span><span class="line"><span class="cl"><span class="c1"># into the third parameter of this function through name matching</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="n">helix</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># omit other configuration......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">environment</span><span class="o">.</span><span class="n">systemPackages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">git</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim</span>
</span></span><span class="line"><span class="cl">    <span class="n">wget</span>
</span></span><span class="line"><span class="cl">    <span class="n">curl</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># install helix from the input `helix`</span>
</span></span><span class="line"><span class="cl">    <span class="n">helix</span><span class="o">.</span><span class="s2">&#34;</span><span class="si">${</span><span class="n">pkgs</span><span class="o">.</span><span class="n">system</span><span class="si">}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">packages</span><span class="o">.</span><span class="n">helix</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># omit other configuration......</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now deploy the changes by <code>sudo nixos-rebuild switch</code>, and then we can start the helix editor by <code>helix</code> command.</p>
<h3 id="5-add-custom-cache-mirror" class="headerLink">
    <a href="#5-add-custom-cache-mirror" class="header-mark"></a>5. Add Custom Cache Mirror</h3><p>To speed up package building, Nix provides <a href="https://cache.nixos.org" target="_blank" rel="noopener noreferrer">https://cache.nixos.org</a> to cache build results to avoid build every packages locally.</p>
<p>With the NixOS&rsquo;s classic configuration method, other cache sources can be added by using <code>nix-channel</code>, but Flakes avoids using any system-level configuration and environment variables to ensure that its build results are not affected by the environment(so the build results are reproducible).</p>
<p>Therefore, to customize the cache source, we must add the related configuration in <code>flake.nix</code> by using the parameter <code>nixConfig</code>. An example is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;NixOS configuration of Ryan Yin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># 1. To ensure purity, Flakes does not rely on the system&#39;s `/etc/nix/nix.conf`, so we have to set related configuration here.</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># 2. To ensure security, flake allows only a few nixConfig parameters to be set directly by default.</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#    you need to add `--accept-flake-config` when executing the nix command,</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#    otherwise all other parameters will be ignored, and an warning will printed by nix.</span>
</span></span><span class="line"><span class="cl">  <span class="n">nixConfig</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">experimental-features</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;nix-command&#34;</span> <span class="s2">&#34;flakes&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">substituters</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># replace official cache with a mirror located in China</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;https://mirrors.bfsu.edu.cn/nix-channels/store&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;https://cache.nixos.org/&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">extra-substituters</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># nix community&#39;s cache server</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;https://nix-community.cachix.org&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">extra-trusted-public-keys</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># omit some configuration...</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># omit some configuration...</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After the modification, run <code>sudo nixos-rebuild switch</code> to apply the updates.</p>
<h3 id="6-install-home-manager" class="headerLink">
    <a href="#6-install-home-manager" class="header-mark"></a>6. Install home-manager</h3><p>As I mentioned earlier, NixOS can only manage system-level configuration, to manage the Home directory(user-level configuration), we need to install home-manager.</p>
<p>According to the official document <a href="https://nix-community.github.io/home-manager/index.htm" target="_blank" rel="noopener noreferrer">Home Manager Manual</a>, in order to install home-manager as a module of NixOS, we need to create <code>/etc/nixos/home.nix</code> first, an example content shown below:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># please change the username &amp; home direcotry to your own</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="s2">&#34;ryan&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">homeDirectory</span> <span class="o">=</span> <span class="s2">&#34;/home/ryan&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># link the configuration file in current directory to the specified location in home directory</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># home.file.&#34;.config/i3/wallpaper.jpg&#34;.source = ./wallpaper.jpg;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># link all files in `./scripts` to `~/.config/i3/scripts`</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># home.file.&#34;.config/i3/scripts&#34; = {</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   source = ./scripts;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   recursive = true;   # link recursively</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   executable = true;  # make all files executable</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># };</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># encode the file content in nix configuration file directly</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># home.file.&#34;.xxx&#34;.text = &#39;&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#     xxx</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># &#39;&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># set cursor size and dpi for 4k monitor</span>
</span></span><span class="line"><span class="cl">  <span class="n">xresources</span><span class="o">.</span><span class="n">properties</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Xcursor.size&#34;</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Xft.dpi&#34;</span> <span class="o">=</span> <span class="mi">172</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># basic configuration of git, please change to your own</span>
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">git</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">userName</span> <span class="o">=</span> <span class="s2">&#34;Ryan Yin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">userEmail</span> <span class="o">=</span> <span class="s2">&#34;xiaoyin_c@qq.com&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Packages that should be installed to the user profile.</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">packages</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># here is some command line tools I use frequently</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># feel free to add your own or remove some of them</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">neofetch</span>
</span></span><span class="line"><span class="cl">    <span class="n">nnn</span> <span class="c1"># terminal file manager</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># archives</span>
</span></span><span class="line"><span class="cl">    <span class="n">zip</span>
</span></span><span class="line"><span class="cl">    <span class="n">xz</span>
</span></span><span class="line"><span class="cl">    <span class="n">unzip</span>
</span></span><span class="line"><span class="cl">    <span class="n">p7zip</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># utils</span>
</span></span><span class="line"><span class="cl">    <span class="n">ripgrep</span> <span class="c1"># recursively searches directories for a regex pattern</span>
</span></span><span class="line"><span class="cl">    <span class="n">jq</span> <span class="c1"># A lightweight and flexible command-line JSON processor</span>
</span></span><span class="line"><span class="cl">    <span class="n">yq-go</span> <span class="c1"># yaml processer https://github.com/mikefarah/yq</span>
</span></span><span class="line"><span class="cl">    <span class="n">exa</span> <span class="c1"># A modern replacement for ‘ls’</span>
</span></span><span class="line"><span class="cl">    <span class="n">fzf</span> <span class="c1"># A command-line fuzzy finder</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># networking tools</span>
</span></span><span class="line"><span class="cl">    <span class="n">mtr</span> <span class="c1"># A network diagnostic tool</span>
</span></span><span class="line"><span class="cl">    <span class="n">iperf3</span>
</span></span><span class="line"><span class="cl">    <span class="n">dnsutils</span>  <span class="c1"># `dig` + `nslookup`</span>
</span></span><span class="line"><span class="cl">    <span class="n">ldns</span> <span class="c1"># replacement of `dig`, it provide the command `drill`</span>
</span></span><span class="line"><span class="cl">    <span class="n">aria2</span> <span class="c1"># A lightweight multi-protocol &amp; multi-source command-line download utility</span>
</span></span><span class="line"><span class="cl">    <span class="n">socat</span> <span class="c1"># replacement of openbsd-netcat</span>
</span></span><span class="line"><span class="cl">    <span class="n">nmap</span> <span class="c1"># A utility for network discovery and security auditing</span>
</span></span><span class="line"><span class="cl">    <span class="n">ipcalc</span>  <span class="c1"># it is a calculator for the IPv4/v6 addresses</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># misc</span>
</span></span><span class="line"><span class="cl">    <span class="n">cowsay</span>
</span></span><span class="line"><span class="cl">    <span class="n">file</span>
</span></span><span class="line"><span class="cl">    <span class="n">which</span>
</span></span><span class="line"><span class="cl">    <span class="n">tree</span>
</span></span><span class="line"><span class="cl">    <span class="n">gnused</span>
</span></span><span class="line"><span class="cl">    <span class="n">gnutar</span>
</span></span><span class="line"><span class="cl">    <span class="n">gawk</span>
</span></span><span class="line"><span class="cl">    <span class="n">zstd</span>
</span></span><span class="line"><span class="cl">    <span class="n">gnupg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># nix related</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># it provides the command `nom` works just like `nix</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># with more details log output</span>
</span></span><span class="line"><span class="cl">    <span class="n">nix-output-monitor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># productivity</span>
</span></span><span class="line"><span class="cl">    <span class="n">hugo</span> <span class="c1"># static site generator</span>
</span></span><span class="line"><span class="cl">    <span class="n">glow</span> <span class="c1"># markdown previewer in terminal</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">btop</span>  <span class="c1"># replacement of htop/nmon</span>
</span></span><span class="line"><span class="cl">    <span class="n">iotop</span> <span class="c1"># io monitoring</span>
</span></span><span class="line"><span class="cl">    <span class="n">iftop</span> <span class="c1"># network monitoring</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># system call monitoring</span>
</span></span><span class="line"><span class="cl">    <span class="n">strace</span> <span class="c1"># system call monitoring</span>
</span></span><span class="line"><span class="cl">    <span class="n">ltrace</span> <span class="c1"># library call monitoring</span>
</span></span><span class="line"><span class="cl">    <span class="n">lsof</span> <span class="c1"># list open files</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># system tools</span>
</span></span><span class="line"><span class="cl">    <span class="n">sysstat</span>
</span></span><span class="line"><span class="cl">    <span class="n">lm_sensors</span> <span class="c1"># for `sensors` command</span>
</span></span><span class="line"><span class="cl">    <span class="n">ethtool</span>
</span></span><span class="line"><span class="cl">    <span class="n">pciutils</span> <span class="c1"># lspci</span>
</span></span><span class="line"><span class="cl">    <span class="n">usbutils</span> <span class="c1"># lsusb</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># 启用 starship，这是一个漂亮的 shell 提示符</span>
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">starship</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">settings</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">add_newline</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">aws</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">gcloud</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">line_break</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># alacritty - a cross-platform, GPU-accelerated terminal emulator</span>
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">alacritty</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">env</span><span class="o">.</span><span class="n">TERM</span> <span class="o">=</span> <span class="s2">&#34;xterm-256color&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">font</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">size</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw_bold_text_with_bright_colors</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">      <span class="n">scrolling</span><span class="o">.</span><span class="n">multiplier</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">selection</span><span class="o">.</span><span class="n">save_to_clipboard</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">bash</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">enableCompletion</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">bashrcExtra</span> <span class="o">=</span> <span class="s1">&#39;&#39;
</span></span></span><span class="line"><span class="cl"><span class="s1">      export PATH=&#34;$PATH:$HOME/bin:$HOME/.local/bin:$HOME/go/bin&#34;
</span></span></span><span class="line"><span class="cl"><span class="s1">    &#39;&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># set some aliases, feel free to add more or remove some</span>
</span></span><span class="line"><span class="cl">    <span class="n">shellAliases</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">urldecode</span> <span class="o">=</span> <span class="s2">&#34;python3 -c &#39;import sys, urllib.parse as ul; print(ul.unquote_plus(sys.stdin.read()))&#39;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">urlencode</span> <span class="o">=</span> <span class="s2">&#34;python3 -c &#39;import sys, urllib.parse as ul; print(ul.quote_plus(sys.stdin.read()))&#39;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">httpproxy</span> <span class="o">=</span> <span class="s2">&#34;export https_proxy=http://127.0.0.1:7890; export http_proxy=http://127.0.0.1:7890;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># This value determines the home Manager release that your</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># configuration is compatible with. This helps avoid breakage</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># when a new home Manager release introduces backwards</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># incompatible changes.</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># You can update home Manager without changing this value. See</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># the home Manager release notes for a list of state version</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># changes in each release.</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">stateVersion</span> <span class="o">=</span> <span class="s2">&#34;22.11&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Let home Manager install and manage itself.</span>
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After adding <code>/etc/nixos/home.nix</code>, you need to import this new configuration file in <code>/etc/nixos/flake.nix</code> to make use of it, use the following command to generate an example in the current folder for reference:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nix flake new example -t github:nix-community/home-manager#nixos
</span></span></code></pre></td></tr></table>
</div>
</div><p>After adjusting the parameters, the content of <code>/etc/nixos/flake.nix</code> is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;NixOS configuration&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nixos/nixpkgs/nixos-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">home-manager</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nix-community/home-manager&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">home-manager</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">follows</span> <span class="o">=</span> <span class="s2">&#34;nixpkgs&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="n">inputs</span><span class="o">@</span><span class="p">{</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="n">home-manager</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixosConfigurations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># TODO please change the hostname to your own</span>
</span></span><span class="line"><span class="cl">      <span class="n">nixos-test</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">nixosSystem</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">system</span> <span class="o">=</span> <span class="s2">&#34;x86_64-linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">modules</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="sr">./configuration.nix</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="c1"># make home-manager as a module of nixos</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># so that home-manager configuration will be deployed automatically when executing `nixos-rebuild switch`</span>
</span></span><span class="line"><span class="cl">          <span class="n">home-manager</span><span class="o">.</span><span class="n">nixosModules</span><span class="o">.</span><span class="n">home-manager</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">home-manager</span><span class="o">.</span><span class="n">useGlobalPkgs</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">home-manager</span><span class="o">.</span><span class="n">useUserPackages</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># TODO replace ryan with your own username</span>
</span></span><span class="line"><span class="cl">            <span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span> <span class="o">=</span> <span class="kn">import</span> <span class="sr">./home.nix</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Optionally, use home-manager.extraSpecialArgs to pass arguments to home.nix</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then run <code>sudo nixos-rebuild switch</code> to apply the configuration, and home-manager will be installed automatically.</p>
<p>After the installation is complete, all user-level packages and configuration can be managed through <code>/etc/nixos/home.nix</code>. When running <code>sudo nixos-rebuild switch</code>, the configuration of home-manager will be applied automatically. (<strong>It&rsquo;s not necessary to run <code>home-manager switch</code> manually</strong>!)</p>
<p>To find the options we can use in <code>home.nix</code>, referring to the following documents:</p>
<ul>
<li><a href="https://nix-community.github.io/home-manager/options.html" target="_blank" rel="noopener noreferrer">Home Manager - Appendix A. Configuration Options</a>: A list of all options, it is recommended to search for keywords in it.</li>
<li><a href="https://github.com/nix-community/home-manager" target="_blank" rel="noopener noreferrer">home-manager</a>: Some options are not listed in the official documentation, or the documentation is not clear enough, you can directly search and read the corresponding source code in this home-manager repo.</li>
</ul>
<h3 id="7-modular-nixos-configuration" class="headerLink">
    <a href="#7-modular-nixos-configuration" class="header-mark"></a>7. Modular NixOS configuration</h3><p>At this point, the skeleton of the entire system is basically configured. The current configuration structure in <code>/etc/nixos</code> should be as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── flake.lock
</span></span><span class="line"><span class="cl">├── flake.nix
</span></span><span class="line"><span class="cl">├── home.nix
</span></span><span class="line"><span class="cl">└── configuration.nix
</span></span></code></pre></td></tr></table>
</div>
</div><p>The functions of these four files are explained below:</p>
<ul>
<li><code>flake.lock</code>: An automatically generated version-lock file, which records all input sources, hash values, and version numbers of the entire flake to ensure that the system is reproducible.</li>
<li><code>flake.nix</code>: The entry file, which will be recognized and deployed when executing <code>sudo nixos-rebuild switch</code>.
<ul>
<li>See <a href="https://nixos.wiki/wiki/Flakes" target="_blank" rel="noopener noreferrer">Flakes - NixOS Wiki</a> for all options of flake.nix.</li>
</ul>
</li>
<li><code>configuration.nix</code>: Imported as a nix module in flake.nix, all system-level configuration are currently written here.
<ul>
<li>See <a href="https://nixos.org/manual/nixos/unstable/index.html#ch-configuration" target="_blank" rel="noopener noreferrer">Configuration - NixOS Manual</a> for all options of configuration.nix.</li>
</ul>
</li>
<li><code>home.nix</code>: Imported by home-manager as the configuration of the user <code>ryan</code> in flake.nix, that is, it contains all the configuration of <code>ryan</code>, and is responsible for managing <code>ryan</code>&rsquo;s home folder.
<ul>
<li>See <a href="https://nix-community.github.io/home-manager/options.html" target="_blank" rel="noopener noreferrer">Appendix A. Configuration Options - home Manager</a> for all options of home.nix.</li>
</ul>
</li>
</ul>
<p>By modifying these files, you can change the status of the system and the home directory declaratively.</p>
<p>As the configuration increases, it will be difficult to maintain the configuration by relying solely on <code>configuration.nix</code> and <code>home.nix</code>. Therefore, a better solution is to use the nix module system to split the configuration into multiple modules and write them in a classified manner.</p>
<p>nix module system provide a paramter, <code>imports</code>,which accept a list of <code>.nix</code> files, and merge all the configuration defined in these files into the current nix module. Note that the word used here is &ldquo;<strong>merge</strong>&rdquo;, which means that <code>imports</code> will <strong>NOT</strong> simply overwrite the duplicate configuration, but handle them more reasonably. For example, if I define <code>program.packages = [...]</code> in multiple modules, then <code>imports</code> will merge all <code>program.packages</code> defined in all nix modules into one list. Not only lists can be merged correctly, but attribute sets can also be merged correctly. The specific behavior can be explored by yourself.</p>
<blockquote>
<p>I only found a description of <code>imports</code> in <a href="https://nixos.org/manual/nixpkgs/unstable/#module-system-lib-evalModules-parameters" target="_blank" rel="noopener noreferrer">nixpkgs-unstable official manual - evalModules parameters</a>: <code>A list of modules. These are merged together to form the final configuration.</code>, it&rsquo;s a bit ambiguous&hellip;</p>
</blockquote>
<p>With the help of <code>imports</code>, we can split <code>home.nix</code> and <code>configuration.nix</code> into multiple nix modules defined in diffrent <code>.nix</code> files.</p>
<p>Use <a href="https://github.com/ryan4yin/nix-config/tree/v0.0.2" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/v0.0.2</a> as an example, which is the configuration of my previous NixOS system with i3 window manager. The structure of it is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">├── flake.lock
</span></span><span class="line"><span class="cl">├── flake.nix
</span></span><span class="line"><span class="cl">├── home
</span></span><span class="line"><span class="cl">│   ├── default.nix         <span class="c1"># here we import all submodules by imports = [...]</span>
</span></span><span class="line"><span class="cl">│   ├── fcitx5              <span class="c1"># fcitx5 input method&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│   │   ├── default.nix
</span></span><span class="line"><span class="cl">│   │   └── rime-data-flypy
</span></span><span class="line"><span class="cl">│   ├── i3                  <span class="c1"># i3 window manager&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│   │   ├── config
</span></span><span class="line"><span class="cl">│   │   ├── default.nix
</span></span><span class="line"><span class="cl">│   │   ├── i3blocks.conf
</span></span><span class="line"><span class="cl">│   │   ├── keybindings
</span></span><span class="line"><span class="cl">│   │   └── scripts
</span></span><span class="line"><span class="cl">│   ├── programs
</span></span><span class="line"><span class="cl">│   │   ├── browsers.nix
</span></span><span class="line"><span class="cl">│   │   ├── common.nix
</span></span><span class="line"><span class="cl">│   │   ├── default.nix   <span class="c1"># here we import all modules in programs folder by imports = [...]</span>
</span></span><span class="line"><span class="cl">│   │   ├── git.nix
</span></span><span class="line"><span class="cl">│   │   ├── media.nix
</span></span><span class="line"><span class="cl">│   │   ├── vscode.nix
</span></span><span class="line"><span class="cl">│   │   └── xdg.nix
</span></span><span class="line"><span class="cl">│   ├── rofi              <span class="c1">#  rofi launcher&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│   │   ├── configs
</span></span><span class="line"><span class="cl">│   │   │   ├── arc_dark_colors.rasi
</span></span><span class="line"><span class="cl">│   │   │   ├── arc_dark_transparent_colors.rasi
</span></span><span class="line"><span class="cl">│   │   │   ├── power-profiles.rasi
</span></span><span class="line"><span class="cl">│   │   │   ├── powermenu.rasi
</span></span><span class="line"><span class="cl">│   │   │   ├── rofidmenu.rasi
</span></span><span class="line"><span class="cl">│   │   │   └── rofikeyhint.rasi
</span></span><span class="line"><span class="cl">│   │   └── default.nix
</span></span><span class="line"><span class="cl">│   └── shell             <span class="c1"># shell/terminal related configuration</span>
</span></span><span class="line"><span class="cl">│       ├── common.nix
</span></span><span class="line"><span class="cl">│       ├── default.nix
</span></span><span class="line"><span class="cl">│       ├── nushell
</span></span><span class="line"><span class="cl">│       │   ├── config.nu
</span></span><span class="line"><span class="cl">│       │   ├── default.nix
</span></span><span class="line"><span class="cl">│       │   └── env.nu
</span></span><span class="line"><span class="cl">│       ├── starship.nix
</span></span><span class="line"><span class="cl">│       └── terminals.nix
</span></span><span class="line"><span class="cl">├── hosts
</span></span><span class="line"><span class="cl">│   ├── msi-rtx4090      <span class="c1"># My main machine&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│   │   ├── default.nix  <span class="c1"># This is the old configuration.nix, but most of the content has been split out to modules.</span>
</span></span><span class="line"><span class="cl">│   │   └── hardware-configuration.nix  <span class="c1"># hardware &amp; disk related configuration, autogenerated by nixos</span>
</span></span><span class="line"><span class="cl">│   └── nixos-test       <span class="c1"># my test machine&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│       ├── default.nix
</span></span><span class="line"><span class="cl">│       └── hardware-configuration.nix
</span></span><span class="line"><span class="cl">├── modules          <span class="c1"># some common NixOS modules that can be reused</span>
</span></span><span class="line"><span class="cl">│   ├── i3.nix
</span></span><span class="line"><span class="cl">│   └── system.nix
</span></span><span class="line"><span class="cl">└── wallpaper.jpg    <span class="c1"># wallpaper</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>For more details, see <a href="https://github.com/ryan4yin/nix-config/tree/v0.0.2" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/v0.0.2</a>.</p>
<h4 id="71-mkoverride-libmkdefault-and-libmkforce" class="headerLink">
    <a href="#71-mkoverride-libmkdefault-and-libmkforce" class="header-mark"></a>7.1. <code>mkOverride</code>, <code>lib.mkDefault</code> and <code>lib.mkForce</code></h4><p>You may found some people use <code>lib.mkDefault</code> <code>lib.mkForce</code> to define values in Nix files, as their names suggest, <code>lib.mkDefault</code> and <code>lib.mkForce</code> are used to set default values or force values of options.</p>
<p>You can read the source code of <code>lib.mkDefault</code> and <code>lib.mkForce</code> to understand them by running <code>nix repl -f '&lt;nixpkgs&gt;'</code> and then enter <code>:e lib.mkDefault</code>(To learn the basic usage of <code>nix repl</code>, just type <code>:?</code> to see the help information).</p>
<p>its source code is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">mkOverride</span> <span class="err">=</span> <span class="n">priority</span><span class="p">:</span> <span class="n">content</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="n">_type</span> <span class="o">=</span> <span class="s2">&#34;override&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">inherit</span> <span class="n">priority</span> <span class="n">content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">mkOptionDefault</span> <span class="err">=</span> <span class="n">mkOverride</span> <span class="mi">1500</span><span class="p">;</span> <span class="c1"># priority of option defaults</span>
</span></span><span class="line"><span class="cl">  <span class="n">mkDefault</span> <span class="err">=</span> <span class="n">mkOverride</span> <span class="mi">1000</span><span class="p">;</span> <span class="c1"># used in config sections of non-user modules to set a default</span>
</span></span><span class="line"><span class="cl">  <span class="n">mkImageMediaOverride</span> <span class="err">=</span> <span class="n">mkOverride</span> <span class="mi">60</span><span class="p">;</span> <span class="c1"># image media profiles can be derived by inclusion into host config, hence needing to override host config, but do allow user to mkForce</span>
</span></span><span class="line"><span class="cl">  <span class="n">mkForce</span> <span class="err">=</span> <span class="n">mkOverride</span> <span class="mi">50</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">mkVMOverride</span> <span class="err">=</span> <span class="n">mkOverride</span> <span class="mi">10</span><span class="p">;</span> <span class="c1"># used by ‘nixos-rebuild build-vm’</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>So <code>lib.mkDefault</code> is used to set default values of options, it has a priority of 1000 internally,
and <code>lib.mkForce</code> is used to force values of options, it has a priority of 50 internally.
If you just set a value of an option directly, it will be set with a default priority of 1000(the same as <code>lib.mkDefault</code>).</p>
<p>the lower the <code>priority</code>&rsquo;s value is, the higher the actual priority is, so <code>lib.mkForce</code> has a higher priority than <code>lib.mkDefault</code>.
If you defined multiple values with the same priority, Nix will throw an error.</p>
<p>They are useful to modularize the configuration, as you can set default values in a low-level module(base module), and force values in a high-level module.</p>
<p>For example, I defined some default values in <a href="https://github.com/ryan4yin/nix-config/blob/main/modules/nixos/core-server.nix#L30" target="_blank" rel="noopener noreferrer">https://github.com/ryan4yin/nix-config/blob/main/modules/nixos/core-server.nix#L30</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span> <span class="n">lib</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">nixpkgs</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">allowUnfree</span> <span class="o">=</span> <span class="n">lib</span><span class="o">.</span><span class="n">mkDefault</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And for my dekstop machine, I force the values to another value in <a href="https://github.com/ryan4yin/nix-config/blob/main/modules/nixos/core-desktop.nix#L15" target="_blank" rel="noopener noreferrer">https://github.com/ryan4yin/nix-config/blob/main/modules/nixos/core-desktop.nix#L15</a>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span> <span class="n">lib</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># import the base module</span>
</span></span><span class="line"><span class="cl">  <span class="n">imports</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="sr">./core-server.nix</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># override the default value defined in the base module</span>
</span></span><span class="line"><span class="cl">  <span class="n">nixpkgs</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">allowUnfree</span> <span class="o">=</span> <span class="n">lib</span><span class="o">.</span><span class="n">mkForce</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="72-libmkorder-libmkbefore-and-libmkafter" class="headerLink">
    <a href="#72-libmkorder-libmkbefore-and-libmkafter" class="header-mark"></a>7.2 <code>lib.mkOrder</code>, <code>lib.mkBefore</code> and <code>lib.mkAfter</code></h4><p><code>lib.mkBefore</code> and <code>lib.mkAfter</code> are used to set the merge order of <strong>list-type options</strong>, just like <code>lib.mkDefault</code> and <code>lib.mkForce</code>, they&rsquo;re also useful to modularize the configuration.</p>
<p>I said before that if you defined multiple values with the same <strong>override priority</strong>, Nix will throw an error.
But with <code>lib.mkOrder</code>, <code>lib.mkBefore</code> or <code>lib.mkAfter</code>, you can define multiple values with the same override priority, they will be merged in the order you defined.</p>
<p>Let&rsquo;s running <code>nix repl -f '&lt;nixpkgs&gt;'</code> and then enter <code>:e lib.mkBefore</code> to take a look at its source code(To learn the basic usage of <code>nix repl</code>, just type <code>:?</code> to see the help information):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">mkOrder</span> <span class="err">=</span> <span class="n">priority</span><span class="p">:</span> <span class="n">content</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span> <span class="n">_type</span> <span class="o">=</span> <span class="s2">&#34;order&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">inherit</span> <span class="n">priority</span> <span class="n">content</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">mkBefore</span> <span class="err">=</span> <span class="n">mkOrder</span> <span class="mi">500</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">mkAfter</span> <span class="err">=</span> <span class="n">mkOrder</span> <span class="mi">1500</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># The default priority for things that don&#39;t have a priority specified.</span>
</span></span><span class="line"><span class="cl">  <span class="n">defaultPriority</span> <span class="err">=</span> <span class="mi">100</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>So <code>lib.mkBefore</code> is a shortcut for <code>lib.mkOrder 500</code>, and <code>lib.mkAfter</code> is a shortcut for <code>lib.mkOrder 1500</code>.</p>
<p>To test the usage of <code>lib.mkBefore</code> and <code>lib.mkAfter</code>, let&rsquo;s create a simple Flake project:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># create flake.nix with the following content</span>
</span></span><span class="line"><span class="cl">› cat <span class="s">&lt;&lt;EOF | sudo tee flake.nix
</span></span></span><span class="line"><span class="cl"><span class="s">{
</span></span></span><span class="line"><span class="cl"><span class="s">  description = &#34;Ryan&#39;s NixOS Flake&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">  inputs = {
</span></span></span><span class="line"><span class="cl"><span class="s">    nixpkgs.url = &#34;github:NixOS/nixpkgs/nixos-23.05&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s">  };
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">  outputs = { self, nixpkgs, ... }@inputs: {
</span></span></span><span class="line"><span class="cl"><span class="s">    nixosConfigurations = {
</span></span></span><span class="line"><span class="cl"><span class="s">      &#34;nixos-test&#34; = nixpkgs.lib.nixosSystem {
</span></span></span><span class="line"><span class="cl"><span class="s">        system = &#34;x86_64-linux&#34;;
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">        modules = [
</span></span></span><span class="line"><span class="cl"><span class="s">          # demo module 1, insert git at the head of list
</span></span></span><span class="line"><span class="cl"><span class="s">          ({lib, pkgs, ...}: {
</span></span></span><span class="line"><span class="cl"><span class="s">            environment.systemPackages = lib.mkBefore [pkgs.git];
</span></span></span><span class="line"><span class="cl"><span class="s">          })
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">          # demo module 2, insert vim at the tail of list
</span></span></span><span class="line"><span class="cl"><span class="s">          ({lib, pkgs, ...}: {
</span></span></span><span class="line"><span class="cl"><span class="s">            environment.systemPackages = lib.mkAfter [pkgs.vim];
</span></span></span><span class="line"><span class="cl"><span class="s">          })
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">          # demo module 3, just add curl to the list normally
</span></span></span><span class="line"><span class="cl"><span class="s">          ({lib, pkgs, ...}: {
</span></span></span><span class="line"><span class="cl"><span class="s">            environment.systemPackages = with pkgs; [curl];
</span></span></span><span class="line"><span class="cl"><span class="s">          })
</span></span></span><span class="line"><span class="cl"><span class="s">        ];
</span></span></span><span class="line"><span class="cl"><span class="s">      };
</span></span></span><span class="line"><span class="cl"><span class="s">    };
</span></span></span><span class="line"><span class="cl"><span class="s">  };
</span></span></span><span class="line"><span class="cl"><span class="s">}
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># create flake.lock</span>
</span></span><span class="line"><span class="cl">› nix flake update
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># enter nix repl environment</span>
</span></span><span class="line"><span class="cl">› nix repl
</span></span><span class="line"><span class="cl">Welcome to Nix 2.13.3. Type :? <span class="k">for</span> help.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load the flake we just created</span>
</span></span><span class="line"><span class="cl">nix-repl&gt; :lf .
</span></span><span class="line"><span class="cl">Added <span class="m">9</span> variables.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># check the order of systemPackages</span>
</span></span><span class="line"><span class="cl">nix-repl&gt; outputs.nixosConfigurations.nixos-test.config.environment.systemPackages
</span></span><span class="line"><span class="cl"><span class="o">[</span> «derivation /nix/store/0xvn7ssrwa0ax646gl4hwn8cpi05zl9j-git-2.40.1.drv»
</span></span><span class="line"><span class="cl">  «derivation /nix/store/7x8qmbvfai68sf73zq9szs5q78mc0kny-curl-8.1.1.drv»
</span></span><span class="line"><span class="cl">  «derivation /nix/store/bly81l03kh0dfly9ix2ysps6kyn1hrjl-nixos-container.drv»
</span></span><span class="line"><span class="cl">  ......
</span></span><span class="line"><span class="cl">  ......
</span></span><span class="line"><span class="cl">  «derivation /nix/store/qpmpvq5azka70lvamsca4g4sf55j8994-vim-9.0.1441.drv» <span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>So we can see that the order of <code>systemPackages</code> is <code>git -&gt; curl -&gt; default packages -&gt; vim</code>, which is the same as the order we defined in <code>flake.nix</code>.</p>
<blockquote>
<p>Though it&rsquo;s useless to adjust the order of <code>systemPackages</code>, it may be helpful at some other places&hellip;</p>
</blockquote>
<h3 id="8-update-the-system" class="headerLink">
    <a href="#8-update-the-system" class="header-mark"></a>8. Update the system</h3><p>With Flakes, it is also very simple to update the system. Just run the following commands in <code>/etc/nixos</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># update flake.lock</span>
</span></span><span class="line"><span class="cl">nix flake update
</span></span><span class="line"><span class="cl"><span class="c1"># apply the updates</span>
</span></span><span class="line"><span class="cl">sudo nixos-rebuild switch
</span></span></code></pre></td></tr></table>
</div>
</div><p>Sometimes you may encounter some error of sha256 mismatch when running <code>nixos-rebuild switch</code>, which may be solved by updating <code>flake.lock</code> through <code>nix flake update</code>.</p>
<h3 id="9-downgrade-or-upgrade-some-packages" class="headerLink">
    <a href="#9-downgrade-or-upgrade-some-packages" class="header-mark"></a>9. Downgrade or upgrade some packages</h3><p>After using Flakes, most people are currently using the <code>nixos-unstable</code> branch of nixpkgs. Sometimes you will encounter some bugs, such as the <a href="https://github.com/swaywm/sway/issues/7562" target="_blank" rel="noopener noreferrer">chrome/vscode crash problem</a></p>
<p>To resolve problems, we may need to downgrade or upgrade some packages. In Flakes, all package versions and hash values are one-to-one corresponding to the git commit of their flake input.
Therefore, to downgrade or upgrade a package, we need to lock the git commit of its flake input.</p>
<p>For exmaple, let&rsquo;s add multiple nixpkgs, each using a different git commit or branch:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;NixOS configuration of Ryan Yin&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># default to nixos-unstable branch</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nixos/nixpkgs/nixos-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># the latest stable branch of nixpkgs, used to rollback the version of some packages</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># the current latest version is 22.11</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs-stable</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nixos/nixpkgs/nixos-22.11&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># we can also use git commit hash to lock the version</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs-fd40cef8d</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nixos/nixpkgs/fd40cef8d797670e203a27a91e4b8e6decf0b90c&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="n">inputs</span><span class="o">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">self</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs-stable</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs-fd40cef8d</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">  <span class="p">}:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixosConfigurations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">nixos-test</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">nixosSystem</span> <span class="k">rec</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">system</span> <span class="o">=</span> <span class="s2">&#34;x86_64-linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># The core parameter, which passes the non-default nixpkgs instances to other nix modules</span>
</span></span><span class="line"><span class="cl">        <span class="n">specialArgs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># To use packages from nixpkgs-stable, we need to configure some parameters for it first</span>
</span></span><span class="line"><span class="cl">          <span class="n">pkgs-stable</span> <span class="o">=</span> <span class="kn">import</span> <span class="n">nixpkgs-stable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">system</span> <span class="o">=</span> <span class="n">system</span><span class="p">;</span>  <span class="c1"># refer the `system` parameter form outer scope recursively</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># To use chrome, we need to allow the installation of non-free software</span>
</span></span><span class="line"><span class="cl">            <span class="n">config</span><span class="o">.</span><span class="n">allowUnfree</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="p">};</span>
</span></span><span class="line"><span class="cl">          <span class="n">pkgs-fd40cef8d</span> <span class="o">=</span> <span class="kn">import</span> <span class="n">nixpkgs-fd40cef8d</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">system</span> <span class="o">=</span> <span class="n">system</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">config</span><span class="o">.</span><span class="n">allowUnfree</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">modules</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="sr">./hosts/nixos-test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="c1"># omit other configuration...</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And then refer the packages from <code>pkgs-stable</code> or <code>pkgs-fd40cef8d</code> in your sub module, a home manager&rsquo;s sub module as an example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkgs</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># nix will search and jnject this parameter from specialArgs in flake.nix</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkgs-stable</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># pkgs-fd40cef8d,</span>
</span></span><span class="line"><span class="cl">  <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># refer packages from pkgs-stable instead of pkgs</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs-stable</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">firefox-wayland</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># chrome wayland support was broken on nixos-unstable branch, so fallback to stable branch for now</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># https://github.com/swaywm/sway/issues/7562</span>
</span></span><span class="line"><span class="cl">    <span class="n">google-chrome</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">vscode</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">package</span> <span class="o">=</span> <span class="n">pkgs-stable</span><span class="o">.</span><span class="n">vscode</span><span class="p">;</span>  <span class="c1"># refer vscode from pkgs-stable instead of pkgs</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After adjusted the configuration, deploy it with <code>sudo nixos-rebuild switch</code>, then your firefox/chrome/vscode will be downgraded to the version corresponding to <code>nixpkgs-stable</code> or <code>nixpkgs-fd40cef8d</code>.</p>
<blockquote>
<p>according to <a href="https://discourse.nixos.org/t/1000-instances-of-nixpkgs/17347" target="_blank" rel="noopener noreferrer">1000 instances of nixpkgs</a>, it&rsquo;s not a good practice to use <code>import</code> in sub modules to customize <code>nixpkgs</code>, because each <code>import</code> will create a new instance of nixpkgs, which will increase the build time and memory usage as the configuration grows. So here we create all nixpkgs instances in <code>flake.nix</code> to avoid this problem.</p>
</blockquote>
<h3 id="10-manage-the-configuration-with-git" class="headerLink">
    <a href="#10-manage-the-configuration-with-git" class="header-mark"></a>10. Manage the configuration with Git</h3><p>NixOS configuration is just a set of text files, it is very suitable to be managed with Git, and thus we can easily rollback to a previous version when we encounter some problems.</p>
<p>However, NixOS places the configuration in <code>/etc/nixos</code> by default, which requires root permissions to modify, which is not convenient for daily use.
Luckily, Flakes can solve this problem, you can place your flake anywhere you like.</p>
<p>For example, my usage is to place my flake in <code>~/nixos-config</code>, and then create a soft link in <code>/etc/nixos</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo mv /etc/nixos /etc/nixos.bak  <span class="c1"># backup the original configuration</span>
</span></span><span class="line"><span class="cl">sudo ln -s ~/nixos-config/ /etc/nixos
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># deploy the flake.nix located at the default location(/etc/nixos)</span>
</span></span><span class="line"><span class="cl">sudo nixos-rebuild switch
</span></span></code></pre></td></tr></table>
</div>
</div><p>And then you can use Git to manage the configuration in <code>~/nixos-config</code>. The configuration can be used with ordinary user-level permissions, and it is not required to be owned by root.</p>
<p>Another method is jsut to delete <code>/etc/nixos</code> directly, and specify the configuration file path each time you deploy it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo mv /etc/nixos /etc/nixos.bak
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/nixos-config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># `--flake .#nixos-test` means deploy the flake.nix located in the current directory, and the nixosConfiguration&#39;s name is `nixos-test`</span>
</span></span><span class="line"><span class="cl">sudo nixos-rebuild switch --flake .#nixos-test
</span></span></code></pre></td></tr></table>
</div>
</div><p>Choose whichever you like. After that, system rollback will become very simple, just switch to the previous commit and then deploy it:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> ~/nixos-config
</span></span><span class="line"><span class="cl"><span class="c1"># switch to the previous commit</span>
</span></span><span class="line"><span class="cl">git checkout HEAD^1
</span></span><span class="line"><span class="cl"><span class="c1"># deploy the flake.nix located in the current directory, and the nixosConfiguration&#39;s name is `nixos-test`</span>
</span></span><span class="line"><span class="cl">sudo nixos-rebuild switch --flake .#nixos-test
</span></span></code></pre></td></tr></table>
</div>
</div><p>More operations on Git are not described here. Generally speaking, rollback can be done directly through Git. Only when the system crashes completely, you will need to restart into bootloader and boot the system from the previous historical version.</p>
<h3 id="view-and-delete-history" class="headerLink">
    <a href="#view-and-delete-history" class="header-mark"></a>11. View and delete history data</h3><p>As we mentioned before, each deployment of NixOS will generate a new version, and all versions will be added to the system boot options. In addition to restarting the computer, we can also query all available historical versions through the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nix profile <span class="nb">history</span> --profile /nix/var/nix/profiles/system
</span></span></code></pre></td></tr></table>
</div>
</div><p>The command to clean up historical versions to release storage space:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># delete all historical versions older than 7 days</span>
</span></span><span class="line"><span class="cl">sudo nix profile wipe-history --profile /nix/var/nix/profiles/system  --older-than 7d
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># we need to collect garbages after wipe-history</span>
</span></span><span class="line"><span class="cl">sudo nix store gc --debug
</span></span></code></pre></td></tr></table>
</div>
</div><p>Another command returns all packages installed in the system:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nix-env -qa
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="vii-usage-of-nix-flakes" class="headerLink">
    <a href="#vii-usage-of-nix-flakes" class="header-mark"></a>VII. Usage of Nix Flakes</h2><p>Up to now, we have written a lot of configuration with Flakes to manage NixOS. Here is a brief introduction to the more detailed content of the Flakes, as well as the new command lines commonly used with flakes.</p>
<h3 id="flake-inputs" class="headerLink">
    <a href="#flake-inputs" class="header-mark"></a>1. Flake inputs</h3><p>The <code>inputs</code> in <code>flake.nix</code> is a attribute set, used to specify the dependencies of the current flake, there are many types of <code>inputs</code>, for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># use master branch of the GitHub repository as input, this is the most common input format</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:Mic92/nixpkgs/master&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Git URL, can be used for any Git repository based on https/ssh protocol</span>
</span></span><span class="line"><span class="cl">    <span class="n">git-example</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;git+https://git.somehost.tld/user/path?ref=branch&amp;rev=fdc8ef970de2b4634e1b3dca296e1ed918459a9e&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># The above example will also copy .git, use this for (shallow) local Git repos</span>
</span></span><span class="line"><span class="cl">    <span class="n">git-directory-example</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;git+file:/path/to/repo?shallow=1&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Local directories (for absolute paths you can omit &#39;path:&#39;)</span>
</span></span><span class="line"><span class="cl">    <span class="n">directory-example</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;path:/path/to/repo&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">bar</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:foo/bar/branch&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># if the input is not a flake, you need to set flake=false</span>
</span></span><span class="line"><span class="cl">      <span class="n">flake</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">sops-nix</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:Mic92/sops-nix&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># The `follows` keyword in inputs is used for inheritance.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># Here, `inputs.nixpkgs` of sops-nix is kept consistent with the `inputs.nixpkgs` in</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># the current flake, to avoid problems caused by different versions of nixpkgs.</span>
</span></span><span class="line"><span class="cl">      <span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">follows</span> <span class="o">=</span> <span class="s2">&#34;nixpkgs&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Pin flakes to a specific revision</span>
</span></span><span class="line"><span class="cl">    <span class="n">nix-doom-emacs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:vlaci/nix-doom-emacs?rev=238b18d7b2c8239f676358634bfb32693d3706f3&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">flake</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># To use a subdirectory of a repo, pass `dir=xxx`</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:foo/bar?dir=shu&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-flake-outputs" class="headerLink">
    <a href="#2-flake-outputs" class="header-mark"></a>2. Flake outputs</h3><p>the <code>outputs</code> in <code>flake.nix</code> are what a flake produces as part of its build. Each flake can have many different outputs simultaneously, including but not limited to:</p>
<ul>
<li>Nix packages: named <code>apps.&lt;system&gt;.&lt;name&gt;</code>, <code>packages.&lt;system&gt;.&lt;name&gt;</code>, or <code>legacyPackages.&lt;system&gt;.&lt;name&gt;</code>
<ul>
<li>we can build a package by command <code>nix build .#&lt;name&gt;</code></li>
</ul>
</li>
<li>Nix Helper Functions: named <code>lib</code>., which means a library for other flakes.</li>
<li>Nix development environments: named <code>devShells</code>
<ul>
<li><code>devShells</code> can be used by command <code>nix develop</code>, will be introduced later.</li>
</ul>
</li>
<li>NixOS configuration: named <code>nixosConfiguration</code>
<ul>
<li><code>nixosConfiguration</code> will be used by command <code>nixos-rebuild switch --flake .#&lt;name&gt;</code></li>
</ul>
</li>
<li>Nix templates: named <code>templates</code>
<ul>
<li>templates can be used by command <code>nix flake init --template &lt;reference&gt;</code></li>
</ul>
</li>
<li>Other user defined outputs, may be parsed by other nix-related tools.</li>
</ul>
<p>An example copy from NixOS Wiki:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="o">...</span> <span class="p">}</span><span class="o">@</span><span class="n">inputs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Executed by `nix flake check`</span>
</span></span><span class="line"><span class="cl">  <span class="n">checks</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span><span class="o">.</span><span class="s2">&#34;&lt;name&gt;&#34;</span> <span class="o">=</span> <span class="nb">derivation</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Executed by `nix build .#&lt;name&gt;`</span>
</span></span><span class="line"><span class="cl">  <span class="n">packages</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span><span class="o">.</span><span class="s2">&#34;&lt;name&gt;&#34;</span> <span class="o">=</span> <span class="nb">derivation</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Executed by `nix build .`</span>
</span></span><span class="line"><span class="cl">  <span class="n">packages</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="nb">derivation</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Executed by `nix run .#&lt;name&gt;`</span>
</span></span><span class="line"><span class="cl">  <span class="n">apps</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span><span class="o">.</span><span class="s2">&#34;&lt;name&gt;&#34;</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">type</span> <span class="o">=</span> <span class="s2">&#34;app&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">program</span> <span class="o">=</span> <span class="s2">&#34;&lt;store-path&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Executed by `nix run . -- &lt;args?&gt;`</span>
</span></span><span class="line"><span class="cl">  <span class="n">apps</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="p">{</span> <span class="n">type</span> <span class="o">=</span> <span class="s2">&#34;app&#34;</span><span class="p">;</span> <span class="n">program</span> <span class="o">=</span> <span class="s2">&#34;...&#34;</span><span class="p">;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Formatter (alejandra, nixfmt or nixpkgs-fmt)</span>
</span></span><span class="line"><span class="cl">  <span class="n">formatter</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span> <span class="o">=</span> <span class="nb">derivation</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Used for nixpkgs packages, also accessible via `nix build .#&lt;name&gt;`</span>
</span></span><span class="line"><span class="cl">  <span class="n">legacyPackages</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span><span class="o">.</span><span class="s2">&#34;&lt;name&gt;&#34;</span> <span class="o">=</span> <span class="nb">derivation</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Overlay, consumed by other flakes</span>
</span></span><span class="line"><span class="cl">  <span class="n">overlays</span><span class="o">.</span><span class="s2">&#34;&lt;name&gt;&#34;</span> <span class="o">=</span> <span class="n">final</span><span class="p">:</span> <span class="n">prev</span><span class="p">:</span> <span class="p">{</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Default overlay</span>
</span></span><span class="line"><span class="cl">  <span class="n">overlays</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Nixos module, consumed by other flakes</span>
</span></span><span class="line"><span class="cl">  <span class="n">nixosModules</span><span class="o">.</span><span class="s2">&#34;&lt;name&gt;&#34;</span> <span class="o">=</span> <span class="p">{</span> <span class="n">config</span> <span class="p">}:</span> <span class="p">{</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{};</span> <span class="n">config</span> <span class="o">=</span> <span class="p">{};</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Default module</span>
</span></span><span class="line"><span class="cl">  <span class="n">nixosModules</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Used with `nixos-rebuild --flake .#&lt;hostname&gt;`</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># nixosConfigurations.&#34;&lt;hostname&gt;&#34;.config.system.build.toplevel must be a derivation</span>
</span></span><span class="line"><span class="cl">  <span class="n">nixosConfigurations</span><span class="o">.</span><span class="s2">&#34;&lt;hostname&gt;&#34;</span> <span class="o">=</span> <span class="p">{};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Used by `nix develop .#&lt;name&gt;`</span>
</span></span><span class="line"><span class="cl">  <span class="n">devShells</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span><span class="o">.</span><span class="s2">&#34;&lt;name&gt;&#34;</span> <span class="o">=</span> <span class="nb">derivation</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Used by `nix develop`</span>
</span></span><span class="line"><span class="cl">  <span class="n">devShells</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="nb">derivation</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Hydra build jobs</span>
</span></span><span class="line"><span class="cl">  <span class="n">hydraJobs</span><span class="o">.</span><span class="s2">&#34;&lt;attr&gt;&#34;</span><span class="o">.</span><span class="s2">&#34;&lt;system&gt;&#34;</span> <span class="o">=</span> <span class="nb">derivation</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Used by `nix flake init -t &lt;flake&gt;#&lt;name&gt;`</span>
</span></span><span class="line"><span class="cl">  <span class="n">templates</span><span class="o">.</span><span class="s2">&#34;&lt;name&gt;&#34;</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span> <span class="o">=</span> <span class="s2">&#34;&lt;store-path&gt;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;template description goes here?&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Used by `nix flake init -t &lt;flake&gt;`</span>
</span></span><span class="line"><span class="cl">  <span class="n">templates</span><span class="o">.</span><span class="n">default</span> <span class="o">=</span> <span class="p">{</span> <span class="n">path</span> <span class="o">=</span> <span class="s2">&#34;&lt;store-path&gt;&#34;</span><span class="p">;</span> <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="p">;</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-flake-command-line-usage" class="headerLink">
    <a href="#3-flake-command-line-usage" class="header-mark"></a>3. Flake Command Line Usage</h3><p>after enabled <code>nix-command</code> &amp; <code>flake</code>, you can use <code>nix help</code> to get all the info of <a href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix.html" target="_blank" rel="noopener noreferrer">New Nix Commands</a>, some useful examples are listed below:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># `nixpkgs#ponysay` means `ponysay` from `nixpkgs` flake.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [nixpkgs](https://github.com/NixOS/nixpkgs) contains `flake.nix` file, so it&#39;s a flake.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `nixpkgs` is a falkeregistry id for `github:NixOS/nixpkgs/nixos-unstable`.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># you can find all the falkeregistry ids at &lt;https://github.com/NixOS/flake-registry/blob/master/flake-registry.json&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># so this command means install and run package `ponysay` in `nixpkgs` flake.</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Hello Nix&#34;</span> <span class="p">|</span> nix run <span class="s2">&#34;nixpkgs#ponysay&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># this command is the same as above, but use a full flake URI instead of falkeregistry id.</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Hello Nix&#34;</span> <span class="p">|</span> nix run <span class="s2">&#34;github:NixOS/nixpkgs/nixos-unstable#ponysay&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># instead of treat flake package as an application,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># this command use `devShells.example` in flake `zero-to-nix`&#39;s outputs, to setup the development environment,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and then open a bash shell in that environment.</span>
</span></span><span class="line"><span class="cl">nix develop <span class="s2">&#34;github:DeterminateSystems/zero-to-nix#example&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># instead of using a remote flake, you can open a bash shell using the flake located in the current directory.</span>
</span></span><span class="line"><span class="cl">mkdir my-flake <span class="o">&amp;&amp;</span> <span class="nb">cd</span> my-flake
</span></span><span class="line"><span class="cl"><span class="c1">## init a flake with template</span>
</span></span><span class="line"><span class="cl">nix flake init --template <span class="s2">&#34;github:DeterminateSystems/zero-to-nix#javascript-dev&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># open a bash shell using the flake in current directory</span>
</span></span><span class="line"><span class="cl">nix develop
</span></span><span class="line"><span class="cl"><span class="c1"># or if your flake has multiple devShell outputs, you can specify which one to use.</span>
</span></span><span class="line"><span class="cl">nix develop .#example
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># build package `bat` from flake `nixpkgs`, and put a symlink `result` in the current directory.</span>
</span></span><span class="line"><span class="cl">mkdir build-nix-package <span class="o">&amp;&amp;</span> <span class="nb">cd</span> build-nix-package
</span></span><span class="line"><span class="cl">nix build <span class="s2">&#34;nixpkgs#bat&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># build a local flake is the same as nix develop, skip it</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/DeterminateSystems/zero-to-nix" target="_blank" rel="noopener noreferrer">Zero to Nix - Determinate Systems</a> is a brand new guide to get started with Nix &amp; Flake, recommended to read for beginners.</p>
<h2 id="viii-nixpkgss-advanced-usage" class="headerLink">
    <a href="#viii-nixpkgss-advanced-usage" class="header-mark"></a>VIII. Nixpkgs&rsquo;s Advanced Usage</h2><p><code>callPackage</code>, <code>Overriding</code>, and <code>Overlays</code> are the techniques occasionally used when using Nix to customize the build method of Nix packages.</p>
<p>We know that many programs have a large number of build parameters that need to be configured, and different users may want to use different build parameters. This is where <code>Overriding</code> and <code>Overlays</code> come in handy. Let me give you a few examples I have encountered:</p>
<ol>
<li><a href="https://github.com/NixOS/nixpkgs/blob/e4246ae1e7f78b7087dce9c9da10d28d3725025f/pkgs/tools/inputmethods/fcitx5/fcitx5-rime.nix" target="_blank" rel="noopener noreferrer"><code>fcitx5-rime.nix</code></a>: By default, <code>fcitx5-rime</code> use <code>rime-data</code> as the value of <code>rimeDataPkgs</code>, but this parameter can be customized by <code>override</code>.</li>
<li><a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/editors/vscode/with-extensions.nix" target="_blank" rel="noopener noreferrer"><code>vscode/with-extensions.nix</code></a>: This package for VS Code can also be customized by overriding the value of <code>vscodeExtensions</code>, thus we can install some custom plugins into VS Code.
<ul>
<li><a href="https://github.com/nix-community/nix-vscode-extensions" target="_blank" rel="noopener noreferrer"><code>nix-vscode-extensions</code></a>: This is a vscode plugin manager implemented by overriding <code>vscodeExtensions</code>.</li>
</ul>
</li>
<li><a href="https://github.com/NixOS/nixpkgs/blob/416ffcd08f1f16211130cd9571f74322e98ecef6/pkgs/applications/networking/browsers/firefox/common.nix" target="_blank" rel="noopener noreferrer"><code>firefox/common.nix</code></a>: Firefox has many customizable parameters too.</li>
<li>&hellip;</li>
</ol>
<p>In short, <code>Overriding</code> or <code>Overlays</code> can be used to customize the build parameters of Nix packages.</p>
<h3 id="callpackage" class="headerLink">
    <a href="#callpackage" class="header-mark"></a>1. pkgs.callPackage</h3><blockquote>
<p><a href="https://nixos.org/guides/nix-pills/callpackage-design-pattern.html" target="_blank" rel="noopener noreferrer">Chapter 13. Callpackage Design Pattern - Nix Pills</a></p>
</blockquote>
<p>In the previous content, We have used <code>import xxx.nix</code> to import Nix files many times, this syntax simply returns the execution result of the file, without any further processing of the it.</p>
<p><code>pkgs.callPackage</code> is also used to import Nix files, its syntax is <code>pkgs.callPackage xxx.nix { ... }</code>, but unlike <code>import</code>, the Nix file imported by it must be a Derivation or a function that returns a Derivation. Its result is a Derivation(a software package) too.</p>
<p>So what does the Nix file that can be used as a parameter of <code>pkgs.callPackge</code> look like? You can take a look at the <code>hello.nix</code> <code>fcitx5-rime.nix</code> <code>vscode/with-extensions.nix</code> <code>firefox/common.nix</code> we mentioned earlier, they can all be imported by <code>pkgs.callPackage</code>.</p>
<p>When the <code>xxx.nix</code> used in <code>pkgs.callPackge xxx.nix {...}</code> is a function (most Nix packages are like this), the execution flow is as follows:</p>
<ol>
<li><code>pkgs.callPackge xxx.nix {...}</code> will first <code>import xxx.nix</code> to get the function defined in it. The parameters of this function usually have <code>lib</code>, <code>stdenv</code>, <code>fetchurl</code> and other parameters, as well as some custom parameters, which usually have default values.</li>
<li>Then <code>pkgs.callPackge</code> will first look up the value matching the name from the current environment as the parameter to be passed to the function. parameters like <code>lib</code> <code>stdenv</code> <code>fetchurl</code> are defined in nixpkgs, and they will be found in this step.</li>
<li>Then <code>pkgs.callPackge</code> will merge its second parameter <code>{...}</code> with the attribute set obtained in the previous step, and then pass it to the function imported from <code>xxx.nix</code> and execute it.</li>
<li>Finally we get a Derivation as the result of the function execution.</li>
</ol>
<p>So the common usage of <code>pkgs.callPackage</code> is to import custom Nix packages and used it in Nix Module.
For example, we wrote a <code>hello.nix</code> ourselves, and then we can use <code>pkgs.callPackage ./hello.nix {}</code> in any Nix Module to import and use it.</p>
<h3 id="overriding" class="headerLink">
    <a href="#overriding" class="header-mark"></a>2. Overriding</h3><blockquote>
<p><a href="https://nixos.org/manual/nixpkgs/stable/#chap-overrides" target="_blank" rel="noopener noreferrer">Chapter 4. Overriding - nixpkgs Manual</a></p>
</blockquote>
<p>Simply put, all Nix packages in nixpkgs can be customized with <code>&lt;pkg&gt;.override {}</code> to define some build parameters, which returns a new Derivation that uses custom parameters. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">pkgs</span><span class="o">.</span><span class="n">fcitx5-rime</span><span class="o">.</span><span class="n">override</span> <span class="p">{</span><span class="n">rimeDataPkgs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="sr">./rime-data-flypy</span>
</span></span><span class="line"><span class="cl"><span class="p">];}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The result of this Nix expression is a new Derivation, where <code>rimeDataPkgs</code> is overridden as <code>[./rime-data-flypy]</code>, while other parameters remain their original values.</p>
<p>How to know which parameters of <code>fcitx5-rime</code> can be overridden? There are several ways:</p>
<ol>
<li>Try to find the source code of the package in the nixpkgs repository on GitHub, such as <a href="https://github.com/NixOS/nixpkgs/blob/e4246ae1e7f78b7087dce9c9da10d28d3725025f/pkgs/tools/inputmethods/fcitx5/fcitx5-rime.nix" target="_blank" rel="noopener noreferrer">fcitx5-rime.nix</a>
<ol>
<li>Note: Be sure to select the correct branch, for example, if you are using the nixos-unstable branch, you need to find it in the nixos-unstable branch.</li>
</ol>
</li>
<li>Check by using <code>nix repl '&lt;nixpkgs&gt;'</code>, then enter <code>:e pkgs.fcitx5-rime</code>, which will open the source code of this package through the default editor, and then you can see all the parameters of this package.
<ol>
<li>Note: To learn the basic usage of <code>nix repl</code>, just type <code>:?</code> to see the help information</li>
</ol>
</li>
</ol>
<p>Through these two methods, you can see that the <code>fcitx5-rime</code> package has the following input parameters, which can all be modified by <code>override</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span> <span class="n">lib</span><span class="o">,</span> <span class="n">stdenv</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">fetchFromGitHub</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">pkg-config</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">cmake</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">extra-cmake-modules</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">gettext</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">fcitx5</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">librime</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">rime-data</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">symlinkJoin</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">rimeDataPkgs</span> <span class="o">?</span> <span class="p">[</span> <span class="n">rime-data</span> <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">stdenv</span><span class="o">.</span><span class="n">mkDerivation</span> <span class="k">rec</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Instead of override the function&rsquo;s parameters, we can also override the attributes of the Derivation created by <code>stdenv.mkDerivation</code>.</p>
<p>Take <code>pkgs.hello</code> as an example, first check the source code of this package through the method we mentioned earlier:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="c1"># https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/applications/misc/hello/default.nix</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">callPackage</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">lib</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">stdenv</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">fetchurl</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">nixos</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">testers</span>
</span></span><span class="line"><span class="cl"><span class="o">,</span> <span class="n">hello</span>
</span></span><span class="line"><span class="cl"><span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">stdenv</span><span class="o">.</span><span class="n">mkDerivation</span> <span class="p">(</span><span class="n">finalAttrs</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">pname</span> <span class="o">=</span> <span class="s2">&#34;hello&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">version</span> <span class="o">=</span> <span class="s2">&#34;2.12.1&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">src</span> <span class="o">=</span> <span class="n">fetchurl</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;mirror://gnu/hello/hello-</span><span class="si">${</span><span class="n">finalAttrs</span><span class="o">.</span><span class="n">version</span><span class="si">}</span><span class="s2">.tar.gz&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">sha256</span> <span class="o">=</span> <span class="s2">&#34;sha256-jZkUKv2SV28wsM18tCqNxoCZmLxdYH2Idh9RLibH2yA=&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">doCheck</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The attributes showed above, such as <code>pname</code> <code>version</code> <code>src</code> <code>doCheck</code>, can all be overridden by <code>overrideAttrs</code>, for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">helloWithDebug</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">hello</span><span class="o">.</span><span class="n">overrideAttrs</span> <span class="p">(</span><span class="n">finalAttrs</span><span class="p">:</span> <span class="n">previousAttrs</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">doCheck</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here we use <code>overrideAttrs</code> to override <code>doCheck</code>, while other attributes remain their original values.</p>
<p>Some default attributes defined in <code>stdenv.mkDerivation</code> can also be overridden by <code>overrideAttrs</code>, for example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">helloWithDebug</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">hello</span><span class="o">.</span><span class="n">overrideAttrs</span> <span class="p">(</span><span class="n">finalAttrs</span><span class="p">:</span> <span class="n">previousAttrs</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">separateDebugInfo</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The attribute we override here, <code>separateDebugInfo</code>, is defined in <code>stdenv.mkDerivation</code>, not in the source code of <code>hello</code>.
We can check the source code of <code>stdenv.mkDerivation</code> to see all the attributes defined in it by using <code>nix repl '&lt;nixpkgs&gt;'</code> and then enter <code>:e stdenv.mkDerivation</code>(To learn the basic usage of <code>nix repl</code>, just type <code>:?</code> to see the help information).</p>
<h3 id="3-overlays" class="headerLink">
    <a href="#3-overlays" class="header-mark"></a>3. Overlays</h3><blockquote>
<p><a href="https://nixos.org/manual/nixpkgs/stable/#chap-overlays" target="_blank" rel="noopener noreferrer">Chapter 3. Overlays - nixpkgs Manual</a></p>
</blockquote>
<p>The <code>override</code> we introduced previously will generate a new Derivation, which does not affect the original Derivation in <code>pkgs</code>, and is only suitable for use as a local parameter,
if you need to override a Derivation that is also depended on by other Nix packages, then other Nix packages will still use the original Derivation.</p>
<p>To solve this problem, Nix provides the ability to use <code>overlays</code>. Simply put, <code>overlays</code> can globally modify the Derivation in <code>pkgs</code>.</p>
<p>In the classic Nix environment, Nix automatically applies all <code>overlays</code> configuration under the paths <code>~/.config/nixpkgs/overlays.nix</code> <code>~/.config/nixpkgs/overlays/*.nix</code>,
but in Flakes, in order to ensure the reproducibility of the system, it cannot depend on any configuration outside the Git repository, so this classic method cannot be used now.</p>
<p>When using Flakes to write configuration for NixOS, home Manager and NixOS both provide the <code>nixpkgs.overlays</code> option to define <code>overlays</code>, related documentation:</p>
<ul>
<li><a href="https://nix-community.github.io/home-manager/options.html#opt-nixpkgs.overlays" target="_blank" rel="noopener noreferrer">home-manager docs - <code>nixpkgs.overlays</code></a></li>
<li><a href="https://github.com/NixOS/nixpkgs/blob/30d7dd7e7f2cba9c105a6906ae2c9ed419e02f17/nixos/modules/misc/nixpkgs.nix#L169" target="_blank" rel="noopener noreferrer">nixpkgs source code - <code>nixpkgs.overlays</code></a></li>
</ul>
<p>For example, the following content is a Module that loads Overlays, which can be used as either a home Manager Module or a NixOS Module, because the two definitions are exactly the same:</p>
<blockquote>
<p>home Manager is an external component after all, and most people use the unstable branch of home Manager &amp; nixpkgs, which sometimes causes problems with home Manager Module, so it is recommended to import <code>overlays</code> in a NixOS Module.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="n">lib</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">nixpkgs</span><span class="o">.</span><span class="n">overlays</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># overlayer1 - use self and super to express the inheritance relationship</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">self</span><span class="p">:</span> <span class="n">super</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">     <span class="n">google-chrome</span> <span class="o">=</span> <span class="n">super</span><span class="o">.</span><span class="n">google-chrome</span><span class="o">.</span><span class="n">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">       <span class="n">commandLineArgs</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">         <span class="s2">&#34;--proxy-server=&#39;https=127.0.0.1:3128;http=127.0.0.1:3128&#39;&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># overlayer2 - you can also use `extend` to inherit other overlays</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># use `final` and `prev` to express the relationship between the new and the old</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">final</span><span class="p">:</span> <span class="n">prev</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">steam</span> <span class="o">=</span> <span class="n">prev</span><span class="o">.</span><span class="n">steam</span><span class="o">.</span><span class="n">override</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">extraPkgs</span> <span class="o">=</span> <span class="n">pkgs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">          <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="n">keyutils</span>
</span></span><span class="line"><span class="cl">            <span class="n">libkrb5</span>
</span></span><span class="line"><span class="cl">            <span class="n">libpng</span>
</span></span><span class="line"><span class="cl">            <span class="n">libpulseaudio</span>
</span></span><span class="line"><span class="cl">            <span class="n">libvorbis</span>
</span></span><span class="line"><span class="cl">            <span class="n">stdenv</span><span class="o">.</span><span class="n">cc</span><span class="o">.</span><span class="n">cc</span><span class="o">.</span><span class="n">lib</span>
</span></span><span class="line"><span class="cl">            <span class="n">xorg</span><span class="o">.</span><span class="n">libXcursor</span>
</span></span><span class="line"><span class="cl">            <span class="n">xorg</span><span class="o">.</span><span class="n">libXi</span>
</span></span><span class="line"><span class="cl">            <span class="n">xorg</span><span class="o">.</span><span class="n">libXinerama</span>
</span></span><span class="line"><span class="cl">            <span class="n">xorg</span><span class="o">.</span><span class="n">libXScrnSaver</span>
</span></span><span class="line"><span class="cl">          <span class="p">];</span>
</span></span><span class="line"><span class="cl">        <span class="n">extraProfile</span> <span class="o">=</span> <span class="s2">&#34;export GDK_SCALE=2&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># overlay3 - define overlays in other files</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># here the content of overlay3.nix is the same as above:</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#   `final: prev: { xxx = prev.xxx.override { ... }; }`</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="kn">import</span> <span class="sr">./overlays/overlay3.nix</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>refer to this example to write your own overlays, import the configuration as a NixOS Module or a home Manager Module, and then deploy it to see the effect.</p>
<h4 id="modular-overlays" class="headerLink">
    <a href="#modular-overlays" class="header-mark"></a>Modular overlays</h4><p>The previous example shows how to write overlays, but all overlays are written in a single nix file, which is a bit difficult to maintain.</p>
<p>To resolve this problem,here is a best practice of how to manage overlays in a modular way.</p>
<p>First, create an <code>overlays</code> folder in the Git repository to store all overlays configuration, and then create <code>overlays/default.nix</code>, whose content is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">args</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># import all nix files in the current folder, and execute them with args as parameters</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># The return value is a list of all execution results, which is the list of overlays</span>
</span></span><span class="line"><span class="cl">  <span class="nb">builtins</span><span class="o">.</span><span class="nb">map</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="n">f</span><span class="p">:</span> <span class="p">(</span><span class="kn">import</span> <span class="p">(</span><span class="sr">./.</span> <span class="o">+</span> <span class="s2">&#34;/</span><span class="si">${</span><span class="n">f</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span> <span class="n">args</span><span class="p">))</span>  <span class="c1"># the first parameter of map, a function that import and execute a nix file</span>
</span></span><span class="line"><span class="cl">  <span class="p">(</span><span class="nb">builtins</span><span class="o">.</span><span class="n">filter</span>          <span class="c1"># the second parameter of map, a list of all nix files in the current folder except default.nix</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">f</span><span class="p">:</span> <span class="n">f</span> <span class="o">!=</span> <span class="s2">&#34;default.nix&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="nb">builtins</span><span class="o">.</span><span class="n">attrNames</span> <span class="p">(</span><span class="nb">builtins</span><span class="o">.</span><span class="n">readDir</span> <span class="sr">./.</span><span class="p">)))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then you can write all overlays configuration in the <code>overlays</code> folder, an example configuration <code>overlays/fcitx5/default.nix</code> is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="c1"># to add my custom input method, I override the default rime-data here</span>
</span></span><span class="line"><span class="cl"><span class="c1"># refer to https://github.com/NixOS/nixpkgs/blob/e4246ae1e7f78b7087dce9c9da10d28d3725025f/pkgs/tools/inputmethods/fcitx5/fcitx5-rime.nix</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span><span class="n">pkgs</span><span class="o">,</span> <span class="n">config</span><span class="o">,</span> <span class="n">lib</span><span class="o">,</span> <span class="o">...</span><span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">self</span><span class="p">:</span> <span class="n">super</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># my custom input method&#39;s rime-data, downloaded from https://flypy.com</span>
</span></span><span class="line"><span class="cl">  <span class="n">rime-data</span> <span class="o">=</span> <span class="sr">./rime-data-flypy</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">fcitx5-rime</span> <span class="o">=</span> <span class="n">super</span><span class="o">.</span><span class="n">fcitx5-rime</span><span class="o">.</span><span class="n">override</span> <span class="p">{</span> <span class="n">rimeDataPkgs</span> <span class="o">=</span> <span class="p">[</span> <span class="sr">./rime-data-flypy</span> <span class="p">];</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>I custom the <code>rime-data</code> package through the overlay shown above.</p>
<p>At last, you need to load all overlays returned by <code>overlays/default.nix</code> through the <code>nixpkgs.overlays</code> option, add the following parameter to any NixOS Module to achieve this:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="n">lib</span><span class="o">,</span> <span class="o">...</span> <span class="p">}</span> <span class="o">@</span> <span class="n">args</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># add this parameter</span>
</span></span><span class="line"><span class="cl">  <span class="n">nixpkgs</span><span class="o">.</span><span class="n">overlays</span> <span class="o">=</span> <span class="kn">import</span> <span class="sr">/path/to/overlays/dir</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>For example, you can just add it directly in <code>flake.nix</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;NixOS configuration of Ryan Yin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="n">inputs</span><span class="o">@</span><span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixosConfigurations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">nixos-test</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">nixosSystem</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">system</span> <span class="o">=</span> <span class="s2">&#34;x86_64-linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">specialArgs</span> <span class="o">=</span> <span class="n">inputs</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">modules</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="sr">./hosts/nixos-test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="c1"># add the following inline module definition</span>
</span></span><span class="line"><span class="cl">          <span class="c1">#   here, all parameters of modules are passed to overlays</span>
</span></span><span class="line"><span class="cl">          <span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="p">{</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">overlays</span> <span class="o">=</span> <span class="kn">import</span> <span class="sr">./overlays</span> <span class="n">args</span><span class="p">;</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="c1"># ......</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>By using this modular approach, it is very convenient to modularize all your overlays. Taking my configuration as an example, the structure of the <code>overlays</code> folder is roughly as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="n">flake</span><span class="o">.</span><span class="n">lock</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="n">flake</span><span class="o">.</span><span class="n">nix</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="n">home</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="n">hosts</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="n">modules</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="o">......</span>
</span></span><span class="line"><span class="cl"><span class="err">├──</span> <span class="n">overlays</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">├──</span> <span class="n">default</span><span class="o">.</span><span class="n">nix</span>         <span class="c1"># it returns a list of all overlays.</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>   <span class="err">└──</span> <span class="n">fcitx5</span>              <span class="c1"># fcitx5 overlay</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>       <span class="err">├──</span> <span class="n">default</span><span class="o">.</span><span class="n">nix</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>       <span class="err">├──</span> <span class="n">README</span><span class="o">.</span><span class="n">md</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>       <span class="err">└──</span> <span class="n">rime-data-flypy</span>  <span class="c1"># my custom rime-data</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>           <span class="err">└──</span> <span class="n">share</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>               <span class="err">└──</span> <span class="n">rime-data</span>
</span></span><span class="line"><span class="cl"><span class="err">│</span>                   <span class="err">├──</span> <span class="o">......</span>  <span class="c1"># rime-data files</span>
</span></span><span class="line"><span class="cl"><span class="err">└──</span> <span class="n">README</span><span class="o">.</span><span class="n">md</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="when-will-flakes-stablized" class="headerLink">
    <a href="#when-will-flakes-stablized" class="header-mark"></a>IX. When will flakes stablized</h2><p>Throughout so much content of this post, I&rsquo;ve introduced in detail how to start using Flakes to configure NixOS, but at the beginning of this post we mentioned that <strong>Flakes is still an experimental feature, which is worrying</strong>. If Flakes is greatly changed or even removed, we may need to spend a lot of time to migrate the configuration.</p>
<p>In fact this is also one of the most concerned issues in the entire NixOS community, <strong>when will Flakes become a stable feature</strong>?</p>
<p>I dived into some details about flakes:</p>
<ul>
<li><a href="https://github.com/NixOS/rfcs/pull/136" target="_blank" rel="noopener noreferrer">https://github.com/NixOS/rfcs/pull/136</a>: A plan to stabilize Flakes and the new CLI incrementally, still WIP.</li>
<li><a href="https://discourse.nixos.org/t/why-are-flakes-still-experimental/29317" target="_blank" rel="noopener noreferrer">https://discourse.nixos.org/t/why-are-flakes-still-experimental/29317</a>: A post, Why are flakes still experimental?</li>
<li><a href="https://grahamc.com/blog/flakes-are-an-obviously-good-thing/" target="_blank" rel="noopener noreferrer">https://grahamc.com/blog/flakes-are-an-obviously-good-thing/</a>: Flakes are such an obviously good thing&hellip; but the design and development process should be better.</li>
<li><a href="https://nixos-foundation.notion.site/1-year-roadmap-0dc5c2ec265a477ea65c549cd5e568a9" target="_blank" rel="noopener noreferrer">https://nixos-foundation.notion.site/1-year-roadmap-0dc5c2ec265a477ea65c549cd5e568a9</a>： A roadmap of nixos fundation, which includes plan about the stabilization of flakes.</li>
</ul>
<p>After reading all of these, I feel like that flakes will eventually be stabilized in one or two years, with some important breaking changes.</p>
<p>The benefits of Flakes are obvious, and the entire NixOS community likes it very much. Currently, more than half of the users are using Flakes (especially new users in the NixOS community), so we can be sure that Flakes will never be deprecated.</p>
<p>But currently Flakes still has many problems, and it is likely to introduce some breaking changes in the process of stablizing it, and it&rsquo;s currently uncertain how greatly the breaking changes will be.</p>
<p>So overall, I still recommend everyone to use Flakes, but be prepared for the problems that may be caused by the upcomming breaking changes.</p>
<h2 id="x-advanced-usage" class="headerLink">
    <a href="#x-advanced-usage" class="header-mark"></a>X. Advanced Usage</h2><p>After becoming familiar with the Nix toolchain, you can further explore Nix&rsquo;s three manuals to discover more ways to use it:</p>
<ul>
<li><a href="https://nixos.org/manual/nix/stable/package-management/profiles.html" target="_blank" rel="noopener noreferrer">Nix Reference Manual</a>: A guide to the Nix package manager, which mainly covers the design of the package manager and instructions for using it from the command line.</li>
<li><a href="https://nixos.org/manual/nixpkgs/unstable/" target="_blank" rel="noopener noreferrer">nixpkgs Manual</a>: A manual that introduces parameters of Nixpkgs, how to use, modify, and package Nix packages.</li>
<li><a href="https://nixos.org/manual/nixos/unstable/" target="_blank" rel="noopener noreferrer">NixOS Manual</a>: A user manual for NixOS, mainly including configuration instructions for system-level components such as Wayland/X11 and GPU.</li>
<li><a href="https://nixos.org/guides/nix-pills" target="_blank" rel="noopener noreferrer">nix-pills</a>: Nix Pills provides an in-depth explanation of how to use Nix to build software packages. It is written in a clear and understandable way and is worth reading, as it is also sufficiently in-depth.</li>
</ul>
<p>After becoming familiar with Flakes, you may want to try some advanced techniques. Here are some popular community projects to try:</p>
<ul>
<li><a href="https://github.com/hercules-ci/flake-parts" target="_blank" rel="noopener noreferrer">flake-parts</a>: Simplify the writing and maintenance of configuration through the Module module system.</li>
<li><a href="https://github.com/gytis-ivaskevicius/flake-utils-plus" target="_blank" rel="noopener noreferrer">flake-utils-plus</a>: A third-party package for simplifying Flake configuration, which is apparently more powerful.</li>
<li><a href="https://github.com/divnix/digga" target="_blank" rel="noopener noreferrer">digga</a>: A large and comprehensive Flake template that combines the functionality of various useful Nix toolkits, but has a complex structure and requires some experience to navigate.</li>
<li>etc.</li>
</ul>
<p>And many other useful community projects to explore, here are some of them:</p>
<ul>
<li><a href="https://github.com/the-nix-way/dev-templates" target="_blank" rel="noopener noreferrer">dev-templates</a>: Dev environments for numerous languages based on Nix flakes.</li>
<li><a href="https://github.com/cachix/devenv" target="_blank" rel="noopener noreferrer">devenv</a>: development environment management</li>
<li><a href="https://github.com/ryantm/agenix" target="_blank" rel="noopener noreferrer">agenix</a>: secrets management</li>
<li><a href="https://github.com/zhaofengli/colmena" target="_blank" rel="noopener noreferrer">colmena</a>: NixOS deployment tools</li>
<li><a href="https://github.com/nix-community/nixos-generators" target="_blank" rel="noopener noreferrer">nixos-generator</a>: generate iso/qcow2/&hellip; from nixos configuration</li>
<li><a href="https://github.com/nix-community/lanzaboote" target="_blank" rel="noopener noreferrer">lanzaboote</a>: enable secure boot for NixOS</li>
<li><a href="https://github.com/nix-community/impermanence" target="_blank" rel="noopener noreferrer">impermanence</a>: used to make NixOS stateless, to imporve the reproduciability of NixOS system.</li>
</ul>
<h2 id="xi-best-practices" class="headerLink">
    <a href="#xi-best-practices" class="header-mark"></a>XI. Best Practices</h2><blockquote>
<p><a href="https://discourse.nixos.org/t/tips-tricks-for-nixos-desktop/28488" target="_blank" rel="noopener noreferrer">Tips&amp;Tricks for NixOS Desktop - NixOS Discourse</a></p>
</blockquote>
<p>Nix is powerful and flexible, it provides a lot of ways to do things, making it difficult to find the most suitable way to do your job.
Here are some best practices that I&rsquo;ve learned from the community, hope it can help you.</p>
<h3 id="1-run-downloaded-binaries-on-nixos" class="headerLink">
    <a href="#1-run-downloaded-binaries-on-nixos" class="header-mark"></a>1. Run downloaded binaries on NixOS</h3><p>NixOS does not follow the FHS standard, so the binaries you download from the Internet will not likely work on NixOS. But there are some ways to make it work.</p>
<p>Here is a detailed guide which provides 10 ways to run downloaded binaries on NixOS: <a href="https://unix.stackexchange.com/questions/522822/different-methods-to-run-a-non-nixos-executable-on-nixos" target="_blank" rel="noopener noreferrer">Different methods to run a non-nixos executable on Nixos</a>, I recommend you to read it.</p>
<p>Among these methods, I prefer creating a FHS environment to run the binary, which is very convenient and easy to use.</p>
<p>To create such an environment, add the following code to one of your nix modules:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="n">lib</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># ......omit many configurations</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">environment</span><span class="o">.</span><span class="n">systemPackages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># ......omit many packages</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># create a fhs environment by command `fhs`, so we can run non-nixos packages in nixos!</span>
</span></span><span class="line"><span class="cl">    <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">buildFHSUserEnv</span> <span class="p">(</span><span class="n">base</span> <span class="o">//</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">name</span> <span class="o">=</span> <span class="s2">&#34;fhs&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">targetPkgs</span> <span class="o">=</span> <span class="n">pkgs</span><span class="p">:</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># pkgs.buildFHSUserEnv provides only a minimal fhs environment,</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># it lacks many basic packages needed by most softwares.</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># so we need to add them manually.</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># pkgs.appimageTools provides basic packages needed by most softwares.</span>
</span></span><span class="line"><span class="cl">        <span class="p">(</span><span class="n">pkgs</span><span class="o">.</span><span class="n">appimageTools</span><span class="o">.</span><span class="n">defaultFhsEnvArgs</span><span class="o">.</span><span class="n">targetPkgs</span> <span class="n">pkgs</span><span class="p">)</span> <span class="o">++</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="n">pkg-config</span>
</span></span><span class="line"><span class="cl">          <span class="n">ncurses</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># feel free to add more packages here, if you need</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl">      <span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">profile</span> <span class="o">=</span> <span class="s2">&#34;export FHS=1&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">runScript</span> <span class="o">=</span> <span class="s2">&#34;bash&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">extraOutputsToInstall</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;dev&#34;</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="p">}))</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># ......omit many configurations</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>after applying the updated configuration, you can run <code>fhs</code> to enter the FHS environment, and then run the binary you downloaded, e.g.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># Activating FHS drops me in a shell which looks like a &#34;normal&#34; Linux</span>
</span></span><span class="line"><span class="cl">$ fhs
</span></span><span class="line"><span class="cl"><span class="c1"># check what we have in /usr/bin</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>fhs<span class="o">)</span> $ ls /usr/bin
</span></span><span class="line"><span class="cl"><span class="c1"># try to run a non-nixos binary downloaded from the Internet</span>
</span></span><span class="line"><span class="cl"><span class="o">(</span>fhs<span class="o">)</span> $ ./bin/code
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-check-the-source-code-of-packages-and-modules" class="headerLink">
    <a href="#2-check-the-source-code-of-packages-and-modules" class="header-mark"></a>2. check the source code of packages and modules</h3><p>We&rsquo;ve used <code>nix repl '&lt;nixpkgs&gt;'</code> many times to check the source code in this guide, it&rsquo;s really a powerful tool to help us understand how things work in Nix.</p>
<p>Better take a look at the help message of <code>nix repl</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="err">›</span> <span class="nx">nix</span> <span class="nx">repl</span> <span class="o">-</span><span class="nx">f</span> <span class="err">&#39;</span><span class="p">&lt;</span><span class="nx">nixpkgs</span><span class="p">&gt;</span><span class="err">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">Nix</span> <span class="mf">2.13.3</span><span class="p">.</span> <span class="nx">Type</span> <span class="p">:</span><span class="err">?</span> <span class="k">for</span> <span class="nx">help</span><span class="p">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">Loading</span> <span class="nx">installable</span> <span class="err">&#39;&#39;</span><span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="nx">Added</span> <span class="mi">17755</span> <span class="nx">variables</span><span class="p">.</span>
</span></span><span class="line"><span class="cl"><span class="nx">nix</span><span class="o">-</span><span class="nx">repl</span><span class="p">&gt;</span> <span class="p">:</span><span class="err">?</span>
</span></span><span class="line"><span class="cl"><span class="nx">The</span> <span class="nx">following</span> <span class="nx">commands</span> <span class="nx">are</span> <span class="nx">available</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>        <span class="nx">Evaluate</span> <span class="nx">and</span> <span class="nx">print</span> <span class="nx">expression</span>
</span></span><span class="line"><span class="cl">  <span class="p">&lt;</span><span class="nx">x</span><span class="p">&gt;</span> <span class="p">=</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>  <span class="nx">Bind</span> <span class="nx">expression</span> <span class="nx">to</span> <span class="nx">variable</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">a</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>     <span class="nx">Add</span> <span class="nx">attributes</span> <span class="nx">from</span> <span class="nx">resulting</span> <span class="nx">set</span> <span class="nx">to</span> <span class="nx">scope</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">b</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>     <span class="nx">Build</span> <span class="nx">a</span> <span class="nx">derivation</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">bl</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>    <span class="nx">Build</span> <span class="nx">a</span> <span class="nx">derivation</span><span class="p">,</span> <span class="nx">creating</span> <span class="nx">GC</span> <span class="nx">roots</span> <span class="nx">in</span> <span class="nx">the</span> <span class="nx">working</span> <span class="nx">directory</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">e</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>     <span class="nx">Open</span> <span class="kn">package</span> <span class="nx">or</span> <span class="nx">function</span> <span class="nx">in</span> <span class="err">$</span><span class="nx">EDITOR</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">i</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>     <span class="nx">Build</span> <span class="nx">derivation</span><span class="p">,</span> <span class="nx">then</span> <span class="nx">install</span> <span class="nx">result</span> <span class="nx">into</span> <span class="nx">current</span> <span class="nx">profile</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">l</span> <span class="p">&lt;</span><span class="nx">path</span><span class="p">&gt;</span>     <span class="nx">Load</span> <span class="nx">Nix</span> <span class="nx">expression</span> <span class="nx">and</span> <span class="nx">add</span> <span class="nx">it</span> <span class="nx">to</span> <span class="nx">scope</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">lf</span> <span class="p">&lt;</span><span class="nx">ref</span><span class="p">&gt;</span>     <span class="nx">Load</span> <span class="nx">Nix</span> <span class="nx">flake</span> <span class="nx">and</span> <span class="nx">add</span> <span class="nx">it</span> <span class="nx">to</span> <span class="nx">scope</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">p</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>     <span class="nx">Evaluate</span> <span class="nx">and</span> <span class="nx">print</span> <span class="nx">expression</span> <span class="nx">recursively</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">q</span>            <span class="nx">Exit</span> <span class="nx">nix</span><span class="o">-</span><span class="nx">repl</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">r</span>            <span class="nx">Reload</span> <span class="nx">all</span> <span class="nx">files</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">sh</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>    <span class="nx">Build</span> <span class="nx">dependencies</span> <span class="nx">of</span> <span class="nx">derivation</span><span class="p">,</span> <span class="nx">then</span> <span class="nx">start</span> <span class="nx">nix</span><span class="o">-</span><span class="nx">shell</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">t</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>     <span class="nx">Describe</span> <span class="nx">result</span> <span class="nx">of</span> <span class="nx">evaluation</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">u</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>     <span class="nx">Build</span> <span class="nx">derivation</span><span class="p">,</span> <span class="nx">then</span> <span class="nx">start</span> <span class="nx">nix</span><span class="o">-</span><span class="nx">shell</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">doc</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>   <span class="nx">Show</span> <span class="nx">documentation</span> <span class="nx">of</span> <span class="nx">a</span> <span class="nx">builtin</span> <span class="nx">function</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">log</span> <span class="p">&lt;</span><span class="nx">expr</span><span class="p">&gt;</span>   <span class="nx">Show</span> <span class="nx">logs</span> <span class="k">for</span> <span class="nx">a</span> <span class="nx">derivation</span>
</span></span><span class="line"><span class="cl">  <span class="p">:</span><span class="nx">te</span> <span class="p">[</span><span class="kt">bool</span><span class="p">]</span>    <span class="nx">Enable</span><span class="p">,</span> <span class="nx">disable</span> <span class="nx">or</span> <span class="nx">toggle</span> <span class="nx">showing</span> <span class="nx">traces</span> <span class="k">for</span> <span class="nx">errors</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Some expressions that I use frequently: <code>:lf &lt;ref&gt;</code>, <code>:e &lt;expr&gt;</code>.</p>
<p><code>:e &lt;expr&gt;</code> is very intuitive, so I won&rsquo;t repeat it. let&rsquo;s take a look at <code>:lf &lt;ref&gt;</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="c1"># cd into my nix-config repo</span>
</span></span><span class="line"><span class="cl"><span class="err">›</span> <span class="n">cd</span> <span class="sr">~/nix-config/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># enter nix repl</span>
</span></span><span class="line"><span class="cl"><span class="err">›</span> <span class="n">nix</span> <span class="n">repl</span>
</span></span><span class="line"><span class="cl"><span class="n">Welcome</span> <span class="n">to</span> <span class="n">Nix</span> <span class="mi">2</span><span class="mf">.13.3</span><span class="o">.</span> <span class="n">Type</span> <span class="p">:</span><span class="o">?</span> <span class="n">for</span> <span class="n">help</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># load my nix flake and add it to scope</span>
</span></span><span class="line"><span class="cl"><span class="n">nix-repl</span><span class="o">&gt;</span> <span class="p">:</span><span class="n">lf</span> <span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="n">Added</span> <span class="mi">16</span> <span class="n">variables</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># press &lt;TAB&gt; to see what we have in scope</span>
</span></span><span class="line"><span class="cl"><span class="n">nix-repl</span><span class="o">&gt;</span><span class="sr">&lt;TAB&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ......omit some outputs</span>
</span></span><span class="line"><span class="cl"><span class="n">__isInt</span>                          <span class="n">nixosConfigurations</span>
</span></span><span class="line"><span class="cl"><span class="n">__isList</span>                         <span class="no">null</span>
</span></span><span class="line"><span class="cl"><span class="n">__isPath</span>                         <span class="n">outPath</span>
</span></span><span class="line"><span class="cl"><span class="n">__isString</span>                       <span class="n">outputs</span>
</span></span><span class="line"><span class="cl"><span class="n">__langVersion</span>                    <span class="n">packages</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ......omit some outputs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># check the outputs of my nix flake</span>
</span></span><span class="line"><span class="cl"><span class="n">nix-repl</span><span class="o">&gt;</span> <span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="sr">&lt;TAB&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">aquamarine</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">kana</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ruby</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nix-repl</span><span class="o">&gt;</span> <span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="sr">&lt;TAB&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">_module</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">_type</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">class</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">extendModules</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">extraArgs</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">options</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">pkgs</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">type</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nix-repl</span><span class="o">&gt;</span> <span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">age</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">appstream</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assertions</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">boot</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">console</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">containers</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ......omit other outputs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nix-repl</span><span class="o">&gt;</span> <span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="sr">&lt;TAB&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">activation</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">activationPackage</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">emptyActivationPath</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">enableDebugInfo</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">enableNixpkgsReleaseCheck</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">extraActivationPath</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">extraBuilderCommands</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">extraOutputsToInstall</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">extraProfileCommands</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">file</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ......omit other outputs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">nix-repl</span><span class="o">&gt;</span> <span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">sessionVariables</span><span class="o">.</span><span class="sr">&lt;TAB&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">sessionVariables</span><span class="o">.</span><span class="n">BROWSER</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">sessionVariables</span><span class="o">.</span><span class="n">DELTA_PAGER</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">sessionVariables</span><span class="o">.</span><span class="n">EDITOR</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">sessionVariables</span><span class="o">.</span><span class="n">GLFW_IM_MODULE</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">sessionVariables</span><span class="o">.</span><span class="n">MANPAGER</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">sessionVariables</span><span class="o">.</span><span class="n">QT_IM_MODULE</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">sessionVariables</span><span class="o">.</span><span class="n">TERM</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ......omit other outputs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># check the value of `TERM`</span>
</span></span><span class="line"><span class="cl"><span class="n">nix-repl</span><span class="o">&gt;</span> <span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">sessionVariables</span><span class="o">.</span><span class="n">TERM</span>
</span></span><span class="line"><span class="cl"><span class="s2">&#34;xterm-256color&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># check all files defined by `home.file`</span>
</span></span><span class="line"><span class="cl"><span class="n">nix-repl</span><span class="o">&gt;</span> <span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">file</span><span class="o">.</span><span class="sr">&lt;TAB&gt;</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">file</span><span class="o">..</span><span class="n">bash_profile</span>
</span></span><span class="line"><span class="cl"><span class="n">outputs</span><span class="o">.</span><span class="n">nixosConfigurations</span><span class="o">.</span><span class="n">ai</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span><span class="o">.</span><span class="n">home</span><span class="o">.</span><span class="n">file</span><span class="o">..</span><span class="n">bashrc</span>
</span></span><span class="line"><span class="cl"><span class="sr">outputs.nixosConfigurations.ai.config.home-manager.users.ryan.home.file..config/fcitx5/profile</span>
</span></span><span class="line"><span class="cl"><span class="sr">outputs.nixosConfigurations.ai.config.home-manager.users.ryan.home.file..config/fcitx5/profile-bak</span>
</span></span><span class="line"><span class="cl"><span class="sr">outputs.nixosConfigurations.ai.config.home-manager.users.ryan.home.file..config/i3/config</span>
</span></span><span class="line"><span class="cl"><span class="sr">outputs.nixosConfigurations.ai.config.home-manager.users.ryan.home.file..config/i3/i3blocks.conf</span>
</span></span><span class="line"><span class="cl"><span class="sr">outputs.nixosConfigurations.ai.config.home-manager.users.ryan.home.file..config/i3/keybindings</span>
</span></span><span class="line"><span class="cl"><span class="sr">outputs.nixosConfigurations.ai.config.home-manager.users.ryan.home.file..config/i3/layouts</span>
</span></span><span class="line"><span class="cl"><span class="sr">outputs.nixosConfigurations.ai.config.home-manager.users.ryan.home.file..config/i3/scripts</span>
</span></span><span class="line"><span class="cl"><span class="sr">outputs.nixosConfigurations.ai.config.home-manager.users.ryan.home.file..config/i3/wallpaper.png</span>
</span></span><span class="line"><span class="cl"><span class="sr">outputs.nixosConfigurations.ai.config.home-manager.users.ryan.home.file..config/rofi</span>
</span></span><span class="line"><span class="cl"><span class="c1">#......</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>As you can see, we can check every value of my flake in the REPL after loading it, which is very convenient for debugging.</p>
<h2 id="references" class="headerLink">
    <a href="#references" class="header-mark"></a>References</h2><p>The feedback and discussion of this post is mainly on <a href="https://www.reddit.com/r/NixOS/comments/13dxw9d/nixos_nix_flakes_a_guide_for_beginners/" target="_blank" rel="noopener noreferrer">this Reddit post</a>, you can also comment directly at the bottom of this page.</p>
<p>Here are some useful resources that I referred to:</p>
<ul>
<li><a href="https://github.com/DeterminateSystems/zero-to-nix" target="_blank" rel="noopener noreferrer">Zero to Nix - Determinate Systems</a>: A beginner-friendly Nix Flakes tutorial that is worth reading.</li>
<li><a href="https://lantian.pub/en/article/modify-website/nixos-why.lantian/" target="_blank" rel="noopener noreferrer">NixOS series</a>: LanTian&rsquo;s NixOS series, which are very clear and easy to understand.</li>
<li><a href="https://www.tweag.io/blog/2020-05-25-flakes/" target="_blank" rel="noopener noreferrer">Nix Flakes Series</a>: An official Nix Flakes tutorial series, which provides a relatively detailed introduction and is suitable for beginners.</li>
<li><a href="https://nixos.wiki/wiki/Flakes" target="_blank" rel="noopener noreferrer">Flakes - NixOS Wiki</a>: The official Nix Flakes wiki, which provides a relatively rough introduction.</li>
<li><a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config</a>: My Flake for NixOS &amp; macOS.</li>
</ul>
]]></content></entry><entry><title type="html">Summary of My 2021</title><link href="https://thiscute.world/en/posts/2021-summary/"/><id>https://thiscute.world/en/posts/2021-summary/</id><author><name>ryan4yin</name></author><published>2022-01-23T01:40:00+08:00</published><updated>2022-01-23T01:40:00+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/en/posts/2021-summary/wrapped_ryan4yin.webp" height="2650" width="1560"><figcaption></figcaption>
        </figure><h2 id="gossip" class="headerLink">
    <a href="#gossip" class="header-mark"></a>Gossip</h2><p>Another year has passed in the twinkling of an eye, and this New year, the global epidemic has set a new record. After Christmas, the daily increase in the United States has directly exceeded 1 million. In China, poor management in Xi&rsquo;an has led to hunger.</p>
<p>COVID-19 has been for more than two years.</p>
<p>Back to the point, after leaving from W Company at the beginning of this year, I was very lucky to join the current company, Mobiuspace, and I was mixed in the process of integrating into Mobiuspace.
However, I am quite satisfied with the overall results, the current work has been on the right track, but also found a lot of opportunities.</p>
<h2 id="life" class="headerLink">
    <a href="#life" class="header-mark"></a>Life</h2><ul>
<li>In January, I set up this Blog, and I met <a href="https://chee5e.space/" target="_blank" rel="noopener noreferrer">@Cheese</a>，@Cheese helped me adjust the style of the &ldquo;Friends&rdquo; page, thanks him very much~</li>
<li>In February, I fired my boss, and then what to say? I suddenly felt open-minded and changed my mindset 180 degrees. It was great, but I was actually very worried about my shortcomings in all aspects. Anyway, I&rsquo;m in a complicated mood. I talked a lot with <a href="https://sanshiliuxiao.top/" target="_blank" rel="noopener noreferrer">@是格子啊</a>, <a href="https://chee5e.space/" target="_blank" rel="noopener noreferrer">@Cheese</a> and former colleagues). Thank you very much for helping me sort out my thoughts and giving me an affirmation. At the same time, I was recommended by <a href="https://chee5e.space/" target="_blank" rel="noopener noreferrer">@Cheese</a> and started using twitter.</li>
<li>I climbed the mountain every day to see the scenery, bought a hammock to take a nap in the park, practiced the harmonica and bamboo flute, and played like this for a month.
<ul>
<li><figure><img src="/images/2021-summary/hammock.webp"/>
</figure>
</li>
</ul>
</li>
<li>In March, I started looking for a job. After meeting with several companies, I was very lucky to enter Mobiuspace and became a new SRE. The experience of a year in Mobiuspace is written in the &ldquo;work&rdquo; section, which is skipped here.</li>
<li>At the end of March, I watched the movie &ldquo;Raya and The Last Dragon&rdquo; (the only movie I watched in 2021), and the ending song was very good.</li>
<li>In April, by various coincidences, I unexpectedly found that my junior high school classmate&rsquo;s residence was less than one kilometer away from me. I had a meal of hometown food and bayberry wine at his house. It tasted very good!</li>
<li>In August, my two cousin came to Shenzhen for a summer internship. I crossed Shenzhen&rsquo;s east-west coastline with them. The scenery was great, but we were really hot and thirsty on the way.</li>
<li>In October
<ul>
<li>Joined Mobiuspace&rsquo;s surfing team, surfing and have a seaside barbecue for the first time.</li>
<li>Bought roller skates, learned reverse skating and step steering, and reviewed some basic skills learned in college.</li>
</ul>
</li>
<li>In December, Bought a YunMi RO Filterred Water Dispenser, and many kinds of tea. Currently I prefer to drink <strong>Black Tea</strong>, such as Dianhong - Yunnan Gold, Redsunion Keemun.
<ul>
<li><figure><a class="lightgallery" href="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp" title="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp" data-thumbnail="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp" data-sub-html="<h2>YunMi RO Filterred Water Dispenser</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp"
            srcset="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp, /images/2021-summary/yunmi-ro-filterred-water-dispenser.webp 1.5x, /images/2021-summary/yunmi-ro-filterred-water-dispenser.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp">
    </a><figcaption class="image-caption">YunMi RO Filterred Water Dispenser</figcaption>
    </figure></li>
<li><figure><a class="lightgallery" href="/images/2021-summary/my-tea.webp" title="/images/2021-summary/my-tea.webp" data-thumbnail="/images/2021-summary/my-tea.webp" data-sub-html="<h2>All kinds of tea</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/my-tea.webp"
            srcset="/images/2021-summary/my-tea.webp, /images/2021-summary/my-tea.webp 1.5x, /images/2021-summary/my-tea.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/my-tea.webp">
    </a><figcaption class="image-caption">All kinds of tea</figcaption>
    </figure></li>
</ul>
</li>
<li>In January 2022, I bought Anime PVC Figures for the first time. After putting these figures, I felt that my room was more youthful and colorful.
<ul>
<li><figure><a class="lightgallery" href="/images/2021-summary/Posts-and-Garage-Kit.webp" title="/images/2021-summary/Posts-and-Garage-Kit.webp" data-thumbnail="/images/2021-summary/Posts-and-Garage-Kit.webp" data-sub-html="<h2>Anime PVC Figures and Anime Figure Painting in my room</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/Posts-and-Garage-Kit.webp"
            srcset="/images/2021-summary/Posts-and-Garage-Kit.webp, /images/2021-summary/Posts-and-Garage-Kit.webp 1.5x, /images/2021-summary/Posts-and-Garage-Kit.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/Posts-and-Garage-Kit.webp">
    </a><figcaption class="image-caption">Anime PVC Figures and Anime Figure Painting in my room</figcaption>
    </figure></li>
</ul>
</li>
</ul>
<h2 id="readings" class="headerLink">
    <a href="#readings" class="header-mark"></a>Readings</h2><ul>
<li>After resigning at the beginning of the year, I went sightseeing, and my mind was a little more calm. I read more than half of the book &ldquo;From Lost to Found the Pacific Crest Trail&rdquo;.</li>
<li>In June, the community organized us to get vaccinated against COVID-19, I read the book &ldquo;Youth Post Station - A Portrait of Working Girls in Shenzhen&rdquo; in the waiting room, which is mainly about the lives of working girls in the 1980s and 1990s. The writing is very real and the feelings are very delicate.</li>
<li>At the end of the year, my second grandfather died. After attending the funeral, I vaguely found some profound changes in my mind. I finished reading &ldquo;Moon Palace&rdquo;, which tells the tragic life of the protagonist.</li>
<li>Most of the rest of my spare time, boring, do not want to learn anything, do not want to exercise, so I read a lot of web novels to pass the time.</li>
</ul>
<h2 id="music" class="headerLink">
    <a href="#music" class="header-mark"></a>Music</h2><p>After resigning at the beginning of the year, I practiced the bamboo flute and the blues harmonica for some time, but then it was basically silent after I got a job.</p>
<p>On the whole, I have made little progress this year.</p>
<figure><img src="/images/2021-summary/midi-keyboard-flute-harmonica.webp"/>
</figure>

<h2 id="working---the-year-i-work-in-mobiuspace" class="headerLink">
    <a href="#working---the-year-i-work-in-mobiuspace" class="header-mark"></a>Working - The year I work in Mobiuspace</h2><p>When I first joined Mobiuspace in March, I was curious, but I was so cautious that I couldn&rsquo;t believe I could get into such a great company. I felt like I was out of luck.
After all, Mobiuspace, whether it is the level of colleagues or the working atmosphere, or the number of customers, compared with my last company is qualitatively different.</p>
<p><figure><a class="lightgallery" href="/images/2021-summary/workstation-1.webp" title="/images/2021-summary/workstation-1.webp" data-thumbnail="/images/2021-summary/workstation-1.webp" data-sub-html="<h2>My first station in Mobiuspace</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/workstation-1.webp"
            srcset="/images/2021-summary/workstation-1.webp, /images/2021-summary/workstation-1.webp 1.5x, /images/2021-summary/workstation-1.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/workstation-1.webp">
    </a><figcaption class="image-caption">My first station in Mobiuspace</figcaption>
    </figure>
After getting familiar with the contents and methods of the work, leader tried his best to give me the work that best matched my interests, helping me solve problems, and at the same time giving me great autonomy, which was really great.</p>
<p>However, a high degree of autonomy also brings higher difficulty in work. I have been in a hurry, confused, and even self-doubted when I encounter difficulties. I am worried about whether I will run away the next day.</p>
<p>But fortunately, I still have the ability to adjust my mindset, take responsibility and finish the work step by step.</p>
<p>When there were several delays in my work, leader accompanied me to work overtime. After the work was done, he took me to a big dinner to reward myself. I really thanked him for his help and support.</p>
<p><figure><a class="lightgallery" href="/images/2021-summary/workstation-2.webp" title="/images/2021-summary/workstation-2.webp" data-thumbnail="/images/2021-summary/workstation-2.webp" data-sub-html="<h2>My new station, near the floor-to-ceiling window, the view is great.</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/workstation-2.webp"
            srcset="/images/2021-summary/workstation-2.webp, /images/2021-summary/workstation-2.webp 1.5x, /images/2021-summary/workstation-2.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/workstation-2.webp">
    </a><figcaption class="image-caption">My new station, near the floor-to-ceiling window, the view is great.</figcaption>
    </figure></p>
<p>Looking back at the summary and outlook for 2020, I find that the actual progress this year is very different from what I expected last year. The initial goal was only about 10% achieved, but because I was exposed to a lot of unexpected things, I was generally satisfied:</p>
<ul>
<li>It is a great gain to be familiar with the culture and working style of the new company - Mobiuspace, and my working style has been greatly improved.</li>
<li>Contact and be familiar with Mobiuspace&rsquo;s AWS online environment
<ul>
<li>Responsible for maintaining the online Kubernetes management platform, the first time I came into contact with the online cluster peak QPS was tens of thousands. It is of great significance that I have changed from being careful at the beginning to becoming a veteran now.</li>
<li>Using python to write several Kubernetes management platform services, this is also my first time to write online services, quite a sense of achievement</li>
<li>In the second half of the year, I spent a lot of energy on the analysis and control of AWS cost, and got some good results, which benefited a lot.</li>
<li>Learned the simple use of Nginx, just enough to maintain the company&rsquo;s pre-existing Nginx proxy configuration.</li>
</ul>
</li>
<li>Lead the completion of &ldquo;create a new K8s cluster and migrate the services to the new cluster&rdquo;. Although it is not a very difficult thing, but this should be my greatest achievement in 2021.
<ul>
<li>I also encountered all kinds of problems in the process of upgrading. When I first upgraded and migrated, I prepared for a long time and panicked. As a result, there was still something wrong with some of the services during the upgrade. I was really confused at that time.</li>
</ul>
</li>
<li>Casually wrote a few demo of Go, and made little progress.</li>
<li>Learning the rust language for a week, quickly finished reading The Book, and rewrote a <code>video2chars</code> in rust</li>
<li>Learned the underlying principle of Linux container: cgroups/namespace technology, and implemented a demo with go/rust</li>
<li>Learned various network interfaces and <code>iptables</code> of Linux</li>
<li>Be familiar with PromQL/Grafana</li>
</ul>
<p>If I give myself a score, it&rsquo;s &ldquo;good&rdquo;. Because I am not very enterprising, so the result can not be called &ldquo;excellent&rdquo;.</p>
<p>By the way, the new office of Mobiuspace is really great. See my twitter for details：</p>
<blockquote class="twitter-tweet"><p lang="zh" dir="ltr">新办公区真好呐～<br><br>值此良辰美景，好想整个榻榻米坐垫，坐在角落的落地窗边工作🤣<br>那种使用公共设施工（mo）作（yu）的乐趣，以及平常工位见不到的景色交相辉映，是不太好表述的奇妙体验 <a href="https://t.co/FASffzw8N3">pic.twitter.com/FASffzw8N3</a></p>&mdash; ryan4yin | 於清樂 (@ryan4yin) <a href="https://twitter.com/ryan4yin/status/1482891448731070466?ref_src=twsrc%5Etfw">January 17, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
<h2 id="a-sense-of-technology" class="headerLink">
    <a href="#a-sense-of-technology" class="header-mark"></a>A Sense of Technology</h2><ul>
<li>Istio Service Mesh: Realize that it is a bit heavy, and its development does not necessarily match our needs
<ul>
<li>The cost of the Sidecar model is relatively high, and without tuning, it will bring a 1/3 to 1/4 increase in the cost of the service, as well as a increase of delay.</li>
<li>Thinking about whether to continue to invest in Istio or to switch to other options.</li>
</ul>
</li>
<li>Service Mesh is still evolving rapidly, and the future trend should be eBPF + Envoy + WASM.
<ul>
<li>Cilium&rsquo;s eBPF-based Service Mesh is a new trend (it falls back to Per-Node Proxy mode when using advanced features). It&rsquo;s expected to hit other Service Mesh of Sidecar mode in terms of cost and delay.</li>
</ul>
</li>
<li>As for the log of K8s cluster, we currently use a self-developed system based on gelf protocol, but there are a lot of problems.
<ul>
<li>From the point of view of improving the maintainability and ease of use of the log system, loki is worth exploring.</li>
</ul>
</li>
<li>In terms of K8s cluster management, I think the upgrade iteration of the cluster can be done more automatically and reliably. Next year, we can explore more in the direction of multi-cluster management.</li>
<li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/" target="_blank" rel="noopener noreferrer">Pod Service Quality</a>:
For non-core services, the amount of requests resources can be appropriately reduced instead of fully reserved (<code>Guaranteed</code>) to improve resource utilization.</li>
<li>The official HPA capability is not enough. Our developers needs to scale the services based on QPS/Queue or other parameters. We should continue to promote the landing of <a href="https://github.com/kedacore/keda" target="_blank" rel="noopener noreferrer">KEDA</a>.</li>
<li>In terms of cost control, I realized the benefits of ARM architecture and AWS Spot EC2.</li>
<li>There is a lot of potential room for optimization of cross-area traffic cost.</li>
<li>AI has landed in various fields, affecting our daily use of voice navigation, song synthesis, speech synthesis and many other fields, including, of course, scenarios related to SRE work: AIOps</li>
</ul>
<h2 id="prospects-of-2022" class="headerLink">
    <a href="#prospects-of-2022" class="header-mark"></a>Prospects of 2022</h2><h3 id="on-the-side-of-technology" class="headerLink">
    <a href="#on-the-side-of-technology" class="header-mark"></a>On the Side of Technology</h3><p>The outlook for this year is more focused. I strive to achieve 50%, which will be a big breakthrough.</p>
<ol>
<li>Proficient in Go and use in at least two projects
<ol>
<li>To forge iron, one must be strong. Coding is the foundation of IT.</li>
</ol>
</li>
<li>Learn kubebuilder, k8s source code.</li>
<li>Network Technologies
<ol>
<li>Service Mesh - Istio</li>
<li>Network Proxy - Envoy/APISIX</li>
<li>K8s Network Plugins: Cilium + eBPF</li>
</ol>
</li>
<li>Optimization of cost and Service Stability of AWS EKS.
<ol>
<li>Save the cost of <code>DataTransfer-Regional-Bytes</code>.</li>
<li>K8s new feature：<a href="https://kubernetes.io/docs/concepts/services-networking/topology-aware-hints/" target="_blank" rel="noopener noreferrer">Topology Aware Hints</a></li>
<li>Istio: <a href="https://istio.io/latest/docs/tasks/traffic-management/locality-load-balancing/" target="_blank" rel="noopener noreferrer">Locality Load Balancing</a></li>
<li>Optimize the EC2 Instance Type：
<ol>
<li>Use the more appropriate instance types</li>
<li>Use Instance of ARM architecture, to reduce cost and increase efficiency</li>
</ol>
</li>
<li>Popularize gRPC protocol</li>
</ol>
</li>
<li>Get through the local development environment and the running environment on the cloud
<ol>
<li><a href="https://github.com/nocalhost/nocalhost" target="_blank" rel="noopener noreferrer">nocalhost</a></li>
</ol>
</li>
<li>Multicluster Application Deployment and Disaster Recovery
<ol>
<li>karmada</li>
</ol>
</li>
<li>Explore new technologies and other possibilities（Low priority）
<ol>
<li>Kubernetes-based Service platform, Future Development Direction
<ol>
<li>kubevela</li>
<li>buildpack</li>
<li>should I promote GitOps</li>
<li>openkruise</li>
</ol>
</li>
<li>Development of Serverless platform
<ol>
<li>Knative</li>
<li>OpenFunction</li>
</ol>
</li>
<li>Machine learning / Deep learning: I would like to try to apply AI to music, voice, SRE and other areas I am interested in&hellip;</li>
</ol>
</li>
</ol>
<p>It can be expected that there will be so many opportunities for the SRE team in 2022. I really look forward to which parts I can be responsible for and what results I can achieve.</p>
<h3 id="on-the-side-of-life" class="headerLink">
    <a href="#on-the-side-of-life" class="header-mark"></a>On the Side of Life</h3><ul>
<li>Sports:
<ul>
<li>Practice roller skating well and learn some tricks, at least twice a month.</li>
<li>Make more than three short trips</li>
</ul>
</li>
<li>Music
<ul>
<li>Learn music theory again&hellip;</li>
<li>Practice MIDI Keyboard.</li>
<li>Learn Synthesizer V  Stduio Pro + Qingsu AI. Cover some of my favorite songs.</li>
</ul>
</li>
<li>Reading: The list is as follows. Read at least one of them in a month.
<ul>
<li>Literature
<ul>
<li><input checked="" disabled="" type="checkbox"> No Longer Human,  Osamu Dazai</li>
<li><input disabled="" type="checkbox"> The End of Your Life Book club,  Will Schwalbe</li>
<li><input disabled="" type="checkbox"> One Hundred Years of Solitude, Gabriel Garcia Marquez</li>
<li><input disabled="" type="checkbox"> Love in the Time of Cholera, Gabriel Garcia Marquez</li>
<li><input disabled="" type="checkbox"> Sophie&rsquo;s World</li>
<li><input disabled="" type="checkbox"> Stories of Your Life and Others, Ted Chiang</li>
<li><input disabled="" type="checkbox"> 《沈从文的后半生》</li>
<li><input disabled="" type="checkbox"> 《我与地坛》</li>
<li><input disabled="" type="checkbox"> 《将饮茶》</li>
<li><input disabled="" type="checkbox"> 《My Country and My People - 林语堂》</li>
<li><input disabled="" type="checkbox"> 《房思琪的初恋乐园》</li>
</ul>
</li>
<li>social &amp; sciences
<ul>
<li><input checked="" disabled="" type="checkbox"> Death Is But a Dream: I want to know more about &ldquo;death&rdquo; this year.</li>
<li><input disabled="" type="checkbox"> 《怎样征服美丽少女》：哈哈</li>
<li><input disabled="" type="checkbox"> Harper Perennial Modern Classics</li>
<li><input disabled="" type="checkbox"> Social Psychology</li>
<li><input disabled="" type="checkbox"> The Courage to Be Disliked</li>
<li><input disabled="" type="checkbox"> The Body: A Guide for Occupants</li>
<li><input disabled="" type="checkbox"> The Structure of Scientific Revolutions</li>
<li><input disabled="" type="checkbox"> Deng Xiaoping and the Transformation of China</li>
<li><input disabled="" type="checkbox"> On China</li>
<li><input disabled="" type="checkbox"> 《刘擎西方现代思想讲义》</li>
<li><input disabled="" type="checkbox"> The Order of Time</li>
<li><input disabled="" type="checkbox"> The Universe in Your Hand</li>
<li><input disabled="" type="checkbox"> 《圆圈正义-作为自由前提的信念》</li>
<li><input disabled="" type="checkbox"> What Do You Say After You Say Hello?</li>
</ul>
</li>
<li>Technology
<ul>
<li><input disabled="" type="checkbox"> Complexity: A Guided Tour</li>
<li><input disabled="" type="checkbox"> Site Reliability Engineering: How Google Runs Production Systems</li>
<li><input disabled="" type="checkbox"> The Phoenix Project - A Novel About IT, DevOps, and Helping Your Business Win</li>
<li><input disabled="" type="checkbox"> The Mythical Man Month and Other Essays on Software Engineering</li>
<li><input disabled="" type="checkbox"> 《绩效使能：超越 OKR》</li>
<li><input disabled="" type="checkbox"> Powerful: Building a Culture of Freedom and Responsibility</li>
<li><input disabled="" type="checkbox"> 《幕后产品-打造突破式思维》</li>
<li><input disabled="" type="checkbox"> Professional Linux Kernel Architecture</li>
<li><input disabled="" type="checkbox"> <a href="https://man7.org/tlpi/" target="_blank" rel="noopener noreferrer">The Linux Programming Interface: A Linux and UNIX System Programming Handbook</a></li>
<li><input disabled="" type="checkbox"> Refactoring - Improving the Design of Existing Code</li>
<li><input disabled="" type="checkbox"> How Networks Work</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="in-summary" class="headerLink">
    <a href="#in-summary" class="header-mark"></a>In Summary</h2><p>At the beginning of 2021, my friend and I gave myself the expectation of「拆破玉笼飞彩凤，顿开金锁走蛟龙」, which felt that it had really come true.</p>
<p>This year, I hope to be able to &ldquo;Going up one more storey&rdquo; both in life and at work.</p>
]]></content></entry><entry><title type="html">The End of Another Semester</title><link href="https://thiscute.world/en/posts/the-end-of-another-semester/"/><id>https://thiscute.world/en/posts/the-end-of-another-semester/</id><author><name>ryan4yin</name></author><published>2017-06-27T01:28:45+08:00</published><updated>2017-06-27T01:28:45+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/en/posts/the-end-of-another-semester/5-centimeters-per-second.webp" height="1920" width="1080"><figcaption></figcaption>
        </figure><!-- Love Story - The Piano Guys -->
<meting-js server="netease" type="song" id="29460780" theme="#448aff"></meting-js>
<p>Ah, there are still ten days to get rid of the city and return to that reassuring mountain forest, waiting and anxious, wondering why the remaining ten days are so difficult.</p>
<p>The final review is a mess again. I am really lazy&hellip;</p>
<p>It is so unrealistic for me to have such a big dream that I have finished thousands of lines of code. I kind of want to accept my fate.</p>
<p>After one o&rsquo;clock in the middle of the night, I was still not used to the air conditioner in the bedroom, but the cool breeze on the aisle balcony is very comfortable, and the serenity of the city now also has a bit of charm.</p>
<p>But anyway, I really want to go home.</p>
]]></content></entry></feed>