<feed xmlns="http://www.w3.org/2005/Atom"><title>This Cute World</title><link href="https://thiscute.world/en/index.xml" rel="self"/><link href="https://thiscute.world/en/"/><updated>2023-05-10T21:23:28+08:00</updated><id>https://thiscute.world/en/</id><author><name>ryan4yin</name></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">NixOS &amp;amp; Nix Flakes - A Guide for Beginners</title><link href="https://thiscute.world/en/posts/nixos-and-flake-basics/"/><id>https://thiscute.world/en/posts/nixos-and-flake-basics/</id><author><name>ryan4yin</name></author><published>2023-05-10T21:23:28+08:00</published><updated>2023-05-10T21:23:28+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/en/posts/nixos-and-flake-basics/zero-to-nix.png" height="2400" width="1256"><figcaption></figcaption>
        </figure><blockquote>
<p>The target NixOS version of this article is 22.11, and the Nix version is 2.15.0. In this environment, Nix Flakes is still an experimental feature.</p>
</blockquote>
<blockquote>
<p>You need to have some Linux experience and programming experience to play with NixOS &amp; Nix Flakes, so I don&rsquo;t recommend NixOS for any Linux beginners.</p>
</blockquote>
<blockquote>
<p>Mainly translated from Chinese with the help of Copilot &amp; ChatGPT.</p>
</blockquote>
<h2 id="0-why-nix" class="headerLink">
    <a href="#0-why-nix" class="header-mark"></a>0. Why Nix</h2><p>I heard about Nix several years ago. It uses <a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener noreferrer">DSL</a> to manage system dependencies and can roll back to any historical state at any time. Although it sounds impressive, it requires learning a new language and writing code to install packages, I thought it was too troublesome and didn&rsquo;t study it at the time.</p>
<p>But recently I encountered two troublesome things when migrating the system, which made me decide to try Nix.</p>
<p>The fist problem was installing EndeavourOS (a derivative distribution of Arch Linux) on a newly assembled PC. Because My old PC also uses EndeavourOS, I directly <code>rsync</code> the old PC&rsquo;s Home directory to the new PC to save time after installation.
However, this synchronization caused a problem. All functions worked normally, but video playback always stuck. Firefox, Chrome, and MPV would all get stuck. I searched various resources online but could not solve the problem until I realized it might be caused by the Home directory synchronization. After clearing the Home directory, the problem was solved immediately&hellip; Later, I spent a long time recovering things from the old PC one by one.</p>
<p>The second problem is that I recently wanted to try Wayland, so I changed the desktop from i3wm to sway.
However, because there was little difference between the two and many inconveniences (hidpi, Sway configuration tuning, etc.), I decided to switch back to i3wm.
After switching back, GUI programs such as Firefox and Thunar would always get stuck for about a minute after the system started&hellip;</p>
<p>I was too tired to deal with the second problem, after thinking about it carefully, I realized that the root cause was that the system did not have any version control and rollback mechanism, which caused the system to be unable to be restored when problems occurred.
And another problem, when installing a new system, I had to manually export the package list from the old machine and then install them on the new machine.
So I decided to switch to NixOS, and spent half a month studying Nix and Flakes before finally switching from EndeavourOS to NixOS on my PC.</p>
<p>The first step I took was to create a NixOS virtual machine in my Homelab, and debug step by step in this virtual machine to migrate my old PC&rsquo;s EndeavourOS i3 configuration to NixOS + Flakes and restore the entire desktop environment.</p>
<p>Once I had it working on the virtual machine, the rest was easy. I simply backed up my Home directory and software list from my work computer, reinstalled the system as NixOS, git cloned my debugged NixOS configuration, made some adjustments to the disk mounting parameters and added some extra NixOS configurations for my Nvidia graphics card. Finally, with just a few commands, I deployed the configuration and was able to restore the entire i3 desktop environment and my commonly used software on my fresh NixOS system. It was a truly satisfying moment!</p>
<p>The rollback capability of NixOS gave me a lot of confidence - I no longer fear breaking the system. So a few days ago, I further migrated to the hyprland desktop, which is indeed much better than i3, and I love its animation effects! (On EndeavourOS before, I wouldn&rsquo;t have dared to make such a switch for the reasons mentioned earlier - it would have been a big hassle if something went wrong with the system.)</p>
<blockquote>
<p>Note: some friends on V2EX gave feedback that <code>btrfs</code>&rsquo;s snapshot feature can also provide similar rollback capabilities, and it is much simpler. After some research, I found that to be true. <code>btrfs</code> can even be configured to boot from a snapshot using GRUB(just like the NixOS does). So if you only want the system rollback capability, then btrfs based snapshot tools(e.g. <a href="https://github.com/digint/btrbk" target="_blank" rel="noopener noreferrer">btrbk</a>) is also a good choice. Or if you&rsquo;re still interested in Nix, It is definitely worth learning, as Nix&rsquo;s capabilities are far beyond just system snapshots.</p>
</blockquote>
<figure><img src="./screenshot_2023-05-07-21-21.webp"
         alt="My NixOS Desktop"/><figcaption>
            <p>My NixOS Desktop</p>
        </figcaption>
</figure>

<p>Now that the background information is out of the way, it&rsquo;s time to dive into the world of Nix!</p>
<h2 id="i-introduction-to-nix" class="headerLink">
    <a href="#i-introduction-to-nix" class="header-mark"></a>I. Introduction to Nix</h2><p>Nix package manager is a declarative configuration management tool similar to plulumi/terraform/kubernetes that are currently popular in the DevOps field. Users need to declare the expected system state using <a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener noreferrer">DSL</a>, and Nix is responsible for achieving that goal. The difference is that Nix manages software packages, while plulumi/terraform manages cloud resources.</p>
<blockquote>
<p>To put it simply, &ldquo;declarative configuration&rdquo; means that users only need to declare the results they want. For example, you declares that you want to replace the i3 windows manager with sway, then Nix will help you achieve the goal. You don&rsquo;t need to worry about the underlying details (such as which packages sway needs to install, which i3-related packages need to be uninstalled, which system configurations or environment variables need to be adjusted for sway, what adjustments need to be made to the Sway parameters if an Nvidia graphics card is used, etc.), Nix will automatically handle these details for the user(prerequisite: if the sway&rsquo;s nix packages are designed properly&hellip;).</p>
</blockquote>
<p>The Linux distribution built on top of the Nix package manager, NixOS, can be simply described as &ldquo;OS as Code&rdquo;, which describes the entire operating system&rsquo;s state using declarative Nix configuration files.</p>
<p>NixOS&rsquo;s configuration only manages the system-level state, the user&rsquo;s HOME directory is not under its control. There is another important community project, <a href="https://github.com/nix-community/home-manager" target="_blank" rel="noopener noreferrer">home-manager</a>, is designed to managing user&rsquo;s HOME directories. <strong>By combining home-manager with NixOS and Git, a fully reproducible and rollbackable system environment can be obtained</strong>.</p>
<p>Due to Nix&rsquo;s declarative and reproducible features, Nix is not only used to manage desktop environments but also widely used to manage development and compilation environments, cloud virtual machines, and container image construction. <a href="https://github.com/NixOS/nixops" target="_blank" rel="noopener noreferrer">NixOps</a> from the Nix official and <a href="https://github.com/serokell/deploy-rs" target="_blank" rel="noopener noreferrer">deploy-rs</a>  from the community are both operations tools based on Nix.</p>
<blockquote>
<p>Since there are numerous files in the home directory with varying behaviors, it is impossible to version control all of them due to the high cost. Generally, only some important configuration files are managed using home-manager, and other files that need to be backed up can be backed up and synchronized using rsync/synthing, or use tools like <a href="https://github.com/digint/btrbk" target="_blank" rel="noopener noreferrer">btrbk</a> to take snapshots of the home directory.</p>
</blockquote>
<h3 id="advantages-of-nix" class="headerLink">
    <a href="#advantages-of-nix" class="header-mark"></a>Advantages of Nix</h3><ul>
<li><strong>Declarative configuration, Environment as Code</strong>, can be managed with Git. As long as the configuration files are not lost, the system can be restored to any historical state at any time(ideally).
<ul>
<li>Nix lock dependent library versions through a lock file named <code>flake.lock</code>, to ensure that the system is reproducible, this idea actually borrows from some package managers such as npm, cargo, etc.</li>
<li>Compared with Docker, Nix provides a much stronger guarantee for the reproducibility of build results, because Dockerfile is actually an imperative configuration and there is no such thing as <code>flake.nix</code> in Docker, Docker&rsquo;s reproducibility relys on share the build result(which is MUCH MORE LARGAR than Dockerfile itself) through image regitry(e.g. DockerHub).</li>
</ul>
</li>
<li><strong>Highly convenient system customization capability</strong>
<ul>
<li>By changing a few lines of configuration, various components of the NixOS system can be easily customized. This is because Nix encapsulates all the underlying complex operations in nix packages and only exports concise and necessary declarative parameters.</li>
<li>Moreover, this modification is very safe. An example is that one NixOS user on the V2EX forum have stated that &ldquo;<a href="https://www.v2ex.com/t/938569#r_13053251" target="_blank" rel="noopener noreferrer"><strong>on NixOS, switching between different desktop environments is very simple and clean, and it is very safe. I often switch between gnome/kde/sway.</strong></a>&rdquo;</li>
</ul>
</li>
<li><strong>Rollback</strong>: The system can be rolled back to any historical environment at any time, and NixOS even adds all old versions to the boot options by default to ensure that the system can be rolled back at any time even though it crashes. Therefore, NixOS is also considered one of the most stable Linux Systems.</li>
<li><strong>No dependency conflicts</strong>: Because each software package in Nix has a unique hash, its installation path also includes this hash value, so multiple versions can coexist.</li>
<li><strong>The community is very active, and there are quite a few third-party projects</strong>. The official package repository, nixpkgs, has many contributors, and many people share their Nix configurations on Github/Gitlab. After browsing through it, the entire ecosystem gives me a sense of excitement in discovering a new continent.</li>
</ul>
<figure><img src="./nixos-bootloader.avif"
         alt="All historical versions are listed in the boot options of NixOS. Image from NixOS Discourse - 10074"/><figcaption>
            <p>All historical versions are listed in the boot options of NixOS. Image from <a href="https://discourse.nixos.org/t/how-to-make-uefis-grub2-menu-the-same-as-bioss-one/10074" target="_blank" rel="noopener noreferrer">NixOS Discourse - 10074</a></p>
        </figcaption>
</figure>

<h3 id="disadvantages-of-nix" class="headerLink">
    <a href="#disadvantages-of-nix" class="header-mark"></a>Disadvantages of Nix</h3><ul>
<li><strong>Relatively high learning curve:</strong>: If you want the system to be completely reproducible and avoid pitfalls caused by improper use, you need to learn about the entire design of Nix and manage the system in a declarative manner. You cannot blindly use <code>nix-env -i</code> (which is similar to <code>apt-get install</code>).</li>
<li><strong>Chaotic documentation</strong>: Firstly, Nix Flakes is still an experimental feature, and there are currently relatively few documents introducing it. Secondly, most of the Nix community&rsquo;s documentation only introduces the old <code>nix-env</code>/<code>nix-channel</code>. If you want to start learning Nix directly from Nix Flakes, you need to refer to a large number of old documents and extract what you need from them. In addition, some of Nix&rsquo;s current core functions are not well-documented (such as <code>imports</code> and Nixpkgs Module System), so it is best to look at the source code to understand them.</li>
<li><del>Relatively few packages</del>: Retract this one. The official claim is that nixpkgs has <a href="https://search.nixos.org/packages" target="_blank" rel="noopener noreferrer">80000+</a> packages, and indeed, most packages can be found in nixpkgs。</li>
<li><strong>Relatively high disk space usage</strong>: To ensure that the system can be rolled back at any time, Nix preserves all historical environments by default, which can take up a lot of disk space. Although you can manually clean up old historical environments periodically with <code>nix-collect-garbage</code>, it is still recommended to buy a larger hard drive.</li>
</ul>
<h3 id="summary" class="headerLink">
    <a href="#summary" class="header-mark"></a>Summary</h3><p>Generally speaking, I think NixOS is suitable for developers who have a certain amount of Linux usage experience and programming experience and want to have more control over their systems.</p>
<p>Another info, there is also some competition between Nix and the relatively popular <a href="https://containers.dev/" target="_blank" rel="noopener noreferrer">Dev Containers</a> in the construction of development environment, and the specific differences between them have yet to be explored by me~</p>
<h2 id="ii-installation" class="headerLink">
    <a href="#ii-installation" class="header-mark"></a>II. Installation</h2><p>Nix can be installed in multiple ways and supports being installed on MacOS/Linux/WSL as a package manager. Nix also provides NixOS, a Linux distribution that uses Nix to manage the entire system environment.</p>
<p>I chose to directly install NixOS system using its ISO image, to manage the entire system environment through Nix as much as possible.</p>
<p>The installation process is simple, and I won&rsquo;t go into details here.</p>
<p>some reference materials that maybe useful:</p>
<ol>
<li><a href="https://nixos.org/download.html" target="_blank" rel="noopener noreferrer">Official installation method of Nix</a>: written in bash script, <code>nix-command</code> &amp; <code>flakes</code> are still experimental features as of 2023-04-23, and need to be manually enabled.
<ol>
<li>You need to refer to the instructions in <a href="https://nixos.wiki/wiki/Flakes" target="_blank" rel="noopener noreferrer">Enable flakes - NixOS Wiki</a> to enable <code>nix-command</code> &amp; <code>flakes</code>.</li>
<li>The official installer does not provide any uninstallation method. To uninstall Nix on Linux/MacOS, you need to manually delete all related files, users, and groups.</li>
</ol>
</li>
<li><a href="https://github.com/DeterminateSystems/nix-installer" target="_blank" rel="noopener noreferrer">The Determinate Nix Installer</a>: a third-party installer written in Rust, which enables <code>nix-command</code> &amp; <code>flakes</code> by default and provides an uninstallation command.</li>
</ol>
<h2 id="iii-nix-flakes-and-the-old-nix" class="headerLink">
    <a href="#iii-nix-flakes-and-the-old-nix" class="header-mark"></a>III. Nix Flakes and the old Nix</h2><p>In 2020, Nix introduced two new features, <code>nix-command</code> and <code>flakes</code>, which provide new command-line tools, standard Nix package structure definitions, and <code>flake.lock</code> version lock files similar to cargo/npm. These two features greatly enhance the capabilities of Nix. Although they are still experimental features as of 2023-05-05, they have been widely used by the Nix community and are strongly recommended.</p>
<p>Currently, most of the Nix community&rsquo;s documentation still only covers traditional Nix and does not include Nix Flakes-related content. However, from the perspective of reproducibility and ease of management and maintenance, the old Nix package structure and command-line tools are no longer recommended for use. Therefore, this document will not introduce the usage of the old Nix package structure and command-line tools, and it is recommended that beginners ignore these old contents and just start with <code>nix-command</code> &amp; <code>flakes</code>.</p>
<p>Here are the old Nix command-line tools and related concepts that are no longer needed in <code>nix-command</code> and <code>flakes</code>. When searching for information, you can safely ignore them:</p>
<ol>
<li><code>nix-channel</code>: <code>nix-channel</code> is similar to other package management tools such as apt/yum/pacman, managing software package versions through stable/unstable/test channels.
<ol>
<li>In Nix Flakes, the functionality of <code>nix-channel</code> is completely replaced by <code>inputs</code> in <code>flake.nix</code> to declare dependency sources and <code>flake.lock</code> to lock dependency versions.</li>
</ol>
</li>
<li><code>nix-env</code>: <code>nix-env</code> is a core command-line tool for traditional Nix used to manage software packages in the user environment. It installs software packages from the data sources defined by <code>nix-channel</code>, so the installed package versions are influenced by the channel. Packages installed with <code>nix-env</code> are not automatically recorded in Nix&rsquo;s declarative configuration and are entirely outside of its control, making them difficult to reproduce on other machines. Therefore, it is not recommended to use this tool.
<ol>
<li>The corresponding command in Nix Flakes is <code>nix profile</code>.</li>
</ol>
</li>
<li><code>nix-shell</code>: <code>nix-shell</code> is used to create a temporary shell environment.
<ol>
<li>In Nix Flakes, it is replaced by <code>nix develop</code> and <code>nix shell</code>.</li>
</ol>
</li>
<li><code>nix-build</code>: <code>nix-build</code> is used to build Nix packages, and it places the build results in the <code>/nix/store</code> path, but it does not record them in Nix&rsquo;s declarative configuration.
<ol>
<li>The corresponding command in Nix Flakes is <code>nix build</code>.</li>
</ol>
</li>
<li>&hellip;</li>
</ol>
<blockquote>
<p>maybe <code>nix-env -qa</code> is still useful some times, which returns all packages installed in the System.</p>
</blockquote>
<h2 id="iv-nixos-flakes-package-repositories" class="headerLink">
    <a href="#iv-nixos-flakes-package-repositories" class="header-mark"></a>IV. NixOS Flakes Package Repositories</h2><p>Similar to Arch Linux, Nix also has official and community software package repositories:</p>
<ol>
<li><a href="https://github.com/NixOS/nixpkgs" target="_blank" rel="noopener noreferrer">nixpkgs</a> is a Git repository containing all Nix packages and NixOS modules/configurations. Its master branch contains the latest Nix packages and NixOS modules/configurations.</li>
<li><a href="https://github.com/nix-community/NUR" target="_blank" rel="noopener noreferrer">NUR</a> is similar to Arch Linux&rsquo;s AUR. NUR is a third-party Nix package repository and serves as a supplement to nixpkgs.</li>
<li>Nix Flakes can also install software packages directly from Git repositories, which can be used to install Flakes packages provided by anyone.</li>
</ol>
<h2 id="v-nix-language-basics" class="headerLink">
    <a href="#v-nix-language-basics" class="header-mark"></a>V. Nix language basics</h2><p>The Nix language is used to declare packages and configurations to be built by Nix, if you want to play NixOS and Nix Flakes and enjoy the many benefits they bring, you must learn the basics of this language first.</p>
<p>Nix is a relatively simple functional language, if you already have a programming foundation, it should take less than 2 hours to go through these grammars.</p>
<p>Please read <a href="https://nix.dev/tutorials/first-steps/nix-language" target="_blank" rel="noopener noreferrer"><strong>Nix language basics - nix.dev</strong></a> to get a basic understanding of Nix language now, it&rsquo;s a very good tutorial.</p>
<h2 id="vi-managing-the-system-declaratively" class="headerLink">
    <a href="#vi-managing-the-system-declaratively" class="header-mark"></a>VI. Managing the system declaratively</h2><blockquote>
<p><a href="https://nixos.wiki/wiki/Overview_of_the_NixOS_Linux_distribution" target="_blank" rel="noopener noreferrer">https://nixos.wiki/wiki/Overview_of_the_NixOS_Linux_distribution</a></p>
</blockquote>
<p>After learning the basics of the Nix language, we can start using it to configure the NixOS system. The system configuration file for NixOS is located at <code>/etc/nixos/configuration.nix</code>, which contains all the declarative configurations for the system, such as time zone, language, keyboard layout, network, users, file system, boot options, etc.</p>
<p>If we want to modify the system state in a reproducible way (which is also the most recommended way), we need to manually edit the <code>/etc/nixos/configuration.nix</code> file, and then execute <code>sudo nixos-rebuild switch</code> to apply the configuration. This command generates a new system environment based on the configuration file, sets the new environment as the default one, and also preserves &amp; added the previous environment into the grub boot options. This ensures we can always roll back to the old environment(even if the new environment fails to start).</p>
<p>On the other hand, <code>/etc/nixos/configuration.nix</code> is the traditional Nix configuration method, which relies on data sources configured by <code>nix-channel</code> and has no version locking mechanism, making it difficult to ensure the reproducibility of the system. <strong>A better approach is to use Nix Flakes</strong>, which can ensure the reproducibility of the system and make it easy to manage the configuration.</p>
<p>Now first, let&rsquo;s learn how to manage the system using the default configuration method of NixOS through <code>/etc/nixos/configuration.nix</code>, and then transition to the more advanced Nix Flakes.</p>
<h3 id="1-configuring-the-system-using-etcnixosconfigurationnix" class="headerLink">
    <a href="#1-configuring-the-system-using-etcnixosconfigurationnix" class="header-mark"></a>1. Configuring the system using <code>/etc/nixos/configuration.nix</code></h3><p>As mentioned earlier, this is the traditional Nix configuration method and also the default configuration method currently used by NixOS. It relies on data sources configured by <code>nix-channel</code> and has no version locking mechanism, making it difficult to ensure the reproducibility of the system.</p>
<p>For example, to enable ssh and add a user &ldquo;ryan,&rdquo; simply add the following configuration to <code>/etc/nixos/configuration.nix</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="c1"># Edit this configuration file to define what should be installed on</span>
</span></span><span class="line"><span class="cl"><span class="c1"># your system.  Help is available in the configuration.nix(5) man page</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and in the NixOS manual (accessible by running ‘nixos-help’).</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">imports</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="c1"># Include the results of the hardware scan.</span>
</span></span><span class="line"><span class="cl">      <span class="sr">./hardware-configuration.nix</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Omit the previous configuration.......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># add user ryan</span>
</span></span><span class="line"><span class="cl">  <span class="n">users</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">isNormalUser</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;ryan&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">extraGroups</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;networkmanager&#34;</span> <span class="s2">&#34;wheel&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">openssh</span><span class="o">.</span><span class="n">authorizedKeys</span><span class="o">.</span><span class="n">keys</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># replace with your own public key</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ssh-ed25519 &lt;some-public-key&gt; ryan@ryan-pc&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="n">firefox</span>
</span></span><span class="line"><span class="cl">    <span class="c1">#  thunderbird</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># enable openssh-server</span>
</span></span><span class="line"><span class="cl">  <span class="n">services</span><span class="o">.</span><span class="n">openssh</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">permitRootLogin</span> <span class="o">=</span> <span class="s2">&#34;no&#34;</span><span class="p">;</span>         <span class="c1"># disable root login</span>
</span></span><span class="line"><span class="cl">    <span class="n">passwordAuthentication</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span> <span class="c1"># disable password login</span>
</span></span><span class="line"><span class="cl">    <span class="n">openFirewall</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">forwardX11</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>              <span class="c1"># enable X11 forwarding</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># omit the rest of the configuration.......</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>in the configuration above, we enabled the openssh service, added an ssh public key for the user ryan, and disabled password login.</p>
<p>Now, running <code>sudo nixos-rebuild switch</code> deploys the modified configuration, and then we can login to the system using ssh with ssh keys.</p>
<p>This is the default declarative system configuration in NixOS, where any reproducible changes to the system can be made by modifying the <code>/etc/nixos/configuration.nix</code> file and deploying the changes by running <code>sudo nixos-rebuild switch</code>.</p>
<p>All configuration options in <code>/etc/nixos/configuration.nix</code> can be found in the following places:</p>
<ul>
<li>By searching on Google, such as <code>Chrome NixOS</code>, which will provide NixOS informations related to Chrome. Generally, the NixOS Wiki and the nixpkgs repository source code will be among the top results.</li>
<li>By searching for keywords in <a href="https://search.nixos.org/options" target="_blank" rel="noopener noreferrer">NixOS Options Search</a>.</li>
<li>For system-level configurations, relevant documentation can be found in <a href="https://nixos.org/manual/nixos/unstable/index.html#ch-configuration" target="_blank" rel="noopener noreferrer">Configuration - NixOS Manual</a>.</li>
<li>By searching for keywords directly in the <a href="https://github.com/NixOS/nixpkgs" target="_blank" rel="noopener noreferrer">nixpkgs</a> repository and reading relevant source code.</li>
</ul>
<h3 id="2-enabling-nixos-flakes-support" class="headerLink">
    <a href="#2-enabling-nixos-flakes-support" class="header-mark"></a>2. Enabling NixOS Flakes Support</h3><p>Compared to the default configuration approach of NixOS, Nix Flakes provide better reproducibility and a clearer package structure that is easier to maintain. Therefore, it is recommended to use Nix Flakes to manage system configurations.</p>
<p>However, Nix Flakes is currently an experimental feature and is not yet enabled by default. We need to enable it manually by modifying the <code>/etc/nixos/configuration.nix</code>, example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="c1"># Edit this configuration file to define what should be installed on</span>
</span></span><span class="line"><span class="cl"><span class="c1"># your system.  Help is available in the configuration.nix(5) man page</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and in the NixOS manual (accessible by running ‘nixos-help’).</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">imports</span> <span class="o">=</span>
</span></span><span class="line"><span class="cl">    <span class="p">[</span> <span class="c1"># Include the results of the hardware scan.</span>
</span></span><span class="line"><span class="cl">      <span class="sr">./hardware-configuration.nix</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># omit the previous configuration.......</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># enable Nix Flakes and the new nix-command command line tool</span>
</span></span><span class="line"><span class="cl">  <span class="n">nix</span><span class="o">.</span><span class="n">settings</span><span class="o">.</span><span class="n">experimental-features</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;nix-command&#34;</span> <span class="s2">&#34;flakes&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">environment</span><span class="o">.</span><span class="n">systemPackages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Nix Flakes uses the git command to pull dependencies from data sources, so git must be installed first</span>
</span></span><span class="line"><span class="cl">    <span class="n">git</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim</span>
</span></span><span class="line"><span class="cl">    <span class="n">wget</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># omit the rest of the configuration.......</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Now run <code>sudo nixos-rebuild switch</code> to apply the changes, and then you can use Nix Flakes to manage the system configuration.</p>
<h3 id="3-switching-system-configuration-to-flakenix" class="headerLink">
    <a href="#3-switching-system-configuration-to-flakenix" class="header-mark"></a>3. Switching System Configuration to <code>flake.nix</code></h3><p>After enabling the Nix Flakes feature, the <code>sudo nixos-rebuild switch</code> command will prioritize reading the <code>/etc/nixos/flake.nix</code> file. If not found, it will fallback to <code>/etc/nixos/configuration.nix</code>.</p>
<p>You can first use the official flake templates provided by Nix to learn how to write flakes, check which templates are available using the following command:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nix flake show templates
</span></span></code></pre></td></tr></table>
</div>
</div><p>One of the templates, <code>templates#full</code>, shows all possible uses. now take a look at its contents:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nix flake init -t templates#full
</span></span><span class="line"><span class="cl">cat flake.nix
</span></span></code></pre></td></tr></table>
</div>
</div><p>We create the file <code>/ etc/nixos/flake.nix</code> and write the configuration content according to this template. All system modifications will be taken over by Nix Flakes from now on. An example configuration is shown below:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;Ryan&#39;s NixOS Flake&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># This is the standard format for flake.nix. `inputs` are the dependencies of the flake,</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># and `outputs` is a function the return the build results of the flake. Each item in `inputs` will be passed as a</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># parameter to the `outputs` function after being pulled and built.</span>
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># There are many ways to reference flake inputs. The most widely used is github:owner/name/reference,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># which represents the GitHub repository URL + branch/commit-id/tag.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Official NixOS package source, using nixos-unstable branch here</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:NixOS/nixpkgs/nixos-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># home-manager, used for managing user configuration</span>
</span></span><span class="line"><span class="cl">    <span class="n">home-manager</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nix-community/home-manager/release-22.11&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># The `follows` keyword in inputs is used for inheritance.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># Here, `inputs.nixpkgs` of home-manager is kept consistent with the `inputs.nixpkgs` of the current flake,</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># to avoid problems caused by different versions of nixpkgs dependencies.</span>
</span></span><span class="line"><span class="cl">      <span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">follows</span> <span class="o">=</span> <span class="s2">&#34;nixpkgs&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># `outputs` are all the build result of the flake. </span>
</span></span><span class="line"><span class="cl">  <span class="c1"># A flake can have many uses and different types of outputs. </span>
</span></span><span class="line"><span class="cl">  <span class="c1"># parameters in `outputs` are defined in `inputs` and can be referenced by their names. </span>
</span></span><span class="line"><span class="cl">  <span class="c1"># However, `self` is an exception, This special parameter points to the `outputs` itself (self-reference)</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># The `@` syntax here is used to alias the attribute set of the inputs&#39;s parameter, making it convenient to use inside the function.</span>
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="p">{</span> <span class="n">self</span><span class="o">,</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}</span><span class="o">@</span><span class="n">inputs</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Outputs named `nixosConfigurations` is used by execute `nixos-rebuild switch --flake /path/to/flakes/directory` on NixOS System.</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixosConfigurations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># By default, NixOS will try to refer the nixosConfiguration with its hostname.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># so the system named `nixos-test` will use this configuration.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># However, the configuration name can also be specified using `nixos-rebuild switch --flake /path/to/flakes/directory#&lt;name&gt;`.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># The `nixpkgs.lib.nixosSystem` function is used to build this configuration, the following attribute set is its parameter.</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># Run `nixos-rebuild switch --flake .#nixos-test` in the flake&#39;s directory to deploy this configuration on any NixOS system</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;nixos-test&#34;</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">nixosSystem</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">system</span> <span class="o">=</span> <span class="s2">&#34;x86_64-linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># The Nix module system can modularize configurations, improving the maintainability of configurations.</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Each parameter in the `modules` is a Nix Module, and there is a partial introduction to it in the nixpkgs manual:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#    &lt;https://nixos.org/manual/nixpkgs/unstable/#module-system-introduction&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># It is said to be partial because the documentation is not complete, only some simple introductions</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#    (such is the current state of Nix documentation...)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># A Nix Module can be an attribute set, or a function that returns an attribute set.</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># If a Module is a function, according to the Nix Wiki description, this function can have up to four parameters:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># </span>
</span></span><span class="line"><span class="cl">        <span class="c1">#   config: The configuration of the entire system</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#   options: All option declarations refined with all definition and declaration references.</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#   pkgs: The attribute set extracted from the Nix package collection and enhanced with the nixpkgs.config option.</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#   modulesPath: The location of the module directory of Nix.</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># Only these four parameters can be passed by default.</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># If you need to pass other parameters, you must use `specialArgs` by uncomment the following line</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># specialArgs = {...}  # pass custom arguments into sub module.</span>
</span></span><span class="line"><span class="cl">        <span class="n">modules</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># Import the configuration.nix we used before, so that the old configuration file can still take effect. </span>
</span></span><span class="line"><span class="cl">          <span class="c1"># Note: /etc/nixos/configuration.nix itself is also a Nix Module, so you can import it directly here</span>
</span></span><span class="line"><span class="cl">          <span class="sr">./configuration.nix</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Here we define a NixOS system called <code>nixos-test</code>, whose configuration file is <code>./organization.nix</code>, which is our previous configuration file, so we can still use the old configuration.</p>
<p>Now execute the <code>sudo nixos-rebuild switch</code> command to apply the configuration, and there should be no change to the system, because we just switch to Nix Flakes, and the actual configuration content is the same as before.</p>
<h3 id="4-add-custom-cache-mirror" class="headerLink">
    <a href="#4-add-custom-cache-mirror" class="header-mark"></a>4. Add Custom Cache Mirror</h3><p>In order to speed up package building, Nix provides <a href="https://cache.nixos.org" target="_blank" rel="noopener noreferrer">https://cache.nixos.org</a> to cache build results to avoid build every packages locally.</p>
<p>In the old NixOS configuration, other cache sources can be added through <code>nix-channel</code> command, but Nix Flakes avoids using any system-level configuration and environment variables as far as possible to ensure that its build results are not affected by the environment(environment independent).
Therefore, in order to customize the cache image source, we must add the related configuration in <code>flake.nix</code> by using the parameter <code>nixConfig</code>. The example is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;NixOS configuration of Ryan Yin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># 1. To ensure purity, Flakes does not rely on the system&#39;s `/etc/nix/nix.conf`, so we have to set related configuration here.</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># 2. To ensure security, flake allows only a few nixConfig parameters to be set directly by default. </span>
</span></span><span class="line"><span class="cl">  <span class="c1">#    you need to add `--accept-flake-config` when executing the nix command, </span>
</span></span><span class="line"><span class="cl">  <span class="c1">#    otherwise all other parameters will be ignored, and an warning will printed by nix.</span>
</span></span><span class="line"><span class="cl">  <span class="n">nixConfig</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">experimental-features</span> <span class="o">=</span> <span class="p">[</span> <span class="s2">&#34;nix-command&#34;</span> <span class="s2">&#34;flakes&#34;</span> <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">substituters</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># replace official cache with a mirror located in China</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;https://mirrors.bfsu.edu.cn/nix-channels/store&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;https://cache.nixos.org/&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">extra-substituters</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># nix community&#39;s cache server</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;https://nix-community.cachix.org&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">    <span class="n">extra-trusted-public-keys</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">      <span class="s2">&#34;nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">];</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># omit some configuration...</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># omit some configuration...</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After the modification, execute <code>sudo nixos-rebuild switch</code> to apply the configuration.</p>
<h3 id="5-安装-home-manager" class="headerLink">
    <a href="#5-%e5%ae%89%e8%a3%85-home-manager" class="header-mark"></a>5. 安装 home-manager</h3><p>We mentioned earlier that NixOS can only manage system-level configurations, and user-level configurations need to be managed using home-manager.</p>
<p>According to the official document <a href="https://nix-community.github.io/home-manager/index.htm" target="_blank" rel="noopener noreferrer">Home Manager Manual</a>, in order to install home-manager as an module of NixOS, we need to create <code>/etc/nixos/home.nix</code> first, an example content shown below:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span> <span class="n">config</span><span class="o">,</span> <span class="n">pkgs</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># please change the username &amp; home direcotry to your own</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="s2">&#34;ryan&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">homeDirectory</span> <span class="o">=</span> <span class="s2">&#34;/home/ryan&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># link the configuration file in current directory to the specified location in Home directory</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># home.file.&#34;.config/i3/wallpaper.jpg&#34;.source = ./wallpaper.jpg;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># link all files in `./scripts` to `~/.config/i3/scripts`</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># home.file.&#34;.config/i3/scripts&#34; = {</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   source = ./scripts;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   recursive = true;   # link recursively</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#   executable = true;  # make all files executable</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># };</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># encode the file content in nix configuration file directly</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># home.file.&#34;.xxx&#34;.text = &#39;&#39;</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#     xxx</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># &#39;&#39;;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># set cursor size and dpi for 4k monitor</span>
</span></span><span class="line"><span class="cl">  <span class="n">xresources</span><span class="o">.</span><span class="n">properties</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Xcursor.size&#34;</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;Xft.dpi&#34;</span> <span class="o">=</span> <span class="mi">172</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># basic configuration of git, please change to your own</span>
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">git</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">userName</span> <span class="o">=</span> <span class="s2">&#34;Ryan Yin&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">userEmail</span> <span class="o">=</span> <span class="s2">&#34;xiaoyin_c@qq.com&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Packages that should be installed to the user profile.</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">packages</span> <span class="o">=</span> <span class="p">[</span> 
</span></span><span class="line"><span class="cl">    <span class="n">pkgs</span><span class="o">.</span><span class="n">htop</span>
</span></span><span class="line"><span class="cl">    <span class="n">pkgs</span><span class="o">.</span><span class="n">btop</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># enable starship, a beautiful shell prompt</span>
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">starship</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">settings</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">add_newline</span> <span class="o">=</span> <span class="no">false</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">aws</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">gcloud</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">line_break</span><span class="o">.</span><span class="n">disabled</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># alacritty terminal emulator</span>
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">alacritty</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">env</span><span class="o">.</span><span class="n">TERM</span> <span class="o">=</span> <span class="s2">&#34;xterm-256color&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">font</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">size</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">draw_bold_text_with_bright_colors</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">      <span class="n">scrolling</span><span class="o">.</span><span class="n">multiplier</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">selection</span><span class="o">.</span><span class="n">save_to_clipboard</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># This value determines the Home Manager release that your</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># configuration is compatible with. This helps avoid breakage</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># when a new Home Manager release introduces backwards</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># incompatible changes.</span>
</span></span><span class="line"><span class="cl">  <span class="c1">#</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># You can update Home Manager without changing this value. See</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># the Home Manager release notes for a list of state version</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># changes in each release.</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">stateVersion</span> <span class="o">=</span> <span class="s2">&#34;22.11&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># Let Home Manager install and manage itself.</span>
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">home-manager</span><span class="o">.</span><span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After adding <code>/etc/nixos/home.nix</code>, you need to import this new configuration file in <code>/etc/nixos/flake.nix</code> to make it effective, use the following command to generate an example <code>/etc/nixos/flake.nix</code> in the current folder for reference:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nix flake new -t github:nix-community/home-manager#nixos
</span></span></code></pre></td></tr></table>
</div>
</div><p>After adjusting the parameters, the content of <code>/etc/nixos/flake.nix</code> is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;NixOS configuration&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nixos/nixpkgs/nixos-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">home-manager</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nix-community/home-manager&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">home-manager</span><span class="o">.</span><span class="n">inputs</span><span class="o">.</span><span class="n">nixpkgs</span><span class="o">.</span><span class="n">follows</span> <span class="o">=</span> <span class="s2">&#34;nixpkgs&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="n">inputs</span><span class="o">@</span><span class="p">{</span> <span class="n">nixpkgs</span><span class="o">,</span> <span class="n">home-manager</span><span class="o">,</span> <span class="o">...</span> <span class="p">}:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixosConfigurations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># please change the hostname to your own</span>
</span></span><span class="line"><span class="cl">      <span class="n">nixos-test</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">nixosSystem</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">system</span> <span class="o">=</span> <span class="s2">&#34;x86_64-linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">modules</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="sr">./configuration.nix</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="c1"># make home-manager as a module of nixos</span>
</span></span><span class="line"><span class="cl">          <span class="c1"># so that home-manager configuration will be deployed automatically when executing `nixos-rebuild switch`</span>
</span></span><span class="line"><span class="cl">          <span class="n">home-manager</span><span class="o">.</span><span class="n">nixosModules</span><span class="o">.</span><span class="n">home-manager</span>
</span></span><span class="line"><span class="cl">          <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">home-manager</span><span class="o">.</span><span class="n">useGlobalPkgs</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">            <span class="n">home-manager</span><span class="o">.</span><span class="n">useUserPackages</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># replace ryan with your own username</span>
</span></span><span class="line"><span class="cl">            <span class="n">home-manager</span><span class="o">.</span><span class="n">users</span><span class="o">.</span><span class="n">ryan</span> <span class="o">=</span> <span class="kn">import</span> <span class="sr">./home.nix</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Optionally, use home-manager.extraSpecialArgs to pass</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># arguments to home.nix</span>
</span></span><span class="line"><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Then execute <code>sudo nixos-rebuild switch</code> to apply the configuration, and home-manager will be installed automatically.</p>
<p>After the installation is complete, all user-level programs and configurations can be managed through <code>/etc/nixos/home.nix</code>, and when executing <code>sudo nixos-rebuild switch</code>, the configuration of home-manager will be applied automatically.</p>
<p>To find the options of home-manager used in <code>home.nix</code>, use the following methods:</p>
<ul>
<li><a href="https://nix-community.github.io/home-manager/options.html" target="_blank" rel="noopener noreferrer">Home Manager - Appendix A. Configuration Options</a>: A list of all options, it is recommended to search for keywords in it.</li>
<li><a href="https://github.com/nix-community/home-manager" target="_blank" rel="noopener noreferrer">home-manager</a>: Some options are not listed in the official documentation, or the documentation is not clear enough, you can directly search and read the corresponding source code in this home-manager repo.</li>
</ul>
<h3 id="6-modular-nixos-configuration" class="headerLink">
    <a href="#6-modular-nixos-configuration" class="header-mark"></a>6. Modular NixOS configuration</h3><p>At this point, the skeleton of the entire system is basically configured. The current system configuration structure in <code>/etc/nixos</code> should be as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── flake.lock
</span></span><span class="line"><span class="cl">├── flake.nix
</span></span><span class="line"><span class="cl">├── home.nix
</span></span><span class="line"><span class="cl">└── configuration.nix
</span></span></code></pre></td></tr></table>
</div>
</div><p>The functions of these four files are explained below:</p>
<ul>
<li><code>flake.lock</code>: An automatically generated version lock file, which records all input data sources, hash values, and version numbers of the entire flake to ensure that the system is reproducible.</li>
<li><code>flake.nix</code>: The entry file, which will be recognized and deployed when executing <code>sudo nixos-rebuild switch</code>.
<ul>
<li>See <a href="https://nixos.wiki/wiki/Flakes" target="_blank" rel="noopener noreferrer">Flakes - NixOS Wiki</a> for all options of flake.nix.</li>
</ul>
</li>
<li><code>configuration.nix</code>: Imported as a Nix module in flake.nix, all system-level configurations are currently written in this file.
<ul>
<li>See <a href="https://nixos.org/manual/nixos/unstable/index.html#ch-configuration" target="_blank" rel="noopener noreferrer">Configuration - NixOS Manual</a> for all options of configuration.nix.</li>
</ul>
</li>
<li><code>home.nix</code>: Imported by home-manager as the configuration of the user <code>ryan</code> in flake.nix, that is, it contains all the Home Manager configurations of <code>ryan</code>, and is responsible for managing <code>ryan</code>&rsquo;s Home folder.
<ul>
<li>See <a href="https://nix-community.github.io/home-manager/options.html" target="_blank" rel="noopener noreferrer">Appendix A. Configuration Options - Home Manager</a> for all options of home.nix.</li>
</ul>
</li>
</ul>
<p>By modifying the above configuration files, you can change the status of the system and the Home directory declaratively.</p>
<p>As the configuration increases, it is difficult to maintain the configuration files by relying solely on <code>configuration.nix</code> and <code>home.nix</code>. Therefore, a better solution is to use the module mechanism of Nix to split the configuration files into multiple modules and write them in a classified manner.</p>
<p><code>imports</code> parameter can accept a list of <code>.nix</code> files, and merge all the configurations in the list into the current attribute set. Note that the word used here is &ldquo;<strong>merge</strong>&rdquo;, which means that <code>imports</code> will NOT simply overwrite the duplicate configuration items, but handle them more reasonably. For example, if I define <code>program.packages = [...]</code> in multiple modules, then <code>imports</code> will merge all <code>program.packages</code> in all modules into one list. Not only lists can be merged correctly, but attribute sets can also be merged correctly. The specific behavior can be explored by yourself.</p>
<blockquote>
<p>I only found a description of <code>imports</code> in <a href="https://nixos.org/manual/nixpkgs/unstable/#module-system-lib-evalModules-parameters" target="_blank" rel="noopener noreferrer">nixpkgs-unstable official manual - evalModules parameters</a>: <code>A list of modules. These are merged together to form the final configuration.</code>, you can try to understand it&hellip;</p>
</blockquote>
<p>With the help of the <code>imports</code> parameter, we can split <code>home.nix</code> and <code>configuration.nix</code> into multiple <code>.nix</code> files.</p>
<p>For example, the structure of my previous i3wm system configuration <a href="https://github.com/ryan4yin/nix-config/tree/v0.0.2" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/v0.0.2</a> is as follows:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">├── flake.lock
</span></span><span class="line"><span class="cl">├── flake.nix
</span></span><span class="line"><span class="cl">├── home
</span></span><span class="line"><span class="cl">│   ├── default.nix         <span class="c1"># here we import all submodules by imports = [...]</span>
</span></span><span class="line"><span class="cl">│   ├── fcitx5              <span class="c1"># fcitx5 input method&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│   │   ├── default.nix
</span></span><span class="line"><span class="cl">│   │   └── rime-data-flypy
</span></span><span class="line"><span class="cl">│   ├── i3                  <span class="c1"># i3 window manager&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│   │   ├── config
</span></span><span class="line"><span class="cl">│   │   ├── default.nix
</span></span><span class="line"><span class="cl">│   │   ├── i3blocks.conf
</span></span><span class="line"><span class="cl">│   │   ├── keybindings
</span></span><span class="line"><span class="cl">│   │   └── scripts
</span></span><span class="line"><span class="cl">│   ├── programs
</span></span><span class="line"><span class="cl">│   │   ├── browsers.nix
</span></span><span class="line"><span class="cl">│   │   ├── common.nix
</span></span><span class="line"><span class="cl">│   │   ├── default.nix   <span class="c1"># here we import all modules in programs folder by imports = [...]</span>
</span></span><span class="line"><span class="cl">│   │   ├── git.nix
</span></span><span class="line"><span class="cl">│   │   ├── media.nix
</span></span><span class="line"><span class="cl">│   │   ├── vscode.nix
</span></span><span class="line"><span class="cl">│   │   └── xdg.nix
</span></span><span class="line"><span class="cl">│   ├── rofi              <span class="c1">#  rofi launcher&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│   │   ├── configs
</span></span><span class="line"><span class="cl">│   │   │   ├── arc_dark_colors.rasi
</span></span><span class="line"><span class="cl">│   │   │   ├── arc_dark_transparent_colors.rasi
</span></span><span class="line"><span class="cl">│   │   │   ├── power-profiles.rasi
</span></span><span class="line"><span class="cl">│   │   │   ├── powermenu.rasi
</span></span><span class="line"><span class="cl">│   │   │   ├── rofidmenu.rasi
</span></span><span class="line"><span class="cl">│   │   │   └── rofikeyhint.rasi
</span></span><span class="line"><span class="cl">│   │   └── default.nix
</span></span><span class="line"><span class="cl">│   └── shell             <span class="c1"># shell/terminal related configuration</span>
</span></span><span class="line"><span class="cl">│       ├── common.nix
</span></span><span class="line"><span class="cl">│       ├── default.nix
</span></span><span class="line"><span class="cl">│       ├── nushell
</span></span><span class="line"><span class="cl">│       │   ├── config.nu
</span></span><span class="line"><span class="cl">│       │   ├── default.nix
</span></span><span class="line"><span class="cl">│       │   └── env.nu
</span></span><span class="line"><span class="cl">│       ├── starship.nix
</span></span><span class="line"><span class="cl">│       └── terminals.nix
</span></span><span class="line"><span class="cl">├── hosts 
</span></span><span class="line"><span class="cl">│   ├── msi-rtx4090      <span class="c1"># My main machine&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│   │   ├── default.nix  <span class="c1"># This is the old configuration.nix, but most of the content has been split out to modules.</span>
</span></span><span class="line"><span class="cl">│   │   └── hardware-configuration.nix  <span class="c1"># hardware &amp; disk related configuration, autogenerated by nixos   </span>
</span></span><span class="line"><span class="cl">│   └── nixos-test       <span class="c1"># my test machine&#39;s configuration</span>
</span></span><span class="line"><span class="cl">│       ├── default.nix
</span></span><span class="line"><span class="cl">│       └── hardware-configuration.nix
</span></span><span class="line"><span class="cl">├── modules          <span class="c1"># some common NixOS modules that can be reused</span>
</span></span><span class="line"><span class="cl">│   ├── i3.nix
</span></span><span class="line"><span class="cl">│   └── system.nix
</span></span><span class="line"><span class="cl">└── wallpaper.jpg    <span class="c1"># wallpaper</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>For the details of the structure and content, please go to the github repository <a href="https://github.com/ryan4yin/nix-config/tree/v0.0.2" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/v0.0.2</a>.</p>
<h3 id="7-update-the-system" class="headerLink">
    <a href="#7-update-the-system" class="header-mark"></a>7. Update the system</h3><p>After using Nix Flakes, it is also very simple to update the system. First update the flake.lock file, and then deploy it. Execute the following command in the configuration folder:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># update flake.lock</span>
</span></span><span class="line"><span class="cl">nix flake update
</span></span><span class="line"><span class="cl"><span class="c1"># deploy the updates</span>
</span></span><span class="line"><span class="cl">sudo nixos-rebuild switch
</span></span></code></pre></td></tr></table>
</div>
</div><p>Sometimes when installing new packages, you may encounter an error of sha256 mismatch when running <code>nixos-rebuild switch</code>. You can also try to solve it by updating <code>flake.lock</code> through <code>nix flake update</code>.</p>
<h3 id="8-rollback-the-version-of-some-packages" class="headerLink">
    <a href="#8-rollback-the-version-of-some-packages" class="header-mark"></a>8. Rollback the version of some packages</h3><p>After using Nix Flakes, most people are currently using the <code>nixos-unstable</code> branch of nixpkgs. Sometimes you will encounter some bugs, such as the <a href="https://github.com/swaywm/sway/issues/7562" target="_blank" rel="noopener noreferrer">chrome/vscode crash problem</a></p>
<p>To resolve this problem, we need to rollback the version of some packages. In Nix Flakes, all package versions and hash values are one-to-one corresponding to the git commit of their input data source. Therefore, to rollback a package to a historical version, we need to lock the git commit of its input data source.</p>
<p>So to rollback the version of some packages, first modify <code>/etc/nixos/flake.nix</code>, the example content is as follows (mainly using the <code>specialArgs</code> parameter):</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">description</span> <span class="o">=</span> <span class="s2">&#34;NixOS configuration of Ryan Yin&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">inputs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># default to nixos-unstable branch</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nixos/nixpkgs/nixos-unstable&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># the latest stable branch of nixpkgs, used to rollback the version of some packages</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># the current latest version is 22.11</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs-stable</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nixos/nixpkgs/nixos-22.11&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># we can also use git commit hash to lock the version</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs-fd40cef8d</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="s2">&#34;github:nixos/nixpkgs/fd40cef8d797670e203a27a91e4b8e6decf0b90c&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">outputs</span> <span class="o">=</span> <span class="n">inputs</span><span class="o">@</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">self</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs-stable</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixpkgs-fd40cef8d</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">  <span class="p">}:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">nixosConfigurations</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">nixos-test</span> <span class="o">=</span> <span class="n">nixpkgs</span><span class="o">.</span><span class="n">lib</span><span class="o">.</span><span class="n">nixosSystem</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">system</span> <span class="o">=</span> <span class="s2">&#34;x86_64-linux&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># The core parameter, which passes the non-default nixpkgs data source to other modules</span>
</span></span><span class="line"><span class="cl">        <span class="n">specialArgs</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="n">nixpkgs-stable</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">          <span class="k">inherit</span> <span class="n">nixpkgs-fd40cef8d</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="cl">        <span class="n">modules</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">          <span class="sr">./hosts/nixos-test</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">          <span class="c1"># omit other configurations...</span>
</span></span><span class="line"><span class="cl">        <span class="p">];</span>
</span></span><span class="line"><span class="cl">      <span class="p">};</span>
</span></span><span class="line"><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>And then refer the packages from <code>nix-stable</code> or <code>nixpkgs-fd40cef8d</code> in your corresponding sub module, a home manager&rsquo;s sub module as an example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkgs</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="n">config</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># nix will search and jnject this parameter from specialArgs in flake.nix</span>
</span></span><span class="line"><span class="cl">  <span class="n">nixpkgs-stable</span><span class="o">,</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># nixpkgs-fd40cef8d,</span>
</span></span><span class="line"><span class="cl">  <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">let</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># To use packages from nixpkgs-stable, we need to configure some parameters for it first</span>
</span></span><span class="line"><span class="cl">  <span class="n">pkgs-stable</span> <span class="o">=</span> <span class="kn">import</span> <span class="n">nixpkgs-stable</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># The Global parameters will be automatically configured to the default pkgs, so we can directly refer to them from pkgs</span>
</span></span><span class="line"><span class="cl">    <span class="n">system</span> <span class="o">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">system</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># To use chrome, we need to allow the installation of non-free software</span>
</span></span><span class="line"><span class="cl">    <span class="n">config</span><span class="o">.</span><span class="n">allowUnfree</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">in</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># refer packages from pkgs-stable instead of pkgs</span>
</span></span><span class="line"><span class="cl">  <span class="n">home</span><span class="o">.</span><span class="n">packages</span> <span class="o">=</span> <span class="k">with</span> <span class="n">pkgs-stable</span><span class="p">;</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="n">firefox-wayland</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># chrome wayland support was broken on nixos-unstable branch, so fallback to stable branch for now</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># https://github.com/swaywm/sway/issues/7562</span>
</span></span><span class="line"><span class="cl">    <span class="n">google-chrome</span>
</span></span><span class="line"><span class="cl">  <span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">programs</span><span class="o">.</span><span class="n">vscode</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">enable</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">package</span> <span class="o">=</span> <span class="n">pkgs-stable</span><span class="o">.</span><span class="n">vscode</span><span class="p">;</span>  <span class="c1"># refer vscode from pkgs-stable instead of pkgs</span>
</span></span><span class="line"><span class="cl">  <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>After adjusted the configuration, deploy it with <code>sudo nixos-rebuild switch</code>, then your firefox/chrome/vscode will revert to the version corresponding to <code>nix-stable</code> or <code>nixpkgs-fd40cef8d</code>.</p>
<h3 id="9-manage-nixos-configuration-with-git" class="headerLink">
    <a href="#9-manage-nixos-configuration-with-git" class="header-mark"></a>9. Manage NixOS configuration with Git</h3><p>NixOS&rsquo;s configuration file is plain text, so it can be managed with Git just like ordinary dotfiles.</p>
<p>On the other hand, <code>flake.nix</code> do not required to be placed in the <code>/etc/nixos</code> directory, they can be placed in any directory, as long as the correct path is specified during deployment.</p>
<p>For example, my usage is to place the Nix Flakes configuration in the <code>~/nixos-config</code> directory, and then create a soft link in the <code>/etc/nixos</code> directory:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo mv /etc/nixos /etc/nixos.bak  <span class="c1"># backup the original configuration</span>
</span></span><span class="line"><span class="cl">sudo ln -s ~/nixos-config/ /etc/nixos
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># deploy the flake.nix located at the default location(/etc/nixos)</span>
</span></span><span class="line"><span class="cl">sudo nixos-rebuild switch
</span></span></code></pre></td></tr></table>
</div>
</div><p>And then you can use Git to manage the configuration in the <code>~/nixos-config</code> directory. The configuration can be used with ordinary user-level permissions, and it is not required to be owned by root.</p>
<p>Another method is to delete <code>/etc/nixos</code> directly, and specify the configuration file path each time you deploy:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo mv /etc/nixos /etc/nixos.bak
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/nixos-config
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># deploy the flake.nix located in the current directory</span>
</span></span><span class="line"><span class="cl">sudo nixos-rebuild switch --flake .
</span></span></code></pre></td></tr></table>
</div>
</div><p>Choose whichever you like.</p>
<h2 id="vii-usage-of-nix-flakes" class="headerLink">
    <a href="#vii-usage-of-nix-flakes" class="header-mark"></a>VII. Usage of Nix Flakes</h2><p>Up to now, we have written a lot of Nix Flakes configurations to manage the NixOS system. Here is a brief introduction to the more detailed content of Nix Flakes, as well as commonly used nix flake commands.</p>
<h3 id="1-flake-outputs" class="headerLink">
    <a href="#1-flake-outputs" class="header-mark"></a>1. Flake outputs</h3><p>Flake outputs are what a flake produces as part of its build. Each flake can have many different outputs simultaneously, including but not limited to:</p>
<ul>
<li>Nix packages: named <code>apps.&lt;system&gt;.&lt;name&gt;</code>, <code>packages.&lt;system&gt;.&lt;name&gt;</code>, or <code>legacyPackages.&lt;system&gt;.&lt;name&gt;</code> in <code>flake.nix</code>&rsquo;s <code>outputs</code>.</li>
<li>Nix Helper Functions: named <code>lib</code> in <code>flake.nix</code>&rsquo;s <code>outputs</code>., which means a library for other flakes.</li>
<li>Nix development environments: named <code>devShell</code> in <code>flake.nix</code>&rsquo;s <code>outputs</code>.</li>
<li>NixOS configurations: named <code>nixosConfiguration</code> in <code>flake.nix</code>&rsquo;s <code>outputs</code>.</li>
<li>Nix templates: named <code>templates</code> in <code>flake.nix</code>&rsquo;s <code>outputs</code>.
<ul>
<li>templates can be used by command <code>nix flake init --template &lt;reference&gt;</code></li>
</ul>
</li>
<li>Other user defined outputs</li>
</ul>
<h3 id="2-flake-command-line-usage" class="headerLink">
    <a href="#2-flake-command-line-usage" class="header-mark"></a>2. Flake Command Line Usage</h3><p>after enabled <code>nix-command</code> &amp; <code>flake</code>, you can use <code>nix help</code> to get all the info of <a href="https://nixos.org/manual/nix/stable/command-ref/new-cli/nix.html" target="_blank" rel="noopener noreferrer">New Nix Commands</a>, some useful examples are listed below:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># `nixpkgs#ponysay` means `ponysay` from `nixpkgs` flake.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># [nixpkgs](https://github.com/NixOS/nixpkgs) contains `flake.nix` file, so it&#39;s a flake.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `nixpkgs` is a falkeregistry id for `github:NixOS/nixpkgs/nixos-unstable`.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># you can find all the falkeregistry ids at &lt;https://github.com/NixOS/flake-registry/blob/master/flake-registry.json&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># so this command means install and run package `ponysay` in `nixpkgs` flake.</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Hello Nix&#34;</span> <span class="p">|</span> nix run <span class="s2">&#34;nixpkgs#ponysay&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># this command is the same as above, but use a full flake URI instead of falkeregistry id.</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;Hello Nix&#34;</span> <span class="p">|</span> nix run <span class="s2">&#34;github:NixOS/nixpkgs/nixos-unstable#ponysay&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># instead of treat flake package as an application, </span>
</span></span><span class="line"><span class="cl"><span class="c1"># this command use the example package in zero-to-nix flake to setup the development environment,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and then open a bash shell in that environment.</span>
</span></span><span class="line"><span class="cl">nix develop <span class="s2">&#34;github:DeterminateSystems/zero-to-nix#example&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># instead of using a remote flake, you can open a bash shell using the flake located in the current directory.</span>
</span></span><span class="line"><span class="cl">mkdir my-flake <span class="o">&amp;&amp;</span> <span class="nb">cd</span> my-flake
</span></span><span class="line"><span class="cl"><span class="c1">## init a flake with template</span>
</span></span><span class="line"><span class="cl">nix flake init --template <span class="s2">&#34;github:DeterminateSystems/zero-to-nix#javascript-dev&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># open a bash shell using the flake in current directory</span>
</span></span><span class="line"><span class="cl">nix develop
</span></span><span class="line"><span class="cl"><span class="c1"># or if your flake has multiple devShell outputs, you can specify which one to use.</span>
</span></span><span class="line"><span class="cl">nix develop .#example
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># build package `bat` from flake `nixpkgs`, and put a symlink `result` in the current directory.</span>
</span></span><span class="line"><span class="cl">mkdir build-nix-package <span class="o">&amp;&amp;</span> <span class="nb">cd</span> build-nix-package
</span></span><span class="line"><span class="cl">nix build <span class="s2">&#34;nixpkgs#bat&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># build a local flake is the same as nix develop, skip it</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/DeterminateSystems/zero-to-nix" target="_blank" rel="noopener noreferrer">Zero to Nix - Determinate Systems</a> is a brand new guide to get started with Nix &amp; Flake, recommended to read for beginners.</p>
<h2 id="viii-nixpkgss-advanced-usage" class="headerLink">
    <a href="#viii-nixpkgss-advanced-usage" class="header-mark"></a>VIII. Nixpkgs&rsquo;s Advanced Usage</h2><p><code>callPackage</code>, <code>Overriding</code>, and <code>Overlays</code> are the techniques occasionally used when using Nix to customize the build method of Nix packages.</p>
<p>We know that many programs have a large number of build parameters that need to be configured, and different users may want to use different build parameters. This is where <code>Overriding</code> and <code>Overlays</code> come in handy. Let me give you a few examples I have encountered:</p>
<ol>
<li><a href="https://github.com/NixOS/nixpkgs/blob/e4246ae1e7f78b7087dce9c9da10d28d3725025f/pkgs/tools/inputmethods/fcitx5/fcitx5-rime.nix" target="_blank" rel="noopener noreferrer"><code>fcitx5-rime.nix</code></a>: By default, <code>rimeDataPkgs</code> for <code>fcitx5-rime</code> uses the <code>rime-data</code> package, but this parameter can be customized using <code>override</code> to load custom rime configurations (such as loading the Xiaohe keyboard input method configuration).</li>
<li><a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/editors/vscode/with-extensions.nix" target="_blank" rel="noopener noreferrer"><code>vscode/with-extensions.nix</code></a>: This package for VS Code can also be customized by overriding the value of the <code>vscodeExtensions</code> parameter to install custom plugins.
<ul>
<li><a href="https://github.com/nix-community/nix-vscode-extensions" target="_blank" rel="noopener noreferrer"><code>nix-vscode-extensions</code></a>: This is a vscode plugin manager implemented using this parameter.</li>
</ul>
</li>
<li><a href="https://github.com/NixOS/nixpkgs/blob/416ffcd08f1f16211130cd9571f74322e98ecef6/pkgs/applications/networking/browsers/firefox/common.nix" target="_blank" rel="noopener noreferrer"><code>firefox/common.nix</code></a>: Firefox also has many customizable parameters.</li>
<li>&hellip;</li>
</ol>
<p>In short, in order to customize the build parameters of Nix packages of this type, we need to use <code>Overriding</code> or <code>Overlays</code>.</p>
<h3 id="overriding" class="headerLink">
    <a href="#overriding" class="header-mark"></a>Overriding</h3><blockquote>
<p><a href="https://nixos.org/manual/nixpkgs/stable/#chap-overrides" target="_blank" rel="noopener noreferrer">Chapter 4. Overriding - nixpkgs Manual</a></p>
</blockquote>
<p>Simply put, all Nix packages in nixpkgs can be customized with <code>&lt;pkg&gt;.override {}</code> to define some build parameters, which returns a new Derivation that uses custom parameters. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">pkgs</span><span class="o">.</span><span class="n">fcitx5-rime</span><span class="o">.</span><span class="n">override</span> <span class="p">{</span><span class="n">rimeDataPkgs</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="sr">./rime-data-flypy</span>
</span></span><span class="line"><span class="cl">  <span class="p">];}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>The result of executing the above Nix expression is a new Derivation, where the <code>rimeDataPkgs</code> parameter is overridden as <code>[./rime-data-flypy]</code>, while other parameters retain their original values.</p>
<p>In addition to overriding parameters, you can also override the attributes of a Derivation(condiftion: it&rsquo;s built using <code>stdenv.mkDerivation</code>) by using <code>overrideAttrs</code>. For example:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-nix" data-lang="nix"><span class="line"><span class="cl"><span class="n">helloWithDebug</span> <span class="err">=</span> <span class="n">pkgs</span><span class="o">.</span><span class="n">hello</span><span class="o">.</span><span class="n">overrideAttrs</span> <span class="p">(</span><span class="n">finalAttrs</span><span class="p">:</span> <span class="n">previousAttrs</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">separateDebugInfo</span> <span class="o">=</span> <span class="no">true</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">});</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>In this example, <code>helloWithDebug</code> is a new Derivation, where the <code>separateDebugInfo</code> parameter is overridden as <code>true</code>, while other parameters retain their original values.</p>
<h3 id="overlays" class="headerLink">
    <a href="#overlays" class="header-mark"></a>Overlays</h3><blockquote>
<p><a href="https://nixos.org/manual/nixpkgs/stable/#chap-overlays" target="_blank" rel="noopener noreferrer">Chapter 3. Overlays - nixpkgs Manual</a></p>
</blockquote>
<p>TODO I haven&rsquo;t fully understood this part yet</p>
<h2 id="ix-nix-packaging" class="headerLink">
    <a href="#ix-nix-packaging" class="header-mark"></a>IX. Nix Packaging</h2><p>TODO I haven&rsquo;t fully understood this part yet.</p>
<h2 id="advanced-usage" class="headerLink">
    <a href="#advanced-usage" class="header-mark"></a>Advanced Usage</h2><p>After becoming familiar with the Nix toolchain, you can further explore Nix&rsquo;s three manuals to discover more ways to use it:</p>
<ul>
<li><a href="https://nixos.org/manual/nix/stable/package-management/profiles.html" target="_blank" rel="noopener noreferrer">Nix Reference Manual</a>: A guide to the Nix package manager, which mainly covers the design of the package manager and instructions for using it from the command line.</li>
<li><a href="https://nixos.org/manual/nixpkgs/unstable/" target="_blank" rel="noopener noreferrer">nixpkgs Manual</a>: A manual that introduces parameters of Nixpkgs, how to use, modify, and package Nix packages.</li>
<li><a href="https://nixos.org/manual/nixos/unstable/" target="_blank" rel="noopener noreferrer">NixOS Manual</a>: A user manual for the NixOS system, mainly including configuration instructions for system-level components such as Wayland/X11 and GPU.</li>
<li><a href="https://nixos.org/guides/nix-pills" target="_blank" rel="noopener noreferrer">nix-pills</a>: Nix Pills provides an in-depth explanation of how to use Nix to build software packages. It is written in a clear and understandable way and is worth reading, as it is also sufficiently in-depth.</li>
</ul>
<p>After becoming familiar with Nix Flakes, you can try some advanced techniques. Here are some popular community projects to try:</p>
<ul>
<li><a href="https://github.com/hercules-ci/flake-parts" target="_blank" rel="noopener noreferrer">flake-parts</a>: Simplify the writing and maintenance of configuration through the Module module system.</li>
<li><a href="https://github.com/gytis-ivaskevicius/flake-utils-plus" target="_blank" rel="noopener noreferrer">flake-utils-plus</a>: A third-party package for simplifying Flake configuration, which is apparently more powerful.</li>
<li><a href="https://github.com/numtide/devshell" target="_blank" rel="noopener noreferrer">devshell</a>: As the name suggests.</li>
<li><a href="https://github.com/divnix/digga" target="_blank" rel="noopener noreferrer">digga</a>: A large and comprehensive Flake template that combines the functionality of various useful Nix toolkits, but has a complex structure and requires some experience to navigate.</li>
<li>etc.</li>
</ul>
<h2 id="references" class="headerLink">
    <a href="#references" class="header-mark"></a>References</h2><p>Here are some useful resources that I have referred to:</p>
<ul>
<li><a href="https://github.com/DeterminateSystems/zero-to-nix" target="_blank" rel="noopener noreferrer">Zero to Nix - Determinate Systems</a>: A beginner-friendly Nix Flakes tutorial that is worth reading.</li>
<li><a href="https://lantian.pub/article/modify-website/nixos-why.lantian/" target="_blank" rel="noopener noreferrer">NixOS series(in Chinese)</a>: LanTian&rsquo;s NixOS series of articles, which are very clear and easy to understand, and a must-read for beginners.</li>
<li><a href="https://www.tweag.io/blog/2020-05-25-flakes/" target="_blank" rel="noopener noreferrer">Nix Flakes Series</a>: An official Nix Flakes tutorial series, which provides a relatively detailed introduction and is suitable for beginners.</li>
<li><a href="https://nixos.wiki/wiki/Flakes" target="_blank" rel="noopener noreferrer">Nix Flakes - Wiki</a>: The official Nix Flakes wiki, which provides a relatively rough introduction.</li>
<li><a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config</a>: My NixOS configuration repository, which also lists other configuration repositories that I have referred to in the README.</li>
</ul>
]]></content></entry><entry><title type="html">Summary of My 2021</title><link href="https://thiscute.world/en/posts/2021-summary/"/><id>https://thiscute.world/en/posts/2021-summary/</id><author><name>ryan4yin</name></author><published>2022-01-23T01:40:00+08:00</published><updated>2022-01-23T01:40:00+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/en/posts/2021-summary/wrapped_ryan4yin.webp" height="2650" width="1560"><figcaption></figcaption>
        </figure><h2 id="gossip" class="headerLink">
    <a href="#gossip" class="header-mark"></a>Gossip</h2><p>Another year has passed in the twinkling of an eye, and this New year, the global epidemic has set a new record. After Christmas, the daily increase in the United States has directly exceeded 1 million. In China, poor management in Xi&rsquo;an has led to hunger.</p>
<p>COVID-19 has been for more than two years.</p>
<p>Back to the point, after leaving from W Company at the beginning of this year, I was very lucky to join the current company, Mobiuspace, and I was mixed in the process of integrating into Mobiuspace.
However, I am quite satisfied with the overall results, the current work has been on the right track, but also found a lot of opportunities.</p>
<h2 id="life" class="headerLink">
    <a href="#life" class="header-mark"></a>Life</h2><ul>
<li>In January, I set up this Blog, and I met <a href="https://chee5e.space/" target="_blank" rel="noopener noreferrer">@Cheese</a>，@Cheese helped me adjust the style of the &ldquo;Friends&rdquo; page, thanks him very much~</li>
<li>In February, I fired my boss, and then what to say? I suddenly felt open-minded and changed my mindset 180 degrees. It was great, but I was actually very worried about my shortcomings in all aspects. Anyway, I&rsquo;m in a complicated mood. I talked a lot with <a href="https://sanshiliuxiao.top/" target="_blank" rel="noopener noreferrer">@是格子啊</a>, <a href="https://chee5e.space/" target="_blank" rel="noopener noreferrer">@Cheese</a> and former colleagues). Thank you very much for helping me sort out my thoughts and giving me an affirmation. At the same time, I was recommended by <a href="https://chee5e.space/" target="_blank" rel="noopener noreferrer">@Cheese</a> and started using twitter.</li>
<li>I climbed the mountain every day to see the scenery, bought a hammock to take a nap in the park, practiced the harmonica and bamboo flute, and played like this for a month.
<ul>
<li><figure><img src="/images/2021-summary/hammock.webp"/>
</figure>
</li>
</ul>
</li>
<li>In March, I started looking for a job. After meeting with several companies, I was very lucky to enter Mobiuspace and became a new SRE. The experience of a year in Mobiuspace is written in the &ldquo;work&rdquo; section, which is skipped here.</li>
<li>At the end of March, I watched the movie &ldquo;Raya and The Last Dragon&rdquo; (the only movie I watched in 2021), and the ending song was very good.</li>
<li>In April, by various coincidences, I unexpectedly found that my junior high school classmate&rsquo;s residence was less than one kilometer away from me. I had a meal of hometown food and bayberry wine at his house. It tasted very good!</li>
<li>In August, my two cousin came to Shenzhen for a summer internship. I crossed Shenzhen&rsquo;s east-west coastline with them. The scenery was great, but we were really hot and thirsty on the way.</li>
<li>In October
<ul>
<li>Joined Mobiuspace&rsquo;s surfing team, surfing and have a seaside barbecue for the first time.</li>
<li>Bought roller skates, learned reverse skating and step steering, and reviewed some basic skills learned in college.</li>
</ul>
</li>
<li>In December, Bought a YunMi RO Filterred Water Dispenser, and many kinds of tea. Currently I prefer to drink <strong>Black Tea</strong>, such as Dianhong - Yunnan Gold, Redsunion Keemun.
<ul>
<li><figure><a class="lightgallery" href="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp" title="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp" data-thumbnail="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp" data-sub-html="<h2>YunMi RO Filterred Water Dispenser</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp"
            srcset="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp, /images/2021-summary/yunmi-ro-filterred-water-dispenser.webp 1.5x, /images/2021-summary/yunmi-ro-filterred-water-dispenser.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp">
    </a><figcaption class="image-caption">YunMi RO Filterred Water Dispenser</figcaption>
    </figure></li>
<li><figure><a class="lightgallery" href="/images/2021-summary/my-tea.webp" title="/images/2021-summary/my-tea.webp" data-thumbnail="/images/2021-summary/my-tea.webp" data-sub-html="<h2>All kinds of tea</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/my-tea.webp"
            srcset="/images/2021-summary/my-tea.webp, /images/2021-summary/my-tea.webp 1.5x, /images/2021-summary/my-tea.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/my-tea.webp">
    </a><figcaption class="image-caption">All kinds of tea</figcaption>
    </figure></li>
</ul>
</li>
<li>In January 2022, I bought Anime PVC Figures for the first time. After putting these figures, I felt that my room was more youthful and colorful.
<ul>
<li><figure><a class="lightgallery" href="/images/2021-summary/Posts-and-Garage-Kit.webp" title="/images/2021-summary/Posts-and-Garage-Kit.webp" data-thumbnail="/images/2021-summary/Posts-and-Garage-Kit.webp" data-sub-html="<h2>Anime PVC Figures and Anime Figure Painting in my room</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/Posts-and-Garage-Kit.webp"
            srcset="/images/2021-summary/Posts-and-Garage-Kit.webp, /images/2021-summary/Posts-and-Garage-Kit.webp 1.5x, /images/2021-summary/Posts-and-Garage-Kit.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/Posts-and-Garage-Kit.webp">
    </a><figcaption class="image-caption">Anime PVC Figures and Anime Figure Painting in my room</figcaption>
    </figure></li>
</ul>
</li>
</ul>
<h2 id="readings" class="headerLink">
    <a href="#readings" class="header-mark"></a>Readings</h2><ul>
<li>After resigning at the beginning of the year, I went sightseeing, and my mind was a little more calm. I read more than half of the book &ldquo;From Lost to Found the Pacific Crest Trail&rdquo;.</li>
<li>In June, the community organized us to get vaccinated against COVID-19, I read the book &ldquo;Youth Post Station - A Portrait of Working Girls in Shenzhen&rdquo; in the waiting room, which is mainly about the lives of working girls in the 1980s and 1990s. The writing is very real and the feelings are very delicate.</li>
<li>At the end of the year, my second grandfather died. After attending the funeral, I vaguely found some profound changes in my mind. I finished reading &ldquo;Moon Palace&rdquo;, which tells the tragic life of the protagonist.</li>
<li>Most of the rest of my spare time, boring, do not want to learn anything, do not want to exercise, so I read a lot of web novels to pass the time.</li>
</ul>
<h2 id="music" class="headerLink">
    <a href="#music" class="header-mark"></a>Music</h2><p>After resigning at the beginning of the year, I practiced the bamboo flute and the blues harmonica for some time, but then it was basically silent after I got a job.</p>
<p>On the whole, I have made little progress this year.</p>
<figure><img src="/images/2021-summary/midi-keyboard-flute-harmonica.webp"/>
</figure>

<h2 id="working---the-year-i-work-in-mobiuspace" class="headerLink">
    <a href="#working---the-year-i-work-in-mobiuspace" class="header-mark"></a>Working - The year I work in Mobiuspace</h2><p>When I first joined Mobiuspace in March, I was curious, but I was so cautious that I couldn&rsquo;t believe I could get into such a great company. I felt like I was out of luck.
After all, Mobiuspace, whether it is the level of colleagues or the working atmosphere, or the number of customers, compared with my last company is qualitatively different.</p>
<p><figure><a class="lightgallery" href="/images/2021-summary/workstation-1.webp" title="/images/2021-summary/workstation-1.webp" data-thumbnail="/images/2021-summary/workstation-1.webp" data-sub-html="<h2>My first station in Mobiuspace</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/workstation-1.webp"
            srcset="/images/2021-summary/workstation-1.webp, /images/2021-summary/workstation-1.webp 1.5x, /images/2021-summary/workstation-1.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/workstation-1.webp">
    </a><figcaption class="image-caption">My first station in Mobiuspace</figcaption>
    </figure>
After getting familiar with the contents and methods of the work, leader tried his best to give me the work that best matched my interests, helping me solve problems, and at the same time giving me great autonomy, which was really great.</p>
<p>However, a high degree of autonomy also brings higher difficulty in work. I have been in a hurry, confused, and even self-doubted when I encounter difficulties. I am worried about whether I will run away the next day.</p>
<p>But fortunately, I still have the ability to adjust my mindset, take responsibility and finish the work step by step.</p>
<p>When there were several delays in my work, leader accompanied me to work overtime. After the work was done, he took me to a big dinner to reward myself. I really thanked him for his help and support.</p>
<p><figure><a class="lightgallery" href="/images/2021-summary/workstation-2.webp" title="/images/2021-summary/workstation-2.webp" data-thumbnail="/images/2021-summary/workstation-2.webp" data-sub-html="<h2>My new station, near the floor-to-ceiling window, the view is great.</h2>">
        <img
            
            loading="lazy"
            src="/images/2021-summary/workstation-2.webp"
            srcset="/images/2021-summary/workstation-2.webp, /images/2021-summary/workstation-2.webp 1.5x, /images/2021-summary/workstation-2.webp 2x"
            sizes="auto"
            alt="/images/2021-summary/workstation-2.webp">
    </a><figcaption class="image-caption">My new station, near the floor-to-ceiling window, the view is great.</figcaption>
    </figure></p>
<p>Looking back at the summary and outlook for 2020, I find that the actual progress this year is very different from what I expected last year. The initial goal was only about 10% achieved, but because I was exposed to a lot of unexpected things, I was generally satisfied:</p>
<ul>
<li>It is a great gain to be familiar with the culture and working style of the new company - Mobiuspace, and my working style has been greatly improved.</li>
<li>Contact and be familiar with Mobiuspace&rsquo;s AWS online environment
<ul>
<li>Responsible for maintaining the online Kubernetes management platform, the first time I came into contact with the online cluster peak QPS was tens of thousands. It is of great significance that I have changed from being careful at the beginning to becoming a veteran now.</li>
<li>Using python to write several Kubernetes management platform services, this is also my first time to write online services, quite a sense of achievement</li>
<li>In the second half of the year, I spent a lot of energy on the analysis and control of AWS cost, and got some good results, which benefited a lot.</li>
<li>Learned the simple use of Nginx, just enough to maintain the company&rsquo;s pre-existing Nginx proxy configuration.</li>
</ul>
</li>
<li>Lead the completion of &ldquo;create a new K8s cluster and migrate the services to the new cluster&rdquo;. Although it is not a very difficult thing, but this should be my greatest achievement in 2021.
<ul>
<li>I also encountered all kinds of problems in the process of upgrading. When I first upgraded and migrated, I prepared for a long time and panicked. As a result, there was still something wrong with some of the services during the upgrade. I was really confused at that time.</li>
</ul>
</li>
<li>Casually wrote a few demo of Go, and made little progress.</li>
<li>Learning the rust language for a week, quickly finished reading The Book, and rewrote a <code>video2chars</code> in rust</li>
<li>Learned the underlying principle of Linux container: cgroups/namespace technology, and implemented a demo with go/rust</li>
<li>Learned various network interfaces and <code>iptables</code> of Linux</li>
<li>Be familiar with PromQL/Grafana</li>
</ul>
<p>If I give myself a score, it&rsquo;s &ldquo;good&rdquo;. Because I am not very enterprising, so the result can not be called &ldquo;excellent&rdquo;.</p>
<p>By the way, the new office of Mobiuspace is really great. See my twitter for details：</p>
<blockquote class="twitter-tweet"><p lang="zh" dir="ltr">新办公区真好呐～<br><br>值此良辰美景，好想整个榻榻米坐垫，坐在角落的落地窗边工作🤣<br>那种使用公共设施工（mo）作（yu）的乐趣，以及平常工位见不到的景色交相辉映，是不太好表述的奇妙体验 <a href="https://t.co/FASffzw8N3">pic.twitter.com/FASffzw8N3</a></p>&mdash; ryan4yin | 於清樂 (@ryan4yin) <a href="https://twitter.com/ryan4yin/status/1482891448731070466?ref_src=twsrc%5Etfw">January 17, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
<h2 id="a-sense-of-technology" class="headerLink">
    <a href="#a-sense-of-technology" class="header-mark"></a>A Sense of Technology</h2><ul>
<li>Istio Service Mesh: Realize that it is a bit heavy, and its development does not necessarily match our needs
<ul>
<li>The cost of the Sidecar model is relatively high, and without tuning, it will bring a 1/3 to 1/4 increase in the cost of the service, as well as a increase of delay.</li>
<li>Thinking about whether to continue to invest in Istio or to switch to other options.</li>
</ul>
</li>
<li>Service Mesh is still evolving rapidly, and the future trend should be eBPF + Envoy + WASM.
<ul>
<li>Cilium&rsquo;s eBPF-based Service Mesh is a new trend (it falls back to Per-Node Proxy mode when using advanced features). It&rsquo;s expected to hit other Service Mesh of Sidecar mode in terms of cost and delay.</li>
</ul>
</li>
<li>As for the log of K8s cluster, we currently use a self-developed system based on gelf protocol, but there are a lot of problems.
<ul>
<li>From the point of view of improving the maintainability and ease of use of the log system, loki is worth exploring.</li>
</ul>
</li>
<li>In terms of K8s cluster management, I think the upgrade iteration of the cluster can be done more automatically and reliably. Next year, we can explore more in the direction of multi-cluster management.</li>
<li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/" target="_blank" rel="noopener noreferrer">Pod Service Quality</a>:
For non-core services, the amount of requests resources can be appropriately reduced instead of fully reserved (<code>Guaranteed</code>) to improve resource utilization.</li>
<li>The official HPA capability is not enough. Our developers needs to scale the services based on QPS/Queue or other parameters. We should continue to promote the landing of <a href="https://github.com/kedacore/keda" target="_blank" rel="noopener noreferrer">KEDA</a>.</li>
<li>In terms of cost control, I realized the benefits of ARM architecture and AWS Spot EC2.</li>
<li>There is a lot of potential room for optimization of cross-area traffic cost.</li>
<li>AI has landed in various fields, affecting our daily use of voice navigation, song synthesis, speech synthesis and many other fields, including, of course, scenarios related to SRE work: AIOps</li>
</ul>
<h2 id="prospects-of-2022" class="headerLink">
    <a href="#prospects-of-2022" class="header-mark"></a>Prospects of 2022</h2><h3 id="on-the-side-of-technology" class="headerLink">
    <a href="#on-the-side-of-technology" class="header-mark"></a>On the Side of Technology</h3><p>The outlook for this year is more focused. I strive to achieve 50%, which will be a big breakthrough.</p>
<ol>
<li>Proficient in Go and use in at least two projects
<ol>
<li>To forge iron, one must be strong. Coding is the foundation of IT.</li>
</ol>
</li>
<li>Learn kubebuilder, k8s source code.</li>
<li>Network Technologies
<ol>
<li>Service Mesh - Istio</li>
<li>Network Proxy - Envoy/APISIX</li>
<li>K8s Network Plugins: Cilium + eBPF</li>
</ol>
</li>
<li>Optimization of cost and Service Stability of AWS EKS.
<ol>
<li>Save the cost of <code>DataTransfer-Regional-Bytes</code>.</li>
<li>K8s new feature：<a href="https://kubernetes.io/docs/concepts/services-networking/topology-aware-hints/" target="_blank" rel="noopener noreferrer">Topology Aware Hints</a></li>
<li>Istio: <a href="https://istio.io/latest/docs/tasks/traffic-management/locality-load-balancing/" target="_blank" rel="noopener noreferrer">Locality Load Balancing</a></li>
<li>Optimize the EC2 Instance Type：
<ol>
<li>Use the more appropriate instance types</li>
<li>Use Instance of ARM architecture, to reduce cost and increase efficiency</li>
</ol>
</li>
<li>Popularize gRPC protocol</li>
</ol>
</li>
<li>Get through the local development environment and the running environment on the cloud
<ol>
<li><a href="https://github.com/nocalhost/nocalhost" target="_blank" rel="noopener noreferrer">nocalhost</a></li>
</ol>
</li>
<li>Multicluster Application Deployment and Disaster Recovery
<ol>
<li>karmada</li>
</ol>
</li>
<li>Explore new technologies and other possibilities（Low priority）
<ol>
<li>Kubernetes-based Service platform, Future Development Direction
<ol>
<li>kubevela</li>
<li>buildpack</li>
<li>should I promote GitOps</li>
<li>openkruise</li>
</ol>
</li>
<li>Development of Serverless platform
<ol>
<li>Knative</li>
<li>OpenFunction</li>
</ol>
</li>
<li>Machine learning / Deep learning: I would like to try to apply AI to music, voice, SRE and other areas I am interested in&hellip;</li>
</ol>
</li>
</ol>
<p>It can be expected that there will be so many opportunities for the SRE team in 2022. I really look forward to which parts I can be responsible for and what results I can achieve.</p>
<h3 id="on-the-side-of-life" class="headerLink">
    <a href="#on-the-side-of-life" class="header-mark"></a>On the Side of Life</h3><ul>
<li>Sports:
<ul>
<li>Practice roller skating well and learn some tricks, at least twice a month.</li>
<li>Make more than three short trips</li>
</ul>
</li>
<li>Music
<ul>
<li>Learn music theory again&hellip;</li>
<li>Practice MIDI Keyboard.</li>
<li>Learn Synthesizer V  Stduio Pro + Qingsu AI. Cover some of my favorite songs.</li>
</ul>
</li>
<li>Reading: The list is as follows. Read at least one of them in a month.
<ul>
<li>Literature
<ul>
<li><input checked="" disabled="" type="checkbox"> No Longer Human,  Osamu Dazai</li>
<li><input disabled="" type="checkbox"> The End of Your Life Book club,  Will Schwalbe</li>
<li><input disabled="" type="checkbox"> One Hundred Years of Solitude, Gabriel Garcia Marquez</li>
<li><input disabled="" type="checkbox"> Love in the Time of Cholera, Gabriel Garcia Marquez</li>
<li><input disabled="" type="checkbox"> Sophie&rsquo;s World</li>
<li><input disabled="" type="checkbox"> Stories of Your Life and Others, Ted Chiang</li>
<li><input disabled="" type="checkbox"> 《沈从文的后半生》</li>
<li><input disabled="" type="checkbox"> 《我与地坛》</li>
<li><input disabled="" type="checkbox"> 《将饮茶》</li>
<li><input disabled="" type="checkbox"> 《My Country and My People - 林语堂》</li>
<li><input disabled="" type="checkbox"> 《房思琪的初恋乐园》</li>
</ul>
</li>
<li>social &amp; sciences
<ul>
<li><input checked="" disabled="" type="checkbox"> Death Is But a Dream: I want to know more about &ldquo;death&rdquo; this year.</li>
<li><input disabled="" type="checkbox"> 《怎样征服美丽少女》：哈哈</li>
<li><input disabled="" type="checkbox"> Harper Perennial Modern Classics</li>
<li><input disabled="" type="checkbox"> Social Psychology</li>
<li><input disabled="" type="checkbox"> The Courage to Be Disliked</li>
<li><input disabled="" type="checkbox"> The Body: A Guide for Occupants</li>
<li><input disabled="" type="checkbox"> The Structure of Scientific Revolutions</li>
<li><input disabled="" type="checkbox"> Deng Xiaoping and the Transformation of China</li>
<li><input disabled="" type="checkbox"> On China</li>
<li><input disabled="" type="checkbox"> 《刘擎西方现代思想讲义》</li>
<li><input disabled="" type="checkbox"> The Order of Time</li>
<li><input disabled="" type="checkbox"> The Universe in Your Hand</li>
<li><input disabled="" type="checkbox"> 《圆圈正义-作为自由前提的信念》</li>
<li><input disabled="" type="checkbox"> What Do You Say After You Say Hello?</li>
</ul>
</li>
<li>Technology
<ul>
<li><input disabled="" type="checkbox"> Complexity: A Guided Tour</li>
<li><input disabled="" type="checkbox"> Site Reliability Engineering: How Google Runs Production Systems</li>
<li><input disabled="" type="checkbox"> The Phoenix Project - A Novel About IT, DevOps, and Helping Your Business Win</li>
<li><input disabled="" type="checkbox"> The Mythical Man Month and Other Essays on Software Engineering</li>
<li><input disabled="" type="checkbox"> 《绩效使能：超越 OKR》</li>
<li><input disabled="" type="checkbox"> Powerful: Building a Culture of Freedom and Responsibility</li>
<li><input disabled="" type="checkbox"> 《幕后产品-打造突破式思维》</li>
<li><input disabled="" type="checkbox"> Professional Linux Kernel Architecture</li>
<li><input disabled="" type="checkbox"> <a href="https://man7.org/tlpi/" target="_blank" rel="noopener noreferrer">The Linux Programming Interface: A Linux and UNIX System Programming Handbook</a></li>
<li><input disabled="" type="checkbox"> Refactoring - Improving the Design of Existing Code</li>
<li><input disabled="" type="checkbox"> How Networks Work</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="in-summary" class="headerLink">
    <a href="#in-summary" class="header-mark"></a>In Summary</h2><p>At the beginning of 2021, my friend and I gave myself the expectation of「拆破玉笼飞彩凤，顿开金锁走蛟龙」, which felt that it had really come true.</p>
<p>This year, I hope to be able to &ldquo;Going up one more storey&rdquo; both in life and at work.</p>
]]></content></entry><entry><title type="html">The End of Another Semester</title><link href="https://thiscute.world/en/posts/the-end-of-another-semester/"/><id>https://thiscute.world/en/posts/the-end-of-another-semester/</id><author><name>ryan4yin</name></author><published>2017-06-27T01:28:45+08:00</published><updated>2017-06-27T01:28:45+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/en/posts/the-end-of-another-semester/5-centimeters-per-second.webp" height="1920" width="1080"><figcaption></figcaption>
        </figure><!-- Love Story - The Piano Guys -->
<meting-js server="netease" type="song" id="29460780" theme="#448aff"></meting-js>
<p>Ah, there are still ten days to get rid of the city and return to that reassuring mountain forest, waiting and anxious, wondering why the remaining ten days are so difficult.</p>
<p>The final review is a mess again. I am really lazy&hellip;</p>
<p>It is so unrealistic for me to have such a big dream that I have finished thousands of lines of code. I kind of want to accept my fate.</p>
<p>After one o&rsquo;clock in the middle of the night, I was still not used to the air conditioner in the bedroom, but the cool breeze on the aisle balcony is very comfortable, and the serenity of the city now also has a bit of charm.</p>
<p>But anyway, I really want to go home.</p>
]]></content></entry></feed>