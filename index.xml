<feed xmlns="http://www.w3.org/2005/Atom"><title>This Cute World</title><link href="https://thiscute.world/index.xml" rel="self"/><link href="https://thiscute.world/"/><updated>2024-02-21T16:26:21+08:00</updated><id>https://thiscute.world/</id><author><name>ryan4yin</name></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">我的 NixOS 使用体会</title><link href="https://thiscute.world/posts/my-experience-of-nixos/"/><id>https://thiscute.world/posts/my-experience-of-nixos/</id><author><name>ryan4yin</name></author><published>2024-02-21T16:26:21+08:00</published><updated>2024-02-21T16:26:21+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/my-experience-of-nixos/nixos-and-flakes-book-202402.webp" height="2614" width="1216"><figcaption></figcaption>
        </figure><blockquote>
<p>本文最初发表于 <a href="https://www.zhihu.com/question/56543855/answer/3403111768" target="_blank" rel="noopener noreferrer">如何评价NixOS?</a>，觉得比较有价值所以再搬运到我的博客。</p>
</blockquote>
<p>我 23 年 4 月开始用 NixOS 之前也看过（<a href="https://www.zhihu.com/question/56543855/answer/3403111768" target="_blank" rel="noopener noreferrer">如何评价NixOS?</a>） 这个帖子，几个高赞回答都从不同方面给出了很有意义的评价，也是吸引我入坑的原因之一。</p>
<p>现在是 2024 年 2 月，距离我入坑 NixOS 刚好 10 个月，我当初写的新手笔记已经获得了大量好评与不少的赞助，并成为了整个社区最受欢迎的入门教程之一。自 2023 年 6 月我为它专门创建一个 GitHub 仓库与单独的文档站点以来，它已经获得了 1189 个 stars，除我之外还有 37 位读者给它提了 PR：</p>
<ul>
<li><a href="https://nixos-and-flakes.thiscute.world/zh/" target="_blank" rel="noopener noreferrer">NixOS 与 FLakes - 一份非官方的新手指南</a></li>
</ul>
<figure><img src="./my-nix-config.webp" width="80%"/><figcaption>
            <h4>NixOS &amp; Flakes Book</h4>
        </figcaption>
</figure>

<p>那么作为一个已经深度使用 NixOS 作为主力桌面系统接近 10 个月的熟手，我在这里也从另一个角度来分享下我的入坑体会。</p>
<p>注意，这篇文章不是 NixOS 入门教程，想看教程请移步上面给的链接。</p>
<h2 id="nixpkgs-中的包太少" class="headerLink">
    <a href="#nixpkgs-%e4%b8%ad%e7%9a%84%e5%8c%85%e5%a4%aa%e5%b0%91" class="header-mark"></a>Nixpkgs 中的包太少？</h2><p>先澄清下一点，NixOS 的包非常的多，Nixpkgs 中的包在体量上跟 Arch AUR 是一个级别的。<a href="https://link.zhihu.com/?target=https%3A//repology.org/repositories/statistics/total" target="_blank" rel="noopener noreferrer">Repository statistics</a> 的包仓库统计数据如下：</p>
<p><figure><img
        
        loading="lazy"
        src="./repository-statistics.webp"
        srcset="./repository-statistics.webp, ./repository-statistics.webp 1.5x, ./repository-statistics.webp 2x"
        sizes="auto"
        alt="Repository statistics"
        title="Repository statistics" ></figure></p>
<p>虽然 Nixpkgs 因为还打了许多 npm 之类的包，包的总数有水分，但即使排除掉这部分包，它跟 AUR 的包数量应该也是差不多的。</p>
<p>而且因为 Nixpkgs 是官方包仓库，使用了 Monorepo 与 PR Review 机制，整体的包质量肯定是比 AUR 要好的。上面截图也能看到 Nixpkgs 的包整体上比 AUR 更新、漏洞更少。</p>
<p>包仓库这里也是 NixOS 跟 Arch 不太同的地方，Arch 的官方包仓库收录很严格，相对的 AUR 生态相当繁荣。但任何人都能往 AUR 上传内容，虽然有一个投票机制起到一定审核作用，但这个限制太松散了。</p>
<p>而 NixOS 就很不一样了，它的官方包仓库 Nixpkgs 很乐于接受新包，想为 Nixpkgs 提个 PR 加包或功能相对其他发行版而言要简单许多，这是导致 Nixpkgs 的体量接近 AUR 的直接原因（GitHub 显示 Nixpkgs 有 5000+ 历史贡献者，这很夸张了）。NixOS 其实也有个与 AUR(Arch User Repository) 类似的 NUR（Nix User Repository），但因为 Nixpkgs 的宽松，NUR 反而没啥内容。</p>
<p>举例来说，QQ 能直接从 Nixpkgs 官方包仓库下载使用，而在 Arch 上你得用 AUR 或者 archlinux-cn.</p>
<p>这算是各有优势吧。NixOS 被人喷包少，主要是因为它不遵循 FHS 标准，导致大部分网上下载的 Linux 程序都不能直接在 NixOS 上运行。这当然有解决方案，我建议是首先看看 Nixpkgs 中是否已经有这个包了，有的话直接用就行。如果没有，再尝试一些社区的解决方案，或者自己给打个包。</p>
<p>用 NixOS 的话自己打包程序是不可避免的，因为即使 Nixpkgs 中已经有了这么多包，但它仍然不可能永远 100% 匹配你的需求，总有你想用但 Nixpkgs 跟 NUR 里边都没有的包，在 NixOS 上你常常必须要给你的包写个打包脚本，才能使它在 NixOS 上正常运行。</p>
<p>另外即使有些程序本身确实能在 NixOS 上无痛运行，但为了做到可复现，NixOS 用户通常也会选择自己手动给它打个包。</p>
<p>OK，闲话说完，下面进入正题。</p>
<h2 id="我的-nixos-使用体验" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84-nixos-%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c" class="header-mark"></a>我的 NixOS 使用体验</h2><p>首先，NixOS 比传统发行版复杂很多，也存在非常多的历史遗留问题。</p>
<p>举例来说，它的官方文档烂到逼得我一个刚学 NixOS 的新手自己边学边写入门文档。在我用自己的渣渣英语把笔记翻译了一遍发到 reddit （NixOS &amp; Nix Flakes - A Guide for Beginners）后，居然还获得了许多老外的大量好评（经过这么长时间的持续迭代，现在甚至已经变成了社区最受欢迎的新手教程之一），这侧面也说明官方文档到底有多烂。</p>
<p>至于 NixOS 值不值得学或者说投入产出比是否够高，这归根结底是个规模问题。这里的规模，一是指你对 Linux 系统所做的自定义内容的规模，二是指你系统更新的频繁程度，三是指你 Linux 机器的数量。</p>
<p>举个例子，以前我用 Deepin Ubuntu 时我基本没对系统做过什么深入定制，一是担心把系统弄出问题修复起来头疼，二是如果不额外写一份文档或脚本记录下步骤的话，我做的所有定制都是黑盒且不可迁移的，一个月后我就全忘了，只能战战兢兢地持续维护这个随着我的使用而越来越黑盒、状态越来越混沌的系统。</p>
<p>如果用的是 Arch 这种滚动发行版还好，系统一点点增量更新，遇到的一般都是小问题。而对 Ubuntu Deepin 这种，原地升级只出小问题是很少见的，这基本就意味着我必须在某个时间点，在新版本的 Ubuntu 上把我以前做过的定制再全部重做一遍，这相当痛苦。</p>
<p>很显然的一点是，我对系统做的定制越多越复杂，迁移到新版本的难度就越大。</p>
<p>我想也正是因为这一点，Arch Gentoo Fedora 这种滚动发行版才在 Linux 爱好者圈子中如此受欢迎，喜欢定制自己系统的 Linux 用户也大都使用这类滚动发行版。</p>
<p>如果你因为这些维护难题而选择极简策略——尽可能少地定制系统，能用默认的就用默认——这就是换到 NixOS 之前的我。以前我只对能在公司服务器上能用的技术感兴趣，所以对一些新兴的 CLI 工具我通常都敬而远之。</p>
<p>另一方面为了降低系统维护难度，我在以前使用 Deepin Manjaro EndeavourOS 的过程中，没对系统做任何大的变动。作为一名 SRE/DevOps，我在工作中就已经踩了够多的环境问题的坑，写腻写烦各种安装脚本、Ansible 配置了，业余完全不想搞这些幺蛾子。</p>
<p>但如果你是个喜欢定制与深入研究系统细节的极客，随着你对系统所做的定制越来越多，越来越复杂，或者你 Homelab 与云上的 Linux 机器越来越多，你一定会在某个时间点开始编写各种部署流程的文档、部署脚本或使用一些自动化工具帮自己完成一些繁琐的工作。</p>
<p>文档就不用说了，这个显然很容易过时，没啥大用。如果你选择自己写自动化脚本或选用自动化工具，它的配置会越来越复杂，而且系统更新经常会破坏掉其中一些功能，需要你手动修复。此外它还高度依赖你当前的系统环境，当你某天装了台新机器然后信心满满地用它部署环境时，大概率会遇到各种环境不一致导致的错误需要手动解决。还有一点是，你写的脚本大概率并没有仔细考量抽象、模块化、错误处理等内容，这也会导致随着规模的扩大，维护它变得越来越痛苦。</p>
<p>然后你发现了 NixOS，它有什么声明式的配置，你仔细看了下它的实现，哦这声明式的配置，不就是把一堆 bash 脚本封装了下，对用户只提供了一套简洁干净的 api 么，它实际干的活不跟我自己这几年写的一堆脚本一模一样？好像没啥新鲜的。</p>
<p>嗯接着你试用了一下，发现  NixOS 的这套系统定制脚本都存在一个叫 nixpkgs  的仓库中，有数千人在持续维护它，几十年积累下来已经拥有了一套非常丰富、也比较稳定的声明式抽象、模块系统、类型系统，专为这套超大型系统配置而开发的大规模  CICD 系统 hydra，以及逐渐形成的能满足数千人协作更新这套复杂配置的社区运营模式。</p>
<p>你立马学习 nix 语言，然后动手把这套维护了 N 年的脚本改写成 NixOS 配置。</p>
<p>越写就对它越满意，改造后的配置缩水了相当多，维护难度直线下降。</p>
<p>很大部分以前自己用各种脚本跟工具实现的功能，都被  Nixpkgs 封装好了，只需要 enable 一下再传几个关键参数，就能无痛运行。nixpkgs 中的脚本都有专门的 maintainer  维护更新，任何发现了问题的用户也可以提个 PR 修下问题，在没经过 CICD 与 staging unstable  等好几个阶段的广泛验证前，更新也不会进入 stable.</p>
<p>现在回想下我当初就为了用 systemd 跑个简单的小工具而跟 systemd 疯狂搏斗的场景，泪目&hellip; 要是我当初就懂 NixOS&hellip;</p>
<h2 id="nixos-的声明式配置" class="headerLink">
    <a href="#nixos-%e7%9a%84%e5%a3%b0%e6%98%8e%e5%bc%8f%e9%85%8d%e7%bd%ae" class="header-mark"></a>NixOS 的声明式配置</h2><p>有过一定编程经验的人都应该知道抽象与模块化的重要性，复杂程度越高的场景，抽象与模块化带来的收益就越高。Terraform/Kubernetes 甚至 Spring Boot 的流行都体现了这一点。NixOS 的声明式配置也是如此，它将底层的实现细节都封装起来了，并且这些底层封装大都有社区负责更新维护，还有 PR Review、CICD 与多阶段的测试验证确保其可靠性，这极大地降低了我的心智负担，从而解放了我的生产力。它的可复现能力则免除了我的后顾之忧，让我不再担心搞坏系统。</p>
<p>同时，声明式配置也并不代表它让你成了一个傻瓜用户，我的实际使用体验是，它让你能快速完成大部分比较常见的需求，但如果你的需求比较特殊，也可以一层层的往下探索 NixOS 的实现细节。</p>
<p>NixOS 用户翻 Nixpkgs 中的实现源码实际是每个用户的基本技能，给 Nixpkgs 提 PR 加功能加包修 Bug 的 NixOS 用户也相当常见。这既是使新用户望而却步的拦路之虎，同时也是给选择了 NixOS 的 Linux 用户提供的进阶之梯。</p>
<p>想象下大部分 Arch 用户（比如以前的我）可能用了好几年 Arch，但根本不了解 Arch 底层的实现细节，没打过自己的包。而 NixOS 能让翻源码成为常态，实际也说明理解它的实现细节并不难。我从两个方面来说明这一点。</p>
<p>第一，Nix 是一门相当简单的语言，语法规则相当少，比 Java Python 这种通用语言简单了太多。因此有一定编程经验的工程师能花两三个小时就完整过一遍它的语法。再多花一点时间，读些常见 Nix 代码就没啥难度了。</p>
<p>第二，NixOS 良好的声明式抽象与模块化系统，将 OS 分成了许多层来实现，使用户在使用过程中，既可以只关注当前这一层抽象接口，也可以选择再深入到下一层抽象来更自由地实现自己想要的功能（这种选择的权利，实际也给了用户机会去渐进式地理解 NixOS 本身）。举例来说，新手用户只要懂最上层的抽象就正常使用 NixOS。当你有了一点使用经验，想实现些自定义需求，挖下深挖一层抽象（比如说直接通过 systemd 的声明式参数自定义一些操作）通常就足够了。如果你已经是个 NixOS 熟手，想更极客一点，就可以再继续往下挖。</p>
<p>总之因为上面这两点，理解 Nixpkgs 中的源码或者使用 Nix 语言自己打几个包并不难，可以说每个有一定经验的 NixOS 用户同时也会是 NixOS 打包人。</p>
<h2 id="总结" class="headerLink">
    <a href="#%e6%80%bb%e7%bb%93" class="header-mark"></a>总结</h2><p>上面所说的你，嗯就是我自己。</p>
<p>从决定入坑 NixOS 到现在，短短 10 个月，我在 Linux 上取得的收获远超过去三年。我已经在 PC 上尝试了非常多的新技术新工具，我的 Homelab 内容也丰富了非常多（我目前已经有了十多台 NixOS 主机），我对 Linux 系统结构的了解也越来越深刻。光是这几点收获，就完全值回票价了。</p>
<p>总的来说，NixOS 很特殊，很强大。另一方面它也有着相当多的历史债务，比如说文档混乱不说人话、Flakes 特性搞了快 5 年现在还是实验状态等等。但社区正在蓬勃发展，文档、Flakes 等技术债社区都在积极解决中，而且 NixOS 的热度也在持续提升（我写的新手教程也为此出了一份力），因此我对它的未来持比较乐观的态度。</p>
]]></content></entry><entry><title type="html">个人数据安全不完全指南</title><link href="https://thiscute.world/posts/an-incomplete-guide-to-data-security/"/><id>https://thiscute.world/posts/an-incomplete-guide-to-data-security/</id><author><name>ryan4yin</name></author><published>2024-01-30T13:48:30+08:00</published><updated>2024-02-20T11:39:30+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/an-incomplete-guide-to-data-security/datasecurity.webp" height="900" width="471"><figcaption></figcaption>
        </figure><h2 id="零前言" class="headerLink">
    <a href="#%e9%9b%b6%e5%89%8d%e8%a8%80" class="header-mark"></a>零、前言</h2><p>在接触电脑以来很长的一段时间里，我都没怎么在意自己的数据安全。比如说：</p>
<ol>
<li>长期使用的同一个没有 pssphrase 保护的 SSH 密钥（RSA 2048 位），为了方便我还把它存到了 onedrive 里，而且在各种需要访问 GitHub/Gitee 或SSH 权限的虚拟机跟 PC 上传来传去。</li>
<li>Homelab 跟桌面 PC 都从来没开过全盘加密。</li>
<li>在 2022 年我的 Homelab 去年坏掉了两块国产固态硬盘（阿斯加特跟光威弈 Pro 各一根），都是系统一启动就挂，没法手动磁盘格式化，走售后直接被京东换货了。因为我的数据是明文存储的，这很可能导致我的个人数据泄露&hellip;</li>
<li>几个密码在各种站点上重复使用，其中重要账号的随机密码还是我在十多年前用 lastpass 生成的，到处用了这么多年，很难说这些密码有没有泄露（lastpass 近几年爆出的泄漏事故就不少&hellip;）</li>
<li>GitHub, Google, Jetbrains 等账号的 Backup Code 被我明文存储到了百度云盘，中间发现百度云盘安全性太差又转存到了 OneDrive，但一直是明文存储，从来没加过密。</li>
<li>一些银行账号之类的随机密码，因为担心遗忘，长期被我保存在一份印象笔记的笔记里，也是明文存储，仅做了些简单的内容替换，要猜出真正的密码感觉并不是很难。</li>
<li>以前也有过因为对 Git 操作不熟悉或者粗心大意，在公开仓库中提交了一些包含敏感信息的 commit，比如说 SSH 密钥、密码等等，有的甚至很长时间都没发现。</li>
</ol>
<p>现在在 IT 行业工作了几年，从我当下的经验来看，企业后台的管理员如果真有兴趣，查看用户的数据真的是很简单的一件事，至少国内大部分公司的用户数据，都不会做非常严格的数据加密与权限管控。
就算真有加密，那也很少是用户级别的，对运维人员或开发人员而言这些数据仍旧与未加密无异。
对系统做比较大的迭代时，把小部分用户数据导入到测试环境进行测试也是挺常见的做法&hellip;</p>
<p>总之对我而言，这些安全隐患在过去并不算大问题，毕竟我 GitHub, Google 等账号里也没啥重要数据，银行卡里也没几分钱。</p>
<p>但随着我个人数据的积累与在 GitHub, Google 上的活动越来越多、银行卡里 Money 的增加（狗头），这些数据的价值也越来越大。
比如说如果我的 GitHub 私钥泄漏，仓库被篡改甚至删除，以前我 GitHub 上没啥数据也没啥 stars 当然无所谓，
但现在我已经无法忍受丢失 GitHub 两千多个 stars 的风险了。</p>
<p>在 2022 年的时候我因为对区块链的兴趣顺便学习了一点应用密码学，了解了一些密码学的基础知识，然后年底又经历了几次可能的数据泄漏，这使我意识到我的个人数据安全已经是一个不可忽视的问题。
因此，为了避免 Github 私钥泄漏、区块链钱包助记词泄漏、个人隐私泄漏等可能，我在 2023 年 5 月做了全面强化个人数据安全的决定，并在 0XFFFF 社区发了篇帖子征求意见——<a href="https://0xffff.one/d/1528" target="_blank" rel="noopener noreferrer">学习并强化个人的数据安全性（持续更新）</a>。</p>
<p>现在大半年过去，我已经在个人数据安全上做了许多工作，目前算是达到了一个比较不错的状态。</p>
<p>我的个人数据安全方案，有两个核心的指导思想：</p>
<ol>
<li><strong>零信任</strong>：不信任任何云服务提供商、本地硬盘、网络等的可靠性与安全性，因此任何数据的落盘、网络传输都应该加密，任何数据都应该有多个副本（本地与云端）。
<ol>
<li>基于这一点，应该尽可能使用经过广泛验证的开源工具，因为开源工具的安全性更容易被验证，也避免被供应商绑架。</li>
</ol>
</li>
<li><strong>Serverless</strong>: 尽可能利用已有的各种云服务或 Git 之类的分布式存储工具来存储数据、管理数据版本。
<ol>
<li>实际上我个人最近三四年都没维护过任何个人的公网服务器，这个博客以及去年搭建的 NixOS 文档站全都是用的 Vercel 免费静态站点服务，各种数据也全都优先选用 Git 做存储与版本管理。</li>
<li>我 Homelab 算力不错，但每次往其中添加一个服务前，我都会考虑下这是否有必要，是否能使用已有的工具完成这些工作。毕竟跑的服务越多，维护成本越高，安全隐患也越多。</li>
</ol>
</li>
</ol>
<p>这篇文章记录下我所做的相关调研工作、我在这大半年的实践过程中逐渐摸索出的个人数据安全方案以及未来可能的改进方向。</p>
<p>注意这里介绍的并不是什么能一蹴而就获得超高安全性的傻瓜式方案，它需要你需要你有一定的技术背景跟时间投入，
是一个长期的学习、实践与方案迭代的过程。
另外如果你错误地使用了本文中介绍的工具或方案，可能反而会降低你的数据安全性，由此产生的任何损失与风险皆由你自己承担。</p>
<h2 id="一个人数据安全包含哪些部分" class="headerLink">
    <a href="#%e4%b8%80%e4%b8%aa%e4%ba%ba%e6%95%b0%e6%8d%ae%e5%ae%89%e5%85%a8%e5%8c%85%e5%90%ab%e5%93%aa%e4%ba%9b%e9%83%a8%e5%88%86" class="header-mark"></a>一、个人数据安全包含哪些部分？</h2><p>数据安全大概有这些方面：</p>
<ol>
<li>保障数据不会泄漏——也就是加密</li>
<li>保障数据不会丢失——也就是备份</li>
</ol>
<p>就我个人而言，我的数据安全主要考虑以下几个部分：</p>
<ol>
<li>SSH 密钥管理</li>
<li>各种网站、APP 的账号密码管理</li>
<li>灾难恢复相关的数据存储与管理
<ol>
<li>比如说 GitHub, Twitter, Google 等重要账号的二次认证恢复代码、账号数据备份等，日常都不需要用到，但非常重要，建议离线加密存储</li>
</ol>
</li>
<li>需要在多端访问的重要个人数据
<ol>
<li>比如说个人笔记、图片、视频等数据，这些数据具有私密性，但又需要在多端访问。可借助支持将数据加密存储到云端的工具来实现</li>
</ol>
</li>
<li>个人电脑與 Homelab 的数据安全与灾难恢复
<ol>
<li>我主要使用 macOS 与 NixOS，因此主要考虑的是这两个系统的数据安全与灾难恢复</li>
</ol>
</li>
</ol>
<p>下面就分别就这几个部分展开讨论。</p>
<h2 id="二是否需要使用-yubikey-等硬件密钥" class="headerLink">
    <a href="#%e4%ba%8c%e6%98%af%e5%90%a6%e9%9c%80%e8%a6%81%e4%bd%bf%e7%94%a8-yubikey-%e7%ad%89%e7%a1%ac%e4%bb%b6%e5%af%86%e9%92%a5" class="header-mark"></a>二、是否需要使用 YubiKey 等硬件密钥？</h2><p>硬件密钥的好处是可以防止密钥泄漏，但 YubiKey 在国内无官方购买渠道，而且价格不菲，只买一个 YubiKey 的话还存在丢失的风险。</p>
<p>另一方面其实基于现代密码学算法的软件密钥安全性对我而言是足够的，而且软件密钥的使用更加方便。
或许在未来，我会考虑使用 <a href="https://github.com/canokeys/canokey-core" target="_blank" rel="noopener noreferrer">canokey-core</a>、<a href="https://github.com/google/OpenSK" target="_blank" rel="noopener noreferrer">OpenSK</a>、<a href="https://github.com/solokeys/solo1" target="_blank" rel="noopener noreferrer">solokey</a> 等开源方案 DIY 几个硬件密钥，但目前我并不觉得有这必要。</p>
<h2 id="三ssh-密钥管理" class="headerLink">
    <a href="#%e4%b8%89ssh-%e5%af%86%e9%92%a5%e7%ae%a1%e7%90%86" class="header-mark"></a>三、SSH 密钥管理</h2><h3 id="21-ssh-密钥的生成" class="headerLink">
    <a href="#21-ssh-%e5%af%86%e9%92%a5%e7%9a%84%e7%94%9f%e6%88%90" class="header-mark"></a>2.1 SSH 密钥的生成</h3><p>我们一般都是直接使用 <code>ssh-keygen</code> 命令生成 SSH 密钥对，OpenSSH 目前主要支持两种密钥算法：</p>
<ol>
<li>RSA: 目前你在网上看到的大部分教程都是使用的 RSA 2048 位密钥，但其破解风险在不断提升，目前仅推荐使用 3072 位及以上的 RSA 密钥。</li>
<li>ED25519: 这是密码学家 Dan Bernstein 设计的一种新的签名算法，其安全性与 RSA 3072 位密钥相当，但其签名速度更快，且密钥更短，因此目前推荐使用 ED25519 密钥。</li>
</ol>
<h3 id="22-ssh-密钥的安全性" class="headerLink">
    <a href="#22-ssh-%e5%af%86%e9%92%a5%e7%9a%84%e5%ae%89%e5%85%a8%e6%80%a7" class="header-mark"></a>2.2 SSH 密钥的安全性</h3><p>RSA 跟 ED25519 都是被广泛使用的密码学算法，其安全性都是经过严格验证的，因此我们可以放心使用。
但为了在密钥泄漏的情况下，能够尽可能减少损失，强烈建议给个人使用的密钥添加 passphrase 保护。</p>
<p>那这个 passphrase 保护到底有多安全呢？</p>
<p>有一些密码学知识的人应该知道，pssphrase 保护的实现原理通常是：通过 KDF 算法（或者叫慢哈希算法、密码哈希算法）将用户输入的 passphrase 字符串转换成一个二进制对称密钥，然后再用这个密钥加解密具体的数据。</p>
<p>因此，使用 pssphrase 加密保护的 SSH Key 的安全性，取决于：</p>
<ol>
<li>passphrase 的复杂度，这对应其长度、字符集、是否包含特殊字符等。这由我们自己控制。</li>
<li>所使用的 KDF 算法的安全性。这由 OpenSSH 的实现决定。</li>
</ol>
<p>那么，OpenSSH 的 passphrase 是如何实现的？是否足够安全？</p>
<p>我首先 Google 了下，找到一些相关的文章（注意如下文章内容与其时间点相关，OpenSSH 的新版本会有些变化）：</p>
<ul>
<li><a href="https://news.ycombinator.com/item?id=17682946" target="_blank" rel="noopener noreferrer">(2018)The default OpenSSH key encryption is worse than plaintext</a>: OpenSSH 默认的 SSH RSA 密钥格式直接使用 MD5 来派生出用于 AES 加密的对称密钥，再用这个密钥加密你的 RSA 私钥，这意味着它的破解速度将会相当的快。</li>
<li><a href="https://serverfault.com/questions/1056814/password-security-of-encrypted-ssh-private-key-how-to-read-round-number-or-cost" target="_blank" rel="noopener noreferrer">(2021)Password security of encrypted SSH private key: How to read round number or costfactor of bcrypt</a>: 这里有个老哥在回答中简单推算了下，以说明他认为 OpenSSH 默认的 passphrase 加密相当安全。</li>
</ul>
<p>在 <a href="https://www.openssh.com/releasenotes.html" target="_blank" rel="noopener noreferrer">OpenSSH release notes</a> 中搜索 passphrase 跟 kdf 两个关键字，找到些关键信息如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">OpenSSH 9.4/9.4p1 (2023-08-10)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> * ssh-keygen(1): increase the default work factor (rounds) for the
</span></span><span class="line"><span class="cl">   bcrypt KDF used to derive symmetric encryption keys for passphrase
</span></span><span class="line"><span class="cl">   protected key files by 50%.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">----------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">OpenSSH 6.5/6.5p1 (2014-01-30)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> * Add a new private key format that uses a bcrypt KDF to better
</span></span><span class="line"><span class="cl">   protect keys at rest. This format is used unconditionally for
</span></span><span class="line"><span class="cl">   Ed25519 keys, but may be requested when generating or saving
</span></span><span class="line"><span class="cl">   existing keys of other types via the -o ssh-keygen(1) option.
</span></span><span class="line"><span class="cl">   We intend to make the new format the default in the near future.
</span></span><span class="line"><span class="cl">   Details of the new format are in the PROTOCOL.key file.
</span></span></code></pre></td></tr></table>
</div>
</div><p>所以从 2014 年发布的 OpenSSH 6.5 开始，ed25519 密钥的 passphrase 才是使用 bcrypt KDF 生成的。
而对于其他类型的密钥，仍旧长期使用基于 MD5 hash 的密钥格式，没啥安全性可言。</p>
<p>即使 2023-08-10 发布的 9.4 版本增加了默认的 bcrypt KDF rounds 次数，它的安全性仍然很值得怀疑。
bcrypt 本身的安全性就越来越差，现代化的加密工具基本都已经升级到了 scrypt 甚至 argon2.
因此要想提升安全性，最好是能更换更现代的 KDF 算法，或者至少增加 bcrypt KDF 的 rounds 数量。</p>
<p>我进一步看了 <code>man ssh-keygen</code> 的文档，没找到任何修改 KDF 算法的参数，不过能通过 <code>-a</code> 参数来修改 KDF 的 rounds 数量，
OpeSSh 9.4 的 man 信息中写了默认使用 16 rounds.</p>
<p>考虑到大部分人都使用默认参数生成 Key，而且绝大部分用户都没有密码学基础，大概率不知道 KDF、Rounds 是什么意思，我们再了解下 <code>ssh-keygen</code> 默认参数。
在 relase note 中我进一步找到这个：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">OpenSSH 9.5/9.5p1 (2023-10-04)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Potentially incompatible changes
</span></span><span class="line"><span class="cl">--------------------------------
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> * ssh-keygen(1): generate Ed25519 keys by default. Ed25519 public keys
</span></span><span class="line"><span class="cl">   are very convenient due to their small size. Ed25519 keys are
</span></span><span class="line"><span class="cl">   specified in RFC 8709 and OpenSSH has supported them since version 6.5
</span></span><span class="line"><span class="cl">   (January 2014).
</span></span></code></pre></td></tr></table>
</div>
</div><p>也就是说从 2023-10-04 发布的 9.5 开始，OpenSSH 才默认使用 ED25519。</p>
<p>结合上面的分析可以推断出，目前绝大部分用户都是使用的 RSA 密钥，且其 passphrase 的安全性很差，不加 passphrase 就是裸奔，加了也很容易被破解。
如果你使用的也这种比较老的密钥类型，那千万别觉得自己加了 passphrase 保护就很安全，这完全是错觉（</p>
<p>即使是使用最新的 ssh-keygen 生成的 ED25519 密钥，其默认也是用的 bcrypt 16 rounds 生成加密密钥，其安全性在我看来也是不够的。</p>
<p>总结下，在不考虑其他硬件密钥/SSH CA 的情况下，最佳的 SSH Key 生成方式应该是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-keygen -t ed25519 -a <span class="m">256</span> -C <span class="s2">&#34;xxx@xxx&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>rounds 的值根据你本地的 CPU 性能来定，我在 Macbook Pro M2 上测了下，
64 rounds 大概是 0.5s，128 rounds 大概需要 1s，256 rounds 大概 2s，用时与 rounds 值是线性关系。</p>
<p>考虑到我的个人电脑性能都还挺不错，而且只需要在每次重启电脑后通过 <code>ssh-add ~/.ssh/xxx</code> 解锁一次，后续就一直使用内存中的密钥了，一两秒的时间还是可以接受的，因此我将当前使用的所有 SSH Key 都使用上述参数重新生成了一遍。</p>
<h3 id="23-ssh-密钥的分类管理" class="headerLink">
    <a href="#23-ssh-%e5%af%86%e9%92%a5%e7%9a%84%e5%88%86%e7%b1%bb%e7%ae%a1%e7%90%86" class="header-mark"></a>2.3 SSH 密钥的分类管理</h3><p>在所有机器上使用同一个 SSH 密钥，这是我过去的做法，但这样做有几个问题：</p>
<ol>
<li>一旦某台机器的密钥泄漏，那么就需要重新生成并替换所有机器上的密钥，这很麻烦。</li>
<li>密钥需要通过各种方式传输到各个机器上，这也存在泄漏的风险。</li>
</ol>
<p>因此，我现在的做法是：</p>
<ol>
<li>对所有桌面电脑跟笔记本，都在其本地生成一个专用的 SSH 密钥配置到 GitHub 跟常用的服务器上。<strong>这个 SSH 私钥永远不会离开这台机器</strong>。</li>
<li>对于一些相对不重要的 Homelab 服务器，额外生成一个专用的 SSH 密钥，配置到这些服务器上。在一些跳板机跟测试机上会配置这个密钥方便测试与登录到其他机器。</li>
<li>上述所有 SSH 密钥都添加了 passphrase 保护，且使用了 bcrypt 256 rounds 生成加密密钥。</li>
</ol>
<p>我通过这种方式缩小了风险范围，即使某台机器的密钥泄漏，也只需要重新生成并替换这台机器上的密钥即可。</p>
<h3 id="24-ssh-ca---更安全合理的-ssh-密钥管理方案" class="headerLink">
    <a href="#24-ssh-ca---%e6%9b%b4%e5%ae%89%e5%85%a8%e5%90%88%e7%90%86%e7%9a%84-ssh-%e5%af%86%e9%92%a5%e7%ae%a1%e7%90%86%e6%96%b9%e6%a1%88" class="header-mark"></a>2.4 SSH CA - 更安全合理的 SSH 密钥管理方案？</h3><p>搜到些资料：</p>
<ul>
<li><a href="https://www.ruanyifeng.com/blog/2020/07/ssh-certificate.html" target="_blank" rel="noopener noreferrer">SSH 证书登录教程</a></li>
</ul>
<p>TODO 待研究。</p>
<h2 id="四个人的账号密码管理" class="headerLink">
    <a href="#%e5%9b%9b%e4%b8%aa%e4%ba%ba%e7%9a%84%e8%b4%a6%e5%8f%b7%e5%af%86%e7%a0%81%e7%ae%a1%e7%90%86" class="header-mark"></a>四、个人的账号密码管理</h2><p>我曾经大量使用了 Chrome/Firefox 自带的密码存储功能，但用到现在其实也发现了它们的许多弊端。
有同事推崇 1Password 的使用体验，它的自动填充跟同站点的多密码管理确实做得非常优秀，但一是要收费，二是它是商业的在线方案，基于零信任原则，我不太想使用这种方案。</p>
<p>作为开源爱好者，我最近找到了一个非常适合我自己的方案：<a href="https://www.passwordstore.org/" target="_blank" rel="noopener noreferrer"><strong>password-store</strong></a>.</p>
<p>这套方案使用 gpg 加密账号密码，每个文件就是一个账号密码，通过文件树来组织与匹配账号密码与 APP/站点的对应关系，并且生态完善，对 firefox/chrome/android/ios 的支持都挺好。</p>
<p>缺点是用 GPG 加密，上手有点难度，但对咱来说完全可以接受。</p>
<p>我在最近使用 pass-import 从 firefox/chrome 中导入了我当前所有的账号密码，并对所有的重要账号密码进行了一次全面的更新，一共改了二三十个账号，全部采用了随机密码。</p>
<p>当前的存储同步与多端使用方式：</p>
<ol>
<li>pass 的加密数据使用 GitHub 私有仓库存储，pass 原生支持基于 Git 的存储方案。
<ol>
<li>因为数据全都是使用 ECC Curve 25519 GPG 加密的，即使仓库内容泄漏，数据的安全性仍然有保障。</li>
</ol>
</li>
<li>在浏览器与移动端，则分别使用这些客户端来读写 pass 中的密码：
<ol>
<li>Android: <a href="https://github.com/android-password-store/Android-Password-Store" target="_blank" rel="noopener noreferrer">https://github.com/android-password-store/Android-Password-Store</a></li>
<li>IOS： <a href="https://github.com/mssun/passforios" target="_blank" rel="noopener noreferrer">https://github.com/mssun/passforios</a></li>
<li>Brosers(Chrome/Firefox): <a href="https://github.com/browserpass/browserpass-extension" target="_blank" rel="noopener noreferrer">https://github.com/browserpass/browserpass-extension</a></li>
</ol>
</li>
<li>基於雞蛋不放在同一個籃子裏的原則，otp/mfa 的動態密碼則使用 google authenticator 保存與多端同步，並留有一份離線備份用於災難恢復。登錄 Google 賬號目前需要我 Android 手機或短信驗證，因此安全性符合我的需求。</li>
</ol>
<p>我的详细 pass 配置见 <a href="https://github.com/ryan4yin/nix-config/tree/7e67466/home/base/desktop/password-store" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/password-store</a>.</p>
<p>其他相关资料：</p>
<ul>
<li><a href="https://github.com/tijn/awesome-password-store" target="_blank" rel="noopener noreferrer">awesome-password-store</a></li>
<li><a href="https://github.com/gopasspw/gopass" target="_blank" rel="noopener noreferrer">https://github.com/gopasspw/gopass</a>: reimplement in go, with more features.</li>
</ul>
<p>遇到过的一些问题与解法：</p>
<ul>
<li><a href="https://github.com/mssun/passforios/issues/131" target="_blank" rel="noopener noreferrer">passforios - Merge conflicts</a></li>
</ul>
<h3 id="31-pass-使用的-gpg-够安全么" class="headerLink">
    <a href="#31-pass-%e4%bd%bf%e7%94%a8%e7%9a%84-gpg-%e5%a4%9f%e5%ae%89%e5%85%a8%e4%b9%88" class="header-mark"></a>3.1 pass 使用的 GPG 够安全么？</h3><p>GnuPG 是一个很有历史，而且使用广泛的加密工具，但它的安全性如何呢？</p>
<p>我找到些相关文档：</p>
<ul>
<li><a href="https://ulyc.github.io/2021/01/13/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8A/" target="_blank" rel="noopener noreferrer">2021年，用更现代的方法使用PGP（上）</a></li>
<li><a href="https://nullprogram.com/blog/2019/07/10/" target="_blank" rel="noopener noreferrer">Predictable, Passphrase-Derived PGP Keys</a></li>
<li><a href="https://blog.eleven-labs.com/en/openpgp-almost-perfect-key-pair-part-1/" target="_blank" rel="noopener noreferrer">OpenPGP - The almost perfect key pair</a></li>
</ul>
<p>简单总结下，GnuPG 的每个 secret key 都是随机生成的，互相之间没有关联（即不像区块链钱包那样具有确定性）。
生成出的 key 被使用 passphrase 加密保存，每次使用时都需要输入 passphrase 解密。</p>
<p>那么还是之前在调研 OpenSSH 时我们提到的问题：它使用的 KDF 算法与参数是否足够安全？</p>
<p>OpenPGP 标准定义了 <a href="https://datatracker.ietf.org/doc/html/rfc4880#section-3.7" target="_blank" rel="noopener noreferrer">String-to-Key (S2K)</a>
算法用于从 passphrase 生成对称加密密钥，GnuPG 遵循该规范，并且提供了相关的参数配置选项，
相关参数的文档 <a href="https://gnupg.org/documentation/manuals/gnupg/OpenPGP-Options.html#OpenPGP-Options" target="_blank" rel="noopener noreferrer">OpenPGP protocol specific options</a> 内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">--s2k-cipher-algo name
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Use name as the cipher algorithm for symmetric encryption with a passphrase if --personal-cipher-preferences and --cipher-algo are not given. The default is AES-128.
</span></span><span class="line"><span class="cl">--s2k-digest-algo name
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Use name as the digest algorithm used to mangle the passphrases for symmetric encryption. The default is SHA-1.
</span></span><span class="line"><span class="cl">--s2k-mode n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Selects how passphrases for symmetric encryption are mangled. If n is 0 a plain passphrase (which is in general not recommended) will be used, a 1 adds a salt (which should not be used) to the passphrase and a 3 (the default) iterates the whole process a number of times (see --s2k-count).
</span></span><span class="line"><span class="cl">--s2k-count n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    Specify how many times the passphrases mangling for symmetric encryption is repeated. This value may range between 1024 and 65011712 inclusive. The default is inquired from gpg-agent. Note that not all values in the 1024-65011712 range are legal and if an illegal value is selected, GnuPG will round up to the nearest legal value. This option is only meaningful if --s2k-mode is set to the default of 3.
</span></span></code></pre></td></tr></table>
</div>
</div><p>默认仍旧使用 AES-128 做 pssphrase 场景下的对称加密，数据签名还是用的 SHA-1，这俩都已经不太安全了，尤其是 SHA-1，已经被证明存在安全问题。
因此，使用默认参数生成的 GPG 密钥，其安全性是不够的。</p>
<p>为了获得最佳安全性，我们需要：</p>
<ol>
<li>
<p>使用如下参数生成 GPG 密钥：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">gpg --s2k-mode 3 --s2k-count 65011712 --s2k-digest-algo SHA512 --s2k-cipher-algo AES256 ...
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>加密、签名、认证都使用不同的密钥，每个密钥只用于特定的场景，这样即使某个密钥泄漏，也不会影响其他场景的安全性。</p>
</li>
</ol>
<p>为了在全局使用这些参数，可以将它们添加到你的 <code>~/.gnupg/gpg.conf</code> 配置文件中。</p>
<p>详见我的 gpg 配置 <a href="https://github.com/ryan4yin/nix-config/tree/7e67466/home/base/desktop/gpg" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/gpg</a></p>
<h2 id="五跨平台的加密备份同步工具的选择" class="headerLink">
    <a href="#%e4%ba%94%e8%b7%a8%e5%b9%b3%e5%8f%b0%e7%9a%84%e5%8a%a0%e5%af%86%e5%a4%87%e4%bb%bd%e5%90%8c%e6%ad%a5%e5%b7%a5%e5%85%b7%e7%9a%84%e9%80%89%e6%8b%a9" class="header-mark"></a>五、跨平台的加密备份同步工具的选择</h2><p>我日常同时在使用 macOS 与 NixOS，因此不论是需要离线存储的灾难恢复数据，还是需要在多端访问的个人数据，都需要一个跨平台的加密备份与同步工具。</p>
<p>前面提到的 pass 使用 GnuPG 进行文件级别的加密，但在很多场景下这不太适用，而且 GPG 本身也太重了，还一堆历史遗留问题，我不太喜欢。</p>
<p>为了其他数据备份与同步的需要，我需要一个跨平台的加密工具，目前调研到有如下这些：</p>
<ol>
<li>文件级别的加密
<ol>
<li>这个有很多现成的现代加密工具，比如 <strong>age</strong>/<strong>sops</strong>, 都挺不错，但是针对大量文件的情况下使用比较繁琐。</li>
</ol>
</li>
<li>全盘加密，或者支持通过 FUSE 模拟文件系统
<ol>
<li>首先 LUKS 就不用考虑了，它基本只在 Linux 上能用。</li>
<li>跨平台且比较活跃的项目中，我找到了 <strong>rclone</strong> 与 <strong>restic</strong> 这两个项目，都支持云同步，各有优缺点。</li>
<li>restic 相对 rclone 的优势，主要是天然支持增量 snapshots 的功能，可以保存备份的历史快照，并设置灵活的历史快照保存策略。这对可能有回滚需求的数据而言是很重要的。比如说 PVE 虚拟机快照的备份，有了 restic 我们就不再需要依赖 PVE 自身孱弱的快照保留功能，全交给 restic 实现就行。</li>
</ol>
</li>
<li>多端加密同步
<ol>
<li>上面提到的 rclone 与 restic 都支持各种云存储，因此都是不错的多端加密同步工具。</li>
<li>最流行的开源数据同步工具貌似是 synthing，但它对加密的支持还不够完善，暂不考虑。</li>
</ol>
</li>
</ol>
<p>进一步调研后，我选择了 <strong>age</strong>, <strong>rclone</strong> 与 <strong>restic</strong> 作为我的跨平台加密备份与同步工具。
这三个工具都比较活跃，stars 很高，使用的也都是比较现代的密码学算法：</p>
<ol>
<li><a href="https://age-encryption.org/v1" target="_blank" rel="noopener noreferrer">age</a>: 对于对称加密的场景，使用 ChaCha20-Poly1305 AEAD 加密方案，对称加密密钥使用 scrypt KDF 算法生成。</li>
<li><a href="https://rclone.org/crypt/" target="_blank" rel="noopener noreferrer">rclone</a>: 使用基于 XSalsa20-Poly1305 的 AEAD 加密方案，key 通过 scrypt KDF 算法生成，并且默认会加盐。</li>
<li><a href="https://restic.readthedocs.io/en/stable/100_references.html#keys-encryption-and-mac" target="_blank" rel="noopener noreferrer">restic</a>: 使用 AES-256-CTR 加密，使用 Poly1305-AES 认证数据，key 通过 scrypt KDF 算法生成。</li>
</ol>
<p>对于 Nix 相关的 secrets 配置，我使用了 age 的一个适配库 agenix 完成其自动加解密配置，并将相关的加密数据保存在我的 GitHub 私有仓库中。
详见 <a href="https://github.com/ryan4yin/nix-config/tree/7e67466/secrets" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/secrets</a>.
关于这个仓库的详细加解密方法，在后面第八节「桌面电脑的数据安全」中会介绍。</p>
<h2 id="六灾难恢复相关的数据存储与管理" class="headerLink">
    <a href="#%e5%85%ad%e7%81%be%e9%9a%be%e6%81%a2%e5%a4%8d%e7%9b%b8%e5%85%b3%e7%9a%84%e6%95%b0%e6%8d%ae%e5%ad%98%e5%82%a8%e4%b8%8e%e7%ae%a1%e7%90%86" class="header-mark"></a>六、灾难恢复相关的数据存储与管理</h2><p>相关数据包括：GitHub, Twitter, Google 等重要账号的二次认证恢复代码、账号数据备份、PGP 主密钥与吊销证书等等。</p>
<p>这些数据日常都不需要用到，但在账号或两步验证设备丢失时就非要使用到其中的数据才能找回账号或吊销某个证书，是非常重要的数据。</p>
<p>我目前的策略是：使用 rclone + 1024bits 随机密码加密存储到两个 U 盘中（双副本），放在不同的地方，并且每隔半年到一年检查一遍数据。</p>
<p>对应的 rclone 解密配置本身也设置了比较强的 passphrase 保护，并通过我的 secrets 私有 Git 仓库多端加密同步。</p>
<h2 id="七需要在多端访问的重要个人数据" class="headerLink">
    <a href="#%e4%b8%83%e9%9c%80%e8%a6%81%e5%9c%a8%e5%a4%9a%e7%ab%af%e8%ae%bf%e9%97%ae%e7%9a%84%e9%87%8d%e8%a6%81%e4%b8%aa%e4%ba%ba%e6%95%b0%e6%8d%ae" class="header-mark"></a>七、需要在多端访问的重要个人数据</h2><p>相关数据包括：个人笔记、重要的照片、录音、视频、等等。</p>
<p>因为日常就需要在多端访问，因此显然不能离线存储。</p>
<h3 id="1-个人笔记" class="headerLink">
    <a href="#1-%e4%b8%aa%e4%ba%ba%e7%ac%94%e8%ae%b0" class="header-mark"></a>1. 个人笔记</h3><p>不包含个人隐私的笔记，我直接用公开 GitHub 仓库 [ryan4yin/knowledge] (<a href="https://github.com/ryan4yin/knowledge/" target="_blank" rel="noopener noreferrer">https://github.com/ryan4yin/knowledge/</a>) 存储了，不需要加密。</p>
<p>对于不便公开的个人笔记，有这些考虑：</p>
<ol>
<li>我的个人笔记目前主要是在移动端编辑，因此支持 Android/iOS 的客户端是必须的。</li>
<li>要能支持 Markdown/Orgmode 等通用的纯文本格式，纯文本格式更容易编写与分析，而通用格式则可以避免被平台绑定。</li>
<li>因为主要是移动端编辑，其实不需要多复杂的功能。
<ul>
<li>以后可能会希望在桌面端做富文本编辑，但目前还没这种私人笔记的需求。</li>
</ul>
</li>
<li>希望具有类似 Git 的分布式存储与同步、笔记版本管理功能，如果能直接使用 Git 那肯定是最好的。</li>
<li>端到端的加密存储与同步</li>
<li>如果有类似 Git 的 Diff 功能就更好了。</li>
</ol>
<p>我一开始考虑直接使用基于 Git 仓库的方案，能获得 Git 的所有功能，同时还避免额外自建一个笔记服务。
找到个 <a href="https://github.com/GitJournal/GitJournal" target="_blank" rel="noopener noreferrer">GitJournal</a> ，数据存在 GitHub 私有仓库用了一个月，功能不太多但够用。但发现它项目不咋活跃，基于 SSH 协议的 Git 同步在大仓库上也有些毛病，而且数据明文存在 Git 仓库里，安全性相对差一些。</p>
<p>另外找到个 <a href="https://github.com/AGWA/git-crypt" target="_blank" rel="noopener noreferrer">git-crypt</a> 能在 Git 上做一层透明加密，但没找到支持它的移动端 APP，而且项目也不咋活跃。</p>
<p>在 <a href="https://github.com/topics/note-taking" target="_blank" rel="noopener noreferrer">https://github.com/topics/note-taking</a> 下看了些流行项目，主要有这些：</p>
<ol>
<li>Joplin
<ul>
<li>支持 S3/WebDAV 等多种协议同步数据，支持端到端加密</li>
</ul>
</li>
<li>Outline 等 Wiki 系统
<ul>
<li>它直接就是个 Web 服务，主要面向公开的 Wiki，不适合私人笔记</li>
</ul>
</li>
<li>Logseq/Obsidian 等双链笔记软件（其中 Obsidian 是闭源软件）
<ul>
<li>都是基于本地文件的笔记系统，也没加密工具，需要借助其他工具实现数据加密与同步</li>
<li>其中 Logseq 是大纲流，一切皆列表。而 Obsidian 是文档流，比较贴近传统的文档编辑体验。</li>
<li>Obsidian 跟 Logseq 的 Sync 功能都是按月收费，相当的贵。社区有通过 Git 同步的方案，但都很 trickk，也不稳定。</li>
</ul>
</li>
<li>AppFlowy/Affine/apitable 等 Notion 替代品
<ul>
<li>都是富文本编辑，不适合移动端设备</li>
</ul>
</li>
</ol>
<p>在移动端使用 Synthing 或 Git 等第三方工具同步笔记数据，都很麻烦，而且安全性也不够。
因此目前看在移动端也能用得舒服的话，最稳妥的选择是第一类笔记 APP，简单试用后我选择了最流行的 Joplin.</p>
<h3 id="2-照片视频等其他个人数据" class="headerLink">
    <a href="#2-%e7%85%a7%e7%89%87%e8%a7%86%e9%a2%91%e7%ad%89%e5%85%b6%e4%bb%96%e4%b8%aa%e4%ba%ba%e6%95%b0%e6%8d%ae" class="header-mark"></a>2. 照片、视频等其他个人数据</h3><ol>
<li>Homelab 中的 Windows-NAS-Server，两个 4TB 的硬盘，通过 SMB 局域网共享，公网所有客户端（包括移动端）都能通过 tailscale + rclone 流畅访问。</li>
<li>部分重要的数据再通过 rclone 加密备份一份到云端，可选项有：
<ol>
<li><a href="https://www.qingcloud.com/products/objectstorage/" target="_blank" rel="noopener noreferrer">青云对象存储</a> 与 <a href="https://www.qiniu.com/prices/kodo" target="_blank" rel="noopener noreferrer">七牛云对象存储 Kodo</a>，它们都有每月 10GB 的免费存储空间，以及 1GB-10GB 的免费外网流量。</li>
<li><a href="https://help.aliyun.com/zh/oss/product-overview/billing-overview" target="_blank" rel="noopener noreferrer">阿里云 OSS</a> 也能免费存 5GB 数据以及每月 5GB 的外网流量，可以考虑使用。</li>
</ol>
</li>
</ol>
<h2 id="八桌面电脑與-homelab-的数据安全" class="headerLink">
    <a href="#%e5%85%ab%e6%a1%8c%e9%9d%a2%e7%94%b5%e8%84%91%e8%88%87-homelab-%e7%9a%84%e6%95%b0%e6%8d%ae%e5%ae%89%e5%85%a8" class="header-mark"></a>八、桌面电脑與 Homelab 的数据安全</h2><p>我的桌面电脑都是 macOS 与 NixOS，Homlab 虚拟机也已经 all in NixOS，另外我目前没有任何云上服务器。</p>
<p>另外虽然也有两台 Windows 虚拟机，但极少对它们做啥改动，只要做好虚拟机快照的备份就 OK 了。</p>
<p>对于 NixOS 桌面系统与 Homelab 虚拟机，我当前的方案如下：</p>
<ul>
<li>桌面主机
<ul>
<li>启用 LUKS2 全盘加密 + Secure Boot，在系统启动阶段需要输入 passphrase 解密 NixOS 系统盘才能正常进入系统。
<ul>
<li>LUKS2 的 passphrase 为一个比较长的密码学随机字符串。</li>
<li>LUKS2 的所有安全设置全拉到能接受的最高（比较重要的是 <code>--iter-time</code>，计算出 unlock key 的用时，默认 2s，安全起见咱设置成了 5s）
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">cryptsetup --type luks2 --cipher aes-xts-plain64 --hash sha512 --iter-time 5000 --key-size 256 --pbkdf argon2id --use-urandom --verify-passphrase luksFormat device
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>LUKS2 使用的 argon2id 是比 scrypt 更强的 KDF 算法，其安全性是足够的。</li>
</ul>
</li>
<li>桌面主機使用 tmpfs 作为根目录，所有未明确声明持久化的数据，都会在每次重启后被清空，这强制我去了解自己装的每个软件都存了哪些数据，是否需要持久化，使整个系统更白盒，提升了整个系统的环境可信度。</li>
</ul>
</li>
<li>Homelab
<ul>
<li>Homelab 的 PVE 物理机启用 LUKS 全盘加密与 btrfs + zstd 压缩，买几个便宜的 U 盘用于自动解密（注意解密密钥的离线加密备份）。</li>
<li>Homelab 虚拟机统一使用一个 Homelab 专用 SSH 私钥，保存在我的 secrets 仓库中，在部署我的桌面电脑与 Homelab 中的专用跳板机时，agenix 会将其解密出来并存放到特定位置。
<ul>
<li>Homelab 虚拟机包含的重要数据相对少些，因此安全要求要弱于桌面主机。</li>
</ul>
</li>
</ul>
</li>
<li>Secrets 說明
<ul>
<li>重要的通用 secrets，都加密保存在我的 secrets 私有仓库中，在部署我的 nix-config 时使用主机本地的 SSH 系统私钥自动解密。
<ul>
<li>也就是说要在一台新电脑（不論是桌面主機還是 NixOS 虛擬機）上成功部署我的 nix-config 配置，需要的准备流程：
<ul>
<li>本地生成一个新的 ssh key，将公钥配置到 GitHub，并 <code>ssh-add</code> 这个新的私钥，使其能够访问到我的私有 secrets 仓库。</li>
<li>将新主机的系统公钥 <code>/etc/ssh/ssh_host_ed25519_key.pub</code> 发送到一台旧的可解密 secrets 仓库数据的主机上。如果该文件不存在则先用 <code>sudo ssh-keygen -A</code> 生成。</li>
<li>在旧主机上，将收到的新主机公钥添加到 secrets 仓库的 secrets.nix 配置文件中，并使用 agenix 命令 rekey 所有 secrets 数据，然后 commit &amp; push。</li>
<li>现在新主机就能够通过 <code>nixos-rebuild switch</code> 或 <code>darwin-rebuild switch</code> 成功部署我的 nix-config 了，agenix 会自动使用新主机的系统私钥 <code>/etc/ssh/ssh_host_ed25519_key</code> 解密 secrets 仓库中的数据并完成部署工作。</li>
</ul>
</li>
<li>这份 secrets 配置在 macOS 跟 NixOS 上通用，也与 CPU 架构无关，agenix 在这两个系统上都能正常工作。</li>
</ul>
</li>
<li>基于安全性考虑，对 secrets 进行分类管理与加密：
<ul>
<li>桌面电脑能解密所有的 secrets</li>
<li>Homelab 中的跳板机只能解密 Homelab 相关的所有 secrets</li>
<li>其他所有的 NixOS 虚拟机只能解密同类别的 secrets，比如一台监控机只能解密监控相关的 secrets.</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>对于 macOS，它本身的磁盘安全我感觉就已经做得很 OK 了，而且它能改的东西也比较有限。我的安全设置如下：</p>
<ul>
<li>启用 macOS 的全盘加密功能</li>
<li>常用的 secrets 的部署与使用方式，与前面 NixOS 的描述完全一致</li>
</ul>
<h3 id="macosnixos-数据的灾难恢复" class="headerLink">
    <a href="#macosnixos-%e6%95%b0%e6%8d%ae%e7%9a%84%e7%81%be%e9%9a%be%e6%81%a2%e5%a4%8d" class="header-mark"></a>macOS/NixOS 数据的灾难恢复？</h3><p>在使用 nix-darwin 跟 NixOS 的情况下，整个 macOS/NixOS 的系统环境都是通过我的 <a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config</a> 声明式配置的，因此桌面电脑的灾难恢复根本不是一个问题。</p>
<p>只需要简单的几行命令就能在一个全新的系统上恢复出我的 macOS / NixOS 桌面环境，所有密钥也会由 agenix 自动解密并放置到正确的位置。</p>
<p>要说有恢复难题的，也就是一些个人数据了，这部分已经在前面第七小节介绍过了，用 rclone/restic 就行。</p>
<h2 id="九总结下我的数据存在了哪些地方" class="headerLink">
    <a href="#%e4%b9%9d%e6%80%bb%e7%bb%93%e4%b8%8b%e6%88%91%e7%9a%84%e6%95%b0%e6%8d%ae%e5%ad%98%e5%9c%a8%e4%ba%86%e5%93%aa%e4%ba%9b%e5%9c%b0%e6%96%b9" class="header-mark"></a>九、总结下我的数据存在了哪些地方</h2><ol>
<li>secrets 私有仓库: 它会被我的 nix-config 自动拉取并部署到所有主力电脑上，包含了 homelab ssh key, GPG subkey, 以及其他一些重要的 secrets.
<ol>
<li>它通过我所有桌面电脑的 <code>/etc/ssh/ssh_host_ed25519_key.pub</code> 公钥加密，在部署时自动使用对应的私钥解密。</li>
<li>此外该仓库还添加了一个灾难恢复用的公钥，确保在我所有桌面电脑都丢失的极端情况下，仍可通过对应的灾难恢复私钥解密此仓库的数据。该私钥在使用 age 加密后（注：未使用 rclone 加密）与我其他的灾难恢复数据保存在一起。</li>
</ol>
</li>
<li>password-store: 我的私人账号密码存储库，通过 pass 命令行工具管理，使用 GPG 加密，GPG 密钥备份被通过 age/agenix 加密保存在上述 secrets 仓库中。
<ol>
<li>由于 GnuPG 自身导出的密钥备份数据安全性欠佳，因此我使用了 age + passphrase 对其进行了二次对称加密，然后再通过 agenix 加密（第三次加密，使用非对称加密算法）保存在 secrets 仓库中。这保障了即使我的 GPG 密钥在我所有的桌面电脑上都存在，但安全性仍旧很够。</li>
</ol>
</li>
<li>rclone 加密的备份 U 盘（双副本）：离线保存一些重要的数据。其配置文件被加密保存在 secrets 仓库中，其配置文件的解密密码被加密保存在 password-store 仓库中。</li>
</ol>
<p>这套方案的大部分部署工作都是由我的 Nix 配置自动完成的，整个流程的自动化程度很高，所以这套方案带给我的额外负担并不大。</p>
<p>secrets 这个私有仓库是整个方案的核心，它包含了所有重要数据（password-store/rclone/&hellip;）的解密密钥。
如果它丢失了，那么所有的数据都无法解密。</p>
<p>但好在 Git 仓库本身是分布式的，我所有的桌面电脑上都有对应的完整备份，我的灾难恢复存储中也会定期备份一份 secrets/password-store 两个仓库的数据过去以避免丢失。</p>
<p>另外需要注意的是，为了避免循环依赖，secrets 与 password-store 这两个仓库的备份不应该使用 rclone 再次加密，而是直接使用 age 对称加密。
这样只要我还记得 age 的解密密码、gpg 密钥的 passphrase 等少数几个密码，就能顺着整条链路解密出所有的数据。</p>
<h2 id="十这套方案下需要记忆几个密码这些密码该如何设计" class="headerLink">
    <a href="#%e5%8d%81%e8%bf%99%e5%a5%97%e6%96%b9%e6%a1%88%e4%b8%8b%e9%9c%80%e8%a6%81%e8%ae%b0%e5%bf%86%e5%87%a0%e4%b8%aa%e5%af%86%e7%a0%81%e8%bf%99%e4%ba%9b%e5%af%86%e7%a0%81%e8%af%a5%e5%a6%82%e4%bd%95%e8%ae%be%e8%ae%a1" class="header-mark"></a>十、这套方案下需要记忆几个密码？这些密码该如何设计？</h2><p>绝大部分密码都建议设置为包含大小写跟部分特殊字符的密码学随机字符串，通过 pass 加密保存与多端同步与自动填充，不需要额外记忆。
考虑到我们基本不会需要手动输入这些密码，因此它们的长度可以设置得比较长，比如 16-24 位（不使用更长密码的原因是，许多站点或 APP 都限制了密码长度，这种长度下使用 passphrase 单词组的安全性相对会差一点，因此也不推荐）。</p>
<p>再通过一些合理的密码复用手段，可以将需要记忆的密码数量降到 3 - 5 个，并且确保日常都会输入，避免遗忘。</p>
<p>不过这里需要注意一点，就是 SSH 密钥、GPG 密钥、系统登录密码这三个密码最好不要设成一样。
前面我们已经做了分析，这三个 passphrase 的加密强度区别很大，设成一样的话，使用 bcrypt 的 SSH 密钥将会成为整个方案的短板。</p>
<p>而关于密码内容的设计，这个几核心 pssphrase 的长度都是不受限的，有两个思路（注意不要在密码中包含任何个人信息）：</p>
<ol>
<li>使用由一个个单词组成的较长的 passphrase，比如 <code>don't-do-evil_I-promise-this-would-become-not-a-dark-corner</code> 这样的。</li>
<li>使用字母大小写加数字、特殊字符组成的密码学随机字符串，比如 <code>fsD!.*v_F*sdn-zFkJM)nQ</code> 这样的。</li>
</ol>
<p>第一种方式的优点是，这些单词都是常用单词，记忆起来会比较容易，而且也不容易输错。</p>
<p>第二种方式的优点是，密码学随机字符串可以以更短的长度达到与第一种方式相当的安全性。
但它的缺点也比较明显——容易输错，而且记忆起来也不容易。</p>
<p>两种方式是都可以，如果你选择第二种方式，可以专门编些小故事来通过联想记忆它们，hint 中也能加上故事中的一些与密码内容无直接关联的关键字帮助回忆。
毕竟人类擅长记忆故事，但不擅长记忆随机字符。
举个例子，上面的密码 <code>fsD!.*v_F*sdn-zFkJM)nQ</code>，可以找出这么些联想：</p>
<ul>
<li><code>fs</code>: 「佛说」这首歌里面的歌词</li>
<li><code>D!</code>: 头文字D!</li>
<li><code>.*</code>: 地面上的光斑(.)，天上的星光(*)</li>
<li><code>v_</code>: 嘴巴张开（v）睡得很香的样子，口水都流到地上了(_)</li>
<li><code>F*sdn</code>: F*ck 软件定义网络(sdn)</li>
<li><code>zFkJM</code>: 在政府（zf）大门口（k），看(k) 见了 Jack Ma (JM) 在跳脱yi舞&hellip;</li>
<li><code>)nQ</code>: 宁静的夏夜，凉风习习，天上一轮弯月，你(n)问(Q)我，当下这一刻是否足够</li>
</ul>
<p>把上面这些联想串起来，就是一个怀旧、雷人、结尾又有点温馨的无厘头小故事了，肯定能令你自己印象深刻。
故事写得够离谱的话，你可能想忘都忘不掉了。</p>
<p>总之就是用这种方式，然后把密码中的每个字符都与故事中的某个关键字联系起来，这样就能很容易地记住这个密码了。
如果你对深入学习如何记忆这类复杂的东西感兴趣，可以看看这本<a href="https://book.douban.com/subject/6710983/" target="_blank" rel="noopener noreferrer">我最想要的记忆魔法书</a>.</p>
<p>最后一点，就是定期更新一遍这些密码、SSH 密钥、GPG 密钥。
所有数据的加密安全性都是随着时间推移而降低的，曾经安全的密码学算法在未来也可能会变得不再安全（这方面 MD5, SHA-1 都是很好的例子），因此定期更新这些密码跟密钥是很有必要的。</p>
<p>几个核心密码更新起来会简单些，可以考虑每年更新一遍，而密钥可以考虑每两三年更新一遍（时间凭感觉说的哈，没有做论证）。
其他密码密钥则可以根据数据的重要性来决定更新频率。</p>
<h2 id="十一为了落地这套方案我做了哪些工作" class="headerLink">
    <a href="#%e5%8d%81%e4%b8%80%e4%b8%ba%e4%ba%86%e8%90%bd%e5%9c%b0%e8%bf%99%e5%a5%97%e6%96%b9%e6%a1%88%e6%88%91%e5%81%9a%e4%ba%86%e5%93%aa%e4%ba%9b%e5%b7%a5%e4%bd%9c" class="header-mark"></a>十一、为了落地这套方案，我做了哪些工作？</h2><p>前面已经基本都提到了，这里再总结下：</p>
<ol>
<li>重新生成了所有的 SSH Key，增强了 passphrase 强度，bcrypt rounds 增加到 256，通过 <code>ssh-add</code> 使用，只需要在系统启动后输入一次密码即可，也不麻烦。</li>
<li>重新生成了所有的 PGP Key，主密钥离线加密存储，本地只保留了加密、签名、认证三个 PGP 子密钥。</li>
<li>重新生成了所有重要账号的密码，全部使用随机密码，一共改了二三十个账号。考虑到旧的 backup code 可能已经泄漏，我也重新生成了所有重要账号的 backup code.</li>
<li>重装 NixOS，使用 LUKS2 做全盘加密，启用 Secure Boot. 同时使用 tmpfs 作为根目录，所有未明确声明持久化的数据，都会在每次重启后被清空。</li>
<li>使用 nix-darwin 与 home-manager 重新声明式地配置了我的两台 MacBook Pro（Intel 跟 Apple Silicon 各一台），与我的 NixOS 共用了许多配置，最大程度上保持了所有桌面电脑的开发环境一致性，也确保了我始终能快速地在一台新电脑上部署我的整个开发环境。</li>
<li>注销印象笔记账号，使用 evernote-backup 跟 evernote2md 两个工具将个人的私密笔记遷移到了 Joplin + OneDrive 上，Homelab 中設了通過 restic 定期自動加密備份 OneDrive 中的 Joplin 數據。</li>
<li>比较有价值的 GitHub 仓库，都设置了禁止 force push 主分支，并且添加了 github action 自动同步到国内 Gitee.</li>
<li>All in NixOS，将 Homelab 中对我而言偏黑盒且可复现性差的 Ubuntu、Kubernetes 集群节点、OpenWRT 等 VM 全面替换成更白盒且可复现性强的 NixOS，提升我对内网环境的掌控度，进而提升内网安全性。</li>
</ol>
<h2 id="十二灾难恢复预案" class="headerLink">
    <a href="#%e5%8d%81%e4%ba%8c%e7%81%be%e9%9a%be%e6%81%a2%e5%a4%8d%e9%a2%84%e6%a1%88" class="header-mark"></a>十二、灾难恢复预案</h2><p>这里考虑我的 GPG 子密钥泄漏了、pass 密码仓库泄漏了等各种情况下的灾难恢复流程。</p>
<p>TODO 后续再慢慢补充。</p>
<h2 id="十三未来可能的改进方向" class="headerLink">
    <a href="#%e5%8d%81%e4%b8%89%e6%9c%aa%e6%9d%a5%e5%8f%af%e8%83%bd%e7%9a%84%e6%94%b9%e8%bf%9b%e6%96%b9%e5%90%91" class="header-mark"></a>十三、未来可能的改进方向</h2><p>目前我的主要个人数据基本都已经通过上述方案进行了安全管理。
但还有这些方面可以进一步改进：</p>
<ul>
<li>针对 Homelab 的虚拟机快照备份，从我旧的基于 rclone + crontab 的明文备份方案，切换到了基于 restic 的加密备份方案。</li>
<li>手机端的照片视频虽然已经在上面设计好了备份同步方案，但仍未实施。考虑使用 roundsync 加密备份到云端，实现多端访问。</li>
<li>进一步学习下 appamor, bubblewrap 等 Linux 下的安全限制方案，尝试应用在我的 NixOS PC 上。</li>
<li>Git 提交是否可以使用 GnuPG 签名，目前没这么做主要是觉得 PGP 这个东西太重了，目前我也只在 pass 上用了它，而且还在研究用 age 取代它。</li>
<li>尝试通过 <a href="https://github.com/hashcat/hashcat" target="_blank" rel="noopener noreferrer">hashcat</a>, <a href="https://github.com/brannondorsey/wifi-cracking" target="_blank" rel="noopener noreferrer">wifi-cracking</a> 等手段破解自己的重要密码、SSH 密钥、GPG 密钥等数据，评估其安全性。</li>
<li>使用一些流行的渗透测试工具测试我的 Homelab 与内网环境，评估其安全性。</li>
</ul>
<p>安全总是相对的，而且其中涉及的知识点不少，我 2022 年学了密码学算是为此打下了个不错的基础，但目前看前头还有挺多知识点在等待着我。
我目前仍然打算以比较 casual 的心态去持续推进这件事情，什么时候兴趣来了就推进一点点（我从 2023-05 定下）。</p>
<p>这套方案也可能存在一些问题，欢迎大家审阅指正。</p>
]]></content></entry><entry><title type="html">NixOS 在 Lichee Pi 4A 上是如何启动的</title><link href="https://thiscute.world/posts/how-nixos-start-on-licheepi4a/"/><id>https://thiscute.world/posts/how-nixos-start-on-licheepi4a/</id><author><name>ryan4yin</name></author><published>2024-01-29T00:58:57+08:00</published><updated>2024-01-29T00:58:57+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/how-nixos-start-on-licheepi4a/lp4a-pinout-debuglog-1.webp" height="4096" width="3072"><figcaption></figcaption>
        </figure><blockquote>
<p>文章是 2023-08-07 写的，后面就完全忘掉这回事了，今天偶然翻到它才想起要整理发布下&hellip;所以注意文章中的时间线是 2023 年 8 月。</p>
</blockquote>
<h2 id="零前言" class="headerLink">
    <a href="#%e9%9b%b6%e5%89%8d%e8%a8%80" class="header-mark"></a>零、前言</h2><p>我从今年 5 月份初收到了内测板的 Lichee Pi 4A，这是当下性能最高的 RISC-V 开发板之一，不过当时没怎么折腾。</p>
<p>6 月初的时候我开始尝试在 Orange Pi 5 上运行 NixOS，在 <a href="https://matrix.to/#/#nixos-on-arm:nixos.org" target="_blank" rel="noopener noreferrer">NixOS on ARM 的 Matrix 群组</a> 中得到了俄罗斯老哥 @K900 的帮助，没费多大劲就成功了，一共就折腾了三天。</p>
<p>于是我接着尝试在 Lichee Pi 4A 上运行 NixOS，因为已经拥有了 Orange Pi 5 上的折腾经验，我以为这次会很顺利。
但是实际难度远远超出了我的预期，我从 6 月 13 号开始断断续续折腾到 7 月 3 号，接触了大量的新东西，包括 U-Boot、OpenSBI、SPL Flash、RISCV Boot Flows 等等，
还参考了 @chainsx 的 Fedora for Lichee Pi 4A 方案，请教了 @NickCao 许多 NixOS 相关的问题，@revy 帮我修了好几个 revyos/thead-kernel 在标准工具链上编译的 bug，期间也请教过 @HougeLangley 他折腾 Lichee Pi 4A 的经验。
我在付出了这么多的努力后，才最终成功编译出了 NixOS 的系统镜像（包含 boot 跟 rootfs 两个分区）。</p>
<p>但是！现在要说「但是」了。</p>
<p>镜像是有了，系统却无法启动&hellip;找了各种资料也没解决，也没好意思麻烦各位大佬，搞得有点心灰意冷，就先把这部分工作放下了。</p>
<p>接着就隔了一个多月没碰 Lichee Pi 4A，直到 8 月 5 号，外国友人 @JayDeLux 在 <a href="https://t.me/linux4rv" target="_blank" rel="noopener noreferrer">Mainline Linux for RISC-V</a> TG 群组中询问我 NixOS 移植工作的进展如何（之前有在群里提过我在尝试移植），我才决定再次尝试一下。</p>
<p>在之前工作的基础上一番骚操作后，我在 8 月 6 号晚上终于成功启动了 NixOS，这次意外的顺利，后续也成功通过一份 Nix Flake 配置编译出了可用的 NixOS 镜像。</p>
<p>最终成果：<a href="https://github.com/ryan4yin/nixos-licheepi4a" target="_blank" rel="noopener noreferrer">https://github.com/ryan4yin/nixos-licheepi4a</a></p>
<p>整个折腾过程相当曲折，虽然最终达成了目标，但是期间遭受的折磨也真的不少。
总的来说仍然是一次很有趣的经历，既学到了许多新技术知识、认识了些有趣的外国友人（@JayDeLux 甚至还给我打了 $50 美刀表示感谢），也跟 @HougeLangley 、@chainsx 、@Rabenda(revy) 等各位大佬混了个脸熟。</p>
<p>这篇文章就是记录下我在这个折腾过程中学到的所有知识，以飨读者，同时也梳理一下自己的收获。</p>
<p>本文的写作思路是自顶向下的，先从 NixOS 镜像的 boot 分区配置、启动脚本开始分析，过渡到实际的启动日志，再接续分析下后续的启动流程。
NixOS 分析完了后，再看看与 RISC-V 相关的硬件固件与 bootloader 部分要如何与 NixOS 协同工作，使得 NixOS 能够在 Lichee Pi 4A 上正常启动。</p>
<h2 id="一基础知识介绍" class="headerLink">
    <a href="#%e4%b8%80%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86%e4%bb%8b%e7%bb%8d" class="header-mark"></a>一、基础知识介绍</h2><h3 id="1-lichee-pi-4a-介绍" class="headerLink">
    <a href="#1-lichee-pi-4a-%e4%bb%8b%e7%bb%8d" class="header-mark"></a>1. Lichee Pi 4A 介绍</h3><p>LicheePi 4A 是当前市面上性能最高的 RISC-V Linux 开发板之一，它以 TH1520 为主控核心（4xC910@1.85G， RV64GCV，4TOPS@int8 NPU， 50GFLOP GPU），板载最大 16GB 64bit LPDDR4X，128GB eMMC，支持 HDMI+MIPI 双4K 显示输出，支持 4K 摄像头接入，双千兆网口（其中一个支持POE供电）和 4 个 USB3.0 接口，多种音频输入输出（由专用 C906 核心处理）。</p>
<p>以上来自 Lichee Pi 4A 官方文档 <a href="https://wiki.sipeed.com/hardware/zh/lichee/th1520/lpi4a/1_intro.html" target="_blank" rel="noopener noreferrer">Lichee Pi 4A - Sipeed Wiki</a>.</p>
<p>总之它是我手上性能最高的 RISC-V 开发板。</p>
<p>LicheePi 4A 官方主要支持 <a href="https://github.com/revyos/revyos/" target="_blank" rel="noopener noreferrer">RevyOS</a>—— 一款针对 T-Head 芯片生态的 Debian 优化定制发行版。
根据猴哥（@HougeLangley）文章介绍，它也是目前唯一且确实能够启用 Lichee Pi 4A 板载 GPU 的发行版，</p>
<h3 id="2-nixos-介绍" class="headerLink">
    <a href="#2-nixos-%e4%bb%8b%e7%bb%8d" class="header-mark"></a>2. NixOS 介绍</h3><p>这个感觉就不用多说了，我在这几个月已经给 NixOS 写了非常多的文字了，感兴趣请直接移步 <a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-and-flakes-book</a>.</p>
<p>在 4 月份接触了 NixOS 后，我成了 NixOS 铁粉。
作为一名铁粉，我当然想把我手上的所有性能好点的板子都装上 NixOS，Lichee Pi 4A 自然也不例外。</p>
<p>我目前主要完成了两块板子的 NixOS 移植工作，一块是 Orange Pi 5，另一块就是 Lichee Pi 4A。
Orange Pi 5 是 ARM64 架构的，刚好也遇到了拥有该板子的 NixOS 用户 @K900，在他的帮助下我很顺利地就完成了移植工作。</p>
<p>而 Lichee Pi 4A 就比较曲折，也比较有话题性。所以才有了这篇文章。</p>
<h2 id="二移植思路" class="headerLink">
    <a href="#%e4%ba%8c%e7%a7%bb%e6%a4%8d%e6%80%9d%e8%b7%af" class="header-mark"></a>二、移植思路</h2><p>一个完整的嵌入式 Linux 系统，通常包含了 U-Boot、kernel、设备树以及根文件系统（rootfs）四个部分。</p>
<p>其中 U-Boot，kernel 跟设备树，都是与硬件相关的，需要针对不同的硬件进行定制。
而 rootfs 的大部分内容（比如说 NixOS 系统的 rootfs 本身），都是与硬件无关的，可以通用。</p>
<p>我的移植思路是，从 LicheePi4A 官方使用的 RevyOS 中拿出跟硬件相关的部分（也就是 U-Boot, kernel 跟设备树这三个），再结合上跟硬件无关的 NixOS rootfs，组合成一个完整的、可在 LicheePi4A 上正常启动运行的 NixOS 系统。</p>
<p>RevyOS 针对 LicheePi4A 定制的几个项目源码如下：</p>
<ul>
<li><a href="https://github.com/revyos/thead-kernel.git" target="_blank" rel="noopener noreferrer">https://github.com/revyos/thead-kernel.git</a></li>
<li><a href="https://github.com/revyos/thead-u-boot.git" target="_blank" rel="noopener noreferrer">https://github.com/revyos/thead-u-boot.git</a></li>
<li><a href="https://github.com/revyos/thead-opensbi.git" target="_blank" rel="noopener noreferrer">https://github.com/revyos/thead-opensbi.git</a></li>
</ul>
<p>思路很清晰，但因为 NixOS 本身的特殊性，实际操作起来，现有的 Gentoo, Arch Linux, Fedora 的移植仓库代码全都无法直接使用，需要做的工作还是不少的。</p>
<h2 id="三nixos-启动流程分析" class="headerLink">
    <a href="#%e4%b8%89nixos-%e5%90%af%e5%8a%a8%e6%b5%81%e7%a8%8b%e5%88%86%e6%9e%90" class="header-mark"></a>三、NixOS 启动流程分析</h2><p>要做移植，首先就要了解 NixOS 系统本身的文件树结构以及系统启动流程，搞明白它跟 Arch Linux, Fedora 等其他发行版的区别，这样才好参考其他发行版的移植工作，搞明白该如何入手。</p>
<h3 id="1-bootloader-配置与系统文件树分析" class="headerLink">
    <a href="#1-bootloader-%e9%85%8d%e7%bd%ae%e4%b8%8e%e7%b3%bb%e7%bb%9f%e6%96%87%e4%bb%b6%e6%a0%91%e5%88%86%e6%9e%90" class="header-mark"></a>1. Bootloader 配置与系统文件树分析</h3><p>这里方便起见，我直接使用我自己为 LicheePi4A 构建好的 NixOS 镜像进行分析。
首先参照 <a href="https://github.com/ryan4yin/nixos-licheepi4a" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-licheepi4a</a> 的 README 下载解压镜像，再使用 losetup 跟 mount 直接挂载镜像中的各分区进行初步分析：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># 解压镜像</span>
</span></span><span class="line"><span class="cl">› mv nixos-licheepi4a-sd-image-*-riscv64-linux.img.zst nixos-lp4a.img.zst
</span></span><span class="line"><span class="cl">› zstd -d nixos-lp4a.img.zst
</span></span><span class="line"><span class="cl"><span class="c1"># 将 img 文件作为虚拟 loop 设备连接到系统中</span>
</span></span><span class="line"><span class="cl">› sudo losetup --find --partscan nixos-lp4a.img
</span></span><span class="line"><span class="cl"><span class="c1"># 查看挂载的 loop 设备</span>
</span></span><span class="line"><span class="cl">› lsblk <span class="p">|</span> grep loop
</span></span><span class="line"><span class="cl">loop0               7:0    <span class="m">0</span>  1.9G  <span class="m">0</span> loop
</span></span><span class="line"><span class="cl">├─loop0p1         259:8    <span class="m">0</span>  200M  <span class="m">0</span> part
</span></span><span class="line"><span class="cl">└─loop0p2         259:9    <span class="m">0</span>  1.7G  <span class="m">0</span> part
</span></span><span class="line"><span class="cl"><span class="c1"># 分别挂载镜像中的 boot 跟 rootfs 分区</span>
</span></span><span class="line"><span class="cl">› mkdir boot root
</span></span><span class="line"><span class="cl">› sudo mount /dev/loop0p1 boot
</span></span><span class="line"><span class="cl">› sudo mount /dev/loop0p2 root
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 boot 分区内容</span>
</span></span><span class="line"><span class="cl">› ls boot/
</span></span><span class="line"><span class="cl">╭───┬───────────────────────────┬──────┬─────────┬──────────────╮
</span></span><span class="line"><span class="cl">│ <span class="c1"># │           name            │ type │  size   │   modified   │</span>
</span></span><span class="line"><span class="cl">├───┼───────────────────────────┼──────┼─────────┼──────────────┤
</span></span><span class="line"><span class="cl">│ <span class="m">0</span> │ boot/extlinux             │ dir  │  4.1 KB │ <span class="m">44</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">1</span> │ boot/fw_dynamic.bin       │ file │ 85.9 KB │ <span class="m">24</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">2</span> │ boot/light_aon_fpga.bin   │ file │ 50.3 KB │ <span class="m">24</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">3</span> │ boot/light_c906_audio.bin │ file │ 16.4 KB │ <span class="m">24</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">4</span> │ boot/nixos                │ dir  │  4.1 KB │ <span class="m">44</span> years ago │
</span></span><span class="line"><span class="cl">╰───┴───────────────────────────┴──────┴─────────┴──────────────╯
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 root 分区内容</span>
</span></span><span class="line"><span class="cl">› ls root/
</span></span><span class="line"><span class="cl">╭───┬────────────────────────────┬──────┬──────────┬──────────────╮
</span></span><span class="line"><span class="cl">│ <span class="c1"># │            name            │ type │   size   │   modified   │</span>
</span></span><span class="line"><span class="cl">├───┼────────────────────────────┼──────┼──────────┼──────────────┤
</span></span><span class="line"><span class="cl">│ <span class="m">0</span> │ root/boot                  │ dir  │   4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">1</span> │ root/lost+found            │ dir  │  16.4 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">2</span> │ root/nix                   │ dir  │   4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">3</span> │ root/nix-path-registration │ file │ 242.0 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">╰───┴────────────────────────────┴──────┴──────────┴──────────────╯
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到 NixOS 整个根目录（<code>/root</code>）下一共就四个文件夹，其中真正保存有系统数据的文件夹只有 <code>/boot</code> 跟 <code>/nix</code> 这两个，这与传统的 Linux 发行版大相径庭。
有一点 Linux 使用经验的朋友都应该清楚，传统的 Linux 发行版遵循 UNIX 系统的 <a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard" target="_blank" rel="noopener noreferrer">FHS</a> 标准，根目录下会有很多文件夹，比如 <code>/bin</code>、<code>/etc</code>、<code>/home</code>、<code>/lib</code>、<code>/opt</code>、<code>/root</code>、<code>/sbin</code>、<code>/srv</code>、<code>/tmp</code>、<code>/usr</code>、<code>/var</code> 等等。</p>
<p>那 NixOS 它这么玩，真的能正常启动么？这就是我在构建出镜像后却发现无法在 LicheePi 4A 上启动时，最先产生的疑问。
在询问 @chainsx 跟 @revy 系统无法启动的解决思路的时候，他们也一脸懵逼，觉得这个文件树有点奇葩，很怀疑是我构建流程有问题导致文件树不完整。</p>
<p>但实际上 NixOS 就是这么玩的，它 rootfs 中所有的数据全都存放在 <code>/nix/store</code> 这个目录下并且被挂载为只读，其他的文件夹以及其中的文件都是在运行时动态创建的。
这是它实现声明式系统配置、可回滚更新、可并行安装多个版本的软件包等等特性的基础。</p>
<p>下面继续分析，先仔细看下 <code>/boot</code> 的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">› tree boot
</span></span><span class="line"><span class="cl">boot
</span></span><span class="line"><span class="cl">├── extlinux
</span></span><span class="line"><span class="cl">│   └── extlinux.conf
</span></span><span class="line"><span class="cl">├── fw_dynamic.bin
</span></span><span class="line"><span class="cl">├── light_aon_fpga.bin
</span></span><span class="line"><span class="cl">├── light_c906_audio.bin
</span></span><span class="line"><span class="cl">└── nixos
</span></span><span class="line"><span class="cl">    ├── 2n6fjh4lhzaswbyacaf72zmz6mdsmm8l-initrd-k-riscv64-unknown-linux-gnu-initrd
</span></span><span class="line"><span class="cl">    ├── l18cz7jd37n35dwyf8wc8divm46k7sdf-k-riscv64-unknown-linux-gnu-dtbs
</span></span><span class="line"><span class="cl">    │   ├── sifive
</span></span><span class="line"><span class="cl">    │   │   └── hifive-unleashed-a00.dtb
</span></span><span class="line"><span class="cl">    │   └── thead
</span></span><span class="line"><span class="cl">    │       ├── fire-emu-crash.dtb
</span></span><span class="line"><span class="cl">    │       ├── fire-emu.dtb
</span></span><span class="line"><span class="cl">    │       ├── ...... <span class="o">(</span>省略<span class="o">)</span>
</span></span><span class="line"><span class="cl">    │       ├── light-fm-emu-audio.dtb
</span></span><span class="line"><span class="cl">    │       ├── light-fm-emu-dsi0-hdmi.dtb
</span></span><span class="line"><span class="cl">    │       ├── light-fm-emu-dsp.dtb
</span></span><span class="line"><span class="cl">    │       ├── light-fm-emu-gpu.dtb
</span></span><span class="line"><span class="cl">    │       ├── light-fm-emu-hdmi.dtb
</span></span><span class="line"><span class="cl">    │       ├── light-lpi4a-ddr2G.dtb
</span></span><span class="line"><span class="cl">    │       └── light_mpw.dtb
</span></span><span class="line"><span class="cl">    └── l18cz7jd37n35dwyf8wc8divm46k7sdf-k-riscv64-unknown-linux-gnu-Image
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="m">6</span> directories, <span class="m">64</span> files
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到：</p>
<ol>
<li>它使用 <code>/boot/extlinux/extlinux.conf</code> 作为 U-Boot 的启动项配置，据 <a href="https://github.com/ARM-software/u-boot/blob/master/doc/README.distro" target="_blank" rel="noopener noreferrer">U-Boot 官方的 Distro 文档</a> 所言，这是 U-Boot 的标准配置文件。</li>
<li>另外还有一些 <code>xxx.bin</code> 文件，这些是一些硬件固件，其中的 <code>light_c906_audio.bin</code> 显然是<a href="https://www.t-head.cn/product/C906?lang=zh" target="_blank" rel="noopener noreferrer">玄铁 906</a> 这个 IP 核的音频固件，其他的后面再研究。</li>
<li>NixOS 的 <code>initrd</code>, <code>dtbs</code> 以及 <code>Image</code> 文件都是在 <code>/boot/nixos</code> 下，这三个文件也都是跟 Linux 的启动相关的，现在不用管它们，下一步会分析。</li>
</ol>
<p>再看下 <code>/boot/extlinux/extlinux.conf</code> 的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">› cat boot/extlinux/extlinux.conf
</span></span><span class="line"><span class="cl"><span class="c1"># Generated file, all changes will be lost on nixos-rebuild!</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Change this to e.g. nixos-42 to temporarily boot to an older configuration.</span>
</span></span><span class="line"><span class="cl">DEFAULT nixos-default
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">MENU TITLE ------------------------------------------------------------
</span></span><span class="line"><span class="cl">TIMEOUT <span class="m">50</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">LABEL nixos-default
</span></span><span class="line"><span class="cl">  MENU LABEL NixOS - Default
</span></span><span class="line"><span class="cl">  LINUX ../nixos/l18cz7jd37n35dwyf8wc8divm46k7sdf-k-riscv64-unknown-linux-gnu-Image
</span></span><span class="line"><span class="cl">  INITRD ../nixos/2n6fjh4lhzaswbyacaf72zmz6mdsmm8l-initrd-k-riscv64-unknown-linux-gnu-initrd
</span></span><span class="line"><span class="cl">  APPEND <span class="nv">init</span><span class="o">=</span>/nix/store/71wh9lvf94i1jcd6qpqw228fy5s8fv24-nixos-system-lp4a-23.05.20230806.240472b/init <span class="nv">console</span><span class="o">=</span>ttyS0,115200 <span class="nv">root</span><span class="o">=</span><span class="nv">UUID</span><span class="o">=</span>14e19a7b-0ae0-484d-9d54-43bd6fdc20c7 <span class="nv">rootfstype</span><span class="o">=</span>ext4 rootwait rw earlycon clk_ignore_unused <span class="nv">eth</span><span class="o">=</span><span class="nv">$ethaddr</span> <span class="nv">rootrwoptions</span><span class="o">=</span>rw,noatime <span class="nv">rootrwreset</span><span class="o">=</span>yes <span class="nv">loglevel</span><span class="o">=</span><span class="m">4</span>
</span></span><span class="line"><span class="cl">  FDT ../nixos/l18cz7jd37n35dwyf8wc8divm46k7sdf-k-riscv64-unknown-linux-gnu-dtbs/thead/light-lpi4a.dtb
</span></span></code></pre></td></tr></table>
</div>
</div><p>从上述配置中能获得这些信息：</p>
<ol>
<li>它创建了一个名为 <code>nixos-default</code> 的启动项并将它设为了默认启动项，extlinux 在启动阶段会根据该配置启动 NixOS 系统</li>
<li>启动项中的 <code>LINUX</code> <code>INITRD</code> <code>FDT</code> 三个参数分别指定了 kernel(Image 文件)、initrd 以及设备树（dtb）的位置，这三个文件我们在前面已经看到了，都在 <code>/boot/nixos</code> 下。
<ol>
<li>根据 Linux 官方文档 <a href="https://docs.kernel.org/admin-guide/initrd.html" target="_blank" rel="noopener noreferrer">Using the initial RAM disk (initrd)</a> 所言，在使用了 initrd 这个内存盘的情况下，Linux 的启动流程如下：
<ol>
<li>bootloader(这里是 u-boot) 根据配置加载 kernel 文件（<code>Image</code>）、dtb 设备树文件以及 <code>initrd</code> 文件系统，然后以设备树跟 initrd 的地址为参数启动 Kernel.</li>
<li>Kernel 将传入的 initrd 转换成一个内存盘并挂载为根文件系统，然后释放 initrd 的内存。</li>
<li>Kernel 接着运行 <code>init</code> 参数指定的可执行程序，这里是 <code>/nix/store/71wh9lvf94i1jcd6qpqw228fy5s8fv24-nixos-system-lp4a-23.05.20230806.240472b/init</code>，这个 init 程序会挂载真正的根文件系统，并在其上执行后续的启动流程。</li>
<li>initrd 文件系统被移除，系统启动完毕。</li>
</ol>
</li>
<li><code>initrd</code> 这样一个临时的内存盘，通常用于在系统启动阶段加载一些内核中未内置但启动却必需的驱动或数据文件供 <code>init</code> 程序使用，以便后续能够挂载真正的根文件系统。
<ol>
<li>比如说挂载一个 LUKS 加密的根文件系统，这通常会涉及到提示用户输入 passphrase、从某个地方读取解密用的 keyfile 或者与插入的 USB 硬件密钥交互，这会需要读取内核之外的 keyfile 文件、用到内核之外的加密模块、USB 驱动、HID 用户输入输出模块或者其他因为许可协议、模块大小等问题无法被静态链接到内核中的各种内核模块或程序。initrd 就是用来解决这些问题的。</li>
</ol>
</li>
</ol>
</li>
<li><code>APPEND</code> 参数包含有许多关键信息：
<ol>
<li>系统的 init 程序，也就是传说中的 1 号进程（PID 1），被设置为 <code>/nix/store/71wh9lvf94i1jcd6qpqw228fy5s8fv24-nixos-system-lp4a-23.05.20230806.240472b/init</code>，这实际是一个 shell 脚本，我们下一步会重点分析它。
<ol>
<li>在传统的 Linux 发行版中，init 通常使用默认值 <code>/sbin/init</code>，它会被链接到 <code>/lib/systemd/systemd</code>，也就是直接使用 systemd 作为 1 号进程。你可以在 Fedora/Ubuntu 等传统发行版中运行 <code>ls -al /sbin/init</code> 确认这一点，以及检查它们的 <code>/boot/grub/grub.cfs</code> 启动项配置，看看它们有无自定义内核的 <code>init</code> 参数。</li>
</ol>
</li>
<li>系统的 rootfs 分区为 <code>/dev/disk/by-uuid/14e19a7b-0ae0-484d-9d54-43bd6fdc20c7</code>，使用的文件系统为 ext4.</li>
<li><code>earlycon</code>(early console) 表示在系统启动早期就启用控制台输出，这样可以在系统启动阶段通过 UAER/HDMI 等接口看到相关的启动日志，方便调试。</li>
<li>其他参数先不管。</li>
</ol>
</li>
</ol>
<p>这样一分析就能得出结论：在执行 <code>init</code> 程序之前的启动流程都未涉及到真正的根文件系统，NixOS 与其他发行版在该流程中并无明显差异。</p>
<h3 id="2-实际启动日志分析" class="headerLink">
    <a href="#2-%e5%ae%9e%e9%99%85%e5%90%af%e5%8a%a8%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%90" class="header-mark"></a>2. 实际启动日志分析</h3><p>为了方便后续内容的理解，先看下 NixOS 系统在 LicheePi 4A 上的实际启动日志是个很不错的选择。</p>
<p>按我项目中的 README 正常烧录好系统后，使用 USB 转串口工具连接到 LicheePi 4A 的 UART0 串口，然后启动系统，就能看到 NixOS 的启动日志。</p>
<p>接线示例：</p>
<p><figure><img src="./lp4a-pinout-debuglog-1.webp" width="80%"/><figcaption>
            <h4>LicheePi4A UART 调试接线 - 正面</h4>
        </figcaption>
</figure>

<figure><img src="./lp4a-pinout-debuglog-2.webp" width="80%"/><figcaption>
            <h4>LicheePi4A UART 调试接线 - 反面</h4>
        </figcaption>
</figure>
</p>
<p>接好线后使用 minicom 查看日志：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">› ls /dev/ttyUSB0
</span></span><span class="line"><span class="cl">╭───┬──────────────┬─────────────┬──────┬───────────────╮
</span></span><span class="line"><span class="cl">│ <span class="c1"># │     name     │    type     │ size │   modified    │</span>
</span></span><span class="line"><span class="cl">├───┼──────────────┼─────────────┼──────┼───────────────┤
</span></span><span class="line"><span class="cl">│ <span class="m">0</span> │ /dev/ttyUSB0 │ char device │  <span class="m">0</span> B │ <span class="m">6</span> minutes ago │
</span></span><span class="line"><span class="cl">╰───┴──────────────┴─────────────┴──────┴───────────────╯
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">› minicom -d /dev/ttyusb0 -b <span class="m">115200</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个正常的启动日志示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Welcome to minicom 2.8
</span></span><span class="line"><span class="cl">brom_ver 8
</span></span><span class="line"><span class="cl">[APP][E] protocol_connect failed, exit.
</span></span><span class="line"><span class="cl">OpenSBI v0.9
</span></span><span class="line"><span class="cl">   ____                    _____ ____ _____
</span></span><span class="line"><span class="cl">  / __ \                  / ____|  _ \_   _|
</span></span><span class="line"><span class="cl"> | |  | |_ __   ___ _ __ | (___ | |_) || |
</span></span><span class="line"><span class="cl"> | |  | | &#39;_ \ / _ \ &#39;_ \ \___ \|  _ &lt; | |
</span></span><span class="line"><span class="cl"> | |__| | |_) |  __/ | | |____) | |_) || |_
</span></span><span class="line"><span class="cl">  \____/| .__/ \___|_| |_|_____/|____/_____|
</span></span><span class="line"><span class="cl">        | |
</span></span><span class="line"><span class="cl">        |_|
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Platform Name             : T-HEAD Light Lichee Pi 4A configuration for 8GB DDR board
</span></span><span class="line"><span class="cl">Platform Features         : mfdeleg
</span></span><span class="line"><span class="cl">Platform HART Count       : 4
</span></span><span class="line"><span class="cl">Platform IPI Device       : clint
</span></span><span class="line"><span class="cl">Platform Timer Device     : clint
</span></span><span class="line"><span class="cl">Platform Console Device   : uart8250
</span></span><span class="line"><span class="cl">Platform HSM Device       : ---
</span></span><span class="line"><span class="cl">Platform SysReset Device  : thead_reset
</span></span><span class="line"><span class="cl">Firmware Base             : 0x0
</span></span><span class="line"><span class="cl">Firmware Size             : 132 KB
</span></span><span class="line"><span class="cl">Runtime SBI Version       : 0.3
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Domain0 Name              : root
</span></span><span class="line"><span class="cl">Domain0 Boot HART         : 0
</span></span><span class="line"><span class="cl">Domain0 HARTs             : 0*,1*,2*,3*
</span></span><span class="line"><span class="cl">Domain0 Region00          : 0x000000ffdc000000-0x000000ffdc00ffff (I)
</span></span><span class="line"><span class="cl">Domain0 Region01          : 0x0000000000000000-0x000000000003ffff ()
</span></span><span class="line"><span class="cl">Domain0 Region02          : 0x0000000000000000-0xffffffffffffffff (R,W,X)
</span></span><span class="line"><span class="cl">Domain0 Next Address      : 0x0000000000200000
</span></span><span class="line"><span class="cl">Domain0 Next Arg1         : 0x0000000001f00000
</span></span><span class="line"><span class="cl">Domain0 Next Mode         : S-mode
</span></span><span class="line"><span class="cl">Domain0 SysReset          : yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Boot HART ID              : 0
</span></span><span class="line"><span class="cl">Boot HART Domain          : root
</span></span><span class="line"><span class="cl">Boot HART ISA             : rv64imafdcvsux
</span></span><span class="line"><span class="cl">Boot HART Features        : scounteren,mcounteren,time
</span></span><span class="line"><span class="cl">Boot HART PMP Count       : 0
</span></span><span class="line"><span class="cl">Boot HART PMP Granularity : 0
</span></span><span class="line"><span class="cl">Boot HART PMP Address Bits: 0
</span></span><span class="line"><span class="cl">Boot HART MHPM Count      : 16
</span></span><span class="line"><span class="cl">Boot HART MHPM Count      : 16
</span></span><span class="line"><span class="cl">Boot HART MIDELEG         : 0x0000000000000222
</span></span><span class="line"><span class="cl">Boot HART MEDELEG         : 0x000000000000b109
</span></span><span class="line"><span class="cl">[    0.000000] Linux version 5.10.113 (nixbld@localhost) (riscv64-unknown-linux-gnu-gcc (GCC) 13.1.0, GN0
</span></span><span class="line"><span class="cl">[    0.000000] OF: fdt: Ignoring memory range 0x0 - 0x200000
</span></span><span class="line"><span class="cl">[    0.000000] earlycon: uart0 at MMIO32 0x000000ffe7014000 (options &#39;115200n8&#39;)
</span></span><span class="line"><span class="cl">[    0.000000] printk: bootconsole [uart0] enabled
</span></span><span class="line"><span class="cl">[    2.292495] (NULL device *): failed to find vdmabuf_reserved_memory node
</span></span><span class="line"><span class="cl">[    2.453953] spi-nor spi0.0: unrecognized JEDEC id bytes: ff ff ff ff ff ff
</span></span><span class="line"><span class="cl">[    2.460971] dw_spi_mmio ffe700c000.spi: cs1 &gt;= max 1
</span></span><span class="line"><span class="cl">[    2.466001] spi_master spi0: spi_device register error /soc/spi@ffe700c000/spidev@1
</span></span><span class="line"><span class="cl">[    2.497453] sdhci-dwcmshc ffe70a0000.sd: can&#39;t request region for resource [mem 0xffef014064-0xffef01]
</span></span><span class="line"><span class="cl">[    2.509014] misc vhost-vdmabuf: failed to find vdmabuf_reserved_memory node
</span></span><span class="line"><span class="cl">[    3.386036] debugfs: File &#39;SDOUT&#39; in directory &#39;dapm&#39; already present!
</span></span><span class="line"><span class="cl">[    3.392692] debugfs: File &#39;Playback&#39; in directory &#39;dapm&#39; already present!
</span></span><span class="line"><span class="cl">[    3.399524] debugfs: File &#39;Capture&#39; in directory &#39;dapm&#39; already present!
</span></span><span class="line"><span class="cl">[    3.406262] debugfs: File &#39;Playback&#39; in directory &#39;dapm&#39; already present!
</span></span><span class="line"><span class="cl">[    3.413067] debugfs: File &#39;Capture&#39; in directory &#39;dapm&#39; already present!
</span></span><span class="line"><span class="cl">[    3.425466] aw87519_pa 5-0058: aw87519_parse_dt: no reset gpio provided failed
</span></span><span class="line"><span class="cl">[    3.432752] aw87519_pa 5-0058: aw87519_i2c_probe: failed to parse device tree node
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;&lt;&lt; NixOS Stage 1 &gt;&gt;&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">running udev...
</span></span><span class="line"><span class="cl">Starting systemd-udevd version 253.6
</span></span><span class="line"><span class="cl">kbd_mode: KDSKBMODE: Inappropriate ioctl for device
</span></span><span class="line"><span class="cl">Gstarting device mapper and LVM...
</span></span><span class="line"><span class="cl">checking /dev/disk/by-label/NIXOS_SD...
</span></span><span class="line"><span class="cl">fsck (busybox 1.36.1)
</span></span><span class="line"><span class="cl">[fsck.ext4 (1) -- /mnt-root/] fsck.ext4 -a /dev/disk/by-label/NIXOS_SD
</span></span><span class="line"><span class="cl">NIXOS_SD: recovering journal
</span></span><span class="line"><span class="cl">NIXOS_SD: clean, 148061/248000 files, 818082/984159 blocks
</span></span><span class="line"><span class="cl">mounting /dev/disk/by-label/NIXOS_SD on /...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&lt;&lt;&lt; NixOS Stage 2 &gt;&gt;&gt;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">running activation script...
</span></span><span class="line"><span class="cl">setting up /etc...
</span></span><span class="line"><span class="cl">++ /nix/store/2w8nachmhqvbjswrrsdia5cx1afxxx60-util-linux-riscv64-unknown-linux-gnu-2.38.1-bin/bin/findm/
</span></span><span class="line"><span class="cl">+ rootPart=/dev/disk/by-label/NIXOS_SD
</span></span><span class="line"><span class="cl">++ lsblk -npo PKNAME /dev/disk/by-label/NIXOS_SD
</span></span><span class="line"><span class="cl">+ bootDevice=/dev/mmcblk1
</span></span><span class="line"><span class="cl">++ lsblk -npo MAJ:MIN /dev/disk/by-label/NIXOS_SD
</span></span><span class="line"><span class="cl">++ /nix/store/zag1z2yvsh2ccpsbgsda7xhv4sfha7mj-gawk-riscv64-unknown-linux-gnu-5.2.1/bin/awk -F: &#39;{print &#39;
</span></span><span class="line"><span class="cl">+ partNum=&#39;26 &#39;
</span></span><span class="line"><span class="cl">+ echo ,+,
</span></span><span class="line"><span class="cl">+ sfdisk -N26 --no-reread /dev/mmcblk1
</span></span><span class="line"><span class="cl">GPT PMBR size mismatch (8332023 != 122894335) will be corrected by write.
</span></span><span class="line"><span class="cl">The backup GPT table is not on the end of the device. This problem will be corrected by write.
</span></span><span class="line"><span class="cl">warning: /dev/mmcblk1: partition 26 is not defined yet
</span></span><span class="line"><span class="cl">Disk /dev/mmcblk1: 58.6 GiB, 62921900032 bytes, 122894336 sectors
</span></span><span class="line"><span class="cl">Units: sectors of 1 * 512 = 512 bytes
</span></span><span class="line"><span class="cl">Sector size (logical/physical): 512 bytes / 512 bytes
</span></span><span class="line"><span class="cl">I/O size (minimum/optimal): 512 bytes / 512 bytes
</span></span><span class="line"><span class="cl">Disklabel type: gpt
</span></span><span class="line"><span class="cl">Disk identifier: 58B10C85-BB4D-F94A-9194-82020FC9DC23
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Old situation:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Device          Start     End Sectors  Size Type
</span></span><span class="line"><span class="cl">/dev/mmcblk1p1  16384  425983  409600  200M Microsoft basic data
</span></span><span class="line"><span class="cl">/dev/mmcblk1p2 425984 8331990 7906007  3.8G Linux filesystem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/dev/mmcblk1p26: Created a new partition 3 of type &#39;Linux filesystem&#39; and of size 54.6 GiB.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">New situation:
</span></span><span class="line"><span class="cl">Disklabel type: gpt
</span></span><span class="line"><span class="cl">Disk identifier: 58B10C85-BB4D-F94A-9194-82020FC9DC23
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Device           Start       End   Sectors  Size Type
</span></span><span class="line"><span class="cl">/dev/mmcblk1p1   16384    425983    409600  200M Microsoft basic data
</span></span><span class="line"><span class="cl">/dev/mmcblk1p2  425984   8331990   7906007  3.8G Linux filesystem
</span></span><span class="line"><span class="cl">/dev/mmcblk1p3 8333312 122892287 114558976 54.6G Linux filesystem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">The partition table has been altered.
</span></span><span class="line"><span class="cl">Calling ioctl() to re-read partition table.
</span></span><span class="line"><span class="cl">Re-reading the partition table failed.: Device or resource busy
</span></span><span class="line"><span class="cl">The kernel still uses the old table. The new table will be used at the next reboot or after you run part.
</span></span><span class="line"><span class="cl">Syncing disks.
</span></span><span class="line"><span class="cl">+ /nix/store/wm9ynqbkqi7gagggb4y6f4l454kkga32-parted-riscv64-unknown-linux-gnu-3.6/bin/partprobe
</span></span><span class="line"><span class="cl">+ /nix/store/yln7ma9dldr3f2dva4l0iq275s4brxml-e2fsprogs-riscv64-unknown-linux-gnu-1.46.6-bin/bin/resize2D
</span></span><span class="line"><span class="cl">resize2fs 1.46.6 (1-Feb-2023)
</span></span><span class="line"><span class="cl">Filesystem at /dev/disk/by-label/NIXOS_SD is mounted on /; on-line resizing required
</span></span><span class="line"><span class="cl">old_desc_blocks = 1, new_desc_blocks = 1
</span></span><span class="line"><span class="cl">The filesystem on /dev/disk/by-label/NIXOS_SD is now 988250 (4k) blocks long.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">+ /nix/store/f5w7dd1f195bxkashhr5x0a788nxrxvc-nix-riscv64-unknown-linux-gnu-2.13.3/bin/nix-store --load-b
</span></span><span class="line"><span class="cl">+ touch /etc/NIXOS
</span></span><span class="line"><span class="cl">+ /nix/store/f5w7dd1f195bxkashhr5x0a788nxrxvc-nix-riscv64-unknown-linux-gnu-2.13.3/bin/nix-env -p /nix/vm
</span></span><span class="line"><span class="cl">+ rm -f /nix-path-registration
</span></span><span class="line"><span class="cl">starting systemd...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Welcome to NixOS 23.05 (Stoat)!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[  OK  ] Created slice Slice /system/getty.
</span></span><span class="line"><span class="cl">[  OK  ] Created slice Slice /system/modprobe.
</span></span><span class="line"><span class="cl">[  OK  ] Created slice Slice /system/serial-getty.......
</span></span><span class="line"><span class="cl">......
</span></span></code></pre></td></tr></table>
</div>
</div><p>简单总结下日志中的信息：</p>
<ol>
<li>整个启动流程被分成了三个阶段，分别是：
<ol>
<li>OpenSBI: 这个阶段貌似进行了一些硬件相关的初始化，比如说串口、SPI、SD 卡等，貌似还有些报错，先不管。</li>
<li>NixOS Stage 1: 这应该就是 <code>initrd</code> 阶段干的活，内核加载了 systemd udev 内核模块，然后使用 busybox 的 fsck 检查了根文件系统，接着挂载了根文件系统。</li>
<li>NixOS Stage 2:
<ol>
<li>运行了一个什么<code>activation script</code>，它首先设置好了 <code>/etc</code> 文件夹，然后检查了根分区文件系统的情况，并自动执行了分区与文件系统的扩容操作。</li>
<li>接着通过 <code>nix-env -p /nix/vm...</code> 大概是切换了个运行环境。</li>
<li>最后启动了 systemd，这之后的流程就跟其他发行版没啥区别了（都是 systemd）。</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="3-init-程序分析" class="headerLink">
    <a href="#3-init-%e7%a8%8b%e5%ba%8f%e5%88%86%e6%9e%90" class="header-mark"></a>3. init 程序分析</h3><p>有了上面这些信息，我们就可以比较容易地理解 init 这个程序了，它主要对应前面日志中的 NixOS Stage 2，即在真正挂载根文件系统之后，执行的第一个用户态程序。</p>
<p>在 NixOS 中这个 init 程序实际上是一个 shell 脚本，可以直接通过 <code>cat</code> 或者 <code>vim</code> 来查看它的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">› cat /nix/store/a5gnycsy3cq4ix2k8624649zj8xqzkxc-nixos-system-nixos-23.05.20230624.3ef8b37/init
</span></span><span class="line"><span class="cl"><span class="c1">#! /nix/store/91hllz70n1b0qkb0r9iw1bg9xzx66a3b-bash-5.2-p15-riscv64-unknown-linux-gnu/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">systemConfig</span><span class="o">=</span>/nix/store/71wh9lvf94i1jcd6qpqw228fy5s8fv24-nixos-system-lp4a-23.05.20230806.240472b
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">HOME</span><span class="o">=</span>/root <span class="nv">PATH</span><span class="o">=</span><span class="s2">&#34;/nix/store/fifbf1h3i83jvan2vkk7xm4fraq7drm7-coreutils-riscv64-unknown-linux-gnu-9.1/bin:/nix/store/2w8nachmhqvbjswrrsdia5cx1afxxx60-util-linux-riscv64-unknown-linux-gnu-2.38.1-bin/bin&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">IN_NIXOS_SYSTEMD_STAGE1</span><span class="k">:-</span><span class="si">}</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="nb">true</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Process the kernel command line.</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> o in <span class="k">$(</span>&lt;/proc/cmdline<span class="k">)</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="nv">$o</span> in
</span></span><span class="line"><span class="cl">            boot.debugtrace<span class="o">)</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># Show each command.</span>
</span></span><span class="line"><span class="cl">                <span class="nb">set</span> -x
</span></span><span class="line"><span class="cl">                <span class="p">;;</span>
</span></span><span class="line"><span class="cl">        <span class="k">esac</span>
</span></span><span class="line"><span class="cl">    <span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Print a greeting.</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> -e <span class="s2">&#34;\e[1;32m&lt;&lt;&lt; NixOS Stage 2 &gt;&gt;&gt;\e[0m&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Normally, stage 1 mounts the root filesystem read/writable.</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># However, in some environments, stage 2 is executed directly, and the</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># root is read-only.  So make it writable here.</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$container</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        mount -n -o remount,rw none /
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Likewise, stage 1 mounts /proc, /dev and /sys, so if we don&#39;t have a</span>
</span></span><span class="line"><span class="cl"><span class="c1"># stage 1, we need to do that here.</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> ! -e /proc/1 <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    specialMount<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">local</span> <span class="nv">device</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">local</span> <span class="nv">mountPoint</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$2</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">local</span> <span class="nv">options</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$3</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="nb">local</span> <span class="nv">fsType</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$4</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># We must not overwrite this mount because it&#39;s bind-mounted</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># from stage 1&#39;s /run</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">IN_NIXOS_SYSTEMD_STAGE1</span><span class="k">:-</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="nb">true</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">mountPoint</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">=</span> /run <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        install -m <span class="m">0755</span> -d <span class="s2">&#34;</span><span class="nv">$mountPoint</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">        mount -n -t <span class="s2">&#34;</span><span class="nv">$fsType</span><span class="s2">&#34;</span> -o <span class="s2">&#34;</span><span class="nv">$options</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$device</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$mountPoint</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl">    <span class="nb">source</span> /nix/store/vn0sga6rn69vkdbs0d2njh0aig7zmzi6-mounts.sh
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">IN_NIXOS_SYSTEMD_STAGE1</span><span class="k">:-</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="nb">true</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;booting system configuration </span><span class="si">${</span><span class="nv">systemConfig</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;booting system configuration </span><span class="nv">$systemConfig</span><span class="s2">&#34;</span> &gt; /dev/kmsg
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Make /nix/store a read-only bind mount to enforce immutability of</span>
</span></span><span class="line"><span class="cl"><span class="c1"># the Nix store.  Note that we can&#39;t use &#34;chown root:nixbld&#34; here</span>
</span></span><span class="line"><span class="cl"><span class="c1"># because users/groups might not exist yet.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Silence chown/chmod to fail gracefully on a readonly filesystem</span>
</span></span><span class="line"><span class="cl"><span class="c1"># like squashfs.</span>
</span></span><span class="line"><span class="cl">chown -f 0:30000 /nix/store
</span></span><span class="line"><span class="cl">chmod -f <span class="m">1775</span> /nix/store
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;1&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> ! <span class="o">[[</span> <span class="s2">&#34;</span><span class="k">$(</span>findmnt --noheadings --output OPTIONS /nix/store<span class="k">)</span><span class="s2">&#34;</span> <span class="o">=</span>~ ro<span class="o">(</span>,<span class="p">|</span>$<span class="o">)</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$container</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">            mount --bind /nix/store /nix/store
</span></span><span class="line"><span class="cl">        <span class="k">else</span>
</span></span><span class="line"><span class="cl">            mount --rbind /nix/store /nix/store
</span></span><span class="line"><span class="cl">        <span class="k">fi</span>
</span></span><span class="line"><span class="cl">        mount -o remount,ro,bind /nix/store
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">IN_NIXOS_SYSTEMD_STAGE1</span><span class="k">:-</span><span class="si">}</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="nb">true</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Use /etc/resolv.conf supplied by systemd-nspawn, if applicable.</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="o">[</span> -n <span class="s2">&#34;&#34;</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="o">[</span> -e /etc/resolv.conf <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        resolvconf -m <span class="m">1000</span> -a host &lt;/etc/resolv.conf
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Log the script output to /dev/kmsg or /run/log/stage-2-init.log.</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Only at this point are all the necessary prerequisites ready for these commands.</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exec</span> <span class="o">{</span>logOutFd<span class="o">}</span>&gt;<span class="p">&amp;</span><span class="m">1</span> <span class="o">{</span>logErrFd<span class="o">}</span>&gt;<span class="p">&amp;</span><span class="m">2</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">test</span> -w /dev/kmsg<span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">        <span class="nb">exec</span> &gt; &gt;<span class="o">(</span>tee -i /proc/self/fd/<span class="s2">&#34;</span><span class="nv">$logOutFd</span><span class="s2">&#34;</span> <span class="p">|</span> <span class="k">while</span> <span class="nb">read</span> -r line<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="nb">test</span> -n <span class="s2">&#34;</span><span class="nv">$line</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">                <span class="nb">echo</span> <span class="s2">&#34;&lt;7&gt;stage-2-init: </span><span class="nv">$line</span><span class="s2">&#34;</span> &gt; /dev/kmsg
</span></span><span class="line"><span class="cl">            <span class="k">fi</span>
</span></span><span class="line"><span class="cl">        <span class="k">done</span><span class="o">)</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span>
</span></span><span class="line"><span class="cl">        mkdir -p /run/log
</span></span><span class="line"><span class="cl">        <span class="nb">exec</span> &gt; &gt;<span class="o">(</span>tee -i /run/log/stage-2-init.log<span class="o">)</span> 2&gt;<span class="p">&amp;</span><span class="m">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Required by the activation script</span>
</span></span><span class="line"><span class="cl">install -m <span class="m">0755</span> -d /etc /etc/nixos
</span></span><span class="line"><span class="cl">install -m <span class="m">01777</span> -d /tmp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run the script that performs all configuration activation that does</span>
</span></span><span class="line"><span class="cl"><span class="c1"># not have to be done at boot time.</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;running activation script...&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">$systemConfig</span>/activate
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Record the boot configuration.</span>
</span></span><span class="line"><span class="cl">ln -sfn <span class="s2">&#34;</span><span class="nv">$systemConfig</span><span class="s2">&#34;</span> /run/booted-system
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Run any user-specified commands.</span>
</span></span><span class="line"><span class="cl">/nix/store/91hllz70n1b0qkb0r9iw1bg9xzx66a3b-bash-5.2-p15-riscv64-unknown-linux-gnu/bin/bash /nix/store/cmvnjz39iq4bx4cq3lvri2jj0sjq5h24-local-cmds
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Ensure systemd doesn&#39;t try to populate /etc, by forcing its first-boot</span>
</span></span><span class="line"><span class="cl"><span class="c1"># heuristic off. It doesn&#39;t matter what&#39;s in /etc/machine-id for this purpose,</span>
</span></span><span class="line"><span class="cl"><span class="c1"># and systemd will immediately fill in the file when it starts, so just</span>
</span></span><span class="line"><span class="cl"><span class="c1"># creating it is enough. This `: &gt;&gt;` pattern avoids forking and avoids changing</span>
</span></span><span class="line"><span class="cl"><span class="c1"># the mtime if the file already exists.</span>
</span></span><span class="line"><span class="cl">: &gt;&gt; /etc/machine-id
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># No need to restore the stdout/stderr streams we never redirected and</span>
</span></span><span class="line"><span class="cl"><span class="c1"># especially no need to start systemd</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">IN_NIXOS_SYSTEMD_STAGE1</span><span class="k">:-</span><span class="si">}</span><span class="s2">&#34;</span> !<span class="o">=</span> <span class="nb">true</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Reset the logging file descriptors.</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exec</span> 1&gt;<span class="p">&amp;</span><span class="nv">$logOutFd</span> 2&gt;<span class="p">&amp;</span><span class="nv">$logErrFd</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exec</span> <span class="o">{</span>logOutFd<span class="o">}</span>&gt;<span class="p">&amp;</span>- <span class="o">{</span>logErrFd<span class="o">}</span>&gt;<span class="p">&amp;</span>-
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Start systemd in a clean environment.</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;starting systemd...&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exec</span> /run/current-system/systemd/lib/systemd/systemd <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>简单总结下这个脚本的功能：</p>
<ol>
<li>通过 <code>mount -o remount,ro,bind /nix/store</code> 将 <code>/nix/store</code> 目录重新挂载为只读，确保 Nix Store 的不可变性，从而使系统状态可复现。</li>
<li>直接开始执行 <code>$systemConfig/activate</code> 这个程序。</li>
<li>activate 完毕后，启动真正的 1 号进程 systemd，进入后续启动流程。</li>
</ol>
<h3 id="4-activate-程序分析" class="headerLink">
    <a href="#4-activate-%e7%a8%8b%e5%ba%8f%e5%88%86%e6%9e%90" class="header-mark"></a>4. activate 程序分析</h3><p>前面的 init 程序其实没干啥，
根据我们看过的启动日志，大部分的功能应该都是在 <code>$systemConfig/activate</code> 这个程序中完成的。</p>
<p>再看看其中的 $systemConfig/activate 的内容，它同样是一个 shell 脚本，直接 <code>cat</code>/<code>vim</code> 查看下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span><span class="lnt">188
</span><span class="lnt">189
</span><span class="lnt">190
</span><span class="lnt">191
</span><span class="lnt">192
</span><span class="lnt">193
</span><span class="lnt">194
</span><span class="lnt">195
</span><span class="lnt">196
</span><span class="lnt">197
</span><span class="lnt">198
</span><span class="lnt">199
</span><span class="lnt">200
</span><span class="lnt">201
</span><span class="lnt">202
</span><span class="lnt">203
</span><span class="lnt">204
</span><span class="lnt">205
</span><span class="lnt">206
</span><span class="lnt">207
</span><span class="lnt">208
</span><span class="lnt">209
</span><span class="lnt">210
</span><span class="lnt">211
</span><span class="lnt">212
</span><span class="lnt">213
</span><span class="lnt">214
</span><span class="lnt">215
</span><span class="lnt">216
</span><span class="lnt">217
</span><span class="lnt">218
</span><span class="lnt">219
</span><span class="lnt">220
</span><span class="lnt">221
</span><span class="lnt">222
</span><span class="lnt">223
</span><span class="lnt">224
</span><span class="lnt">225
</span><span class="lnt">226
</span><span class="lnt">227
</span><span class="lnt">228
</span><span class="lnt">229
</span><span class="lnt">230
</span><span class="lnt">231
</span><span class="lnt">232
</span><span class="lnt">233
</span><span class="lnt">234
</span><span class="lnt">235
</span><span class="lnt">236
</span><span class="lnt">237
</span><span class="lnt">238
</span><span class="lnt">239
</span><span class="lnt">240
</span><span class="lnt">241
</span><span class="lnt">242
</span><span class="lnt">243
</span><span class="lnt">244
</span><span class="lnt">245
</span><span class="lnt">246
</span><span class="lnt">247
</span><span class="lnt">248
</span><span class="lnt">249
</span><span class="lnt">250
</span><span class="lnt">251
</span><span class="lnt">252
</span><span class="lnt">253
</span><span class="lnt">254
</span><span class="lnt">255
</span><span class="lnt">256
</span><span class="lnt">257
</span><span class="lnt">258
</span><span class="lnt">259
</span><span class="lnt">260
</span><span class="lnt">261
</span><span class="lnt">262
</span><span class="lnt">263
</span><span class="lnt">264
</span><span class="lnt">265
</span><span class="lnt">266
</span><span class="lnt">267
</span><span class="lnt">268
</span><span class="lnt">269
</span><span class="lnt">270
</span><span class="lnt">271
</span><span class="lnt">272
</span><span class="lnt">273
</span><span class="lnt">274
</span><span class="lnt">275
</span><span class="lnt">276
</span><span class="lnt">277
</span><span class="lnt">278
</span><span class="lnt">279
</span><span class="lnt">280
</span><span class="lnt">281
</span><span class="lnt">282
</span><span class="lnt">283
</span><span class="lnt">284
</span><span class="lnt">285
</span><span class="lnt">286
</span><span class="lnt">287
</span><span class="lnt">288
</span><span class="lnt">289
</span><span class="lnt">290
</span><span class="lnt">291
</span><span class="lnt">292
</span><span class="lnt">293
</span><span class="lnt">294
</span><span class="lnt">295
</span><span class="lnt">296
</span><span class="lnt">297
</span><span class="lnt">298
</span><span class="lnt">299
</span><span class="lnt">300
</span><span class="lnt">301
</span><span class="lnt">302
</span><span class="lnt">303
</span><span class="lnt">304
</span><span class="lnt">305
</span><span class="lnt">306
</span><span class="lnt">307
</span><span class="lnt">308
</span><span class="lnt">309
</span><span class="lnt">310
</span><span class="lnt">311
</span><span class="lnt">312
</span><span class="lnt">313
</span><span class="lnt">314
</span><span class="lnt">315
</span><span class="lnt">316
</span><span class="lnt">317
</span><span class="lnt">318
</span><span class="lnt">319
</span><span class="lnt">320
</span><span class="lnt">321
</span><span class="lnt">322
</span><span class="lnt">323
</span><span class="lnt">324
</span><span class="lnt">325
</span><span class="lnt">326
</span><span class="lnt">327
</span><span class="lnt">328
</span><span class="lnt">329
</span><span class="lnt">330
</span><span class="lnt">331
</span><span class="lnt">332
</span><span class="lnt">333
</span><span class="lnt">334
</span><span class="lnt">335
</span><span class="lnt">336
</span><span class="lnt">337
</span><span class="lnt">338
</span><span class="lnt">339
</span><span class="lnt">340
</span><span class="lnt">341
</span><span class="lnt">342
</span><span class="lnt">343
</span><span class="lnt">344
</span><span class="lnt">345
</span><span class="lnt">346
</span><span class="lnt">347
</span><span class="lnt">348
</span><span class="lnt">349
</span><span class="lnt">350
</span><span class="lnt">351
</span><span class="lnt">352
</span><span class="lnt">353
</span><span class="lnt">354
</span><span class="lnt">355
</span><span class="lnt">356
</span><span class="lnt">357
</span><span class="lnt">358
</span><span class="lnt">359
</span><span class="lnt">360
</span><span class="lnt">361
</span><span class="lnt">362
</span><span class="lnt">363
</span><span class="lnt">364
</span><span class="lnt">365
</span><span class="lnt">366
</span><span class="lnt">367
</span><span class="lnt">368
</span><span class="lnt">369
</span><span class="lnt">370
</span><span class="lnt">371
</span><span class="lnt">372
</span><span class="lnt">373
</span><span class="lnt">374
</span><span class="lnt">375
</span><span class="lnt">376
</span><span class="lnt">377
</span><span class="lnt">378
</span><span class="lnt">379
</span><span class="lnt">380
</span><span class="lnt">381
</span><span class="lnt">382
</span><span class="lnt">383
</span><span class="lnt">384
</span><span class="lnt">385
</span><span class="lnt">386
</span><span class="lnt">387
</span><span class="lnt">388
</span><span class="lnt">389
</span><span class="lnt">390
</span><span class="lnt">391
</span><span class="lnt">392
</span><span class="lnt">393
</span><span class="lnt">394
</span><span class="lnt">395
</span><span class="lnt">396
</span><span class="lnt">397
</span><span class="lnt">398
</span><span class="lnt">399
</span><span class="lnt">400
</span><span class="lnt">401
</span><span class="lnt">402
</span><span class="lnt">403
</span><span class="lnt">404
</span><span class="lnt">405
</span><span class="lnt">406
</span><span class="lnt">407
</span><span class="lnt">408
</span><span class="lnt">409
</span><span class="lnt">410
</span><span class="lnt">411
</span><span class="lnt">412
</span><span class="lnt">413
</span><span class="lnt">414
</span><span class="lnt">415
</span><span class="lnt">416
</span><span class="lnt">417
</span><span class="lnt">418
</span><span class="lnt">419
</span><span class="lnt">420
</span><span class="lnt">421
</span><span class="lnt">422
</span><span class="lnt">423
</span><span class="lnt">424
</span><span class="lnt">425
</span><span class="lnt">426
</span><span class="lnt">427
</span><span class="lnt">428
</span><span class="lnt">429
</span><span class="lnt">430
</span><span class="lnt">431
</span><span class="lnt">432
</span><span class="lnt">433
</span><span class="lnt">434
</span><span class="lnt">435
</span><span class="lnt">436
</span><span class="lnt">437
</span><span class="lnt">438
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">› cat root/nix/store/71wh9lvf94i1jcd6qpqw228fy5s8fv24-nixos-system-lp4a-23.05.20230806.240472b/activate
</span></span><span class="line"><span class="cl"><span class="c1">#!/nix/store/91hllz70n1b0qkb0r9iw1bg9xzx66a3b-bash-5.2-p15-riscv64-unknown-linux-gnu/bin/bash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">systemConfig</span><span class="o">=</span><span class="s1">&#39;/nix/store/71wh9lvf94i1jcd6qpqw228fy5s8fv24-nixos-system-lp4a-23.05.20230806.240472b&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span>/empty
</span></span><span class="line"><span class="cl"><span class="k">for</span> i in /nix/store/fifbf1h3i83jvan2vkk7xm4fraq7drm7-coreutils-riscv64-unknown-linux-gnu-9.1 /nix/store/x3hfwbwcqgl9zpqrk8kvm3p2kjns9asm-gnugrep-riscv64-unknown-linux-gnu-3.7 /nix/store/qn0yhj5d7r432rdh1885cn40gz184ww9-findutils-riscv64-unknown-linux-gnu-4.9.0 /nix/store/slwk77dzar2l1c4h9fikdw93ig4wdfy1-getent-glibc-riscv64-unknown-linux-gnu-2.37-8 /nix/store/yrf57f5h1rwmf3q70msx35a2p9f0rsjr-glibc-riscv64-unknown-linux-gnu-2.37-8-bin /nix/store/9al8xczxbm72i5q63n91fli5rynrfprl-shadow-riscv64-unknown-linux-gnu-4.13 /nix/store/2imxx6v9xhy8mbbx9q1r2d991m81inar-net-tools-riscv64-unknown-linux-gnu-2.10 /nix/store/2w8nachmhqvbjswrrsdia5cx1afxxx60-util-linux-riscv64-unknown-linux-gnu-2.38.1-bin<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">    <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$i</span>/bin:<span class="nv">$i</span>/sbin
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">_status</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="nb">trap</span> <span class="s2">&#34;_status=1 _localstatus=\$?&#34;</span> ERR
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Ensure a consistent umask.</span>
</span></span><span class="line"><span class="cl"><span class="nb">umask</span> <span class="m">0022</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet specialfs:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">specialMount<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">  <span class="nb">local</span> <span class="nv">device</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$1</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">local</span> <span class="nv">mountPoint</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$2</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">local</span> <span class="nv">options</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$3</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">local</span> <span class="nv">fsType</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$4</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> mountpoint -q <span class="s2">&#34;</span><span class="nv">$mountPoint</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">local</span> <span class="nv">options</span><span class="o">=</span><span class="s2">&#34;remount,</span><span class="nv">$options</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span>
</span></span><span class="line"><span class="cl">    mkdir -m <span class="m">0755</span> -p <span class="s2">&#34;</span><span class="nv">$mountPoint</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl">  mount -t <span class="s2">&#34;</span><span class="nv">$fsType</span><span class="s2">&#34;</span> -o <span class="s2">&#34;</span><span class="nv">$options</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$device</span><span class="s2">&#34;</span> <span class="s2">&#34;</span><span class="nv">$mountPoint</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="nb">source</span> /nix/store/vn0sga6rn69vkdbs0d2njh0aig7zmzi6-mounts.sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;specialfs&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet binfmt:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">mkdir -p -m <span class="m">0755</span> /run/binfmt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;binfmt&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet stdio:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;stdio&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet binsh:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Create the required /bin/sh symlink; otherwise lots of things</span>
</span></span><span class="line"><span class="cl"><span class="c1"># (notably the system() function) won&#39;t work.</span>
</span></span><span class="line"><span class="cl">mkdir -m <span class="m">0755</span> -p /bin
</span></span><span class="line"><span class="cl">ln -sfn <span class="s2">&#34;/nix/store/4y83vxk3mfk216d1jjfjgckkxwrbassi-bash-interactive-5.2-p15-riscv64-unknown-linux-gnu/bin/sh&#34;</span> /bin/.sh.tmp
</span></span><span class="line"><span class="cl">mv /bin/.sh.tmp /bin/sh <span class="c1"># atomically replace /bin/sh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;binsh&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet check-manual-docbook:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[[</span> <span class="k">$(</span>cat /nix/store/xzgmgymf510dicgppghq27lrh9fjpxfi-options-used-docbook<span class="k">)</span> <span class="o">=</span> <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> -e <span class="s2">&#34;\e[31;1mwarning\e[0m: This configuration contains option documentation in docbook.&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>          <span class="s2">&#34;Support for docbook is deprecated and will be removed after NixOS 23.05.&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>          <span class="s2">&#34;See nix-store --read-log /nix/store/n232fhpqqqnlfjl0rj59xxms419glja2-options.json.drv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;check-manual-docbook&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet domain:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;domain&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet users:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">install -m <span class="m">0700</span> -d /root
</span></span><span class="line"><span class="cl">install -m <span class="m">0755</span> -d /home
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">/nix/store/6fap9xv6snx5fr2m7m804v4gc23pb1jh-perl-riscv64-unknown-linux-gnu-5.36.0-env/bin/perl <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-w /nix/store/gx91fdp4a099jpfwdkbdw2imvl3lalsk-update-users-groups.pl /nix/store/1zj6fk93qkqd3z8n34s4r40xnby2ci21-users-groups.json
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;users&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet groups:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;groups&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet etc:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Set up the statically computed bits of /etc.</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;setting up /etc...&#34;</span>
</span></span><span class="line"><span class="cl">/nix/store/habrmd12my31s9r9fdby78l2dg5p7qyx-perl-riscv64-unknown-linux-gnu-5.36.0-env/bin/perl /nix/store/rg5rf512szdxmnj9qal3wfdnpfsx38qi-setup-etc.pl /nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;etc&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet hashes:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="nv">users</span><span class="o">=()</span>
</span></span><span class="line"><span class="cl"><span class="k">while</span> <span class="nv">IFS</span><span class="o">=</span>: <span class="nb">read</span> -r user <span class="nb">hash</span> tail<span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[[</span> <span class="s2">&#34;</span><span class="nv">$hash</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="s2">&#34;</span>$<span class="s2">&#34;</span>* <span class="o">&amp;&amp;</span> ! <span class="s2">&#34;</span><span class="nv">$hash</span><span class="s2">&#34;</span> <span class="o">=</span>~ ^<span class="se">\$</span><span class="o">(</span>y<span class="p">|</span>gy<span class="p">|</span>7<span class="p">|</span>2b<span class="p">|</span>2y<span class="p">|</span>2a<span class="p">|</span>6<span class="o">)</span><span class="se">\$</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nv">users</span><span class="o">+=(</span><span class="s2">&#34;</span><span class="nv">$user</span><span class="s2">&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span> &lt;/etc/shadow
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> <span class="s2">&#34;</span><span class="si">${#</span><span class="nv">users</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">WARNING: The following user accounts rely on password hashing algorithms
</span></span></span><span class="line"><span class="cl"><span class="s2">that have been removed. They need to be renewed as soon as possible, as
</span></span></span><span class="line"><span class="cl"><span class="s2">they do prevent their users from logging in.&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s1">&#39; - %s\n&#39;</span> <span class="s2">&#34;</span><span class="si">${</span><span class="nv">users</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;hashes&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet hostname:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">hostname <span class="s2">&#34;lp4a&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;hostname&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet modprobe:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Allow the kernel to find our wrapped modprobe (which searches</span>
</span></span><span class="line"><span class="cl"><span class="c1"># in the right location in the Nix store for kernel modules).</span>
</span></span><span class="line"><span class="cl"><span class="c1"># We need this when the kernel (or some module) auto-loads a</span>
</span></span><span class="line"><span class="cl"><span class="c1"># module.</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> /nix/store/wv00igsmj6mkk1ybssdch52hx0hx0x67-kmod-riscv64-unknown-linux-gnu-30/bin/modprobe &gt; /proc/sys/kernel/modprobe
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;modprobe&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet nix:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">install -m <span class="m">0755</span> -d /nix/var/nix/<span class="o">{</span>gcroots,profiles<span class="o">}</span>/per-user
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;nix&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet nix-channel:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Subscribe the root user to the NixOS channel by default.</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> ! -e <span class="s2">&#34;/root/.nix-channels&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">echo</span> <span class="s2">&#34;https://nixos.org/channels/nixos-23.05 nixos&#34;</span> &gt; <span class="s2">&#34;/root/.nix-channels&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;nix-channel&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet systemd-timesyncd-init-clock:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> ! <span class="o">[</span> -f /var/lib/systemd/timesync/clock <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">test</span> -d /var/lib/systemd/timesync <span class="o">||</span> mkdir -p /var/lib/systemd/timesync
</span></span><span class="line"><span class="cl">  touch /var/lib/systemd/timesync/clock
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;systemd-timesyncd-init-clock&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet udevd:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># The deprecated hotplug uevent helper is not used anymore</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -e /proc/sys/kernel/hotplug <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="s2">&#34;&#34;</span> &gt; /proc/sys/kernel/hotplug
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Allow the kernel to find our firmware.</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -e /sys/module/firmware_class/parameters/path <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/ann0ayjx9qf296pssrk2b26fry235idz-firmware/lib/firmware&#34;</span> &gt; /sys/module/firmware_class/parameters/path
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;udevd&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet usrbinenv:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">mkdir -m <span class="m">0755</span> -p /usr/bin
</span></span><span class="line"><span class="cl">ln -sfn /nix/store/fifbf1h3i83jvan2vkk7xm4fraq7drm7-coreutils-riscv64-unknown-linux-gnu-9.1/bin/env /usr/bin/.env.tmp
</span></span><span class="line"><span class="cl">mv /usr/bin/.env.tmp /usr/bin/env <span class="c1"># atomically replace /usr/bin/env</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;usrbinenv&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet var:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Various log/runtime directories.</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">mkdir -m <span class="m">1777</span> -p /var/tmp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Empty, immutable home directory of many system accounts.</span>
</span></span><span class="line"><span class="cl">mkdir -p /var/empty
</span></span><span class="line"><span class="cl"><span class="c1"># Make sure it&#39;s really empty</span>
</span></span><span class="line"><span class="cl">/nix/store/yln7ma9dldr3f2dva4l0iq275s4brxml-e2fsprogs-riscv64-unknown-linux-gnu-1.46.6-bin/bin/chattr -f -i /var/empty <span class="o">||</span> <span class="nb">true</span>
</span></span><span class="line"><span class="cl">find /var/empty -mindepth <span class="m">1</span> -delete
</span></span><span class="line"><span class="cl">chmod <span class="m">0555</span> /var/empty
</span></span><span class="line"><span class="cl">chown root:root /var/empty
</span></span><span class="line"><span class="cl">/nix/store/yln7ma9dldr3f2dva4l0iq275s4brxml-e2fsprogs-riscv64-unknown-linux-gnu-1.46.6-bin/bin/chattr -f +i /var/empty <span class="o">||</span> <span class="nb">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;var&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#### Activation script snippet wrappers:</span>
</span></span><span class="line"><span class="cl"><span class="nv">_localstatus</span><span class="o">=</span><span class="m">0</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">755</span> <span class="s2">&#34;/run/wrappers&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># We want to place the tmpdirs for the wrappers to the parent dir.</span>
</span></span><span class="line"><span class="cl"><span class="nv">wrapperDir</span><span class="o">=</span><span class="k">$(</span>mktemp --directory --tmpdir<span class="o">=</span><span class="s2">&#34;/run/wrappers&#34;</span> wrappers.XXXXXXXXXX<span class="k">)</span>
</span></span><span class="line"><span class="cl">chmod a+rx <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/chsh&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/9al8xczxbm72i5q63n91fli5rynrfprl-shadow-riscv64-unknown-linux-gnu-4.13/bin/chsh&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/chsh.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/chsh&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/chsh&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/chsh&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/dbus-daemon-launch-helper&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/jqk530wxiq3832zyiqn8qi6i2pr3snnl-dbus-riscv64-unknown-linux-gnu-1.14.8/libexec/dbus-daemon-launch-helper&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/dbus-daemon-launch-helper.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/dbus-daemon-launch-helper&#34;</span>
</span></span><span class="line"><span class="cl">chown root:messagebus <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/dbus-daemon-launch-helper&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+rx,o-rx&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/dbus-daemon-launch-helper&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/2d68cpnlqls47ijrwss83swjk2q1v953-fuse-riscv64-unknown-linux-gnu-2.9.9/bin/fusermount&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount3&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/06w8lm5k9i2n1xhkszsf4pa9hw9l0r5s-fuse-riscv64-unknown-linux-gnu-3.11.0/bin/fusermount3&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount3.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount3&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount3&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/fusermount3&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/mount&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/2w8nachmhqvbjswrrsdia5cx1afxxx60-util-linux-riscv64-unknown-linux-gnu-2.38.1-bin/bin/mount&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/mount.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/mount&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/mount&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/mount&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgidmap&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/9al8xczxbm72i5q63n91fli5rynrfprl-shadow-riscv64-unknown-linux-gnu-4.13/bin/newgidmap&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgidmap.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgidmap&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgidmap&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgidmap&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgrp&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/9al8xczxbm72i5q63n91fli5rynrfprl-shadow-riscv64-unknown-linux-gnu-4.13/bin/newgrp&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgrp.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgrp&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgrp&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newgrp&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newuidmap&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/9al8xczxbm72i5q63n91fli5rynrfprl-shadow-riscv64-unknown-linux-gnu-4.13/bin/newuidmap&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newuidmap.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newuidmap&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newuidmap&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/newuidmap&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/passwd&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/9al8xczxbm72i5q63n91fli5rynrfprl-shadow-riscv64-unknown-linux-gnu-4.13/bin/passwd&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/passwd.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/passwd&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/passwd&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/passwd&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/ping&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/mckzq3q58m31d8ax04gnjqx43niamis0-iputils-riscv64-unknown-linux-gnu-20221126/bin/ping&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/ping.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/ping&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/ping&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set desired capabilities on the file plus cap_setpcap so</span>
</span></span><span class="line"><span class="cl"><span class="c1"># the wrapper program can elevate the capabilities set on</span>
</span></span><span class="line"><span class="cl"><span class="c1"># its file into the Ambient set.</span>
</span></span><span class="line"><span class="cl">/nix/store/z2gpziznsj8rnv55vyq5n287g5cvx7lg-libcap-riscv64-unknown-linux-gnu-2.68/bin/setcap <span class="s2">&#34;cap_setpcap,cap_net_raw+p&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/ping&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set the executable bit</span>
</span></span><span class="line"><span class="cl">chmod u+rx,g+x,o+x <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/ping&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sg&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/9al8xczxbm72i5q63n91fli5rynrfprl-shadow-riscv64-unknown-linux-gnu-4.13/bin/sg&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sg.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sg&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sg&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sg&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/su&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/gbp100zp8a8gja22dyjz4nwv0qsxb7qy-shadow-riscv64-unknown-linux-gnu-4.13-su/bin/su&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/su.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/su&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/su&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/su&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudo&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/scywdc7rd6cjfvji166a6d0bsjj90vys-sudo-riscv64-unknown-linux-gnu-1.9.13p3/bin/sudo&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudo.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudo&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudo&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudo&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudoedit&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/scywdc7rd6cjfvji166a6d0bsjj90vys-sudo-riscv64-unknown-linux-gnu-1.9.13p3/bin/sudoedit&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudoedit.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudoedit&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudoedit&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/sudoedit&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/umount&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/2w8nachmhqvbjswrrsdia5cx1afxxx60-util-linux-riscv64-unknown-linux-gnu-2.38.1-bin/bin/umount&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/umount.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/umount&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/umount&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/umount&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cp /nix/store/wl1c1dgxb1zklpy5inpk7p798pm4zcca-security-wrapper-riscv64-unknown-linux-gnu/bin/security-wrapper <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/unix_chkpwd&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> -n <span class="s2">&#34;/nix/store/cn72qv0n576vg61mgaran7g2vj6gdjwn-linux-pam-riscv64-unknown-linux-gnu-1.5.2/bin/unix_chkpwd&#34;</span> &gt; <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/unix_chkpwd.real&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent races</span>
</span></span><span class="line"><span class="cl">chmod <span class="m">0000</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/unix_chkpwd&#34;</span>
</span></span><span class="line"><span class="cl">chown root:root <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/unix_chkpwd&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">chmod <span class="s2">&#34;u+s,g-s,u+rx,g+x,o+x&#34;</span> <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">/unix_chkpwd&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -L /run/wrappers/bin <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># Atomically replace the symlink</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># See https://axialcorps.com/2013/07/03/atomically-replacing-files-and-directories/</span>
</span></span><span class="line"><span class="cl">  <span class="nv">old</span><span class="o">=</span><span class="k">$(</span>readlink -f /run/wrappers/bin<span class="k">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="o">[</span> -e <span class="s2">&#34;/run/wrappers/bin-tmp&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    rm --force --recursive <span class="s2">&#34;/run/wrappers/bin-tmp&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="k">fi</span>
</span></span><span class="line"><span class="cl">  ln --symbolic --force --no-dereference <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">&#34;</span> <span class="s2">&#34;/run/wrappers/bin-tmp&#34;</span>
</span></span><span class="line"><span class="cl">  mv --no-target-directory <span class="s2">&#34;/run/wrappers/bin-tmp&#34;</span> <span class="s2">&#34;/run/wrappers/bin&#34;</span>
</span></span><span class="line"><span class="cl">  rm --force --recursive <span class="s2">&#34;</span><span class="nv">$old</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># For initial setup</span>
</span></span><span class="line"><span class="cl">  ln --symbolic <span class="s2">&#34;</span><span class="nv">$wrapperDir</span><span class="s2">&#34;</span> <span class="s2">&#34;/run/wrappers/bin&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">((</span> _localstatus &gt; <span class="m">0</span> <span class="o">))</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">  <span class="nb">printf</span> <span class="s2">&#34;Activation script snippet &#39;%s&#39; failed (%s)\n&#34;</span> <span class="s2">&#34;wrappers&#34;</span> <span class="s2">&#34;</span><span class="nv">$_localstatus</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Make this configuration the current configuration.</span>
</span></span><span class="line"><span class="cl"><span class="c1"># The readlink is there to ensure that when $systemConfig = /system</span>
</span></span><span class="line"><span class="cl"><span class="c1"># (which is a symlink to the store), /run/current-system is still</span>
</span></span><span class="line"><span class="cl"><span class="c1"># used as a garbage collection root.</span>
</span></span><span class="line"><span class="cl">ln -sfn <span class="s2">&#34;</span><span class="k">$(</span>readlink -f <span class="s2">&#34;</span><span class="nv">$systemConfig</span><span class="s2">&#34;</span><span class="k">)</span><span class="s2">&#34;</span> /run/current-system
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Prevent the current configuration from being garbage-collected.</span>
</span></span><span class="line"><span class="cl">mkdir -p /nix/var/nix/gcroots
</span></span><span class="line"><span class="cl">ln -sfn /run/current-system /nix/var/nix/gcroots/current-system
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exit</span> <span class="nv">$_status</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个脚本有点长，简单总结下它干了啥：</p>
<ol>
<li>通过 <code>source /nix/store/vn0sga6rn69vkdbs0d2njh0aig7zmzi6-mounts.sh</code> 挂载一些目录，看下这个文件内容就知道，挂的是 <code>/proc</code> <code>/sys</code> <code>/dev</code> <code>/rum</code> 等几个临时目录。</li>
<li>通过 <code>mkdir</code>/<code>install</code> 等指令自动创建 <code>/home</code> <code>/root</code> <code>/bin</code> <code>/usr</code> <code>/usr/bin</code> 等目录</li>
<li>通过 <code>perl /nix/store/rg5rf512szdxmnj9qal3wfdnpfsx38qi-setup-etc.pl /nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc</code> 配置生成 <code>/etc</code> 目录中的各种文件。</li>
<li>通过 <code>ln</code> 命令添加其他各种软链接，以及一些别的设置。</li>
</ol>
<p>其中第三步 etc 目录的设置，实际数据基本都来自该脚本的第二个参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">› ls root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc
</span></span><span class="line"><span class="cl">╭────┬──────────────────────────────────────────────────────────────────────────┬─────────┬────────┬──────────────╮
</span></span><span class="line"><span class="cl">│  <span class="c1"># │                                   name                                   │  type   │  size  │   modified   │</span>
</span></span><span class="line"><span class="cl">├────┼──────────────────────────────────────────────────────────────────────────┼─────────┼────────┼──────────────┤
</span></span><span class="line"><span class="cl">│  <span class="m">0</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/bashrc           │ symlink │   <span class="m">54</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│  <span class="m">1</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/binfmt.d         │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│  <span class="m">2</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/dbus-1           │ symlink │   <span class="m">50</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│  <span class="m">3</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/default          │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│  <span class="m">4</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/dhcpcd.exit-hook │ symlink │   <span class="m">60</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│  <span class="m">5</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/fonts            │ symlink │   <span class="m">69</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│  <span class="m">6</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/fstab            │ symlink │   <span class="m">53</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│  <span class="m">7</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/fuse.conf        │ symlink │   <span class="m">57</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│  <span class="m">8</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/host.conf        │ symlink │   <span class="m">57</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│  <span class="m">9</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/hostname         │ symlink │   <span class="m">56</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">10</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/hosts            │ symlink │   <span class="m">49</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">11</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/inputrc          │ symlink │   <span class="m">51</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">12</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/issue            │ symlink │   <span class="m">49</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">13</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/kbd              │ symlink │   <span class="m">61</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">14</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/locale.conf      │ symlink │   <span class="m">55</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">15</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/login.defs       │ symlink │   <span class="m">54</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">16</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/lsb-release      │ symlink │   <span class="m">59</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">17</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/lvm              │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">18</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/man_db.conf      │ symlink │   <span class="m">59</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">19</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/modprobe.d       │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">20</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/modules-load.d   │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">21</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/nanorc           │ symlink │   <span class="m">54</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">22</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/netgroup         │ symlink │   <span class="m">56</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">23</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/nix              │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">24</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/nscd.conf        │ symlink │   <span class="m">57</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">25</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/nsswitch.conf    │ symlink │   <span class="m">61</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">26</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/os-release       │ symlink │   <span class="m">58</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">27</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/pam              │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">28</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/pam.d            │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">29</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/pki              │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">30</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/profile          │ symlink │   <span class="m">55</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">31</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/protocols        │ symlink │   <span class="m">75</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">32</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/pulse            │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">33</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/resolvconf.conf  │ symlink │   <span class="m">63</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">34</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/rpc              │ symlink │   <span class="m">90</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">35</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/samba            │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">36</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/services         │ symlink │   <span class="m">74</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">37</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/set-environment  │ symlink │   <span class="m">59</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">38</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/shells           │ symlink │   <span class="m">54</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">39</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/ssh              │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">40</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/ssl              │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">41</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/sudoers          │ symlink │   <span class="m">51</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">42</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/sudoers.gid      │ file    │    <span class="m">3</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">43</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/sudoers.mode     │ file    │    <span class="m">5</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">44</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/sudoers.uid      │ file    │    <span class="m">3</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">45</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/sysctl.d         │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">46</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/systemd          │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">47</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/terminfo         │ symlink │   <span class="m">70</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">48</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/tmpfiles.d       │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">49</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/udev             │ dir     │ 4.1 KB │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">50</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/vconsole.conf    │ symlink │   <span class="m">57</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">│ <span class="m">51</span> │ root/nix/store/qsbx6lnsbs54yszy7d1ni7xgz6h6ayjd-etc/etc/zoneinfo         │ symlink │   <span class="m">97</span> B │ <span class="m">54</span> years ago │
</span></span><span class="line"><span class="cl">├────┼──────────────────────────────────────────────────────────────────────────┼─────────┼────────┼──────────────┤
</span></span><span class="line"><span class="cl">│  <span class="c1"># │                                   name                                   │  type   │  size  │   modified   │</span>
</span></span><span class="line"><span class="cl">╰────┴──────────────────────────────────────────────────────────────────────────┴─────────┴────────┴──────────────╯
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个 perl 脚本基本就是根据这个 nix store 中的 etc 文件夹，生成 <code>/etc</code> 目录中的各种文件或软链接。</p>
<h2 id="四硬件驱动部分" class="headerLink">
    <a href="#%e5%9b%9b%e7%a1%ac%e4%bb%b6%e9%a9%b1%e5%8a%a8%e9%83%a8%e5%88%86" class="header-mark"></a>四、硬件驱动部分</h2><p>NixOS 要能在 LicheePi 4A 上正常启动，还需要有硬件固件的支持，因此光了解 NixOS 的启动流程还不够，还需要了解硬件固件的启动流程。
这里简要介绍下 Linux 在 RISC-V 上的启动流程。</p>
<h3 id="1-u-bootu-boot-splu-boot-tpl-的关系" class="headerLink">
    <a href="#1-u-bootu-boot-splu-boot-tpl-%e7%9a%84%e5%85%b3%e7%b3%bb" class="header-mark"></a>1. u-boot，u-boot-spl，u-boot-tpl 的关系</h3><p>U-Boot 是嵌入式领域最常用的 bootloader，</p>
<p>对于一般嵌入式系统而言只需要一个 u-boot 作为 bootloader 即可，
但入今的嵌入式 IC 已经转向 SOC 片上系统，其内部不仅仅是一颗 CPU 核，还可能包含各种各样的其他 IP，因而相关的上层软件也需要针对性的划分不同的功能域，操作域，安全域等上层应用。
为了支持这些复杂而碎片化的应用需求，又或者因为 SRAM 太小以致无法放下整个 bootloader，SOC 的 Boot 阶段衍生出了多级 BootLoader，u-boot 为此定义了二三级加载器:</p>
<ul>
<li>spl：Secondary Program Loader，二级加载器</li>
<li>tpl：Tertiary Program Loader，三级加载器</li>
</ul>
<p>spl 和 tpl 走 u-boot 完全相同的 boot 流程，不过在 spl 和 tpl 中大多数驱动和功能被去除了，根据需要只保留一部分 spl 和 tpl 需要的功能，通过 CONFIG_SPL_BUILD 和 CONFIG_TPL_BUILD 控制；一般只用 spl 就足够了，spl 完成 ddr 初始化，并完成一些外设驱动初始化，比如 usb，emmc，以此从其他外围设备加载 u-boot，但是如果对于小系统 spl 还是太大了，则可以继续加入 tpl，tpl 只做 ddr 等的特定初始化保证代码体积极小，以此再次从指定位置加载 spl，spl 再去加载 u-boot。</p>
<p>LicheePi4A 就使用了二级加载器，它甚至写死了 eMMC 的分区表，要求我们使用 fastboot 往对应的分区写入 u-boot-spl.bin，官方给出的命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="c1"># flash u-boot into spl partition</span>
</span></span><span class="line"><span class="cl">sudo fastboot flash ram u-boot-with-spl.bin
</span></span><span class="line"><span class="cl">sudo fastboot reboot
</span></span><span class="line"><span class="cl"><span class="c1"># flash uboot partition</span>
</span></span><span class="line"><span class="cl">sudo fastboot flash uboot u-boot-with-spl.bin
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-risc-v-的启动流程" class="headerLink">
    <a href="#2-risc-v-%e7%9a%84%e5%90%af%e5%8a%a8%e6%b5%81%e7%a8%8b" class="header-mark"></a>2. RISC-V 的启动流程</h3><p>网上找到的一个图，涉及到一些 RISC-V 指令集相关的知识点：</p>
<figure><img src="./current-riscv-boot-flow.webp" width="80%"/><figcaption>
            <h4>RISCV 开发版当前的引导流程</h4>
        </figcaption>
</figure>

<p>根据我们前面的 NixOS 启动日志，跟这个图还是比较匹配的，但我们没观察到任何 U-Boot 日志，有可能是因为 U-Boot 没开日志，暂时不打算细究。</p>
<h3 id="3-opensbi" class="headerLink">
    <a href="#3-opensbi" class="header-mark"></a>3. OpenSBI</h3><p>前面的 NixOS 启动日志跟启动流程图中都出现了 OpenSBI，那么 OpenSBI 是什么呢？
为什么 ARM 开发版的启动流程中没有这么个玩意儿？</p>
<p>查了下资料，大概是说因为 RISC-V 是一个开放指令集，任何人都可以基于 RISC-V 开发自己的定制指令集，或者定制 IC 布局。
这显然存在很明显的碎片化问题。
OpenSBI 就是为了避免此问题而设计的，
它提供了一个标准的接口，即 Supervisor Binary Interface, SBI.
上层系统只需要适配 SBI 就可以了，不需要关心底层硬件的细节。
IC 开发商也只需要实现 SBI 的接口，就可以让任何适配了 SBI 的上层系统能在其硬件平台上正常运行。</p>
<p>而 OpenSBI 则是 SBI 标准的一个开源实现，IC 开发商只需要将 OpenSBI 移植到自己的硬件平台上即可支持 SBI 标准。</p>
<p>而 ARM 跟 X86 等指令集则是封闭的，不允许其他公司修改与拓展其指令集，因此不存在碎片化的问题，也就不需要 OpenSBI 这样的东西。</p>
<h3 id="4-fw_dynamicbin-跟-u-boot-splbin-两个文件" class="headerLink">
    <a href="#4-fw_dynamicbin-%e8%b7%9f-u-boot-splbin-%e4%b8%a4%e4%b8%aa%e6%96%87%e4%bb%b6" class="header-mark"></a>4. fw_dynamic.bin 跟 u-boot-spl.bin 两个文件</h3><ol>
<li><code>fw_dynamic.bin</code>: 我们 NixOS 镜像的 <code>/boot</code> 中就有这个固件，它是 OpenSBI 的编译产物。
<ol>
<li>RevyOS 的定制 OpenSBI 构建方法：<a href="https://github.com/revyos/thead-opensbi/blob/lpi4a/.github/workflows/build.yml" target="_blank" rel="noopener noreferrer">https://github.com/revyos/thead-opensbi/blob/lpi4a/.github/workflows/build.yml</a></li>
</ol>
</li>
<li><code>u-boot-spl.bin</code>: 这个文件是 u-boot 的编译产物，它是二级加载器。
<ol>
<li>RevyOS 的定制 u-boot 构建方法：<a href="https://github.com/revyos/thead-u-boot/blob/lpi4a/.github/workflows/build.yml" target="_blank" rel="noopener noreferrer">https://github.com/revyos/thead-u-boot/blob/lpi4a/.github/workflows/build.yml</a></li>
</ol>
</li>
</ol>
<h3 id="5-t-head-官方的编译工具链" class="headerLink">
    <a href="#5-t-head-%e5%ae%98%e6%96%b9%e7%9a%84%e7%bc%96%e8%af%91%e5%b7%a5%e5%85%b7%e9%93%be" class="header-mark"></a>5. T-Head 官方的编译工具链</h3><p>因为历史原因，TH1520 设计时貌似 RVV 还没出正式的规范，因此它使用了一些非标准的指令集，GCC 官方貌似宣称了永远不会支持这些指令集&hellip;（个人理解，可能有误哈）</p>
<p>因此为了获得最佳性能，LicheePi4A 官方文档建议使用 T-Head 提供的工具链编译整个系统。</p>
<p>但我在研究了 NixOS 的工具链实现，以及咨询了 @NickCao 后，确认了在 NixOS 上这几乎是不可行的。
NixOS 因为不遵循 FHS 标准，它对 GCC 等工具链做了非常多的魔改，要在 NixOS 上使用 T-Head 的工具链，就要使这一堆魔改的东西在 T-Head 的工具链上也能 Work，这个工作量很大，也很有技术难度。</p>
<p>所以最终选择了用 NixOS 的标准工具链编译系统，@revy 老师也为此帮我做了些适配工作，解决了一些标准工具链上的编译问题。</p>
<p>Issue 区也有人提到了这个问题，Revy 老师也帮助补充了些相关信息：<a href="https://github.com/ryan4yin/nixos-licheepi4a/issues/14" target="_blank" rel="noopener noreferrer">https://github.com/ryan4yin/nixos-licheepi4a/issues/14</a></p>
<h2 id="五我是如何构建出一个可以在-licheepi-4a-上运行的-nixos-镜像的" class="headerLink">
    <a href="#%e4%ba%94%e6%88%91%e6%98%af%e5%a6%82%e4%bd%95%e6%9e%84%e5%bb%ba%e5%87%ba%e4%b8%80%e4%b8%aa%e5%8f%af%e4%bb%a5%e5%9c%a8-licheepi-4a-%e4%b8%8a%e8%bf%90%e8%a1%8c%e7%9a%84-nixos-%e9%95%9c%e5%83%8f%e7%9a%84" class="header-mark"></a>五、我是如何构建出一个可以在 LicheePi 4A 上运行的 NixOS 镜像的</h2><p>到这里，NixOS 在 LicheePI4A 上启动的整个流程就基本讲清楚了，
<strong>NixOS 跟其他传统发行版在启动流程中最大的区别是它自定义了一个 init 脚本，在启动 systemd 之前，它会先执行这个脚本进行文件系统的初始化操作，准备好最基础的 FHS 目录结构，使得后续的 systemd 以及其他服务能正常启动</strong>。
正是因为这个 init 脚本，NixOS 才能在仅有 <code>/boot</code> 与 <code>/nix</code> 这两个目录的情况下正常启动整个系统。</p>
<blockquote>
<p>NixOS 数据的集中化只读存储使更多的骚操作成为可能，比如直接使用 tmpfs 作为根文件系统，将需要持久化的目录挂载到外部存储设备上，这样每次重启系统时，所有预期之外的临时数据都会被清空，进一步保证了系统的可复现性与安全性。
如果你有系统洁癖，而且有兴趣折腾，那就快来看看 @LanTian 写的 <a href="https://lantian.pub/article/modify-computer/nixos-impermanence.lantian/" target="_blank" rel="noopener noreferrer">NixOS 系列（四）：「无状态」操作系统</a> 吧~</p>
</blockquote>
<p>最终在 LicheePi4A 成功启动后的登录的截图：</p>
<figure><img src="./nixos-licheepi-neofetch.webp" width="80%"/><figcaption>
            <h4>NixOS 成功启动</h4>
        </figcaption>
</figure>

<p>那么基于我们到目前为止学到的知识，要如何构建出一个可以在 LicheePi 4A 上运行的 NixOS 镜像呢？</p>
<p>这个讲起来就很费时间了，涉及到了 NixOS 的<a href="https://nixos-and-flakes.thiscute.world/zh/development/cross-platform-compilation" target="_blank" rel="noopener noreferrer">交叉编译系统</a>，<a href="https://nixos-and-flakes.thiscute.world/zh/development/kernel-development" target="_blank" rel="noopener noreferrer">内核 override</a>, <a href="https://nixos-and-flakes.thiscute.world/zh/nixos-with-flakes/introduction-to-flakes" target="_blank" rel="noopener noreferrer">flakes</a>, <a href="https://github.com/ryan4yin/nixos-licheepi4a/blob/main/modules/sd-image/sd-image.nix" target="_blank" rel="noopener noreferrer">镜像构建</a>等等，要展开讲的话也是下一篇文章了，有兴趣的可以直接看我的 NixOS on LicheePi4A 仓库：<a href="https://github.com/ryan4yin/nixos-licheepi4a" target="_blank" rel="noopener noreferrer">https://github.com/ryan4yin/nixos-licheepi4a</a>.</p>
<p>简单的说，NixOS 跟传统 Linux 发行版的系统镜像构建思路是一致的，但因为其声明式与可复现性的特点，实际实现时出现了非常大的区别。
以我的项目仓库为例，整个项目完全使用 Nix 语言声明式编写（内嵌了部分 Shell 脚本&hellip;），而且这份配置也可用于系统后续的持续声明式更新部署（我还给出了一个 demo）。</p>
<p>最后，再推荐一波我的 NixOS 入门指南：<a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-and-flakes-book</a>，对 NixOS 感兴趣的读者们，快进我碗里来（</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://litterhougelangley.club/blog/2023/05/27/licheepi-4a-%e8%bf%99%e4%b8%aa%e5%b0%8f%e6%9d%bf%e6%9c%89%e7%82%b9%e6%84%8f%e6%80%9d%ef%bc%88%e7%ac%ac%e4%b8%80%e9%83%a8%e5%88%86%ef%bc%89/" target="_blank" rel="noopener noreferrer">LicheePi 4A —— 这个小板有点意思（第一部分） - HougeLangley</a></li>
<li><a href="https://opensource.com/article/18/1/analyzing-linux-boot-process" target="_blank" rel="noopener noreferrer">Analyzing the Linux boot process - By Alison Chaiken</a></li>
<li><a href="https://github.com/riscv-software-src/opensbi/blob/master/docs/firmware/fw.md" target="_blank" rel="noopener noreferrer">OpenSBI Platform Firmwares</a></li>
<li><a href="https://crvf2019.github.io/pdf/43.pdf" target="_blank" rel="noopener noreferrer">An Introduction to RISC-V Boot flow: Overview, Blob vs Blobfree standards</a></li>
<li><a href="https://quard-star-tutorial.readthedocs.io/zh_CN/latest/ch5-1.html" target="_blank" rel="noopener noreferrer">基于 qemu-riscv 从 0 开始构建嵌入式 linux 系统 ch5-1. 什么是多级 BootLoader 与 opensbi(上)¶</a></li>
<li><a href="https://docs.kernel.org/admin-guide/initrd.html" target="_blank" rel="noopener noreferrer">Using the initial RAM disk (initrd) - kernel.org</a></li>
<li><a href="https://www.baeldung.com/linux/kernel-images" target="_blank" rel="noopener noreferrer">Differences Between vmlinux, vmlinuz, vmlinux.bin, zimage, and bzimage</a></li>
<li><a href="https://github.com/ARM-software/u-boot/blob/master/doc/README.distro" target="_blank" rel="noopener noreferrer">U-Boot 官方的 Distro 文档</a></li>
</ul>
]]></content></entry><entry><title type="html">我的 2023 - 认识更多有趣的人，见识更宽广的世界</title><link href="https://thiscute.world/posts/2023-summary/"/><id>https://thiscute.world/posts/2023-summary/</id><author><name>ryan4yin</name></author><published>2023-12-31T23:59:45+08:00</published><updated>2024-01-19T10:12:45+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/2023-summary/2023-ryan4yin-github-oss-insight.webp" height="1753" width="874"><figcaption></figcaption>
        </figure><h2 id="闲言碎语" class="headerLink">
    <a href="#%e9%97%b2%e8%a8%80%e7%a2%8e%e8%af%ad" class="header-mark"></a>闲言碎语</h2><p>啊呀，又到了一年一度的传统节目——年终总结时间。</p>
<h2 id="2023-年流水账" class="headerLink">
    <a href="#2023-%e5%b9%b4%e6%b5%81%e6%b0%b4%e8%b4%a6" class="header-mark"></a>2023 年流水账</h2><p>还是跟去年一样，先简单过一下我 2023 年的流水账（基本都摘抄自我的 <code>/history</code>，类似日记？）：</p>
<ul>
<li>1 月
<ul>
<li>再一次完成了公司 K8s 集群一年一度的升级，虽然仍然有比较大的压力，但这次的过程相当顺利。</li>
<li>然后就是朋友约饭，玩耍，回家过春节。</li>
</ul>
</li>
<li>2 月
<ul>
<li>延续去年底开始对嵌入式硬件的兴趣，继续折腾 stm32 / orange pi 5 / esp32 等嵌入式硬件。
<ul>
<li>用 STM32 点亮了 TFT 液晶屏，以及搞定了使用 printf 打印日志到串口 - <a href="https://github.com/ryan4yin/learn-stm32f103c8t6" target="_blank" rel="noopener noreferrer">ryan4yin/learn-stm32f103c8t6</a></li>
<li>研究在 orangepi5(rk3558s) 上用 npu 跑 AI 任务，写了点笔记 <a href="https://github.com/ryan4yin/knowledge/tree/master/electrical-engineering/rk3588" target="_blank" rel="noopener noreferrer">demos_rk3588</a></li>
</ul>
</li>
<li>折腾 Proxmox VE 集群
<ul>
<li>主力节点 UM560 固态翻车了，是才用了三个月的 Asgard 512G SSD，颗粒是长江存储的。走京东售后了。（上次翻车是 2022-11-02 炸了根光威弈 Pro 1T，这也没隔多久啊&hellip;）
<figure><img src="/images/now/nvme-critial-medium-error.webp" width="100%"/><figcaption>
                  <h4>2022-11-02 翻车记录 - 系统无法启动</h4>
              </figcaption>
      </figure>

<figure><img src="/images/now/nvme-device-not-ready.webp" width="100%"/><figcaption>
                  <h4>2023-02-03 翻车记录 - 系统能启动但是文件损坏</h4>
              </figcaption>
      </figure>
</li>
<li>研究 Homelab 备份与数据同步方案，写了点笔记 <a href="https://github.com/ryan4yin/knowledge/blob/master/homelab/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E5%90%8C%E6%AD%A5.md" target="_blank" rel="noopener noreferrer">数据备份与同步策略</a></li>
<li>发布文章 <a href="https://thiscute.world/posts/ee-basics-2-esp32-display/" target="_blank" rel="noopener noreferrer">EE 入门（二） - 使用 ESP32 + SPI 显示屏绘图、显示图片、跑贪吃蛇</a>
<figure><img src="/images/ee-basics-2-esp32-display/tft_esp32_show_image-2.webp" width="100%"/>
      </figure>
</li>
</ul>
</li>
<li>简单玩了玩 Stable-Diffusion-WebUI 跟 sd-webui-controlnet，抄了些网上的提示词，效果确实很惊艳。不过玩了一波就没啥兴趣了，不太想花很多精力去折腾它。</li>
</ul>
</li>
<li>3 月
<ul>
<li>生活上
<ul>
<li>读完了「The Moon and Sixpence」</li>
<li>跟朋友到游泳馆游泳，算是开年以来最剧烈的一次运动&hellip;</li>
<li>跟同事们约着一起穿越了东西冲海岸线，这是我第三次走这条线，风景仍旧很美，当然也走得挺累&hellip;</li>
<li>买了块冲浪训练平衡板，练习了一段时间，挺有意思。</li>
</ul>
</li>
<li>业余技术上
<ul>
<li>仍旧是折腾各种嵌入式设备，新入手了 Sipeed MAIX-III AXera-Pi AX620A（爱芯派）+ Maix M0s MCU, 野火鲁班猫 0，荔枝糖 Nano 9K、M1s Dock、Longan Nano 等一堆大小开发板，折腾各种 Linux 编译、嵌入式开发的内容。</li>
<li>被 Copilot X 小小震撼了下，花了 100 美刀买了个 1 年的订阅，价格不贵，希望能切实帮我提升写代码的效率。</li>
<li>发了篇新博客：<a href="https://thiscute.world/posts/wireguard-on-linux/" target="_blank" rel="noopener noreferrer">Linux 上的 WireGuard 网络分析（一）</a></li>
<li>读了一点 <a href="https://github.com/PacktPublishing/Linux-Device-Driver-Development-Second-Edition" target="_blank" rel="noopener noreferrer">Linux Device Drivers Development 2nd Edition</a></li>
</ul>
</li>
</ul>
</li>
<li>4 月
<ul>
<li>在业余爱好上投入的精力越来越多，工作上相对的越来越懈怠，感觉碰到了瓶颈，但搞不明白该怎么解决。</li>
<li>听了 <a href="https://github.com/wdvxdr1123" target="_blank" rel="noopener noreferrer">wd 佬</a>的建议整了个达尔优 A87Pro 天空轴 v3，一番体验这个天空轴 v3 手感确实贼爽、声音也小，感觉可能有点类似静电容了（虽然我没用过静电容 emmm）。
<ul>
<li>我毕业以来就 19 年跟 20 年分别买过两把 IKBC 的茶轴跟红轴，茶轴放家里了，红轴一直放在公司用。当时国产轴感觉还不太出名，但是现在我聊键盘的朋友都看不上 cherry 轴了，网上搜了下 cheery 轴也有各种品控下降、轴心不稳、杂音大的诟病。</li>
<li>结合朋友推荐，另外看到 v2ex 上聊键盘的朋友也有说天空轴 v3 好用的，还在知乎上也看到有人说这个轴不错，于是就按捺不住心思下单了。到手确实很惊艳，甚至让我再一次喜欢上了打字的感觉！打了几篇小鹤练习群的赛文享受这种飘逸的 feel~</li>
</ul>
</li>
<li>搞了个 chatglm-6b int4 量化版，本地用我的拯救者笔记本（16G RAM + RTX3070 8G）玩了下，响应速度感觉可以，确实有一定的上下文联想能力，简单的问题也能解答，但是有点不聪明的样子，内容投毒比较严重。</li>
<li>玩 AI 联想到淘垃圾显卡，看嗨了就直接整了套新主机新显示器（我的第一台 PC 主机，以前只买过笔记本电脑），<strong>玻璃侧透机箱，RTX 4090，双水冷，27 寸 4K 显示器</strong>。组装了大半夜，后面又折腾了好几天，机箱直接当手办展示柜了，效果相当惊艳！缺点一是套下来貌似花了两万多，罪魁祸首是 RTX4090&hellip;
<figure><img src="/images/now/endeavour-rtx4090.webp" width="80%"/><figcaption>
                <h4>主机配置</h4>
            </figcaption>
    </figure>

<figure><img src="/images/now/rtx4090-pc-1.webp" width="80%"/><figcaption>
                <h4>机箱展示</h4>
            </figcaption>
    </figure>

<figure><img src="/images/now/rtx4090-pc-2.webp" width="80%"/><figcaption>
                <h4>机箱展示</h4>
            </figcaption>
    </figure>
</li>
<li>去听了个 Live House，乐队叫迎春归，青岛的乐队，不过前面许多歌我都觉得一般般，主唱唱功也差了点，全靠架子鼓贝斯烘托。不过末尾几首歌还挺好听的。</li>
<li>天依手办到货，很飒～
<figure><img src="/images/now/tianyi-vsinger.webp" width="80%"/><figcaption>
                <h4>洛天依 秘境花庭 常服手办</h4>
            </figcaption>
    </figure>
</li>
<li>新主机装了个 Endeavour OS 遇到些奇怪的问题，一怒之下决定换 OS，刚好朋友提到了 NixOS，听说过这玩意儿能做到「可复现」，直接就在 Homelab 里开了个 NixOS 虚拟机开始折腾，由此开始了我的 NixOS 之旅。</li>
<li>用新主机试玩了米忽悠的新游戏「星穹铁道」，还是熟悉的画风跟 UI，制作质量也很高，回合式对战的玩法我本以为会枯燥，不过也还 OK。最重要是 4090 画质够高，很多可爱的角色，游戏的动画跟剧情也都很在线，总体很 Nice!</li>
<li>用新主机连 Quest 2 打 VR 游戏，发现做过参数优化后，RTX4090 跑 beta saber，Quest 2 的画质参数全调到最高， 5K 120 帧无压力，相当流畅。</li>
<li>用 RTX4090 玩 Cyperpunk 2077，顶配光追画质（叫啥 onedrive）贼棒，真的非常还原真实环境，在 GeForce Experience 上调了个啥优化参数后，4K 差不多能稳定在 100 帧，看半天风景。</li>
</ul>
</li>
<li>5 月
<ul>
<li>月初，在虚拟机里折腾了大半个月 NixOS 后，成功地用几条简单的命令，在我的新主机上复现了整个 NixOS 环境，那一刻真的超级开心，半个月的努力终于得到了回报！
<figure><img src="/images/2023-summary/i3_2023-07-29_1.webp" width="100%"/>
    </figure>
</li>
<li>在新主机上成功复现出我的 NixOS 环境后，紧接着发布了我的系统配置 <a href="https://github.com/ryan4yin/nix-config/releases/tag/v0.0.2" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/v0.0.2)</a> 以及这大半个月的学习笔记 <a href="https://thiscute.world/posts/nixos-and-flake-basics/" target="_blank" rel="noopener noreferrer">NixOS 与 Nix Flakes 新手入门</a>，然后事情就变得越来越有趣起来了！随着读者的反馈以及我对它的不断迭代，这份学习笔记逐渐膨胀成一篇一万多字的博文，并且有了中英双语，然后又转变成一本开源书藉 <a href="https://nixos-and-flakes.thiscute.world/" target="_blank" rel="noopener noreferrer">nixos-and-flakes-book</a>，在 NixOS 国际社区获得了大量好评！它给我带来了巨大的成就感以及社区参与感。
<figure><img src="/images/2023-summary/nixos-and-flakes-book-comments_reddit.webp" width="100%"/><figcaption>
                <h4>NixOS &amp; Flakes Book 的部分评论 - Reddit</h4>
            </figcaption>
    </figure>

<figure><img src="/images/2023-summary/nixos-and-flakes-book-comments_discourse-github.webp" width="100%"/><figcaption>
                <h4>NixOS &amp; Flakes Book 的部分评论 - Discourse 与 GitHub</h4>
            </figcaption>
    </figure>

<figure><img src="/images/2023-summary/nixos-and-flakes-book-comments_discord.webp" width="100%"/><figcaption>
                <h4>NixOS &amp; Flakes Book 的部分评论 - Discord</h4>
            </figcaption>
    </figure>
</li>
<li>在 NixOS 上尝试了 i3 与 Hyprland 两个窗口管理器，并且使用 agenix 管理了系统中的敏感信息，比如密码、私钥、wireguard 配置等。
<ul>
<li>agenix 确实 OK，但它纯 bash 脚本实现的核心功能，体验太差了，错误信息一团糟，解决错误全靠自己摸索。</li>
</ul>
</li>
</ul>
</li>
<li>6 月
<ul>
<li>立了个 flag - 把 NixOS 移稙到我手上的两块开发版上跑起来，一块 ARM64 架构的 Orange Pi 5，以及另一块 RISC-V 架构的 LicheePi 4A.
<ul>
<li>花了好几天时间研究，在俄罗斯网友的耐心帮助下，终于在 6/4 晚上在 Orange Pi 5 上把 NixOS 跑起来了，还挺有成就感的（虽然现在也不知道拿这板子用来干啥&hellip;）</li>
<li>之后断断续续折腾了一个月的 NixOS on LicheePi 4A，试了很多方案，还请教了 <a href="https://github.com/HougeLangley" target="_blank" rel="noopener noreferrer">HougeLangley</a>、<a href="https://github.com/NickCao" target="_blank" rel="noopener noreferrer">@nickcao</a>、<a href="https://github.com/chainsx" target="_blank" rel="noopener noreferrer">@chainsx</a> 等大佬，学会了很多 Linux 相关的东西，费尽千辛万苦终于成功把 rootfs 编译出来了，但死活引导不成功。感觉是 uboot-spl 跟 boot 分区这两个地方的内容有问题，但不知道怎么解决，累觉不爱。</li>
</ul>
</li>
<li>收到一封来自 2018 年的我在 futureme.org 发送的邮件，回想起来，当时我是真迷茫哪。
<figure><img src="/images/2023-summary/futureme-from-2018-to-2023.webp" width="80%"/><figcaption>
                <h4>2018 年写给 5 年后的我的邮件</h4>
            </figcaption>
    </figure>
</li>
<li>受读者评论启发，将之前的 NixOS 笔记做成了一个单独的文档站点 + GitHub 仓库，<a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">nixos-and-flakes-book</a>，也对其内容做了大量更新，用 ChatGPT 3.5 全面优化了英文内容，阅读体验大大提升（英文苦手默默路过&hellip;）
<figure><img src="/images/now/2023-08-13-nixos-and-flakes-book.webp" width="100%"/><figcaption>
                <h4>NixOS &amp; Flakes Book</h4>
            </figcaption>
    </figure>
</li>
</ul>
</li>
<li>7 月
<ul>
<li>NixOS 系统配置 <a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config</a> 迭代：
<ul>
<li>把办公电脑 Macbook Pro 2020 重裝了一遍系統，新系统環境完全通過 nix-darwin 安裝管理，就連大部分的 macOS 系統配置也完全声明式管理了。至此，我的常用电脑环境（NixOS+macOS）全部都使用同一份 nix 配置管理起来了，感覺非常香！
<ul>
<li>Linux 与 macOS 都使用了同一份小鹤音形的 rime 配置，现在输入法的跨平台体验也完全一致了，非常棒！</li>
<li>nixpkgs 对 macOS 的支持有限，因此常用的 GUI 程序都通过 nix-darwin 调用 homebrew 进行安装管理。</li>
</ul>
</li>
<li>所有命令行工具的主题，全部统一为了 <a href="https://github.com/catppuccin/catppuccin" target="_blank" rel="noopener noreferrer">catppuccin-mocha</a>.</li>
<li>壁纸文件太大了，将它们拆分到单独的仓库中，方便管理。同时还添加了随机切换壁纸的功能。</li>
<li>添加了三台在 Proxmox VE 上运行的 NixOS 虚拟机，并且尝试用它们组建 NixOS 的分布式构建集群，挺有意思。</li>
<li>发现之前用的 alacritty 功能有限，于是将主力终端换成了 kitty，wezterm 作为备用选择，而 alacritty 就基本不使用了。</li>
<li>主力编辑器从 VsCode 换成了 AstroNvim， 一个 Neovim 发行版，使用非常顺手，启动速度以及使用流畅度都比 VSCode 快很多，缺点就是花了挺长的时间完善我的 Neovim 配置（时间销金窟哪）。
<figure><img src="/images/now/2023-07-29_astronvim.webp" width="100%"/><figcaption>
                  <h4>AstroNvim(Neovim)</h4>
              </figcaption>
      </figure>
</li>
</ul>
</li>
<li>基于在 macOS 上折腾 nix-darwin 的经验，制作了一个 <a href="https://github.com/ryan4yin/nix-darwin-kickstarter" target="_blank" rel="noopener noreferrer">ryan4yin/nix-darwin-kickstarter</a> 模板仓库，并且在 <a href="https://twitter.com/ryan4yin/status/1681639068957028352" target="_blank" rel="noopener noreferrer">Twitter</a> 等社区分享了一波，获得一波好评。</li>
<li>从 4 月份折腾 NixOS 到现在，GitHub 上开了五六个 Nix 项目，获得了接近 400 stars，也认识了许多朋友、收到了许多好评，在这个圈子里是有点混开了的 feel.
<ul>
<li>甚至发现有俄罗斯的老铁在将我的 NixOS 小书翻译成俄语！<a href="https://github.com/fl42v/nixos-and-flakes-book-ru" target="_blank" rel="noopener noreferrer">fl42v/nixos-and-flakes-book-ru</a>，成就感又涨了一点。</li>
</ul>
</li>
</ul>
</li>
<li>8 月
<ul>
<li>时隔一个多月，在 LicheePi 的 Telegram 群组被老外 ping NixOS 移植进展。又来了点动力再次接续之前 6 月份的移植工作，一番尝试后成功在 Lichee Pi 4A 上把 NixOS 跑起来了！离开始移植已经过去了两个月，迟来的成功，泪目！ping 我的老外也在第二天用我提供的镜像成功把 NixOS 跑起来了！他甚至给我打了 $50 美元以表感谢，原因是「这太有意思了！」
<ul>
<li><a href="https://github.com/ryan4yin/nixos-licheepi4a" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-licheepi4a</a>
<figure><img src="/images/2023-summary/nixos-riscv-cluster.webp" width="100%"/><figcaption>
                  <h4>NixOS on LicheePi4A</h4>
              </figcaption>
      </figure>
</li>
</ul>
</li>
<li>排查问题的方法：首先刷好一个可在 LicheePi 4A 上正常启动的 Fedora 系统，然后用我编译出的 NixOS 的 rootfs 与 initrd 等文件，替换掉 Fedora 的 rootfs 以及 boot 分区中对应的文件，结果发现就能正常启动了！进一步排查确认到，我 6 月份生成的 NixOS rootfs 无法启动的原因是：
<ul>
<li>我使用了 opensbi 的主线代码编译出的 opensbi，而 LicheePi 4A 的 TH1520 核心需要使用它 fork 的分支</li>
<li>此外我生成的 img 镜像，分区也存在问题，root 分区的大小不对劲。</li>
</ul>
</li>
<li>有读者在 NixOS Discourse 上询问我是否会考虑在 Patreon 上创建一个赞助页面，再加上之前已经有老外赞助了我 $50 刀，我于是在 GitHub 个人页面以及项目中都新增了 Patreon、buymeacoffee、爱发电与 Ethereum Address 等赞助链接。
<ul>
<li>截止 2023 年底，<a href="https://patreon.com/ryan4yin" target="_blank" rel="noopener noreferrer">Patreon</a> 共收到赞助 10 刀，<a href="https://www.buymeacoffee.com/ryan4yin" target="_blank" rel="noopener noreferrer">buymeacoffee</a> 收到赞助 70 刀，爱发电收到赞助 ￥25 元，以及加密货币收到赞助 50 刀。
<figure><img src="/images/now/nixos-patreon_the-first-member.jpg" width="80%"/><figcaption>
                  <h4>Patreon Messages</h4>
              </figcaption>
      </figure>
</li>
</ul>
</li>
<li>写下新文章 <a href="https://thiscute.world/posts/a-quarter-of-the-way-through-life/" target="_blank" rel="noopener noreferrer">人生已过四分之一</a>，回顾我到目前为止的人生，以及对未来的展望，挺多感想。</li>
<li>在 <a href="https://twitter.com/Manjusaka_Lee" target="_blank" rel="noopener noreferrer">@Manjusaka_Lee</a> 的熏陶下，我也整了一个新的邮箱地址 <a href="mailto:ryan4yin@linux.com" rel="">ryan4yin@linux.com</a>。先给 Linux Foundation 捐 99 刀，然后再付 150 刀就能得到这个终身邮箱地址。
<ul>
<li>一是用了这么久 Linux 也该捐点钱，二是感觉这个邮箱很酷！</li>
</ul>
</li>
<li>因为一些心态上的变化，开始参加一些公益活动，想在工作与业余爱好之外，再找到一些自我价值感，比如说加入了「恒晖公益月捐」活动，每月捐 300 块。</li>
<li>在 <a href="https://github.com/chainsx" target="_blank" rel="noopener noreferrer">@chainsx</a> 的帮助下，成功在 rock 5a 跟 orange pi 5 plus 两块板子上把 NixOS 跑了起来。</li>
</ul>
</li>
<li>9 月
<ul>
<li>临时起意看了个午夜场的《奥本海默》，IMAX 巨幕。给个 4 星没问题吧，演挺好的，原来美共曾经有这么多美国高级知识分子，这是我以前不了解的。</li>
<li>前几天跟老妹聊时，她引用了我看的小说里的一句话，然后我看<a href="https://www.lionad.art/" target="_blank" rel="noopener noreferrer">@仿生狮子</a>的荐书时发现，这一句就是《山月记》的摘抄，药哥说他也看过这书，挺好。当时就下单了，今天书到了，决定读一读。
<ul>
<li>读了第一个短篇，最知名的《山月记》，更类似一个寓言故事，最有韵味的就是那一句「<strong>深怕自己并非明珠而不敢刻苦琢磨，又自信有几分才华，不甘与瓦砾为伍。日渐避世离俗，心中自卑怯懦之自尊终在愤懑与羞怒中愈发张狂。世人皆为驯兽师，猛兽即个人性情</strong>。」
<figure><img src="/images/now/2023-09-02_midi-keyboard.webp" width="100%"/><figcaption>
                  <h4>MIDI 键盘、山月记、以及凌乱的桌台...</h4>
              </figcaption>
      </figure>
</li>
</ul>
</li>
<li>跟朋友聊到陈行甲老师，他给我分享了深慈联《2023 年第二期慈善大讲堂》（报道见 <a href="https://new.qq.com/rain/a/20230821A06QDX00" target="_blank" rel="noopener noreferrer">“坚守初心，笃行致远”，深慈联举办2023年第二期慈善大讲堂</a>）的视频，看上去分享者与与会者年龄段主要在 40+ 到 50+，他们看待问题的角度跟我们年轻人完全不同，陈行甲老师以及肖兴萍老师的演讲都干货满满，很有收获。</li>
<li>请半天假去看了中国国际光博会，看到了挺多新鲜的东西，像啥气动开关啊、光波导眼镜啊、高能量密度的锌空电池充电包啊、中科院光电所的两台小光刻机啊、长春光机所的空间站小机械臂啊、以及压电陶瓷驱动技术的各种应用，长了见识。</li>
<li>看了些 NixCon 2023 的视频，挺有意思。而且发现所有视频都有一只招财猫在讲台上哈哈。</li>
<li>最感兴趣的内容是这个 - <a href="https://www.youtube.com/watch?v=Gm8yrvbgY-Y" target="_blank" rel="noopener noreferrer">NixCon2023 Bootstrapping Nix and Linux from TinyCC</a></li>
<li>看了记录片 <a href="https://movie.douban.com/subject/25850443/" target="_blank" rel="noopener noreferrer">史蒂夫·乔布斯 Steve Jobs</a>，Jobs 简直是最差的丈夫、父亲跟同事，但他确实是最牛逼的设计天才（或许这两句都应该再加一个「之一」）。</li>
<li>听了天依的新曲<a href="https://www.bilibili.com/video/BV1Yp4y1j7jX/" target="_blank" rel="noopener noreferrer">《歌行四方 - 天依游学记》</a>，曲跟词都非常棒！完美融合了二次元跟三次元的各种传统音乐，天依的人物建模、服装设计跟渲染质量也提升了一个档次。 很多年前第一次听天依，感觉声音怪怪的，后来出了全息现场会，效果其实也挺差的，然后一步步地建模质量越来越好，人物越来越生动活泼，声音越来越自然，现在又走进了三次元，与传统音乐大师一起合奏。听下来真的很感动，有一种老父亲甚感欣慰的 feel.</li>
<li>了解了下 <a href="https://worldjusticeproject.org/rule-of-law-index/country/2022/China" target="_blank" rel="noopener noreferrer">世界法治指数</a> 与 <a href="https://www.cnfin.com/hg-lb/detail/20230425/3851364_1.html" target="_blank" rel="noopener noreferrer">中国各省份司法文明指数</a>
<ul>
<li>湖南省貌似一直在倒数前二徘徊&hellip;很尴尬。</li>
</ul>
</li>
<li>今天看到推上有 MTF 说自己双相情感障碍（躁郁症），突然就想百度一下，进一步找到了注意力缺失障碍（ADHD）这个病，联想到我自己好像有这个问题。
<ul>
<li>大学时曾经怀疑自己有这个注意力缺失症，还买了本《分心不是我的错》，但书买了一直没看（我整个大学期间都不太看得下书），也没去医院看过。</li>
</ul>
</li>
<li>中秋国庆连休
<ul>
<li>看完了《被讨厌的勇气》，觉得它虽然缺乏科学依据，但这套理论得确实很有价值，给我很大启发。</li>
<li>看了一点《这才是心理学》</li>
<li>带我妹使用 ESP32 练习 C 语言，兴趣导向。玩了用 5x5 的 WS2812 彩灯模块写跑马灯、红绿灯之类的小程序，她还非要用 SSD1306 小屏幕显示个「原神启动」，搞得挺开心 emmm</li>
</ul>
</li>
<li>突然对 FPGA 燃起了兴趣，在 HDLBits 上刷了许多 Verilog 入门题。</li>
</ul>
</li>
<li>10 月
<ul>
<li>读完了《叫魂：1768 年中国妖术大恐慌》</li>
<li>看了记录片《溥仪：末代皇帝》跟电影《末代皇帝》，两个片子的内容有些出入，不过这边的史料显然可信度更高，都好评。</li>
<li>我的开源小书 NixOS &amp; Flakes Book 上了 Hacker News 热门，很开心：<a href="https://news.ycombinator.com/item?id=37818570" target="_blank" rel="noopener noreferrer">NixOS and Flakes Book: An unofficial book for beginners (free)</a></li>
<li>之前跟朋友聊过我可能有注意力缺失障碍（ADHD），朋友提到可以去看看医生。国庆后经 <a href="bleatingsheep.org/" rel="">@咩咩</a> 再次提醒，约了深圳康宁医院（深圳市精神卫生中心）的特需门诊，然后确诊，开始服药治疗&hellip;
<ul>
<li>跟 0xffff 群友辩论 ADHD 病症相关问题，讨论的内容逐渐发散 - <a href="https://0xffff.one/d/1643-cong-adhd-zhu-yi-li-que-shi-zheng" target="_blank" rel="noopener noreferrer">从 ADHD 注意力缺失症聊开去</a></li>
</ul>
</li>
<li>遵医嘱，搜了些正念冥想的资料，看了点 <a href="https://www.bilibili.com/video/BV19y4y1V7RU" target="_blank" rel="noopener noreferrer">正念减压疗法创始人-乔.卡巴金 教正念冥想大师课（中英字幕）</a>，尝试了下还有点意思。</li>
<li>跟我妹沟通后感觉她也比较有可能有 ADHD，提前安排她来深圳看心理医生。我妹确诊了抑郁症 + ADHD，医生给开了安非他酮，先吃半个月看看效果再复诊，同时也建议多带我妹出去运动散心。
<ul>
<li>我妹确诊抑郁症这一点真的让我很意外，让我意识到我一直有些忽视她的心理健康问题。</li>
</ul>
</li>
<li>我确诊 ADHD 并开始用药之后心态有很大的变化，我妹确诊抑郁症又给了我很大的触动。我完全放下了所有技术上的业余爱好，工作上专心工作，业余时间更多地花在了关心家人、运动、学习心理学等事情上。</li>
</ul>
</li>
<li>11 月
<ul>
<li>我的 NixOS &amp; Flakes Book 被加进了 NixOS 官方文档的推荐阅读，挺开心的：<a href="https://github.com/NixOS/nix.dev/pull/781" target="_blank" rel="noopener noreferrer">nix.dev - PR 781</a></li>
<li>持续服药治疗以及复诊，确诊后这段时间是我印象中工作效率最高的一段时间，治疗挺有成效。</li>
<li>给我妹买往返火车票、学校请假、预约医生、带她在深圳到处玩。</li>
<li>有挺长一阵没怎么碰电脑了，最近发现我的 NixOS 总是启动没多久网络就会卡死，为了解决问题，我重装了 NixOS 系统，顺便给系统添加了 LUKS 全盘加密 + Secure Boot + impermanence，根卷换成了 tmpfs，因此任何未显式声明持久化的数据，每次重启系统都会被清空。优雅，太优雅了！
<ul>
<li>重装好系统后网络问题就消失了，猜测是 home 目录有什么 X Server 相关的配置文件有毛病导致的。</li>
</ul>
</li>
</ul>
</li>
<li>12 月
<ul>
<li>沉寂一个多月的对业余项目的兴趣回来了一点，对 NixOS 相关的几个项目做了一番更新。</li>
<li>工作电脑用满三年换新了，新电脑是 Macbook Pro M2，终于用上了 M 系列的 CPU，体验显然比之前的 Intel 版本好很多，不发热了风扇也不响了，续航知道很牛但没啥机会测试。</li>
<li>淘汰下的旧工作电脑给装了个 NixOS，体验还不错，有些小问题但勉强能忍受。
<ul>
<li>主要问题：Touchbar 跑着跑着会失灵，Touch ID 无法使用，盖上盖子会直接关机，触摸板比较容易误触。其他的体验都挺不错的，第一次在笔记本上用 NixOS，还挺新奇的。</li>
</ul>
</li>
<li>折腾 Guix 系统、Scheme 语言、Emacs 编辑器以及 nushell.
<ul>
<li>打算后面多写写 Scheme 跟 nushell，Python 脚本有点写腻歪了，而且 Python 在 NixOS 上有点水土不服。</li>
</ul>
</li>
<li>将 Zellij 设为了默认的终端环境，体验非常丝滑，而且新手引导做得简直绝了，极大地降低了上手难度。</li>
<li>带我妹逛了深圳 AD01 动漫展。第一次逛漫展，体验挺不错的，玩得挺开心。
<ul>
<li>我妹对看到的各路原神、星穹铁道、魔道祖师、天依、芙莉莲等角色如数家珍，我变成了单纯的陪玩哈哈，已经变成跟不上时代的老东西了（不是</li>
<li>原神角色是最多的，如果论单个角色的话 Miku 应该是 Top1，另外因为芙莉莲正在热播，所以她的角色也很多。</li>
<li>感觉漫展真的相当年轻化，大都是 00 后，超有活力，是平常我接触不到的人群，混迹其中有找回一点我逝去的青春 emmmm</li>
<li>明年再参加的话，或许该考虑下 Cos 个啥角色，更能融入这个圈子，玩得更开心。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><figure><img src="/images/2023-summary/anime-convention-1.webp" width="70%"/><figcaption>
            <h4>漫展刚入场</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/anime-convention_chinese-classical-dress-1.webp" width="70%"/><figcaption>
            <h4>古风 coser - 魔道祖师？</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/anime-convention_frieren-coser-1.webp" width="70%"/><figcaption>
            <h4>芙莉莲</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/anime-convention_Miku-cartoon-backpack-1.webp" width="70%"/><figcaption>
            <h4>Miku 卡通背包 - 我妹同款 emmm</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/anime-convention_Scenery-Fox-Spirit-Matchmaker.webp" width="70%"/><figcaption>
            <h4>狐妖小红娘布景</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/anime-convention_poster-Bocchi-the-Rock!-1.webp" width="70%"/><figcaption>
            <h4>卖海报的小店</h4>
        </figcaption>
</figure>
</p>
<figure><img src="/images/2023-summary/%e8%80%81%e5%8c%97%e4%ba%ac%e9%93%9c%e9%94%85%e6%b6%ae.webp" width="70%"/><figcaption>
            <h4>跟我妹一起下馆子 - 老北京铜锅涮</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/2023-favourite-singers-netease-cloud-music.webp" width="70%"/><figcaption>
            <h4>网易云音乐年度歌手 - 今年是初音</h4>
        </figcaption>
</figure>

<h2 id="2023-年-highlights" class="headerLink">
    <a href="#2023-%e5%b9%b4-highlights" class="header-mark"></a>2023 年 Highlights</h2><h3 id="1-业余技术" class="headerLink">
    <a href="#1-%e4%b8%9a%e4%bd%99%e6%8a%80%e6%9c%af" class="header-mark"></a>1. 业余技术</h3><p>技术方面我今年的进展还是挺大的，可跟去年写的展望几乎没啥关联，人生总是充满了意外哈哈&hellip;</p>
<p>今年的主要技术成就基本完全集中在 NixOS 这一块，新建的几个项目都收到了挺多 stars 跟好评。</p>
<p>截止 2023/12/31，我 stars 比较高的几个项目如下：</p>
<ul>
<li><a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-and-flakes-book</a>: 这本开源小书的仓库于 2023/6/23 创建，目前获得了 15 个 issues，24 位贡献者，43 个 forks，923 个 stars，以及 4 位国外读者的共计 $80 零花钱赞助。
<ul>
<li>是我目前 stars 数最高的项目</li>
<li>它的文档站目前稳定在每天 150 UV</li>
</ul>
</li>
<li><a href="https://github.com/ryan4yin/knowledge" target="_blank" rel="noopener noreferrer">ryan4yin/knowledge</a>: 这份个人笔记我从 2019 年工作开始写，目前有了 38 个 forks，363 个 stars.</li>
<li><a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config</a>: 这份 NixOS 系统配置仓库于 2023/4/23 创建，目前获得了 6 位贡献者，23 个 forks，以及 297 个 stars.</li>
<li><a href="https://github.com/ryan4yin/nix-darwin-kickstarter" target="_blank" rel="noopener noreferrer">ryan4yin/nix-darwin-kickstarter</a>: 我于 2023/7/19 创建的一个 Nix-Darwin 模板仓库，目前 133 stars.</li>
<li><a href="https://github.com/ryan4yin/nixos-rk3588" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-rk3588</a>: 这是我在 2023/6/4 创建的一个 NixOS 移植项目，目前支持了三块 RK3588 开发板，获得了 2 位贡献者，9 个 forks，11 个 issues，以及 49 stars.</li>
<li><a href="https://github.com/ryan4yin/nixos-licheepi4a" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-licheepi4a</a>: 同样是一个 NixOS 移植项目，但目标是基于 RISC-V 指令集的 LicheePi 4A 开发板。目前获得了 3 位贡献者与 23 stars，其中一位贡献者还赞助了 $50 给我。
<ul>
<li>这个项目断断续续花了两个月才搞定，用时远超预料&hellip;不过成功后获得的成就感也是巨大的！</li>
</ul>
</li>
</ul>
<p>对比下从 2023 年 1 月 1 日到现在，我的 GitHub Metrics 统计数据：</p>
<figure><img src="/images/2023-summary/2023-01-01-github-metrics.svg"/><figcaption>
            <p>
                    <a href="https://github.com/ryan4yin/ryan4yin/blob/f58f1769a72289b44e5313eaed3bbfc21febebda/metrics.classic.svg">2023/01/01 GitHub 统计数据</a></p>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/2023-12-31-github-metrics.svg"/><figcaption>
            <p>
                    <a href="https://github.com/ryan4yin/ryan4yin/blob/master/metrics.classic.svg">2023/12/31 GitHub 统计数据</a></p>
        </figcaption>
</figure>

<p>几个关键指标的变化：</p>
<ul>
<li>Stars: 312 =&gt; 2072, 涨幅 564%.</li>
<li>Followers: 152 =&gt; 468, 涨幅 208%.</li>
<li>Forkers: 97 =&gt; 203, 涨幅 109%.</li>
<li>Watchers: 39 =&gt; 102, 涨幅 161%.</li>
</ul>
<p>在折腾 NixOS 的过程中我写的入门指南（<a href="https://nixos-and-flakes.thiscute.world/" target="_blank" rel="noopener noreferrer">nixos-and-flakes-book</a>）获得了国内外社区的大量好评，其他项目也各有斩获；另外认识了好几位国内外的 NixOS 资深用户、开源项目作者以及嵌入式开发者，还收到了一些外国读者的打赏。</p>
<p>这些成绩给我带来了巨大的成就感以及社区参与感，也完全契合了我年初给自己的期许——「<strong>认识更多有趣的人，见识下更宽广的世界</strong>」。</p>
<p>今年不仅给 AstroNvim, ESP-IDF 等知名项目贡献了少许代码，甚至还创造了这么多个受欢迎的新项目、收到了几十个 PR。之前定的给一些开源项目贡献代码的目标，完全是超额完成了。</p>
<p>在折腾上 NixOS 后，年中的时候又顺带将 VSCode 彻底换成了 Zellij + Neovim，甚至年底又开始折腾 Guix 系统、Emacs 编辑器，以及 nushell 等新鲜玩意儿。</p>
<p>总的来说，业余技术今年搞到这个程度，相比去年，能称得上是「优秀」、「超出预期」。</p>
<p>要说我在搞技术这方面有啥诀窍可分享的话，那应该就是 <strong>Learning by Teaching</strong>，我 GitHub 上目前 stars 最高的两个项目（NixOS &amp; Flakes Book 以及 knowledge）以及这个博客站点就是我在践行它最好的证明，而它们获得的评论、 stars、以及零花钱赞助，则证明了它的价值。</p>
<h3 id="2-工作" class="headerLink">
    <a href="#2-%e5%b7%a5%e4%bd%9c" class="header-mark"></a>2. 工作</h3><p>工作上只能说马马虎虎，上半年业余在 NixOS 上做的成果得到了非常多的认可，相当有成就感，花了大量的精力在 NixOS 上，也创建了许多相关项目。
但另一方面，精力就这么多，我也一直做不到平衡好工作与生活/业余爱好，其结果就是那段时间没啥心思在工作上，把工作搞得一团糟。
当时觉得自己进入了一个瓶颈期，在工作上找不到什么成就感，业余爱好虽然做出了不错的成绩，但又不能靠这个吃饭。</p>
<p>在折腾业余爱好期间，一种找不到方向的焦虑感一直萦绕着我，有跟一些朋友、同事沟通过这个问题，但大道理谁都懂，真要做起来又是另一回事了。</p>
<p>因为业余搞了些嵌入式硬件感觉有意思，也有隐约考虑过转行搞硬件，但只是些粗浅的想法。
到 8 月份的时候，做的几个 NixOS 项目收到些赞助，让我可能有点异想天开？了解了些「如何通过开源项目养活自己」类似的信息，8 月中下旬的时候在苏洋的折腾群里提到这个想法，被洋哥泼了冷水 emmm</p>
<p>冷静下来后回想，洋哥说的挺在理的，靠开源用爱发电真能养活自己的凤毛麟角，如果专门往商业项目的方向做，又没了那份折腾的快乐了。</p>
<p>8 月底的时候，苏洋的折腾群里发起一场自我介绍活动，读了许多群友的自我介绍，很有感触，于是基于我自己在群里发的自我介绍调整扩写，成果就是这篇 <a href="https://thiscute.world/posts/a-quarter-of-the-way-through-life/" target="_blank" rel="noopener noreferrer">人生已过四分之一</a>。</p>
<p>当时文章完成后发出来，真觉得自己想明白不少，也跟领导同事做了些沟通，工作上状态有所好转。
但还是很难集中注意力，分心的情况仍然相当严重。也尝试了通过番茄钟之类的方式来提高工作效率，但效果不佳。
当时有点认命了，想着人生可能就是这样永远在这样未知的道路上的挣扎着前进，也有痛苦，也有快乐。</p>
<p>转折点是国庆前跟朋友提了嘴感觉自己有 ADHD，国庆后就被<a href="bleatingsheep.org/" rel="">@咩咩</a>催促去看心理医生，之后就确诊了 ADHD 并开始服药。
确诊让我的心态出现巨大的改变，业余爱好因此放下了一个多月。而服药则帮助我扭转了工作状态，我的专注能力有了质的提升，这也是我今年最大的收获之一。</p>
<p>总体上，我今年的工作做得比去年差，尤其是上半年，总体上只能算「及格」吧。</p>
<h3 id="3-生活" class="headerLink">
    <a href="#3-%e7%94%9f%e6%b4%bb" class="header-mark"></a>3. 生活</h3><h4 id="31-确诊-adhd-以及治疗" class="headerLink">
    <a href="#31-%e7%a1%ae%e8%af%8a-adhd-%e4%bb%a5%e5%8f%8a%e6%b2%bb%e7%96%97" class="header-mark"></a>3.1. 确诊 ADHD 以及治疗</h4><p>前文提了，我今年确诊了 ADHD，这是我今年最大的收获之一。
它让我搞明白了，原来我一直存在的注意力问题，并不是什么人格缺陷或者意志力不够，而是一种有挺多人都存在的功能失调（disorder），可以通过药物等方式治疗缓解。</p>
<p>考虑到 ADHD 的遗传特性，跟妹妹、父母一番沟通后，带我妹来深圳看医生，确诊了 ADHD 以及抑郁症。
说真的，我一直知道我妹妹情绪比较敏感，但从没想过是因为抑郁症。</p>
<p>这之后，除了工作外，我大部分的精力都花在了关心家人、运动、学习心理学等事情上。
这是一个非常明显的转变，我跟我妹的关系更好了，另外持续好几个月的治疗跟每个月带她在深圳散散心，她的情绪也有了很大的改善。</p>
<h4 id="32-参与公益活动" class="headerLink">
    <a href="#32-%e5%8f%82%e4%b8%8e%e5%85%ac%e7%9b%8a%e6%b4%bb%e5%8a%a8" class="header-mark"></a>3.2. 参与公益活动</h4><p>因缘际会跟 <a href="https://twitter.com/Manjusaka_Lee" target="_blank" rel="noopener noreferrer">@Manjusaka_Lee</a> 以及另一位朋友聊到了公益，当时在工作上缺乏动力，想在其他的事情上找找感觉，公益本身也是一件很有意义的事情，那段时间学习了解了许多公益资料，参加了一些公益会展与捐款活动，还一度考虑做志愿者。</p>
<p>今年算是迈出了参与公益活动的第一步，这拓展了我的视野，让我更加了解了社会。
在学习了解公益期间也结识了一些志同道合的朋友，这也挺符合我去年给自己的期许——「认识更多有趣的人，见识下更宽广的世界」。</p>
<p>做事情，最难的就是从 0 到 1，因此今年的这一进展就显得尤为可贵，称得上是「优秀」。</p>
<h4 id="33-阅读与写作" class="headerLink">
    <a href="#33-%e9%98%85%e8%af%bb%e4%b8%8e%e5%86%99%e4%bd%9c" class="header-mark"></a>3.3. 阅读与写作</h4><p>首先是我 2023 年的读书记录：</p>
<ul>
<li>2023-03-09 - The Moon and Sixpence
<ul>
<li>你是要地上的六便士，还是要天上的月亮？</li>
</ul>
</li>
<li>2023-08-31 - <a href="http://www.paulgraham.com/greatwork.html" target="_blank" rel="noopener noreferrer">How to Do Great Work - Paul Graham</a>
<ul>
<li>黑客与画家一篇两万多字的长文，也算是一本小书了吧，干货满满。</li>
</ul>
</li>
<li>2023-09-29 - 《被讨厌的勇气》
<ul>
<li>一本通过对话的形式讲述阿勒德心理学的书，这门心理学与现代科学心理学不同，它更偏向哲学。</li>
</ul>
</li>
<li>2023-10-08 - 《叫魂：1768 年中国妖术大恐慌》
<ul>
<li>从 1768 年的叫魂案出发，分析了乾隆时期的中国社会的许多方面。比如因各种原因导致人口过度增长、人均资源减少、社会矛盾激化导致的普遍恐慌，以及官僚君主制的运作机制、存在的问题。此书以史为鉴，能帮助我们理解现代中国政治与中国社会的一些基本问题。</li>
</ul>
</li>
<li>2023-10-17 - 《分心不是我的错》
<ul>
<li>介绍 ADHD 的一本书，列举了很多 ADHD 案例，也给出了诊疗建议，对我相当有用！</li>
</ul>
</li>
</ul>
<p>以及一些未读完的书：</p>
<ul>
<li>《这才是心理学 - 看穿伪科学的批判性思维 第 11 版》</li>
<li>Psychology and Life, 20th edition, by Richard J. Gerrig</li>
<li>The Great Gatsby - 10/41</li>
<li>《复杂 - 梅拉尼 米歇尔》</li>
<li><a href="https://github.com/PacktPublishing/Linux-Device-Driver-Development-Second-Edition" target="_blank" rel="noopener noreferrer">Linux Device Driver Development - Second Edition</a>: Linux 驱动编程入门，2022 年出的新书，基于 Linux 5.10，amazon 上评价不错，目前只有英文版，写的很好，对新手很友好。</li>
</ul>
<p>2023 年我读的书籍数量不多，没达成每月读一本书的目标。
而写作方面，算上这篇总结，今年我一共写了 9 篇博文，也没达成每月写一篇的目标。</p>
<p>但鉴于我今年写了一本挺受欢迎的小书 <a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">NixOS &amp; Flakes Book</a>，它得到了 NixOS 社区诸多好评，还在 10 月份上了 Hacker News 热榜，甚至被官方文档 <a href="https://nix.dev/recommended-reading#other-articles" target="_blank" rel="noopener noreferrer">nix.dev</a> 列入推荐阅读，我姑且将今年「阅读与写作」这一项的评分定为「超出期待」！</p>
<h4 id="34-其他" class="headerLink">
    <a href="#34-%e5%85%b6%e4%bb%96" class="header-mark"></a>3.4. 其他</h4><ol>
<li>运动方面乏善可陈，穿越了一次东西冲海岸线，游了几次泳，12 月初晨跑了一周但因为是空腹跑，胃炎给跑犯了，就没再跑了。体重全年都在 60kg 波动，没啥变化。</li>
<li>给我老爸全款买了我们全家的第一辆小轿车（自己没买，一是天天坐地铁用不到，二是我对车也缺乏兴趣）。</li>
<li>计划开始给父母约年度体检，待实施。</li>
</ol>
<h4 id="35-总结" class="headerLink">
    <a href="#35-%e6%80%bb%e7%bb%93" class="header-mark"></a>3.5. 总结</h4><p>生活上今年达成了这么多有意义的成就（确诊 ADHD、将更多精力花在关心家人上、参与公益活动、给家里买车等等），我给自己的评价当然是「优秀」。</p>
<h3 id="4-各种站点的统计数据" class="headerLink">
    <a href="#4-%e5%90%84%e7%a7%8d%e7%ab%99%e7%82%b9%e7%9a%84%e7%bb%9f%e8%ae%a1%e6%95%b0%e6%8d%ae" class="header-mark"></a>4. 各种站点的统计数据</h3><p>首先是我的博客站点 <a href="https://thiscute.world/" target="_blank" rel="noopener noreferrer">https://thiscute.world/</a> 的统计数据：</p>
<p><figure><img src="/images/2023-summary/thiscute.world-2023-google-analytics-stats.webp" width="100%"/><figcaption>
            <h4>thiscute.world - 2023 年 Google Analytics 访问统计</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/thiscute.world-2023-google-analytics-stats-by-country.webp" width="100%"/><figcaption>
            <h4>thiscute.world - 2023 年 Google Analytics 访问统计 - 按国家分类</h4>
        </figcaption>
</figure>
</p>
<figure><img src="/images/2023-summary/thiscute.world-2023-google-search.webp" width="100%"/><figcaption>
            <h4>thiscute.world - 2023 年 Google Search 统计数据</h4>
        </figcaption>
</figure>

<p>另外是我今年 6 月份新建的 NixOS 笔记站点 <a href="https://nixos-and-flakes.thiscute.world" target="_blank" rel="noopener noreferrer">https://nixos-and-flakes.thiscute.world</a> 的统计数据（国外读者相当多，这跟 stars 以及收到的赞助情况也比较匹配）：</p>
<p><figure><img src="/images/2023-summary/nixos-and-flakes-2023-google-analytics-stats.webp" width="100%"/><figcaption>
            <h4>NixOS &amp; Flakes Book - 2023 年 Google Analytics 访问统计</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/nixos-and-flakes-2023-google-analytics-stats-by-country.webp" width="100%"/><figcaption>
            <h4>NixOS &amp; Flakes Book - 2023 年 Google Analytics 访问统计 - 按国家分类</h4>
        </figcaption>
</figure>
</p>
<figure><img src="/images/2023-summary/nixos-and-flakes-2023-google-search.webp" width="100%"/><figcaption>
            <h4>NixOS &amp; Flakes Book - 2023 年 Google Search 访问统计</h4>
        </figcaption>
</figure>

<p>以及两个站点全年在 Vercel 上的流量统计（感谢 Vercel 每个月的 100G 免费流量，目前看白嫖阶段流量还有挺大增长空间哈哈）：</p>
<figure><img src="/images/2023-summary/2023-12-31-vercel-bandwidth-stats.webp" width="100%"/><figcaption>
            <h4>Vercel - 2023 年流量统计</h4>
        </figcaption>
</figure>

<p>还有文章阅读排行统计：</p>
<figure><img src="/images/2023-summary/2023-top-posts-stats.webp" width="100%"/><figcaption>
            <h4>2023 年文章阅读排行</h4>
        </figcaption>
</figure>

<p>此外，我今年在 <a href="https://twitter.com/ryan4yin" target="_blank" rel="noopener noreferrer">Twitter(X)</a> 上比较活跃，也新增了不少粉丝：</p>
<figure><img src="/images/2023-summary/2023-twitter-stats.webp" width="100%"/><figcaption>
            <h4>2023 年 Twitter 统计数据</h4>
        </figcaption>
</figure>

<p>最后，是一些赞助平台上收到的零花钱统计：</p>
<p><figure><img src="/images/2023-summary/2023-buymeacoffee-earning.webp" width="100%"/><figcaption>
            <h4>2023 年 buymeacoffee 收入统计</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/2023-patreon-earning.webp" width="100%"/><figcaption>
            <h4>2023 年 patreon 收入统计</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/2023-afdian-earning.webp" width="100%"/><figcaption>
            <h4>2023 年爱发电收入统计</h4>
        </figcaption>
</figure>
</p>
<blockquote>
<p>另有加密货币 $50 没有好的统计页面，就不放截图了。以及部分国外读者希望使用我未使用的支付方式赞助，我比较懒没折腾了&hellip;</p>
</blockquote>
<h2 id="2024-年展望" class="headerLink">
    <a href="#2024-%e5%b9%b4%e5%b1%95%e6%9c%9b" class="header-mark"></a>2024 年展望</h2><p>我当下工作维持着不错的状态，业余兴趣不减，生活上也挺满意。
所以其实对明年反而没啥特别的期望，保持现在的状态就挺好的（这大概就是「现充」吧 emmm）</p>
<p>但总不能因为这个就摆烂，还是要给自己定一些目标，能否达成就看缘分了。</p>
<h3 id="1-业余技术-1" class="headerLink">
    <a href="#1-%e4%b8%9a%e4%bd%99%e6%8a%80%e6%9c%af-1" class="header-mark"></a>1. 业余技术</h3><p>遵循兴趣优先的原则，简单列一下：</p>
<ul>
<li>2023 年 AIGC 飞速发展，预期 2024 年很多新兴的 AIGC 技术将会落地到各种产品中，我也希望能玩一玩。不过貌似工作上就能玩得上，所以就不列在这里了 emmmm.</li>
<li>2023 年既然意外地点亮了 NixOS 跟 Neovim 这两项技能点，希望 2024 年能接着深入学习使用 NixOS 以及参与社区贡献。</li>
<li>操作系统（ARM64 + RISCV64）
<ul>
<li>2022 年看了一半《Linux/Unix 系统编程手册 - 上册》，2023 全年没动这本书，2024 年总该看完了吧&hellip;</li>
<li>MIT6.S081 Operating System Engineering (Fall 2020) 之前定了个目标学一遍但完全没开始，2024 年继续&hellip;</li>
</ul>
</li>
<li>（低优先级）2024 年有机会的话用 Rust 语言整点活</li>
<li>（低优先级）2024 年在 EE 与嵌入式方面，也希望能更深入些，设计一点自己的板子玩玩，做点有意思的东西，比如无人机啊、智能机械臂啊啥的。</li>
</ul>
<p>总结下主要就是三个学习目标：：<strong>搞搞 AIGC、学学操作系统、尝试更深入地使用 NixOS 以及参与社区贡献</strong>.</p>
<h3 id="2-业余生活" class="headerLink">
    <a href="#2-%e4%b8%9a%e4%bd%99%e7%94%9f%e6%b4%bb" class="header-mark"></a>2. 业余生活</h3><p>生活上，2024 年希望能：</p>
<ul>
<li>首先仍然是每年固定的目标：每月读一本书、写一篇博客。</li>
<li>新增的旅游目标：带家人至少出省旅游三次。</li>
<li>运动：2023 年意识到了身体健康的重要性，在 2024 年想多多运动，晨跑就是个不错的选择（但可别空腹晨跑，胃炎犯了很难受）。</li>
<li>学学心理学：要往「久病成医」的方向发展了 emmmm. 2024 年想入门个心理学，帮我更好地照顾自己、关心家人、处理人际关系。</li>
<li>音乐：今年买了个 Quest 3 VR 头显，它有个 AR 弹琴的游戏挺不错，希望 2023 年能借此学会些简单的钢琴曲。</li>
</ul>
<h3 id="3-工作" class="headerLink">
    <a href="#3-%e5%b7%a5%e4%bd%9c" class="header-mark"></a>3. 工作</h3><blockquote>
<p>这部分于 2024-01-13 新增</p>
</blockquote>
<p>其实全文写下来，基本完全没提到我 2023 年的主要工作。
主要还是因为前面提到的一些心态问题，以及工作部分相对而言没那么亮眼，所以没提。</p>
<p>但最近年终嘛，回顾了下我 2023 年下半年的工作，主要是在 infra 层面支撑 AIGC 团队，期间开开心心地折腾了挺多 Nvidia、PyTorch 之类的新鲜东西，也拿到了不错的成果。
另一方面又了解到工作上 2024 年我会与 AIGC 团队更深入地合作，更深入地折腾 AIGC、Nvidia 生态、Pytorch 相关的东西。
目前感觉还是挺有意思的，所以我工作上姑且也给自己定个目标吧：既学学新鲜热门的 AIGC 涨涨见识，又借此更好地支撑 AIGC 团队，Win Win!</p>
<h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>2022 年的年终总结文末，我给自己 2023 年的期许是「<strong>认识更多有趣的人，见识下更宽广的世界</strong>」，感觉确实应验了。
由衷感谢在 2023 年给我帮助与支持的亲人、朋友、同事，以及努力探索未知的我自己！</p>
<p>那么在 2024 年，我希望自己能够「<strong>工作与业余爱好上稳中求进，生活上锻炼好身体、多关心家人</strong>」~</p>
<blockquote>
<p>Carpe Diem. Seize The Day, Boys. Make Your Lives Extraordinary. &ndash; <a href="https://movie.douban.com/subject/1291548/" target="_blank" rel="noopener noreferrer">《死亡诗社》</a></p>
</blockquote>
<blockquote>
<p>文末推荐一个年终回顾与展望的帮助手册，感觉设计得很好：<a href="https://yearcompass.com/cn/" target="_blank" rel="noopener noreferrer">https://yearcompass.com/cn/</a></p>
</blockquote>
]]></content></entry><entry><title type="html">两岸猿声啼不住，轻舟已过万重山——我的四分之一人生</title><link href="https://thiscute.world/posts/a-quarter-of-the-way-through-life/"/><id>https://thiscute.world/posts/a-quarter-of-the-way-through-life/</id><author><name>ryan4yin</name></author><published>2023-08-19T18:00:45+08:00</published><updated>2023-08-19T18:00:45+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/a-quarter-of-the-way-through-life/2023-08-20_github-projects.webp" height="1661" width="536"><figcaption></figcaption>
        </figure><blockquote>
<p>本文稍有点长，推荐配合歌曲《夜空中最亮的星——逃跑计划》食用。我曾在无数个白天夜晚，听着这首歌，想着自己的人生，书写本文时也不例外。</p>
</blockquote>
<p>2023 年，按我能长命百岁来计算，我已经走过了四分之一的人生路。</p>
<p>如果要我用一句话总结我过去这四分之一的人生，我想用这句诗再合适不过了：</p>
<blockquote>
<p>两岸猿声啼不住，轻舟已过万重山。</p>
</blockquote>
<p>我想大部分人前四分之一的人生，主旋律都是求学，我也不例外。</p>
<p>我的求学之路并不顺利，小学初中时我不知道自己想要什么，高中时压力太大几乎退学，大学时我又因为自己的问题无法毕业。
但是在工作后我反而逐渐建立起了自信心，就像是突然进入了康庄大道。</p>
<p>最近我又经历了许多，受到了一些启发，觉得到了一个合适的时机，因此写下这篇文章，既是记录我的过去，也同时思考下未来的路该怎么走。</p>
<p>这篇文章主要是写给我自己看的，但如果也能带给你一些启发，那就再好不过了。</p>
<h2 id="我的高中" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e9%ab%98%e4%b8%ad" class="header-mark"></a>我的高中</h2><p>2015 年，我高三，那时候我是一个科幻迷，并且刚刚经历过一次退学风波。
为什么会闹出这样的事情？简单的说就是因为我抗压能力差，高三巨大的压力压得我喘不过气来，我想要逃避。</p>
<p>当时班主任找我谈话，怎么劝都劝不动我，劝不动他就开始骂，把我骂个狗血淋头，这一骂把我给骂醒了，我因此得以坚持到高考结束。
至今仍然相当感谢我的班主任王老师，他骂醒了我，让我不至于走上另一条更艰难的路。</p>
<p>但是即使如此，我还是没有任何动力去坚持备考。
当时整个班级的学习强度都越来越高，只有我仿佛活在另一个世界。
整个高三下学期，只有各种考试跟测验我会认真完成，其他时间我都在看各种与学习无关的书。</p>
<p>我读了很多的书。</p>
<p>我读刘慈欣的《三体》、山田正纪的《艾达》、保罗·巴奇加卢皮的《发条女孩》跟《拆船工》、以及《科幻世界》，
我读川端康成的《雪国》跟《千只鹤》、村上春树的《当我谈跑步时我谈些什么》，
读卡勒德·胡赛尼的《追风筝的人》、马尔克斯的《百年孤独》，
读江南的《龙族》、余秋雨的《中国戏剧史》。
因为压力太大，我甚至开始对哲学、禅宗感兴趣，我读了妙莉叶·芭贝里的《刺猬的优雅》、乔斯坦·贾德的《苏菲的世界》，我甚至开始读《心之道》、《学禅方便谭》、《新世界 : 灵性的觉醒》。</p>
<p>读了村上春树的《当我谈跑步时我谈些什么》后，我开始把跑步当成一种宣泄压力的方式，我经常晚自习时偷偷溜去操场跑步。
跑了五圈、十圈、二十圈，跑到感觉脚下力重千钧，呼吸火辣辣地痛，这些痛苦与不适，让我忘记了高考的压力。</p>
<p>我还喜欢上了看星星，经常在晚上熄灯后，偷偷爬上宿舍天台，用手机的《星图》APP，寻找各种星宿、寻找牛郎织女、北斗七星、大角星、看可见卫星过境。</p>
<p>我考的是理科，高考结束后，我拿网上的答案随便估了个分，尽量往低了估，算出二本都不够的。
但这也没啥，我自认只能做到这个程度，当时的想法就是尽人事，听天命。</p>
<p>然后是浑浑噩噩地等待高考成绩，中间也胡思乱想过一些要不要考虑复读的问题，但最终还是决定不复读了，因为我觉得我不可能再坚持一年了。</p>
<p>或许是因为我心态很平稳（心如死灰），考试时发挥得很好，成绩出来居然超过了一本线十多分。</p>
<p>之后就是填报志愿了，我不知道自己想学什么，可能是电子信息？毕竟我小时候挺喜欢捣鼓各种电子设备。</p>
<p>偶然想起在学校阅览室读杂志时，曾被<a href="https://read.douban.com/ebook/3088216/" target="_blank" rel="noopener noreferrer">科幻世界 2013 年 12 期</a>里沖氏武彦的《<strong>在回声中重历</strong>》给打动——用耳朵“看见”世界实在是太奇妙了，我当时痴痴地幻想了好几天。</p>
<p>这样我开始考虑选择声学。</p>
<p>我从高中同桌推荐的《刀剑神域》开始接触日本的 ACG 文化，后来接触到初音未来和洛天依，就对歌声合成(singing synthesis)产生了很大的兴趣，仔细一想发现这也应该是声学的范畴，这使我坚定了我选择声学的想法。</p>
<p>家里父母都没学问，他们的意见就是听我的，于是我的第一志愿就填了安徽建筑大学的声学专业。</p>
<p>声学是一个非常冷门的专业，我很顺利地被录取了。</p>
<p>就这样，我开始了我错位的大学生活，并为我自己草率的选择付出了巨大的代价。</p>
<h2 id="我的大学" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e5%a4%a7%e5%ad%a6" class="header-mark"></a>我的大学</h2><p>我凭着自己粗浅的想象与一时热血，填报了声学专业，但现实不同于想象，我发现我并不喜欢声学专业。</p>
<p>一开始，到新的学校，我接触到的一切都让我觉得自己就像是刘姥姥进大观园，处处都是新鲜事物——山里的孩子出来，第一次发现大家都只讲普通话，第一次见识到平原的广阔，第一次见识到城市的繁华，第一次见识到大学的自由。</p>
<p>但渐渐的问题就变得明显了，我发现学校教授的声学课程与我想象的完全不同，教的东西跟声学成像、声音合成几乎毫无关联，而且大学也并没有我想象的那般神圣无垢，它照样存在着各种各样的问题（比如一些形式主义、一些水课）。
另一方面我刚进大学时，为了弥补自己高三的遗憾，如同苦行僧一般的学习，而这种状态完全无法持续。</p>
<p>我很快就出了问题，这从我以前写过的文章中可见一斑：</p>
<ul>
<li><a href="https://thiscute.world/posts/reading-anxiety/" target="_blank" rel="noopener noreferrer">2017-03-07 - 我患上了阅读焦虑症</a></li>
<li><a href="https://thiscute.world/posts/the-holiday-is-coming-to-an-end/" target="_blank" rel="noopener noreferrer">2017-02-06 - 忽而假末</a></li>
</ul>
<p>另外大学期间我迷上了编程，开始自学各种编程技术，最开始是 C，后来有一次学校校友、在美国常春滕读天体物理学博士的<a href="https://github.com/jisuoqing" target="_blank" rel="noopener noreferrer">季索清学长</a>（现在已经是 Professor of Astrophysics 了）回校演讲，谈到了他们实验室现在都用 Python 了，Matlab 都没人用了，于是我开始学习 Python. 后来又跟着知乎上的推荐学习路线学习过 SICP、Linux C 编程等各种内容。</p>
<p>大学四年，学校对我帮助最大的，一是让我接触到了更大的世界，二是图书馆藏书丰富，尤其是计算机类书籍。四年时间我读了很多很多的书，学校的图书馆成了我最喜欢的地方。</p>
<p>但我始终无法平衡学业与编程，我开始彻底忽略学业。</p>
<p>问题愈演愈烈，大三时我尝试过申请休学，但是又被劝住了。
到大四临近毕业时，我心理问题已经相当严重。
尤其因为我性格还比较轴，觉得这个世界不应该是这样的，不想学的课程我一个字都不想看，相关的考试我要么缺考要么交白卷。</p>
<p>结果就是我完全无法毕业，觉得前途一片灰暗，见不到任何光亮，甚至感觉自己要得抑郁症，那是我这四分之一人生中最黑暗的时期。</p>
<p>某天跟在深圳工作的初中同学聊天，他说到深圳这方面的公司挺多的，建议我考虑下。</p>
<p>于是我买了张火车票直接就奔去了深圳，还写下了<a href="https://thiscute.world/posts/escape-my-university/" target="_blank" rel="noopener noreferrer">逃离我的大学</a>，现在回想起来，当时的想法大概是，「做什么都好，总之再也不想继续待在这个对我而言暗无天日的地方了。」</p>
<p>在学校的经历让我对学校产生了极大的反感，我拉黑了学校的所有联系方式。
这完全是我自己的问题，我的导员对我很好，我在学校也有过许多美好的回忆，但我就是心理上无法接受再跟这个地方有任何联系。</p>
<blockquote>
<p>工作后也有过很多朋友觉得我应该回去把学位拿了，每次我都会回答，如果能做到我也想，但我真的做不到，再在学校呆下去我真的要疯掉了。
至今我仍然觉得这是我当初做的最正确的决定。</p>
</blockquote>
<p>导员联系不上我，就让同学给我传话，又为我着想给我办理了延期，但后面的一年我也一门网课都没听过，又一年后，我的学历状态就变成了结业。</p>
<h2 id="我的打工人生活" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e6%89%93%e5%b7%a5%e4%ba%ba%e7%94%9f%e6%b4%bb" class="header-mark"></a>我的打工人生活</h2><p>我初中同学是读书不好的那种，高中就直接读了武术学校，在深圳教跆拳道。
我跟他一张床挤着睡了三天（很感谢他愿意为我做到这个程度），期间投了几十份简历。</p>
<p>我大学时自学涉猎过 Python Java Linux，因此后端、运维都有投，但只收到一家 Python 自动化运维的面试邀请，面试对我而言难度不高，很轻易就通过了，这家小创业公司也不看学历。
不知该说是运气好还是不好，我之后再也没收到过任何面试邀请。</p>
<p>就这样，我开始了我的打工人生活。</p>
<p>我在上大学时虽然自学了许多计算机与编程知识，但是那个时候全是我自己单干，现实中几乎没接触过其他做 IT 的人。
另一方面大学读得一团糟，因此刚工作时我相当不自信甚至可以说是自卑。
在工作后，我发现周围都是同样做技术的人，这种一起解决技术问题、完成技术目标的感觉是我从未体验过的，另一方面我的工作成果也获得了大家的认可，这让我在工作期间一直非常开心（虽然工资真的相当低，而且加班很严重。毕竟我没学历，当时能找到个工作都谢天谢地了）。</p>
<p>在这第一份正式工作期间，我学会了 Kubernetes、Istio、Docker、阿里云、Terraform/Pulumi、Argo Workflows 等云原生技术，Jenkins 等自动化运维技术，写了很多 Python 代码锻炼了自己的代码能力，还折腾了洋垃圾服务器、组装了公司办公电脑，工作能力也得到了领导同事的认可。</p>
<p>我很感谢这家公司，它是我 IT 生涯的起点，在这里我学到了令我足以在 IT 行业立足的技术，也建立起了技术自信。
但它给的工资实在太低了，还加班严重、画饼充饥，很多东西都不规范，处处透露着小作坊的气息，因此在工作了一年零八个月后，我决定离职。</p>
<p>离职后我休息了一个多月，给自己放了一个长假，期间也写了 <a href="https://thiscute.world/posts/end-of-the-first-round/" target="_blank" rel="noopener noreferrer">我在创业公司做技术一年多的一点体会</a> 跟 <a href="https://thiscute.world/posts/no-more-dreams/" target="_blank" rel="noopener noreferrer">脚踏实地，仰望星空</a>。
现在看来，当时这些文章也是写得纯真又幼稚。或许再过几年回头看，我会觉得现在这篇文章也纯真又幼稚？那就再好不过了——<strong>我对这个世界的认知又更正确了一点</strong>，我得以再次优化指导我行动的「<strong>人生模型</strong>」，避免在未来因此造成更大的问题（笑</p>
<p>之后我开始找工作。我当时很自信地（其实也有点忐忑）在简历上写下了「本人因学分不足，未能取得学位」，实话说，这句话帮我省去了不少无意义的沟通，大概 50% 的公司在确认了情况后会直接忽略我。
即使如此，我仍然拿到好几份 offer，也得以进入现在这家公司，职位是 SRE。</p>
<p>在新公司这几年的经历相当丰富，我简单总结如下：</p>
<ul>
<li>2021 年：
<ul>
<li>年初的期许：<strong>拆破玉笼飞彩凤，顿开金锁走蛟龙</strong>。</li>
<li>工作上我的工资相比之前翻了数倍，工作环境也好了太多。同事中不乏 985 211、海归甚至清北的大佬（同事的 title 可能代表不了什么，但这确实让我很有成就感），跟他们学到了许多东西，熟悉了全新的工作文化（OKR 等），接触到了拥有数千万日活、十多万 QPS 的云上系统架构，并且完成了其中核心组件 K8s 集群的运维升级工作，获得了许多牛逼同事与领导对我专业能力的认可。</li>
<li>业余生活上被同事带着第一次海边冲浪、烧烤，又开始玩轮滑，还学上了泡茶。</li>
<li><a href="https://thiscute.world/posts/2021-summary/" target="_blank" rel="noopener noreferrer">2021 年年终总结</a></li>
</ul>
</li>
<li>2022 年：
<ul>
<li>年初的期许：<strong>更上一层楼</strong></li>
<li>工作上一是通过了职级晋升，不再是 SRE 萌新了。二是在流量链路上做了很多工作，帮公司省了很多钱，还因此拿了一个 S（公司最高绩效），年终奖也很丰厚。</li>
<li>业余生活上做出了更多的探索，学了很多新技术，认识了很多有趣的人（0xffff 社区），还坚持学了好几个月的英语。</li>
<li><a href="https://thiscute.world/posts/2022-summary/" target="_blank" rel="noopener noreferrer">2022 年年终总结</a></li>
</ul>
</li>
<li>2023 年（虽然还没过完）：
<ul>
<li>年初的期许：<strong>认识更多有趣的人，见识下更宽广的世界</strong></li>
<li>今年在工作上没有做出很好的成绩，马马虎虎。我更多的把时间投入到了业余爱好上。</li>
<li>业余生活上，我又折腾了许多新技术（MCU 开发、各种 ARM/RISCV 开发板、Homelab、NixOS），并且因此认识了许多嵌入式领域的大佬。在折腾 NixOS 的过程中我做的开源项目、入门指南更是获得了国内外社区的大量好评，认识了好几位外国朋友，还收到了一些外国读者的打赏。这完全契合了我年初给自己的期许。</li>
<li><a href="https://www.zhihu.com/question/20870514/answer/3024654921" target="_blank" rel="noopener noreferrer">我今年写 NixOS 入门指南的经历</a></li>
</ul>
</li>
</ul>
<p>两份工作，四年多的时间，我的经历很难通过上面这只言片语就完全概括，中间当然也有过许多挣扎、迷茫、许多心酸苦辣。
但就得到的结果来说，在第一家公司我学到了很多很多，接着从进入新公司开始到现在，我每一年年初给自己的期许，也都能如约兑现。</p>
<p>现在，我相信在深圳这四年只是我上升期的第一步，这一步我完成了自信心的构建、眼界的开拓、基础技术能力的积累，也攒下了能让我衣食无忧好几年的少许财富（就在今天，还给我老爸全款买了我们全家的第一辆小轿车，全家都很开心）。
下一个四年或者五年，我一定能收获更多，就像几年前我第一份工作刚结束，好朋友 <a href="https://github.com/Likenttt" target="_blank" rel="noopener noreferrer">@Likenttt</a> 送我的诗一样：</p>
<blockquote>
<p><strong>拆破玉笼飞彩凤，顿开金锁走蛟龙</strong>。</p>
</blockquote>
<p>人生还很长，我想一个阶段的失败，可能只是在提前优化我对世界的认知，帮我提前发现并解决我「<strong>人生模型</strong>」中隐藏的问题，为下一个阶段的成功做铺垫。</p>
<h2 id="我的未来" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e6%9c%aa%e6%9d%a5" class="header-mark"></a>我的未来</h2><p>我过去的这四分之一人生，很难复刻，其中有太多的莽撞、理想主义让我饱尝苦果，其中的转折点也有许多运气与机遇的成分。
但我的未来正是构建在此之上。</p>
<p>有的人喜欢稳定，但当今大世，AI 飞速发展、中美摩擦不断、欧洲也各种难民、党争问题，全世界都在变化，真的有什么绝对稳定的东西可以依靠么？
世事无常，纷繁复杂，我能做的，是在接受这份无常的同时，仍然能维持自驱力，在这个世界中探索出自己的一片天地。</p>
<p>最近在<a href="https://zhuanlan.zhihu.com/p/557928933" target="_blank" rel="noopener noreferrer">苏洋的折腾群</a>，从大家的自我介绍里看到了形形色色的人生，年龄从 20+ 到 50+，学历从高中专科到博士，
职业从软硬件到电工、灯光师、全职公益人、见证纸媒体消亡的电脑报前编辑，生活地点也遍布全球。我甚至还发现最近跟我深入交流过 NixOS 相关技术问题的群友，在十多年前就做过我当时使用或者接触过的产品，而那个时候我还在上初中甚至小学，这让我感到十分震撼。
其中大部群友的年龄都比我大许多，他们的经历给了我很大的启发，让我意识到我往后 3/4 的人生还有很多的可能。</p>
<p>另外随着我近两年逐渐在自己的业余爱好上有所建树，我也越来越觉得工作作为养家糊口的手段，确实很重要，但它只是生活的一部分，在工作之外我还有许多可以做的事。</p>
<p>我一直在践行「兴趣是最好的老师」，虽然因为太过兴趣驱动以及一些其他原因导致我大学读得比较糟糕，但是能让我达成现在的成就的同样是兴趣，让我最近几个月接触 NixOS 并且获得了众多好评与感谢的同样是兴趣。
最近有推友分享了一篇很实用的长文 <a href="http://www.paulgraham.com/greatwork.html" target="_blank" rel="noopener noreferrer">How to Do Great Work - Paul Graham</a>（中译 <a href="https://mp.weixin.qq.com/s/31iL-Kbs4KrqpgrERVRNzQ" target="_blank" rel="noopener noreferrer">【实用指南】Paul Graham 两万字新文：如何取得杰出成就 </a>），我读了个开头，还没看完，但是发觉它很契合我，它与我的经历能相互印证，也对我未来的行动很有指导意义。
其中我目前读到印象最深刻的一句话就是：</p>
<blockquote>
<p>The three most powerful motives are curiosity, delight, and the desire to do something impressive. Sometimes they converge, and that combination is the most powerful of all.</p>
</blockquote>
<blockquote>
<p>三个最强大的内在动机是好奇心、快乐和做出令人印象深刻的事情的欲望，当它们汇聚在一起时，会成为最强大的组合。</p>
</blockquote>
<p>写这篇文章花了我一整天时间，第二天我又做了不少修修补补的工作。
写作时我回想了很多的东西，也翻阅了我自己过往的各种日记、随笔，往事历历在目。</p>
<p>我甚至有一点使命感，能感觉到这是一件相当有意义的事情。</p>
<p>文章写完后，我又反复读了好多遍，越读我越喜欢它，觉得它会成为我的一个人生里程碑。
这个里程碑不只有纪念意义，它更是对我未来方向的指引。迈过这个里程碑，我对仍旧未知的未来，有了更多的期待。</p>
<h2 id="后记" class="headerLink">
    <a href="#%e5%90%8e%e8%ae%b0" class="header-mark"></a>后记</h2><p>因着今天发现我认识的网友中就有人在深圳做了多年全职公益人，我想起了去年 8 月份看过的《在峡江的转弯处——陈行甲人生笔记》，作者现在也在深圳做公益。
我又把书翻出来略读了一遍，很有些感触。</p>
<p>偶尔回忆起自己当初的自卑、迷茫、挣扎，我会意识到现在的我虽然不再自卑，但仍然会迷茫、挣扎，怀疑自己的想法是否正确。
但我不觉得这是坏事，这正说明我走在了正确的路上。经常会有人说要「走出舒适区」，有这种迷茫、挣扎的感觉，说明我正在这么做。</p>
<p>正因为曾经经历过人生的灰暗时刻，所以我更希望自己能记住，这是一个可爱的世界，这正是我博客域名 <code>thiscute.world</code> 的由来，今后我也会牢记这一点。</p>
<blockquote>
<p>其实这段人生是最美好的，以后可能没有这么好的日子了。 —— v2ex 网友的评论，留做警示。最近几年过得一帆风顺，我确实是有点飘了，应该「居安思危」。</p>
</blockquote>
<p>文章的最后，我想我应该再次感谢，感谢这一路走来，帮助过我的老师、同学、朋友，认可我工作的同事跟领导，鼓励过我的家人、朋友、网友，感谢你们！
没有你们，我可能早就迷失了方向，更不会有现在的成绩了。</p>
<p>四年多前，我从学校不辞而别，我欠我的导员圆圆姐一个道歉，一份感谢，一个交代。这次，我也<del>会一并补上</del>已经补上了：</p>
<p><figure><img src="./to-yuanyuan.jpg" width="50%"/>
</figure>

<figure><img src="./reply-of-yuanyuan.jpg" width="50%"/>
</figure>
</p>
<p>人是社会性动物，我们互相成就。我今后也会争取交到更多有趣的朋友，认识更多有趣的人，见识这个宽广、可爱的世界。</p>
<h2 id="评论区" class="headerLink">
    <a href="#%e8%af%84%e8%ae%ba%e5%8c%ba" class="header-mark"></a>评论区</h2><p>我也在其他平台分享了这篇文章，其中评论有些不礼貌的 judge（直接无视掉就好，有的人这辈子也就剩这点东西了），但也不乏好的内容。
其中许多的留言相当治愈，让人心里暖暖的，有些留言让我会心一笑，这些内容都让我觉得，能够把文章分享到这些平台，让大家看到，真的是太好了！
在跟评论区一些朋友交流时，也碰撞出了许多思想的火花，这也让我相当开心。</p>
<p>为着让大家都能看到其中好的内容，我把它们都列在这里。</p>
<ul>
<li><a href="https://0xffff.one/d/1605-liang-an-yuan-sheng-ti-bu-zhu-qing" target="_blank" rel="noopener noreferrer">0xffff 社区</a>: 0xffff 评论区真的有很多真知灼见，强烈推荐一读！</li>
<li><a href="https://www.v2ex.com/t/966753" target="_blank" rel="noopener noreferrer">v2ex</a>: 有些很治愈的评论，也有个别不好的，我觉得这些评论都挺有意思。</li>
<li><a href="https://www.cnblogs.com/kirito-c/p/a-quarter-of-the-way-through-life.html" target="_blank" rel="noopener noreferrer">博客园</a></li>
</ul>
<blockquote>
<p>关于这些不好的评论（譬如 v2ex 上有人评论我是在「无病呻吟」，还挺多人点赞。另外 Twitter 上有人发推喷我「谁 TM 在意你的人生怎么样」，我觉得都挺好笑的），我想在这里为一些因此不快意的读者解释下。
我其实感觉到，在我自己的体系能够自洽后，看待这类评论时我更像是一个旁观者。我甚至完全不觉得这些评论冒犯了我（笑）。
这样的深入剖析自我的文章，肯定会刺痛到一些被生活磨去了棱角，迷失了自己的人。这种人别说跟我共情了，他们甚至下意识就要攻击我、反驳我。<br>
以前看过朋友推荐的一本小说，里面有一句话我印象很深刻：「正如纯氧对生物有害，毫无保留的真相，只会把人的精神击溃。一比<del>五</del>（四）的氧与氮，才是可供呼吸的空气。同样，呼吸着以戏言稀释的少量真实，人才能维持健全的心。」<br>
对这种被世界的真相击溃的人，我没啥好说的。以铜为镜，可以正衣冠；以人为镜，可以明得失。这些评论在警示我，不要成为这样的人，看清世界的真相后，仍要热爱生活。</p>
</blockquote>
<blockquote>
<p>如果说体系自洽有点不好懂，那我可以用个简单的类比来说明这一点：面对这种品头论足，我觉得我简直是在对牛弹琴。牛的哞哞叫会让我感到不开心么？我有必要跟牛解释我弹的曲子么？它听不懂关我何事？</p>
</blockquote>]]></content></entry><entry><title type="html">为什么我折腾这些小众技术？</title><link href="https://thiscute.world/posts/why-i-choose-niche-products/"/><id>https://thiscute.world/posts/why-i-choose-niche-products/</id><author><name>ryan4yin</name></author><published>2023-08-01T11:40:57+08:00</published><updated>2023-08-01T11:40:57+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/why-i-choose-niche-products/anime-girls-seagulls.webp" height="2428" width="1134"><figcaption></figcaption>
        </figure><p>我折腾过许多的小众技术，而今年新折腾的主要有 NixOS、窗口管理器 i3 / hyprland、以及 Neovim，其中 NixOS 我甚至折腾到了一个新境界——出了一本帮助新手入门的中英双语开源书籍 <a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">nixos-and-flakes-book</a>，还搞了好几个 NixOS 相关的开源项目（比如 <a href="https://github.com/ryan4yin/nix-darwin-kickstarter" target="_blank" rel="noopener noreferrer">nix-darwin-kickstarter</a> 跟 <a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config</a>），都收到了许多好评。</p>
<p>结合我自己折腾这些小众技术的经历，以及我经常被问到的问题（为什么你选择用 <a href="nixos.org/" rel="">NixOS</a> / <a href="https://github.com/Neovim/Neovim" target="_blank" rel="noopener noreferrer">Neovim</a> / <a href="https://flypy.com/" target="_blank" rel="noopener noreferrer">小鹤音形中文输入法</a>？它有什么好处？它真的能提升效率吗？等等），我想在这里简单谈谈我对它们的看法。</p>
<h2 id="什么是小众技术" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%b0%8f%e4%bc%97%e6%8a%80%e6%9c%af" class="header-mark"></a>什么是小众技术？</h2><p>小众，是相对于大众而言的。小众技术，指在该领域中用户占比较相对较小的技术。</p>
<p>基于这样的定义，我可以列举出我接触过的不同领域的一些小众技术：</p>
<table>
<thead>
<tr>
<th>领域</th>
<th>小众技术</th>
<th>大众技术</th>
</tr>
</thead>
<tbody>
<tr>
<td>编辑器</td>
<td>Neovim、Emacs</td>
<td>VSCode、PyCharm、IDEA</td>
</tr>
<tr>
<td>中文输入方案</td>
<td>双拼、小鹤音形、五笔、二笔、郑码、灵形速影</td>
<td>智能拼音</td>
</tr>
<tr>
<td>Linux 操作系统</td>
<td>NixOS、Gentoo、Arch Linux</td>
<td>Ubuntu、Fedora</td>
</tr>
<tr>
<td>窗口管理器</td>
<td>i3、hyprland</td>
<td>KDE、GNOME</td>
</tr>
</tbody>
</table>
<p>大多数人在使用这些领域的技术时，都会选择大众技术，因为它们的入门门槛低，使用起来也比较方便。
我曾经也是这大多数人之一，但是我渐渐发现，这些小众技术也有它们的优势，所以我开始尝试使用它们，并逐渐过渡到了它们。</p>
<h2 id="这些小众技术有什么特点" class="headerLink">
    <a href="#%e8%bf%99%e4%ba%9b%e5%b0%8f%e4%bc%97%e6%8a%80%e6%9c%af%e6%9c%89%e4%bb%80%e4%b9%88%e7%89%b9%e7%82%b9" class="header-mark"></a>这些小众技术有什么特点？</h2><p>小众技术显然得拥有一些优势，才能吸引到一部分用户，让这些用户选择它们而不是大众技术。</p>
<p>从我个人的使用经验来看，我用过的这些小众技术，具有一些比较明显的共同特征。</p>
<p>首先是它们共同的劣势：<strong>入门门槛更高，入门阶段需要花费更多的时间去学习、熟悉</strong>。</p>
<p>这就过滤掉了大部分用户，只有那些喜欢折腾、喜欢挑战的人才会去尝试这些小众技术。</p>
<p>比如说五笔输入法，它们的入门门槛很高，需要花费大量的时间去记忆它的键位编排、去练习，前期的输入体验会跌到谷底。
要想达到你曾经智能拼音的输入速度，感觉至少得每天练习 1 个小时，持续一个月（这很可能还不够）。</p>
<p>其他形码输入法也是一样，我用的小鹤音形算是一个折衷的选择，它的入门门槛比五笔低一些，学会后也能获得类似五笔的输入体验。</p>
<p>再说说它们共同的优势：</p>
<ol>
<li><strong>定制程度高</strong>：用户可以根据自己的需求，自由地定制各种功能。</li>
<li><strong>强烈的掌控感、绝佳的使用体验</strong>：高度的自定义，让用户感觉到自己在使用这些技术的过程中，能够完全掌控一切，从而带来绝佳的使用体验。</li>
<li><strong>用户黏性高、社区活跃</strong>：用户在使用这些技术的过程中，会不断地去探索、去学习、去定制，这会让用户对它们产生强烈的归属感。</li>
</ol>
<p>也因为上面这些原因，用户一旦成功入门某项小众技术（比如说形码输入法、Neovim/Emacs 编辑器），就很难再退回到曾经的大众方案——他们会发现曾经的大众方案用起来，各种不顺手、不爽快。</p>
<h2 id="我为什么折腾这些小众技术" class="headerLink">
    <a href="#%e6%88%91%e4%b8%ba%e4%bb%80%e4%b9%88%e6%8a%98%e8%85%be%e8%bf%99%e4%ba%9b%e5%b0%8f%e4%bc%97%e6%8a%80%e6%9c%af" class="header-mark"></a>我为什么折腾这些小众技术？</h2><p>我折腾过许多小众技术，而原因中最大的一部分，应该是好奇心。
但好奇心只能让我去尝试，让我留下来的，是它们优秀的使用体验。</p>
<p>比如说最近折腾的 Neovim 编辑器、Hyprland 窗口管理器，让我留下来继续使用它们的原因，一是 Neovim 跟 Hyprland 配置好了之后，真的很漂亮！而且 Neovim 速度真的超快、太快了！
一些从没深度体验过 Neovim 的 VSCode / IDEA 用户可能会觉得这种快不过如此，但是一旦你真的体验过，就会发现这种快真的很爽，就像流浪地球 2 中图恒宇的感叹一样（550W 太快了！这速度太快了！）</p>
<p>二是实际入门后，发现它们用起来很爽快，基于键盘的交互，能带给我形码输入法的那种掌控感、流畅感（优雅，太优雅了 hhh）。</p>
<p><figure><img src="./hyprland_2023-07-29_1.webp" width="85%"/><figcaption>
            <h4>我的 NixOS &#43; Hyprland 桌面</h4>
        </figcaption>
</figure>

<figure><img src="./hyprland_2023-07-29_2.webp" width="85%"/><figcaption>
            <h4>我的 Neovim 编辑器</h4>
        </figcaption>
</figure>
</p>
<p>而我折腾并且爱上 NixOS，也是基于类似的原因。
拥有声明式、可复现（一致的运行环境）、OS as Code 等这些特点的 NixOS，对于本运维狗而言，真就是理想中的样子，这让我迫不及待地想要使用它，即使发现了问题也希望能尽快完善它，使它能够适用于更多的场景。</p>
<blockquote>
<p>前两天在 4chan 上看到某外国网友的这么一段评论（虽然言词有点偏激，但我还真有点认同&hellip;）：
Completely and utterly unacceptable. Imagine having a tool that can&rsquo;t even properly undo an operation and then relying on it to manage an operating system.
<code>apt</code>, <code>pip</code>, <code>pm</code>, <code>rpm</code>, <code>pacman</code>, whatever are all a mad fucking joke.</p>
</blockquote>
<h2 id="小众工具或技术能提升效率吗" class="headerLink">
    <a href="#%e5%b0%8f%e4%bc%97%e5%b7%a5%e5%85%b7%e6%88%96%e6%8a%80%e6%9c%af%e8%83%bd%e6%8f%90%e5%8d%87%e6%95%88%e7%8e%87%e5%90%97" class="header-mark"></a>小众工具或技术能提升效率吗？</h2><p>有许多人说，Neovim 编辑器、i3 窗口管理器、形码输入法等这些小众工具或技术，能提升效率，我觉得这是一个误区。
相反，其中许多工具或技术，实际上是一个时间销金窟，你会被自己的兴趣驱使着去不断探索它们的边界、调整它的配置使其更契合自己的需求。
这导致至少前面较长一段上升期，这些投入的时间会比你效率提升所省下的时间多得多。</p>
<p>所以说到底，想用这些技术来提升效率啥的还是不用想了。
它能提升你的效率，但是比较有限，除非你写代码/文档的效率是受限于你的手速 emmm</p>
<blockquote>
<p>当然也有些特殊场景，比如说有的人需要经常输入些生僻字，这时候智能拼音就比较鸡肋了，五笔等形码输入法就确实能大大提升输入效率。</p>
</blockquote>
<p>或者有人会说，完全熟悉后，vim/emacs 能使你更容易进入心流状态？这个也很难说吧。</p>
<h2 id="那折腾这些东西到底有什么好处" class="headerLink">
    <a href="#%e9%82%a3%e6%8a%98%e8%85%be%e8%bf%99%e4%ba%9b%e4%b8%9c%e8%a5%bf%e5%88%b0%e5%ba%95%e6%9c%89%e4%bb%80%e4%b9%88%e5%a5%bd%e5%a4%84" class="header-mark"></a>那折腾这些东西，到底有什么好处？</h2><p>如果从很功利的角度看的话，确实就没啥好处，就跟打游戏一样，单纯在消遣时光而已。</p>
<figure><img src="./useless-work.jpg" width="35%"/>
</figure>

<p>要说跟做些无聊的事消遣时光有啥区别的话，大概就是还确实能获得点有用的东西。
比如我，遇到 AstroNvim 的 bug ，会提 PR 给上游仓库。发现 NixOS 的文档很糟糕，我直接自己写文档并分享出来。
发现 NixOS 缺少对我手头某块开发板的支持，我会自己尝试移植。
啥时候发现某工具缺少自己想要的功能，我也可能直接自己写一个。</p>
<p>这些折腾过程中获得的经验、创建的开源项目、在上游仓库中留下的 PR 、在社区中收获的感谢，感觉都是有价值的。
它不一定有啥业务价值，但是它好玩啊，还能交到朋友，帮到别人，在开源社区留下自己的痕迹，这不是很有意思么？</p>
<p>Linus 最开始写 Linux，也<a href="https://book.douban.com/subject/1451172/" target="_blank" rel="noopener noreferrer">只是为了好玩（Just For Fun）</a>.</p>
<h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>你展望人生的时候，不可能把这些点连起来；只有当你回顾人生的时候，才能发现它们之间的联系。所以你必须有信心，相信这些点总会以某种方式，对你的未来产生影响。你必须相信一些事情——你的勇气、命运、人生、缘分等等。这样做从未令我失望，反而决定了我人生中所有与众不同之处。</p>
<p>Stay Hungry. Stay Foolish.</p>
<p>—— <a href="https://news.stanford.edu/2005/06/12/youve-got-find-love-jobs-says/" target="_blank" rel="noopener noreferrer">You’ve got to find what you love, by Steve Jobs, CEO of Apple Computer</a></p>
<h2 id="评论区" class="headerLink">
    <a href="#%e8%af%84%e8%ae%ba%e5%8c%ba" class="header-mark"></a>评论区</h2><p>文末附上来自其他论坛的评论，其中不乏一些有趣的观点：</p>
<ul>
<li>0xffff.one: <a href="https://0xffff.one/d/1595-wei-shen-me-wo-zhe-teng-zhei-xie" target="_blank" rel="noopener noreferrer">https://0xffff.one/d/1595-wei-shen-me-wo-zhe-teng-zhei-xie</a></li>
<li>v2ex: <a href="https://www.v2ex.com/t/961562" target="_blank" rel="noopener noreferrer">https://www.v2ex.com/t/961562</a></li>
</ul>]]></content></entry><entry><title type="html">MacOS 窗口管理器 yabai 玩耍笔记</title><link href="https://thiscute.world/posts/macos-window-manager-yabai-usage/"/><id>https://thiscute.world/posts/macos-window-manager-yabai-usage/</id><author><name>ryan4yin</name></author><published>2023-05-22T12:24:57+08:00</published><updated>2023-05-22T12:24:57+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/macos-window-manager-yabai-usage/yabai.png" height="1280" width="640"><figcaption></figcaption>
        </figure><blockquote>
<p>2024-01-28 更新：换了新 Macbook Pro 之后，我又重新把 yabai 装上了，目前体验还不错，比 23 年好了不少。
另外我新的配置完全基于 nix-darwin 部署，内容也有些改动，有兴趣的可以看看：<a href="https://github.com/ryan4yin/nix-config/tree/main/modules/darwin/wm" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/darwin/wm</a>
附上 nix-darwin 新手起步模板 <a href="https://github.com/ryan4yin/nix-darwin-kickstarter" target="_blank" rel="noopener noreferrer">ryan4yin/nix-darwin-kickstarter</a></p>
</blockquote>
<p>在 Linux 上用了一段时间 i3wm 后，我就有点忍受不了工作电脑的桌面环境了，公司给配的是 Macbook Pro 2020，一番查找发现 yabai 比较符合我的需求，于是开始了折腾之旅。</p>
<h2 id="使用体验总结" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c%e6%80%bb%e7%bb%93" class="header-mark"></a>使用体验总结</h2><p>我的电脑配置为 Macbook Pro 2020，i5 + 16G RAM + 512G Disk，性能尚可。</p>
<p>一句话总结：体验还不错，但是还不太成熟，Bug 比较多，而且有点吃性能，安装 yabai 后偶尔就会卡顿一下。</p>
<p>自动分屏 + 快捷键自动调整窗口的体验还是很舒服的，劝退我的主要是如下这些问题：</p>
<ol>
<li>对有些软件，比如企业微信、微信、QQ，自动分屏功能不太行，会出现窗口错位。</li>
<li>如下两个问题逼着我一会儿进入全屏模式，一会儿又要退出全屏，简直离谱。
<ol>
<li>全屏下 Chrome 搜索框下方的提示栏被会 Chrome 本身遮挡，必须退出全屏功能才能看到。</li>
<li>非全屏下，Chrome 页面中的输入框「自动填充」功能会被 Chrome 遮挡，必须进入全屏模式才能看到&hellip;</li>
</ol>
</li>
<li>在右键修改 Firefox Bookmark 中标签时，弹出的修改菜单会被 Bookmark 收藏夹本身的弹窗遮挡，导致有些选项无法点击到。</li>
<li>开始使用 yabai 后，系统经常性地卡顿，或者风扇狂转，说明这玩意儿有点吃性能。</li>
</ol>
<h2 id="安装流程" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85%e6%b5%81%e7%a8%8b" class="header-mark"></a>安装流程</h2><p>首先参考这篇官方 Wiki <a href="https://github.com/koekeishiya/yabai/wiki/Disabling-System-Integrity-Protection" target="_blank" rel="noopener noreferrer">Disabling System Integrity Protection</a> 关闭 SIP，然后参照如下流程安装 yabai 与 skhd。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装yabai</span>
</span></span><span class="line"><span class="cl">brew install koekeishiya/formulae/yabai
</span></span><span class="line"><span class="cl">sudo yabai --install-sa
</span></span><span class="line"><span class="cl"><span class="c1"># 启动yabai 这时候需要授权辅助功能</span>
</span></span><span class="line"><span class="cl">brew services start yabai
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装skhd</span>
</span></span><span class="line"><span class="cl">brew install koekeishiya/formulae/skhd
</span></span><span class="line"><span class="cl"><span class="c1"># 启动skhd 这时候需要授权辅助功能</span>
</span></span><span class="line"><span class="cl">brew services start skhd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">########### 为 yabai 添加 sudo 权限 ###########</span>
</span></span><span class="line"><span class="cl">sudo yabai --load-sa
</span></span><span class="line"><span class="cl">sudo visudo -f /private/etc/sudoers.d/yabai
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 然后输入以下内容 其中 &lt;user&gt; 修改为当前 mac 的用户名</span>
</span></span><span class="line"><span class="cl"><span class="c1"># input the line below into the file you are editing.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  replace &lt;yabai&gt; with the path to the yabai binary (output of: which yabai).</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  replace &lt;user&gt; with your username (output of: whoami).</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  replace &lt;hash&gt; with the sha256 hash of the yabai binary (output of: shasum -a 256 $(which yabai)).</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   this hash must be updated manually after running brew upgrade.</span>
</span></span><span class="line"><span class="cl">&lt;user&gt; <span class="nv">ALL</span><span class="o">=(</span>root<span class="o">)</span> NOPASSWD: sha256:&lt;hash&gt; &lt;yabai&gt; --load-sa
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面就完成了安装流程，但是到这里还不能使用，还需要为 skhd 与 yabai 添加配置文件，并添加自定义配置。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 创建yabai配置文件</span>
</span></span><span class="line"><span class="cl">touch ~/.yabairc
</span></span><span class="line"><span class="cl">chmod +x ~/.yabairc
</span></span><span class="line"><span class="cl"><span class="c1"># 创建skhd配置文件</span>
</span></span><span class="line"><span class="cl">touch ~/.skhdrc
</span></span><span class="line"><span class="cl">chmod +x ~/.skhdrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 之后在 ~/.yabairc 中添加以下命令</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF &gt; ~/.yabairc
</span></span></span><span class="line"><span class="cl"><span class="s">#!/usr/bin/env sh
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s"># wiki 要求在配置最前面加这个，看起来是跟 sudo 权限相关的东西
</span></span></span><span class="line"><span class="cl"><span class="s">sudo yabai --load-sa
</span></span></span><span class="line"><span class="cl"><span class="s">yabai -m signal --add event=dock_did_restart action=&#34;sudo yabai --load-sa&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="自定义-skhd-与-yabai-配置" class="headerLink">
    <a href="#%e8%87%aa%e5%ae%9a%e4%b9%89-skhd-%e4%b8%8e-yabai-%e9%85%8d%e7%bd%ae" class="header-mark"></a>自定义 skhd 与 yabai 配置</h2><p>这里配置的目标是，尽量与 i3wm 的默认快捷键保持一致，因为我在家用的是 Linux，只有办公电脑是 Mac.</p>
<p>我目前的 <code>~/.yabairc</code>，它用于配置 yabai 的各种行为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># wiki 要求在配置最前面加这个，看起来是跟 sudo 权限相关的东西</span>
</span></span><span class="line"><span class="cl">sudo yabai --load-sa
</span></span><span class="line"><span class="cl">yabai -m signal --add <span class="nv">event</span><span class="o">=</span>dock_did_restart <span class="nv">action</span><span class="o">=</span><span class="s2">&#34;sudo yabai --load-sa&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 输出 debug 日志，出问题时方便排查</span>
</span></span><span class="line"><span class="cl">yabai -m config debug_output on
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 窗口平铺</span>
</span></span><span class="line"><span class="cl">yabai -m space --layout bsp
</span></span><span class="line"><span class="cl"><span class="c1"># 默认拆分规则 first_child second_child</span>
</span></span><span class="line"><span class="cl">yabai -m config window_placement             second_child
</span></span><span class="line"><span class="cl"><span class="c1"># 窗口间距设置</span>
</span></span><span class="line"><span class="cl">yabai -m config top_padding                  <span class="m">10</span>
</span></span><span class="line"><span class="cl">yabai -m config bottom_padding               <span class="m">10</span>
</span></span><span class="line"><span class="cl">yabai -m config left_padding                 <span class="m">10</span>
</span></span><span class="line"><span class="cl">yabai -m config right_padding                <span class="m">10</span>
</span></span><span class="line"><span class="cl">yabai -m config window_gap                   <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 自动平衡所有窗口始终占据相同的空间</span>
</span></span><span class="line"><span class="cl">yabai -m config auto_balance                 off
</span></span><span class="line"><span class="cl"><span class="c1"># 如果禁用自动平衡，此项属性定义的是新窗口占用的空间量。0.5意为旧窗口占用50%</span>
</span></span><span class="line"><span class="cl">yabai -m config split_ratio                 0.50
</span></span><span class="line"><span class="cl"><span class="c1"># 鼠标修饰键 意思就是按着这个键就可以使用鼠标单独修改窗口大小了</span>
</span></span><span class="line"><span class="cl">yabai -m config mouse_modifier ctrl
</span></span><span class="line"><span class="cl"><span class="c1"># ctrl + 鼠标左键 移动窗口</span>
</span></span><span class="line"><span class="cl">yabai -m config mouse_action1 move
</span></span><span class="line"><span class="cl"><span class="c1"># ctrl + 鼠标右键 调整窗口大小</span>
</span></span><span class="line"><span class="cl">yabai -m config mouse_action2 resize
</span></span><span class="line"><span class="cl"><span class="c1"># 焦点跟随鼠标 默认off: 关闭  autoraise:自动提升 autofocus: 自动对焦</span>
</span></span><span class="line"><span class="cl">yabai -m config focus_follows_mouse          autofocus
</span></span><span class="line"><span class="cl"><span class="c1"># 设置鼠标是否跟随当前活动窗口 默认 off: 关闭 on: 开启</span>
</span></span><span class="line"><span class="cl">yabai -m config mouse_follows_focus          on
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 浮动窗口问题在顶部</span>
</span></span><span class="line"><span class="cl">yabai -m config window_topmost               on
</span></span><span class="line"><span class="cl"><span class="c1"># 修改窗口阴影 on: 打开 off: 关闭 float: 只显示浮动窗口的阴影</span>
</span></span><span class="line"><span class="cl">yabai -m config window_shadow                float
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 窗口透明度设置</span>
</span></span><span class="line"><span class="cl">yabai -m config window_opacity               on
</span></span><span class="line"><span class="cl"><span class="c1"># 配置活动窗口不透明度</span>
</span></span><span class="line"><span class="cl">yabai -m config active_window_opacity        0.98
</span></span><span class="line"><span class="cl">yabai -m config normal_window_opacity        0.9
</span></span><span class="line"><span class="cl">yabai -m config window_opacity_duration      0.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在所有显示器上的每个空间顶部添加 0 填充 底部添加 0 填充</span>
</span></span><span class="line"><span class="cl">yabai -m config external_bar all:0:0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ================================ 规则 ================================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 打开系统偏好设置，不使用平铺模式</span>
</span></span><span class="line"><span class="cl">yabai -m rule --add <span class="nv">app</span><span class="o">=</span><span class="s2">&#34;^系统偏好设置</span>$<span class="s2">&#34;</span> <span class="nv">manage</span><span class="o">=</span>off
</span></span><span class="line"><span class="cl">yabai -m rule --add <span class="nv">app</span><span class="o">=</span><span class="s2">&#34;^提醒事项</span>$<span class="s2">&#34;</span> <span class="nv">manage</span><span class="o">=</span>off
</span></span><span class="line"><span class="cl">yabai -m rule --add <span class="nv">app</span><span class="o">=</span><span class="s2">&#34;^关于本机</span>$<span class="s2">&#34;</span> <span class="nv">manage</span><span class="o">=</span>off
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;yabai configuration loaded..&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再就是 <code>~/.skhdrc</code>，它负责配置各种快捷键，如下是我的配置:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 配置语法 : &lt;modifier&gt; - &lt;key&gt; : &lt;command&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># modifier 可以是单个键比如 cmd, alt, ctrl, 也可以是组合键比如  ctrl + shift, ctrl + alt</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ================================ 打开终端 ================================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 启动终端</span>
</span></span><span class="line"><span class="cl">cmd - <span class="k">return</span> : open -a iTerm
</span></span><span class="line"><span class="cl"><span class="c1"># 关闭当前窗口，这个不需要加，macOS 默认是 cmd + q，我 Linux 也这么设置的</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ================================ 窗口设置 ================================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =============== 为了避免快捷键冲突改用了 ctrl 作为 modifier =================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ctrl + e 切换为平铺模式</span>
</span></span><span class="line"><span class="cl">ctrl - e : yabai -m space --layout bsp
</span></span><span class="line"><span class="cl"><span class="c1"># ctrl + s 切换为堆叠模式</span>
</span></span><span class="line"><span class="cl">ctrl - s : yabai -m space --layout stack
</span></span><span class="line"><span class="cl"><span class="c1"># 浮动/不浮动窗口 float</span>
</span></span><span class="line"><span class="cl">ctrl - f : yabai -m window --toggle float
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ================================ 多桌面配置  ================================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 创建一个新桌面，并把当前活动的窗口发送到新桌面，并且自动跳转到新桌面. 需要 jq 支持 brew install jq</span>
</span></span><span class="line"><span class="cl"><span class="nb">shift</span> + cmd - n : yabai -m space --create <span class="o">&amp;&amp;</span> <span class="nv">index</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>yabai -m query --spaces --display <span class="p">|</span> jq <span class="s1">&#39;.| length&#39;</span><span class="k">)</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> yabai -m window --space <span class="s2">&#34;</span><span class="si">${</span><span class="nv">index</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> yabai -m space --focus <span class="s2">&#34;</span><span class="si">${</span><span class="nv">index</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> yabai -m space --layout bsp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在 stack 模式下通过方向键切换窗口</span>
</span></span><span class="line"><span class="cl">ctrl - down : yabai -m window --focus stack.next <span class="o">||</span> yabai -m window --focus south
</span></span><span class="line"><span class="cl">ctrl - up : yabai -m window --focus stack.prev <span class="o">||</span> yabai -m window --focus north
</span></span><span class="line"><span class="cl"><span class="c1"># 在 bsp 模式下通过方向键切换窗口</span>
</span></span><span class="line"><span class="cl">cmd - left : yabai -m window --focus west
</span></span><span class="line"><span class="cl">cmd - right : yabai -m window --focus east
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在 9 个桌面之间切换</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">1</span> : yabai -m space --focus <span class="m">1</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">2</span> : yabai -m space --focus <span class="m">2</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">3</span> : yabai -m space --focus <span class="m">3</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">4</span> : yabai -m space --focus <span class="m">4</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">5</span> : yabai -m space --focus <span class="m">5</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">6</span> : yabai -m space --focus <span class="m">6</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">7</span> : yabai -m space --focus <span class="m">7</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">8</span> : yabai -m space --focus <span class="m">8</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">9</span> : yabai -m space --focus <span class="m">9</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将窗口发送到某个其他桌面</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">1</span> : yabai -m window --space <span class="m">1</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">2</span> : yabai -m window --space <span class="m">2</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">3</span> : yabai -m window --space <span class="m">3</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">4</span> : yabai -m window --space <span class="m">4</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">5</span> : yabai -m window --space <span class="m">5</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">6</span> : yabai -m window --space <span class="m">6</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">7</span> : yabai -m window --space <span class="m">7</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">8</span> : yabai -m window --space <span class="m">8</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">9</span> : yabai -m window --space <span class="m">9</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置加好后重启 yabai 与 skhd:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">brew services restart yabai
</span></span><span class="line"><span class="cl">brew services restart skhd
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在就可以随便打开几个程序试试，正常情况下 yabai 会自动帮你分屏。
再尝试下添加好的这些快捷键，看看是否生效。</p>
<h2 id="问题排查" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98%e6%8e%92%e6%9f%a5" class="header-mark"></a>问题排查</h2><h3 id="1-yabai" class="headerLink">
    <a href="#1-yabai" class="header-mark"></a>1. yabai</h3><p>如果 yabai 配置没有生效，有可能是权限问题，可以试下这个命令重启 yabai:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo yabai --uninstall-sa<span class="p">;</span> sudo yabai --load-sa<span class="p">;</span> brew services restart yabai
</span></span></code></pre></td></tr></table>
</div>
</div><p>其他问题可查看 yabai 的日志解决：</p>
<ul>
<li>错误日志路径: /usr/local/var/log/yabai/yabai.err.log</li>
<li>普通日志路径: /usr/local/var/log/yabai/yabai.out.log</li>
</ul>
<h3 id="2-skhd" class="headerLink">
    <a href="#2-skhd" class="header-mark"></a>2. skhd</h3><p>如果 skhd 配置没有生效，首先可以查看 skhd 的日志:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat /usr/local/var/log/skhd/*.log
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果日志文件不存在，可以停止 skhd 服务并手动启动它，看看是否有输出报错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">brew services stop skhd
</span></span><span class="line"><span class="cl">skhd -c ~/.skhdrc
</span></span></code></pre></td></tr></table>
</div>
</div><p>比如我之前改错了配置，执行上述命令就会报错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#27:7 expected modifier
</span></span></code></pre></td></tr></table>
</div>
</div><p>提示我配置的第 27 行配置有问题，我就去看了下，发现是我把 <code>cmd - return</code> 写成了 <code>cmd + return</code>，改正后再 <code>brew services start skhd</code> 重启 skhd 就好了。</p>
<h2 id="堆叠模式下的可视化" class="headerLink">
    <a href="#%e5%a0%86%e5%8f%a0%e6%a8%a1%e5%bc%8f%e4%b8%8b%e7%9a%84%e5%8f%af%e8%a7%86%e5%8c%96" class="header-mark"></a>堆叠模式下的可视化</h2><p>yabai 在堆叠模式下的可视化效果不是很好，可以使用 <a href="https://github.com/AdamWagner/stackline" target="_blank" rel="noopener noreferrer">stackline</a> 来改善一下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># stackline 依赖 hammerspoon，这是一个 macOS 桌面自动化工具</span>
</span></span><span class="line"><span class="cl">brew install hammerspoon --cask
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 现在将 stackline 安装到 hammerspoon 的配置目录中</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/AdamWagner/stackline.git ~/.hammerspoon/stackline
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Make stackline run when hammerspoon launches</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/.hammerspoon
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;stackline = require &#34;stackline&#34;&#39;</span> &gt;&gt; init.lua
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;stackline:init()&#39;</span> &gt;&gt; init.lua
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在还需要安装下 hammerspoon 的命令行工具 hs，它用于在脚本中执行 stackline 操作，安装方法如下：</p>
<ol>
<li>首先搜索打开 Hamerspoon 程序，或者使用命令 <code>open -a &quot;Hammerspoon&quot;</code>
<ol>
<li>这里启动时会申请权限，需要手动打开下</li>
<li>同时注意勾选登录时自动启动</li>
</ol>
</li>
<li>在下方的命令输出栏中键入 <code>hs.ipc.cliInstall()</code> 再回车，即可完成安装</li>
</ol>
<p>现在确认下 hs 命令已经可用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">which hs
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用时的常见问题与解决方法" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e6%97%b6%e7%9a%84%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e4%b8%8e%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95" class="header-mark"></a>使用时的常见问题与解决方法</h2><ol>
<li>Chrome/WeChat 等程序的弹窗无法显示: 尝试下进入全屏或者退出全屏，总有一种场景下可以显示弹窗&hellip;</li>
<li>&hellip;</li>
</ol>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://vccv.cc/article/mac-tiling-yabai.html" target="_blank" rel="noopener noreferrer">mac 下的平铺桌面 yabai 使用 - 月青悠</a></li>
<li><a href="https://gist.github.com/Krever/74d43fa38c57c42c355df55faa0a00ee" target="_blank" rel="noopener noreferrer">Yabai setup for i3wm users - Krever</a></li>
</ul>
]]></content></entry><entry><title type="html">NixOS 与 Nix Flakes 新手入门</title><link href="https://thiscute.world/posts/nixos-and-flake-basics/"/><id>https://thiscute.world/posts/nixos-and-flake-basics/</id><author><name>ryan4yin</name></author><published>2023-05-04T15:19:28+08:00</published><updated>2023-06-21T16:16:00+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/nixos-and-flake-basics/nixos-and-flakes-book.webp" height="2219" width="800"><figcaption></figcaption>
        </figure><p>随着文章的更新，文章内容逐渐增多，为了方便阅读，文章内容已经迁移到单独的站点:</p>
<ul>
<li>文档站: <a href="https://nixos-and-flakes.thiscute.world/zh/" target="_blank" rel="noopener noreferrer">https://nixos-and-flakes.thiscute.world/zh/</a></li>
<li>GitHub: <a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">https://github.com/ryan4yin/nixos-and-flakes-book</a></li>
</ul>
<p>非常感谢 <a href="https://www.reddit.com/r/NixOS/comments/14fvz1q/comment/jp4xhj3/?context=3" target="_blank" rel="noopener noreferrer">Reddit</a>、文章评论区、<a href="https://www.v2ex.com/t/951190#reply9" target="_blank" rel="noopener noreferrer">V2EX</a> 以及 <a href="https://0xffff.one/d/1521-nixos-yu-nix-flakes-xin-shou-ru-men/4" target="_blank" rel="noopener noreferrer">0xffff.one</a> 等平台上各位朋友的反馈、批评与建议 ❤️</p>
]]></content></entry><entry><title type="html">Linux 上的 WireGuard 网络分析（一）</title><link href="https://thiscute.world/posts/wireguard-on-linux/"/><id>https://thiscute.world/posts/wireguard-on-linux/</id><author><name>ryan4yin</name></author><published>2023-03-28T22:19:25+08:00</published><updated>2023-03-28T22:19:25+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/wireguard-on-linux/wireguard.png" height="1280" width="500"><figcaption></figcaption>
        </figure><blockquote>
<p>阅读此文章需要前置知识：Linux 网络基础知识、iptables、conntrack</p>
</blockquote>
<blockquote>
<p>本文内容部分采用了 Copilot 提示内容，也有部分内容用了 ChatGPT 免费版进行分析，确实都比较有帮助。</p>
</blockquote>
<p>最近因为工作需要研究了一波 WireGuard 协议，在这篇文章中简单记录下心得。</p>
<h2 id="wireguard-是什么" class="headerLink">
    <a href="#wireguard-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>WireGuard 是什么</h2><p>WireGuard 是极简主义思想下的 VPN 实现，解决了很多现存 VPN 协议存在的问题。
它于 2015 年由 Jason A. Donenfeld 设计实现，因其代码实现简洁易懂、配置简单、性能高、安全强度高而受到广泛关注。</p>
<p>WireGuard 在 2020 年初进入 Linux 主线分支，随后成为 Linux 5.6 的一个内核模块，这之后很快就涌现出许多基于 WireGuard 的开源项目与相关企业，各大老牌 VPN 服务商也逐渐开始支持 WireGuard 协议，很多企业也使用它来组建企业 VPN 网络。</p>
<p>基于 WireGuard 的明星开源项目举例：</p>
<ul>
<li><a href="https://github.com/tailscale/tailscale" target="_blank" rel="noopener noreferrer">tailscale</a>: 一套简单易用的 WireGuard VPN 私有网络解决方案，强烈推荐！</li>
<li><a href="https://github.com/juanfont/headscale" target="_blank" rel="noopener noreferrer">headscale</a>: tailscale 控制服务器的开源实现，使你可以自建 tailscale 服务。</li>
<li><a href="https://github.com/squat/kilo" target="_blank" rel="noopener noreferrer">kilo</a>: 基于 WireGuard 的 Kubernetes 多云网络解决方案。</li>
<li>&hellip;</li>
<li>除了上面这些，还有很多其他 WireGuard 项目，有兴趣可以去 <a href="https://github.com/cedrickchee/awesome-wireguard" target="_blank" rel="noopener noreferrer">awesome-wireguard</a> 仓库看看。</li>
</ul>
<p>WireGuard 本身只是一个点对点隧道协议，只提供点对点通信的能力（这也是其极简主义思想的体现）。而其他网络路由、NAT 穿越、DNS 解析、防火墙策略等功能都是基于 Linux 系统的现有工具来实现的。</p>
<p>在这篇文章里，我将搭建一个简单的单服务器 + 单客户端 WireGuard 网络，然后分析它如何使用 Linux 系统现有的工具，在 WireGuard 隧道上搭建出一个安全可靠的虚拟网络。</p>
<p>文章测试用到的服务器与客户端均为虚拟机，使用 Ubuntu 20.04 系统，内核版本为 5.15，也就是说都包含了 wireguard 内核模块。</p>
<h2 id="wireguard-服务端网络分析" class="headerLink">
    <a href="#wireguard-%e6%9c%8d%e5%8a%a1%e7%ab%af%e7%bd%91%e7%bb%9c%e5%88%86%e6%9e%90" class="header-mark"></a>WireGuard 服务端网络分析</h2><p>简单起见，这里使用 docker-compose 启动一个 WireGuard 服务端，使用的镜像是 <a href="https://github.com/linuxserver/docker-wireguard" target="_blank" rel="noopener noreferrer">linuxserver/docker-wireguard</a>。</p>
<p>配置文件如下，内容完全参考自此镜像的官方 README：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2.1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">wireguard</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">lscr.io/linuxserver/wireguard:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">wireguard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cap_add</span><span class="p">:</span><span class="w">           
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">NET_ADMIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SYS_MODULE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=Etc/UTC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SERVERURL=auto  </span><span class="w"> </span><span class="c"># 自动确定服务器的外部 IP 地址，在生成客户端配置时会用到</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SERVERPORT=51820</span><span class="w"> </span><span class="c"># 服务端监听的端口号</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PEERS=1         </span><span class="w"> </span><span class="c"># 自动生成 1 个客户端配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PEERDNS=auto    </span><span class="w"> </span><span class="c"># 自动确定客户端的 DNS 服务器地址，同样是在生成客户端配置时会用到</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">INTERNAL_SUBNET=10.13.13.0   </span><span class="w"> </span><span class="c"># WireGuard 虚拟网络的网段</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ALLOWEDIPS=0.0.0.0/0         </span><span class="w"> </span><span class="c"># 这条规则表示允许虚拟网络内的所有客户端将流量发送到此节点</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 众所周知，NAT 网络需要定期发送心跳包来保持 NAT 表内容不过期，俗称连接保活。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 这里设置为 all 表示所有客户端都开启连接保活。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PERSISTENTKEEPALIVE_PEERS=all </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">LOG_CONFS=true</span><span class="w"> </span><span class="c"># 开启日志</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./config:/config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/lib/modules:/lib/modules</span><span class="w"> </span><span class="c"># 将宿主机的内核模块挂载到容器内，用于加载 WireGuard 内核模块</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">51820</span><span class="p">:</span><span class="m">51820</span><span class="l">/udp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sysctls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">net.ipv4.conf.all.src_valid_mark=1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>将上面的配置文件保存为 <code>docker-compose.yml</code>，然后通过如下命令后台启动 WireGuard 服务端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker-compose up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>WireGuard 服务端启动好了，现在查看下服务端容器的日志（我加了详细注释说明）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ docker logs wireguard
</span></span><span class="line"><span class="cl"><span class="c1"># ...省略若干内容</span>
</span></span><span class="line"><span class="cl">.:53                          <span class="c1"># 这几行日志是启动 CoreDNS，为虚拟网络提供默认的 DNS 服务</span>
</span></span><span class="line"><span class="cl">CoreDNS-1.10.1                <span class="c1"># 实际上 CoreDNS 不是必须的，客户端可以改用其他 DNS 服务器</span>
</span></span><span class="line"><span class="cl">linux/amd64, go1.20, 055b2c3
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link add wg0 type wireguard   # 创建一个 wireguard 设备</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] wg setconf wg0 /dev/fd/63        # 设置 wireguard 设备的配置</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 address add 10.13.13.1 dev wg0   # 为 wireguard 设备添加一个 ip 地址</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link set mtu 1420 up dev wg0        # 设置 wireguard 设备的 mtu</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 route add 10.13.13.2/32 dev wg0  # 为 wireguard peer1 添加路由，其地址来自 wireguard 配置的 `allowedIPs` 参数</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 下面这几条 iptables 命令为 wireguard 设备添加 NAT 规则，使其成为 WireGuard 虚拟网络的默认网关</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 并使虚拟网络内的其他 peers 能通过此默认网关访问外部网络。</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ls.io-init<span class="o">]</span> <span class="k">done</span>.
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过日志能看到，程序首先创建了 WireGuard 设备 wg0 并绑定了地址 <code>10.13.13.1</code>。作为 WireGuard 网络中的服务端，它所创建的这个 wg0 的任务是成为整个 WireGuard 虚拟网络的默认网关，处理来自虚拟网络内的其他 peers 的流量，构成一个星型网络。</p>
<p>然后服务端为它所生成的 peer1 添加了一个路由，使得 peer1 的流量能够被正确路由到 wg0 设备上。</p>
<p>最后为了让 WireGuard 虚拟网络内的其他 peers 的流量能够通过 wg0 设备访问外部网络或者互相访问，服务端为 wg0 设备添加了如下的 iptables 规则：</p>
<ul>
<li><code>iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT;</code>：允许进出 wg0 设备的数据包通过 netfilter 的 FORWARD 链（默认规则是 DROP，即默认是不允许通过的）</li>
<li><code>iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE</code>：在 eth+ 网卡上添加 MASQUERADE 规则，即将数据包的源地址伪装成 eth+ 网卡的地址，目的是为了允许 wireguard 的数据包通过 NAT 访问外部网络。
<ul>
<li>而回来的流量会被 NAT 的 conntrack 链接追踪规则自动允许通过，不过 conntrack 表有自动清理机制，长时间没流量的话会被从 conntrack 表中移除。这就是前面 <code>docker-compose.yml</code> 中的 <code>PERSISTENTKEEPALIVE_PEERS=all</code> 参数解决的问题通过定期发送心跳包来保持 conntrack 表中的连接信息。</li>
<li>这里还涉及到了 NAT 穿越相关内容，就不多展开了，感兴趣的可以自行了解。</li>
</ul>
</li>
</ul>
<p>WireGuard 的实现中还有一个比较重要的概念叫做 <code>AllowedIPs</code>，它是一个 IP 地址列表，表示允许哪些 IP 地址的流量通过 WireGuard 虚拟网络。
为了详细说明这一点，我们先看下服务端配置文件夹中 wg0 的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat wg0.conf
</span></span><span class="line"><span class="cl"><span class="o">[</span>Interface<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Address</span> <span class="o">=</span> 10.13.13.1
</span></span><span class="line"><span class="cl"><span class="nv">ListenPort</span> <span class="o">=</span> <span class="m">51820</span>
</span></span><span class="line"><span class="cl"><span class="nv">PrivateKey</span> <span class="o">=</span> kGZzt/CU2MVgq19ffXB2YMDSr6WIhlkdlL1MOeGH700<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1"># wg0 隧道启动后添加 iptables 规则</span>
</span></span><span class="line"><span class="cl"><span class="nv">PostUp</span> <span class="o">=</span> iptables -A FORWARD -i %i -j ACCEPT<span class="p">;</span> iptables -A FORWARD -o %i -j ACCEPT<span class="p">;</span> iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE
</span></span><span class="line"><span class="cl"><span class="c1"># wg0 隧道停止后删除前面添加的 iptables 规则</span>
</span></span><span class="line"><span class="cl"><span class="nv">PostDown</span> <span class="o">=</span> iptables -D FORWARD -i %i -j ACCEPT<span class="p">;</span> iptables -D FORWARD -o %i -j ACCEPT<span class="p">;</span> iptables -t nat -D POSTROUTING -o eth+ -j MASQUERADE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Peer<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># peer1</span>
</span></span><span class="line"><span class="cl"><span class="nv">PublicKey</span> <span class="o">=</span> HR8Kp3xWIt2rNdS3aaCk+Ss7yQqC9cn6h3WS6UK3WE0<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">PresharedKey</span> <span class="o">=</span> 7mCNCZdMKeRz1Zrpl9bFS08jJAdv6/USazRVq7tjznY<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1"># AllowedIPs 设置为 peer1 的虚拟 IP 地址，表示允许 peer1 的流量通过 WireGuard 虚拟网络</span>
</span></span><span class="line"><span class="cl"><span class="nv">AllowedIPs</span> <span class="o">=</span> 10.13.13.2/32
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>AllowedIPs</code> 实际就是每个 peer 在服务端路由表中的 ip 地址，它既可以是 ip 也可以是网段，而且能设置多个，这使所有 peer 都可以负责一个甚至多个 ip 段的转发，也就是充当局域网的路由器——VPN 子路由。</p>
<p>WireGuard 本身只是一个点对点隧道协议，它非常通用。通过 <code>AllowedIPs</code> 参数，我们就能在每个 peer 上添加各 peers 的配置与不同的路由规则，构建出各种复杂的网络拓扑，比如星型、环型、树型等等。</p>
<h2 id="wireguard-客户端网络分析" class="headerLink">
    <a href="#wireguard-%e5%ae%a2%e6%88%b7%e7%ab%af%e7%bd%91%e7%bb%9c%e5%88%86%e6%9e%90" class="header-mark"></a>WireGuard 客户端网络分析</h2><p>现在换台虚拟机跑 WireGuard 客户端，首先需要安装 wireguard 命令行工具：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install wireguard resolvconf
</span></span></code></pre></td></tr></table>
</div>
</div><p>第二步是从服务端的配置文件夹中找到 <code>peer1/peer1.conf</code>，它是服务端容器根据参数 <code>PEERS=1</code> 自动生成的客户端配置文件，先确认下它的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> ./config/peer1
</span></span><span class="line"><span class="cl">$ cat peer1.conf
</span></span><span class="line"><span class="cl"><span class="o">[</span>Interface<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Address</span> <span class="o">=</span> 10.13.13.2
</span></span><span class="line"><span class="cl"><span class="nv">PrivateKey</span> <span class="o">=</span> +GLDb5QQOHQ2QKWvuFS/4FiWpnivaxzwlm0QmFJIHV8<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">ListenPort</span> <span class="o">=</span> <span class="m">51820</span>
</span></span><span class="line"><span class="cl"><span class="nv">DNS</span> <span class="o">=</span> 10.13.13.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Peer<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">PublicKey</span> <span class="o">=</span> <span class="nv">t95vF4b11RLCId3ArVVIJoC5Ih9CNbI0VTNuDuEzZyw</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">PresharedKey</span> <span class="o">=</span> 7mCNCZdMKeRz1Zrpl9bFS08jJAdv6/USazRVq7tjznY<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 需要注意的是这个 Peer Endpoint 的 IP 是否正确</span>
</span></span><span class="line"><span class="cl"><span class="nv">Endpoint</span> <span class="o">=</span> 192.168.5.198:51820
</span></span><span class="line"><span class="cl"><span class="nv">AllowedIPs</span> <span class="o">=</span> 0.0.0.0/0
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>插入下，这个 Endpoint 的地址也很值得一说，能看到服务端 wg0.conf 的配置中，peer1 并未被设置任何 Endpoint，这实质是表示这个 peer1 的 Endpoint 是动态的，也就是说每次 peer1 发送数据到服务端 wg0 时，服务端通过认证加密技术认证了数据后，就会以数据包的来源 IP 地址作为 peer1 的 Endpoint，这样 peer1 就可以随意更换自己的 IP 地址（Roaming），而 WireGuard 隧道仍然能正常工作（IP 频繁更换的一个典型场景就是手机的网络漫游与 WiFi 切换）。这使 WireGuard 具备了比较明显的无连接特性，也就是说 WireGuard 隧道不需要保持一个什么连接，切换网络也不需要重连，只要数据包能够到达服务端，就能够正常工作。</p>
</blockquote>
<p>因为我这里是内网环境测试，配置文件中的 <code>Peer</code> - <code>Endpoint</code> 的 IP 地址直接用服务端的内网 IP 地址就行，也就是 <code>192.168.5.198</code>。</p>
<blockquote>
<p>如果你的服务端有公网 IP 地址（比如是云服务器，或者通过端口映射用家庭宽带的动态公网 IP），这个 Endpoint 地址也可以使用该公网 IP 地址，效果是一样的。</p>
</blockquote>
<p>配置文件确认无误后，将该配置文件保存到客户端的 <code>/etc/wireguard/peer1.conf</code> 这个路径下，然后使用如下命令启动 WireGuard 客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo wg-quick up peer1
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述命令会自动在 <code>/etc/wireguard/</code> 目录下找到名为 <code>peer1.conf</code> 的配置文件，然后根据其内容启动一个名为 <code>peer1</code> 的 WireGuard 设备并完成对应配置。</p>
<p>我启动时的日志如下，wg-quick 打印出了它执行的所有网络相关指令（我添加了详细的注释）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo wg-quick up peer1
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link add peer1 type wireguard        # 创建一个名为 peer1 的 WireGuard 设备</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] wg setconf peer1 /dev/fd/63             # 设置 peer1 设备的配置</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 address add 10.13.13.2 dev peer1  # 设置 peer1 设备的 IP 地址</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link set mtu 1420 up dev peer1       # 设置 peer1 设备的 MTU</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] resolvconf -a tun.peer1 -m 0 -x  # 设置 peer1 设备的 DNS，确保 DNS 能够正常工作</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] wg set peer1 fwmark 51820        # 将 peer1 设备的防火墙标记设为 51820，用于标记 WireGuard 出站流量</span>
</span></span><span class="line"><span class="cl">                                     <span class="c1"># 在后面的路由策略中会使用该标记使 WireGuard 出站流量走默认路由表</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 route add 0.0.0.0/0 dev peer1 table 51820     # 创建单独的路由表 51820，默认将所有流量转发到 peer1 接口</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 rule add not fwmark 51820 table 51820         # 所有不带 51820 标记的流量（普通流量），都转发到前面新建的路由表 51820</span>
</span></span><span class="line"><span class="cl">                                                        <span class="c1"># 也就是所有普通流量都转发到 peer1 接口</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 rule add table main suppress_prefixlength 0   # 流量全都走 main 路由表（即默认路由表），但是排除掉前缀长度（掩码） &lt;= 0 的流量</span>
</span></span><span class="line"><span class="cl">                                                        <span class="c1"># 掩码 &lt;= 0 的只有 0.0.0.0/0，即默认路由。所以意思是所有非默认路由策略的流量都走 main 路由表</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] sysctl -q net.ipv4.conf.all.src_valid_mark=1        # 启用源地址有效性检查，用于防止伪造源地址</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] nft -f /dev/fd/63                                   # 配置 nftables 规则，用于确保 WireGuard 流量能正确路由，并防止恶意数据包进入网络</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>跑完后我们现在确认下状态，应该是能正常走 WireGuard 访问相关网络了，可以 WireShark 抓个包确认下。</p>
<blockquote>
<p>如果网络不通，那肯定是中间哪一步配置有问题，可以根据上面的日志一步步排查网络接口、路由表、路由策略、iptables/nftables 的配置，必要时可以通过 WireShark 抓包定位。</p>
</blockquote>
<p>现在再检查下系统的网络状态，首先检查下路由表，会发现路由表没任何变化：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ip route ls
</span></span><span class="line"><span class="cl">default via 192.168.5.201 dev eth0 proto static 
</span></span><span class="line"><span class="cl">192.168.5.0/24 dev eth0 proto kernel scope link src 192.168.5.197 
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是我们的 WireGuard 隧道已经生效了，这就说明现在我们的流量已经不是直接走上面这个默认路由表了，还有其他配置在起作用。
往回看看前面的客户端启动日志，其中显示 wg-quick 创建了一个名为 51820 的路由表，我们来检查下这个表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ryan@ubuntu-2004-builder:~$ ip route ls table <span class="m">51820</span>
</span></span><span class="line"><span class="cl">default dev peer1 scope link
</span></span></code></pre></td></tr></table>
</div>
</div><p>能看到这个表确实是将所有流量都转发到了 WireGuard 的 peer1 接口，基本能确认现在流量都走了这个路由表。
那么问题来了，系统的流量是如何被转发到这个路由表的呢？为什么默认的路由表现在不生效了？</p>
<p>要理清这个问题，需要补充点知识——Linux 从 2.2 开始支持了多路由表，并通过路由策略数据库来为每个数据包选择正确的路由表，这个路由策略数据库可以通过 <code>ip rule</code> 命令来查看、修改。</p>
<p>前置知识补充完毕，现在来看下系统当前的路由策略，同样我已经补充好了注释：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ip rule show
</span></span><span class="line"><span class="cl">0:      from all lookup <span class="nb">local</span>   <span class="c1"># 0 是最高优先级，`all` 表示所有流量，`lookup local` 表示查找 local 路由表。</span>
</span></span><span class="line"><span class="cl">                                <span class="c1"># local 是一个特殊路由表，包含对本地和广播地址的优先级控制路由。</span>
</span></span><span class="line"><span class="cl">32764:  from all lookup main suppress_prefixlength <span class="m">0</span>  <span class="c1"># 32764 目前是第二优先级，将所有流量路由到 main 路由表，但是排除掉默认路由（前缀/掩码 &lt;= 0）</span>
</span></span><span class="line"><span class="cl">                                                      <span class="c1"># 功能是让所有非默认路由的流量都走 main 路由表</span>
</span></span><span class="line"><span class="cl">                                                      <span class="c1"># 这条规则前面实际解释过了，它是 wg-quick 在启动隧道时添加的规则。</span>
</span></span><span class="line"><span class="cl">32765:  not from all fwmark 0xca6c lookup <span class="m">51820</span> <span class="c1"># 所有不带 0xca6c 标记（51820 的 16 进制格式）的流量（普通流量），都走 51820 路由表</span>
</span></span><span class="line"><span class="cl">                                                <span class="c1"># 也就是都转发到 WireGuard peer1 接口。</span>
</span></span><span class="line"><span class="cl">                                                <span class="c1"># 这条规则是前面的 `ip -4 rule add not fwmark 51820 table 51820` 命令添加的。</span>
</span></span><span class="line"><span class="cl">                                                <span class="c1"># 而它所匹配的防火墙标记则是由前面的 `wg set peer1 fwmark 51820` 命令设置的。</span>
</span></span><span class="line"><span class="cl">32766:  from all lookup main    <span class="c1"># 所有流量都走 main 路由表，当前是不生效状态，因为前面的规则优先级更高。</span>
</span></span><span class="line"><span class="cl">                                <span class="c1"># main 是系统的默认路由表，通常我们使用 ip route 命令都是在这个表上操作。</span>
</span></span><span class="line"><span class="cl">32767:  from all lookup default <span class="c1"># 所有流量都走 default 路由表，当前同样是不生效状态。</span>
</span></span><span class="line"><span class="cl">                                <span class="c1"># default 是一个系统生成的兜底路由表，默认不包含任何路由规则，可用于自定义路由策略，也可删除。</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>结合注释看完上面的路由策略，现在你应该理清楚 WireGuard 的路由规则了，它加了条比默认路由策略 <code>32766</code> 优先级更高的路由策略 <code>32765</code>，将所有普通流量都通过它的自定义路由表路由到 peer1 接口。
另一方面 peer1 接口在前面已经被打了 fwmark 标记 <code>51820</code> 也就是 16 进制的 0xca6c，所以 peer1 出站到服务端的流量不会被 <code>32765</code> 匹配到，所以会走优先级更低的 <code>32766</code> 策略，也就是走了 main 路由表。</p>
<p>另外 <code>32764</code> 这条路由策略有点特殊，这里也简单解释下，此策略在前面注释中已经做了解释——是让所有非默认路由的流量都走 main 路由表，而 main 路由表中的非默认路由一般都是其他程序自动管理添加的，或者是我们手动添加的，所以这条规则其实就是确保这些路由策略仍然有效，避免 WireGuard 策略把它们覆盖掉而导致问题。</p>
<p>前面都分析完了，现在还剩下 wg-quick 日志的最后一行 <code>nft -f /dev/fd/63</code>，它到底做了什么呢？
nft 是 nftables 的命令行工具名称，所以它实际是设置了一些 nftables 规则，我们查看下它的规则内容：</p>
<blockquote>
<p>注意：nftables 的这些 chain 名称是完全自定义的，没啥特殊意义</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo nft list ruleset
</span></span><span class="line"><span class="cl">table ip wg-quick-peer1 <span class="o">{</span>
</span></span><span class="line"><span class="cl">        chain preraw <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">type</span> filter hook prerouting priority raw<span class="p">;</span> policy accept<span class="p">;</span>
</span></span><span class="line"><span class="cl">                iifname !<span class="o">=</span> <span class="s2">&#34;peer1&#34;</span> ip daddr 10.13.13.2 fib saddr <span class="nb">type</span> !<span class="o">=</span> <span class="nb">local</span> drop
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        chain premangle <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">type</span> filter hook prerouting priority mangle<span class="p">;</span> policy accept<span class="p">;</span>
</span></span><span class="line"><span class="cl">                meta l4proto udp meta mark <span class="nb">set</span> ct mark
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        chain postmangle <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">type</span> filter hook postrouting priority mangle<span class="p">;</span> policy accept<span class="p">;</span>
</span></span><span class="line"><span class="cl">                meta l4proto udp meta mark 0x0000ca6c ct mark <span class="nb">set</span> meta mark
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到这里是创建了一个 <code>wg-quick-peer1</code> 表，通过该表在 netfilter 上设置了如下规则：</p>
<ol>
<li><code>preraw</code> 链：此链用于防止恶意数据包进入网络。
<ol>
<li>type 开头的一行是规则的类型，这里是 <code>filter</code>，仅匹配了 <code>raw</code> 链的 <code>prerouting</code> 表。</li>
<li>它丢弃掉所有来源接口不是 peer1、目的地址是 10.13.13.2、且源地址不是本地地址的数据包。</li>
<li>总结下就是只允许本地地址或者 peer1 直接访问 10.13.13.2 这个地址。</li>
</ol>
</li>
<li><code>premangle</code> 链：此链用于确保所有 UDP 数据包都能被正确从 WireGuard 接口入站。
<ol>
<li>它将所有 UDP 数据包的标记设置为连接跟踪标记（没搞懂这个标记是如何生效的&hellip;.）。</li>
</ol>
</li>
<li><code>postmangle</code> 链：此链用于确保所有 UDP 数据包都能被正确从 WireGuard 接口出站。
<ol>
<li>它将所有 UDP 数据包的标记设置为 0xca6c（51820 的 16 进制格式）（同样没理解这个标记是如何生效的&hellip;）。</li>
</ol>
</li>
</ol>
<p>最后看下 WireGuard 的状态，它是前面 <code>wg setconf peer1 /dev/fd/63</code> 设置的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ryan@ubuntu-2004-builder:~$ sudo wg show 
</span></span><span class="line"><span class="cl">interface: peer1
</span></span><span class="line"><span class="cl">  public key: HR8Kp3xWIt2rNdS3aaCk+Ss7yQqC9cn6h3WS6UK3WE0<span class="o">=</span>
</span></span><span class="line"><span class="cl">  private key: <span class="o">(</span>hidden<span class="o">)</span>
</span></span><span class="line"><span class="cl">  listening port: <span class="m">51820</span>
</span></span><span class="line"><span class="cl">  fwmark: 0xca6c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">peer: <span class="nv">t95vF4b11RLCId3ArVVIJoC5Ih9CNbI0VTNuDuEzZyw</span><span class="o">=</span>
</span></span><span class="line"><span class="cl">  preshared key: <span class="o">(</span>hidden<span class="o">)</span>
</span></span><span class="line"><span class="cl">  endpoint: 192.168.5.198:51820
</span></span><span class="line"><span class="cl">  allowed ips: 0.0.0.0/0
</span></span><span class="line"><span class="cl">  latest handshake: <span class="m">18</span> minutes, <span class="m">59</span> seconds ago
</span></span><span class="line"><span class="cl">  transfer: <span class="m">124</span> B received, <span class="m">324</span> B sent
</span></span></code></pre></td></tr></table>
</div>
</div><p>分析完毕，现在关闭掉 WireGuard 客户端，将客户端主机的网络恢复到正常状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo wg-quick down peer1
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 rule delete table 51820</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 rule delete table main suppress_prefixlength 0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link delete dev peer1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] resolvconf -d tun.peer1 -f</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] nft -f /dev/fd/63</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>一通分析，你是否感觉到了 wg-quick 的实现十分巧妙，通过简单几行 iptables/nftables 与 iproute2 命令就在 WireGuard 隧道上实现了一个 VPN 网络，更妙的是只要把新增的这些 iptables/nftables 与 iproute2 规则删除，就能恢复到 WireGuard 未启动的状态，相当于整个工作是完全可逆的（显然前面的 <code>sudo wg-quick down peer1</code> 就是这么干的）。</p>
<p>总之这篇文章简单分析了 wireguard 虚拟网络在 Linux 上的实现，希望对你有所帮助。</p>
<p>下一篇文章（如果有的话&hellip;），我会带来更多的 WireGuard 实现细节，敬请期待。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://www.wireguard.com/protocol/" target="_blank" rel="noopener noreferrer">wireguard protocol</a>： 官方文档还有官方的白皮书，都写得很清晰易懂。</li>
<li><a href="https://zhuanlan.zhihu.com/p/404402933" target="_blank" rel="noopener noreferrer">WireGuard到底好在哪？</a>: 比较深入浅出的随想，值得一读。</li>
<li><a href="https://ro-che.info/articles/2021-02-27-linux-routing" target="_blank" rel="noopener noreferrer">Understanding modern Linux routing (and wg-quick)</a>: 对 WireGuard 客户端用到的多路由表与路由策略技术做了详细的介绍。
<ul>
<li>它的中文翻译：<a href="https://icloudnative.io/posts/linux-routing-of-wireguard/" target="_blank" rel="noopener noreferrer">WireGuard 基础教程：wg-quick 路由策略解读 - 米开朗基扬</a></li>
</ul>
</li>
</ul>
]]></content></entry><entry><title type="html">EE 入门（二） - 使用 ESP32 与 SPI 显示屏绘图、显示图片、跑贪吃蛇</title><link href="https://thiscute.world/posts/ee-basics-2-esp32-display/"/><id>https://thiscute.world/posts/ee-basics-2-esp32-display/</id><author><name>ryan4yin</name></author><published>2023-03-05T21:57:01+08:00</published><updated>2023-03-05T21:57:01+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/ee-basics-2-esp32-display/tft_esp32_show_image-2.webp" height="1333" width="1000"><figcaption></figcaption>
        </figure><h2 id="零硬件准备与依赖库调研" class="headerLink">
    <a href="#%e9%9b%b6%e7%a1%ac%e4%bb%b6%e5%87%86%e5%a4%87%e4%b8%8e%e4%be%9d%e8%b5%96%e5%ba%93%e8%b0%83%e7%a0%94" class="header-mark"></a>零、硬件准备与依赖库调研</h2><p>之前淘货买了挺多显示屏的，本文使用的是这一块：</p>
<ul>
<li><a href="http://www.lcdwiki.com/3.5inch_SPI_Module_ILI9488_SKU:MSP3520" target="_blank" rel="noopener noreferrer">3.5 寸电阻触摸屏，480 * 320，SPI 协议，显示屏驱动 IC 为 ILI9488</a></li>
</ul>
<p>开发板是 ESP-WROOM-32 模组开发板。
其他需要的东西：杜邦线、面包板、四个 10 K$\Omega$ 电阻、四个按键。</p>
<p>至于需要的依赖库，我找到如下几个 stars 数较高的支持 ILI9488 + ESP32 的显示屏驱动库：</p>
<ul>
<li><a href="https://github.com/Bodmer/TFT_eSPI" target="_blank" rel="noopener noreferrer">Bodmer/TFT_eSPI</a>: 一个基于 Arudino 框架的 tft 显示屏驱动，支持 STM32/ESP32 等多种芯片。</li>
<li><a href="https://github.com/lvgl/lv_port_esp32" target="_blank" rel="noopener noreferrer">lv_port_esp32</a>: lvgl 官方提供的 esp32 port，但是几百年不更新了，目前仅支持到 esp-idf v4，试用了一波被坑了，不建议使用。</li>
<li><a href="https://github.com/espressif/esp-idf/tree/master/examples/peripherals/lcd" target="_blank" rel="noopener noreferrer">esp-idf/peripherals/lcd</a>: ESP 官方的 lcd 示例，不过仅支持部分常见显示屏驱动，比如我这里用的 ili9488 官方就没有。</li>
</ul>
<p>总之强烈推荐 TFT_eSPI 这个库，很好用，而且驱动支持很齐全。</p>
<h2 id="一开发环境搭建电路搭建与测试" class="headerLink">
    <a href="#%e4%b8%80%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba%e7%94%b5%e8%b7%af%e6%90%ad%e5%bb%ba%e4%b8%8e%e6%b5%8b%e8%af%95" class="header-mark"></a>一、开发环境搭建、电路搭建与测试</h2><h3 id="1-创建项目并配置好环境" class="headerLink">
    <a href="#1-%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae%e5%b9%b6%e9%85%8d%e7%bd%ae%e5%a5%bd%e7%8e%af%e5%a2%83" class="header-mark"></a>1. 创建项目并配置好环境</h3><p>ESP32 开发有好几种方式：</p>
<ol>
<li>vscode 的 esp-idf 插件 + 官方的 esp-idf 工具</li>
<li>vscode 的 platformio 插件 + arudino 框架</li>
</ol>
<p><a href="https://github.com/Bodmer/TFT_eSPI" target="_blank" rel="noopener noreferrer">Bodmer/TFT_eSPI</a> 这个依赖库两种方式都支持，不过看了下官方文档，仓库作者表示 ESP-IDF 的支持是其他人提供的，他不保证能用，所以稳妥起见我选择了 PlatformIO + Arduino 框架作为开发环境。</p>
<p>首先当然是创建一个空项目，点击 VSCode 侧栏的 PlatformIO 图标，再点击列表中的 <code>PlatformIO Core CLI</code> 选项进入 shell 执行如下命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pio project init --ide<span class="o">=</span>vscode -d tft_esp32_arduino
</span></span></code></pre></td></tr></table>
</div>
</div><p>这条命令会创建一个空项目，并配置好 vscode 插件相关配置，这样就算完成了一个空的项目框架。</p>
<h3 id="1-显示屏接线与项目参数配置" class="headerLink">
    <a href="#1-%e6%98%be%e7%a4%ba%e5%b1%8f%e6%8e%a5%e7%ba%bf%e4%b8%8e%e9%a1%b9%e7%9b%ae%e5%8f%82%e6%95%b0%e9%85%8d%e7%bd%ae" class="header-mark"></a>1. 显示屏接线与项目参数配置</h3><p>网上简单搜了下 ESP32 pinout，找到这张图，引脚定义与我的 ESP32 开发板完全一致，用做接线参考：</p>
<figure><img src="/images/ee-basics-2-esp32-display/ESP32-DOIT-DEVKIT-V1-Board-Pinout-36-GPIOs-updated.webp" width="70%"/>
</figure>

<p>可以看到这块 ESP32 开发板有两个 SPI 端口：HSPI 跟 VSPI，这里我们使用 HSPI，那么 MOSI/MISO/SCK 三个引脚的接线必须与上图的定义完全一致。
而其他引脚随便找个普通 GPIO 口接上就行。</p>
<p>此外背光灯的线我试了下接 GPIO 口不好使，建议直接接在 3V3 引脚上（缺点就是没法通过程序关闭背光，问题不大）。</p>
<p>我的接线如下：</p>
<p><figure><img src="/images/ee-basics-2-esp32-display/esp32-spi-display-wiring.webp" width="70%"/><figcaption>
            <h4>使用 wokwi.com 制作的示意图</h4>
        </figcaption>
</figure>

<figure><img src="/images/ee-basics-2-esp32-display/esp32-spi-display-wiring-real.webp" width="70%"/><figcaption>
            <h4>接线实操</h4>
        </figcaption>
</figure>
</p>
<p>线接好后需要更新下 PlatformIO 项目根目录 <code>platformio.ini</code> 的配置，使其显示屏引脚相关的参数与我们的接线完全对应起来，这样才能正常驱动这个显示屏。</p>
<p>这里我以驱动库官方提供的模板 <a href="https://github.com/Bodmer/TFT_eSPI/tree/master/docs/PlatformIO" target="_blank" rel="noopener noreferrer">Bodmer/TFT_eSPI/docs/PlatformIO</a> 为基础，更新了其构建参数对应的引脚，加了点注释，得到的内容如下（如果你的接线与我一致，直接抄就行）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[env:esp32dev]</span>
</span></span><span class="line"><span class="cl"><span class="na">platform</span> <span class="o">=</span> <span class="s">espressif32</span>
</span></span><span class="line"><span class="cl"><span class="na">board</span> <span class="o">=</span> <span class="s">esp32dev</span>
</span></span><span class="line"><span class="cl"><span class="na">framework</span> <span class="o">=</span> <span class="s">arduino</span>
</span></span><span class="line"><span class="cl"><span class="na">lib_deps</span> <span class="o">=</span><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">  bodmer/TFT_eSPI@^2.5.0
</span></span></span><span class="line"><span class="cl"><span class="s">  Bodmer/TFT_eWidget@^0.0.5</span>
</span></span><span class="line"><span class="cl"><span class="na">monitor_speed</span> <span class="o">=</span> <span class="s">115200</span>
</span></span><span class="line"><span class="cl"><span class="na">build_flags</span> <span class="o">=</span><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">  -Os
</span></span></span><span class="line"><span class="cl"><span class="s">  -DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG
</span></span></span><span class="line"><span class="cl"><span class="s">  -DUSER_SETUP_LOADED=1
</span></span></span><span class="line"><span class="cl"><span class="s">  
</span></span></span><span class="line"><span class="cl"><span class="s">  ; Define the TFT driver, pins etc here:
</span></span></span><span class="line"><span class="cl"><span class="s">  ; 显示屏驱动要对得上
</span></span></span><span class="line"><span class="cl"><span class="s">  -DILI9488_DRIVER=1
</span></span></span><span class="line"><span class="cl"><span class="s">  # 宽度与高度
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_WIDTH=480
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_HEIGHT=320
</span></span></span><span class="line"><span class="cl"><span class="s">  # SPI 引脚的接线方式，
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_MISO=12
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_MOSI=13
</span></span></span><span class="line"><span class="cl"><span class="s">  # SCLK 在显示屏上对应的引脚可能叫 SCK，是同一个东西
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_SCLK=14
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_CS=15
</span></span></span><span class="line"><span class="cl"><span class="s">  # DC 在显示屏上对应的引脚可能叫 RS 或者 DC/RS，是同一个东西
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_DC=4
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_RST=2
</span></span></span><span class="line"><span class="cl"><span class="s">  # 背光暂时直接接在 3V3 上
</span></span></span><span class="line"><span class="cl"><span class="s">  ; -DTFT_BL=27
</span></span></span><span class="line"><span class="cl"><span class="s">  # 触摸，暂时不用
</span></span></span><span class="line"><span class="cl"><span class="s">  ;-DTOUCH_CS=22
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_GLCD=1
</span></span></span><span class="line"><span class="cl"><span class="s">  # 其他配置，保持默认即可
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT2=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT4=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT6=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT7=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT8=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_GFXFF=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DSMOOTH_FONT=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DSPI_FREQUENCY=27000000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>修好后保存修改，platformio 将会自动检测到配置文件变更，并根据配置文件下载 Arduino/ESP32 工具链，更新构建配置、拉取依赖库（建议开个全局代理，不然下载会贼慢）。</p>
<h3 id="3-测试验证" class="headerLink">
    <a href="#3-%e6%b5%8b%e8%af%95%e9%aa%8c%e8%af%81" class="header-mark"></a>3. 测试验证</h3><p>现在找几个 demo 跑跑看，新建文件 <code>src/main.ino</code>，从如下文件夹中随便找个 demo copy 进去然后编译上传，看看效果：</p>
<ul>
<li><a href="https://github.com/Bodmer/TFT_eSPI/blob/master/examples/480%20x%20320" target="_blank" rel="noopener noreferrer">Bodmer/TFT_eSPI - examples/480x320</a></li>
</ul>
<blockquote>
<p>可以直接从 libdeps 中 copy exmaples 代码过来测试：<code>cp .pio/libdeps/esp32dev/TFT_eSPI/examples/480\ x\ 320/TFT_Meters/TFT_Meters.ino src/main.ino</code></p>
</blockquote>
<p>我跑出来的效果：</p>
<p><figure><img src="/images/ee-basics-2-esp32-display/tft_esp32_meters_demo_2.webp" width="60%"/>
</figure>

<figure><img src="/images/ee-basics-2-esp32-display/tft_esp32_sin_cosin_chart_2.webp" width="60%"/>
</figure>
</p>
<h2 id="二显示图片文字" class="headerLink">
    <a href="#%e4%ba%8c%e6%98%be%e7%a4%ba%e5%9b%be%e7%89%87%e6%96%87%e5%ad%97" class="header-mark"></a>二、显示图片、文字</h2><p>这需要首先将图片/文字转换成 bitmap 格式的 C 代码，可使用在线工具 <a href="https://github.com/javl/image2cpp" target="_blank" rel="noopener noreferrer">javl/image2cpp</a> 进行转换，简单演示下：</p>
<figure><img src="/images/ee-basics-2-esp32-display/how-to-use-image2cpp.webp" width="50%"/>
</figure>

<p>注意高度与宽度调整为与屏幕大小一致，设置放缩模式，然后色彩改为 RGB565，最后上传图片、生成代码。</p>
<p>将生成好的代码贴到 <code>src/test_img.h</code> 中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// We need this header file to use FLASH as storage with PROGMEM directive:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Icon width and height
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">imgWidth</span> <span class="o">=</span> <span class="mi">480</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">imgHeight</span> <span class="o">=</span> <span class="mi">320</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// &#39;evt_source&#39;, 480x320px
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">epd_bitmap_evt_source</span> <span class="p">[]</span> <span class="n">PROGMEM</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 这里省略掉图片内容......
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后写个主程序 <code>src/main.ino</code> 显示图像：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;TFT_eSPI.h&gt;       // Hardware-specific library</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">TFT_eSPI</span> <span class="n">tft</span> <span class="o">=</span> <span class="nf">TFT_eSPI</span><span class="p">();</span>  <span class="c1">// Invoke custom library
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Include the header files that contain the icons
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;test_img.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Serial</span><span class="p">.</span><span class="nf">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">setRotation</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>	<span class="c1">// landscape
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">fillScreen</span><span class="p">(</span><span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Swap the colour byte order when rendering
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">tft</span><span class="p">.</span><span class="nf">setSwapBytes</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 显示图片
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">tft</span><span class="p">.</span><span class="nf">pushImage</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">imgWidth</span><span class="p">,</span> <span class="n">imgHeight</span><span class="p">,</span> <span class="n">epd_bitmap_evt_source</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译上传，效果如下：</p>
<figure><img src="/images/ee-basics-2-esp32-display/tft_esp32_show_image-2.webp" width="60%"/>
</figure>

<h2 id="三写个极简贪吃蛇游戏" class="headerLink">
    <a href="#%e4%b8%89%e5%86%99%e4%b8%aa%e6%9e%81%e7%ae%80%e8%b4%aa%e5%90%83%e8%9b%87%e6%b8%b8%e6%88%8f" class="header-mark"></a>三、写个极简贪吃蛇游戏</h2><p>N 年前我写的第一篇博客文章，是用 C 语言写一个贪吃蛇，这里把它移植过来玩玩看~</p>
<p>我的旧文章地址为：<a href="https://www.cnblogs.com/kirito-c/p/5596160.html" target="_blank" rel="noopener noreferrer">贪吃蛇—C—基于easyx图形库(下):从画图程序到贪吃蛇【自带穿墙术】 </a>，里面详细介绍了程序的思路。</p>
<p>那么现在开始代码移植，TFT 屏幕前面已经接好了不需要动，要改的只有软件部分，还有就是添加上下左右四个按键的电路。</p>
<p>首先清空 <code>src</code> 文件夹，新建文件 <code>src/main.ino</code>，内容如下，其中主要逻辑均移植自我前面贴的文章：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;math.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;TFT_eSPI.h&gt; // Hardware-specific library</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define WIDTH 480
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HEIGHT 320
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 四个方向键对应的 GPIO 引脚
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define BUTTON_UP_PIN     5
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BUTTON_LEFT_PIN   18
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BUTTON_DOWN_PIN   19
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BUTTON_RIGHT_PIN  21
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">TFT_eSPI</span> <span class="n">tft</span> <span class="o">=</span> <span class="nf">TFT_eSPI</span><span class="p">();</span> <span class="c1">// Invoke custom library
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Position</span> <span class="c1">// 坐标结构
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Pos</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Pos</span> <span class="n">SNAKE</span><span class="p">[</span><span class="mi">3000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">Pos</span> <span class="n">DIRECTION</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Pos</span> <span class="n">EGG</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">SNAKE_LEN</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Serial</span><span class="p">.</span><span class="nf">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">setRotation</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// landscape
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">fillScreen</span><span class="p">(</span><span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Swap the colour byte order when rendering
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">tft</span><span class="p">.</span><span class="nf">setSwapBytes</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// initialize the pushbutton pin as an input: the default state is LOW
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">pinMode</span><span class="p">(</span><span class="n">BUTTON_UP_PIN</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pinMode</span><span class="p">(</span><span class="n">BUTTON_LEFT_PIN</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pinMode</span><span class="p">(</span><span class="n">BUTTON_DOWN_PIN</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pinMode</span><span class="p">(</span><span class="n">BUTTON_RIGHT_PIN</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">init_game</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">command</span><span class="p">();</span> <span class="c1">// 获取按键消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">move</span><span class="p">();</span>    <span class="c1">// 修改头节点坐标-蛇的移动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">eat_egg</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nf">draw</span><span class="p">();</span> <span class="c1">// 作图
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">eat_self</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nf">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">init_game</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 初始化小蛇
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">SNAKE_LEN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span>  <span class="nf">random</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">WIDTH</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span> <span class="c1">// 头节点位置随机化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span>  <span class="nf">random</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nf">random</span><span class="p">());</span> <span class="c1">// 初始化方向向量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">creat_egg</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;GAM STARTED, Having Fun~&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">creat_egg</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">ok</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">EGG</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">WIDTH</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span> <span class="c1">// 头节点位置随机化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">EGG</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">SNAKE_LEN</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="n">EGG</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="n">EGG</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ok</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ok</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">command</span><span class="p">()</span> <span class="c1">// 获取按键命令命令
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nf">digitalRead</span><span class="p">(</span><span class="n">BUTTON_LEFT_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="c1">// 如果不是反方向，按键才有效
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;Trun Left!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nf">digitalRead</span><span class="p">(</span><span class="n">BUTTON_RIGHT_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;Trun Right!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nf">digitalRead</span><span class="p">(</span><span class="n">BUTTON_UP_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>  <span class="c1">// 注意 Y 轴，向上是负轴，因为屏幕左上角是原点 (0,0)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;Trun Up!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nf">digitalRead</span><span class="p">(</span><span class="n">BUTTON_DOWN_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;Trun Down!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">move</span><span class="p">()</span> <span class="c1">// 修改各节点坐标以达到移动的目的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 覆盖尾部走过的痕迹
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">tft</span><span class="p">.</span><span class="nf">drawRect</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">SNAKE_LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">SNAKE_LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">SNAKE_LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">+=</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 每次移动10pix
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">+=</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="n">WIDTH</span><span class="p">)</span> <span class="c1">// 如果越界，从另一边出来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span> <span class="n">WIDTH</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="n">HEIGHT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span> <span class="n">HEIGHT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">eat_egg</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="n">EGG</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="n">EGG</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// shade old egg
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">tft</span><span class="p">.</span><span class="nf">drawCircle</span><span class="p">(</span><span class="n">EGG</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">EGG</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">creat_egg</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// add snake node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SNAKE_LEN</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">SNAKE_LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">+=</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 每次移动10pix
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">+=</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">draw</span><span class="p">()</span> <span class="c1">// 画出蛇和食物
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">SNAKE_LEN</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">tft</span><span class="p">.</span><span class="nf">drawRect</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">TFT_BLUE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">drawCircle</span><span class="p">(</span><span class="n">EGG</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">EGG</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">TFT_RED</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">eat_self</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE_LEN</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">SNAKE_LEN</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">tft</span><span class="p">.</span><span class="nf">setTextColor</span><span class="p">(</span><span class="n">TFT_RED</span><span class="p">,</span> <span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">tft</span><span class="p">.</span><span class="nf">drawString</span><span class="p">(</span><span class="s">&#34;GAME OVER!&#34;</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">delay</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nf">setup</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>代码就这么点，没几行，接下来我们来接一下按键电路，这部分是参考了 arduino 的官方文档 <a href="https://docs.arduino.cc/built-in-examples/digital/Button" target="_blank" rel="noopener noreferrer">How to Wire and Program a Button</a></p>
<p>接线方式如下，主要原理就是通过 GND 接线，使四个方向键对应的 GPIO 口默认值为低电平。
当按键按下时，GPIO 口会被拉升成高电平，从而使程序识别到该按键被按下。</p>
<p>接线示意图如下（简单起见，省略了前面的显示屏接线部分）：</p>
<figure><img src="/images/ee-basics-2-esp32-display/esp32-wiring-4-buttons.webp" width="60%"/><figcaption>
            <h4>使用 wokwi.com 制作的示意图</h4>
        </figcaption>
</figure>

<p>现在运行程序，效果如下（手上只有两个按键，所以是双键模式请见谅&hellip;）：</p>
<div class="bilibili"><iframe src="//player.bilibili.com/player.html?bvid=BV1jT411e7HJ&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>

<!-- 
因为买的摇秆有问题，没焊好，各种锡把引脚连在了一起，暂时放弃此想法。

## 四、换成用摇杆控制贪吃蛇吧

用按键控制总还是差了点意思，换成用摇杆控制看看是不是更爽一点。

之前在淘宝上买的一堆元件中有一个 HW-504 摇秆，查了下找到这篇文章 [arduino-joystick](https://arduinogetstarted.com/tutorials/arduino-joystick) 详细说明了怎么在 Arduino 中用它，在 ESP32-Arduino 上使用方法也完全类似。

根据其说明，HW-504 这类摇秆的五个引脚功能分别如下：

- GDN: 接地
- VCC/5V: 接 5V 电源
- VRx 与 VRy: 分别输出 X 轴与 Y 轴的偏移量，是模拟信号
- SW: 对应摇秆内部的按键，按下摇秆会使 SW 输出高电平

我们暂时用不到摇秆的按键，所以只需要接上另外四根引脚就行，而 VRx 与 VRy 因为输出的是模拟量，需要用到 ESP32 的 ADC 功能（Analog to Digital Converter 模数转换器）。

根据 ESP32 官方文档 [Analog to Digital Converter (ADC) - ESP32  Peripherals API](https://docs.espressif.com/projects/esp-idf/en/v4.4.4/esp32/api-reference/peripherals/adc.html) 描述，ESP32 包含两个模数转换器 ADC1 与 ADC2，其中 ADC2 在启用 Wi-Fi 时会被 WiFi 占用导致无法使用，所以我们写程序通常仅使用 ADC1。

然后根据前面的文章内容修改 C 代码，用摇秆控制逻辑取代掉按键相关的内容，改好后的代码内容如下：

```c

``` -->
]]></content></entry><entry><title type="html">EE 入门（一） - 电子电路基础知识</title><link href="https://thiscute.world/posts/electrical-engineering-circuits-basics-1/"/><id>https://thiscute.world/posts/electrical-engineering-circuits-basics-1/</id><author><name>ryan4yin</name></author><published>2023-01-31T22:33:51+08:00</published><updated>2023-08-08T07:23:51+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">2022 年年终总结</title><link href="https://thiscute.world/posts/2022-summary/"/><id>https://thiscute.world/posts/2022-summary/</id><author><name>ryan4yin</name></author><published>2023-01-02T18:00:45+08:00</published><updated>2023-01-02T18:00:45+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">Proxmox Virtual Environment 使用指南</title><link href="https://thiscute.world/posts/proxmox-virtual-environment-instruction/"/><id>https://thiscute.world/posts/proxmox-virtual-environment-instruction/</id><author><name>ryan4yin</name></author><published>2022-11-27T22:38:03+08:00</published><updated>2022-11-27T22:38:03+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">刻意练习</title><link href="https://thiscute.world/posts/deliberate-practice/"/><id>https://thiscute.world/posts/deliberate-practice/</id><author><name>ryan4yin</name></author><published>2022-10-05T13:31:00+08:00</published><updated>2022-10-05T13:31:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">Learn English Again</title><link href="https://thiscute.world/posts/learn-english-again/"/><id>https://thiscute.world/posts/learn-english-again/</id><author><name>ryan4yin</name></author><published>2022-09-04T13:22:00+08:00</published><updated>2022-09-04T13:22:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">分布式数据库的一致性问题与共识算法</title><link href="https://thiscute.world/posts/consistency-and-consensus-algorithm/"/><id>https://thiscute.world/posts/consistency-and-consensus-algorithm/</id><author><name>ryan4yin</name></author><published>2022-08-07T04:11:23+08:00</published><updated>2022-08-07T04:11:23+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">Kubernetes 中的证书管理工具 - cert-manager</title><link href="https://thiscute.world/posts/kubernetes-cert-management/"/><id>https://thiscute.world/posts/kubernetes-cert-management/</id><author><name>ryan4yin</name></author><published>2022-07-31T15:11:46+08:00</published><updated>2023-08-14T15:11:46+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">Death Is But a Dream</title><link href="https://thiscute.world/posts/death-is-but-a-dream/"/><id>https://thiscute.world/posts/death-is-but-a-dream/</id><author><name>ryan4yin</name></author><published>2022-05-24T02:17:00+08:00</published><updated>2022-05-24T02:17:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">NAT 网关、NAT 穿越以及虚拟网络</title><link href="https://thiscute.world/posts/about-nat/"/><id>https://thiscute.world/posts/about-nat/</id><author><name>ryan4yin</name></author><published>2022-05-13T11:46:00+08:00</published><updated>2022-05-13T11:46:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">FinOps for Kubernetes - 如何拆分 Kubernetes 成本</title><link href="https://thiscute.world/posts/finops-for-kubernetes/"/><id>https://thiscute.world/posts/finops-for-kubernetes/</id><author><name>ryan4yin</name></author><published>2022-05-04T23:15:00+08:00</published><updated>2022-05-05T19:31:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">变革与创新</title><link href="https://thiscute.world/posts/revolution-and-innovation/"/><id>https://thiscute.world/posts/revolution-and-innovation/</id><author><name>ryan4yin</name></author><published>2022-03-28T00:40:00+08:00</published><updated>2022-03-28T00:40:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</title><link href="https://thiscute.world/posts/about-tls-cert/"/><id>https://thiscute.world/posts/about-tls-cert/</id><author><name>ryan4yin</name></author><published>2022-03-14T00:00:00+08:00</published><updated>2022-03-14T00:00:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</title><link href="https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/"/><id>https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/</id><author><name>ryan4yin</name></author><published>2022-03-09T20:50:00+08:00</published><updated>2022-03-13T15:26:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（六）—— 对称密钥加密算法</title><link href="https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/"/><id>https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/</id><author><name>ryan4yin</name></author><published>2022-03-06T18:44:00+08:00</published><updated>2022-03-06T18:44:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">「转」且看有思想的年轻人</title><link href="https://thiscute.world/posts/the-thoughtful-youth/"/><id>https://thiscute.world/posts/the-thoughtful-youth/</id><author><name>ryan4yin</name></author><published>2022-03-04T22:58:00+08:00</published><updated>2022-03-04T22:58:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</title><link href="https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/"/><id>https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:05+08:00</published><updated>2022-03-13T15:26:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</title><link href="https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/"/><id>https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:04+08:00</published><updated>2022-03-01T17:15:04+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</title><link href="https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/"/><id>https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:03+08:00</published><updated>2022-03-01T17:15:03+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（二）—— 哈希函数</title><link href="https://thiscute.world/posts/practical-cryptography-basics-2-hash/"/><id>https://thiscute.world/posts/practical-cryptography-basics-2-hash/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:01+08:00</published><updated>2022-03-01T17:15:01+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（一）—— 概览</title><link href="https://thiscute.world/posts/practical-cryptography-basics-1/"/><id>https://thiscute.world/posts/practical-cryptography-basics-1/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:00+08:00</published><updated>2022-03-01T17:15:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry></feed>