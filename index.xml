<feed xmlns="http://www.w3.org/2005/Atom"><title>This Cute World</title><link href="https://thiscute.world/index.xml" rel="self"/><link href="https://thiscute.world/"/><updated>2022-08-07T04:11:23+08:00</updated><id>https://thiscute.world/</id><author><name>ryan4yin</name></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">分布式数据库的一致性问题与共识算法</title><link href="https://thiscute.world/posts/consistency-and-consensus-algorithm/"/><id>https://thiscute.world/posts/consistency-and-consensus-algorithm/</id><author><name>ryan4yin</name></author><published>2022-08-07T04:11:23+08:00</published><updated>2022-08-07T04:11:23+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;个人笔记，不保证正确！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;谈到分布式数据库，不论是 Etcd/Zookeeper 这样的中心化数据库，还是 Ethereum 区块链这样的去中心化数据库，都避免不了两个关键词：「&lt;strong&gt;一致性&lt;/strong&gt;」跟「&lt;strong&gt;共识&lt;/strong&gt;」。&lt;/p&gt;&lt;p&gt;本文是笔者学习「&lt;strong&gt;一致性&lt;/strong&gt;」和「&lt;strong&gt;共识&lt;/strong&gt;」以及相关的理论知识时记录的笔记，这些知识能帮助我们了解 Etcd/Zookeeper/Consul/MySQL/PostgreSQL/DynamoDB/Cassandra/MongoDB/CockroachDB/TiDB 等一众数据库的区别，理解各数据库的优势与局限性，搞懂数据库隔离级别的含义以及应该如何设置，并使我们能在各种应用场景中选择出适用的数据库。&lt;/p&gt;&lt;p&gt;如果你对区块链感兴趣，那这篇文章也能帮助你了解区块链这样的去中心化数据库，跟业界流行的分布式数据库在技术上有何区别，又有哪些共同点，具体是如何实现。&lt;/p&gt;&lt;h2 id=&#34;一一致性---consistency&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80%e4%b8%80%e8%87%b4%e6%80%a7---consistency&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、一致性 - Consistency&lt;/h2&gt;&lt;p&gt;「一致性」本身是一个比较模糊的定义，视使用场景的不同，存在许多不同的含义。由于数据库仍然是一个新兴领域，目前存在许多不同的一致性模型，其中的一些术语描述的一致性之间可能还有重叠关系，这些关系甚至会困扰专业的数据库开发人员。&lt;/p&gt;&lt;p&gt;但是究其根本，实际上在谈论一致性时，我们是在谈论&lt;strong&gt;事务一致性&lt;/strong&gt;跟&lt;strong&gt;数据一致性&lt;/strong&gt;，下面我们分别介绍下这两个一致性。&lt;/p&gt;&lt;h3 id=&#34;1-事务一致性---transactions-consistency&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e4%ba%8b%e5%8a%a1%e4%b8%80%e8%87%b4%e6%80%a7---transactions-consistency&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 事务一致性 - Transactions Consistency&lt;/h3&gt;&lt;p&gt;「事务一致性」指的是数据库中事务的一致性，它是 ACID 理论中最不起眼的特性，也并不是本文的重点。但是这里就写这么一句话也说不过去，所以下面就仔细介绍下事务与 ACID 理论。&lt;/p&gt;&lt;h4 id=&#34;事务与-acid-理论&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8b%e5%8a%a1%e4%b8%8e-acid-%e7%90%86%e8%ae%ba&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;事务与 ACID 理论&lt;/h4&gt;&lt;p&gt;事务是一种「要么全部完成，要么完全不做（All or Nothing）」的指令运行机制。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;ACID 理论&lt;/strong&gt;定义，拥有如下四个特性的「数据库指令序列」，就被称为事务：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;原子性 Atomicity&lt;/strong&gt;：事务是一个不可分割的工作单元，事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在某个中间状态。&lt;ul&gt;&lt;li&gt;比如 A 转账 100 元给 B，要么转账失败，要么转账成功，不可能卡在 A 被扣除了 100 元，而 B 还没收到 100 元的中间状态。&lt;/li&gt;&lt;li&gt;原子性在单机数据库上已得到妥善解决，但是在分布式数据库上它成为一项新的挑战。要在分布式架构下支持原子性并不容易，所以不少 NoSQL 产品都选择绕过这个问题，聚焦到那些对原子性不敏感的细分场景。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;一致性 Consistency&lt;/strong&gt;：也叫数据的「&lt;strong&gt;正确性 Correctness&lt;/strong&gt;」或者完整性，指事务对数据库状态的变更必须满足所有预定义的规则，包括「约束 constraints」、「级联 cascades」、「触发器 triggers」以及这些规则的任何组合。&lt;ul&gt;&lt;li&gt;比如如果用户为某个字段设置了约束条件 &lt;code&gt;unique&lt;/code&gt;，那么事务对该表的所有修改都必须保证此约束成立，否则它将会失败。&lt;/li&gt;&lt;li&gt;是存在感最低的特性&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;隔离性 Isolation&lt;/strong&gt;：&lt;strong&gt;并发执行的多个事务之间是完全隔离的&lt;/strong&gt;，它们的执行效果跟按事务的开始顺序串行执行完全一致。&lt;ul&gt;&lt;li&gt;事务中最复杂的特性&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;持久性 Durability&lt;/strong&gt;：事务执行完毕后，结果就保存不变了。这个最好理解。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ACID 是传统的单机数据库的核心特性，比如 MySQL/PostgreSQL.&lt;/p&gt;&lt;h4 id=&#34;acid-中最复杂的特性---隔离性&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#acid-%e4%b8%ad%e6%9c%80%e5%a4%8d%e6%9d%82%e7%9a%84%e7%89%b9%e6%80%a7---%e9%9a%94%e7%a6%bb%e6%80%a7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;ACID 中最复杂的特性 - 隔离性&lt;/h4&gt;&lt;p&gt;完全地实现 ACID 得到的数据库，性能是非常差的。因此在关系数据库中，设计者通常会选择牺牲相对不重要的「隔离性」来获取更好的性能。&lt;/p&gt;&lt;p&gt;而一旦隔离不够彻底，就可能会遇到一些事务之间互相影响的异常情况，这些异常被分为如下几种：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;脏写 Dirty writes&lt;/strong&gt;：即事务 T1 跟事务 T2 同时在原数据的基础上更新同一个数据，导致结果不符合预期。&lt;ul&gt;&lt;li&gt;案例：两个事务同时尝试从账户中扣款 1000 元，但是它们读到的初始状态都是 5000 元，于是都尝试将账户修改为 4000 元，结果就是少扣了 1000 元。&lt;/li&gt;&lt;li&gt;最简单的解决方法：针对 &lt;code&gt;UPDATE table SET field = field - 1000 WHERE id = 1&lt;/code&gt; 这类数据增删改的逻辑，需要对被更新的行加一把「行写锁」，使其他需要写此数据的事务等待。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;脏读 Dirty reads&lt;/strong&gt;：事务 T1 读取了事务 T2 未提交的数据。这个数据不一定准确，被称为脏数据，因为假如事务 T2 回滚了，T1 拿到的就是一个错误的数据&lt;ul&gt;&lt;li&gt;案例：假设小明小红在一个银行账户存了 5000 元，小明小红在用这同一个账户消费 1000 元，这中间小明付款的事务读取到账户已经被小红的事务修改为了 4000 元，于是它把余额修改为 3000 元，然后付款成功。但是在小明的付款事务成功后，小红的付款失败回滚了，余额又从 3000 被修改回 5000 元。小明就完成了 0 元购的壮举。&lt;/li&gt;&lt;li&gt;最简单的解决方法：事务 T2 写数据时对被修改的行加「行写锁」，T2 结束后再释放锁，这样事务 T1 的读取就会被阻塞，直到锁释放。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;不可重复读 Non-repeatable reads&lt;/strong&gt;：事务 T1 读取数据后，紧接着事务 T2 就更新了数据并提交，事务 T1 再次读取的时候发现数据不一致了&lt;ul&gt;&lt;li&gt;案例：&lt;ul&gt;&lt;li&gt;小明在京东上抢购商品，抢购事务启动时事务读到还剩 36 件商品，于是继续执行抢购逻辑，之后事务因为某种原因需要再读一次商品数量，结果发现商品数量已经变成 0 了，抢购失败。&lt;/li&gt;&lt;li&gt;更麻烦的是，不可重复读导致 SELECT 跟 UPDATE 之间也可能出现数据变更，如果你在事务中先通过 &lt;code&gt;SELECT field INTO myvar FROM mytable WHERE uid = 1&lt;/code&gt; 读到余额，再在此基础上通过 &lt;code&gt;UPDATE&lt;/code&gt; 去更新余额，很可能导致数据变得一团糟！&lt;ul&gt;&lt;li&gt;正确的做法是使用 &lt;code&gt;UPDATE mytable SET field = field - 1000 WHERE id = 1&lt;/code&gt;，因为每一条 SQL 命令本身都是原子的，这个 SQL 不会有问题。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;最简单的解决办法：事务 T1 读数据时，也加一把「行」锁，直到不再需要读该数据了，再释放锁。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;幻读 Phantom reads&lt;/strong&gt;：事务 T1 在多次批量读数据时，事务 T2 往其中执行了插入/删除操作，导致 T1 读到的是旧数据的一个残影，而非当前真实的数据状态。&lt;ul&gt;&lt;li&gt;最简单的解决办法：事务 T1 在批量读数据时，先加一把范围锁，在事务 T1 结束读取之后，再释放这把锁。这能同时解决「幻读」跟「不可重复读」的问题。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;根据隔离程度，ANSI SQL-92 标准中将「隔离性」细分为四个等级（避免「脏写」是数据库的必备要求，因此未记录在下面的四个等级中）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;串行化 Serializable&lt;/strong&gt;：也就是完全的隔离，只要事务之间存在互相影响的可能，就（通过锁机制）强制它们串行执行。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;可重复读 Repeatable read&lt;/strong&gt;：可避免脏读、不可重复读的发生，但是解决不了幻读的问题。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;读已提交 Read committed&lt;/strong&gt;：只能避免脏读&lt;/li&gt;&lt;li&gt;&lt;strong&gt;读未提交 Read uncommitted&lt;/strong&gt;：最低级别，完全放弃隔离性&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;MySQL 默认的隔离级别为「可重复读 Repeatable Read」，PostgreSQL 和 Oracle 默认隔离级别为「读已提交 Read committed」。&lt;/p&gt;&lt;p&gt;为什么 MySQL/PostgreSQL/Oracle 的默认隔离级别是这样设置的呢？该如何选择正确的隔离级别呢？我们针对普通的高并发业务场景做个简单分析：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先，「脏读」是必须避免的，它会使事务读到错误的数据！最低的「读未提交」级别直接排除&lt;/li&gt;&lt;li&gt;「串行化」的性能太差，也直接排除&lt;/li&gt;&lt;li&gt;只要 SQL 用得对，「不可重复读」问题对业务逻辑的正确性通常并无影响，所以是可以容忍的。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;因此一般「读已提交」是最佳的隔离级别&lt;/strong&gt;，这也是 PostgreSQL/Oracle 将其设为默认隔离级别的原因。&lt;/li&gt;&lt;li&gt;那么为什么 MySQL 这么特立独行，将默认隔离级别提高到了「可重复读」呢？为啥阿里这种大的互联网公司又会把 MySQL 默认的隔离级别改成「读已提交」？&lt;ul&gt;&lt;li&gt;根据网上查到的资料，这是 MySQL 的历史问题导致的。MySQL 5.0 之前只支持 statement 这种 binlog 格式，此格式在「读已提交」的隔离级别下会出现诸多问题，最明显的就是可能会导致主从数据库的数据不一致。&lt;/li&gt;&lt;li&gt;除了设置默认的隔离级别外，MySQL 还禁止在使用 statement 格式的 binlog 时，使用 READ COMMITTED 作为事务隔离级别，尝试修改隔离级别会报错 &lt;code&gt;Transaction level &#39;READ-COMMITTED&#39; in InnoDB is not safe for binlog mode &#39;STATEMENT&#39;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;而互联网公司将隔离级别改为「读已提交」的原因也很好理解，正如前文所述「读已提交」是最佳的隔离级别，这样修改能够提升数据库的性能。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;「隔离性」的本质其实就是&lt;strong&gt;事务的并发控制&lt;/strong&gt;，不同的隔离级别代表了对并发事务的隔离程度，主要的实现手段是「&lt;strong&gt;多版本并发控制 MVCC&lt;/strong&gt;」与「锁」。锁机制前面已经简单介绍过了，而 MVCC 其实就是为每个事务创建一个特定隔离级别的快照，这样读写不会互相阻塞，性能就提升了。（MVCC 暂时也是超纲知识，后面再研究吧 emmmm）&lt;/p&gt;&lt;p&gt;ANSI SQL-92 对异常现象的分析仍然太过简单了，1995 年新发布的论文 &lt;a href=&#34;https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-95-51.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;A Critique of ANSI SQL Isolation Levels&lt;/a&gt; 丰富和细化了 SQL-92 的内容，定义了六种隔离级别和八种异常现象（有大佬强烈建议通读此论文，重点是文中的快照隔离（Snapshot Isolation, SI）级别）。&lt;/p&gt;&lt;h3 id=&#34;2-数据一致性-data-consistency&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e6%95%b0%e6%8d%ae%e4%b8%80%e8%87%b4%e6%80%a7-data-consistency&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 数据一致性 Data Consistency&lt;/h3&gt;&lt;p&gt;「数据一致性」是指对数据库的每一次读操作都应该读到最新写入的数据，或者直接报错。&lt;/p&gt;&lt;p&gt;对单机数据库而言「数据一致性」往往不是问题，因为它通常只有一份保存在磁盘或内存中的数据。但是在分布式系统中，为了数据安全性或者为了性能，往往每一份数据都在多个节点上存有其副本，这就引出了数据副本们的一致性问题。因此，我们通常谈论的「数据一致性」就是指分布式系统的「数据一致性」。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CAP 原则&lt;/strong&gt;是分布式系统领域一个著名的理论，它告诉我们在分布式系统中如下三种属性不可能全部达成，因此也被称作「&lt;strong&gt;CAP 不可能三角&lt;/strong&gt;」：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;数据一致性 Data Consistency&lt;/strong&gt;：客户端的每次读操作，不管访问系统的哪个节点，要么读到的都是同一份最新写入的数据，要么读取失败&lt;ul&gt;&lt;li&gt;强调数据完全正确&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;可用性 Availability&lt;/strong&gt;：任何来自客户端的请求，不管访问哪个非故障节点，都能得到响应数据，但不保证是同一份最新数据&lt;ul&gt;&lt;li&gt;强调的是服务可用，但不保证数据正确&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;分区容错性 Partition Tolerance&lt;/strong&gt;：即使节点之间出现了任意数量的消息丢失或者高延迟，系统仍能正常运行&lt;ul&gt;&lt;li&gt;就是说网络丢包或延迟会导致系统被分成多个 Partition，系统能够容忍这种情况&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了保证分区容错性 P，考虑当分布式系统因为网络问题被割裂成多个分区时，每个分区只有如下两种选择，A 跟 C 必须牺牲掉其中之一：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;取消操作并拒绝提供服务，这降低了可用性，但是能确保数据一致性&lt;/li&gt;&lt;li&gt;继续处理请求，这确保了可用性，但是数据一致性就无法保证了&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果系统的多个分区都在同时提供服务，导致数据不一致并且存在冲突无法合并，这就被称为分布式系统的「&lt;strong&gt;脑裂&lt;/strong&gt;」，显然任何分布式系统都不会希望发生「脑裂」。&lt;/p&gt;&lt;p&gt;因为分布式系统与单机系统不同，它涉及到多节点间的网络通讯和交互，但是只要有网络交互就一定会有延迟和数据丢失，节点间的分区故障是很有可能发生的。因此为了正常运行，P 是分布式系统必须保证的特性，&lt;strong&gt;在出现分区故障时，为了 P 只能牺牲掉 A 或者 C&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;工程上是要 AP 还是 CP，得视情况而定：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Etcd/Zookeeper/Consul: 它们通常被用于存储系统运行的关键元信息，每次读，都要能读取到最新数据。因此它们实现了 CP，牺牲了 A&lt;/li&gt;&lt;li&gt;DynamoDB/Cassandra/MongoDB：不要求数据一致性，一段时间内用旧的缓存问题也不大，但是要求可用性，因此应该实现 AP，牺牲掉 C&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;数据一致性模型&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e6%95%b0%e6%8d%ae%e4%b8%80%e8%87%b4%e6%80%a7%e6%a8%a1%e5%9e%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;数据一致性模型&lt;/h4&gt;&lt;p&gt;分布式系统中，多副本数据上的一组读写策略，被称为「（数据）一致性模型 Consistency Model」。一致性模型数量很多，让人难以分辨。为了便于理解，我们先从状态视角出发区分一下强一致与弱一致的概念，在这个的基础上再从操作视角去理解这众多的一致性模型。&lt;/p&gt;&lt;h5 id=&#34;1-状态视角---强一致与弱一致&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e7%8a%b6%e6%80%81%e8%a7%86%e8%a7%92---%e5%bc%ba%e4%b8%80%e8%87%b4%e4%b8%8e%e5%bc%b1%e4%b8%80%e8%87%b4&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 状态视角 - 强一致与弱一致&lt;/h5&gt;&lt;p&gt;我们首先把整个分布式系统看作一个&lt;strong&gt;白盒&lt;/strong&gt;，从状态视角看，任何变更操作后，分布式系统的多个数据副本只有如下三种状态：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在某些条件下，各副本状态不一致的现象只是暂时的，后续还会转换到一致的状态，这被称为「&lt;strong&gt;弱一致&lt;/strong&gt;」；&lt;ul&gt;&lt;li&gt;这通常是使用&lt;strong&gt;异步复制&lt;/strong&gt;来同步各副本的状态。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;相对的说，如果系统各副本不存在「不一致」这种状态，只要变更操作成功数据就一定完全一致，那它就被称为「&lt;strong&gt;强一致&lt;/strong&gt;」。&lt;ul&gt;&lt;li&gt;这要求所有副本之间的数据更新必须完全同步，就必须使用&lt;strong&gt;全同步复制&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;永远不会一致&lt;/strong&gt;：这在分布式系统中就是 bug 了，也被称为「脑裂」。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上面描述的是整个系统的客观、实际状态，但对于绝大部分用户而言分布式系统更多的是一个&lt;strong&gt;黑盒&lt;/strong&gt;，因此更流行的是基于「黑盒」的分类方式，它根据系统的对外状态将系统分成两种类型：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;强一致&lt;/strong&gt;：指对系统的任何节点/进程，写操作完成后，任何用户对任何节点的后续访问都能读到新的值。就好像系统只存在一个副本一样。&lt;ul&gt;&lt;li&gt;最常用算法是 Raft/Paxos，它们的写操作只要求超过半数节点写入成功，因此写入完成时，内部状态实际是不一致的，但是对它进行读写，效果跟「全同步复制」没有区别。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;弱一致&lt;/strong&gt;：指对系统的任何节点/进程，写操作完成后，后续的任何访问可能会拿到的值是不确定的，但经过一段时间后，后续的任何访问都能读到新的值。&lt;ul&gt;&lt;li&gt;弱一致是非常模糊的定义。如果我们把最终所有用户都能访问到新的值被称为「&lt;strong&gt;系统收敛&lt;/strong&gt;」，系统收敛的用时可以有明确边界，也可以没有。系统收敛前的访问行为可以有明确规范，也可以不存在规范。一切都看具体系统的实现。&lt;/li&gt;&lt;li&gt;如果系统能够在有限时间内收敛，那它就是「&lt;strong&gt;最终一致&lt;/strong&gt;」，否则可以认为它是「&lt;strong&gt;不一致&lt;/strong&gt;」。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了实际需要，数据库专家对系统收敛之前的读写效果进行各种限制，对系统的收敛时间进行各种限制，得到了许多一致性模型。&lt;/p&gt;&lt;h5 id=&#34;2-操作视角---多种一致性模型&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e6%93%8d%e4%bd%9c%e8%a7%86%e8%a7%92---%e5%a4%9a%e7%a7%8d%e4%b8%80%e8%87%b4%e6%80%a7%e6%a8%a1%e5%9e%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 操作视角 - 多种一致性模型&lt;/h5&gt;&lt;p&gt;从每个客户端的操作角度看，有四种一致性模型：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;写后读一致性 Read after Write Consistency&lt;/strong&gt;：也被称作「读自己所写一致性」，即自己写完数据版本 N 后，后续读到的版本一定不小于版本 N。&lt;ul&gt;&lt;li&gt;它解决的问题：A 发了个抖音视频，刷新页面后却莫名其妙消失了（旧版本），几分钟后才重新刷出来。&lt;/li&gt;&lt;li&gt;实现方式之一：为写入者单独添加一个读取规则，他的读都由已更新其写入数据的副本来处理。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;单调读一致性 Monotonic Read Consistency&lt;/strong&gt;：保证多个读操作的顺序，即客户端一旦读到某个数据版本 N，后续不会读到比 N 更低的版本。&lt;ul&gt;&lt;li&gt;它解决的问题是：A 删除了一个抖音视频，可多次刷新，偶尔刷不到视频，偶尔又能刷到被删除视频（旧版本），几分钟后才彻底被删除。&lt;/li&gt;&lt;li&gt;实现方式之一：为每个用户的读都创建一个副本映射，后续的读都由一个固定的副本处理，避免随机切换副本而读到更老的值。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;单调写一致性 Monotonic Write Consistency&lt;/strong&gt;：保证多个写操作的顺序，即客户端对同一数据的两次写入操作，一定按其被提交的顺序被执行。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;读后写一致性 Write after Read Consistency&lt;/strong&gt;：读后写一致性，保证一个客户端读到数据版本 N 后（可能是其他客户端写入的），随后对同一数据的写操作必须要在版本号大于等于 N 的副本上执行。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上述四个一致性模型都只从每个客户端自身的角度定义规则，比较片面，因此它们都是「弱一致模型」。&lt;/p&gt;&lt;p&gt;而不考虑客户端，直接从所有数据库用户的操作视角看，有如下几种一致性模型：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;线性一致性 Linearizability&lt;/strong&gt;：线性一致性利用了事件的提交顺序，它保证任何读操作得到的数据，其顺序跟读/写事件的提交顺序一致。&lt;ul&gt;&lt;li&gt;简单的说它要求&lt;strong&gt;整个系统表现得像只存在一个副本&lt;/strong&gt;，所有操作的执行结果就跟这些事件按提交顺序完全串行执行一样。这实际也是在说所有并发事件都是原子的，一旦互相之间存在冲突，就一定得按顺序执行，因此也有人称它为「原子一致性」。&lt;/li&gt;&lt;li&gt;线性一致性，完全等价于系统对外状态的「强一致性」&lt;/li&gt;&lt;li&gt;线性一致性的系统是完全确定性的&lt;/li&gt;&lt;li&gt;实现方式：需要一个所有节点都一致的「&lt;strong&gt;全局时钟&lt;/strong&gt;」，这样才可以对所有事件进行全局排序。&lt;ul&gt;&lt;li&gt;大多数分布式数据库如 TiDB/Etcd 都是通过 NTP 等协议进行单点授时与同步实现的全局时钟。&lt;/li&gt;&lt;li&gt;有全球化部署需要的 Google Spanner 是使用 GPS &#43; 原子钟实现的全局时钟 TrueTime，全局误差可以控制在 7ms 以内。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;局限性：根据爱因斯坦相对论，「时间是相对的」，实际上并不存在绝对的时间，因此线性一致性只在经典物理学范围内适用。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Consistency_model&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;顺序一致性 Sequentially Consistent&lt;/a&gt;&lt;/strong&gt;：顺序一致性最早是 Leslie Lamport 用来描述多核 CPU 的行为的，在分布式系统领域用得较少。&lt;ul&gt;&lt;li&gt;顺序一致性的要求有两点：&lt;ul&gt;&lt;li&gt;从单个进程（副本）的角度看，所有指令的执行顺序跟代码逻辑的顺序完全一致。&lt;/li&gt;&lt;li&gt;从所有的处理器（整个分布式系统）角度看，写操作不必立即对所有用户可见，但是所有副本必须以相同的顺序接收这些写操作。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;顺序一致性和线性一致性都是要找到一个满足「写后读」的一组操作历史，差异在于&lt;strong&gt;线性一致性要求严格的时间序，而顺序一致性只要求满足代码的逻辑顺序&lt;/strong&gt;，而其他代码逻辑未定义的事件顺序（比如多副本上各事件之间的顺序），具体是什么样的顺序无所谓，只要所有副本看到的事件顺序都相同就行。&lt;/li&gt;&lt;li&gt;顺序一致性并不能提供「确定性」，相同的两次操作仍然可能得到不同的事件顺序。&lt;/li&gt;&lt;li&gt;实现方式：因为不要求严格的全局时间序，它就不需要一个全局时钟了，但实际上为了满足全局的确定性，仍然需要一些复杂的操作。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;因果一致性 Causal Consistency&lt;/strong&gt;：线性一致性的全局时钟有其局限性，而因果一致性基于写事件的「偏序关系」提出了「&lt;strong&gt;逻辑时钟&lt;/strong&gt;」的概念，并保证读顺序与逻辑时钟上的写事件顺序一致。&lt;ul&gt;&lt;li&gt;写事件的「偏序关系」关系是指，至少部分事件（比如一个节点内部的事件）是可以使用本地时钟直接排序的，而节点之间发生通讯时，接收方的事件一定晚于调用方的事件。基于这一点可以实现一个「&lt;strong&gt;逻辑时钟&lt;/strong&gt;」，但逻辑时钟的缺点在于，如果某两个事件不存在相关性，那逻辑时钟给出的顺序就没有任何意义。&lt;/li&gt;&lt;li&gt;多数观点认为，因果一致性弱于线性一致性，但&lt;strong&gt;在并发性能上具有优势，也足以处理多数的异常现象&lt;/strong&gt;，所以因果一致性也在工业界得到了应用。&lt;/li&gt;&lt;li&gt;CockroachDB 和 YugabyteDB 都在设计中采用了逻辑混合时钟（Hybrid Logical Clocks），这个方案源自 Lamport 的逻辑时钟，也取得了不错的效果&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;前缀一致性 Consistent Prefix&lt;/strong&gt;：副本之间的同步过程中，会存在一些副本接收数据的顺序并不一致。「前缀一致性」是说所有用户读到的数据顺序的前缀永远是一致的。&lt;ul&gt;&lt;li&gt;「前缀」是指程序在执行写操作时，需要显式声明其「前缀」事件，这样每个事件就都存在一个由其他写事件排列而成的前缀。比如当前有写事件排列「A B C D」，那所有用户读到的数据都拥有同样的写事件前缀，比如「A」、「A B」、「A B C」、「A B C D」，但不可能出现「A C」或者「C A」等结果。&lt;/li&gt;&lt;li&gt;它解决的是&lt;strong&gt;分片分布式数据库&lt;/strong&gt;的一致性问题：A B C 因为地域区别读写的是不同的副本，B 在抖音评论区问了个问题，然后 A 作出了回答。但是问题跟回答两个数据如果处于不同的分片，副本同步时这两个数据的顺序是无法保证的，C 可能会先读到回答信息，之后才刷新出 B 的提问，历史事件的顺序就乱了。&lt;/li&gt;&lt;li&gt;实现方式：需要程序主动为消息之间添加显式的依赖关系，再据此控制其读取顺序，实现比较复杂。&lt;/li&gt;&lt;li&gt;存在的问题：只有被显式定义了因果关系的事件，它们之间的顺序才能被保证。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;其中&lt;strong&gt;线性一致性&lt;/strong&gt;就是&lt;strong&gt;强一致性&lt;/strong&gt;，其他所有的模型都是&lt;strong&gt;弱一致性模型&lt;/strong&gt;或者说&lt;strong&gt;最终一致性模型&lt;/strong&gt;。所有这些模型按强度降序排列如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;线性一致性/强一致性：系统对外表现得好像整个系统完全一致，不存在不一致的情况。&lt;/li&gt;&lt;li&gt;顺序一致性：只保证每个节点上的事件顺序一致，对节点之间的事件顺序只有非常宽松的要求。&lt;/li&gt;&lt;li&gt;因果一致性：同样只保证每个节点上的事件顺序一致，但是对节点之间的事件顺序的要求比顺序一致性更宽松。&lt;/li&gt;&lt;li&gt;有界旧一致性（Bounded Staleness）：保证读到的数据与最新版本的差距不超过 K 个版本&lt;/li&gt;&lt;li&gt;会话一致性（Session Consistency）：在一个会话内保证单调读，单调写，和读自己所写，会话之间不保证&lt;/li&gt;&lt;li&gt;前缀一致性：在每个会话内保证了单调读，但是不保证会话&lt;/li&gt;&lt;li&gt;客户端角度的四个一致性模型：写后读、单调读、单调写、读后写。这四个模型的视角都非常片面，通常被包含在前述的一致性模型中。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;更完整的关系树状图：&lt;a href=&#34;https://jepsen.io/consistency&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Consistency Models&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;二分布式系统的-base-与最终一致性&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8c%e5%88%86%e5%b8%83%e5%bc%8f%e7%b3%bb%e7%bb%9f%e7%9a%84-base-%e4%b8%8e%e6%9c%80%e7%bb%88%e4%b8%80%e8%87%b4%e6%80%a7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、分布式系统的 BASE 与最终一致性&lt;/h2&gt;&lt;p&gt;BASE 理论：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;基本可用 Basically Available&lt;/strong&gt;：当分布式系统在出现不可预知的故障时，允许损失部分功能的可用性，保障核心功能的可用性&lt;ul&gt;&lt;li&gt;四种实现基本可用的手段：流量削峰、延迟响应、体验降级、过载保护&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;软状态 Soft state&lt;/strong&gt;：在柔性事务中，允许系统存在中间状态，且这个中间状态不会影响系统整体可用性。比如，数据库读写分离，写库同步到读库（主库同步到从库）会有一个延时，其实就是一种柔性状态。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;最终一致性 Eventually consistent&lt;/strong&gt;：前面已经说得很详细了，它指对系统的任何节点/进程，写操作完成后，后续的任何访问可能会拿到的值是不确定的，但经过有限的一段时间后，后续的任何访问都能读到新的值。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ACID 与 BASE 实质上是分布式系统实现中的的两个极端：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ACID 理论就如它的含义「&lt;strong&gt;酸&lt;/strong&gt;」一样，是 CAP 原则中一致性的边界——&lt;strong&gt;最强的一致性&lt;/strong&gt;，是牺牲掉 A 后达到 CP 的极致。&lt;/li&gt;&lt;li&gt;BASE 翻译过来就是「&lt;strong&gt;碱&lt;/strong&gt;」，它是 CAP 原则中可用性的边界——&lt;strong&gt;最高的可用性，最弱的一致性&lt;/strong&gt;，通过牺牲掉 C 来达到 AP 的极致。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;根据 CAP 理论，如果在分布式系统中实现了一致性，可用性必然受到影响。比如，如果出现一个节点故障，则整个分布式事务的执行都是失败的。实际上，绝大部分场景对一致性要求没那么高，短暂的不一致是能接受的，另外，也基于可用性和并发性能的考虑，建议在开发实现分布式系统，&lt;strong&gt;如果不是必须，尽量不要实现事务，可以考虑采用最终一致性&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;最终一致性的实现手段：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;读时修复&lt;/strong&gt;：在读取数据时，检测数据的不一致，进行修复&lt;/li&gt;&lt;li&gt;&lt;strong&gt;写时修复&lt;/strong&gt;：在写入数据时，检测数据的不一致，进行修复&lt;/li&gt;&lt;li&gt;&lt;strong&gt;异步修复&lt;/strong&gt;：这个是最常用的方式，通过定时对账，检测副本数据的一致性并修复&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在实现最终一致性的时候，还推荐同时实现自定义写一致性级别（比如 All、Quorum、One、Any），许多分布式数据库的最终一致性级别都是可调的。&lt;/p&gt;&lt;p&gt;但是随着 TiDB 等分布式关系数据库的兴起，分布式领域的 BASE 理论实际上正在被 ACID 赶超，ACID 焕发又一春了。&lt;/p&gt;&lt;h2 id=&#34;三共识算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%89%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;三、共识算法&lt;/h2&gt;&lt;p&gt;共识算法，也被称为一致性协议，是指在分布式系统中多个节点之间对某个提案 Proposal（例如多个事务请求，先执行谁？）达成一致看法的一套流程。&lt;/p&gt;&lt;p&gt;提案的含义在分布式系统中十分宽泛，如多个事件发生的顺序、某个键对应的值、谁是主节点……等等。可以认为任何可以达成一致的信息都是一个提案。&lt;/p&gt;&lt;p&gt;对于分布式系统来讲，各个节点通常都是相同的确定性状态机模型（又称为状态机复制问题，State-Machine Replication），从相同初始状态开始接收相同顺序的指令，则可以保证相同的结果状态。因此，系统中多个节点最关键的是对多个事件的顺序进行共识，即排序。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;共识算法是达成数据一致性的一种手段，而且是数据强一致性的必要非充分条件&lt;/strong&gt;。比如直接使用 Raft 算法，但是允许读取集群的任何节点，只能得到数据的最终一致性，还需要其他手段才能确保强一致性。&lt;/p&gt;&lt;h3 id=&#34;拜占庭将军问题与拜占庭容错&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e6%8b%9c%e5%8d%a0%e5%ba%ad%e5%b0%86%e5%86%9b%e9%97%ae%e9%a2%98%e4%b8%8e%e6%8b%9c%e5%8d%a0%e5%ba%ad%e5%ae%b9%e9%94%99&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;拜占庭将军问题与拜占庭容错&lt;/h3&gt;&lt;p&gt;拜占庭错误是 1982 年兰伯特在《拜占庭将军问题》中提出的一个错误模型，描述了在少数节点不仅存在故障，还存在恶意行为的场景下，能否达成共识这样一个问题，论文描述如下：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;9 位拜占庭将军分别率领一支军队要共同围困一座城市，因为这座城市很强大，如果不协调统一将军们的行动策略，部分军队进攻、部分军队撤退会造成围困失败，因此各位将军必须通过投票来达成一致策略，要么一起进攻，要么一起撤退。&lt;/p&gt;&lt;p&gt;因为各位将军分别占据城市的一角，他们只能通过信使互相联系。在协调过程中每位将军都将自己投票“进攻”还是“撤退”的消息通过信使分别通知其他所有将军，这样一来每位将军根据自己的投票和其他将军送过来的投票，就可以知道投票结果，从而决定是进攻还是撤退。&lt;/p&gt;&lt;p&gt;而问题的复杂性就在于：将军中可能出现叛徒，他们不仅可以投票给错误的决策，还可能会选择性地发送投票。假设 9 位将军中有 1 名叛徒，8 位忠诚的将军中出现了 4 人投“进攻”，4 人投“撤退”，这时候叛徒可能故意给 4 名投“进攻”的将军投“进攻”，而给另外 4 名投“撤退”的将军投“撤退”。这样在 4 名投“进攻”的将军看来，投票是 5 人投“进攻”，从而发动进攻；而另外 4 名将军看来是 5 人投“撤退”，从而撤退。这样，一致性就遭到了破坏。&lt;/p&gt;&lt;p&gt;还有一种情况，因为将军之间需要通过信使交流，即便所有的将军都是忠诚的，派出去的信使也可能被敌军截杀，甚至被间谍替换，也就是说将军之间进行交流的信息通道是不能保证可靠性的。所以在没有收到对应将军消息的时候，将军们会默认投一个票，例如“进攻”。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;更一般地，在已知有 N 个将军谋反的情况下，其余 M 个忠诚的将军在不受叛徒的影响下能否达成共识？有什么样的前提条件，该如何达成共识？这就是拜占庭将军问题。&lt;/p&gt;&lt;p&gt;如果一个共识算法在一定条件下能够解决拜占庭将军问题，那我们就称这个算法是「&lt;strong&gt;拜占庭容错 Byzantine Fault Tolerance（BFT）&lt;/strong&gt;」算法。反之如果一个共识算法无法接受任何一个节点作恶，那它就被称为「&lt;strong&gt;非拜占庭容错 Crash Fault Tolerance (CFT)&lt;/strong&gt;」算法。&lt;/p&gt;&lt;p&gt;可以通过简单穷举发现，二忠一叛是无法达成共识的，这个结论结合反证法可证明，&lt;strong&gt;拜占庭容错算法要求叛徒的比例必须低于 1/3&lt;/strong&gt;。&lt;/p&gt;&lt;h3 id=&#34;常用共识算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%b8%b8%e7%94%a8%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;常用共识算法&lt;/h3&gt;&lt;p&gt;对于「&lt;strong&gt;非拜占庭容错 Crash Fault Tolerance (CFT)&lt;/strong&gt;」的情况，已经存在不少经典的算法，包括 Paxos（1990 年）、Raft（2014 年）及其变种等。这类容错算法往往性能比较好，处理较快，容忍不超过一半的故障节点。&lt;/p&gt;&lt;p&gt;对于「&lt;strong&gt;拜占庭容错 Byzantine Fault Tolerance（BFT）&lt;/strong&gt;」的情况，目前有 PBFT（Practical Byzantine Fault Tolerance，1999 年）为代表的确定性系列算法、PoW（1999 年）为代表的概率算法等算法可选。确定性算法一旦达成共识就不可逆转，即共识是最终结果；而概率类算法的共识结果则是临时的，随着时间推移或某种强化，共识结果被推翻的概率越来越小，最终成为事实上结果。拜占庭类容错算法往往性能较差，容忍不超过 1/3 的故障节点。&lt;/p&gt;&lt;p&gt;此外，XFT（Cross Fault Tolerance，2015 年）等最近提出的改进算法可以提供类似 CFT 的处理响应速度，并能在大多数节点正常工作时提供 BFT 保障。Algorand 算法（2017 年）基于 PBFT 进行改进，通过引入可验证随机函数解决了提案选择的问题，理论上可以在容忍拜占庭错误的前提下实现更好的性能（1000&#43; TPS）。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;注：实践中，对客户端来说要拿到共识结果需要自行验证，典型地，可访问足够多个服务节点来比对结果，确保获取结果的准确性。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;常见共识算法列举如下：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;拜占庭容错&lt;/th&gt;&lt;th&gt;一致性&lt;/th&gt;&lt;th&gt;性能&lt;/th&gt;&lt;th&gt;可用性（能容忍多大比例的节点出现故障）&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;两阶段提交 2PC&lt;/td&gt;&lt;td&gt;否&lt;/td&gt;&lt;td&gt;强一致性&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;TCC(try-confirm-cancel)&lt;/td&gt;&lt;td&gt;否&lt;/td&gt;&lt;td&gt;最终一致性&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Paxos&lt;/td&gt;&lt;td&gt;否&lt;/td&gt;&lt;td&gt;强一致性&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;ZAB&lt;/td&gt;&lt;td&gt;否&lt;/td&gt;&lt;td&gt;最终一致性&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Raft&lt;/td&gt;&lt;td&gt;否&lt;/td&gt;&lt;td&gt;强一致性&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Gossip&lt;/td&gt;&lt;td&gt;否&lt;/td&gt;&lt;td&gt;最终一致性&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;td&gt;高&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Quorum NWR&lt;/td&gt;&lt;td&gt;否&lt;/td&gt;&lt;td&gt;强一致性&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PBFT&lt;/td&gt;&lt;td&gt;是&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PoW&lt;/td&gt;&lt;td&gt;是&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;PoS&lt;/td&gt;&lt;td&gt;是&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;低&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;a href=&#34;https://medium.com/solana-labs/proof-of-history-explained-by-a-water-clock-e682183417b8&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;PoH&lt;/a&gt;&lt;/td&gt;&lt;td&gt;是&lt;/td&gt;&lt;td&gt;N/A&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;td&gt;中&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;blockquote&gt;&lt;p&gt;注：这里虽然列出了 PoW/PoS/PoH 等应用在区块链中的一致性算法，但是它们跟 PBFT 等其他拜占庭容错算法存在很大的区别，后面会给出介绍。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&#34;不同共识算法的应用场景&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%8d%e5%90%8c%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95%e7%9a%84%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;不同共识算法的应用场景&lt;/h3&gt;&lt;p&gt;在不可信环境中，因为可能存在恶意行为，就需要使用支持拜占庭容错的共识算法如 PoW/PoS，使系统在存在部分节点作恶的情况下仍然能达成共识。这就是区块链使用 PoW/PoS 算法而不是 Paxos/Raft 算法的原因。&lt;/p&gt;&lt;p&gt;而在企业内网等场景下，可以认为是可信环境，基本不会出现恶意节点或者可以通过 mTLS 等手段进行节点身份认证，这种场景下系统具有故障容错能力就够了，就没必要做到拜占庭容错，因此常用 Raft/Paxos 等算法。&lt;/p&gt;&lt;h3 id=&#34;非拜占庭错误共识算法-paxos-与-raft&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e9%9d%9e%e6%8b%9c%e5%8d%a0%e5%ba%ad%e9%94%99%e8%af%af%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95-paxos-%e4%b8%8e-raft&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;非拜占庭错误共识算法 Paxos 与 Raft&lt;/h3&gt;&lt;p&gt;受限于篇幅与笔者精力，这部分暂时跳过&amp;hellip;后面可能会写篇新的文章专门介绍 Paxos/Raft 算法。&lt;/p&gt;&lt;h3 id=&#34;能容忍拜占庭错误的-pow-概率共识算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e8%83%bd%e5%ae%b9%e5%bf%8d%e6%8b%9c%e5%8d%a0%e5%ba%ad%e9%94%99%e8%af%af%e7%9a%84-pow-%e6%a6%82%e7%8e%87%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;能容忍拜占庭错误的 PoW 概率共识算法&lt;/h3&gt;&lt;p&gt;PoW 即 Proof of Work 工作量证明，指系统为达到某一目标而设置的度量方法。简单理解就是一份证明，用来确认你做过一定量的工作。监测工作的整个过程通常是极为低效的，而通过对工作的结果进行认证来证明完成了相应的工作量，这个认证流程是非常简单高效的，这就是 PoW 的优势所在。&lt;/p&gt;&lt;p&gt;在 1993 年，&lt;a href=&#34;http://www.wisdom.weizmann.ac.il/~naor/PAPERS/pvp.ps&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Cynthia Dwork 和 Moni Naor 设计了一个系统用于反垃圾邮件、避免资源被滥用&lt;/a&gt;，这是 PoW 算法的雏形。其核心思想如下：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The main idea is to require a user to compute a moderately hard but not intractable function in order to gain access to the resource, thus preventing frivolous use.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;翻译成中文：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;其主要思想是要求用户计算一个中等难度但不难处理的函数，以获得对资源的访问，从而防止（系统资源被）滥用。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;在 1999 年，&lt;a href=&#34;https://link.springer.com/chapter/10.1007/978-0-387-35568-9_18&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Markus Jakobsson 与 Ari Juels 第一次从各种协议中提炼出 Proofs of Work 这个概念&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;POW 系统中一定有两个角色，工作者和验证者，他们需要具有以下特点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;工作者需要完成的工作必须有一定的量，这个量由工作验证者给出。&lt;/li&gt;&lt;li&gt;验证者可以迅速的检验工作量是否达标。&lt;/li&gt;&lt;li&gt;工作者无法自己&amp;quot;创造工作&amp;quot;，必须由验证者发布工作。&lt;/li&gt;&lt;li&gt;工作者无法找到很快完成工作的办法。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;说到这里，我们对 PoW 应该有足够的理解了，它就是让工作者消耗一定的资源作为使用系统的成本。对于正常的用户而言这部分被消耗的资源是完全可以接受的，但是对于恶意攻击者而言，它如果想滥用系统的资源或者发送海量的垃圾邮件，就需要消耗海量的计算资源作为成本，这样就极大地提升了攻击成本。&lt;/p&gt;&lt;p&gt;再总结下，PoW 算法的核心是&lt;strong&gt;它为信息发送加入了成本，降低了信息传递的速率&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;把比特币区块链转换成拜占庭将军问题来看，它的思路是这样的：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;限制一段时间内提案的个数，只有拥有对应权限的节点（将军）可以发起提案。&lt;ul&gt;&lt;li&gt;这是通过 PoW 工作量证明实现的，比特币区块链要求节点进行海量的哈希计算作为&lt;strong&gt;获得提案权限的代价&lt;/strong&gt;，算法难度每隔两周调整一次以保证整个系统找到正确 Hash 值的平均用时大约为 10 分钟。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;由强一致性放宽至最终一致性。&lt;ul&gt;&lt;li&gt;对应一次提案的结果不需要全部的节点马上跟进，只需要在节点能搜寻到的全网络中的所有链条中，选取最长的链条进行后续拓展就可以。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;使用非对称加密算法对节点间的消息传递提供签名技术支持，每个节点（将军）都有属于自己的秘钥（公钥私钥），唯一标识节点身份。&lt;ul&gt;&lt;li&gt;使用非对称加密算法传递消息，能够保证消息传递的私密性。而且消息签名不可篡改，这避免了消息被恶意节点伪造。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们前面有给出一个结论：&lt;strong&gt;拜占庭容错算法要求叛徒的比例必须低于 1/3&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;但是区块链与拜占庭将军问题的区别很大，举例如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;区块链允许任何节点随时加入或离开区块链，而拜占庭将军问题是预设了节点数，而且不考虑节点的添加或删除。&lt;/li&gt;&lt;li&gt;比特币区块链的 PoW 算法只能保证整个系统找到正确 Hash 值的&lt;strong&gt;平均用时&lt;/strong&gt;大约为 10 分钟，那肯定就存在性能更好的节点用时更短，性能更差的节点用时更长，甚至某些节点运气好几秒钟就算出了结果，这都是完全可能的。而越早算出这个 Hash 值的节点，它的提案（区块）成为最长链条的概率就越大。&lt;/li&gt;&lt;li&gt;PoW 由强一致性放宽至最终一致性，系统总会选取最长的链进行后续拓展，那如果某个链条一开始不长，但是它的拓展速度足够快，它就能成为最长的链条。而拜占庭将军问题不允许任何分支，只存在一个结果！&lt;ul&gt;&lt;li&gt;只是受限于算力，随着时间的推移，短的链条追上最长链条的概率会越来越小。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总之因为区块链这样的特点，它会产生一些跟拜占庭容错算法不同的结果：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;攻击者拥有的节点数量占比是毫无意义的，核心是算力，也就对应着区块链中的提案权。&lt;ul&gt;&lt;li&gt;即使攻击者拥有了 99% 的节点，但是它的总体算力很弱的话，它的提案（区块）成为最长链条的概率也会很低。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;区块链的 51% 攻击&lt;/strong&gt;：因为「系统总是选取最长链条进行后续拓展」这个原则，只有某个攻击者拥有了超过 50% 算力的情况下，它才拥有绝对性的优势，使它的区块在一定时间后一定能成为最长的链条，并且始终维持这样一个优势，从而达成攻击目的。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;至于 PoW 算法的具体实现，以及它的替代算法 PoS/PoH 等新兴算法的原理与实现，将在后续的区块链系列文章中详细介绍，尽请期待&amp;hellip;&lt;/p&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;《Designing Data-Intensive Applications - The Big Ideas Behind Reliable, Scalable, and Maintainable Systems (Martin Kleppmann)》&lt;/li&gt;&lt;li&gt;极客时间《分布式数据库 30 讲》&lt;/li&gt;&lt;li&gt;极客时间《分布式协议与算法实战》&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/34656939&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;分布式存储系统的一致性是什么？- OceanBase&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://pingcap.com/zh/blog/linearizability-and-raft&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;线性一致性和 Raft - PingCAP&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://int64.me/2020/%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B%E7%AC%94%E8%AE%B0.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;一致性模型笔记&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://zhangtielei.com/posts/blog-distributed-strong-weak-consistency.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;条分缕析分布式：浅析强弱一致性 -  张铁蕾&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/blog/products/databases/why-you-should-pick-strong-consistency-whenever-possible&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Why you should pick strong consistency, whenever possible - Google Spanner&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.infoq.cn/article/the-byzantine-generals-problem-and-blockchain&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;拜占庭将军问题与区块链&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://paper.seebug.org/1643/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;区块链协议安全系列— —当拜占庭将军犯错时，区块链共识还安全么？（上集）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.allthingsdistributed.com/2008/12/eventually_consistent.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Eventually Consistent - Revisited&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">Kubernetes 中的证书管理工具 - cert-manager</title><link href="https://thiscute.world/posts/kubernetes-cert-management/"/><id>https://thiscute.world/posts/kubernetes-cert-management/</id><author><name>ryan4yin</name></author><published>2022-07-31T15:11:46+08:00</published><updated>2022-07-31T15:11:46+08:00</updated><content type="html"><![CDATA[&lt;p&gt;我在之前的文章 &lt;a href=&#34;https://thiscute.world/posts/about-tls-cert/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt; 中，介绍了如何使用 openssl 生成与管理各种用途的数字证书，也简单介绍了如何通过 certbot 等工具与 ACME 证书申请与管理协议，进行数字证书的申请与自动更新（autorenew）。&lt;/p&gt;&lt;p&gt;这篇文章要介绍的 cert-mangager，跟 certbot 这类工具有点类似，区别在于它是工作在 Kubernetes 中的。&lt;/p&gt;&lt;p&gt;cert-manager 是一个证书的自动化管理工具，用于在 Kubernetes 集群中自动化地颁发与管理各种来源、各种用途的数字证书。它将确保证书有效，并在合适的时间自动更新证书。&lt;/p&gt;&lt;p&gt;多的就不说了，证书相关的内容请参见我的 &lt;a href=&#34;https://thiscute.world/posts/about-tls-cert/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt; 或者其他资料，现在直接进入正题。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;注：cert-manager 的管理对象是「证书」，如果你仅需要使用非对称加密的公私钥对进行 JWT 签名、数据加解密，可以考虑直接使用 &lt;a href=&#34;https://thiscute.world/posts/expirence-of-vault/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;secrets 管理工具 Vault&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;一部署&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80%e9%83%a8%e7%bd%b2&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、部署&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://cert-manager.io/docs/installation/helm/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://cert-manager.io/docs/installation/helm/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;官方提供了多种部署方式，使用 helm3 安装的方法如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看版本号&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm search repo jetstack/cert-manager -l &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 下载并解压 chart，目的是方便 gitops 版本管理&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm pull jetstack/cert-manager --untar --version 1.8.2&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm install &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  cert-manager ./cert-manager &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --namespace cert-manager &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --create-namespace &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 这会导致使用 helm 卸载的时候会删除所有 CRDs，可能导致所有 CRDs 资源全部丢失！要格外注意&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  --set &lt;span class=&#34;nv&#34;&gt;installCRDs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&#34;二创建-issuer&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8c%e5%88%9b%e5%bb%ba-issuer&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、创建 Issuer&lt;/h2&gt;&lt;p&gt;cert-manager 支持多种 issuer，你甚至可以通过它的标准 API 创建自己的 Issuer。&lt;/p&gt;&lt;p&gt;但是总的来说不外乎三种：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;由权威 CA 机构签名的「公网受信任证书」: 这类证书会被浏览器、小程序等第三方应用/服务商信任&lt;/li&gt;&lt;li&gt;本地签名证书: 即由本地 CA 证书签名的数字证书&lt;/li&gt;&lt;li&gt;自签名证书: 即使用证书的私钥为证书自己签名&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面介绍下如何申请公网证书以及本地签名证书。&lt;/p&gt;&lt;h3 id=&#34;1-通过权威机构创建公网受信证书&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e9%80%9a%e8%bf%87%e6%9d%83%e5%a8%81%e6%9c%ba%e6%9e%84%e5%88%9b%e5%bb%ba%e5%85%ac%e7%bd%91%e5%8f%97%e4%bf%a1%e8%af%81%e4%b9%a6&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 通过权威机构创建公网受信证书&lt;/h3&gt;&lt;p&gt;通过权威机构创建的公网受信证书，可以直接应用在边界网关上，用于给公网用户提供 TLS 加密访问服务，比如各种 HTTPS 站点、API。这是需求最广的一类数字证书服务。&lt;/p&gt;&lt;p&gt;cert-manager 支持两种申请公网受信证书的方式：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;ACME（Automated Certificate Management Environment (ACME) Certificate Authority server）&lt;/a&gt;证书自动化申请与管理协议。&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://cert-manager.io/docs/configuration/venafi/#creating-a-venafi-as-a-service-issuer&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;venafi-as-a-service&lt;/a&gt;: venafi 是一个证书的集中化管理平台，它也提供了 cert-manager 插件，可用于自动化申请 DigiCert/Entrust/GlobalSign/Let&amp;rsquo;s Encrypt 四种类型的公网受信证书。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里主要介绍使用 ACMEv2 协议申请公网证书，支持使用此开放协议申请证书的权威机构有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;免费服务&lt;ul&gt;&lt;li&gt;Let&amp;rsquo;s Encrypt: 众所周知，它提供三个月有效期的免费证书。&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zerossl.com/documentation/acme/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;ZeroSSL&lt;/a&gt;:  貌似也是一个比较有名的 SSL 证书服务&lt;ul&gt;&lt;li&gt;通过 ACME 协议支持不限数量的 90 天证书，也支持多域名证书与泛域名证书。&lt;/li&gt;&lt;li&gt;它提供了一个额外的 Dashboard 查看与管理所有申请的证书，这是比较方便的地方。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;付费服务&lt;ul&gt;&lt;li&gt;DigiCert: 这个非常有名（但也是相当贵），官方文档 &lt;a href=&#34;https://docs.digicert.com/certificate-tools/Certificate-lifecycle-automation-index/acme-user-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Digicert - Third-party ACME client automation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Google Public Authority(Google Trust Services): Google 推出的公网证书服务，也是三个月有效期，其根证书交叉验证了 GlobalSign，OCSP 服务器在国内速度也很快。&lt;ul&gt;&lt;li&gt;详见 &lt;a href=&#34;https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;acme.sh/wiki/Google-Public-CA&lt;/a&gt;&lt;/li&gt;&lt;li&gt;此功能目前（2022-08-10）仍处于 beta 状态，需要提表单申请才能获得使用&lt;/li&gt;&lt;li&gt;官方地址：https://pki.goog/&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Entrust: 官方文档 &lt;a href=&#34;https://www.entrust.com/knowledgebase/ssl/how-to-use-acme-to-install-ssl-tls-certificates-in-entrust-certificate-services-apache#step1&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Entrust&amp;rsquo;s ACME implementation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;GlobalSign: 官方文档 &lt;a href=&#34;https://www.globalsign.com/en/acme-automated-certificate-management&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;GlobalSign ACME Service&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这里也顺便介绍下收费证书服务对证书的分级，以及该如何选用：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Domain Validated（DV）证书&lt;ul&gt;&lt;li&gt;&lt;strong&gt;仅验证域名所有权&lt;/strong&gt;，验证步骤最少，价格最低，仅需要数分钟即可签发。&lt;/li&gt;&lt;li&gt;优点就是易于签发，很适合做自动化。&lt;/li&gt;&lt;li&gt;各云厂商（AWS/GCP/Cloudflare，以及 Vercel/Github 的站点服务）给自家服务提供的免费证书都是 DV 证书，Let&amp;rsquo;s Encrypt 的证书也是这个类型。&lt;ul&gt;&lt;li&gt;很明显这些证书的签发都非常方便，而且仅验证域名所有权。&lt;/li&gt;&lt;li&gt;但是 AWS/GCP/Cloudflare/Vercel/Github 提供的 DV 证书都仅能在它们的云服务上使用，不提供私钥功能！&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Organization Validated (OV) 证书&lt;ul&gt;&lt;li&gt;是企业 SSL 证书的首选，通过企业认证确保企业 SSL 证书的真实性。&lt;/li&gt;&lt;li&gt;除域名所有权外，CA 机构还会审核组织及企业的真实性，包括注册状况、联系方式、恶意软件等内容。&lt;/li&gt;&lt;li&gt;如果要做合规化，可能至少也得用 OV 这个级别的证书。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Extended Validation（EV）证书&lt;ul&gt;&lt;li&gt;最严格的认证方式，CA 机构会深度审核组织及企业各方面的信息。&lt;/li&gt;&lt;li&gt;被认为适合用于大型企业、金融机构等组织或企业。&lt;/li&gt;&lt;li&gt;而且仅支持签发单域名、多域名证书，不支持签发泛域名证书，安全性杠杠的。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ACME 支持 HTTP01 跟 DNS01 两种域名验证方式，其中 DNS01 是最简便的方法。&lt;/p&gt;&lt;p&gt;下面以 AWS Route53 为例介绍如何申请一个 Let&amp;rsquo;s Encrypt 证书。（其他 DNS 提供商的配置方式请直接看官方文档）&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://cert-manager.io/docs/configuration/acme/dns01/route53/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://cert-manager.io/docs/configuration/acme/dns01/route53/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&#34;11-aws-iam-授权&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#11-aws-iam-%e6%8e%88%e6%9d%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1.1 AWS IAM 授权&lt;/h4&gt;&lt;p&gt;首先需要为 EKS 集群创建 OIDC provider，参见 &lt;a href=&#34;https://github.com/ryan4yin/knowledge/blob/master/kubernetes/security/aws-iam-and-kubernetes.md&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;aws-iam-and-kubernetes&lt;/a&gt;，这里不再赘述。&lt;/p&gt;&lt;p&gt;cert-manager 需要查询与更新 Route53 记录的权限，因此需要使用如下配置创建一个 IAM Policy，可以命名为 &lt;code&gt;&amp;lt;ClusterName&amp;gt;CertManagerRoute53Access&lt;/code&gt;（注意替换掉 &lt;code&gt;&amp;lt;ClusterName&amp;gt;&lt;/code&gt;）：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;Version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2012-10-17&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;Statement&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;route53:GetChange&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Resource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;arn:aws:route53:::change/*&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;route53:ChangeResourceRecordSets&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;route53:ListResourceRecordSets&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;],&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Resource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;arn:aws:route53:::hostedzone/*&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Effect&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Allow&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;route53:ListHostedZonesByName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;Resource&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;比如使用 awscli 创建此 policy：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws iam create-policy &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --policy-name XxxCertManagerRoute53Access &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --policy-document file://cert-manager-route53-access.json&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后通过上述配置创建一个 IAM Role 并自动给 cert-manager 所在的 EKS 集群添加信任关系：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;AWS_ACCOUNT_ID&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;112233445566&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用 eksctl 自动创建对应的 role 并添加信任关系&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 需要先安装好 eksctl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;eksctl create iamserviceaccount &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --cluster &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; --name cert-manager --namespace cert-manager &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --role-name &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;CLUSTER_NAME&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-cert-manager-route53-role&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --attach-policy-arn &lt;span class=&#34;s2&#34;&gt;&amp;#34;arn:aws:iam::&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;AWS_ACCOUNT_ID&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;:policy/&amp;lt;ClusterName&amp;gt;CertManagerRoute53Access&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --role-only &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --approve&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;之后需要为 cert-manager 的 ServiceAccount 添加注解来绑定上面刚创建好的 IAM Role，首先创建如下 helm values 文件 &lt;code&gt;cert-manager-values.yaml&lt;/code&gt;:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 如果把这个改成 false，也会导致 cert-manager 的所有 CRDs 及相关资源被删除！&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;installCRDs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 注意修改这里的 ${AWS_ACCOUNT_ID} 以及 ${CLUSTER_NAME}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;eks.amazonaws.com/role-arn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;-&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sd&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;arn:aws:iam::${AWS_ACCOUNT_ID}:role/${CLUSTER_NAME}-cert-manager-route53-role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;securityContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 根据官方文档，还得修改下这个，允许 cert-manager 读取 ServiceAccount Token，从而获得授权&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fsGroup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1001&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后重新部署 cert-manager:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm upgrade -i cert-manager ./cert-manager -n cert-manager -f cert-manager-values.yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;这样就完成了授权。&lt;/p&gt;&lt;h4 id=&#34;12-创建-acme-issuer&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#12-%e5%88%9b%e5%bb%ba-acme-issuer&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1.2 创建 ACME Issuer&lt;/h4&gt;&lt;p&gt;在 xxx 名字空间创建一个 Iusser：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Issuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-prod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xxx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;acme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 用于接受域名过期提醒的邮件地址&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;user@example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ACME 服务器，比如 let&amp;#39;s encrypt、Digicert 等&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# let&amp;#39;s encrypt 的测试 URL，可用于测试配置正确性&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://acme-staging-v02.api.letsencrypt.org/directory&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# let&amp;#39;s encrypt 的正式 URL，有速率限制&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# server: https://acme-v02.api.letsencrypt.org/directory&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 用于存放 ACME 账号私钥的 Secret 名称，Issuer 创建时会自动生成此 secret&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privateKeySecretRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-staging&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# DNS 验证设置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;solvers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 在有多个 solvers 的情况下，会根据每个 solvers 的 selector 来确定优先级，选择其中合适的 solver 来处理证书申请事件&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 以 dnsZones 为例，越长的 Zone 优先级就越高&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 比如在为 www.sys.exapmle.com 申请证书时，sys.example.org 的优先级就比 example.org 更高&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dnsZones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;s2&#34;&gt;&amp;#34;example.org&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dns01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 使用 route53 进行验证&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;route53&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;region&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;us-east-1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# cert-manager 已经通过 ServiceAccount 绑定了 IAM Role&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这里不需要补充额外的 IAM 授权相关信息！&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;13-通过-acme-创建证书以及问题排查&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#13-%e9%80%9a%e8%bf%87-acme-%e5%88%9b%e5%bb%ba%e8%af%81%e4%b9%a6%e4%bb%a5%e5%8f%8a%e9%97%ae%e9%a2%98%e6%8e%92%e6%9f%a5&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1.3 通过 ACME 创建证书以及问题排查&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://cert-manager.io/docs/usage/certificate/#creating-certificate-resources&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://cert-manager.io/docs/usage/certificate/#creating-certificate-resources&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;证书的申请流程示意图如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(  &#43;---------&#43;  )&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  (  | Ingress |  ) Optional                                              ACME Only!&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  (  &#43;---------&#43;  )&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         |                                                     |&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         |   &#43;-------------&#43;      &#43;--------------------&#43;       |  &#43;-------&#43;       &#43;-----------&#43;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         |-&amp;gt; | Certificate |----&amp;gt; | CertificateRequest | ----&amp;gt; |  | Order | ----&amp;gt; | Challenge | &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;             &#43;-------------&#43;      &#43;--------------------&#43;       |  &#43;-------&#43;       &#43;-----------&#43;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                                               |&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;使用如下配置创建证书，并将证书保存到指定的 Secret 中：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io/v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Certificate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;xxx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Secret names are always required.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Istio Gateway/Ingress/Gateway API 都可以通过直接引用这个 secret 来添加 TLS 加密。&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tls-example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# secretTemplate is optional. If set, these annotations and labels will be&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# copied to the Secret named tls-example.com. These labels and annotations will&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# be re-reconciled if the Certificate&amp;#39;s secretTemplate changes. secretTemplate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# is also enforced, so relevant label and annotation changes on the Secret by a&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# third party will be overwriten by cert-manager to match the secretTemplate.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretTemplate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;my-secret-annotation-1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;my-secret-annotation-2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;my-secret-label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;2160h&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 90d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;renewBefore&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;360h&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 15d&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificatePrivateKey&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;privateKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;algorithm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ECDSA &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# RSA/ECDSA/Ed25519，其中 RSA 应用最广泛，Ed25519 被认为最安全&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;PKCS1 &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 对于 TLS 加密，通常都用 PKCS1 格式&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# RSA 默认为 2048，ECDSA 默认为 256，而 Ed25519 不使用此属性！&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rotationPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Always &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# renew 时总是重新创建新的私钥&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The use of the common name field has been deprecated since 2000 and is&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# discouraged from being used.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;commonName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# At least one of a DNS Name, URI, or IP address is required.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;dnsNames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.example.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;isCA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;usages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;server auth&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;client auth&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# uris:  # 如果想在证书的 subjectAltNames 中添加 URI，就补充在这里&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   - spiffe://cluster.local/ns/sandbox/sa/example&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# ipAddresses:  # 如果想在证书的 subjectAltNames 添加 ip 地址，就补充在这里&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#   - 192.168.0.5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 证书的补充信息&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 字段索引：https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.X509Subject&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;organizations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;xxx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Issuer references are always required.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;issuerRef&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;letsencrypt-prod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# We can reference ClusterIssuers by changing the kind here.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# The default value is Issuer (i.e. a locally namespaced Issuer)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Issuer&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This is optional since cert-manager will default to this value however&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# if you are using an external issuer, change this to that issuer group.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cert-manager.io&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;部署好 Certificate 后，describe 它就能看到当前的进度：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Events: &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Type    Reason     Age   From    Message &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  ----    ------     ----  ----    ------- &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Normal  Issuing    117s  cert-manager-certificates-trigger   Issuing certificate as Secret does not exist      &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Normal  Generated  116s  cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource &amp;#34;example.com-f044j&amp;#34;     &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Normal  Requested  116s  cert-manager-certificates-request-manager  Created new CertificateRequest resource &amp;#34;example.com-unv3d&amp;#34;   &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  Normal  Issuing    20s   cert-manager-certificates-issuing   The certificate has been successfully issued&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;如果发现证书长时间未 Ready，可以参照&lt;a href=&#34;https://cert-manager.io/docs/faq/acme/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;官方文档 - Troubleshooting Issuing ACME Certificates&lt;/a&gt;，按证书申请流程进行逐层排查：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先 cert-manager 发现 Certificate 描述的 Secret 不存在，于是启动证书申请流程&lt;/li&gt;&lt;li&gt;首先生成私钥，存放在一个临时 Secret 中&lt;/li&gt;&lt;li&gt;然后通过私钥以及 Certificate 资源中的其他信息，生成 CSR 证书申请请求文件&lt;ul&gt;&lt;li&gt;这也是一个 CRD 资源，可以通过 &lt;code&gt;kubectl get csr -n xxx&lt;/code&gt; 查看&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;接着将 CSR 文件提交给 ACME 服务器，申请权威机构签发证书&lt;ul&gt;&lt;li&gt;这对应 CRD 资源 &lt;code&gt;kubectl get order&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;对于上述 ACME 证书申请流程，Order 实际上会生成一个 DNS1 Challenge 资源&lt;ul&gt;&lt;li&gt;可以通过 &lt;code&gt;kubectl get challenge&lt;/code&gt; 检查此资源&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;challenge 验证通过后会逐层往回走，前面的 Order CSR 状态都会立即变成 valid&lt;/li&gt;&lt;li&gt;最终证书签发成功，Certificate 状态变成 Ready，所有 Order CSR challenge 资源都被自动清理掉。&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;14-通过-csi-driver-创建证书&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#14-%e9%80%9a%e8%bf%87-csi-driver-%e5%88%9b%e5%bb%ba%e8%af%81%e4%b9%a6&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1.4 通过 csi-driver 创建证书&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://cert-manager.io/docs/projects/csi-driver/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://cert-manager.io/docs/projects/csi-driver/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;直接使用 &lt;code&gt;Certificate&lt;/code&gt; 资源创建的证书，会被存放在 Kubernetes Secrets 中，被认为并非足够安全。而 cert-manager csi-driver 则避免了这个缺陷，具体而言，它提升安全性的做法有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;确保私钥仅保存在对应的节点上，并挂载到对应的 Pod，完全避免私钥被通过网络传输。&lt;/li&gt;&lt;li&gt;应用的每个副本都使用自己生成的私钥，并且能确保在 Pod 的生命周期中证书跟私钥始终存在。&lt;/li&gt;&lt;li&gt;自动 renew 证书&lt;/li&gt;&lt;li&gt;副本被删除时，证书就会被销毁&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总的说 csi-driver 主要是用来提升安全性的，有需要可以自己看文档，就不多介绍了。&lt;/p&gt;&lt;h3 id=&#34;2-通过私有-ca-颁发证书&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e9%80%9a%e8%bf%87%e7%a7%81%e6%9c%89-ca-%e9%a2%81%e5%8f%91%e8%af%81%e4%b9%a6&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 通过私有 CA 颁发证书&lt;/h3&gt;&lt;p&gt;Private CA 是一种企业自己生成的 CA 证书，通常企业用它来构建自己的 PKI 基础设施。&lt;/p&gt;&lt;p&gt;在 TLS 协议这个应用场景下，Private CA 颁发的证书仅适合在企业内部使用，必须在客户端安装上这个 CA 证书，才能正常访问由它签名的数字证书加密的 Web API 或者站点。&lt;strong&gt;Private CA 签名的数字证书在公网上是不被信任的&lt;/strong&gt;！&lt;/p&gt;&lt;p&gt;cert-manager 提供的 Private CA 服务有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://cert-manager.io/docs/configuration/vault/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Vault&lt;/a&gt;: 鼎鼎大名了，Vault 是一个密码即服务工具，可以部署在 K8s 集群中，提供许多密码、证书相关的功能。&lt;ul&gt;&lt;li&gt;开源免费&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/cert-manager/aws-privateca-issuer&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;AWS Certificate Manager Private CA&lt;/a&gt;: 跟 Vault 的 CA 功能是一致的，区别是它是托管的，由 AWS 负责维护。&lt;ul&gt;&lt;li&gt;每个 Private CA 证书：$400/month&lt;/li&gt;&lt;li&gt;每个签发的证书（仅读取了私钥及证书内容后才会收费）：按梯度一次性收费，0-1000 个以内是 $0.75 每个&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;其他的自己看文档&amp;hellip;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这个因为暂时用不上，所以还没研究，之后有研究再给补上。&lt;/p&gt;&lt;p&gt;TO BE DONE.&lt;/p&gt;&lt;h2 id=&#34;三cert-manager-与-istioingress-等网关集成&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%89cert-manager-%e4%b8%8e-istioingress-%e7%ad%89%e7%bd%91%e5%85%b3%e9%9b%86%e6%88%90&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;三、cert-manager 与 istio/ingress 等网关集成&lt;/h2&gt;&lt;p&gt;cert-manager 提供的 &lt;code&gt;Certificate&lt;/code&gt; 资源，会将生成好的公私钥存放在 Secret 中，而 Istio/Ingress 都支持这种格式的 Secret，所以使用还是挺简单的。&lt;/p&gt;&lt;p&gt;以 Istio Gateway 为例，直接在 Gateway 资源上指定 Secret 名称即可：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;79&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;80&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;example-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;istio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ingressgateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;servers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;product.example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;httpsRedirect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# sends 301 redirect for http requests&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8443&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;HTTPS&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tls&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;SIMPLE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# enables HTTPS on this port&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;credentialName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tls-example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This should match the Certificate secretName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;product.example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# This should match a DNS name in the Certificate&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;VirtualService&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;product.example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateways&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;example-gateway&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;route&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;destination&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Service&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;prod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;grpc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9090&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;9090&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;protocol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;TCP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;targetPort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8080&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;selector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sessionAffinity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ClusterIP&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;networking.istio.io/v1alpha3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;DestinationRule&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;product&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 定义了两个 subset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;subsets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;labels&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;---&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 其他 deployment 等配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;之后再配合 VirtualService 等资源，就可以将 Istio 跟 cert-manager 结合起来啦。&lt;/p&gt;&lt;h2 id=&#34;四将-cert-manager-证书挂载到自定义网关中&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%9b%9b%e5%b0%86-cert-manager-%e8%af%81%e4%b9%a6%e6%8c%82%e8%bd%bd%e5%88%b0%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bd%91%e5%85%b3%e4%b8%ad&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;四、将 cert-manager 证书挂载到自定义网关中&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;注意，千万别使用 &lt;code&gt;subPath&lt;/code&gt; 挂载，根据&lt;a href=&#34;https://kubernetes.io/docs/concepts/configuration/secret/#mounted-secrets-are-updated-automatically&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;官方文档&lt;/a&gt;，这种方式挂载的 Secret 文件不会自动更新！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;既然证书被存放在 Secret 中，自然可以直接当成数据卷挂载到 Pods 中，示例如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;apiVersion&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Pod&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;metadata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;containers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;nginx:latest&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumeMounts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tls-example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mountPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/certs/example.com&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;readOnly&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tls-example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;secretName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;tls-example.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;optional&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# default setting; &amp;#34;mysecret&amp;#34; must exist&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;对于 nginx 而言，可以简单地搞个 sidecar 监控下，有配置变更就 reload 下 nginx，实现证书自动更新。&lt;/p&gt;&lt;p&gt;或者可以考虑直接写个 k8s informer 监控 secret 的变更，有变更就直接 reload 所有 nginx 实例，总之实现的方式有很多种。&lt;/p&gt;&lt;h2 id=&#34;五注意事项&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%94%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;五、注意事项&lt;/h2&gt;&lt;p&gt;服务端 TLS 协议的配置有许多的优化点，有些配置对性能的提升是很明显的，建议自行网上搜索相关资料，这里仅列出部分相关信息。&lt;/p&gt;&lt;h3 id=&#34;ocsp-证书验证协议会大幅拖慢-https-协议的响应速度&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#ocsp-%e8%af%81%e4%b9%a6%e9%aa%8c%e8%af%81%e5%8d%8f%e8%ae%ae%e4%bc%9a%e5%a4%a7%e5%b9%85%e6%8b%96%e6%85%a2-https-%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%93%8d%e5%ba%94%e9%80%9f%e5%ba%a6&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;OCSP 证书验证协议会大幅拖慢 HTTPS 协议的响应速度&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://www.ssl.com/blogs/how-do-browsers-handle-revoked-ssl-tls-certificates/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://www.ssl.com/blogs/how-do-browsers-handle-revoked-ssl-tls-certificates/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://www.digicert.com/help/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://www.digicert.com/help/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;前面提到除了数字证书自带的有效期外，为了在私钥泄漏的情况下，能够吊销对应的证书，PKI 公钥基础设施还提供了 OCSP（Online Certificate Status Protocol）证书状态查询协议。&lt;/p&gt;&lt;p&gt;可以使用如下命令测试，确认站点是否启用了 ocsp stapling:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ openssl s_client -connect www.digicert.com:443 -servername www.digicert.com -status -tlsextdebug &amp;lt; /dev/null 2&amp;gt;&amp;amp;1 | grep -i &amp;#34;OCSP response&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;如果输出包含 &lt;code&gt;OCSP Response Status: successful&lt;/code&gt; 就说明站点支持 ocsp stapling，如果输出内容为 &lt;code&gt;OCSP response: no response sent&lt;/code&gt; 则说明站点不支持ocsp stapling。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;实际上 Google/AWS 等大多数站点都不会启用也不需要启用 ocsp stapling，一是因为它们自己就是证书颁发机构，OCSP 服务器也归它们自己管，不存在隐私的问题。二是它们的 OCSP 服务器遍布全球，也不存在性能问题。这种情况下开个 OCSP Stapling 反而是浪费流量，因为每次 TLS 握手都得发送一个 OCSP 状态信息。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;我测试发现只有 &lt;a href=&#34;https://www.digicert.com/www.douban.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;www.digicert.com/www.douban.com&lt;/a&gt; 等少数站点启用了 ocsp stapling，www.baidu.com/www.google.com/www.zhihu.com 都未启用 ocsp stapling.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这导致了一些问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Chrome/Firefox 等浏览器都会定期通过 OCSP 协议去请求 CA 机构的 OCSP 服务器验证证书状态，这可能会拖慢 HTTPS 协议的响应速度。&lt;ul&gt;&lt;li&gt;所谓的定期是指超过上一个 OCSP 响应的 &lt;code&gt;nextUpdate&lt;/code&gt; 时间（一般为 7 天），或者如果该值为空的话，Firefox 默认 24h 后会重新查询 OCSP 状态。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;因为客户端直接去请求 CA 机构的 OCSP 地址获取证书状态，这就导致 CA 机构可以获取到一些对应站点的用户信息（IP 地址、网络状态等）。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了解决这两个问题，&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc6066&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;rfc6066&lt;/a&gt; 定义了 OCSP stapling 功能，它使服务器可以提前访问 OCSP 获取证书状态信息并缓存到本地，基本 Nginx/Caddy 等各大 Web 服务器或网关，都支持 OCSP stapling 协议。&lt;/p&gt;&lt;p&gt;在客户端使用 TLS 协议访问 HTTPS 服务时，服务端会直接在握手阶段将缓存的 OCSP 信息发送给客户端。因为 OCSP 信息会带有 CA 证书的签名及有效期，客户端可以直接通过签名验证 OCSP 信息的真实性与有效性，这样就避免了客户端访问 OCSP 服务器带来的开销。&lt;/p&gt;&lt;p&gt;而另一个方法，就是选用 ocsp 服务器在目标用户区域速度快的 CA 机构签发证书。&lt;/p&gt;]]></content></entry><entry><title type="html">Death Is But a Dream</title><link href="https://thiscute.world/posts/death-is-but-a-dream/"/><id>https://thiscute.world/posts/death-is-but-a-dream/</id><author><name>ryan4yin</name></author><published>2022-05-24T02:17:00+08:00</published><updated>2022-05-24T02:17:00+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;我并不知道何时才是死期，&lt;br&gt;却日日问自己，&lt;br&gt;会不会有幽灵来牵我的手，&lt;br&gt;引我一路向西？&lt;br&gt;可他们看到的光明又在哪里？&lt;br&gt;会不会也为我亮起？&lt;br&gt;这一切快来吧，我已等不及！&lt;br&gt;——《红色地带的沉思》 by 临终患者 Patricia&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;我最近在看一本书，《在生命的尽头拥抱你-临终关怀医生手记》，它的英文原名即本文的标题。李白在《春夜宴从弟桃花园序》中写「而浮生若梦，为欢几何？」，仿照下文法，本文的标题「Death Is But a Dream」大概可以直译成「临终若梦」，跟此书的中文版名称有些不同的韵味在。&lt;/p&gt;&lt;p&gt;这书讲的是死亡的过程——临终梦境。随着年龄渐长，老一辈们慢慢老去，我们都不可避免地会越来越多地接触到死亡。这世间轮替更迭，爱恨情仇是不变的主题，但是死亡始终是配角，实在是因为每人一生都只有唯一一次机会去真正体味死亡，难有实感。而且死亡往往代表着终结，我们做为生者，当然更向往书写生者的世界。&lt;/p&gt;&lt;p&gt;救人一命胜造七级浮屠，珍爱生命是我们从小到大被教育的思想。但是这样的思想却也造成了许多悲剧，全世界有许多的患者痛苦不堪地活在世上，求死不能，最终在病魔的折磨下凄惨离世，如果我们能谨慎承认「死亡」的价值，从这个角度看也是拯救了许多的患者与家庭。&lt;/p&gt;&lt;p&gt;而关于死亡，在我亲身经历的几次长辈葬礼中，我发现父辈们对死亡大都看得很开，他们说「人总有一死，老人家过世了我们当子女的肯定要送最后一程，但是不需要想太多，魂归天地罢了。」，我佩服这种豁达。&lt;/p&gt;&lt;p&gt;但是说到临终梦境，我是真的没什么了解。我从来没跟长辈交流过生命末期的梦境，脑海中也挖掘不出相关的记忆。送走我爷爷的时候，看着爷爷因为呼吸困难而大口喘气，堂哥跪在我前面，双眼泛红隐含泪光，但我完全没有实感——一切都显得那么不真实。听着爷爷被痰堵塞气管、艰难的呼吸声，我甚至感到害怕，想要逃离。&lt;/p&gt;&lt;p&gt;爷爷过世后，奶奶就是一个人生活了，一个人起居、一个人给菜苗松土，然后在菜地里不小心跌了一跤，就随着爷爷去了。&lt;/p&gt;&lt;p&gt;我后来在爷爷奶奶房里一个壁橱上，找到三四枚铜钱，还沾着泥土，有些锈蚀痕迹。我把其中一枚通宝红线串好，贴身带了好几年，心情不好的时候就凝视着这枚铜钱黯然神伤，心情好的时候也要捂着它入睡。&lt;/p&gt;&lt;p&gt;我还喜欢上了戏曲，缠着同学读了她的《中国戏剧史》。大学的时候又喜欢上越剧，吴侬软语。又因为初中时学过点竹笛，喜欢上了传统乐曲，我对一些经典老歌也情有独钟。在很多同学跟同事的眼中，我的音乐品味是很「独特」的，这或许都源自爷爷奶奶的熏陶。实际上我小的时候并不喜欢戏剧，我跟爷爷奶奶去看庙戏的目的，通常都只是为了吃一碗凉粉，或者为了去玩耍、看个热闹。偶尔去爷爷奶奶家玩，也只是觉得他们太孤单了，跟他们随便聊聊天，实际上这么多年，跟爷爷奶奶看过的戏曲，我就没听懂过几句台词。&lt;/p&gt;&lt;p&gt;那是多少年前了呢？只知道是很多年前了，不仔细回忆回忆、掐指算算，都搞不清具体过了多少年月。这么多个日日夜夜里，我幼稚过、热血过，也迷茫过、颓废过，倒也不算庸庸碌碌，我还是知足的，这种心态貌似是被称作现充 emmm&lt;/p&gt;&lt;p&gt;高三时曾经看过一本超级喜欢的励志书，这么多年来我一直带在身边，名字叫《这一生再也不会有的奇遇》。书的扉页只有一句话：「当明天再也不是无限，你还会像今天一样度过你的人生吗？」&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/death-is-but-a-dream/an-adventure-that-will-never-happen-again-in-this-life_cover.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;《这一生再也不会有的奇遇》已陪我度过了七八个春秋&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img src=&#34;/images/death-is-but-a-dream/an-adventure-that-will-never-happen-again-in-this-life_title-page.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;当明天再也不是无限&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;写到这儿，我又想起我高中时还看过一本书《刺猬的优雅》，它同样陪伴我度过了四年大学岁月，后来又辗转到了深圳，但现在倒是不在身边。书中有几句话我印象深刻，放在这篇文章里也挺应景的：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;话又说回来，不能因为有想死的心，往后就要像烂菜帮一样的过日子，甚至应该完全相反。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;重要的不是死亡，而是在死亡的那一刻我们在做什么。&lt;br&gt;我在做什么呢？&lt;br&gt;我曾遇到一个人，而且我正准备爱上他。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;随意写下这些文字，脑子里各种想法恣意流淌，我打算提前写写我的临终遗言，把一切都准备好。&lt;/p&gt;&lt;p&gt;但在死亡到来之前，我仍要精彩的活！&lt;/p&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/35435120/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;《在生命的尽头拥抱你-临终关怀医生手记》&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=vh-nacCekR4&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Death Is But A Dream (2021) Official trailer&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=rbnBe-vXGQM&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;I See Dead People: Dreams and Visions of the Dying | Dr. Christopher Kerr | TEDxBuffalo&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.drchristopherkerr.com/tools&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;End-of-Life Experiences - Dr. Christopher Kerr&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/21174281/answer/122969510&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;有谁看过《刺猬的优雅》这本书吗？如何？ - 於清樂&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/52078970/answer/128900485&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;有什么人生中值得一读的小说或名著？（最好现代作家的书）？ - 於清樂&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">NAT 网关、NAT 穿越以及虚拟网络</title><link href="https://thiscute.world/posts/about-nat/"/><id>https://thiscute.world/posts/about-nat/</id><author><name>ryan4yin</name></author><published>2022-05-13T11:46:00+08:00</published><updated>2022-05-13T11:46:00+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;个人笔记，不一定正确&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;当前文章完成度 - 70%&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;前言&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%89%8d%e8%a8%80&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;NAT，即 Network Address Translation，是 IPv4 网络中非常重要的一个功能，用于执行 IP 地址与端口的转换。&lt;/p&gt;&lt;p&gt;IPv4 的设计者没预料到因特网技术的发展会如此之快，在设计时只使用了 32bits 的地址空间，随着因特网的飞速发展，它很快就变得不够用了。后来虽然设计了新的 IPv6 协议，但是它与 IPv4 不兼容，需要新的硬件设备以及各种网络程序支持，无法快速普及。&lt;/p&gt;&lt;p&gt;NAT 就是在 IPv6 普及前，临时解决 IPv4 地址空间不够用而开发的技术，通俗地讲 NAT 就是用来给 IPv4 续命的。它解决 IPv4 地址短缺问题的方法是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;每个家庭、组织、企业，在内部都使用局域网通讯，不占用公网 IPv4 资源&lt;/li&gt;&lt;li&gt;在局域网与上层网络的交界处（路由器），使用 NAT 技术进行 IP/port 转换，使用户能正常访问上层网络&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在曾经 IPv4 地址还不是特别短缺的时候，普通家庭的网络架构通常是：「家庭局域网」=&amp;gt;「NAT 网关（家庭路由器）」=&amp;gt;「因特网」。&lt;/p&gt;&lt;p&gt;但是互联网主要发展于欧美，因此许多欧美的组织与机构在初期被分配了大量的 IPv4 资源，而后入场的中国分配到的 IPv4 地址就不太能匹配上我们的人口。因此相比欧美，中国的 IPv4 地址是非常短缺的，即使使用上述这样的网络架构——也就是给每个家庭（或组织）分配一个 IPv4 地址——都有点捉襟见肘了。于是中国电信等运营商不得不再加一层 NAT，让多个家庭共用同一个 IP 地址，这时网络架构会变成这样：「家庭局域网」=&amp;gt;「NAT 网关（家庭路由器）」=&amp;gt;「广域网（由 ISP 管理）」=&amp;gt;「NAT 网关」=&amp;gt;「因特网」。&lt;/p&gt;&lt;p&gt;总的来说，NAT 是一项非常成功的技术，它成功帮 IPv4 续命了几十年，甚至到如今 2022 年，全球网络仍然是 IPv4 的天下。&lt;/p&gt;&lt;h2 id=&#34;nat-如何工作&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#nat-%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;NAT 如何工作&lt;/h2&gt;&lt;p&gt;NAT 的工作方式，使用图例描述是这样的：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-nat/NAT-demo.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;NAT 示例&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;从外部网络看一个 NAT 网关（一个启用了 NAT 的路由器），它只是拥有一个 IPv4 地址的普通设备，所有从局域网发送到公网的流量，其 IP 地址都是这个路由器的 WAN IP 地址，在上图中，这个 IP 地址是 &lt;code&gt;138.76.29.7&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;本质上，NAT 网关隐藏了家庭网络的细节，从外部网络上看，整个家庭网络就像一台普通的网络设备。&lt;/p&gt;&lt;p&gt;下面我们会学习到，上述这个 NAT 工作方式实际上是 NAPT，它同时使用 L3/L4 的信息进行地址转换工作。&lt;/p&gt;&lt;h2 id=&#34;nat-的地址映射方式&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#nat-%e7%9a%84%e5%9c%b0%e5%9d%80%e6%98%a0%e5%b0%84%e6%96%b9%e5%bc%8f&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;NAT 的地址映射方式&lt;/h2&gt;&lt;p&gt;NAT 的具体实现有许多的变种，不存在统一的规范，但是大体上能分为两种模型：「一对一 NAT」与「一对多 NAT」，下面分别进行介绍。&lt;/p&gt;&lt;h3 id=&#34;1-一对一-nat&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e4%b8%80%e5%af%b9%e4%b8%80-nat&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 一对一 NAT&lt;/h3&gt;&lt;p&gt;一对一 NAT，这种类型的 NAT 在 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc2663&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC2663&lt;/a&gt; 中被称为  Basic NAT。它在技术上比较简单，只利用网络层的信息，对 IP 地址进行转换。&lt;/p&gt;&lt;p&gt;简单的说，Basic NAT 要求每个内网 IP 都需要绑定一个唯一的公网 IP，才能连通外部网络。&lt;/p&gt;&lt;p&gt;其&lt;strong&gt;主要应用场景是，公网用户需要访问到内网主机&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;Basic NAT 有三种类型：「&lt;strong&gt;静态 NAT&lt;/strong&gt;」、「&lt;strong&gt;动态 NAT&lt;/strong&gt;」以及「&lt;strong&gt;NAT Server&lt;/strong&gt;」。&lt;/p&gt;&lt;p&gt;现在的很多家庭路由器都自带一个被称为 DMZ 主机的功能，它是「Demilitarized Zone」的缩写，意为隔离区。它允许将某一台内网主机设置为 DMZ 主机（或者叫隔离区主机，仅此主机可供外网访问），所有从外部进来的流量，都会被通过 Basic NAT 修改为对应的内网 IP 地址，然后直接发送到该主机。路由器的这种 DMZ 技术就是「静态 NAT」，因为 DMZ 主机对应的内网 IP 需要手动配置，不会动态变化。&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-nat/dmz-host-topology.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;DMZ 主机拓扑结构&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;而「&lt;strong&gt;动态 NAT&lt;/strong&gt;」则需要一个公网 IP 地址池，每次用户需要访问公网时，动态 NAT 会给它分配一个动态公网 IP 并自动配置相应的 NAT 规则，使用完再回收。&lt;/p&gt;&lt;p&gt;第三种是「&lt;strong&gt;NAT Server&lt;/strong&gt;」，云服务商提供的「&lt;strong&gt;公网 IP&lt;/strong&gt;」就是通过「&lt;strong&gt;NAT Server&lt;/strong&gt;」实现的，在云服务器中使用 &lt;code&gt;ip addr ls&lt;/code&gt; 查看你会发现，该主机上实际只配了局域网 IP 地址，但是它却能正常使用公网 IP 通信，原因就是云服务商在「&lt;strong&gt;NAT Server&lt;/strong&gt;」上为这些服务器配置了 IP 转发规则。为一台云服务器绑定一个公网 IP，实际上就是请求「&lt;strong&gt;NAT Server&lt;/strong&gt;」从公网 IP 地址池中取出一个，并配置对应的 NAT 规则到这台云服务器的局域网 IP。&lt;/p&gt;&lt;p&gt;示例如下，其中的 Internet Gateway 实际上就是个一对一 NAT Server：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-nat/aws-vpc-nat-internet-gateway.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;AWS VPC 中的 NAT 网关以及 Internet 网关&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;云服务 VPC 中的公有子网，实际上就是一个 DMZ(Demilitarized Zone) 隔离区，是不安全的。而私有子网则是安全区，公网无法直接访问到其中的主机。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;而「动态 NAT」则需要路由器维护一个&lt;strong&gt;公网 IP 地址池&lt;/strong&gt;，内网服务器需要访问公网时，动态 NAT 就从地址池中拿出一个公网 IP 给它使用，用完再回收。这种场景需要一个公网 IP 地址池，每当内部有服务需要请求外网时，就动态地为它分配一个公网 IP 地址，使用完再回收。&lt;/p&gt;&lt;p&gt;Basic NAT 的好处是，它仅工作在 L3 网络层，网络层上的协议都可以正常使用（比如 P2P），不需要啥「内网穿越」技术。&lt;/p&gt;&lt;h3 id=&#34;2-一对多-nat---napt&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e4%b8%80%e5%af%b9%e5%a4%9a-nat---napt&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 一对多 NAT - NAPT&lt;/h3&gt;&lt;p&gt;一对多 NAT，也被称为 NAPT（network address and port translation），同样在 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc2663#section-4.0&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC2663&lt;/a&gt; 中被定义。Easy IP 是 NAPT 的一个特殊形式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;NAPT 的主要应用场景是，内网用户需要访问到公网主机&lt;/strong&gt;。绝大多数的家庭网络、办公网络都是 NAPT 类型的。原因应该很好理解——家庭网络或办公网络都包含许多联网设备，但是这类网络通常只有一个或数个公网 IP，使用一对一 NAT 的话公网 IP 显然是不够用的，所以需要使用一对多 NAT.&lt;/p&gt;&lt;p&gt;NAPT 通过同时利用 L3 的 IP 信息，以及 L4 传输层的端口信息，来为局域网设备提供透明的、配置方便的、支持超高并发连接的外部网络通信，示意图如下：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-nat/napt.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;NAPT 的端口分配与转换规则（&lt;strong&gt;Mapping Behavior&lt;/strong&gt;）以及对外来流量的过滤规则（&lt;strong&gt;Filtering Behavior&lt;/strong&gt;）都存在许多不同的实现，没有统一的规范与标准，但是存在两种分类规范，这种分类方法主要用在 NAT 穿越技术中。&lt;/p&gt;&lt;h4 id=&#34;rfc3489-定义的-nat-类型四种&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#rfc3489-%e5%ae%9a%e4%b9%89%e7%9a%84-nat-%e7%b1%bb%e5%9e%8b%e5%9b%9b%e7%a7%8d&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;RFC3489 定义的 NAT 类型（四种）&lt;/h4&gt;&lt;p&gt;在 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc3489#section-5&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC3489&lt;/a&gt; 中将 NAPT 分为四种类型，这也是应用最为广泛的 NAT 分类方法，如下图：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-nat/nat-types-defined-in-stun.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;下面我们逐一介绍这四种不同的 NAPT 类型。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;从这里开始，下文中的 NAT 特指 NAPT，如果涉及「一对一 NAT」会使用它的全名。&lt;/p&gt;&lt;/blockquote&gt;&lt;h5 id=&#34;1-full-cone-nat&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-full-cone-nat&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. Full-cone NAT&lt;/h5&gt;&lt;p&gt;Full-cone NAT 的特点如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;数据包流出：一旦内部地址（iAddr:iPort）映射到外部地址（eAddr:ePort），所有发自 iAddr:iPort 的数据包都经由 eAddr:ePort 向外发送。&lt;/li&gt;&lt;li&gt;数据包流入：任意主机发送到 eAddr:ePort 的数据包，都能通过 NAT 到达 iAddr:iPort.&lt;ul&gt;&lt;li&gt;也就是不对外部进来的数据做任何限制，全部放行。&lt;/li&gt;&lt;li&gt;cone 圆锥，个人理解是一个比喻，任意发送进来的数据（多），都能通过 NAT 到达这个内部地址（一），就像一个圆锥。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;允许任意主机发送到 eAddr:ePort 的数据到达内部地址是很危险的行为，因为内部主机不一定配置了合适的安全策略。因此 &lt;strong&gt;Full-cone NAT 比较少见&lt;/strong&gt;，就算路由器等 NAT 设备支持 Full-cone NAT，通常也不会是默认选项。我们会在后面更详细地介绍它。&lt;/p&gt;&lt;h5 id=&#34;2-restricted-cone-nat&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-restricted-cone-nat&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. Restricted cone NAT&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;数据包流出：（跟 Full-cone NAT 完全一致）一旦内部地址（iAddr:iPort）映射到外部地址（eAddr:ePort），所有发自 iAddr:iPort 的数据包都经由 eAddr:ePort 向外发送。&lt;/li&gt;&lt;li&gt;数据包流入：只有内部地址（iAddr:iPort）主动连接过的外部主机（nAddr:any），发送到 eAddr:ePort 的数据包，才能通过 NAT 到达 iAddr:iPort.&lt;ul&gt;&lt;li&gt;跟 Full-cone NAT 的区别在于，它&lt;strong&gt;限制了外部主机的 IP 地址&lt;/strong&gt;。只有主动连接过的主机，才能发送数据到 NAT 内部。这&lt;strong&gt;提升了一些安全性&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;3-port-restricted-cone-nat&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-port-restricted-cone-nat&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. Port-Restricted cone NAT&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;数据包流出：（跟 Full-cone NAT 完全一致）一旦内部地址（iAddr:iPort）映射到外部地址（eAddr:ePort），&lt;strong&gt;所有发自 iAddr:iPort 的数据包都经由 eAddr:ePort 向外发送&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;数据包流入：只有内部地址（iAddr:iPort）主动连接过的外部程序（nAddr:nPort），发送到 eAddr:ePort 的数据包，才能通过 NAT 到达 iAddr:iPort.&lt;ul&gt;&lt;li&gt;与 Address-Restricted cone NAT 的区别在于，它&lt;strong&gt;同时限制了外部主机的 IP 与端口&lt;/strong&gt;，可以说是更&lt;strong&gt;进一步地提升了安全性。&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;4-symmetric-nat&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#4-symmetric-nat&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;4. Symmetric NAT&lt;/h5&gt;&lt;p&gt;Port-Restricted cone NAT 的数据流入流出规则导致一个问题：&lt;strong&gt;同一个内部地址只能映射到唯一的一个 NAT 外部地址，也就只能与唯一的一个外部程序通讯，不能并发请求多个外部地址&lt;/strong&gt;！这实际上限制了内部主机的最高并发连接数。而 Symmetric NAT 解决了这个问题，它的数据流入流出规则如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;数据包流出：同一个内部地址（iAddr:iPort）与不同外部主机（nAddr:nPort）的通信，会使用不同的 NAT 外部端口（eAddr:randomPort）。也就是说内部地址与 NAT 外部地址的关系也是&lt;strong&gt;一对多&lt;/strong&gt;！&lt;ul&gt;&lt;li&gt;通过允许端口的&lt;strong&gt;一对多映射&lt;/strong&gt;，实际上提升了每个内部地址（iAddr:iPort）的并发连接数上限（从 1 直接扩到了可用端口数上限）。&lt;strong&gt;这也是 NAT 穿越最大的难点，它导致 Symmetric NAT 的端口难以预测&lt;/strong&gt;！&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;数据包流入：只有内部地址（iAddr:iPort）主动连接过的外部程序（nAddr:nPort），发送到 eAddr:ePort 的数据包，才能通过 NAT 到达 iAddr:iPort.&lt;ul&gt;&lt;li&gt;这个数据流入规则，与 Port-Restricted cone NAT 是完全一致的。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;对称 NAT 是最安全的一种 NAT 结构，限制最为严格，应该也是应用最广泛的 NAT 结构&lt;/strong&gt;。但是它导致所有的 TCP 连接都只能由从内部主动发起，外部发起的 TCP 连接请求会直接被 NAT 拒绝，因此它也是 P2P 玩家最头疼的一种 NAT 类型。解决方案是通过 UDP 迂回实现连接的建立，我们会在后面讨论这个问题。&lt;/p&gt;&lt;h5 id=&#34;5-linux-中的-napt&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#5-linux-%e4%b8%ad%e7%9a%84-napt&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;5. Linux 中的 NAPT&lt;/h5&gt;&lt;p&gt;Linux 的网络栈中，可通过 &lt;code&gt;iptables/netfilter&lt;/code&gt; 的 &lt;code&gt;SNAT/MASQUERADE&lt;/code&gt; 实现 NAPT 网关，这种方式只能实现一个 Symmetric NAT.&lt;/p&gt;&lt;p&gt;也就是说绝大多数基于 Linux 实现的家庭局域网、Docker 虚拟网络、Kubernetes 虚拟网络、云服务的虚拟网络，都是 Symmetric NAT.&lt;/p&gt;&lt;p&gt;只有一些有 Full-cone NAT 需求的网吧、ISP 的 LSN(Large Scale NAT) 网关等组织，会使用非 Linux 内核的企业级路由器提供 Full-cone NAT 能力，这些设备可能是基于 FPGA 等专用芯片设计的。&lt;/p&gt;&lt;p&gt;想要将 Symmetric NAT 内的主机提供给外部访问，只能通过端口映射、一对一 NAT 等方式实现，后面会详细介绍这些方法。&lt;/p&gt;&lt;h4 id=&#34;rfc5389-定义的-nat-类型九种&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#rfc5389-%e5%ae%9a%e4%b9%89%e7%9a%84-nat-%e7%b1%bb%e5%9e%8b%e4%b9%9d%e7%a7%8d&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;RFC5389 定义的 NAT 类型（九种）&lt;/h4&gt;&lt;p&gt;RFC3489 这个早期 RFC 存在一些问题，问题之一就是它对 NAT 归类过于笼统，很多 NAPT 网关都无法很好的匹配上其中某个类别。&lt;/p&gt;&lt;p&gt;于是后来，RFC3489 被废弃并由 &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc5389&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC5389&lt;/a&gt; 来替代，在 RFC5389 中，将 Mapping Behavior（映射规则）和 Filtering Behavior（过滤规则）分开来，定义了 3 种 Mapping Behavior（映射规则）和 3 种 Filtering Behavior（过滤规则），一共有 9 种组合。&lt;/p&gt;&lt;h5 id=&#34;1-映射规则&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e6%98%a0%e5%b0%84%e8%a7%84%e5%88%99&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 映射规则&lt;/h5&gt;&lt;p&gt;三种映射规则如图所示，假设一个内网主机 HostX 的内网 IP 地址为 X，端口号为 x，经 NAT 映射后的外网 IP 地址为 M，端口号为 m。为方便描述，将内网的 Endpoint 记为 &lt;code&gt;Endpoint(X,x)&lt;/code&gt;，映射后外网的 Endpoint 记为 &lt;code&gt;Endpoint(M,m)&lt;/code&gt;。内网 &lt;code&gt;Endpoint(X,x)&lt;/code&gt; 发往外网 HostD1 的 IP 地址和端口号记为目的 &lt;code&gt;Endpoint(D1,d1)&lt;/code&gt;；发往外网 HostD2 的 IP 地址和端口号记为目的 &lt;code&gt;Endpoint(D2,d2)&lt;/code&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-nat/rfc5389-mapping-behavior.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;NAT 映射规则&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;EIM&lt;/strong&gt;(Endpoint-Independent Mapping) 外部地址无关映射&lt;ul&gt;&lt;li&gt;对于一个内网 &lt;code&gt;Endpoint(X,x)&lt;/code&gt;，其映射的外网 &lt;code&gt;Endpoint(M,m)&lt;/code&gt; 是固定的。即从相同的 &lt;code&gt;Endpoint(X,x)&lt;/code&gt; 发送到任何外部 IP 地址和任何外部端口的报文在 NAT 设备上使用相同的映射。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;ADM&lt;/strong&gt;(Address-Dependent Mapping) 外部地址相关映射：对于一个内网 &lt;code&gt;Endpoint(X,x)&lt;/code&gt;，发往目的 &lt;code&gt;Endpoint(D1,d1)&lt;/code&gt; 的报文，&lt;code&gt;Endpoint(X,x)&lt;/code&gt; 被映射成 &lt;code&gt;Endpoint(M1,m1)&lt;/code&gt;；发往目的 &lt;code&gt;Endpoint(D2,d2)&lt;/code&gt; 的报文，&lt;code&gt;Endpoint(X,x)&lt;/code&gt; 被映射成 &lt;code&gt;Endpoint(M2,m2)&lt;/code&gt;。只要D1=D2，不管d1和d2是多少，都有 &lt;code&gt;Endpoint(M1,m1)=Endpoint(M2,m2)&lt;/code&gt;。即从相同的 &lt;code&gt;Endpoint(X,x)&lt;/code&gt; 发送到相同外部 IP 地址和任何外部端口的报文在 NAT 设备上使用相同的映射。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;APDM&lt;/strong&gt;（Address and Port-Dependent Mapping）外部地址和端口相关映射：对于一个内网 &lt;code&gt;Endpoint(X,x)&lt;/code&gt;，发往目的 &lt;code&gt;Endpoint(D1,d1)&lt;/code&gt; 的报文，&lt;code&gt;Endpoint(X,x)&lt;/code&gt; 被映射成 &lt;code&gt;Endpoint(M1,m1)&lt;/code&gt;；发往目的 &lt;code&gt;Endpoint(D2,d2)&lt;/code&gt; 的报文， &lt;code&gt;Endpoint(X,x)&lt;/code&gt; 被映射成 &lt;code&gt;Endpoint(M2,m2)&lt;/code&gt;。只有当D1=D2，且d1=d2，才有 &lt;code&gt;Endpoint(M1,m1)=Endpoint(M2,m2)&lt;/code&gt;。即从相同的 Endpoint(X,x) 发送到相同外部IP地址和相同外部端口的报文在NAT设备上使用相同的映射。&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;2-过滤规则&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e8%bf%87%e6%bb%a4%e8%a7%84%e5%88%99&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 过滤规则&lt;/h5&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-nat/rfc5389-filtering-behavior.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;NAT 过滤规则&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;EIF&lt;/strong&gt;（Endpoint-Independent Filtering）外部地址无关过滤：对于一个内网 &lt;code&gt;Endpoint(X,x)&lt;/code&gt;，只要它曾经向外网发送过数据，外网主机就可以获取到它经 NAT 映射后的外网 &lt;code&gt;Endpoint(M,m)&lt;/code&gt; 。那么只要是发给 &lt;code&gt;Endpoint(M,m)&lt;/code&gt; 的报文，不管来源于 D1 还是 D2，都能被转换并发往内网，其他报文被过滤掉。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;ADF&lt;/strong&gt;（Address-Dependent Filtering）外部地址相关过滤：对于一个内网 &lt;code&gt;Endpoint(X,x)&lt;/code&gt; ，只有它曾经向 IP 地址为 D1 的外网主机发送过报文，那么来自外网 HostD1 返回的任何端口的报文，都能被转换并发往内网，其他报文被过滤掉。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;APDF&lt;/strong&gt;（Address and Port-Dependent Filtering）外部地址和端口相关过滤：对于一个内网 &lt;code&gt;Endpoint(X,x)&lt;/code&gt; ，只有它曾经向 IP 地址为 D1，端口号为 d1 的外网目的 &lt;code&gt;Endpoint(D1,d1)&lt;/code&gt; 发送过报文，那么也只有外网 HostD1 中来自&lt;code&gt;Endpoint(D1,d1)&lt;/code&gt;返回的报文，才能被转换并发往内网，其他报文被过滤掉。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;3-rfc3489-与-rfc5389-的-nat-类型定义关系&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-rfc3489-%e4%b8%8e-rfc5389-%e7%9a%84-nat-%e7%b1%bb%e5%9e%8b%e5%ae%9a%e4%b9%89%e5%85%b3%e7%b3%bb&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. RFC3489 与 RFC5389 的 NAT 类型定义关系&lt;/h5&gt;&lt;ul&gt;&lt;li&gt;Full Cone NAT 是 EIM 和 EIF 的组合。&lt;/li&gt;&lt;li&gt;Restricted Cone NAT 是 EIM 和 ADF 的组合。&lt;/li&gt;&lt;li&gt;Port Restricted Cone NAT 是 EIM 和 APDF 的组合。&lt;/li&gt;&lt;li&gt;Symmetric NAT 是 APDM 和 APDF 的组合。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;nat-的弊端&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#nat-%e7%9a%84%e5%bc%8a%e7%ab%af&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;NAT 的弊端&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;IP 会话的保持时效变短&lt;/strong&gt;：NAT 需要维护一个会话列表，如果会话静默时间超过一个阈值，将会被从列表中移除。&lt;ul&gt;&lt;li&gt;为了避免这种情况，就需要定期发送心跳包来维持 NAT 会话。俗称心跳保活&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;IP 跟踪机制失效&lt;/strong&gt;：一对多 NAT 使得多个局域网主机共用一个公网 IP，这导致基于公网 IP 进行流量分析的逻辑失去意义。&lt;ul&gt;&lt;li&gt;比如很多站点都加了基于 IP 的访问频率限制，这会造成局域网内多个用户之间的服务抢占与排队。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;NAT 的工作机制依赖于修改IP包头的信息，这会妨碍一些安全协议的工作&lt;/strong&gt;。&lt;ul&gt;&lt;li&gt;因为 NAT 篡改了 IP 地址、传输层端口号和校验和，这会导致 IP 层的认证协议彻底不能工作，因为认证目的就是要保证这些信息在传输过程中没有变化。&lt;/li&gt;&lt;li&gt;对于一些隧道协议，NAT 的存在也导致了额外的问题，因为隧道协议通常用外层地址标识隧道实体，穿过 NAT 的隧道会有 IP 复用关系，在另一端需要小心处理。&lt;/li&gt;&lt;li&gt;ICMP 是一种网络控制协议，它的工作原理也是在两个主机之间传递差错和控制消息，因为IP的对应关系被重新映射，ICMP 也要进行复用和解复用处理，很多情况下因为 ICMP 报文载荷无法提供足够的信息，解复用会失败。&lt;/li&gt;&lt;li&gt;IP 分片机制是在信息源端或网络路径上，需要发送的 IP 报文尺寸大于路径实际能承载最大尺寸时，IP 协议层会将一个报文分成多个片断发送，然后在接收端重组这些片断恢复原始报文。IP 这样的分片机制会导致传输层的信息只包括在第一个分片中，NAT难以识别后续分片与关联表的对应关系，因此需要特殊处理。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;nat-穿越---nat-traversal&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#nat-%e7%a9%bf%e8%b6%8a---nat-traversal&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;NAT 穿越 - NAT Traversal&lt;/h2&gt;&lt;p&gt;天下苦 NAT 久矣，尤其是对各种 P2P 玩家，如 NAS 玩家、P2P 游戏玩家，以及需要搭建 VPN 虚拟私有网络的网络管理员而言。在常见的联机游戏、BitTorrent 文件共享协议、P2P 聊天等点对点通讯场景中，通讯双方客户端通常都运行在家庭局域网中，也就是说中间隔着两层家庭路由器的 NAT，路由器的默认配置都是安全优先的，存在很多安全限制，直接进行 P2P 通讯大概率会失败。&lt;/p&gt;&lt;p&gt;为了穿越这些 NAT 网关进行 P2P 通讯，就需要借助 &lt;a href=&#34;https://en.wikipedia.org/wiki/NAT_traversal&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;NAT 穿越技术&lt;/a&gt;。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;这里讨论的前提是，你的网络只有单层 NAT，如果外部还存在公寓 NAT、ISP 广域网 NAT，那下面介绍的 NAT 提升技术实际上就没啥意义了。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&#34;1-dmz-主机或者定向-dnat-转发&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-dmz-%e4%b8%bb%e6%9c%ba%e6%88%96%e8%80%85%e5%ae%9a%e5%90%91-dnat-%e8%bd%ac%e5%8f%91&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 「DMZ 主机」或者「定向 DNAT 转发」&lt;/h3&gt;&lt;p&gt;最简单的方法是 DMZ 主机功能，前面已经介绍过了，DMZ 可以直接给内网服务器绑定路由器的外部 IP，从该 IP 进来的所有流量都会直接被发送给这台内网服务器。被指定的 DMZ 主机，其 NAT 类型将从 NAPT 变成一对一 NAT，而一对一 NAT 对 P2P 通讯而言是透明的，这样就可以愉快地玩耍了。&lt;/p&gt;&lt;p&gt;在 Linux 路由器上实现类似 DMZ 的功能，只需要两行 iptables 命令，这可以称作「定向 DNAT 转发」：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE &lt;span class=&#34;c1&#34;&gt;# 普通的SNAT&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iptables -t nat -A PREROUTING -i eth0 -j DNAT --to-destination 192.168.1.3 &lt;span class=&#34;c1&#34;&gt;# 将入站流量DNAT转发到内网主机192.168.1.3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;这两项技术的缺点是只能将一台主机提供给外网访问，而且将整台主机开放到公网实际上是很危险的，如果不懂网络&lt;strong&gt;很容易被黑客入侵&lt;/strong&gt;。&lt;/p&gt;&lt;h3 id=&#34;2-静态端口转发&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e9%9d%99%e6%80%81%e7%ab%af%e5%8f%a3%e8%bd%ac%e5%8f%91&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 静态端口转发&lt;/h3&gt;&lt;p&gt;退一步，可以直接用静态端口转发功能，就是在路由器上手动设置某个端口号的所有 TCP/UDP 流量，都直接 NAT 转发到到内网的指定地址。也就是往 NAT 的转发表中手动添加内容，示意图：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-nat/NAPT-en.svg&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;NAPT tables&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;设置好端口转发后，只要使用的是被设定的端口，NAT 对 P2P 通信而言将完全透明。绝大多数路由器都支持这项功能，NAS 发烧友们想玩 P2P 下载分享，基本都是这么搞的。&lt;/p&gt;&lt;h3 id=&#34;3-upnp-动态端口转发&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-upnp-%e5%8a%a8%e6%80%81%e7%ab%af%e5%8f%a3%e8%bd%ac%e5%8f%91&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. UPnP 动态端口转发&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;最流行的 UPnP 实现是 &lt;a href=&#34;https://github.com/miniupnp/miniupnp&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://github.com/miniupnp/miniupnp&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;静态端口转发对用户的技术要求较高，我作为一个网络小白，希望有一个傻瓜式的开关能让我愉快地玩耍 Xbox/PS5 联机游戏，该怎么办呢？你需要的只是在路由器上启用 UPnP(Universal Plug and Play) 协议，启用它后，内网游戏设备就可以通过 UPnP 向路由器动态申请一个端口号供其使用，UPnP 会自动配置对应的端口转发规则。&lt;strong&gt;现在新出的路由器基本都支持 UPnP 功能，它是最简单有效的 NAT 提升方式&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;UPnP 解决了「静态端口转发」需要手动配置的问题，在启用了 UPnP 后，对所有支持 UPnP 的内网程序而言，NAT 类型将提升到 Full-cone NAT.&lt;/p&gt;&lt;h3 id=&#34;4-nat-穿越协议---stunturnice&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#4-nat-%e7%a9%bf%e8%b6%8a%e5%8d%8f%e8%ae%ae---stunturnice&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;4. NAT 穿越协议 - STUN/TURN/ICE&lt;/h3&gt;&lt;p&gt;如果很不幸前面提到的「DMZ 主机」/「静态端口转发」/「UPnP」 三项技术，你的路由器都不支持，那你就只能借助 NAT 穿越协议了。&lt;/p&gt;&lt;p&gt;目前有如下几个 NAT 穿越协议标准：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc3489&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC3489&lt;/a&gt; Classic STUN&lt;ul&gt;&lt;li&gt;Classic STUN 是一个早期的 STUN 规范，它定义了一整套完整的 NAT 穿越方案，但是因为存在许多问题，已经被废弃。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5389&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC5389 - Simple Traversal of UDP Through NATs (STUN)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;RFC5389 所定义的 STUN 协议是对 Classic STUN 的改进，它的定位不再是一个完整的 NAT 穿越解决方案，而是作为其他协议（例如SIP、FTP、DNS）处理 NAT 穿越问题的一个工具。&lt;/li&gt;&lt;li&gt;其可以用于检查网络中NAT设备的存在，并确定两个通信端点被NAT设备分配的IP地址和端口号。然后，通过ICE（Interactive Connectivity Establishment），自动创建一条能够进行NAT穿越的数据通道。&lt;/li&gt;&lt;li&gt;STUN 支持除 Symmetric NAT 之外的另外三种 NAT 类型&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://tools.ietf.org/html/rfc5766&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC5766 - Traversal Using Relays around NAT (TURN)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;TURN 在 STUN 协议之上添加了一个中继，以确保在无法实现 NAT 穿越的情况下，可以 fallback 到直接使用中继服务器进行通信。&lt;/li&gt;&lt;li&gt;这个中继的原理类似反向代理，单纯负责数据的转发&lt;/li&gt;&lt;li&gt;在美国有一项数据表示在进行 P2P 穿越的时候，穿越成功的概率为 70%，但是在国内这个成功率 50% 可能都到不了。因此就有必要使用 TURN 协议，这样才能保证在穿越失败的情况下，用户仍然能正常通信。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8445&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC8445 - Interactive Connectivity Establishment (ICE)&lt;/a&gt;&lt;ul&gt;&lt;li&gt;一个 NAT 穿越的协商协议，它统一了 STUN 与 TURN 两种协议，会尝试遍历所有可能的连接方案。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总的来说，标准的 NAT 穿越协议优先使用打洞（&lt;strong&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hole_punching_%28networking%29&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;NAT Hole Pounching&lt;/a&gt;&lt;/strong&gt;）技术，如果打洞失败，就使用中继服务器技术兜底，确保能成功穿越。&lt;/p&gt;&lt;h4 id=&#34;stunturnice-的-nat-类型检测&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#stunturnice-%e7%9a%84-nat-%e7%b1%bb%e5%9e%8b%e6%a3%80%e6%b5%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;STUN/TURN/ICE 的 NAT 类型检测&lt;/h4&gt;&lt;p&gt;RFC5389 定义了对 NAT 映射类型以及过滤类型的检测方法。&lt;/p&gt;&lt;p&gt;TBD&lt;/p&gt;&lt;h4 id=&#34;stunturnice-协议如何实现-nat-打洞&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#stunturnice-%e5%8d%8f%e8%ae%ae%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0-nat-%e6%89%93%e6%b4%9e&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;STUN/TURN/ICE 协议如何实现 NAT 打洞&lt;/h4&gt;&lt;p&gt;首先 P2P 双方如果只隔着 0-1 层 NAT，那是不需要使用 NAT 打洞技术的，可以直连或者反向连接。&lt;/p&gt;&lt;p&gt;下面就讨论下 P2P 双方隔着 2 层及以上 NAT 的场景下，如何利用 UDP 协议实现 NAT 打洞。&lt;/p&gt;&lt;p&gt;一个完整的 NAT 打洞方案，需要包含如下功能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A 跟 B 需要知道对方的公网 IP 以及监听的端口号&lt;ul&gt;&lt;li&gt;解决方法：需要一个公网&lt;strong&gt;中介&lt;/strong&gt;来介绍双方认识（交换 IP/port）&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;NAT 连通性测试，需要借助公网主机，&lt;strong&gt;检测双方中间网络的类型&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;针对不同的 NAT 类型，存在哪些穿越手段？以何种顺序进行&lt;strong&gt;穿越尝试&lt;/strong&gt;？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;NAT 打洞可以使用 UDP/TCP 两种 L4 协议，但是 TCP 面向连接的特性使它在这个场景中限制性更大（具体限制见参考文章，我有空再补充），因此各种 NAT 穿越协议通常都基于 UDP 实现。&lt;/p&gt;&lt;p&gt;此外，因为 NAT 的具体行为是非标准化的，路由器的防火墙策略也存在很大变动空间，再有就是 RF3489 的这种 NAT 分类方法不够精确，这些因素导致 NAT 穿透能否成功通常都是谈概率。&lt;/p&gt;&lt;h5 id=&#34;1-a-与-b-在同一局域网中&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-a-%e4%b8%8e-b-%e5%9c%a8%e5%90%8c%e4%b8%80%e5%b1%80%e5%9f%9f%e7%bd%91%e4%b8%ad&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. A 与 B 在同一局域网中&lt;/h5&gt;&lt;p&gt;这是最简单的情况，最佳方案是直接走内网通讯，不经过 NAT.&lt;/p&gt;&lt;p&gt;第二个方案是，这两个同一局域网内的客户端不走内网，仍然通过 NAT 通讯。这种通讯方式被称作「回环 NAT(Loopback NAT)」或者「发夹 NAT(Hairpin NAT)」。对于不支持或未启用「Hairpin NAT」的网关设备而言，这样的通讯尝试将会失败！&lt;/p&gt;&lt;h5 id=&#34;2-a-与-b-分别在不同的局域网中&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-a-%e4%b8%8e-b-%e5%88%86%e5%88%ab%e5%9c%a8%e4%b8%8d%e5%90%8c%e7%9a%84%e5%b1%80%e5%9f%9f%e7%bd%91%e4%b8%ad&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. A 与 B 分别在不同的局域网中&lt;/h5&gt;&lt;p&gt;这样实际上 A 与 B 中间就隔了两个 NAT 网关，这是最普遍的一种情况。&lt;/p&gt;&lt;p&gt;STUN/TURN 的 NAT 穿透流程大致如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先，A 跟 B 两个程序启动时，需要把自己的内外网 IP 及端口信息上报到一台中介服务器 S&lt;/li&gt;&lt;li&gt;现在假设 A 想要跟 B 建立一个 P2P 连接，首先他们需要从 S 获得对方的 ID&lt;/li&gt;&lt;li&gt;A 将 B 的 ID 发送给中介服务器 S，请求与 B 建立 P2P 连接&lt;/li&gt;&lt;li&gt;中介服务器将 B 的内外网 IP 及端口信息发送给 A，同时将 A 的网络信息发送给 B&lt;/li&gt;&lt;li&gt;A 尝试请求 B 的公网地址 &lt;code&gt;B_public_ip:B_public_port&lt;/code&gt;&lt;ul&gt;&lt;li&gt;这肯定会失败，但是会在 A 的 NAT 网关上留下记录：A 曾经请求过这个地址，那之后这个地址发到 A 的 NAT 网关的流量就可以进来了。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;B 尝试请求 A 的公网地址 &lt;code&gt;A_public_ip:A_public_port&lt;/code&gt;&lt;ul&gt;&lt;li&gt;同样这肯定也会失败，但是会在 B 的 NAT 网关上流量记录：B 曾经请求过这个地址，那之后这个地址发到 B 的 NAT 网关的流量就可以进来了&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;中间的两层 NAT 网关均形成 NAT 穿越记录，&lt;strong&gt;穿越完成&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;现在 A 尝试请求 B 的公网地址 &lt;code&gt;B_public_ip:B_public_port&lt;/code&gt;，由于 B 的 NAT 已有记录，流量顺利通过 NAT 到达程序 B&lt;/li&gt;&lt;li&gt;B 发送给 A 的数据也同样，可以顺利到达 A&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上述流程中的关键点在于，如何查出内网服务器被 NAT 分配的外部 IP 及端口，只要有了这两个信息，就可以通过 STUN 中介服务器交换这个信息，然后完成连接的建立了。家庭服务器通常都只有一个公网 IP，所以基本可以认为 IP 是固定的，因此最关键的问题就是「&lt;strong&gt;如何知道 NAT 为会话分配的端口地址&lt;/strong&gt;」。&lt;/p&gt;&lt;p&gt;对端口的限制严格程度跟 NAPT 的类型有关，&lt;strong&gt;Full-cone 跟 Restricted cone 对端口都没有任何限制，所以上述流程肯定可以成功&lt;/strong&gt;；&lt;/p&gt;&lt;p&gt;TBD&lt;/p&gt;&lt;p&gt;一个穿越 Symmetric NATs 的 STUN 草案：&lt;a href=&#34;https://tools.ietf.org/id/draft-takeda-symmetric-nat-traversal-00.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Symmetric NAT Traversal using STUN&lt;/a&gt;&lt;/p&gt;&lt;p&gt;在使用 STUN/TURN 进行 NAT 穿越时，支持的的 NAT 类型如下表。行与列分别代表双方的 NAT 类型，✅ 表示支持 UDP 穿越，❌ 表示 TURN 无法进行 UDP 穿越：&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;NAT 类型&lt;/th&gt;&lt;th&gt;Full Cone&lt;/th&gt;&lt;th&gt;Restricted&lt;/th&gt;&lt;th&gt;Port-Restricted&lt;/th&gt;&lt;th&gt;Symmetric&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;Full Cone&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Restricted&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Port-Restricted&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;❌&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Symmetric&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;✅&lt;/td&gt;&lt;td&gt;❌&lt;/td&gt;&lt;td&gt;❌&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;这种场景下 TURN 协议给出的解决方案是，fallback 到中继服务器策略作为兜底方案，保证连接能成功，但是这会给中继服务器带来很大压力，延迟等参数将不可避免地变差。&lt;/p&gt;&lt;h5 id=&#34;3-a-与-b-之间隔着三层以上的-nat&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-a-%e4%b8%8e-b-%e4%b9%8b%e9%97%b4%e9%9a%94%e7%9d%80%e4%b8%89%e5%b1%82%e4%bb%a5%e4%b8%8a%e7%9a%84-nat&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. A 与 B 之间隔着三层以上的 NAT&lt;/h5&gt;&lt;p&gt;这种情况较为常见的有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ISP 为了节约使用公网 IP，给用户分配了个广域网 IP，中间就多了个广域网 NAT&lt;/li&gt;&lt;li&gt;大城市的各种租房公寓通常只会从 ISP 购买一两根宽带，二次分销给整栋楼的租客共用，这就造成中间多了一层公寓的 NAT&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这是最复杂的一种情况，基本上就没什么 NAT 穿透的希望了，只能走下面介绍的兜底策略——服务器中继。&lt;/p&gt;&lt;p&gt;TBD 待续&lt;/p&gt;&lt;h5 id=&#34;4-特殊穿越方案---服务器中继&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#4-%e7%89%b9%e6%ae%8a%e7%a9%bf%e8%b6%8a%e6%96%b9%e6%a1%88---%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%ad%e7%bb%a7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;4. 特殊穿越方案 - 服务器中继&lt;/h5&gt;&lt;p&gt;Relay 服务器中继是兼容性最佳，但是性能最差的方案，因为这个方案下，所有的 P2P 连接都需要经过中继服务器转发，在使用人数众多时这会给中继服务器造成很大的压力。&lt;/p&gt;&lt;p&gt;因此这个方案通常是用于兜底的。&lt;/p&gt;&lt;h3 id=&#34;特定协议的自穿越技术&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e7%89%b9%e5%ae%9a%e5%8d%8f%e8%ae%ae%e7%9a%84%e8%87%aa%e7%a9%bf%e8%b6%8a%e6%8a%80%e6%9c%af&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;特定协议的自穿越技术&lt;/h3&gt;&lt;p&gt;在所有方法中最复杂也最可靠的就是自己解决自己的问题。比如 IKE 和 IPsec 技术，在设计时就考虑了到如何穿越 NAT 的问题。因为这个协议是一个自加密的协议并且具有报文防修改的鉴别能力，其他通用方法爱莫能助。因为实际应用的 NAT 网关基本都是 NAPT 方式，所有通过传输层协议承载的报文可以顺利通过 NAT。IKE 和 IPsec 采用的方案就是用 UDP 在报文外面再加一层封装，而内部的报文就不再受到影响。IKE 中还专门增加了 NAT 网关是否存在的检查能力以及绕开 NAT 网关检测 IKE 协议的方法。&lt;/p&gt;&lt;h3 id=&#34;nat-algapplication-level-gateway&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#nat-algapplication-level-gateway&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;NAT ALG(Application Level Gateway)&lt;/h3&gt;&lt;p&gt;NAT ALG 是一种解决应用层协议（例如DNS、FTP）报文穿越 NAT 的技术，已经被 NAT 设备产商广泛采用，是 NAT 设备的必备功能。&lt;/p&gt;&lt;p&gt;TLDR 一句话介绍：NAT ALG 通过识别协议，直接修改报文数据部分（payload）的 IP 地址和端口信息，解决某些应用协议的报文穿越 NAT 问题。NAT ALG 工作在 L3-L7 层。&lt;/p&gt;&lt;p&gt;NAT ALG 的原理是利用带有 ALG 功能的 NAT 设备对特定应用层协议的支持，当设备检测到新的连接请求时，先根据传输层端口信息判断是否为已知应用类型。如果判断为已知应用，则调用该应用协议的 ALG 功能对报文的深层内容进行检查。若发现任何形式表达的 IP 地址和端口信息，NAT 都会将这些信息同步进行转换，并为这个新的连接建立一个附加的转换表项。当报文到达外网侧的目的主机时，应用层协议中携带的信息就是 NAT 设备转换后的IP地址和端口号，这样，就可以解决某些应用协议的报文穿越 NAT 问题。&lt;/p&gt;&lt;p&gt;目前支持NAT ALG功能的协议包括：DNS、FTP、SIP、PPTP和RTSP。NAT ALG 在对这些特定应用层协议进行 NAT 转换时，通过 NAT 的状态信息来改变封装在 IP 报文数据部分的特定数据，最终使应用层协议可以跨越不同范围运行。&lt;/p&gt;&lt;h2 id=&#34;使用-go-实验-nat-穿透&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%bd%bf%e7%94%a8-go-%e5%ae%9e%e9%aa%8c-nat-%e7%a9%bf%e9%80%8f&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;使用 Go 实验 NAT 穿透&lt;/h2&gt;&lt;p&gt;Go 可用的 NAT 穿越库有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/coturn/coturn&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;coturn&lt;/a&gt;: 貌似是最流行的 STUN/TURN/ICE server&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/ccding/go-stun&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;go-stun&lt;/a&gt;: 一个简洁的 stun client 实现，大概适合用于学习？&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/pion/turn&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;pion/turn&lt;/a&gt;: 一个 STUN/TURN/ICE client/client 实现&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/pion/ice&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;pion/ice&lt;/a&gt;: 一个 ice 实现&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;TBD 待完善&lt;/p&gt;&lt;h2 id=&#34;虚拟网络overlay-与-underlay&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e8%99%9a%e6%8b%9f%e7%bd%91%e7%bb%9coverlay-%e4%b8%8e-underlay&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;虚拟网络、Overlay 与 Underlay&lt;/h2&gt;&lt;p&gt;虚拟网络就是在物理网络之上，构建的逻辑网络，也被称作 overlay 网络。比如 AWS VPC、Docker 容器网络、QEMU 的默认网络，都是虚拟网络。&lt;/p&gt;&lt;p&gt;而 underlay 网络，则是指承载 overlay 网络的底层网络。我个人理解，它是一个相对的概念，物理网络一定是 underlay 网络，但是虚拟网络之上如果还承载了其他虚拟网络（套娃），那它相对上层网络而言，也是一个 underlay 网络。&lt;/p&gt;&lt;p&gt;overlay 本质上就是一种隧道技术，将原生态的二层数据帧报文进行封装后通过隧道进行传输。常见的 overlay 网络协议主要是 vxlan 以及新一代的 geneve，它俩都是使用 UDP 包来封装链路层的以太网帧。&lt;/p&gt;&lt;p&gt;vxlan 在 2014 年标准化，而 geneve 在 2020 年底才通过草案阶段，目前尚未形成最终标准。但是目前 linux/cilium 都已经支持了 geneve.&lt;/p&gt;&lt;p&gt;geneve 相对 vxlan 最大的变化，是它更灵活——它的 header 长度是可变的。&lt;/p&gt;&lt;p&gt;目前所有 overlay 的跨主机容器网络方案，几乎都是基于 vxlan 实现的（例外：cilium 也支持 geneve）。&lt;/p&gt;&lt;p&gt;vxlan/geneve 的详细介绍，参见 &lt;a href=&#34;https://thiscute.world/posts/linux-virtual-network-interfaces/#vxlan-geneve&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Linux 中的虚拟网络接口 - vxlan/geneve&lt;/a&gt;&lt;/p&gt;&lt;p&gt;顺带再提一嘴，cilium/calico/kube-ovn 等 overlay 容器网络，都是 SDN 软件定义网络。&lt;/p&gt;&lt;h3 id=&#34;相关工具&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e7%9b%b8%e5%85%b3%e5%b7%a5%e5%85%b7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;相关工具&lt;/h3&gt;&lt;p&gt;有一些专门用于跨网搭建私有虚拟网络的工具，由于家庭网络设备前面通常都有至少一层 NAT（家庭路由器），因此这些工具都重度依赖 NAT 穿越技术。如果 NAT 层数太多无法穿越，它们会 fallback 到代理模式，也就是由一台公网服务器进行流量中继，但是这会对中继服务器造成很大压力，延迟跟带宽通常都会差很多。&lt;/p&gt;&lt;p&gt;如下是两个比较流行的 VPN 搭建工具：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/zerotier/ZeroTierOne&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;zerotier&lt;/a&gt;: 在 P2P 网络之上搭建的 SDN overlay 网络，使用自定义协议。&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/tailscale/tailscale&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;tailscales&lt;/a&gt;: 基于 wireguard 协议快速搭建私有虚拟网络 VPN&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;vpn-协议&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#vpn-%e5%8d%8f%e8%ae%ae&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;VPN 协议&lt;/h3&gt;&lt;p&gt;主流的 VPN 协议有：PPTP、L2TP、IPSec、OpenVPN、SSTP，以及最新潮的 Wireguard.&lt;/p&gt;&lt;p&gt;TBD&lt;/p&gt;&lt;h2 id=&#34;拓展知识&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e6%8b%93%e5%b1%95%e7%9f%a5%e8%af%86&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;拓展知识&lt;/h2&gt;&lt;h3 id=&#34;symmetric-nat-允许的最大并发-tcp-连接数是多少&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#symmetric-nat-%e5%85%81%e8%ae%b8%e7%9a%84%e6%9c%80%e5%a4%a7%e5%b9%b6%e5%8f%91-tcp-%e8%bf%9e%e6%8e%a5%e6%95%b0%e6%98%af%e5%a4%9a%e5%b0%91&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Symmetric NAT 允许的最大并发 TCP 连接数是多少？&lt;/h3&gt;&lt;p&gt;TCP 并发连接数受许多参数的限制，以 Linux 服务器为例，默认参数无法满足需要，通常都会手动修改它的参数，放宽文件描述符限制以及 TCP 连接队列、缓存相关的限制。&lt;/p&gt;&lt;p&gt;单纯从网络协议层面分析，对于一个仅有一个公网 IP 的 Symmetric NAT 网关，它与某个外部站点 &lt;code&gt;http://x.x.x.x:xx&lt;/code&gt; 要建立连接。考虑到 TCP 连接的定义实际上是一个四元组 &lt;code&gt;(srcIP, srcPort, dstIP, dstPort)&lt;/code&gt;，其中就只有 NAT 网关自己的 &lt;code&gt;srcPort&lt;/code&gt; 是唯一的变量了，而端口号是一个 16bits 数字，取值范围为 0 - 65535。此外低于 1024 的数字是操作系统的保留端口，因此 NAT 一般只会使用 1024-65535 这个区间的端口号，也就是说这个 NAT 网关最多只能与该站点建立 64512 个连接。&lt;/p&gt;&lt;p&gt;那么对于不同的协议 NAT 是如何处理的呢？NAT 肯定可以通过协议特征区分不同协议的流量，因此不同协议通过 NAT 建立的并发连接不会相互影响。&lt;/p&gt;&lt;p&gt;对于家庭网络而言 64512 个连接已经完全够用了，但是对于数据中心或者云上的 VPC 而言，就不一定够用了。举个例子，在 &lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;AWS NAT 网关的文档&lt;/a&gt;中就有提到，AWS NAT 网关最高支持与每个不同的地址建立 55000 个并发连接。destination 的 IP 地址、端口号、(TCP/UDP/ICMP) 任一个发生改变，都可以再建立其他 55000 个并发连接。如果超过这个限制，就会发生「ErrorPortAllocation」错误。如果在 AWS 上遇到这个错误，那就说明你们的云上网络规划有问题了。&lt;/p&gt;&lt;p&gt;当然除了端口限制外，受限于 NAT 硬件、以太网协议以及其他影响，NAT 网关肯定还有包处理速率、带宽的限制，这个就略过不提了。&lt;/p&gt;&lt;h3 id=&#34;aws-vpc-与-nat&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#aws-vpc-%e4%b8%8e-nat&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;AWS VPC 与 NAT&lt;/h3&gt;&lt;p&gt;AWS VPC(virtual private cloud) 是一个逻辑隔离的虚拟私有网络，云服务架构的最佳实践之一就是通过 VPC 搭建云上私有网络，提升网络安全性。&lt;/p&gt;&lt;p&gt;AWS VPC 提供两种网关类型：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/vpc-nat-gateway.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;NAT 网关&lt;/a&gt;&lt;ul&gt;&lt;li&gt;支持三种协议：TCP, UDP, ICMP&lt;/li&gt;&lt;li&gt;支持 IPv4 与 IPv6 两种 IP 协议&lt;/li&gt;&lt;li&gt;支持 5 Gbps 带宽，可自动扩展到 45 Gbps&lt;ul&gt;&lt;li&gt;可通过划分子网并在多个子网中添加 NAT 网关的方式，获得超过 45Gbps 的带宽&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;最高支持与每个不同的地址建立 55000 个并发连接&lt;/li&gt;&lt;li&gt;NAT 网关从属于 VPC 的子网&lt;/li&gt;&lt;li&gt;每个 NAT 网关只能绑定一个 IP&lt;ul&gt;&lt;li&gt;可通过划分子网并在多个子网中添加 NAT 网关的方式获得多个 IP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;可达到 100w packets 每秒的处理速度，并能自动扩展到 400w packets 每秒&lt;ul&gt;&lt;li&gt;同样，需要更高的处理速度，请添加更多 NAT 网关&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;按处理数据量收费&lt;/li&gt;&lt;li&gt;默认路由到 NAT 子网，被称为「私有子网」（或者没默认路由，那就是无法访问公网的私有子网），连接只能由内网程序主动发起。&lt;/li&gt;&lt;li&gt;NAT 网关为流量执行「&lt;strong&gt;Symmetric NAT&lt;/strong&gt;」&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/VPC_Internet_Gateway.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;IGW 因特网网关&lt;/a&gt;&lt;ul&gt;&lt;li&gt;IGW 是一个高度可用的逻辑组件，不会限制 VPC 的总带宽、处理能力。&lt;/li&gt;&lt;li&gt;IGW 实例直接关联 VPC，不从属于任何可用区或子网&lt;/li&gt;&lt;li&gt;IGW 实质上是一个 NAT 设备，为绑定了公网 IP 地址的 ENI/EC2 实例，执行「&lt;strong&gt;一对一 NAT&lt;/strong&gt;」&lt;/li&gt;&lt;li&gt;默认路由到 IGW 的子网，被称为「公有子网」&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://info.support.huawei.com/info-finder/encyclopedia/en/NAT.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;What Is Network Address Translation (NAT)? - Huawei Docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://info.support.huawei.com/info-finder/encyclopedia/en/STUN.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;What Is STUN? - Huawei Docs&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://support.huawei.com/enterprise/zh/doc/EDOC1100112409/fd829977#ZH-CN_CONCEPT_0227014768&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;NetEngine AR V300R019 配置指南-IP业务 - NAT 穿越 - 华为文档&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.52im.net/thread-50-1-1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;P2P技术详解(一)：NAT详解——详细原理、P2P简介&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.52im.net/thread-542-1-1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;P2P技术详解(二)：P2P中的NAT穿越(打洞)方案详解&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://www.52im.net/thread-2872-1-1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;P2P技术详解(三)：P2P中的NAT穿越(打洞)方案详解(进阶分析篇)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Connect to the internet using an internet gateway - AWS VPC Internet Gateway&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://blog.chionlab.moe/2018/02/09/full-cone-nat-with-linux/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;从DNAT到netfilter内核子系统，浅谈Linux的Full Cone NAT实现&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Network_address_translation&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Network address translation - wikipedia&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.liveswitch.io/blog/webrtc-nat-traversal-methods-a-case-for-embedded-turn&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;WebRTC NAT Traversal Methods: A Case for Embedded TURN&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://icloudnative.io/posts/wireguard-endpoint-discovery-nat-traversal/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;WireGuard 教程：使用 DNS-SD 进行 NAT-to-NAT 穿透 - 云原生实验室&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">FinOps for Kubernetes - 如何拆分 Kubernetes 成本</title><link href="https://thiscute.world/posts/finops-for-kubernetes/"/><id>https://thiscute.world/posts/finops-for-kubernetes/</id><author><name>ryan4yin</name></author><published>2022-05-04T23:15:00+08:00</published><updated>2022-05-05T19:31:00+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;FinOps 是一种不断发展的云财务管理学科和文化实践，通过帮助工程、财务、技术和业务团队在数据驱动的预算分配上进行协作，使成本预算能够产生最大的业务价值。&lt;/p&gt;&lt;/blockquote&gt;&lt;h2 id=&#34;云计算成本管控&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%91%e8%ae%a1%e7%ae%97%e6%88%90%e6%9c%ac%e7%ae%a1%e6%8e%a7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;云计算成本管控&lt;/h2&gt;&lt;p&gt;随着越来越多的企业上云，云计算的成本管控也越来越受关注。在讨论 Kubernetes 成本之前，先简单聊下如何管控云计算成本，有一个新名词被用于形容这项工作——FinOps.&lt;/p&gt;&lt;p&gt;传统的数据中心的成本是比较固定的，所有的成本变动通常都伴随着硬件更替。而在云上环境就很不一样了，由于云服务的按量收费特性，以及五花八门的计费规则，开发人员稍有不慎，云成本就可能会出现意料之外的变化。另一方面由于计费的复杂性，业务扩容对成本的影响也变得难以预测。&lt;/p&gt;&lt;p&gt;目前的主流云服务商（AWS/GCP/Alicloud/&amp;hellip;）基本都提供基于资源标签的成本查询方法，也支持将成本导出并使用 SQL 进行细致分析。因此其实要做到快速高效的&lt;strong&gt;云成本分析与管控&lt;/strong&gt;，主要就涉及到如下几个点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;契合需求的标签规范&lt;/strong&gt;: 从公司业务侧需求出发，制定出合理的、多维度的（Department/Team/Product/&amp;hellip;）、有扩展空间的标签规范，这样才能按业务侧需要进行成本分析。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;资源标签的准确率&lt;/strong&gt;: 随着公司业务的发展，标签规范的迭代，标签的准确率总是会上下波动。而标签准确率越高，我们对云计算成本的管控能力就越强。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但是也存在许多特殊的云上资源，云服务商目前并未提供良好的成本分析手段，Kubernetes 集群成本就是其中之一。&lt;/p&gt;&lt;h2 id=&#34;kubernetes-成本分析的难点&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#kubernetes-%e6%88%90%e6%9c%ac%e5%88%86%e6%9e%90%e7%9a%84%e9%9a%be%e7%82%b9&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Kubernetes 成本分析的难点&lt;/h2&gt;&lt;p&gt;目前许多企业应该都面临着这样的场景：所有的服务都运行在一或多个 Kubernetes 集群上，其中包含多条业务线、多个产品、多个业务团队的服务，甚至除了业务服务，可能还包含 CICD、数据分析、机器学习等多种其他工作负载。而这些 Kubernetes 集群通常都由一个独立的 SRE 部门管理。&lt;/p&gt;&lt;p&gt;但是 Kubernetes 集群本身并不提供成本拆分的能力，我们只能查到集群的整体成本、每个节点组的成本等这样粗粒度的成本信息，缺乏细粒度的成本分析能力。此外，Kubernetes 集群是一个非常动态的运行环境，其节点的数量、节点规格、Pod 所在的节点/Zone/Region，都可能会随着时间动态变动，这为成本分析带来了更大的困难。&lt;/p&gt;&lt;p&gt;这就导致我们很难回答这些问题：&lt;strong&gt;每条业务线、每个产品、每个业务团队、或者每个服务分别花了多少钱？是否存在资源浪费？有何优化手段&lt;/strong&gt;？&lt;/p&gt;&lt;p&gt;而 FinOps for Kubernetes，就是通过工程化分析、可视化成本分析等手段，来回答这些成本问题，分析与管控 Kubernetes 的成本。&lt;/p&gt;&lt;p&gt;接下来我会先介绍下云上 Kubernetes 成本分析的思路与手段，最后再介绍如何使用 Kubecost 分析 Kubernetes 集群的成本。&lt;/p&gt;&lt;p&gt;要做好 Kubernetes 成本工作，有如下三个要点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;理解 Kubernetes 成本的构成，搞懂准确分析 Kubernetes 成本有哪些难点&lt;/li&gt;&lt;li&gt;寻找优化 Kubernetes 集群、业务服务的手段&lt;/li&gt;&lt;li&gt;确定 Kubernetes 集群的成本拆分手段，建立能快速高效地分析与管控集群成本的流程&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;kubernetes-成本的构成&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#kubernetes-%e6%88%90%e6%9c%ac%e7%9a%84%e6%9e%84%e6%88%90&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Kubernetes 成本的构成&lt;/h2&gt;&lt;p&gt;以 AWS EKS 为例，它的成本有这些组成部分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;AWS EKS 本身有 $0.1 per hour 的固定费用，这个很低&lt;/li&gt;&lt;li&gt;EKS 的所有节点会收对应的 EC2 实例运行费用、EBS 数据卷费用&lt;/li&gt;&lt;li&gt;EKS 中使用的 PV 会带来 EBS  数据卷的费用&lt;/li&gt;&lt;li&gt;跨区流量传输费用&lt;ul&gt;&lt;li&gt;所有节点之间的通讯（主要是服务之间的互相访问），如果跨了可用区，会收跨区流量传输费用&lt;/li&gt;&lt;li&gt;EKS 中的服务访问其他 AWS 服务如 RDS/ElastiCache，如果是跨可用区，会收取跨区流量费用&lt;/li&gt;&lt;li&gt;如果使用了 Istio IngressGateway 或 traefik 等网关层代理 Pod，那这些 Pod 与服务实例之间，有可能会产生跨区流量&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;NAT 网关费用&lt;ul&gt;&lt;li&gt;EKS 中的容器如果要访问因特网，就需要通过 NAT 网关，产生 NAT 费用&lt;/li&gt;&lt;li&gt;如果 VPC 未配置 endpoints 使访问 AWS 服务（dynamodb/s3 等）时直接走 AWS 内部网络，这些流量会经过 VPC 的 NAT 网关，从而产生 NAT 网关费用&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;服务如果要对外提供访问，最佳实践是通过 aws-load-balancer-controller 绑定 AWS ALB, 这里会产生 ALB 费用&lt;/li&gt;&lt;li&gt;监控系统成本&lt;ul&gt;&lt;li&gt;Kubernetes 的监控系统是不可或缺的&lt;/li&gt;&lt;li&gt;如果你使用的是 Datadog/NewRelic 等云服务，会造成云服务的成本；如果是自建 Prometheus，会造成 Prometheus 的运行成本，以及 Pull 指标造成的跨区流量成本&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;总结下，其实就是三部分成本：计算、存储、网络&lt;/strong&gt;。其中计算与存储成本是相对固定的，而网络成本就比较动态，跟是否跨区、是否通过 NAT 等诸多因素有关。&lt;/p&gt;&lt;h2 id=&#34;kubernetes-资源分配的方式&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#kubernetes-%e8%b5%84%e6%ba%90%e5%88%86%e9%85%8d%e7%9a%84%e6%96%b9%e5%bc%8f&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Kubernetes 资源分配的方式&lt;/h2&gt;&lt;p&gt;Kubernetes 提供了三种资源分配的方式，即服务质量 QoS，不同的分配方式，成本的计算难度也有区别：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Guaranteed resource allocation(保证资源分配): 即将 requests 与 limits 设置为相等，确保预留所有所需资源&lt;ul&gt;&lt;li&gt;最保守的策略，服务性能最可靠，但是成本也最高&lt;/li&gt;&lt;li&gt;这种方式分配的资源，拆分起来是最方便的，因为它的计算成本是静态的&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Burstable resource allocation(突发性能): 将 requests 设置得比 limits 低，这样相差的这一部分就是服务的可 Burst 资源量。&lt;ul&gt;&lt;li&gt;最佳实践，选择合适的 requests 与 limits，可达成性能与可靠性之间的平衡&lt;/li&gt;&lt;li&gt;这种资源，它 requests 的计算成本是静态的，Burstable 部分的计算成本是动态的&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Best effort resource allocation(尽力而为): 只设置 limits，不设置 requests，让 Pod 可以调度到任何可调度的节点上&lt;ul&gt;&lt;li&gt;下策，这个选项会导致服务的性能无法保证，通常只在开发测试等资源受限的环境使用&lt;/li&gt;&lt;li&gt;这种方式分配的资源，完全依赖监控指标进行成本拆分&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;最佳实践&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;最佳实践&lt;/h2&gt;&lt;p&gt;要做到统一分析、拆分 Kubernetes 与其他云资源的成本，如下是一些最佳实践：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;按产品或者业务线来划分名字空间，不允许跨名字空间互相访问。&lt;ul&gt;&lt;li&gt;如果存在多个产品或业务线共用的服务，可以在每个产品的名字空间分别部署一个副本，并把它们当成不同的服务来处理。&lt;/li&gt;&lt;li&gt;这样名字空间就是成本划分的一个维度，我们还可以在名字空间上为每个产品设置资源上限与预警。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;按产品或业务线来划分节点组，通过节点组的标签来进行成本划分&lt;ul&gt;&lt;li&gt;这是第二个维度，但是节点组划分得太细，可能会导致资源利用不够充分。&lt;/li&gt;&lt;li&gt;这个方案仅供参考，不一定好用&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;为 Kubernetes 服务设计与其他云资源一致的成本标签，添加到 Pod 的 label 中，通过 kubecost 等手段，基于 label 进行更细致的成本分析&lt;ul&gt;&lt;li&gt;标签一致的好处是可以统一分析 Kubernetes 与其他云资源的成本&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;定期（比如每周一） check 云成本变化，定位并解决成本异常&lt;/li&gt;&lt;li&gt;建立自动化的成本异常检测与告警机制（部分云服务有提供类似的服务，也可自建），收到告警即触发成本异常分析任务&lt;/li&gt;&lt;li&gt;始终将资源标签准确率维持在较高数值，准确率低于一定数值即自动告警，触发标签修正任务&lt;/li&gt;&lt;li&gt;将成本上升的压力与成本下降的效益覆盖到开发人员，授权他们跟踪服务的 Kubernetes 利用率与成本，以激励开发人员与 SRE 合作管控服务成本。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;成本优化实践：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;多种工作负载混合部署，提升资源利用率。但是需要合理规划避免资源竞争&lt;/li&gt;&lt;li&gt;调节集群伸缩组件，在保障 SLA 的前提下提升资源利用率&lt;ul&gt;&lt;li&gt;比如 aws 就可以考虑在一些场景下用 karpenter 来做扩缩容、引入 &lt;a href=&#34;https://github.com/aws/aws-node-termination-handler&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;AWS Node Termination Handler&lt;/a&gt; 提升 Spot 实例的 SLA&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;尽量使用竞价实例，AWS 的竞价实例单价平均优惠超过 50%&lt;/li&gt;&lt;li&gt;合理地购买 Saving Plans 与 Reserved Instances，达成成本节约。&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;多云环境&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%a4%9a%e4%ba%91%e7%8e%af%e5%a2%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;多云环境&lt;/h2&gt;&lt;p&gt;上述讨论的绝大部分策略，都适用于多云环境。在这种涉及多个云服务提供商的场景，最重要的一点是：&lt;strong&gt;搭建平台无关的成本分析与管控平台&lt;/strong&gt;。而其核心仍然是文章最前面提到的两点，只需要补充两个字 &lt;strong&gt;一致&lt;/strong&gt;：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;一致的资源标签规范&lt;/strong&gt;: 从公司业务侧需求出发，制定出&lt;strong&gt;跨平台一致的&lt;/strong&gt;标签规范，这样才能统一分析多云成本。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;资源标签的准确率&lt;/strong&gt;: 随着公司业务的发展，标签规范的迭代，标签的准确率总是会上下波动。而标签准确率越高，我们对云计算成本的管控能力就越强。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这样就可以把不同云服务商的数据转换成统一的格式，然后在自有的成本平台上进行统一的分析了。&lt;/p&gt;&lt;p&gt;搭建一个这样的成本分析平台其实并不难，许多大公司都是这么干的，小公司也可以从一个最小的平台开始做起，再慢慢完善功能。&lt;/p&gt;&lt;p&gt;以我现有的经验看，其实主要就包含这么几个部分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;成本数据转换模块：将来自不同云的成本数据，转换成与云服务无关的格式，方便统一处理&lt;/li&gt;&lt;li&gt;折扣模块：处理不同资源的折扣&lt;ul&gt;&lt;li&gt;比如 CDN 在用量高的时候通常会有很高的折扣比例&lt;/li&gt;&lt;li&gt;还有 SavingPlans/CommitmentDiscounts 也需要特殊的处理&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;标签修整模块&lt;ul&gt;&lt;li&gt;随着标签体系的发展，总会有些标签的变更，不方便直接在资源上执行，就需要在成本计算这里进行修正、增补或者删除&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;成本拆分模块&lt;ul&gt;&lt;li&gt;有些资源的成本是共用的，就需要结合其他来源的数据进行成本拆分，比如 Kubernetes 集群的成本&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;成本报表：将最终的数据制作成符合各类人员需求的可视化图表，按需求还可以考虑添加交互式特征&lt;ul&gt;&lt;li&gt;可使用 Grafana/Google DataStudio 等报表工具&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此外这样一个跨云的成本管控平台也不一定需要完全自己来做，已经有很多公司看到了这块的前景，做出了现成的方案，可以看看 Gartner 的如下报告：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.gartner.com/reviews/market/cloud-management-tooling&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Cloud Management Tooling Reviews and Ratings - Gartner&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;多云场景下其实要考虑的还有很多，目前多云网络（multicloud networking）、多云财务（multicloud finops）、多云应用管理（multicloud application management）领域的需求越来越强劲，相关产品也越来越多，有需要可以自行研究。&lt;/p&gt;&lt;h2 id=&#34;kubernetes-成本分析&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#kubernetes-%e6%88%90%e6%9c%ac%e5%88%86%e6%9e%90&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Kubernetes 成本分析&lt;/h2&gt;&lt;p&gt;前面讨论的内容都很「虚」，下面来点更「务实」的：Kubernetes 成本分析实战。&lt;/p&gt;&lt;p&gt;目前据我所知，主要有如下两个相关的开源工具：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kubecost/cost-model&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Kubecost&lt;/a&gt;: kubecost 应该是目前最优秀的开源成本分析工具了，self-hosted 是免费的，支持按 deployment/service/label 等多个维度进行成本拆分，而且支持拆分网络成本。收费版提供更丰富的功能以及更长的数据存储时间。&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/gocrane/crane&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;crane&lt;/a&gt;: 腾讯开源的一款 Kubernetes 成本优化工具，支持成本报表以及 EHPA 两个功能，才刚开源几个月，目前还比较简陋。&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1960014&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;腾讯推出国内首个云原生成本优化开源项目 Crane&lt;/a&gt;&lt;/li&gt;&lt;li&gt;腾讯云在国内上线了 crane 的闭源版本「&lt;a href=&#34;https://cloud.tencent.com/document/product/457/64169&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;容器服务成本大师&lt;/a&gt;」，如果你使用的是腾讯云，可以体验看看（感觉跟 kubecost 很像）&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;其中 kubecost 是最成熟的一个，我们接下来以 kubecost 为例介绍下如何分析 Kubernetes 成本。&lt;/p&gt;&lt;h3 id=&#34;安装-kubecost&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%ae%89%e8%a3%85-kubecost&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;安装 kubecost&lt;/h3&gt;&lt;p&gt;kubecost 有两种推荐的安装方法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用 helm 安装免费版&lt;ul&gt;&lt;li&gt;包含如下组件：&lt;ul&gt;&lt;li&gt;frontend 前端 UI 面板&lt;/li&gt;&lt;li&gt;cost-model 核心组件，提供基础的成本拆分能力&lt;/li&gt;&lt;li&gt;postgres 长期存储，仅企业版支持&lt;/li&gt;&lt;li&gt;kubecost-network-costs 一个 daemonset，提供网络指标用于计算网络成本（貌似未开源）&lt;/li&gt;&lt;li&gt;cluster-controller 提供集群「大小调整（RightSizing）」以及「定时关闭集群」的能力&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;只保留 15 天的指标，无 SSO/SAML 登录支持，无 alerts/notification, 不可保存 reportes 报表&lt;/li&gt;&lt;li&gt;每个 kubecost 只可管理一个集群&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;只安装 Apache License 开源的 cost-model，它仅提供基础的成本拆分功能以及 API，无 UI 面板、长期存储、网络成本拆分、SAML 接入及其他商业功能。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;开源的 cost-model 直接使用此配置文件即可部署：&lt;a href=&#34;https://github.com/kubecost/cost-model/blob/master/kubernetes/exporter/exporter.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://github.com/kubecost/cost-model/blob/master/kubernetes/exporter/exporter.yaml&lt;/a&gt;&lt;/p&gt;&lt;p&gt;而如果要部署带 UI 的商业版，需要首先访问 &lt;a href=&#34;https://www.kubecost.com/install#show-instructions&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://www.kubecost.com/install#show-instructions&lt;/a&gt; 获取到 &lt;code&gt;kubecostToken&lt;/code&gt;，然后使用 helm 进行部署。&lt;/p&gt;&lt;p&gt;首先下载并编辑 values.yaml 配置文件：&lt;a href=&#34;https://github.com/kubecost/cost-analyzer-helm-chart/blob/develop/cost-analyzer/values.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://github.com/kubecost/cost-analyzer-helm-chart/blob/develop/cost-analyzer/values.yaml&lt;/a&gt;，示例如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# kubecost-values.yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 通过 http://kubecost.com/install 获取 token，用于跟踪商业授权状态&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubecostToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;xxx&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;global&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自动部署 prometheus &#43; nodeExporter，也可以直接对接外部 prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 如果 enable=false，则使用如下地址连接外部 prometheus&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;fqdn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;http://cost-analyzer-prometheus-server.default.svc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 自动部署 grafana，也可对接外部 grafana 面板&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grafana&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 如果 enable=false，则使用如下地址连接外部 grafana&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;domainName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;cost-analyzer-grafana.default.svc&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# http or https, for the domain name above.&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;proxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# If true, the kubecost frontend will route to your grafana through its service endpoint&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# grafana 子 chart 的配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## 更好的选择是单独部署 grafana，不使用 kubecost 的 subchart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;grafana&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;grafana/grafana &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 建议替换成私有镜像仓库地址&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8.3.2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# prometheus 子 chart 的配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## 更好的选择是单独部署 prometheus，不使用 kubecost 的 subchart&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;persistentVolume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;32Gi&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 这个大小得视情况调整，集群较大的话 32Gi 肯定不够&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;retention&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;15d &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# p8s 指标保留时长&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nodeExporter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## If true, node-exporter pods share the host network namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostNetwork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## If true, node-exporter pods share the host PID namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hostPID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## node-exporter container name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;node-exporter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## node-exporter container image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;quay.io/prometheus/node-exporter &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 替换成 quay 仓库避免 docker 仓库拉取限制&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v0.18.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pullPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;IfNotPresent&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## Monitors ConfigMap changes and POSTs to a URL&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## Ref: https://github.com/jimmidyson/configmap-reload&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;##&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;configmapReload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;prometheus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## If false, the configmap-reload container will not be deployed&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## configmap-reload container name&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;configmap-reload&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;## configmap-reload container image&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;jimmidyson/configmap-reload &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 建议替换成私有仓库避免 docker 仓库拉取限制&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;v0.7.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;persistentVolume&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;32Gi &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 同前所述&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# storageClass: &amp;#34;-&amp;#34; #&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 配置 ingress 入口，供外部访问&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ingress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# className: nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# kubernetes.io/ingress.class: nginx&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# kubernetes.io/tls-acme: &amp;#34;true&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# There&amp;#39;s no need to route specifically to the pods-- we have an nginx deployed that handles routing&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ImplementationSpecific&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;hosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;cost-analyzer.local&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nodeSelector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 提升网络安全性的配置&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;networkPolicy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;denyEgress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# create a network policy that denies egress from kubecost&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sameNamespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Set to true if cost analyser and prometheus are on the same namespace&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# namespace: kubecost # Namespace where prometheus is installed&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 分析网络成本，需要额外部署一个 daemonset&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;networkCosts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 详见 values.yaml 内容&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;serviceAccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;annotations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 如果是 aws 上的集群，可以通过 serviceAccount 授权访问 ec2 pricing API 及 cur 数据&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 也可以直接为服务提供 AccessKeyID/Secret 进行授权&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 与 AWS 的集成会在后面详细介绍&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;eks.amazonaws.com/role-arn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;arn:aws:iam:112233445566:role/KubecostRole &lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 注意替换这个 role-arn&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 如下配置也可通过 Kubecost product UI 调整&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# 但是此处的配置优先级更高，如果在这里配置了默认值，容器重启后就会使用此默认值，UI 上的修改将失效&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;kubecostProductConfigs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;{}&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;然后部署：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 添加 repo&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm repo add kubecost https://kubecost.github.io/cost-analyzer/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看版本号&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm search repo kubecost/cost-analyzer -l &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 下载并解压某个 chart&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm pull kubecost/cost-analyzer --untar --version 1.92.0&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用自定义 values 配置安装或更新本地的 chart&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;helm upgrade --create-namespace --install kubecost ./cost-analyzer -n kubecost -f kubecost-values.yaml&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;通过 port-forward 访问：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;kubectl port-forward --namespace kubecost deployment/kubecost-cost-analyzer &lt;span class=&#34;m&#34;&gt;9090&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;现在访问 &lt;a href=&#34;http://localhost:9090&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;http://localhost:9090&lt;/a&gt; 就能进入 Kubecost 的 UI 面板，其中最主要的就是 Allocation 成本拆分功能。&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/finops-for-kubernetes/kubecost-demo.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;Kubecost 示例&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 id=&#34;kubecost-的成本统计原理&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#kubecost-%e7%9a%84%e6%88%90%e6%9c%ac%e7%bb%9f%e8%ae%a1%e5%8e%9f%e7%90%86&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;kubecost 的成本统计原理&lt;/h3&gt;&lt;h4 id=&#34;1-cpuramgpustorage-成本分析&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-cpuramgpustorage-%e6%88%90%e6%9c%ac%e5%88%86%e6%9e%90&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. CPU/RAM/GPU/Storage 成本分析&lt;/h4&gt;&lt;p&gt;Kubecost 通过 AWS/GCP 等云服务商 API 动态获取各 region/zone 的上述四项资源的每小时成本：CPU-hour, GPU-hour, Storage Gb-hour 与 RAM Gb-hour，或者通过 json 文件静态配置这几项资源的成本。OD 按需实例的资源价格通常比较固定，而 AWS Spot 实例的成本波动会比较大，可以通过 SpotCPU/SpotRAM 这两个参数来设置 spot 的默认价格，也可以为 kubecost 提供权限使它动态获取这两项资源的价格。&lt;/p&gt;&lt;p&gt;kubecost 根据每个容器的资源请求 requests 以及资源用量监控进行成本分配，对于未配置 requests 的资源将仅按实际用量监控进行成本分配。&lt;/p&gt;&lt;p&gt;kubecost 的成本统计粒度为 container，而 deployment/service/namespace/label 只是按不同的维度进行成本聚合而已。&lt;/p&gt;&lt;h4 id=&#34;2-网络成本的分析&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e7%bd%91%e7%bb%9c%e6%88%90%e6%9c%ac%e7%9a%84%e5%88%86%e6%9e%90&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 网络成本的分析&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/network-allocation.md&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/network-allocation.md&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;对提供线上服务的云上 Kubernetes 集群而言，网络成本很可能等于甚至超过计算成本。这里面最贵的，是跨区/跨域传输的流量成本，以及 NAT 网关成本。使用单个可用区风险比较高，资源池也可能不够用，因此我们通常会使用多个可用区，这就导致跨区流量成本激增。&lt;/p&gt;&lt;p&gt;kubecost 也支持使用 Pod network 监控指标对整个集群的流量成本进行拆分，kubecost 会部署一个绑定 hostNetwork 的 daemonset 来采集需要的网络指标，提供给 prometheus 拉取，再进行进一步的分析。&lt;/p&gt;&lt;p&gt;kubecost 将网络流量分成如下几类：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;in-zone: 免费流量&lt;/li&gt;&lt;li&gt;in-region: 跨区流量，国外的云服务商基本都会对跨区流量收费&lt;/li&gt;&lt;li&gt;cross-region: 跨域流量&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;更多的待研究，看 kubecost 官方文档吧。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;另外还看到 kubecost 有忽略 s3 流量（因为不收费）的 issue: &lt;a href=&#34;https://github.com/kubecost/cost-model/issues/517&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://github.com/kubecost/cost-model/issues/517&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&#34;kubecost-api&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#kubecost-api&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;kubecost API&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/apis.md&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/apis.md&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;成本拆分文档：https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/cost-allocation.md&lt;/li&gt;&lt;li&gt;成本拆分 API 文档：https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/allocation.md&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;查询成本拆分结果的 API 示例：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost:9090/model/allocation&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;window&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;2022-05-05T00:00:00Z,2022-05-06T00:00:00Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;aggregate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;namespace,label:app&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 以这几个纬度进行成本聚合&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;external&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;# 拆分集群外部的成本（比如 s3/rds/es 等），需要通过其他手段提供外部资源的成本&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;accumulate&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# 累加指定 window 的所有成本&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;shareIdle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;# 将空闲成本拆分到所有资源上&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;idleByNode&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 基于节点进行空闲资源的统计&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;shareTenancyCosts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 在集群的多个租户之间共享集群管理成本、节点数据卷成本。这部分成本将被添加到 `sharedCost` 字段中&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;shareNamespaces&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;kube-system,kubecost,istio-system,monitoring&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 将这些名字空间的成本设为共享成本&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;shareLabels&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;shareCost&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;shareSplit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;weighted&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 共享成本的拆分方法，weight 加权拆分，even 均分&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;resp_json&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resp_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;resp_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;查询结果中有这几种特殊成本类别：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;__idle__&lt;/code&gt;: 未被占用的空闲资源消耗的成本&lt;/li&gt;&lt;li&gt;&lt;code&gt;__unallocated_&lt;/code&gt;: 不含有 &lt;code&gt;aggregate&lt;/code&gt; 对应维度的成本，比如按 &lt;code&gt;label:app&lt;/code&gt; 进行聚合，不含有 &lt;code&gt;app&lt;/code&gt; 这个 label 的 pod 成本就会被分类到此标签&lt;/li&gt;&lt;li&gt;&lt;code&gt;__unmounted__&lt;/code&gt;: 未挂载 PV 的成本&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此外如果使用 kubecost 可视化面板，可能还会看到一个 &lt;code&gt;other&lt;/code&gt; 类别，这是为了方便可视化，把成本太低的一些指标聚合展示了。&lt;/p&gt;&lt;h3 id=&#34;kubecost-与-aws-集成&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#kubecost-%e4%b8%8e-aws-%e9%9b%86%e6%88%90&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Kubecost 与 AWS 集成&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/aws-cloud-integrations.md&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/aws-cloud-integrations.md&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/kubecost/docs/blob/main/aws-node-price-reconcilitation-methodology.md&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://github.com/kubecost/docs/blob/main/aws-node-price-reconcilitation-methodology.md&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;TBD&lt;/p&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/kubecost/cost-model&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;kubecost&lt;/a&gt;: kubecost 应该是目前最优秀的开源成本分析工具了，self-hosted 是免费的，也提供收费的云上版本，值得研究。&lt;ul&gt;&lt;li&gt;文档：https://github.com/kubecost/docs&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/gocrane/crane&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;crane&lt;/a&gt;: 腾讯开源的一款 Kubernetes 成本优化工具，支持成本报表以及 EHPA 两个功能，才刚开源几个月，目前还比较简陋。&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.finops.org/projects/calculating-container-costs/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Calculating Container Costs - FinOps&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/523045177&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;CPU利用率从10%提升至60%：中型企业云原生成本优化实战指南 - 星汉未来(Galaxy-Future)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://cloud.tencent.com/document/product/457/57732&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;资源利用率分析和优化建议 - 腾讯云容器服务&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">变革与创新</title><link href="https://thiscute.world/posts/revolution-and-innovation/"/><id>https://thiscute.world/posts/revolution-and-innovation/</id><author><name>ryan4yin</name></author><published>2022-03-28T00:40:00+08:00</published><updated>2022-03-28T00:40:00+08:00</updated><content type="html"><![CDATA[&lt;p&gt;最近在学区块链技术，跟群友讨论时，一位群友抛出了他的观点：「所以智能合约，本质上依然是一个特殊的协议吧，只是套上了一个看起来高大上的词语而本质依然属于一种通信协议的东西，这么一想如果拆解开来实际上也应该没什么特别的。」&lt;/p&gt;&lt;p&gt;是啊，这样说的话，区块链技术确实挺简单的，没啥新的东西。底层就是各种现代密码学算法跟通讯协议而已，这些都是经过了几十年发展，已经很成熟的技术或者概念了。但是中本聪把这些旧技术组合到一起，搞了个比特币，没几年就引发了加密货币狂潮，就连 GPU 都因为加密货币的发展价格一路狂飙。2015 年以太坊往区块链上加了个功能：可以运行任何图灵完备的计算机程序（合约），编译成 EVM 字节码即可丢到以太坊区块链上运行。运行程序这样一件事本身有什么特殊的么？是台计算机都可以跑程序，但是以太坊第一个提出在区块链上跑图灵完备的程序，这导致以太坊成为了目前世界上第二大区块链系统，并且形成了一个庞大的开发者社区，目前网络上有多不胜数的以太坊开发教程及资料。&lt;/p&gt;&lt;p&gt;区块链技术仅仅只是以新的方式，组合使用了一系列成熟的工具而已，但是却引发了世界性的金融变革，甚至以太坊还在这之上研究出了更多的妙用，提出了 Web3.0 的概念。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;现有技术的新用法，也完全可以形成一场革命性的变革，甚至这个新用法可以非常简单，关键在于你能否发现这样一种用法，并且意识到它可能存在的价值&lt;/strong&gt;。这个是非常非常难的，微软曾经没看懂开源跟云计算的威力，诺基亚曾经觉得安卓就是垃圾不足为惧，很多搞金融的曾经觉得加密货币就是个笑话。恰如很多现在丢了工作的传统运维，可能以前也是觉得容器跟云计算没啥特别的，影响不到自己吧。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;在没被新技术骑脸之前，一般人是很难感知到它对自己的影响的&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;所以作为一名普通的技术人，我们也只能时时关注自己核心领域内各项新技术的发展，评估它们的潜力与价值，尽力看清它们的本质。甚至偶尔也要拓展自己的视野去了解下其他关联领域的变化，这样才能降低自己被时代抛弃的概率。&lt;/p&gt;&lt;p&gt;每个新兴领域都不缺乏时代的弄潮儿，而我们普通人，只能未雨绸缪，尽量打造好自己的技术小船，不致被时代的大潮倾翻。&lt;/p&gt;&lt;p&gt;最后回到正题，我这个周末才刚学了两天区块链，还没搞明白智能合约是个啥，更遑论看清「智能合约的潜在价值」了，但是既然区块链是目前的一个风口，这么多人鼓吹，我觉得是值得花点时间搞清楚它导致是个啥的。区块链、Web3.0 DAO NFT DeFi 这样的新概念，单单执着眼于别人的鼓吹或者贬低，只会是雾里看花一知半解。只有自己搞懂它，才有机会把握住它的本质。&lt;/p&gt;&lt;p&gt;路途漫漫，诸君共勉。&lt;/p&gt;]]></content></entry><entry><title type="html">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</title><link href="https://thiscute.world/posts/about-tls-cert/"/><id>https://thiscute.world/posts/about-tls-cert/</id><author><name>ryan4yin</name></author><published>2022-03-14T00:00:00+08:00</published><updated>2022-03-14T00:00:00+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;本文基本上是一篇原创文章，但是行文有点生硬，仍然在优化中，不太适合初学者阅读。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;《写给开发人员的实用密码学》系列文章目录:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-1/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（一）—— 概览&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-2-hash/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（二）—— 哈希函数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-3-key-derivation-function/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-4-secure-random-generators/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-6-symmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（六）—— 对称密钥加密算法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/about-tls-cert&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt;&lt;/li&gt;&lt;li&gt;待续&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;更新记录&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e6%9b%b4%e6%96%b0%e8%ae%b0%e5%bd%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;更新记录&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;2021-01-17&lt;/strong&gt;: 完成 TLS 协议简介、数字证书介绍、数字证书的申请或生成方法、mTLS 介绍、TLS 协议的破解手段&lt;/li&gt;&lt;li&gt;&lt;strong&gt;2022-03-13&lt;/strong&gt; ~ &lt;strong&gt;2022-03-14&lt;/strong&gt;: 重新整理补充，改写为《写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议》，整合进我的实用密码学系列文章中&lt;ul&gt;&lt;li&gt;补充 PKI 公钥基础架构及 X509 证书标准介绍&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;TODO:&lt;ul&gt;&lt;li&gt;补充 TLS 协议的逆向手段&lt;/li&gt;&lt;li&gt;基于 &lt;a href=&#34;https://shoujo.ink/2021/11/cfssl-%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;cfssl&lt;/a&gt; 详细介绍 PKI 的各项组件&lt;/li&gt;&lt;li&gt;基于 PKI 的应用服务间身份识别技术：&lt;a href=&#34;https://github.com/spiffe/spiffe&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;SPIFF ID&lt;/a&gt;&lt;ul&gt;&lt;li&gt;SPIFF ID 是云原生领域的标准，&lt;a href=&#34;https://shoujo.ink/2021/10/istio-%E5%AE%89%E5%85%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B-pki-%E4%B8%8E%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;服务网格项目 Istio 就使用了 SPIFF ID 作为安全命名&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;hr&gt;&lt;h2 id=&#34;零前言&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e9%9b%b6%e5%89%8d%e8%a8%80&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;p&gt;现代人的日常生活中，HTTPS 协议几乎无处不在，我们每天浏览网页时、用手机刷京东淘宝时、甚至每天秀自己绿色的健康码时，都在使用 HTTPS 协议。&lt;/p&gt;&lt;p&gt;作为一个开发人员，我想你应该多多少少有了解一点 HTTPS 协议。你可能知道 HTTPS 是一种加密传输协议，能保证数据传输的保密性。如果你拥有部署 HTTPS 服务的经验，那你或许还懂如何申请权威 HTTPS 证书，并配置在 Nginx 等 Web 程序上。&lt;/p&gt;&lt;p&gt;但是你是否清楚 HTTPS 是由 HTTP &#43; TLS 两种协议组合而成的呢？更进一步你是否有抓包了解过 TLS 协议的完整流程？是否清楚它加解密的底层原理？是否清楚 Nginx 的 HTTPS 配置中一堆密码学参数的真正含义？是否知道 TLS 协议有哪些弱点、存在哪些攻击手段、如何防范？&lt;/p&gt;&lt;p&gt;我们在《写给开发人员的实用密码学》的前七篇文章中已经学习了许多的密码学概念与算法，接下来我们就利用这些知识，深度剖析下 HTTPS 协议中的数字证书以及 TLS 协议。&lt;/p&gt;&lt;h2 id=&#34;一数字证书与-pki-公钥基础架构&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80%e6%95%b0%e5%ad%97%e8%af%81%e4%b9%a6%e4%b8%8e-pki-%e5%85%ac%e9%92%a5%e5%9f%ba%e7%a1%80%e6%9e%b6%e6%9e%84&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、数字证书与 PKI 公钥基础架构&lt;/h2&gt;&lt;p&gt;我们在前面已经学习了「对称密码算法」与「非对称密码算法」两个密码学体系，这里做个简单的总结。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;对称密码算法（如 AES/ChaCha20）&lt;/strong&gt;: &lt;strong&gt;计算速度快、安全强度高，但是缺乏安全交换密钥的手段、密钥的保存和管理也很困难&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;非对称密码算法（如 RSA/ECC）: 计算速度慢，但是它解决了上述对称密码算法最大的两个缺陷，一是给出了安全的密钥交换算法 DHE/ECDHE，二呢它的公钥是可公开的，这降低了密钥的保存与管理难度&lt;/strong&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但是非对称密码算法仍然存在一些问题:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;公钥该如何分发&lt;/strong&gt;？比如 Alice 跟 Bob 交换公钥时，如何确定收到的确实是对方的公钥，也就是说如何确认公钥的真实性、完整性、认证其来源身份？&lt;ul&gt;&lt;li&gt;前面我们已经学习过，DH/ECDH 密钥交换协议可以防范嗅探攻击（窃听），但是&lt;strong&gt;无法抵挡中间人攻击&lt;/strong&gt;（中继）。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;如果 Alice 的私钥泄漏了，她该&lt;strong&gt;如何作废自己旧的公钥&lt;/strong&gt;？&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;数字证书与公钥基础架构就是为了解决上述问题而设计的。&lt;/p&gt;&lt;p&gt;首先简单介绍下公钥基础架构（Public Key Infrastructure），它是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书。PKI 是一个总称，而并非指单独的某一个规范或标准，因此显然数字证书的规范（X.509）、存储格式（PKCS系列标准、DER、PEM）、TLS 协议等都是 PKI 的一部分。&lt;/p&gt;&lt;p&gt;我们下面从公钥证书开始逐步介绍 PKI 中的各种概念及架构。&lt;/p&gt;&lt;h3 id=&#34;1-公钥证书&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e5%85%ac%e9%92%a5%e8%af%81%e4%b9%a6&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 公钥证书&lt;/h3&gt;&lt;p&gt;前面我们介绍了公钥密码系统存在的一个问题是「在分发公钥时，难以确认公钥的真实性、完整性及其来源身份」。PKI 通过「数字证书」&#43;「证书认证机构」来解决这个问题，下面先简单介绍下「数字证书」。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;数字证书&lt;/strong&gt;指的其实就是&lt;strong&gt;公钥证书&lt;/strong&gt;（也可直接简称为&lt;strong&gt;证书&lt;/strong&gt;）。在现代网络通讯中通行的公钥证书标准名为 &lt;a href=&#34;https://zh.wikipedia.org/wiki/X.509&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;X.509&lt;/a&gt; v3, 由 &lt;a href=&#34;https://tools.ietf.org/html/rfc5280&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC5280&lt;/a&gt; 定义。X.509 v3 格式被广泛应用在 TLS/SSL 等众多加密通讯协议中，它规定公钥证书应该包含如下内容:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;证书&lt;ul&gt;&lt;li&gt;&lt;strong&gt;序列号&lt;/strong&gt;（Serial Number）: 用以识别每一张证书，在作废证书的时候会用到它&lt;/li&gt;&lt;li&gt;&lt;strong&gt;版本&lt;/strong&gt;: 证书的规范版本&lt;/li&gt;&lt;li&gt;&lt;strong&gt;公钥&lt;/strong&gt;（Public Key）: 我们的核心目的就是分发公钥，因此显然要把公钥放在证书里面&lt;/li&gt;&lt;li&gt;&lt;strong&gt;公钥指纹&lt;/strong&gt;: 即公钥的 Hash 值，当前大部分证书都使用 SHA256 计算此指纹&lt;/li&gt;&lt;li&gt;&lt;strong&gt;公钥用途&lt;/strong&gt;（Key Usage &#43; Extended Key Usage）: 记录了此证书可用于哪些用途——数字签名、身份认证等&lt;/li&gt;&lt;li&gt;&lt;strong&gt;主体&lt;/strong&gt;（Subject）: 即姓名、组织、邮箱、地址等证书拥有者的个人信息。&lt;ul&gt;&lt;li&gt;有了这个我们就能确认证书的拥有者了&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;证书有效期的开始时间、结束时间&lt;/strong&gt;（Not Before &#43; Not After）: 为了确保安全性，每个证书都会记录一个自身的有效期&lt;ul&gt;&lt;li&gt;证书一旦签发并公开，随着科技的发展、时间的推移，其公钥的安全性会慢慢减弱&lt;/li&gt;&lt;li&gt;因此每个证书都应该包含一个合理的有效期，证书的拥有者应该在有效期截止前更换自身的证书以确保安全性&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;签发者&lt;/strong&gt;（Issuer）: 签发此证书的「签发者」信息&lt;/li&gt;&lt;li&gt;其他拓展信息&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;数字签名&lt;/strong&gt;（Signature）: 我们还需要对上面整个证书计算一个数字签名，来确保这些数据的真实性、完整性，确保证书未被恶意篡改/伪造&lt;ul&gt;&lt;li&gt;此数字签名由「证书签发者（Issuer）」使用其私钥&#43;证书内容计算得出&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;数字签名算法&lt;/strong&gt;（Signature Algorithm）: 证书所使用的签名算法，常用的有 &lt;code&gt;RSA-SHA-256&lt;/code&gt; 与 &lt;code&gt;ECDSA-SHA-256&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;每个证书都有唯一的 ID，这样在私钥泄漏的情况下，我们可以通过公钥基础设施的 OCSP（Online Certificate Status Protocol）协议吊销某个证书。吊销证书的操作还是比较罕见的，毕竟私钥泄漏并不容易遇到，因此这里就略过不提了，有需要的可以自行搜索。&lt;/p&gt;&lt;p&gt;使用 Firefox 查看网站 &lt;code&gt;https://www.google.com&lt;/code&gt; 的证书信息如下：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-tls-cert/cert-content.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;Google 证书内容&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 id=&#34;2-证书链&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e8%af%81%e4%b9%a6%e9%93%be&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 证书链&lt;/h3&gt;&lt;p&gt;前面介绍证书内容时，提到了每个证书都包含「签发者（Issuer）」信息，并且还包含「签发者」使用「证书内容」与「签发者私钥」生成的数字签名。&lt;/p&gt;&lt;p&gt;那么在证书交换时，如何验证证书的真实性、完整性及来源身份呢？根据「数字签名」算法的原理，显然需要使用「签发者公钥」来验证「被签发证书」中的签名。&lt;/p&gt;&lt;p&gt;仍然辛苦 Alice 与 Bob 来演示下这个流程:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;假设现在 Alice 生成了自己的公私钥对，她想将公钥发送给远在千里之外的 Bob，以便与 Bob 进行加密通讯&lt;/li&gt;&lt;li&gt;但是如果 Alice 直接发送公钥给 Bob，Bob 并无法验证其来源是 Alice，也无法验证证书是否被篡改&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;PKI 引入了一个&lt;strong&gt;可信赖的第三者&lt;/strong&gt;（Trusted third party，TTP）来解决这个问题。在 Alice 与 Bob 的案例中，就是说还有个第三者 &lt;strong&gt;Eve&lt;/strong&gt;，他使用自己的私钥为自己的公钥证书签了名，生成了一个「自签名证书」，并且已经提前将这个「自签名证书」分发（比如当面交付、物理分发 emmm）给了 Alice 跟 Bob.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;现在 Alice 首先使用自己的公钥以及个人信息制作了自己的公钥证书，但是这个证书还缺乏一个 Issuer 属性以及数字签名，我们把它叫做「证书签名请求（Certificate Signing Request, CSR）」&lt;/li&gt;&lt;li&gt;为了实现将证书安全传递给远在千里之外的 Bob，Alice 找到 Eve，将这个 CSR 文件提交给 Eve&lt;/li&gt;&lt;li&gt;Eve 验证了 Alice 的身份后，再使用这个 CSR 签发出完整的证书文件（Issuer 就填 Eve，然后 Eve 使用自己的私钥计算出证书的数字签名）交付给 Alice&lt;ul&gt;&lt;li&gt;Eve 可是曾经跨越千里之遥，将自己的公钥证书分发给了 Bob，所以在给 Alice 签发证书时，他显然可能会要求 付「签名费」。目前许多证书机构就是靠这个赚钱的，当然也有非盈利的证书机构如 Let&amp;rsquo;s Encrypt.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;现在 Alice 再将经 Eve 签名的证书发送给 Bob&lt;/li&gt;&lt;li&gt;Bob 收到证书后，看到 Issuer 是 Eve，于是找出以前 Eve 给他的「自签名证书」，然后使用其中的公钥验证收到的证书&lt;/li&gt;&lt;li&gt;如果验证成功，就说明证书的内容是经过 Eve 认证的。如果 Eve 没老糊涂了，那这个证书应该确实就是 Alice 的。&lt;/li&gt;&lt;li&gt;如果验证失败，那说明这是某个攻击者伪造的证书。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在现实世界中，Eve 这个角色被称作「&lt;strong&gt;证书认证机构&lt;/strong&gt;（Certification Authority, CA）」，全世界只有几十家这样的权威机构，它们都通过了各大软件厂商的严格审核，从而将根证书（CA 证书）直接内置于主流操作系统与浏览器中，也就是说早就提前分发给了因特网世界的几乎所有用户。由于许多操作系统或软件的更新迭代缓慢（2022 年了还有人用 XP 你敢信？），根证书的有效期通常都在十年以上。&lt;/p&gt;&lt;p&gt;但是，如果 CA 机构直接使用自己的私钥处理各种证书签名请求，这将是非常危险的。因为全世界有海量的 HTTPS 网站，也就是说有海量的证书需求，可一共才几十家 CA 机构。频繁的动用私钥会产生私钥泄漏的风险，如果这个私钥泄漏了，那将直接影响海量网站的安全性。&lt;/p&gt;&lt;p&gt;PKI 架构使用「&lt;strong&gt;数字证书链&lt;/strong&gt;（也叫做&lt;strong&gt;信任链&lt;/strong&gt;）」的机制来解决这个问题:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CA 机构首先生成自己的根证书与私钥，并使用私钥给根证书签名&lt;ul&gt;&lt;li&gt;因为私钥跟证书本身就是一对，因此根证书也被称作「自签名证书」&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CA 根证书被直接交付给各大软硬件厂商，内置在主流的操作系统与浏览器中&lt;/li&gt;&lt;li&gt;然后 CA 机构再使用私钥签发一些所谓的「&lt;strong&gt;中间证书&lt;/strong&gt;」，之后就把私钥雪藏了，非必要不会再拿出来使用。&lt;ul&gt;&lt;li&gt;通常离线存储在安全地点&lt;/li&gt;&lt;li&gt;中间层证书的有效期通常会比根证书短一些&lt;/li&gt;&lt;li&gt;部分中间证书会被作为备份使用，平常不会启用。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;CA 机构使用这些中间证书的私钥，为用户提交的所有 CSR 请求签名&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;画个图来表示大概是这么个样子：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-tls-cert/chain-of-trust.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;CA 机构也可能会在经过严格审核后，为其他机构签发中间证书，这样就能赋予其他机构签发证书的权利，而且根证书的安全性不受影响。&lt;/p&gt;&lt;p&gt;如果你访问某个 HTTPS 站点发现浏览器显示小绿锁，那就说明这个证书是由某个权威&lt;strong&gt;认证机构&lt;/strong&gt;签发的，其信息是经过这些机构认证的。&lt;/p&gt;&lt;p&gt;上述这个全球互联网上，由&lt;strong&gt;证书认证机构&lt;/strong&gt;、操作系统与浏览器内置的根证书、TLS 加密认证协议、OCSP 证书吊销协议等等组成的架构，我们可以称它为 &lt;strong&gt;Web PKI&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Web PKI&lt;/strong&gt; 通常是可信的，但是并不意味着它们可靠。历史上出现过许多由于安全漏洞（&lt;a href=&#34;http://www.ip-guard.net/blog/?p=834&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;2011 DigiNotar 攻击&lt;/a&gt;）或者政府要求，证书认证机构将假证书颁发给黑客或者政府机构的情况。获得假证书的人将可以随意伪造站点，而所有操作系统或浏览器都认为这些假站点是安全的，显示小绿锁。&lt;/p&gt;&lt;p&gt;因为&lt;strong&gt;证书认证机构&lt;/strong&gt;的可靠性问题以及一些其他的原因，部分个人、企业或其他机构（比如金融机构）会生成自己的根证书与中间证书，然后自行签发证书，构建出自己的 PKI 认证架构，我们可以将它称作&lt;strong&gt;内部 PKI&lt;/strong&gt;。但是这种自己生成的根证书是未内置在操作系统与浏览器中的，为了确保安全性，用户就需要先手动在设备上安装好这个数字证书。自行签发证书的案例有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;微信、支付宝及各种银行客户端中的数字证书与安全性更高的 USB 硬件证书（U 盾），这种涉及海量资金安全甚至国家安全的场景，显然是不能直接前面提到的几十个权威 CA 机构的。&lt;/li&gt;&lt;li&gt;局域网通信，通常是网络管理员生成一个本地 CA 证书安装到所有局域网设备上，再用它的私钥签发其他证书用于局域网安全通信&lt;ul&gt;&lt;li&gt;典型的例子是各企业的内部通讯网络，比如 Kubernetes 容器集群&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;现在再拿出前面 &lt;code&gt;https://www.google.com&lt;/code&gt; 的证书截图看看，最上方有三个标签页，从左至右依次是「服务器证书」、「中间证书」、「根证书」，可以点进去分别查看这三个证书的各项参数，各位看官可以自行尝试：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-tls-cert/cert-content.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;Google 证书内容&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;h4 id=&#34;交叉签名&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%a4%e5%8f%89%e7%ad%be%e5%90%8d&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;交叉签名&lt;/h4&gt;&lt;p&gt;按前面的描述，每个权威认证机构都拥有一个正在使用的根证书，使用它签发出几个中间证书后，就会把它离线存储在安全地点，平常仅使用中间证书签发终端实体证书。这样实际上每个权威认证机构的证书都形成一颗证书树，树的顶端就是根证书。&lt;/p&gt;&lt;p&gt;实际上在 PKI 体系中，一些证书链上的中间证书会被使用多个根证书进行签名——我们称这为交叉签名。交叉签名的主要目的是提升证书的兼容性——客户端只要安装有其中任何一个根证书，就能正常验证这个中间证书。从而使中间证书在较老的设备也能顺利通过证书验证。&lt;/p&gt;&lt;h3 id=&#34;3-证书的存储格式与编码标准&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-%e8%af%81%e4%b9%a6%e7%9a%84%e5%ad%98%e5%82%a8%e6%a0%bc%e5%bc%8f%e4%b8%8e%e7%bc%96%e7%a0%81%e6%a0%87%e5%87%86&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. 证书的存储格式与编码标准&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;证书的格式这一块，是真的五花八门&amp;hellip;沉重的历史包袱&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;X509 只规定了证书应该包含哪些信息，但是未定义证书该如何存储。为了解决证书的描述与编码存储问题，又出现了如下标准：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ASN.1 结构：是一种描述证书格式的方法。&lt;ul&gt;&lt;li&gt;它类似 protobuf 数据描述语言、SQL DDL&lt;/li&gt;&lt;li&gt;ASN.1 只规定了该如何描述证书，未定义该如何编码。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;将 ASN.1 结构编码存储的格式有&lt;ul&gt;&lt;li&gt;DER：一种二进制编码格式&lt;/li&gt;&lt;li&gt;PEM：DER 是二进制格式，不便于复制粘贴，因此出现了 PEM，它是一个文本编码格式（其实就是把 DER 编码后的数据再 Base64 编码下&amp;hellip;）&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;某些场景下，X.509 信息不够丰富，因此又设计了一些信息更丰富（例如可以包含证书 链、秘钥）的证书封装格式，包括 PKCS #7 和 PKCS #12&lt;ul&gt;&lt;li&gt;仍然用 ASN.1 格式描述&lt;/li&gt;&lt;li&gt;基本都是用 DER 编码&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面详细介绍下这些相关的标准与格式。&lt;/p&gt;&lt;h4 id=&#34;编码存储格式-der-与-pem&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e7%bc%96%e7%a0%81%e5%ad%98%e5%82%a8%e6%a0%bc%e5%bc%8f-der-%e4%b8%8e-pem&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;编码存储格式 DER 与 PEM&lt;/h4&gt;&lt;p&gt;DER 是由国际电信联盟（ITU）在 &lt;a href=&#34;https://www.itu.int/ITU-T/recommendations/rec.aspx?rec=x.690&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt; ITU-T X.690&lt;/a&gt;标准中定义的一种数据编码规则，用于将 ASN.1 结构的信息编码为二进制数据。直接以 DER 格式存储的证书，大都使用 &lt;code&gt;.cer&lt;/code&gt; &lt;code&gt;.crt&lt;/code&gt; &lt;code&gt;.der&lt;/code&gt; 拓展名，在 Windows 系统比较常见。&lt;/p&gt;&lt;p&gt;而 PEM 格式，即 Privacy-Enhanced Mail，是 openssl 默认使用的证书格式。可用于编码公钥、私钥、公钥证书等多种密码学信息。PEM 其实就是在 DER 的基础上多做一步——使用 Base64 将 DER 编码出的二进制数据再处理一次，编码成字符串再存储。好处是存储、传输要方便很多，可以直接复制粘贴。&lt;/p&gt;&lt;p&gt;一个 2048 位 RSA 公钥的 PEM 文件内容如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN PUBLIC KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyl6q6BkEcEUi9V1/Q7il&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bngnh1YzG1tM4Hd6XCZQ35OzDN4my9eXWtjoL8YvLYqlYTJqhTHpuptgjF/lmlhg&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WIMKNNcuDAbvmWExRyZateVrjO9OtgkyJCuGhaum0TIUC&#43;dbZ9L9xsdK/fU1L5BB&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nPRSYMloH8uE1CbK/DhFUiKp36aHZFfqLPicY3c6/N&#43;k2kIJCEWBY0SROqpqy2Iz&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yCIP54JSoOoGz6pdtWhd5cEeicr9e7f/WixEES6fgavqIHzhSJBVctpMgFPjFZ/x&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JJhQVf23WKb3YQQ/0Uc8O7OTDXoUfuJP9UgqvKNh4hPfJA&#43;a4nxkDYhTPfrLHfKY&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;YwIDAQAB&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END PUBLIC KEY-----&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;PEM 格式的数据通常以 &lt;code&gt;.pem&lt;/code&gt; &lt;code&gt;.key&lt;/code&gt; &lt;code&gt;.crt&lt;/code&gt; &lt;code&gt;.cer&lt;/code&gt; 等拓展名存储，直接 &lt;code&gt;cat&lt;/code&gt; 一下是不是字符串，就能确认该文件是否是 PEM 格式了。&lt;/p&gt;&lt;p&gt;因为纯文本格式处理起来很方便，大部分场景下证书、公钥、私钥等信息都会被编码成 PEM 格式再进行存储、传输。&lt;/p&gt;&lt;p&gt;openssl 默认使用的输入输出均 PEM 格式。&lt;/p&gt;&lt;h4 id=&#34;pkcs1&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#pkcs1&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;PKCS#1&lt;/h4&gt;&lt;p&gt;PKCS#1 是专用于编码 RSA 公私钥的标准，通常被编码为 PEM 格式存储。openssl 生成的 RSA 密钥对默认使用此格式。&lt;/p&gt;&lt;p&gt;这是一个比较陈旧的格式，openssl 之所以默认使用它，主要是为了兼容性。通常建议使用更安全的 PKCS#8 而不是这个。&lt;/p&gt;&lt;p&gt;一个使用 PKCS#1 标准的 2048 位 RSA 公钥文件，内容如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN PUBLIC KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyl6q6BkEcEUi9V1/Q7il&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bngnh1YzG1tM4Hd6XCZQ35OzDN4my9eXWtjoL8YvLYqlYTJqhTHpuptgjF/lmlhg&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;WIMKNNcuDAbvmWExRyZateVrjO9OtgkyJCuGhaum0TIUC&#43;dbZ9L9xsdK/fU1L5BB&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nPRSYMloH8uE1CbK/DhFUiKp36aHZFfqLPicY3c6/N&#43;k2kIJCEWBY0SROqpqy2Iz&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yCIP54JSoOoGz6pdtWhd5cEeicr9e7f/WixEES6fgavqIHzhSJBVctpMgFPjFZ/x&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;JJhQVf23WKb3YQQ/0Uc8O7OTDXoUfuJP9UgqvKNh4hPfJA&#43;a4nxkDYhTPfrLHfKY&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;YwIDAQAB&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END PUBLIC KEY-----&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;pkcs7--cms&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#pkcs7--cms&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;PKCS#7 / CMS&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;头疼&amp;hellip; PKCS#7 导致是个啥玩意儿？为什么这么多五花八门的格式&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5652&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;PKCS#7/CMS&lt;/a&gt;，是一个多用途的证书描述格式。它包含一个数据填充规则，这个填充规则常被用在需要数据填充的分组加密、数字签名等算法中。&lt;/p&gt;&lt;p&gt;另外据说 PKCS#7 也可以被用来描述证书，并以 DER/PEM 格式保存，后缀通常使用 &lt;code&gt;.p7b&lt;/code&gt; 或者 &lt;code&gt;.p7c&lt;/code&gt;,这个暂时存疑吧，有需要再研究了。&lt;/p&gt;&lt;h4 id=&#34;pkcs8&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#pkcs8&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;PKCS#8&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc5958&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;PKCS#8&lt;/a&gt; 是一个专门用于编码私钥的标准，可用于编码 DSA/RSA/ECC 私钥。它通常被编码成 PEM 格式存储。&lt;/p&gt;&lt;p&gt;前面介绍了专门用于编码 RSA 的 PKCS#1 标准比较陈旧，而且&lt;a href=&#34;https://web.archive.org/web/20081117042916/http://www.gemplus.com/smart/rd/publications/pdf/CJNP00pk.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;曾经出过漏洞&lt;/a&gt;。因此通常建议使用更安全的 PKCS#8 来取代 PKCS#1.&lt;/p&gt;&lt;p&gt;C# Java 等编程语言通常要求使用此格式的私钥，而 Python 的 &lt;a href=&#34;https://github.com/pyca/cryptography&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;pyca/cryptography&lt;/a&gt; 则支持多种编码格式。&lt;/p&gt;&lt;p&gt;一个非加密 ECC 私钥的 PKCS#8 格式如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQglQanBRiYVPX7F2Rd&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;4CqyjEN0K4qfHw4tM/yMIh21wamhRANCAARsxaI4jT1b8zbDlFziuLngPcExbYzz&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ePAHUmgWL/ZCeqlODF/l/XvimkjaWC2huu1OSWB9EKuG&#43;mKFY2Y5k&#43;vF&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;一个加密 PKCS#8 私钥的 PEM 格式私钥如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN ENCRYPTED PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Base64 编码内容&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END ENCRYPTED PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;可使用如下 openssl 命令将 RSA/ECC 私钥转换为 PKCS#8 格式：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# RSA&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl pkcs8 -topk8 -inform PEM -in rsa-private-key.pem -outform PEM -nocrypt -out rsa-private-key-pkcs8.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# ECC 的转换命令与 RSA 完全一致&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl pkcs8 -topk8 -inform PEM -in ecc-private-key.pem -outform PEM -nocrypt -out ecc-private-key-pkcs8.pem&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;pkcs12&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#pkcs12&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;PKCS#12&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/PKCS_12&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;PKCS#12&lt;/a&gt; 是一个归档文件格式，用于实现存储多个私钥及相关的 X.509 证书。&lt;/p&gt;&lt;p&gt;因为保存了私钥，为了安全性它通常是加密的，需要使用 passphrase 解密后才能使用。&lt;/p&gt;&lt;p&gt;PKCS#12 的常用拓展名为 &lt;code&gt;.p12&lt;/code&gt; &lt;code&gt;.pfx&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;PKCS#12 的主要使用场景是安全地保存、传输私钥及相关的 X.509 证书，比如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;微信/支付宝等支付相关的数字证书，通常使用 PKCS#12 格式存储，使用商户号做加密密码，然后编码为 base64 再提供给用户&lt;/li&gt;&lt;li&gt;安卓的 APK 签名证书通常使用 PKCS#12 格式存储，拓展名为 &lt;code&gt;.keystore&lt;/code&gt; 或者 &lt;code&gt;.jks&lt;/code&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;PEM 格式转 PKCS#12（公钥和私钥都放里面）:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl pkcs12 -export -in client.crt -inkey client.key -out client.p12&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 按提示输入保护密码&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;从 PKCS#12 中分别提取出 PEM 格式的公钥与私钥:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl pkcs12 -in xxx.p12 -out xxx.crt -clcerts -nokeys&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl pkcs12 -in xxx.p12 -out xxx.key -nocerts -nodes&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&#34;4-证书支持保护的域名类型&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#4-%e8%af%81%e4%b9%a6%e6%94%af%e6%8c%81%e4%bf%9d%e6%8a%a4%e7%9a%84%e5%9f%9f%e5%90%8d%e7%b1%bb%e5%9e%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;4. 证书支持保护的域名类型&lt;/h3&gt;&lt;p&gt;TLS 证书支持配置多个域名，并且支持所谓的通配符（泛）域名。但是通配符域名证书的匹配规则，&lt;strong&gt;和 DNS 解析中的匹配规则并不一致&lt;/strong&gt;！&lt;/p&gt;&lt;p&gt;根据&lt;a href=&#34;https://help.aliyun.com/document_detail/28542.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;证书选型和购买 - 阿里云文档&lt;/a&gt; 的解释，&lt;strong&gt;通配符证书只支持同级匹配&lt;/strong&gt;，详细说明如下:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;一级通配符域名&lt;/strong&gt;: 可保护该通配符域名（主域名）自身和该域名所有的一级子域名。&lt;ul&gt;&lt;li&gt;例如: 一级通配符域名 &lt;code&gt;*.aliyun.com&lt;/code&gt; 可以用于保护 &lt;code&gt;aliyun.com&lt;/code&gt;、&lt;code&gt;www.aliyun.com&lt;/code&gt; 以及其他所有一级子域名。但是不能用于保护任何二级子域名，如 &lt;code&gt;xx.aa.aliyun.com&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;二级或二级以上通配符域名&lt;/strong&gt;: 只能保护该域名同级的所有通配域名，不支持保护该通配符域名本身。&lt;ul&gt;&lt;li&gt;例如: &lt;code&gt;*.a.aliyun.com&lt;/code&gt; 只支持保护它的所有同级域名，不能用于保护三级子域名。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;要想保护多个二三级子域，只能在生成 TLS 证书时，添加多个通配符域名。因此设计域名规则时，要考虑到这点，尽量不要使用层级太深的域名！有些信息可以通过 &lt;code&gt;-&lt;/code&gt; 来拼接以减少域名层级，比如阿里云的 oss 域名:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;公网: &lt;code&gt;oss-cn-shenzhen.aliyuncs.com&lt;/code&gt;&lt;/li&gt;&lt;li&gt;内网: &lt;code&gt;oss-cn-shenzhen-internal.aliyuncs.com&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;此外也可直接为 IP 地址签发证书，IP 地址可以记录在证书的 SAN 属性中。在自己生成的证书链中可以为局域网 IP 或局域网域名生成本地签名证书。此外在因特网中也有一些权威认证机构提供为公网 IP 签发证书的服务，一个例子是 Cloudflare 的 &lt;a href=&#34;https://1.1.1.1&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://1.1.1.1&lt;/a&gt;, 使用 Firefox 查看其证书，可以看到是一个由 DigiCert 签发的 ECC 证书，使用了 P-256 曲线：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-tls-cert/1.1.1.1-cert.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt; Cloudflare 的 IP 证书&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 id=&#34;5-生成自己的证书链&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#5-%e7%94%9f%e6%88%90%e8%87%aa%e5%b7%b1%e7%9a%84%e8%af%81%e4%b9%a6%e9%93%be&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;5. 生成自己的证书链&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/openssl/openssl&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;OpenSSL&lt;/a&gt; 是目前使用最广泛的网络加密算法库，这里以它为例介绍证书的生成。另外也可以考虑使用 CloudFalre 开源的 PKI 工具 &lt;a href=&#34;https://github.com/cloudflare/cfssl&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;cfssl&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;前面介绍了，在局域网通信中通常使用本地证书链来保障通信安全，这通常有如下几个原因。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;在内网环境下，管理员将本地 CA 证书安装到所有局域网设备上，因此并无必要向权威 CA 机构申请证书&lt;/li&gt;&lt;li&gt;内网环境使用的可能是非公网域名（&lt;code&gt;xxx.local&lt;/code&gt;/&lt;code&gt;xxx.lan&lt;/code&gt;/&lt;code&gt;xxx.srv&lt;/code&gt; 等），甚至可能直接使用局域网 IP 通信，权威 CA 机构不签发这种类型的证书&lt;/li&gt;&lt;li&gt;本地证书链完全受自己控制，可以自己设置安全强度、证书年限等等，而且不受权威 CA 机构影响。&lt;/li&gt;&lt;li&gt;权威 CA 机构不签发客户端证书，因为客户端不一定有固定的 IP 地址或者域名。客户端证书需要自己签发。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;下面介绍下如何使用 OpenSSL 生成一个本地 CA 证书链，并签发用于安全通信的服务端证书，可用于 HTTPS/QUIC 等协议。&lt;/p&gt;&lt;h4 id=&#34;1-生成-rsa-证书链&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e7%94%9f%e6%88%90-rsa-%e8%af%81%e4%b9%a6%e9%93%be&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 生成 RSA 证书链&lt;/h4&gt;&lt;p&gt;到目前为止 RSA 仍然是应用最广泛的非对称加密方案，几乎所有的根证书都是使用的 2048 位或者 4096 位的 RSA 密钥对。&lt;/p&gt;&lt;p&gt;对于 RSA 算法而言，越长的密钥能提供越高的安全性，当前使用最多的 RSA 密钥长度仍然是 2048 位，但是 2048 位已被一些人认为不够安全了，密码学家更建议使用 3072 位或者 4096 位的密钥。&lt;/p&gt;&lt;p&gt;生成一个 2048 位的 RSA 证书链的流程如下:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;OpenSSL 的 CSR 配置文件官方文档: &lt;a href=&#34;https://www.openssl.org/docs/manmaster/man1/openssl-req.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://www.openssl.org/docs/manmaster/man1/openssl-req.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;ol&gt;&lt;li&gt;编写证书签名请求的配置文件 &lt;code&gt;csr.conf&lt;/code&gt;:&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ req ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;prompt = no&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;default_md = sha256  # 在签名算法中使用 SHA-256 计算哈希值&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;req_extensions = req_ext&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;distinguished_name = dn&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ dn ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C = CN  # Contountry&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ST = Guangdong&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;L = Shenzhen&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;O = Xxx&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OU = Xxx-SRE&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CN = *.svc.local  # 泛域名，这个字段已经被 chrome/apple 弃用了。&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ alt_names ]  # 备用名称，chrome/apple 目前只信任这里面的域名。&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS.1 = *.svc.local  # 一级泛域名&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS.2 = *.aaa.svc.local  # 二级泛域名&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS.3 = *.bbb.svc.local  # 二级泛域名&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ req_ext ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;subjectAltName = @alt_names&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ v3_ext ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;subjectAltName=@alt_names  # Chrome 要求必须要有 subjectAltName(SAN)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;authorityKeyIdentifier=keyid,issuer:always&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;basicConstraints=CA:FALSE&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;keyUsage=keyEncipherment,dataEncipherment,digitalSignature&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;extendedKeyUsage=serverAuth,clientAuth&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;此文件的详细文档&lt;/strong&gt;: &lt;a href=&#34;https://www.openssl.org/docs/man1.1.1/man5/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;OpenSSL file formats and conventions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;生成证书链与服务端证书:&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 生成本地 CA 根证书的私钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl genrsa -out ca.key &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 使用私钥签发出 CA 根证书&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## CA 根证书的有效期尽量设长一点，因为不方便更新换代，这里设了 100 年&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -x509 -new -nodes -key ca.key -subj &lt;span class=&#34;s2&#34;&gt;&amp;#34;/CN=MyLocalRootCA&amp;#34;&lt;/span&gt; -days &lt;span class=&#34;m&#34;&gt;36500&lt;/span&gt; -out ca.crt&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. 生成服务端证书的 RSA 私钥（2048 位）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl genrsa -out server.key &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 4. 通过第一步编写的配置文件，生成证书签名请求（公钥&#43;申请者信息）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -new -key server.key -out server.csr -config csr.conf&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 5. 使用 CA 根证书直接签发服务端证书，这里指定服务端证书的有效期为 3650 天&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -CAcreateserial -out server.crt -days &lt;span class=&#34;m&#34;&gt;3650&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -extensions v3_ext -extfile csr.conf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;简单起见这里没有生成中间证书，直接使用根证书签发了用于安全通信的服务端证书。&lt;/p&gt;&lt;h4 id=&#34;2-生成-ecc-证书链&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e7%94%9f%e6%88%90-ecc-%e8%af%81%e4%b9%a6%e9%93%be&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 生成 ECC 证书链&lt;/h4&gt;&lt;p&gt;在上一篇文章中我们已经介绍过了，ECC 加密方案是新一代非对称加密算法，是 RSA 的继任者，在安全性相同的情况下，ECC 拥有比 RSA 更快的计算速度、更少的内存以及更短的密钥长度。&lt;/p&gt;&lt;p&gt;对于 ECC 加密方案而言，不同的椭圆曲线生成的密钥对提供了不同程度的安全性。各个组织（ANSI X9.62、NIST、SECG）命名了多种曲线，可通过如下命名查看 openssl 支持的所有椭圆曲线名称:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl ecparam -list_curves&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;目前在 TLS 协议以及 JWT 签名算法中，目前应该最广泛的椭圆曲线仍然是 NIST 系列：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;P-256&lt;/code&gt;: 到目前为止 P-256 应该仍然是应用最为广泛的椭圆曲线&lt;ul&gt;&lt;li&gt;在 openssl 中对应的名称为 &lt;code&gt;prime256v1&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;P-384&lt;/code&gt;&lt;ul&gt;&lt;li&gt;在 openssl 中对应的名称为 &lt;code&gt;secp384r1&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;P-521&lt;/code&gt;&lt;ul&gt;&lt;li&gt;在 openssl 中对应的名称为 &lt;code&gt;secp521r1&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;blockquote&gt;&lt;p&gt;此外还有新兴的 x25519 系列，这里不多介绍了，有兴趣可自行了解。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;生成一个使用 &lt;code&gt;P-384&lt;/code&gt; 曲线的 ECC 证书的示例如下:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;编写证书签名请求的配置文件 &lt;code&gt;ecc-csr.conf&lt;/code&gt;:&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ req ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;prompt = no&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;default_md = sha256 # 在签名算法中使用 SHA-256 计算哈希值&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;req_extensions = req_ext&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;distinguished_name = dn&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ dn ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C = CN  # Contountry&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ST = Guangdong&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;L = Shenzhen&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;O = Xxx&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OU = Xxx-SRE&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CN = *.svc.local  # 泛域名，这个字段已经被 chrome/apple 弃用了。&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ alt_names ]  # 备用名称，chrome/apple 目前只信任这里面的域名。&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS.1 = *.svc.local  # 一级泛域名&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS.2 = *.aaa.svc.local  # 二级泛域名&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS.3 = *.bbb.svc.local  # 二级泛域名&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ req_ext ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;subjectAltName = @alt_names&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[ v3_ext ]&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;subjectAltName=@alt_names  # Chrome 要求必须要有 subjectAltName(SAN)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;authorityKeyIdentifier=keyid,issuer:always&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;basicConstraints=CA:FALSE&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;keyUsage=keyEncipherment,dataEncipherment,digitalSignature&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;extendedKeyUsage=serverAuth,clientAuth&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;此文件的详细文档&lt;/strong&gt;: &lt;a href=&#34;https://www.openssl.org/docs/man1.1.1/man5/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;OpenSSL file formats and conventions&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;生成证书链与服务端证书:&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 生成本地 CA 根证书的私钥，使用 P-384 曲线，密钥长度 384 位&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl ecparam -genkey -name secp384r1 -out ecc-ca.key&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 使用私钥签发出 CA 根证书&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## CA 根证书的有效期尽量设长一点，因为不方便更新换代，这里设了 100 年&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -x509 -new -nodes -key ecc-ca.key -subj &lt;span class=&#34;s2&#34;&gt;&amp;#34;/CN=MyLocalRootCA&amp;#34;&lt;/span&gt; -days &lt;span class=&#34;m&#34;&gt;36500&lt;/span&gt; -out ecc-ca.crt&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. 生成服务端证书的 EC 私钥，使用 P-384 曲线，密钥长度 384 位&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl ecparam -genkey -name secp384r1 -out ecc-server.key&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 4. 通过第一步编写的配置文件，生成证书签名请求（公钥&#43;申请者信息）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -new -key ecc-server.key -out ecc-server.csr -config ecc-csr.conf&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 5. 使用 CA 根证书直接签发 ECC 服务端证书，这里指定服务端证书的有效期为 3650 天&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -req -in ecc-server.csr -CA ecc-ca.crt -CAkey ecc-ca.key &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -CAcreateserial -out ecc-server.crt -days &lt;span class=&#34;m&#34;&gt;3650&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  -extensions v3_ext -extfile ecc-csr.conf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;简单起见这里没有生成中间证书，直接使用根证书签发了用于安全通信的服务端证书，而且根证书跟服务端证书都使用了 ECC 证书。现实中由于根证书更新缓慢，几乎所有的根证书都还是 RSA 证书，而中间证书与终端实体证书的迭代要快得多，目前已经有不少网站在使用 ECC 证书了。&lt;/p&gt;&lt;h3 id=&#34;6-证书的类型&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#6-%e8%af%81%e4%b9%a6%e7%9a%84%e7%b1%bb%e5%9e%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;6. 证书的类型&lt;/h3&gt;&lt;p&gt;按照数字证书的生成方式进行分类，证书有三种类型:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;由权威 CA 机构签名的「&lt;strong&gt;公网受信任证书&lt;/strong&gt;」: 这类证书会被浏览器、小程序等第三方应用/服务商信任&lt;ul&gt;&lt;li&gt;申请证书时需要验证你对域名/IP 的所有权，也就使证书无法伪造&lt;/li&gt;&lt;li&gt;如果你的 API 需要提供给第三方应用/服务商/用户访问，那就需要向权威 CA 机构申请此类证书&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;本地签名证书&lt;/strong&gt;: 即由本地 CA 证书签名的 TLS 证书&lt;ul&gt;&lt;li&gt;本地 CA 证书，就是自己使用 &lt;code&gt;openssl&lt;/code&gt; 等工具生成的 CA 证书&lt;/li&gt;&lt;li&gt;这类证书的缺点是无法与第三方应用/服务商建立安全的连接&lt;/li&gt;&lt;li&gt;如果客户端是完全可控的（比如是自家的 APP，或者是接入了域控的企业局域网设备），完全可以在所有客户端都安装上自己生成的 CA 证书。这种场景下使用此类证书是安全可靠的，可以不向权威 CA 机构申请证书&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;自签名证书&lt;/strong&gt;: 前面介绍了根证书是一个自签名证书，它使用根证书的私钥为根证书签名&lt;ul&gt;&lt;li&gt;这里的「自签名证书」是指&lt;strong&gt;直接使用根证书进行网络通讯&lt;/strong&gt;，缺点是证书的更新迭代会很麻烦，而且安全性低。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;总的来说，权威 CA 机构颁发的「公网受信任证书」，可以被第三方应用信任，但是自己生成的不行。而越贵的权威证书，安全性与可信度就越高，或者可以保护更多的域名。&lt;/p&gt;&lt;p&gt;在客户端可控的情况下，可以考虑自己生成证书链并签发「本地签名证书」，将本地 CA 证书预先安装在客户端中用于验证。&lt;/p&gt;&lt;p&gt;而「自签名证书」主要是方便，能不用还是尽量不要使用。&lt;/p&gt;&lt;h3 id=&#34;7-向权威-ca-机构申请公网受信任证书&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#7-%e5%90%91%e6%9d%83%e5%a8%81-ca-%e6%9c%ba%e6%9e%84%e7%94%b3%e8%af%b7%e5%85%ac%e7%bd%91%e5%8f%97%e4%bf%a1%e4%bb%bb%e8%af%81%e4%b9%a6&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;7. 向权威 CA 机构申请「公网受信任证书」&lt;/h3&gt;&lt;p&gt;向权威机构申请的公网受信任证书，可以直接应用在边界网关上，用于给公网用户提供 TLS 加密访问服务，比如各种 HTTPS 站点、API。这是需求最广的一类数字证书服务。&lt;/p&gt;&lt;p&gt;而证书的申请与管理方式又分为两种：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;通过 &lt;a href=&#34;https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;ACMEv2（Automated Certificate Management Environment (ACME) &lt;/a&gt; 协议进行证书的自动化申请与管理。支持使用此开放协议申请证书的权威机构有：&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;免费服务&lt;ul&gt;&lt;li&gt;Let&amp;rsquo;s Encrypt: 众所周知，它提供三个月有效期的免费证书。&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://zerossl.com/documentation/acme/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;ZeroSSL&lt;/a&gt;:  貌似也是一个比较有名的 SSL 证书服务&lt;ul&gt;&lt;li&gt;通过 ACME 协议支持不限数量的 90 天证书，也支持多域名证书与泛域名证书。&lt;/li&gt;&lt;li&gt;它相比 Let&amp;rsquo;s Encrypt 的优势是，它提供一个证书控制台，可以查看与管理用户当前的所有证书，了解其状态。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;付费服务&lt;ul&gt;&lt;li&gt;DigiCert: 这个非常有名（但也是相当贵），官方文档 &lt;a href=&#34;https://docs.digicert.com/certificate-tools/Certificate-lifecycle-automation-index/acme-user-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Digicert - Third-party ACME client automation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Google Trust Services: Google 推出的公网证书服务，也是三个月有效期，其根证书交叉验证了 GlobalSign。官方文档 &lt;a href=&#34;https://cloud.google.com/blog/products/identity-security/automate-public-certificate-lifecycle-management-via--acme-client-api&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Automate Public Certificates Lifecycle Management via RFC 8555 (ACME)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Entrust: 官方文档 &lt;a href=&#34;https://www.entrust.com/knowledgebase/ssl/how-to-use-acme-to-install-ssl-tls-certificates-in-entrust-certificate-services-apache#step1&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Entrust&amp;rsquo;s ACME implementation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;GlobalSign: 官方文档 &lt;a href=&#34;https://www.globalsign.com/en/acme-automated-certificate-management&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;GlobalSign ACME Service&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;相关的自动化工具&lt;ul&gt;&lt;li&gt;很多代理工具都有提供基于 ACMEv2 协议的证书申请与自动更新，比如:&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;/network-proxy&amp;#43;web-server/traefik/README.md&#34; rel=&#34;&#34;&gt;Traefik&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/caddyserver/caddy&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Caddy&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;docker-letsencrypt-nginx-proxy-companion&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;网上也有一些 &lt;a href=&#34;https://github.com/certbot/certbot&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;certbot&lt;/a&gt; 插件，可以通过 DNS 提供商的 API 进行 ACMEv2 证书的申请与自动更新，比如&lt;/strong&gt;:&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/tengattack/certbot-dns-aliyun&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;certbot-dns-aliyun&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;terraform 也有相关 provider&lt;/strong&gt;: &lt;a href=&#34;https://github.com/vancluever/terraform-provider-acme&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;terraform-provider-acme&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/cert-manager/cert-manager&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;cert-manager&lt;/a&gt;: kubernetes 中的证书管理工具，支持 ACMEv2，也支持创建与管理私有证书。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;ol&gt;&lt;li&gt;通过一些权威 CA 机构或代理商提供的 Web 网站，手动填写信息来申请与更新证书。&lt;/li&gt;&lt;/ol&gt;&lt;ul&gt;&lt;li&gt;这个流程相对会比较繁琐。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这些权威机构提供的证书服务，提供的证书又有不同的分级，这里详细介绍下三种不同的证书级别，以及该如何选用：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Domain Validated（DV）证书&lt;ul&gt;&lt;li&gt;&lt;strong&gt;仅验证域名所有权&lt;/strong&gt;，验证步骤最少，价格最低，仅需要数分钟即可签发。&lt;/li&gt;&lt;li&gt;优点就是易于签发，很适合做自动化。&lt;/li&gt;&lt;li&gt;各云厂商（AWS/GCP/Cloudflare，以及 Vercel/Github 的站点服务）给自家服务提供的免费证书都是 DV 证书，Let&amp;rsquo;s Encrypt 的证书也是这个类型。&lt;ul&gt;&lt;li&gt;很明显这些证书的签发都非常方便，而且仅验证域名所有权。&lt;/li&gt;&lt;li&gt;但是 AWS/GCP/Cloudflare/Vercel/Github 提供的 DV 证书都仅能在它们的云服务上使用，不提供私钥功能！&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Organization Validated (OV) 证书&lt;ul&gt;&lt;li&gt;是企业 SSL 证书的首选，通过企业认证确保企业 SSL 证书的真实性。&lt;/li&gt;&lt;li&gt;除域名所有权外，CA 机构还会审核组织及企业的真实性，包括注册状况、联系方式、恶意软件等内容。&lt;/li&gt;&lt;li&gt;如果要做合规化，可能至少也得用 OV 这个级别的证书。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Extended Validation（EV）证书&lt;ul&gt;&lt;li&gt;最严格的认证方式，CA 机构会深度审核组织及企业各方面的信息。&lt;/li&gt;&lt;li&gt;被认为适合用于大型企业、金融机构等组织或企业。&lt;/li&gt;&lt;li&gt;而且仅支持签发单域名、多域名证书，不支持签发泛域名证书，安全性杠杠的。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;完整的证书申请流程如下:&lt;/p&gt;&lt;p&gt;&lt;figure&gt;&lt;a class=&#34;lightgallery&#34; href=&#34;/images/about-tls-cert/ca-sign-sechdule.webp&#34; title=&#34;/images/about-tls-cert/ca-sign-sechdule.webp&#34; data-thumbnail=&#34;/images/about-tls-cert/ca-sign-sechdule.webp&#34; data-sub-html=&#34;&lt;h2&gt;证书申请流程&lt;/h2&gt;&#34;&gt;        &lt;img            class=&#34;lazyload&#34;            data-src=&#34;/images/about-tls-cert/ca-sign-sechdule.webp&#34;            data-srcset=&#34;/images/about-tls-cert/ca-sign-sechdule.webp, /images/about-tls-cert/ca-sign-sechdule.webp 1.5x, /images/about-tls-cert/ca-sign-sechdule.webp 2x&#34;            data-sizes=&#34;auto&#34;            alt=&#34;/images/about-tls-cert/ca-sign-sechdule.webp&#34;&gt;    &lt;/a&gt;&lt;figcaption class=&#34;image-caption&#34;&gt;证书申请流程&lt;/figcaption&gt;    &lt;/figure&gt;&lt;/p&gt;&lt;p&gt;为了方便用户，图中的申请人（Applicant）自行处理的部分，目前很多证书申请网站也可以自动处理，用户只需要提供相关信息即可。&lt;/p&gt;&lt;h3 id=&#34;8-证书的寿命&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#8-%e8%af%81%e4%b9%a6%e7%9a%84%e5%af%bf%e5%91%bd&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;8. 证书的寿命&lt;/h3&gt;&lt;p&gt;对于公开服务，服务端证书的有效期不要超过 825 天（27 个月）！另外从 2020 年 11 月起，新申请的服务端证书有效期已经缩短到了 398 天（13 个月）。目前 Apple/Mozilla/Chrome 都发表了相应声明，证书有效期超过上述限制的，将被浏览器/Apple设备禁止使用。&lt;/p&gt;&lt;p&gt;而对于其他用途的证书，如果更换起来很麻烦，可以考虑放宽条件。比如 kubernetes 集群的加密证书，可以考虑有效期设长一些，比如 10 年。&lt;/p&gt;&lt;p&gt;据&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzA4MTQ2MjI5OA==&amp;amp;mid=2664079008&amp;amp;idx=1&amp;amp;sn=dede1114d5705880ea757f8d9ae4c92d&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;云原生安全破局｜如何管理周期越来越短的数字证书？&lt;/a&gt;所述，大量知名企业如特斯拉/微软/领英/爱立信都曾因未及时更换 TLS 证书导致服务暂时不可用。&lt;/p&gt;&lt;p&gt;因此 TLS 证书最好是设置自动轮转！人工维护不可靠！&lt;/p&gt;&lt;p&gt;目前很多 Web 服务器/代理，都支持自动轮转 Let&amp;rsquo;s Encrypt 证书。另外 Vault 等安全工具，也支持自动轮转私有证书。&lt;/p&gt;&lt;h3 id=&#34;9-使用-openssl-验证证书查看证书信息&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#9-%e4%bd%bf%e7%94%a8-openssl-%e9%aa%8c%e8%af%81%e8%af%81%e4%b9%a6%e6%9f%a5%e7%9c%8b%e8%af%81%e4%b9%a6%e4%bf%a1%e6%81%af&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;9. 使用 OpenSSL 验证证书、查看证书信息&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看证书(crt)信息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -noout -text -in server.crt&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看证书请求(csr)信息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -noout -text -in server.csr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看 RSA 私钥(key)信息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl rsa -noout -text -in server.key&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 验证证书是否可信&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 1. 使用系统的证书链进行验证&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl verify server.crt&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 2. 使用指定的 CA 证书进行验证&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl verify -CAfile ca.crt server.crt&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&#34;二tls-协议&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8ctls-%e5%8d%8f%e8%ae%ae&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、TLS 协议&lt;/h2&gt;&lt;p&gt;TLS 协议，中文名为「传输层安全协议」，是一个安全通信协议，被用于在网络上进行安全通信。&lt;/p&gt;&lt;p&gt;TLS 协议通常与 HTTP / FTP / SMTP 等协议一起使用以实现加密通讯，这种组合协议通常被缩写为 HTTPS / SFTP / SMTPS.&lt;/p&gt;&lt;p&gt;在讲 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;TLS 协议&lt;/a&gt;前，还是先复习下「对称密码算法」与「非对称密码算法」两个密码体系的特点。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;对称密码算法（如 AES/ChaCha20）&lt;/strong&gt;: 计算速度快、安全强度高，但是缺乏安全交换密钥的手段、密钥的保存和管理也很困难&lt;/li&gt;&lt;li&gt;&lt;strong&gt;非对称密码算法（如 RSA/ECC）&lt;/strong&gt;: 解决了上述对称密码算法的两个缺陷——通过数字证书 &#43; PKI 公钥基础架构实现了身份认证，再通过 DHE/ECDHE 实现了安全的对称密钥交换。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但是非对称密码算法要比对称密码算法更复杂，计算速度也慢得多。因此实际使用上通常结合使用这两种密码算法，各取其长，以实现高速且安全的网络通讯。我们通常称结合使用对称密码算法以及非对称密码算法的加密方案为「混合加密方案」。&lt;/p&gt;&lt;p&gt;TLS 协议就是一个「混合加密方案」，它借助数字证书与 PKI 公钥基础架构、DHE/ECDHE 密钥交换协议以及对称加密方案这三者，实现了安全的加密通讯。&lt;/p&gt;&lt;p&gt;基于经典 DHKE 协议的 TLS 握手流程如下：&lt;/p&gt;&lt;p&gt;&lt;figure&gt;&lt;a class=&#34;lightgallery&#34; href=&#34;/images/about-tls-cert/tls-handshake.webp&#34; title=&#34;/images/about-tls-cert/tls-handshake.webp&#34; data-thumbnail=&#34;/images/about-tls-cert/tls-handshake.webp&#34; data-sub-html=&#34;&lt;h2&gt;基于经典 DHKE 协议的 TLS 握手&lt;/h2&gt;&#34;&gt;        &lt;img            class=&#34;lazyload&#34;            data-src=&#34;/images/about-tls-cert/tls-handshake.webp&#34;            data-srcset=&#34;/images/about-tls-cert/tls-handshake.webp, /images/about-tls-cert/tls-handshake.webp 1.5x, /images/about-tls-cert/tls-handshake.webp 2x&#34;            data-sizes=&#34;auto&#34;            alt=&#34;/images/about-tls-cert/tls-handshake.webp&#34;&gt;    &lt;/a&gt;&lt;figcaption class=&#34;image-caption&#34;&gt;基于经典 DHKE 协议的 TLS 握手&lt;/figcaption&gt;    &lt;/figure&gt;&lt;/p&gt;&lt;p&gt;而在支持「完美前向保密（Perfect Forward Secrecy）」的 TLS1.2 或 TLS1.3 协议中，经典 DH 协议被 ECDHE 协议取代。变化之一是进行最初的握手协议从经典 DHKE 换成了基于 ECC 的 ECDH 协议，变化之二是在每次通讯过程中也在不断地进行密钥交换，生成新的对称密钥供下次通讯使用，其细节参见 &lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;TLS 协议通过应用 ECDHE 密钥交换协议，提供了「完美前向保密（Perfect Forward Secrecy）」特性，也就是说它能够保护过去进行的通讯不受密钥在未来暴露的威胁。即使攻击者破解出了一个「对称密钥」，也只能获取到一次事务中的数据，其他事务的数据安全性完全不受影响。&lt;/p&gt;&lt;p&gt;另外注意一点是，CA 证书和服务端证书都只在 TLS 协议握手的前三个步骤中有用到，之后的通信就与它们无关了。&lt;/p&gt;&lt;h3 id=&#34;1-密码套件与-tls-历史版本&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e5%af%86%e7%a0%81%e5%a5%97%e4%bb%b6%e4%b8%8e-tls-%e5%8e%86%e5%8f%b2%e7%89%88%e6%9c%ac&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 密码套件与 TLS 历史版本&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cipher_suite&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;密码套件（Cipher_suite）&lt;/a&gt;是 TLS 协议中一组用于实现安全通讯的密码学算法，类似于我们前面学习过的加密方案。不同密码学算法的组合形成不同的密码套件，算法组合的差异使这些密码套件具有不同的性能与安全性，另外 TLS 协议的更新迭代也导致各密码套件拥有不同的兼容性。通常越新推出的密码套件的安全性越高，但是兼容性就越差（旧设备不支持）。&lt;/p&gt;&lt;p&gt;密码套件的名称由它使用的各种密码学算法名称组成，而且有固定的格式，以 &lt;code&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/code&gt; 为例介绍下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;TLS&lt;/code&gt;: 定义了此套件适用的协议，通常固定为 &lt;code&gt;TLS&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;ECDHE&lt;/code&gt;: 密钥交换算法&lt;/li&gt;&lt;li&gt;&lt;code&gt;RSA&lt;/code&gt;: 数字证书认证算法&lt;/li&gt;&lt;li&gt;&lt;code&gt;AES_128_GCM&lt;/code&gt;: 使用的对称加密方案，这是一个基于 AES 与 GCM 模式的对称认证加密方案，使用 128 位密钥&lt;/li&gt;&lt;li&gt;&lt;code&gt;SHA256&lt;/code&gt;: 哈希函数，用于 HMAC 算法实现消息认证&lt;ul&gt;&lt;li&gt;TLS 固定使用 HMAC 算法进行消息认证&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;TLS 协议的前身是 SSL 协议，TLS/SSL 的发展历程展示如下：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-tls-cert/history-of-ssl-tls.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;SSL/TLS 的历史版本&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;SSL 协议早在 2015 年就被各大主流浏览器废除了，TLS1.0 感觉也基本没站点在用了，这俩就直接跳过了。&lt;/p&gt;&lt;p&gt;下面分别介绍下 TLS1.1 TLS1.2 与 TLS1.3.&lt;/p&gt;&lt;h4 id=&#34;tls-11&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#tls-11&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;TLS 1.1&lt;/h4&gt;&lt;p&gt;TLS 1.1 在 RFC4346 中定义，于 2006 年 4 月发布。&lt;/p&gt;&lt;p&gt;TLS 1.1 是 TLS 1.0 的一个补丁，主要更新包括：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;添加对CBC攻击的保护&lt;ul&gt;&lt;li&gt;隐式初始向量 IV 被替换成一个显式的 IV&lt;/li&gt;&lt;li&gt;修复分组密码模式中填充算法的 bug&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;支持 IANA 登记的参数&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;TLS 1.1&lt;/strong&gt;及其之前的算法曾经被广泛应用，它目前已知的缺陷如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;不支持 PFS 完全前向保密&lt;/li&gt;&lt;li&gt;不支持 AEAD 认证加密算法&lt;/li&gt;&lt;li&gt;为了兼容性，保留了很多不安全的算法&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;TLS 1.1 已经不够安全了，不过一些陈年老站点或许还在使用它。&lt;/p&gt;&lt;h4 id=&#34;tls-12&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#tls-12&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;TLS 1.2&lt;/h4&gt;&lt;p&gt;TLS 1.2 在 RFC5246 中定义，于 2008 年 8 月发发布。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;可选支持 PFS 完全前向保密&lt;/li&gt;&lt;li&gt;移除对 MD5 与 SHA-1 签名算法的支持&lt;/li&gt;&lt;li&gt;添加对 HMAC-SHA-256 及 HMAC-SHA-384 消息认证算法的支持&lt;/li&gt;&lt;li&gt;添加对 AEAD 加密认证方案的支持&lt;/li&gt;&lt;li&gt;去除 forback 回到 SSL 协议的能力，提升安全性&lt;/li&gt;&lt;li&gt;为了兼容性，保留了很多不安全的算法&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果你使用 TLS 1.2，需要小心地选择密码套件，避开不安全的套件，就能实现足够高的安全性。&lt;/p&gt;&lt;h4 id=&#34;tls-13&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#tls-13&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;TLS 1.3&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://blog.cloudflare.com/rfc-8446-aka-tls-1-3/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;TLS 1.3&lt;/a&gt; 做了一次大刀阔斧的更新，是一个里程碑式的版本，其更新总结如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;移除对如下算法的支持&lt;ul&gt;&lt;li&gt;哈希函数 SHA1/MD5&lt;/li&gt;&lt;li&gt;所有非 AEAD 加密认证的密码方案（CBC 模式）&lt;/li&gt;&lt;li&gt;移除对 RC4 与 3DES 加密算法的支持&lt;/li&gt;&lt;li&gt;移除了静态 RSA 与 DH 密钥交换算法&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;支持高性能的 Ed25519/Ed448 签名认证算法、X25519 密钥协商算法&lt;/li&gt;&lt;li&gt;支持高性能的 ChaCha20-Poly1305 对称认证加密方案&lt;/li&gt;&lt;li&gt;将密钥交换算法与公钥认证算法从密码套件中分离出来&lt;ul&gt;&lt;li&gt;比如原来的 &lt;code&gt;TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256&lt;/code&gt; 密码套件将被拆分为 &lt;code&gt;ECDHE&lt;/code&gt; 算法、&lt;code&gt;RSA&lt;/code&gt; 身份认证算法、以及 &lt;code&gt;TLS_AES_128_GCM_SHA256&lt;/code&gt; 密码套件&lt;/li&gt;&lt;li&gt;这样密码套件就只包含一个 AEAD 认证加密方案，以及一个哈希函数了&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;仅支持前向安全的密钥交换算法 DHE 或 ECDHE&lt;/li&gt;&lt;li&gt;支持最短 0-RTT 的 TLS 握手（会话恢复）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;TLS 1.3 从协议中删除了所有不安全的算法或协议，可以说只要你的通讯用了 TLS 1.3，那你的数据就安全了（当然前提是你的私钥没泄漏）。&lt;/p&gt;&lt;h4 id=&#34;如何设置-tls-协议的版本密码套件参数&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%a6%82%e4%bd%95%e8%ae%be%e7%bd%ae-tls-%e5%8d%8f%e8%ae%ae%e7%9a%84%e7%89%88%e6%9c%ac%e5%af%86%e7%a0%81%e5%a5%97%e4%bb%b6%e5%8f%82%e6%95%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;如何设置 TLS 协议的版本、密码套件参数&lt;/h4&gt;&lt;p&gt;我们前面已经学习了对称加密、非对称加密、密钥交换三部分知识，对照 TLS 套件的名称，应该能很容易判断出哪些是安全的、哪些不够安全，哪些支持前向保密、哪些不支持。&lt;/p&gt;&lt;p&gt;一个非常好用的「站点 HTTPS 安全检测」网站是 &lt;a href=&#34;https://myssl.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://myssl.com/&lt;/a&gt;，使用它测试知乎网的检测结果如下：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-tls-cert/tls-cipher.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;SSL/TLS 的历史版本&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;p&gt;能看到知乎为了兼容性，目前仍然支持 TLS1.0 与 TLS1.1，另外目前还不支持 TLS1.3.&lt;/p&gt;&lt;p&gt;此外，知乎仍然支持很多已经不安全的加密套件，myssl.com 专门使用黄色标识出了这些不安全的加密套件，我们总结下主要特征：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;部分密码套件使用了不安全的对称加密算法 &lt;code&gt;3DES&lt;/code&gt;&lt;/li&gt;&lt;li&gt;其他被标识为黄色的套件虽然使用了安全的对称加密算法，但是不支持 PFS 前向保密&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此外 myssl.com 还列出了许多站点更详细的信息，包括 TLS1.3 的会话恢复，以及后面将会介绍的公钥固定、HTTP严格传输安全等信息：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/about-tls-cert/other-https-info.webp&#34;/&gt;&lt;figcaption&gt;            &lt;h4&gt;SSL/TLS 的历史版本&lt;/h4&gt;        &lt;/figcaption&gt;&lt;/figure&gt;&lt;h5 id=&#34;nginx-的-tls-协议配置&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#nginx-%e7%9a%84-tls-%e5%8d%8f%e8%ae%ae%e9%85%8d%e7%bd%ae&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Nginx 的 TLS 协议配置&lt;/h5&gt;&lt;p&gt;以前为 Nginx 等程序配置 HTTPS 协议时，我最头疼的就是其中密码套件参数 &lt;code&gt;ssl_ciphers&lt;/code&gt;，为了安全性，需要配置超长的一大堆选用的密码套件名称，我可以说一个都看不懂，但是为了把网站搞好还是得硬着头皮搜索复制粘贴，实际上也不清楚安全性导致咋样。&lt;/p&gt;&lt;p&gt;为了解决这个问题，Mozilla/DigitalOcean 都搞过流行 Web 服务器的 TLS 配置生成工具，比如 &lt;a href=&#34;https://ssl-config.mozilla.org/#server=nginx&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;ssl-config - **mozilla&lt;/a&gt;，这个网站提供三个安全等级的配置**:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;「Intermediate」: 查看生成出的 &lt;code&gt;ssl-cipher&lt;/code&gt; 属性，发现它只支持 &lt;code&gt;ECDHE&lt;/code&gt;/&lt;code&gt;DHE&lt;/code&gt; 开头的算法。因此它保证前向保密。&lt;ul&gt;&lt;li&gt;对于需要通过浏览器访问的 API，推荐选择这个等级。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;「Mordern」: 只支持 &lt;code&gt;TLSv1.3&lt;/code&gt;，该协议废弃掉了过往所有不安全的算法，保证前向保密，安全性极高，性能也更好。&lt;ul&gt;&lt;li&gt;对于不需要通过浏览器等旧终端访问的 API，请直接选择这个等级。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;「Old」: 除非你的用户使用非常老的终端进行访问，否则请不要考虑这个选项！&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;可以点进去查看详细的 TLS 套件配置。&lt;/p&gt;&lt;h4 id=&#34;ocsp-证书验证协议&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#ocsp-%e8%af%81%e4%b9%a6%e9%aa%8c%e8%af%81%e5%8d%8f%e8%ae%ae&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;OCSP 证书验证协议&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://www.ssl.com/blogs/how-do-browsers-handle-revoked-ssl-tls-certificates/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://www.ssl.com/blogs/how-do-browsers-handle-revoked-ssl-tls-certificates/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://www.digicert.com/help/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://www.digicert.com/help/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;前面提到除了数字证书自带的有效期外，为了在私钥泄漏的情况下，能够吊销对应的证书，PKI 公钥基础设施还提供了 OCSP（Online Certificate Status Protocol）证书状态查询协议。&lt;/p&gt;&lt;p&gt;可以使用如下命令测试，确认站点是否启用了 ocsp stapling:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ openssl s_client -connect www.digicert.com:443 -servername www.digicert.com -status -tlsextdebug &amp;lt; /dev/null 2&amp;gt;&amp;amp;1 | grep -i &amp;#34;OCSP response&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;如果输出包含 &lt;code&gt;OCSP Response Status: successful&lt;/code&gt; 就说明站点支持 ocsp stapling，如果输出内容为 &lt;code&gt;OCSP response: no response sent&lt;/code&gt; 则说明站点不支持ocsp stapling。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;实际上 Google/AWS 等大多数站点都不会启用也不需要启用 ocsp stapling，一是因为它们自己就是证书颁发机构，OCSP 服务器也归它们自己管，不存在隐私的问题。二是它们的 OCSP 服务器遍布全球，也不存在性能问题。这种情况下开个 OCSP Stapling 反而是浪费流量，因为每次 TLS 握手都得发送一个 OCSP 状态信息。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;我测试发现只有 &lt;a href=&#34;https://www.digicert.com/www.douban.com&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;www.digicert.com/www.douban.com&lt;/a&gt; 等少数站点启用了 ocsp stapling，www.baidu.com/www.google.com/www.zhihu.com 都未启用 ocsp stapling.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;这导致了一些问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Chrome/Firefox 等浏览器都会定期通过 OCSP 协议去请求 CA 机构的 OCSP 服务器验证证书状态，这可能会拖慢 HTTPS 协议的响应速度。&lt;ul&gt;&lt;li&gt;所谓的定期是指超过上一个 OCSP 响应的 &lt;code&gt;nextUpdate&lt;/code&gt; 时间（一般为 7 天），或者如果该值为空的话，Firefox 默认 24h 后会重新查询 OCSP 状态。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;因为客户端直接去请求 CA 机构的 OCSP 地址获取证书状态，这就导致 CA 机构可以获取到一些对应站点的用户信息（IP 地址、网络状态等）。&lt;/li&gt;&lt;li&gt;如果因为某些原因导致客户端无法访问 OCSP 服务器，会导致站点的初次访问时间用时变得很长。因为浏览器会每隔一阵时间就重新尝试去访问 OCSP 服务器！&lt;ul&gt;&lt;li&gt;一个典型的例子就是 &lt;a href=&#34;https://www.hawu.me/operation/2129&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;提高https载入速度，记一次nginx升级优化&lt;/a&gt;，因为 Let&amp;rsquo;s Encrypt 的 OCSP 服务器被 GFW 屏蔽，导致国内使用该证书的站点首次访问速度非常慢。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了解决这两个问题，&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc6066&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;rfc6066&lt;/a&gt; 定义了 OCSP stapling 功能，它使服务器可以提前访问 OCSP 获取证书状态信息并缓存到本地。&lt;/p&gt;&lt;p&gt;在客户端使用 TLS 协议访问 HTTPS 服务时，服务端会直接在握手阶段将缓存的 OCSP 信息发送给客户端。因为 OCSP 信息会带有 CA 证书的签名及有效期，客户端可以直接通过签名验证 OCSP 信息的真实性与有效性，这样就避免了客户端访问 OCSP 服务器带来的开销。&lt;/p&gt;&lt;p&gt;对于 Let&amp;rsquo;s Encrypt 的 OCSP 服务器被 GFW 屏蔽这样的场景，开不开 OCSP Stapling 对站点访问速度的影响就会变得非常地大！&lt;/p&gt;&lt;h4 id=&#34;alpn-应用层协议协商&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#alpn-%e5%ba%94%e7%94%a8%e5%b1%82%e5%8d%8f%e8%ae%ae%e5%8d%8f%e5%95%86&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;ALPN 应用层协议协商&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://imququ.com/post/enable-alpn-asap.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://imququ.com/post/enable-alpn-asap.html&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;TODO&lt;/p&gt;&lt;h3 id=&#34;2-mtls-双向认证&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-mtls-%e5%8f%8c%e5%90%91%e8%ae%a4%e8%af%81&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. mTLS 双向认证&lt;/h3&gt;&lt;p&gt;TLS 协议（tls1.0&#43;，RFC: &lt;a href=&#34;https://tools.ietf.org/html/rfc5246#section-7.4.4&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;TLS1.2 - RFC5246&lt;/a&gt;）也定义了可选的服务端请求验证客户端证书的方法。这个方法是可选的。如果使用上这个方法，那客户端和服务端就会在 TLS 协议的握手阶段进行互相认证。这种验证方式被称为双向 TLS 认证(mTLS, mutual TLS)。&lt;/p&gt;&lt;p&gt;传统的「TLS 单向认证」技术，只在客户端去验证服务端是否可信。而「TLS 双向认证（mTLS）」，则添加了服务端验证客户端是否可信的步骤（第三步）:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;客户端发起请求&lt;/li&gt;&lt;li&gt;「验证服务端是否可信」: 服务端将自己的 TLS 证书发送给客户端，客户端通过自己的 CA 证书链验证这个服务端证书。&lt;/li&gt;&lt;li&gt;「验证客户端是否可信」: 客户端将自己的 TLS 证书发送给服务端，服务端使用它的 CA 证书链验证该客户端证书。&lt;/li&gt;&lt;li&gt;协商对称加密算法及密钥&lt;/li&gt;&lt;li&gt;使用对称加密进行后续通信。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;因为相比传统的 TLS，mTLS 只是添加了「验证客户端」这样一个步骤，所以这项技术也被称为「Client Authetication」.&lt;/p&gt;&lt;p&gt;mTLS 需要用到两套 TLS 证书:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;服务端证书: 这个证书签名已经介绍过了。&lt;/li&gt;&lt;li&gt;客户端证书: 客户端证书貌似对证书信息（如 CN/SAN 域名）没有任何要求，只要证书能通过 CA 签名验证就行。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;使用 openssl 生成 TLS 客户端证书（ca 和 csr.conf 可以直接使用前面生成服务端证书用到的，也可以另外生成）:&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 生成 2048 位 的 RSA 密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl genrsa -out client.key &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 通过第一步编写的配置文件，生成证书签名请求&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl req -new -key client.key -out client.csr -config csr.conf&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. 生成最终的证书，这里指定证书有效期 3650 天&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;### 使用前面生成的 ca 证书对客户端证书进行签名（客户端和服务端共用 ca 证书）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -CAcreateserial -out client.crt -days &lt;span class=&#34;m&#34;&gt;3650&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;   -extensions v3_ext -extfile csr.conf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;mTLS 的应用场景主要在「零信任网络架构」，或者叫「无边界网络」中。比如微服务之间的互相访问，就可以使用 mTLS。这样就能保证每个 RPC 调用的客户端，都是其他微服务（或者别的可信方），防止黑客入侵后为所欲为。&lt;/p&gt;&lt;p&gt;目前查到如下几个Web服务器/代理支持 mTLS:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Traefik: &lt;a href=&#34;https://docs.traefik.io/v2.0/https/tls/#client-authentication-mtls&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Docs - Client Authentication (mTLS)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Nginx: &lt;a href=&#34;https://community.openhab.org/t/using-nginx-reverse-proxy-for-client-certificate-authentication-start-discussion/43064&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Using NGINX Reverse Proxy for client certificate authentication&lt;/a&gt;&lt;ol&gt;&lt;li&gt;主要参数是两个: &lt;code&gt;ssl_client_certificate /etc/nginx/client-ca.pem&lt;/code&gt; 和 &lt;code&gt;ssl_verify_client on&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h4 id=&#34;mtls-的安全性&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#mtls-%e7%9a%84%e5%ae%89%e5%85%a8%e6%80%a7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;mTLS 的安全性&lt;/h4&gt;&lt;p&gt;如果将 mTLS 用在 App 安全上，存在的风险是:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;客户端中隐藏的证书是否可以被提取出来，或者黑客能否 Hook 进 App 中，直接使用证书发送信息。&lt;/li&gt;&lt;li&gt;如果客户端私钥设置了「密码（passphrase）」，那这个密码是否能很容易被逆向出来？&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;mTLS 和「公钥锁定/证书锁定」对比:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;公钥锁定/证书锁定: 只在客户端进行验证。&lt;ol&gt;&lt;li&gt;但是在服务端没有进行验证。这样就无法鉴别并拒绝第三方应用（爬虫）的请求。&lt;/li&gt;&lt;li&gt;加强安全的方法，是通过某种算法生成动态的签名。爬虫生成不出来这个签名，请求就被拒绝。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;mTLS: 服务端和客户端都要验证对方。&lt;ol&gt;&lt;li&gt;保证双边可信，在客户端证书不被破解的情况下，就能 Ban 掉所有的爬虫或代理技术。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3 id=&#34;3-其他加密通讯协议&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-%e5%85%b6%e4%bb%96%e5%8a%a0%e5%af%86%e9%80%9a%e8%ae%af%e5%8d%8f%e8%ae%ae&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. 其他加密通讯协议&lt;/h3&gt;&lt;h4 id=&#34;ssh-协议&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#ssh-%e5%8d%8f%e8%ae%ae&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;SSH 协议&lt;/h4&gt;&lt;p&gt;首先最容易想到的应该就是是 SSH 协议（Secure SHell protocol）。SSH 与 TLS 一样都能提供加密通讯，是 PKI 公钥基础设施的早期先驱者之一。&lt;/p&gt;&lt;p&gt;SSH 协议应用最广泛的实现是 OpenSSH，它使用 SSH Key 而非数字证书进行身份认证，这主要是因为 OpenSSH 仅用于用户与主机之间的安全通信，不需要记录 X.509 这么繁多的信息。&lt;/p&gt;&lt;p&gt;我们来手动生成个 OpenSSH ed25519 密钥对试试（RSA 的生成命令完全类似）：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ ssh-keygen -t ed25519&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Generating public/private ed25519 key pair.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter file in which to save the key &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;/Users/admin/.ssh/id_ed25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: ed25519-key&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter passphrase &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;empty &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; no passphrase&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;: &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Enter same passphrase again: &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your identification has been saved in ed25519-key.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Your public key has been saved in ed25519-key.pub.&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key fingerprint is:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA256:jgeuWVflhNXXrDDzUtW6ZV1lpBWNAj0Rstizh9Lbyg0 admin@ryan-MacBook-Pro.local&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;The key&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;s randomart image is:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#43;--&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ED25519 256&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;--&#43;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;          oo&#43;&#43; *%&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;         &lt;span class=&#34;nv&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;B &#43;&#43;B&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;        . &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; oO.&#43;o&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;         . B. &#43; &#43;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;      . &lt;span class=&#34;nv&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; o. &#43; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     . &#43; o &#43;  .  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;      &#43; &#43; E .    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;     &#43; o . &#43;     &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;    o     o .    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#43;----&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;SHA256&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;-----&#43;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ cat ed25519-key    &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN OPENSSH PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;QyNTUxOQAAACDux4KnrKXVs4iR9mPZnSpur5207ceyMiZP&#43;CDnXdooMQAAAKDnHOSY5xzk&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mAAAAAtzc2gtZWQyNTUxOQAAACDux4KnrKXVs4iR9mPZnSpur5207ceyMiZP&#43;CDnXdooMQ&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AAAEADkVL1gZHAvBx4M5&#43;UjVVL7ltVOC4r9tdR23CoI9iV1O7HgqespdWziJH2Y9mdKm6v&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nbTtx7IyJk/4IOdd2igxAAAAHGFkbWluQHJ5YW4tTWFjQm9vay1Qcm8ubG9jYWwB&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END OPENSSH PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ cat ed25519-key.pub &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIO7HgqespdWziJH2Y9mdKm6vnbTtx7IyJk/4IOdd2igx admin@ryan-MacBook-Pro.local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;可以看到 SSH Key 的结构非常简单，仅包含如下三个部分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;密钥对类型: 最常见的是 &lt;code&gt;ssh-rsa&lt;/code&gt;，另外由于安全性目前更推荐使用 &lt;code&gt;ssh-ed25519&lt;/code&gt;&lt;/li&gt;&lt;li&gt;公钥的 Base64 字符串&lt;/li&gt;&lt;li&gt;一个 Comment，通常包含这个 Key 的用途，或者 Key 所有者的邮箱地址&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过我们前面学的非对称密码学知识可以知道，公钥能直接从私钥生成，假设你的 ssh 公钥丢失，可以通过如下命令重新生成出公钥：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssh-keygen -y -f xxx_rsa &amp;gt; xxx_rsa.pub&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;http3-与-quic-协议&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#http3-%e4%b8%8e-quic-%e5%8d%8f%e8%ae%ae&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;HTTP/3 与 QUIC 协议&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/quicwg&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;QUIC 协议&lt;/a&gt;，是 Google 研发并推动标准化的 TCP 协议的替代品， QUIC 是基于 UDP 协议实现的。基于 QUIC 提出的 HTTP over QUIC 协议已被标准化为 &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc9114.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC 9114 - HTTP/3&lt;/a&gt;，它做了很多大刀阔斧的改革：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;传输层协议从 TCP 改成了 UDP，QUIC 自己实现的数据的可靠传输、按序到达、拥塞控制&lt;ul&gt;&lt;li&gt;也就是说 QUIC 绕过了陈旧的内核 TCP 协议实现，直接在用户空间实现了这些功能&lt;/li&gt;&lt;li&gt;通过另起炉灶，它解决了一些 TCP 协议的痛点：队头阻塞、握手延迟高、特性迭代慢、拥塞控制算法不佳等问题&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;在 TLS1.3 出现之前，QUIC 实现了自己的加密方案 &lt;a href=&#34;https://docs.google.com/document/d/1g5nIXAIkN_Y-7XJW5K45IblHd_L2f5LTaDUDwvZ5L6g/edit&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;QUIC Crypto&lt;/a&gt; 以取代陈旧的 TLS 协议，同时兼容现有的数字证书体系&lt;ul&gt;&lt;li&gt;QUIC Crypto 的特点是它直接在应用层进行加密通讯的握手，并且恢复通信时可以通过缓存实现 0RTT 握手&lt;/li&gt;&lt;li&gt;也就说 QUIC 通过另起炉灶，解决了 TLS 的安全问题，以及握手延迟高的问题&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总结一下就是，旧的实验性 HTTP-over-QUIC 协议，重新实现了 HTTP&#43;TLS&#43;TCP 三种协议并将它们整合到一起，这带来了极佳的性能，但也使它变得非常复杂。&lt;/p&gt;&lt;p&gt;QUIC 的 0RTT 握手是一个非常妙的想法，可以显著降低握手时延，TLS1.3 的设计者们将它纳入了 TLS1.3 标准中。&lt;/p&gt;&lt;p&gt;由于 TLS1.3 的良好特性，在 TLS1.3 协议发布后，新的 QUIC 标准 &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc9001&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC 9001&lt;/a&gt; 已经使用 TLS1.3 取代了实验阶段使用的 QUIC Crypto 加密方案，目前只有 Chromium/Chrome 仍然支持 QUIC Crypto，其他 QUIC 实现基本都只支持 TLS1.3, 详见 &lt;a href=&#34;https://github.com/quicwg/base-drafts/wiki/Implementations&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;QUIC Implementations&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;4-tls-协议攻防战&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#4-tls-%e5%8d%8f%e8%ae%ae%e6%94%bb%e9%98%b2%e6%88%98&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;4. TLS 协议攻防战&lt;/h3&gt;&lt;h4 id=&#34;1-证书锁定certifacte-pining技术&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e8%af%81%e4%b9%a6%e9%94%81%e5%ae%9acertifacte-pining%e6%8a%80%e6%9c%af&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 证书锁定（Certifacte Pining）技术&lt;/h4&gt;&lt;p&gt;即使使用了 TLS 协议对流量进行加密，并且保证了前向保密，也无法保证流量不被代理！&lt;/p&gt;&lt;p&gt;这是因为客户端大多是直接依靠了操作系统内置的 CA 证书库进行证书验证，而 Fiddler 等代理工具可以将自己的 CA 证书添加到该证书库中。&lt;/p&gt;&lt;p&gt;为了防止流量被 Fiddler 等工具使用上述方式监听流量，出现了「证书锁定（Certifacte Pining, 或者 SSL Pinning）」技术。方法是在客户端中硬编码证书的指纹（Hash值，或者直接保存整个证书的内容也行），在建立 TLS 连接前，先计算使用的证书的指纹是否匹配，否则就中断连接。&lt;/p&gt;&lt;p&gt;这种锁定方式需要以下几个前提才能确保流量不被监听:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;客户端中硬编码的证书指纹不会被篡改。&lt;/li&gt;&lt;li&gt;指纹验证不能被绕过。&lt;ol&gt;&lt;li&gt;目前有公开技术（XPosed&#43;JustTrustMe）能破解 Android 上常见的 HTTPS 请求库，直接绕过证书检查。&lt;/li&gt;&lt;li&gt;针对上述问题，可以考虑加大绕过的难度。或者 App 检测自己是否运行在 Xposed 等虚拟环境下。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;用于 TLS 协议的证书不会频繁更换。（如果更换了，指纹就对不上了。）&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;而对于第三方的 API，因为我们不知道它们会不会更换 TLS 证书，就不能直接将证书指纹硬编码在客户端中。这时可以考虑从服务端获取这些 API 的证书指纹（附带私钥签名用于防伪造）。&lt;/p&gt;&lt;p&gt;为了实现证书的轮转(rotation)，可以在新版本的客户端中包含多个证书指纹，这样能保证同时有多个可信证书，达成证书的轮转。（类比 JWT 的公钥轮转机制）&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;证书锁定技术几乎等同于 SSH 协议的 &lt;code&gt;StrictHostKeyChecking&lt;/code&gt; 选项，客户端会验证服务端的公钥指纹（key fingerprint），验证不通过则断开连接。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&#34;2-公钥锁定public-key-pining技术&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e5%85%ac%e9%92%a5%e9%94%81%e5%ae%9apublic-key-pining%e6%8a%80%e6%9c%af&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 公钥锁定（Public Key Pining）技术&lt;/h4&gt;&lt;p&gt;前面介绍过证书的结构，它其实包含了公钥、有效期与一系列的其他信息。使用了证书锁定技术，会导致证书的有效期也被锁定，APK 内的证书指纹就必须随着证书一起更新。&lt;/p&gt;&lt;p&gt;更好的做法是指锁定证书中的公钥，即「公钥锁定」技术。「公钥锁定」比「证书锁定」更灵活，这样证书本身其实就可以直接轮转了（证书有过期时间），而不需要一个旧证书和新证书共存的中间时期。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;「公钥锁定」是更推荐的锁定技术。&lt;/strong&gt;&lt;/p&gt;&lt;h4 id=&#34;3-https-严格传输安全---hsts&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-https-%e4%b8%a5%e6%a0%bc%e4%bc%a0%e8%be%93%e5%ae%89%e5%85%a8---hsts&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. HTTPS 严格传输安全 - HSTS&lt;/h4&gt;&lt;p&gt;HSTS，即 HTTP Strict Transport Security，是一项安全技术，它允许服务端在返回 HTTPS 响应时，通过 Headers 明确要求客户端，在之后的一段时间内必须使用安全的 HTTPS 协议访问服务端。&lt;/p&gt;&lt;p&gt;比如 &lt;code&gt;https://example.com/&lt;/code&gt; 的响应头中有 &lt;code&gt;Strict-Transport-Security: max-age=31536000; includeSubDomains&lt;/code&gt;，表示服务端要求客户端（比如浏览器）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在接下来的 31536000 秒（即一年）中，客户端向 example.com 或&lt;strong&gt;其子域名&lt;/strong&gt;发送 HTTP 请求时，必须采用HTTPS来发起连接。&lt;ul&gt;&lt;li&gt;比如用户在浏览器地址栏输入 &lt;code&gt;http://example.com/&lt;/code&gt; 时，浏览器应自动将 http 改写为 https 再发起请求&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;在接下来的 31536000 秒（即一年）中，如果 example.com 服务器提供的证书无效，用户不能忽略浏览器的证书警告继续访问网站。&lt;ul&gt;&lt;li&gt;也就是说一旦证书失效，站点将完全无法访问，直至服务端修复证书问题。&lt;/li&gt;&lt;li&gt;一旦证书失效，HTTPS 其实就不是严格安全的了，可能会遭遇中间人攻击。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;3-tls-协议的逆向手段&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-tls-%e5%8d%8f%e8%ae%ae%e7%9a%84%e9%80%86%e5%90%91%e6%89%8b%e6%ae%b5&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. TLS 协议的逆向手段&lt;/h4&gt;&lt;p&gt;要获取一个应用的 HTTPS 数据，有两个方向:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;服务端入侵: 现代应用的服务端突破难度通常都比较客户端高，注入等漏洞底层框架就有处理。&lt;ol&gt;&lt;li&gt;不过如果你获得了服务器 root 权限，可以在 openssl 上做文章，比如篡改 openssl？&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;客户端逆向&#43;爬虫: 客户端是离用户最近的地方，也是最容易被突破的地方。&lt;ol&gt;&lt;li&gt;mTLS 常见的破解手段，是找到老版本的安装包，发现很容易就能提取出客户端证书。。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;/ol&gt;&lt;blockquote&gt;&lt;p&gt;wiki 列出了一些 TLS 协议的安全问题：https://en.wikipedia.org/wiki/Transport_Layer_Security#Security&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;TO BE DONE&amp;hellip;&lt;/p&gt;&lt;h2 id=&#34;三参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%89%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;三、参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://halfrost.com/https_tls1-2_handshake/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;HTTPS 温故知新（三） —— 直观感受 TLS 握手流程(上)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://halfrost.com/https-key-cipher/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;HTTPS 温故知新（五） —— TLS 中的密钥计算&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;A complete overview of SSL/TLS and its cryptographic system&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/cluster-administration/certificates/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Certificates - Kubernetes Docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://help.aliyun.com/document_detail/28542.html&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;证书选型和购买 - 阿里云文档&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzA4MTQ2MjI5OA==&amp;amp;mid=2664079008&amp;amp;idx=1&amp;amp;sn=dede1114d5705880ea757f8d9ae4c92d&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;云原生安全破局｜如何管理周期越来越短的数字证书？&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;另外两个关于 CN(Common Name) 和 SAN(Subject Altnative Name) 的问答:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://serverfault.com/questions/880804/can-not-get-rid-of-neterr-cert-common-name-invalid-error-in-chrome-with-self&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Can not get rid of &lt;code&gt;net::ERR_CERT_COMMON_NAME_INVALID&lt;/code&gt; error in chrome with self-signed certificates&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/5935369/ssl-how-do-common-names-cn-and-subject-alternative-names-san-work-together&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;SSL - How do Common Names (CN) and Subject Alternative Names (SAN) work together?&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;关于证书锁定/公钥锁定技术:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://owasp.org/www-community/controls/Certificate_and_Public_Key_Pinning&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Certificate and Public Key Pinning - OWASP&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://security.stackexchange.com/questions/85209/difference-between-certificate-pinning-and-public-key-pinning&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Difference between certificate pinning and public key pinning&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;其他推荐读物:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://book.douban.com/subject/26822106/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;图解密码技术 - [日]结城浩&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/li3ZjfNgX5nh7AKjyyzt5A&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;给工程师：关于证书（certificate）和公钥基础设施（PKI）的一切&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</title><link href="https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/"/><id>https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/</id><author><name>ryan4yin</name></author><published>2022-03-09T20:50:00+08:00</published><updated>2022-03-13T15:26:00+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;本文部分内容翻译自 &lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者补充了密码学历史以及 openssl 命令示例，并重写了 RSA/ECC 算法原理、代码示例等内容。&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;这篇文章中会涉及到一些数论知识，有点难度，觉得难的可以考虑跳过。本文不会详细介绍这些数学知识，可以在有疑惑的时候自行查找相关知识。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;《写给开发人员的实用密码学》系列文章目录：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-1/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（一）—— 概览&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-2-hash/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（二）—— 哈希函数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-3-key-derivation-function/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-4-secure-random-generators/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-6-symmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（六）—— 对称密钥加密算法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/about-tls-cert&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt;&lt;/li&gt;&lt;li&gt;待续&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;一公钥密码学--非对称密码学&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80%e5%85%ac%e9%92%a5%e5%af%86%e7%a0%81%e5%ad%a6--%e9%9d%9e%e5%af%b9%e7%a7%b0%e5%af%86%e7%a0%81%e5%ad%a6&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、公钥密码学 / 非对称密码学&lt;/h2&gt;&lt;p&gt;在介绍非对称密钥加密方案和算法之前，我们首先要了解公钥密码学的概念。&lt;/p&gt;&lt;h3 id=&#34;密码学的历史&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%af%86%e7%a0%81%e5%ad%a6%e7%9a%84%e5%8e%86%e5%8f%b2&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;密码学的历史&lt;/h3&gt;&lt;p&gt;从第一次世界大战、第二次世界大战到 1976 年这段时期密码的发展阶段，被称为「近代密码阶段」。在近代密码阶段，所有的密码系统都使用对称密码算法——使用相同的密钥进行加解密。当时使用的密码算法在拥有海量计算资源的现代人看来都是非常简单的，我们经常看到各种讲述一二战的谍战片，基本都包含破译电报的片段。&lt;/p&gt;&lt;p&gt;第一二次世界大战期间，无线电被广泛应用于军事通讯，围绕无线电通讯的加密破解攻防战极大地影响了战局。&lt;/p&gt;&lt;p&gt;公元20世纪初，第一次世界大战进行到关键时刻，英国破译密码的专门机构「40号房间」利用缴获的德国密码本破译了著名的「齐默尔曼电报」，其内容显示德国打算联合墨西哥对抗可能会参战的美国，这促使美国放弃中立对德宣战，从而彻底改变了一战的走势。&lt;/p&gt;&lt;p&gt;1943 年，美国从破译的日本电报中得知山本五十六将于 4 月 18 日乘中型轰炸机，由 6 架战斗机护航，到中途岛视察。美国总统罗斯福亲自做出决定截击山本，山本乘坐的飞机在去往中途岛的路上被美军击毁，战争天才山本五十六机毁人亡，日本海军从此一蹶不振。&lt;/p&gt;&lt;p&gt;此外，在二次世界大战中，美军将印第安纳瓦霍土著语言作为密码使用，并特别征募使用印第安纳瓦霍通信兵。在二次世界大战日美的太平洋战场上，美国海军军部让北墨西哥和亚历桑那印第安纳瓦霍族人使用纳瓦霍语进行情报传递。纳瓦霍语的语法、音调及词汇都极为独特，不为世人所知道，当时纳瓦霍族以外的美国人中，能听懂这种语言的也就一二十人。这是&lt;strong&gt;密码学&lt;/strong&gt;和&lt;strong&gt;语言学&lt;/strong&gt;的成功结合，纳瓦霍语密码成为历史上从未被破译的密码。&lt;/p&gt;&lt;p&gt;在 1976 年 Malcolm J. Williamson 公开发表了现在被称为「Diffie–Hellman 密钥交换，DHKE」的算法，并提出了「公钥密码学」的概念，这是密码学领域一项划时代的发明，它宣告了「近代密码阶段」的终结，是「现代密码学」的起点。&lt;/p&gt;&lt;p&gt;言归正传，对称密码算法的问题有两点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;「&lt;strong&gt;需要安全的通道进行密钥交换&lt;/strong&gt;」，早期最常见的是面对面交换密钥&lt;/li&gt;&lt;li&gt;每个点对点通信都需要使用不同的密钥，&lt;strong&gt;密钥的管理会变得很困难&lt;/strong&gt;&lt;ul&gt;&lt;li&gt;如果你需要跟 100 个朋友安全通信，你就要维护 100 个不同的对称密钥，而且还得确保它们不泄漏。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这会导致巨大的「密钥交换」跟「密钥保存与管理」的成本。「公钥密码学」最大的优势就是，它解决了这两个问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;「公钥密码学」可以在&lt;strong&gt;不安全的信道&lt;/strong&gt;上安全地进行密钥交换，第三方即使监听到通信过程，但是（几乎）无法破解出密钥。&lt;/li&gt;&lt;li&gt;每个人只需要公开自己的公钥，就可以跟其他任何人安全地通信。&lt;ul&gt;&lt;li&gt;如果你需要跟 100 个朋友安全通信，你们只需要公开自己的公钥。发送消息时使用对方的公钥加密，接收消息时使用自己的私钥解密即可。&lt;/li&gt;&lt;li&gt;只有你自己的私钥需要保密，所有的公钥都可以公开，这就显著降低了密钥的维护成本。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;因此公钥密码学成为了现代密码学的基石，而「公钥密码学」的诞生时间 1976 年被认为是现代密码学的开端。&lt;/p&gt;&lt;h3 id=&#34;公钥密码学的概念&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%85%ac%e9%92%a5%e5%af%86%e7%a0%81%e5%ad%a6%e7%9a%84%e6%a6%82%e5%bf%b5&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;公钥密码学的概念&lt;/h3&gt;&lt;p&gt;公钥密码系统的密钥始终以公钥 &#43; 私钥对的形式出现，公钥密码系统提供数学框架和算法来生成公钥&#43;私钥对。公钥通常与所有人共享，而私钥则保密。公钥密码系统在设计时就确保了在预期的算力下，几乎不可能从其公开的公钥逆向演算出对应的私钥。&lt;/p&gt;&lt;p&gt;公钥密码系统主要有三大用途：&lt;strong&gt;加密与解密、签名与验证、密钥交换&lt;/strong&gt;。每种算法都需要使用到公钥和私钥，比如由公钥加密的消息只能由私钥解密，由私钥签名的消息需要用公钥验证。&lt;/p&gt;&lt;p&gt;由于加密解密、签名验证均需要两个不同的密钥，故「公钥密码学」也被称为「&lt;strong&gt;非对称密码学&lt;/strong&gt;」。&lt;/p&gt;&lt;p&gt;比较著名的公钥密码系统有：RSA、ECC（椭圆曲线密码学）、ElGamal、Diffie-Hellman、ECDH、ECDSA 和 EdDSA。许多密码算法都是以这些密码系统为基础实现的，例如 RSA 签名、RSA 加密/解密、ECDH 密钥交换以及 ECDSA 和 EdDSA 签名。&lt;/p&gt;&lt;h3 id=&#34;量子安全性&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e9%87%8f%e5%ad%90%e5%ae%89%e5%85%a8%e6%80%a7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;量子安全性&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;参考文档：https://en.wikipedia.org/wiki/Post-quantum_cryptography&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;目前流行的公钥密码系统基本都依赖于 IFP（整数分解问题）、DLP（离散对数问题）或者 ECDLP（椭圆曲线离散对数问题），这导致这些算法都是&lt;strong&gt;量子不安全&lt;/strong&gt;（quantum-unsafe）的。&lt;/p&gt;&lt;p&gt;如果人类进入量子时代，IFP / DLP / ECDLP 的难度将大大降低，目前流行的 RSA、ECC、ElGamal、Diffie-Hellman、ECDH、ECDSA 和 EdDSA 等公钥密码算法都将被淘汰。&lt;/p&gt;&lt;p&gt;目前已经有一些量子安全的公钥密码系统问世，但是因为它们需要更长的密钥、更长的签名等原因，目前还未被广泛使用。&lt;/p&gt;&lt;p&gt;一些量子安全的公钥密码算法举例：NewHope、NTRU、GLYPH、BLISS、XMSS、&lt;a href=&#34;https://github.com/Microsoft/Picnic&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Picnic&lt;/a&gt; 等，有兴趣的可以自行搜索相关文档。&lt;/p&gt;&lt;h2 id=&#34;二非对称加密方案简介&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8c%e9%9d%9e%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88%e7%ae%80%e4%bb%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、非对称加密方案简介&lt;/h2&gt;&lt;p&gt;非对称加密要比对称加密复杂，有如下几个原因：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用密钥对进行加解密，导致其算法更为复杂&lt;/li&gt;&lt;li&gt;只能加密/解密很短的消息&lt;ul&gt;&lt;li&gt;在 RSA 系统中，输入消息应该被转换为大整数（例如使用 OAEP 填充），然后才能进行加密。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;一些非对称密码系统（如 ECC）不直接提供加密能力，需要结合使用更复杂的方案才能实现加解密&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;此外，非对称密码比对称密码慢非常多。比如 RSA 加密比 AES 慢 1000 倍，跟 ChaCha20 就更没法比了。&lt;/p&gt;&lt;p&gt;为了解决上面提到的这些困难并支持加密任意长度的消息，现代密码学使用「&lt;strong&gt;非对称加密方案&lt;/strong&gt;」来实现消息加解密。又因为「对称加密方案」具有速度快、支持加密任意长度消息等特性，「非对称加密方案」通常直接直接组合使用&lt;strong&gt;对称加密算法&lt;/strong&gt;与&lt;strong&gt;非对称加密算法&lt;/strong&gt;。比如「密钥封装机制 KEM（key encapsulation mechanisms)）」与「集成加密方案 IES（Integrated Encryption Scheme）」&lt;/p&gt;&lt;h3 id=&#34;1-密钥封装机制-kem&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e5%af%86%e9%92%a5%e5%b0%81%e8%a3%85%e6%9c%ba%e5%88%b6-kem&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 密钥封装机制 KEM&lt;/h3&gt;&lt;p&gt;顾名思义，KEM 就是仅使用非对称加密算法加密另一个密钥，实际数据的加解密由该密钥完成。&lt;/p&gt;&lt;p&gt;密钥封装机制 KEM 的加密流程（使用公钥加密传输对称密钥）：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/hybrid-encryption.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;密钥封装机制 KEM 的解密流程（使用私钥解密出对称密钥，然后再使用这个对称密钥解密数据）：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/hybrid-decryption.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;RSA-OAEP, RSA-KEM, ECIES-KEM 和 PSEC-KEM. 都是 KEM 加密方案。&lt;/p&gt;&lt;h4 id=&#34;密钥封装key-encapsulation与密钥包裹key-wrapping&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%af%86%e9%92%a5%e5%b0%81%e8%a3%85key-encapsulation%e4%b8%8e%e5%af%86%e9%92%a5%e5%8c%85%e8%a3%b9key-wrapping&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;密钥封装（Key encapsulation）与密钥包裹（Key wrapping）&lt;/h4&gt;&lt;p&gt;主要区别在于使用的是对称加密算法、还是非对称加密算法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;密钥封装（Key encapsulation）指使用非对称密码算法的公钥加密另一个密钥。&lt;/li&gt;&lt;li&gt;密钥包裹（Key wrapping）指使用对称密码算法加密另一个密钥。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;2-集成加密方案-ies&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e9%9b%86%e6%88%90%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88-ies&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 集成加密方案 IES&lt;/h3&gt;&lt;p&gt;集成加密方案 (IES) 在密钥封装机制（KEM）的基础上，添加了密钥派生算法 KDF、消息认证算法 MAC 等其他密码学算法以达成更高的安全性。&lt;/p&gt;&lt;p&gt;在 IES 方案中，非对称算法（如 RSA 或 ECC）跟 KEM 一样，都是用于加密或封装对称密钥，然后通过对称密钥（如 AES 或 Chacha20）来加密输入消息。&lt;/p&gt;&lt;p&gt;DLIES（离散对数集成加密方案）和 ECIES（椭圆曲线集成加密方案）都是 IES 方案。&lt;/p&gt;&lt;h2 id=&#34;三rsa-密码系统&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%89rsa-%e5%af%86%e7%a0%81%e7%b3%bb%e7%bb%9f&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;三、RSA 密码系统&lt;/h2&gt;&lt;p&gt;RSA 密码系统是最早的公钥密码系统之一，它基于 &lt;a href=&#34;https://en.wikipedia.org/wiki/RSA_problem&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RSA 问题&lt;/a&gt;和&lt;a href=&#34;https://en.wikipedia.org/wiki/Integer_factorization&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;整数分解问题 （IFP）&lt;/a&gt;的计算难度。RSA 算法以其作者（Rivest–Shamir–Adleman）的首字母命名。&lt;/p&gt;&lt;p&gt;RSA 算法在计算机密码学的早期被广泛使用，至今仍然是数字世界应用最广泛的密码算法。但是随着 ECC 密码学的发展，ECC 正在非对称密码系统中慢慢占据主导地位，因为它比 RSA 具有更高的安全性和更短的密钥长度。&lt;/p&gt;&lt;p&gt;RSA 算法提供如下几种功能：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;密钥对生成：生成随机私钥（通常大小为 1024-4096 位）和相应的公钥。&lt;/li&gt;&lt;li&gt;加密解密：使用公钥加密消息（消息要先转换为 [0&amp;hellip;key_length] 范围内的整数），然后使用密钥解密。&lt;/li&gt;&lt;li&gt;数字签名：签署消息（使用私钥）和验证消息签名（使用公钥）。&lt;ul&gt;&lt;li&gt;数字签名实际上是通过 Hash 算法 &#43; 加密解密功能实现的。后面会介绍到，它与一般加解密流程的区别，在于数字签名使用私钥加密，再使用公钥解密。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;密钥交换：安全地传输密钥，用于以后的加密通信。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;RSA 可以使用不同长度的密钥：1024、2048、3072、4096、8129、16384 甚至更多位。目前 &lt;strong&gt;3072&lt;/strong&gt; 位及以上的密钥长度被认为是安全的，曾经大量使用的 &lt;strong&gt;2048&lt;/strong&gt; 位 RSA 现在被破解的风险在不断提升，已经不推荐使用了。&lt;/p&gt;&lt;p&gt;更长的密钥提供更高的安全性，但会消耗更多的计算时间，同时签名也会变得更长，因此需要在安全性和速度之间进行权衡。非常长的 RSA 密钥（例如 50000 位或 65536 位）对于实际使用可能太慢，例如密钥生成可能需要几分钟到几个小时。&lt;/p&gt;&lt;h3 id=&#34;rsa-密钥对生成&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#rsa-%e5%af%86%e9%92%a5%e5%af%b9%e7%94%9f%e6%88%90&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;RSA 密钥对生成&lt;/h3&gt;&lt;p&gt;RSA 密钥对的生成跟我们在本系列文章的第 5 篇介绍的「DHKE 密钥交换算法」会有些类似，但是要更复杂一点。&lt;/p&gt;&lt;p&gt;首先看下我们怎么使用 openssl 生成一个 1024 位的 RSA 密钥对（&lt;strong&gt;仅用做演示，实际应用中建议 3072 位&lt;/strong&gt;）：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/openssl/openssl&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;OpenSSL&lt;/a&gt; 是目前使用最广泛的网络加密算法库，支持非常多流行的现代密码学算法，几乎所有操作系统都会内置 openssl.&lt;/p&gt;&lt;/blockquote&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;  1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;  9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 47&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 48&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 49&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 50&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 51&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 52&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 53&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 54&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 55&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 56&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 57&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 58&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 59&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 60&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 61&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 62&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 63&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 64&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 65&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 66&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 67&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 68&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 69&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 70&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 71&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 72&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 73&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 74&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 75&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 76&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 77&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 78&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 79&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 80&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 81&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 82&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 83&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 84&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 85&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 86&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 87&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 88&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 89&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 90&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 91&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 92&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 93&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 94&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 95&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 96&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 97&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 98&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 99&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;102&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;103&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;104&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;105&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;106&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;107&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 生成 1024 位的 RSA 私钥&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ openssl genrsa -out rsa-private-key.pem 1024&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Generating RSA private key, 1024 bit long modulus&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.................&#43;&#43;&#43;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;.....&#43;&#43;&#43;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;e is 65537 (0x10001)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 使用私钥生成对应的公钥文件&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ openssl rsa -in rsa-private-key.pem -pubout -out rsa-public-key.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;writing RSA key&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查看私钥内容&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ cat rsa-private-key.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN RSA PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MIICXAIBAAKBgQDNE8QZLJZXREOeWZ2ilAzGC4Kjq/PfsFzrXGj8g3IaS4/J3JrB&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;o3qEq/k9XoRzOmNPyvWCj2FAY7A099d7qX4ztthBpUM2ePDIYDvhL0EpfQqbhe&#43;Q&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aagcFpuKTshGR2wBjH0Cl1/WxJkfIUMmWYU&#43;m4iKLw9KfLX6BjmSgWB6HQIDAQAB&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AoGADb5NXgKG8MI6ZdpLniGd2Yfb8WwMo&#43;kF0SAYSRPmCa0WrciC9ocmJs3/ngU/&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ixlWnnpTibRiKBaGMIaLglYRhvbvibUo8PH4woIidTho2e6swF2aqILk6YFJDpxX&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;FCFdbXM4Cm2MqbD4VtmhCYqbvuiyEUci83YrRP0jJGNt0GECQQDyZgdi8JlFQFH8&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;1QRHjLN57v5bHQamv7Qb77hlbdbg1wTYO&#43;H8tsOB181TEHA7uN8hxkzyYZy&#43;goRx&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;n0hvJcQXAkEA2JWhCb7oG1eal1aUdgofxhlWnkoFeWHay2zgDWSqmGKyDt0Cb1jq&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;XTdN9dchnqfptWN2/QPLDgM&#43;/9g39/zv6wJATC1sXNeoE29nVMHNGn9JWCSXoyK4&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GGdevvjTRm0Cfp6UUzBekQEO6Btd16Du5JXw6bhcLkAm9mgmH18jcGq5&#43;QJBALnr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aDv3d0PRZdE372WMt03UfniOzjgueiVaJtMYcSEyx&#43;reabKvvy&#43;ZxACfVirdtU&#43;S&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;PJhhYzN6MeBp&#43;VGV/VUCQBXz0LyM08roWi6DiaRwJIbYx&#43;WCKEOGXQ9QsZND&#43;sGr&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pOpugr3mcUge5dcZGKtsOUx2xRVmg88nSWMQVkTlsjQ=&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END RSA PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查看私钥的详细参数&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ openssl rsa -noout -text -in rsa-private-key.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Private-Key: (1024 bit)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;modulus:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    00💿13:c4:19:2c:96:57:44:43:9e:59:9d:a2:94:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0c:c6:0b:82:a3🆎f3:df:b0:5c:eb:5c:68:fc:83:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    72:1a:4b:8f:c9:dc:9a:c1:a3:7a:84🆎f9:3d:5e:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    84:73:3a:63:4f:ca:f5:82:8f:61:40:63:b0:34:f7:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    d7:7b:a9:7e:33:b6:d8:41:a5:43:36:78:f0:c8:60:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    3b:e1:2f:41:29:7d:0a:9b:85:ef:90:69:a8:1c:16:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    9b:8a:4e:c8:46:47:6c:01:8c:7d:02:97:5f:d6:c4:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    99:1f:21:43:26:59:85:3e:9b:88:8a:2f:0f:4a:7c:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    b5:fa:06:39:92:81:60:7a:1d&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;publicExponent: 65537 (0x10001)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;privateExponent:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0d:be:4d:5e:02:86:f0:c2:3a:65:da:4b:9e:21:9d:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    d9:87:db:f1:6c:0c:a3:e9:05:d1:20:18:49:13:e6:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    09:ad:16:ad:c8:82:f6:87:26:26:cd:ff:9e:05:3f:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    8b:19:56:9e:7a:53:89:b4:62:28:16:86:30:86:8b:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    82:56:11:86:f6:ef:89:b5:28:f0:f1:f8:c2:82:22:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    75:38:68:d9:ee:ac:c0:5d:9a:a8:82:e4:e9:81:49:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0e:9c:57:14:21:5d:6d:73:38:0a:6d:8c:a9:b0:f8:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    56:d9:a1:09:8a:9b:be:e8:b2:11:47:22:f3:76:2b:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    44:fd:23:24:63:6d:d0:61&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;prime1:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    00:f2:66:07:62:f0:99:45:40:51:fc:d5:04:47:8c:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    b3:79:ee:fe:5b:1d:06:a6:bf:b4:1b:ef:b8:65:6d:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    d6:e0:d7:04:d8:3b:e1:fc:b6:c3:81:d7:cd:53:10:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    70:3b:b8:df:21:c6:4c:f2:61:9c:be:82:84:71:9f:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    48:6f:25:c4:17&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;prime2:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    00:d8:95:a1:09:be:e8:1b:57:9a:97:56:94:76:0a:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    1f:c6:19:56:9e:4a:05:79:61:da:cb:6c:e0:0d:64:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    aa:98:62:b2:0e:dd:02:6f:58:ea:5d:37:4d:f5:d7:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    21:9e:a7:e9:b5:63:76:fd:03:cb:0e:03:3e:ff:d8:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    37:f7:fc:ef:eb&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;exponent1:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    4c:2d:6c:5c:d7:a8:13:6f:67:54:c1💿1a:7f:49:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    58:24:97:a3:22:b8:18:67:5e:be:f8:d3:46:6d:02:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    7e:9e:94:53:30:5e:91:01:0e:e8:1b:5d:d7:a0:ee:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    e4:95:f0:e9:b8:5c:2e:40:26:f6:68:26:1f:5f:23:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    70:6a:b9:f9&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;exponent2:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    00:b9:eb:68:3b:f7:77:43:d1:65:d1:37:ef:65:8c:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    b7:4d:d4:7e:78:8e:ce:38:2e:7a:25:5a:26:d3:18:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    71:21:32:c7:ea🇩🇪69:b2:af:bf:2f:99:c4:00:9f:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    56:2a:dd:b5:4f:92:3c:98:61:63:33:7a:31:e0:69:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    f9:51:95:fd:55&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;coefficient:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    15:f3:d0:bc:8c:d3:ca:e8:5a:2e:83:89:a4:70:24:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    86:d8:c7:e5:82:28:43:86:5d:0f:50:b1:93:43:fa:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    c1🆎a4:ea:6e:82:bd:e6:71:48:1e:e5:d7:19:18:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ab:6c:39:4c:76:c5:15:66:83:cf:27:49:63:10:56:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    44:e5:b2:34&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查看私钥内容&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ cat rsa-public-key.pem &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN PUBLIC KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDNE8QZLJZXREOeWZ2ilAzGC4Kj&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;q/PfsFzrXGj8g3IaS4/J3JrBo3qEq/k9XoRzOmNPyvWCj2FAY7A099d7qX4ztthB&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pUM2ePDIYDvhL0EpfQqbhe&#43;QaagcFpuKTshGR2wBjH0Cl1/WxJkfIUMmWYU&#43;m4iK&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Lw9KfLX6BjmSgWB6HQIDAQAB&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END PUBLIC KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查看公钥的参数&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ openssl rsa -noout -text -pubin -in rsa-public-key.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Public-Key: (1024 bit)&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Modulus:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    00💿13:c4:19:2c:96:57:44:43:9e:59:9d:a2:94:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    0c:c6:0b:82:a3🆎f3:df:b0:5c:eb:5c:68:fc:83:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    72:1a:4b:8f:c9:dc:9a:c1:a3:7a:84🆎f9:3d:5e:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    84:73:3a:63:4f:ca:f5:82:8f:61:40:63:b0:34:f7:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    d7:7b:a9:7e:33:b6:d8:41:a5:43:36:78:f0:c8:60:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    3b:e1:2f:41:29:7d:0a:9b:85:ef:90:69:a8:1c:16:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    9b:8a:4e:c8:46:47:6c:01:8c:7d:02:97:5f:d6:c4:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    99:1f:21:43:26:59:85:3e:9b:88:8a:2f:0f:4a:7c:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    b5:fa:06:39:92:81:60:7a:1d&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Exponent: 65537 (0x10001)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;RSA 描述的私钥的结构如下（其中除 $n, d$ 之外的都是冗余信息）：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;modulus&lt;/code&gt;: 模数 $n$&lt;/li&gt;&lt;li&gt;&lt;code&gt;publicExponent&lt;/code&gt;: 公指数 $e$，固定为 65537 (0x10001)&lt;/li&gt;&lt;li&gt;&lt;code&gt;privateExponent&lt;/code&gt;: 私钥指数 $d$&lt;/li&gt;&lt;li&gt;&lt;code&gt;prime1&lt;/code&gt;: 质数 p，用于计算 $n$&lt;/li&gt;&lt;li&gt;&lt;code&gt;prime2&lt;/code&gt;: 质数 q，用于计算 $n$&lt;/li&gt;&lt;li&gt;&lt;code&gt;exponent1&lt;/code&gt;: 用于加速 RSA 运算的中国剩余定理指数一，$d \mod (p-1)$&lt;/li&gt;&lt;li&gt;&lt;code&gt;exponent2&lt;/code&gt;: 用于加速 RSA 运算的中国剩余定理指数二，$d \mod (q-1)$&lt;/li&gt;&lt;li&gt;&lt;code&gt;coefficient&lt;/code&gt;: 用于加速 RSA 运算的中国剩余定理系数，$q^{-1} \mod p$&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;再看下 RSA 公钥的结构：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;modulus&lt;/code&gt;: 模数 $n$&lt;/li&gt;&lt;li&gt;&lt;code&gt;exponent&lt;/code&gt;: 公指数 $e$，固定为 65537 (0x10001)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以看到私钥文件中就已经包含了公钥的所有参数，实际上我们也是使用 &lt;code&gt;openssl rsa -in rsa-private-key.pem -pubout -out rsa-public-key.pem&lt;/code&gt; 命令通过私钥生成出的对应的公钥文件。&lt;/p&gt;&lt;p&gt;下面就介绍下具体的密钥对生成流程，搞清楚 openssl 生成出的这个私钥，各项参数分别是什么含义：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;这里不会详细介绍其中的各种数学证明，具体的请参考维基百科。相关数学知识包括取模运算的性质、欧拉函数、模倒数（拓展欧几里得算法）&lt;/p&gt;&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;随机选择两个不相等的质数 $p$ 与 $q$&lt;ul&gt;&lt;li&gt;p 跟 q 应该非常大，但是长度相差几个整数，这样会使得破解更加困难&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;计算出模数 $n = pq$&lt;/li&gt;&lt;li&gt;计算欧拉函数的值 $\phi(n) = \phi(pq) = (p-1)(q-1)$&lt;/li&gt;&lt;li&gt;选择公指数 $e$，要求 $1 &amp;lt; e &amp;lt; \lambda (n)$，且 $e$ 与 $\phi(n)$ 互质，即 $\gcd(e, \phi(n)) = 1$。&lt;ul&gt;&lt;li&gt;目前 openssl 固定使用 65537 (0x10001) 作为 e 的值&lt;/li&gt;&lt;li&gt;曾经也有使用过 3 作为 e 的值，但是目前 3 已被证明不够安全&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;计算出使等式 $ed \equiv 1 \bmod \phi(n)$ 成立的值 $d$，它就是我们的私钥指数&lt;ul&gt;&lt;li&gt;上述等式的含义：$ed$ 被 $\phi(n)$ 的余数为 $1$&lt;/li&gt;&lt;li&gt;等式可转换为 $ed = 1 &#43; \phi(n) \cdot k$，其中 $k$ 为整数。&lt;/li&gt;&lt;li&gt;移项得 $e d &#43; \phi(n) \cdot y = 1 = \gcd(e, \phi(n))$，其中 $y=-k$&lt;/li&gt;&lt;li&gt;上面的等式可使用&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;拓展欧几里得算法&lt;/a&gt;求解，wiki 有给出此算法的 Python 实现，非常简洁。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;使用 $(n, e)$ 组成公钥，使用 $(n, d)$ 组成私钥。其他参数可以保存在私钥中，也可丢弃。&lt;ul&gt;&lt;li&gt;$p, q, \phi(n), d$ 四个参数都必须保密，绝不能泄漏！&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;在现有算力下，想要通过公钥的 $(n, e)$ 推算出 $d$ 是非常困难的，这保证了 RSA 算法的安全性。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面我们使用 Python 来通过 $p,q,e$ 计算出 $n, d$ 来，跟 openssl 打印的对比下，看看是否一致。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pathlib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serialization&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./rsa-private-key.pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serialization&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_pem_private_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;key_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;phi_n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;extended_euclidean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;      拓展欧几里得算法，能在计算出 a 与 b 的最大公约数的同时，给出 ax &#43; by = gcd(a, b) 中的 x 与 y 的值&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;      代码来自 wiki: https://zh.wikipedia.org/wiki/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%89%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;A9&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;5%B1&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%95%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;E6%AC%A7&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%87%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;A0&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%87%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;8C&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%E&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;5%BE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%97%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;E7%AE&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%97%&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;E6%B3%95&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;old_s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;old_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;old_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;old_r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;old_s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;old_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;old_r&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 我们只需要 d，y 可忽略，而余数 remainder 肯定为 1，也可忽略&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remainder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;extended_euclidean&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phi_n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; hex(n)=&amp;#39;0xcd13c4192c965744439e599da2940cc60b82a3abf3dfb05ceb5c68fc83721a4b8fc9dc9ac1a37a84abf93d5e84733a634fcaf5828f614063b034f7d77ba97e33b6d841a5433678f0c8603be12f41297d0a9b85ef9069a81c169b8a4ec846476c018c7d02975fd6c4991f21432659853e9b888a2f0f4a7cb5fa06399281607a1d&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; hex(d)=&amp;#39;0xdbe4d5e0286f0c23a65da4b9e219dd987dbf16c0ca3e905d120184913e609ad16adc882f6872626cdff9e053f8b19569e7a5389b46228168630868b82561186f6ef89b528f0f1f8c28222753868d9eeacc05d9aa882e4e981490e9c5714215d6d73380a6d8ca9b0f856d9a1098a9bbee8b2114722f3762b44fd2324636dd061&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;对比 RSA 的输出，可以发现去掉冒号后，&lt;code&gt;d&lt;/code&gt; 跟 &lt;code&gt;n&lt;/code&gt; 的值是完全相同的。&lt;/p&gt;&lt;h3 id=&#34;rsa-加密与解密&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#rsa-%e5%8a%a0%e5%af%86%e4%b8%8e%e8%a7%a3%e5%af%86&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;RSA 加密与解密&lt;/h3&gt;&lt;p&gt;RSA 加密算法，一次只能加密一个小于 $n$ 的非负整数，假设明文为整数 $msg$，加密算法如下：&lt;/p&gt;&lt;p&gt;$$\text{encryptedMsg} = msg^e \mod n$$&lt;/p&gt;&lt;p&gt;通常的手段是，先使用 &lt;a href=&#34;https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;EAOP&lt;/a&gt;  将被加密消息编码成一个个符合条件的整数，再使用上述公式一个个加密。&lt;/p&gt;&lt;p&gt;解密的方法，就是对被每一段加密的数据 $encryptedMsg$，进行如下运算：&lt;/p&gt;&lt;p&gt;$$\text{decryptedMsg} = \text{encryptedMsg}^d \mod n$$&lt;/p&gt;&lt;h4 id=&#34;rsa-解密运算的证明&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#rsa-%e8%a7%a3%e5%af%86%e8%bf%90%e7%ae%97%e7%9a%84%e8%af%81%e6%98%8e&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;RSA 解密运算的证明&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;这里的证明需要用到一些数论知识，觉得不容易理解的话，建议自行查找相关资料。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;证明流程如下：&lt;/p&gt;&lt;p&gt;$$\begin{alignedat}{2}\text{decryptedMsg} &amp;amp;= &amp;amp;\text{encryptedMsg}^d &amp;amp;\mod n \\&amp;amp;= &amp;amp;{(msg^e \mod n)}^d &amp;amp;\mod n \\&amp;amp;= &amp;amp;{msg^{ed}} &amp;amp;\mod n \\&amp;amp;= &amp;amp;{msg^{ed}} &amp;amp;\mod {pq}\end{alignedat}$$&lt;/p&gt;&lt;p&gt;接下来将下面两个等式代入上述计算中：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;我们在前面的「密钥对生成」一节中有给出等式：$ed = 1 &#43; (p-1)(q-1) \cdot k$&lt;/li&gt;&lt;li&gt;因为 $0 \le msg \lt n$ 以及 $n = pq$，有 $msg \mod pq = msg$&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这样就得到：&lt;/p&gt;&lt;p&gt;$$\begin{alignedat}{2}\text{decryptedMsg} &amp;amp;= &amp;amp;{msg^{ed}} &amp;amp;\mod {pq} \\&amp;amp;= &amp;amp;{(msg \mod pq) \cdot (msg^{ed-1} \mod pq)} &amp;amp;\mod {pq} \\&amp;amp;= &amp;amp;{msg \cdot (msg^{(p-1)(q-1) \cdot k} \mod pq)} &amp;amp;\mod {pq}\end{alignedat}$$&lt;/p&gt;&lt;p&gt;又有&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;费马小定理&lt;/a&gt;指出，在 $a$ 为整数，$p$ 为质数的情况下，有同余等式&lt;/p&gt;&lt;p&gt;$$a^{p-1} \equiv 1 {\pmod  p}$$&lt;/p&gt;&lt;p&gt;因为我们的模数 $n=pq$ 并不是质数，不能直接利用费马小定理给出的同余公式。但是 $p$, $q$ 两数都为质数，我们可以分别计算方程  对 $p$ 以及 $q$ 取模的结果，然后再根据&lt;a href=&#34;https://zhuanlan.zhihu.com/p/44591114&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;中国剩余定理&lt;/a&gt;得出通解，也就得到我们需要的结果。&lt;/p&gt;&lt;p&gt;对于模 $p$ 的情况，计算方法如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;当 $msg = 0 \mod p$ 时，${msg^{ed}} \mod p = 0 \equiv msg \pmod  p$&lt;/li&gt;&lt;li&gt;当 $msg \ne 0 \mod p$ 时，利用费马小定理，有$$\begin{alignedat}{2}msg^{ed} &amp;amp;= &amp;amp;{msg \cdot (msg^{(p-1)(q-1) \cdot k} \mod p)} &amp;amp;\pmod {p}  \\&amp;amp;= &amp;amp;msg \cdot (msg^{(p-1)} \mod p)^{(q-1) \cdot k} &amp;amp;\pmod p \\&amp;amp;= &amp;amp;msg \cdot 1^{(q-1) \cdot k} &amp;amp;\pmod p \\&amp;amp;\equiv &amp;amp;msg \pmod  p\end{alignedat}$$&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;同理，对模 $q$ 的情况，也能得到等式&lt;/p&gt;&lt;p&gt;$$msg^{ed} \equiv msg \pmod  q$$&lt;/p&gt;&lt;p&gt;有了上面两个结果，根据中国剩余定理，就能得到&lt;/p&gt;&lt;p&gt;$$msg^{ed} \equiv msg \pmod  {pq}$$&lt;/p&gt;&lt;p&gt;现在再接续前面的计算：&lt;/p&gt;&lt;p&gt;$$\begin{alignedat}{2}\text{decryptedMsg} &amp;amp;= &amp;amp;{msg^{ed}} &amp;amp;\pmod {pq} \\&amp;amp;= &amp;amp;msg &amp;amp;\pmod  {pq} \\&amp;amp;= &amp;amp;msg\end{alignedat}$$&lt;/p&gt;&lt;p&gt;这样就证明了，解密操作得到的就是原始信息。&lt;/p&gt;&lt;p&gt;因为非对称加解密非常慢，对于较大的文件，通常会分成两步加密来提升性能：首先用使用对称加密算法来加密数据，再使用 RSA 等非对称加密算法加密上一步用到的「对称密钥」。&lt;/p&gt;&lt;p&gt;下面我们用 Python 来验证下 RSA 算法的加解密流程：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pathlib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serialization&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 私钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./rsa-private-key.pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serialization&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_pem_private_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;key_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 公钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;int_to_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bit_length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;int_from_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xbytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;xbytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fast_power_modular&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    快速模幂运算：b^p % m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    复杂度： O(log p)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    因为 RSA 的底数跟指数都非常大，如果先进行幂运算，最后再取模，计算结果会越来越大，导致速度非常非常慢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    根据模幂运算的性质  b^(ab) % m = (b^a % m)^b % m, 可以通过边进行幂运算边取模，极大地提升计算速度&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 明文&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;original_msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;an example&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;original_msg&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 加密&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;msg_int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int_from_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;original_msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;encrypt_int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg_int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;encrypt_msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int_to_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypt_int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypt_msg&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 解密&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# decrypt_int = encrypt_int ** d % n # 因为 d 非常大，直接使用公式计算会非常非常慢，所以不能这么算&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;decrypt_int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fast_power_modular&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypt_int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;decrypt_msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;int_to_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decrypt_int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decrypt_msg&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 应该与原信息完全一致&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&#34;rsa-数字签名&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#rsa-%e6%95%b0%e5%ad%97%e7%ad%be%e5%90%8d&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;RSA 数字签名&lt;/h3&gt;&lt;p&gt;前面证明了可以使用公钥加密，再使用私钥解密。&lt;/p&gt;&lt;p&gt;实际上从上面的证明也可以看出来，顺序是完全可逆的，先使用私钥加密，再使用公钥解密也完全是可行的。这种运算被我们用在数字签名算法中。&lt;/p&gt;&lt;p&gt;数字签名的方法为：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先计算原始数据的 Hash 值，比如 SHA256&lt;/li&gt;&lt;li&gt;使用私钥对计算出的 Hash 值进行加密，得到数字签名&lt;/li&gt;&lt;li&gt;其他人使用公开的公钥进行解密出 Hash 值，再对原始数据计算 Hash 值对比，如果一致，就说明数据未被篡改&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Python 演示：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hashlib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sha512&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pathlib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serialization&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key_path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./rsa-private-key.pem&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;serialization&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;load_pem_private_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;key_path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;password&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# RSA sign the message&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;A message for signing&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byteorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Signature:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# RSA verify signature&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;A message for signing&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byteorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;hashFromSignature&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Signature valid:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashFromSignature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&#34;四ecc-密码系统&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%9b%9becc-%e5%af%86%e7%a0%81%e7%b3%bb%e7%bb%9f&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;四、ECC 密码系统&lt;/h2&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/ecc.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;ECC 椭圆曲线密码学，于 1985 年被首次提出，并于 2004 年开始被广泛应用。ECC 被认为是 RSA 的继任者，新一代的非对称加密算法。&lt;/p&gt;&lt;p&gt;其最大的特点在于相同密码强度下，ECC 的密钥和签名的大小都要显著低于 RSA. 256bits 的 ECC 密钥，安全性与 3072bits 的 RSA 密钥安全性相当。&lt;/p&gt;&lt;p&gt;其次 ECC 的密钥对生成、密钥交换与签名算法的速度都要比 RSA 快。&lt;/p&gt;&lt;h3 id=&#34;椭圆曲线的数学原理简介&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e7%9a%84%e6%95%b0%e5%ad%a6%e5%8e%9f%e7%90%86%e7%ae%80%e4%bb%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;椭圆曲线的数学原理简介&lt;/h3&gt;&lt;p&gt;在数学中，椭圆曲线（Elliptic Curves）是一种平面曲线，由如下方程定义的点的集合组成（$A-J$ 均为常数）：&lt;/p&gt;&lt;p&gt;$$Ax^3 &#43; Bx^2y &#43; Cxy^2 &#43; Dy^3 &#43; Ex^2 &#43; Fxy &#43; Gy^2 &#43; Hx &#43; Iy &#43; J = 0$$&lt;/p&gt;&lt;p&gt;而 ECC 只使用了其中很简单的一个子集（$a, b$ 均为常数）：&lt;/p&gt;&lt;p&gt;$$y^2 = x^3 &#43; ax &#43; b$$&lt;/p&gt;&lt;p&gt;比如著名的 NIST 曲线 secp256k1 就是基于如下椭圆曲线方程：&lt;/p&gt;&lt;p&gt;$$y^2 = x^3 &#43; 7$$&lt;/p&gt;&lt;p&gt;椭圆曲线大概长这么个形状：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;椭圆曲线跟椭圆的关系，就犹如雷锋跟雷峰塔、Java 跟 JavaScript&amp;hellip;&lt;/p&gt;&lt;/blockquote&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/elliptic-curve.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;你可以通过如下网站手动调整 $a$ 与 $b$ 的值，拖动曲线的交点：&lt;a href=&#34;https://www.desmos.com/calculator/ialhd71we3?lang=zh-CN&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://www.desmos.com/calculator/ialhd71we3?lang=zh-CN&lt;/a&gt;&lt;/p&gt;&lt;h4 id=&#34;椭圆曲线上的运算&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e4%b8%8a%e7%9a%84%e8%bf%90%e7%ae%97&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;椭圆曲线上的运算&lt;/h4&gt;&lt;p&gt;数学家在椭圆曲线上定义了一些运算规则，ECC 就依赖于这些规则，下面简单介绍下我们用得到的部分。&lt;/p&gt;&lt;h5 id=&#34;1-加法与负元&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e5%8a%a0%e6%b3%95%e4%b8%8e%e8%b4%9f%e5%85%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 加法与负元&lt;/h5&gt;&lt;p&gt;对于曲线上的任意两点 $A$ 与 $B$，我们定义过 $A, B$ 的直线与曲线的交点为 $-(A&#43;B)$，而 $-(A&#43;B)$ 相对于 x 轴的对称点即为 $A&#43;B$:&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/ecc-add-operation.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;上述描述一是定义了椭圆曲线的加法规则，二是定义了椭圆曲线上的负元运算。&lt;/p&gt;&lt;h5 id=&#34;2-二倍运算&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e4%ba%8c%e5%80%8d%e8%bf%90%e7%ae%97&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 二倍运算&lt;/h5&gt;&lt;p&gt;在加法规则中，如果 $A=B$，我们定义曲线在 $A$ 点的切线与曲线的交点为 $-2A$，于是得到二倍运算的规则：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/ecc-2-times.webp&#34;/&gt;&lt;/figure&gt;&lt;h5 id=&#34;3-无穷远点&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-%e6%97%a0%e7%a9%b7%e8%bf%9c%e7%82%b9&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. 无穷远点&lt;/h5&gt;&lt;p&gt;对于 $(-A) &#43; A$ 这种一个值与其负元本身相加的情况，我们会发现过这两点的直线没有交点，前面定义的加法规则在这种情况下失效。为了解决这个问题，我们假设这直线与椭圆曲线相交于无穷远点 $O_{\infty}$.&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/ecc-ifinite-point.webp&#34;/&gt;&lt;/figure&gt;&lt;h5 id=&#34;4-k-倍运算&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#4-k-%e5%80%8d%e8%bf%90%e7%ae%97&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;4. k 倍运算&lt;/h5&gt;&lt;p&gt;我们在前面已经定义了椭圆曲线上的&lt;strong&gt;加法运算&lt;/strong&gt;、&lt;strong&gt;二倍运算&lt;/strong&gt;以及&lt;strong&gt;无穷远点&lt;/strong&gt;，有了这三个概念，我们就能定义&lt;strong&gt;k 倍运算&lt;/strong&gt; 了。&lt;/p&gt;&lt;p&gt;K 倍运算最简单的计算方法，就是不断地进行加法运算，但是也有许多更高效的算法。其中最简单的算法是「Double-and-add」，它要求首先 $k$ 拆分成如下形式&lt;/p&gt;&lt;p&gt;$$k = k_{0}&#43;2k_{1}&#43;2^{2}k_{2}&#43;\cdots &#43;2^{m}k_{m} \\\text{其中} k_{0}~..~k_{m}\in {0,1},m=\lfloor \log _{2}{k}\rfloor$$&lt;/p&gt;&lt;p&gt;然后再迭代计算其中各项的值，它的运算复杂度为 $log_{2}(k)$.&lt;/p&gt;&lt;p&gt;因 Double 和 add 的执行时间不同，根据执行时间就可以知道是执行 Double 还是 add，间接可以推算出 k. 因此这个算法会有计时攻击的风险。基于「Double-and-add」修改的蒙哥马利阶梯（Montgomery Ladder）是可以避免计时分析的作法，这里就不详细介绍了。&lt;/p&gt;&lt;h4 id=&#34;5-有限域上的椭圆曲线&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#5-%e6%9c%89%e9%99%90%e5%9f%9f%e4%b8%8a%e7%9a%84%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;5. 有限域上的椭圆曲线&lt;/h4&gt;&lt;p&gt;椭圆曲线是连续且无限的，而计算机却更擅长处理离散的、存在上限的整数，因此 ECC 使用「有限域上的椭圆曲线」进行计算。&lt;/p&gt;&lt;p&gt;「有限域（也被称作 Galois Filed, 缩写为 GF）」顾名思义，就是指只有有限个数值的域。&lt;/p&gt;&lt;p&gt;有限域上的椭圆曲线方程，通过取模的方式将曲线上的所有值都映射到同一个有限域内。有限域 $\mathbb {F} _{p}$ 上的 EC 椭圆曲线方程为：&lt;/p&gt;&lt;p&gt;$$y^2 = x^3 &#43; ax &#43; b (\mod p), 0 \le x \le p$$&lt;/p&gt;&lt;p&gt;目前主要有两种有限域在 ECC 中被广泛应用：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;以素数为模的整数域: $\mathbb {F} _{p}$&lt;ul&gt;&lt;li&gt;在通用处理器上计算很快&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;以 2 的幂为模的整数域: $\mathbb {F} _{2^{m}}$&lt;ul&gt;&lt;li&gt;当使用专用硬件时，计算速度很快&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;通过限制 x 为整数，并使用取模进行了映射后，椭圆曲线的形状已经面目全非了，它的加减法也不再具有几何意义。但是它的一些特性仍然跟椭圆曲线很类似，各种公式基本加个 $\mod p$ 就变成了它的有限域版本：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;无穷远点 $O_{\infty}$ 是零元，$O_{\infty} &#43; O_{\infty} = O_{\infty}$，$O_{\infty} &#43; P = P$&lt;/li&gt;&lt;li&gt;$P_{x, y}$ 的负元为 $P_{x, -y}$,，并且有 $P &#43; (-P) = O_{\infty}$&lt;/li&gt;&lt;li&gt;$P * 0 = O_{\infty}$&lt;/li&gt;&lt;li&gt;如果 $P_{x1, y1} &#43; Q_{x2, y2} = R_{x3, y3}$，则其坐标有如下关系&lt;ul&gt;&lt;li&gt;$x3 = (k^2 - x1 - x2) \mod p$&lt;/li&gt;&lt;li&gt;$y3 = (k(x1 - x3) - y1) \mod p$&lt;/li&gt;&lt;li&gt;斜率 $k$ 的计算&lt;ul&gt;&lt;li&gt;如果 $P=Q$，则 $k=\dfrac {3x^{2}&#43;a} {2y_{1}}$&lt;/li&gt;&lt;li&gt;否则 $k=\dfrac {y_{2}-y_{1}} {x_{2}-x_{1}} $&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;ecdlp-椭圆曲线离散对数问题&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#ecdlp-%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e7%a6%bb%e6%95%a3%e5%af%b9%e6%95%b0%e9%97%ae%e9%a2%98&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;ECDLP 椭圆曲线离散对数问题&lt;/h4&gt;&lt;p&gt;前面已经介绍了椭圆曲线上的 &lt;strong&gt;k 倍运算&lt;/strong&gt; 及相关的高效算法，但是我们还没有涉及到除法。&lt;/p&gt;&lt;p&gt;椭圆曲线上的除法是一个尚未被解决的难题——「ECDLP 椭圆曲线离散对数问题」：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;已知 $kG$ 与基点 $G$，求整数 $k$ 的值。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;目前并没有有效的手段可以快速计算出 $k$ 的值。比较直观的方法应该是从基点 $G$ 开始不断进行加法运算，直到结果与 $kG$ 相等。&lt;/p&gt;&lt;p&gt;目前已知的 ECDLP 最快的解法所需步骤为 $\sqrt{k}$，而 &lt;strong&gt;k 倍运算&lt;/strong&gt;高效算法前面已经介绍过了，所需步骤为 $log_2(k)$。在 $k$ 非常大的情况下，它们的计算用时将会有指数级的差距。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;椭圆曲线上的 &lt;strong&gt;k 倍运算&lt;/strong&gt;与素数上的幂运算很类似，因此 ECC 底层的数学难题 ECDLP 与 RSA 的离散对数问题 DLP 也有很大相似性。&lt;/p&gt;&lt;/blockquote&gt;&lt;h3 id=&#34;ecc-密钥对生成&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#ecc-%e5%af%86%e9%92%a5%e5%af%b9%e7%94%9f%e6%88%90&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;ECC 密钥对生成&lt;/h3&gt;&lt;p&gt;首先，跟 RSA 一样，让我们先看下怎么使用 openssl 生成一个使用 prime256v1 曲线的 ECC 密钥对：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 列出 openssl 支持的所有曲线名称&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl ecparam -list_curves&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 生成 ec 算法的私钥，使用 prime256v1 算法，密钥长度 256 位。（强度大于 2048 位的 RSA 密钥）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl ecparam -genkey -name prime256v1 -out ecc-private-key.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 通过密钥生成公钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl ec -in ecc-private-key.pem -pubout -out ecc-public-key.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看私钥内容&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ cat ecc-private-key.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN EC PARAMETERS-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;BggqhkjOPQMBBw&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END EC PARAMETERS-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN EC PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MHcCAQEEIGm3wT/m4gDaoJGKfAHDXV2BVtdyb/aPTITJR5B6KVEtoAoGCCqGSM49&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;AwEHoUQDQgAE5IEIorw0WU5&#43;om/UgfyYSKosiGO6Hpe8hxkqL5GUVPyu4LJkfw/e&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;99zhNJatliZ1Az/yCKww5KrXC8bQ9wGQvw&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END EC PRIVATE KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看私钥的详细参数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ openssl ec -noout -text -in ecc-private-key.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; EC key&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Private-Key: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; bit&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;priv:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    69:b7:c1:3f:e6:e2:00:da:a0:91:8a:7c:01:c3:5d:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    5d:81:56:d7:72:6f:f6:8f:4c:84:c9:47:90:7a:29:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    51:2d&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pub: &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    04:e4:81:08:a2:bc:34:59:4e:7e:a2:6f:d4:81:fc:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    98:48:aa:2c:88:63:ba:1e:97:bc:87:19:2a:2f:91:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    94:54:fc:ae:e0:b2:64:7f:0f🇩🇪f7:dc:e1:34:96:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ad:96:26:75:03:3f:f2:08:ac:30:e4:aa:d7:0b:c6:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    d0:f7:01:90:bf&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ASN1 OID: prime256v1&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NIST CURVE: P-256&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看公钥内容&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ cat ecc-public-key.pem &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----BEGIN PUBLIC KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5IEIorw0WU5&#43;om/UgfyYSKosiGO6&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hpe8hxkqL5GUVPyu4LJkfw/e99zhNJatliZ1Az/yCKww5KrXC8bQ9wGQvw&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-----END PUBLIC KEY-----&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看公钥的参数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❯ openssl ec -noout -text -pubin -in ecc-public-key.pem&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; EC key&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Private-Key: &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; bit&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;pub: &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    04:e4:81:08:a2:bc:34:59:4e:7e:a2:6f:d4:81:fc:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    98:48:aa:2c:88:63:ba:1e:97:bc:87:19:2a:2f:91:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    94:54:fc:ae:e0:b2:64:7f:0f🇩🇪f7:dc:e1:34:96:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ad:96:26:75:03:3f:f2:08:ac:30:e4:aa:d7:0b:c6:&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    d0:f7:01:90:bf&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ASN1 OID: prime256v1&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;NIST CURVE: P-256&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;可以看到 ECC 算法的公钥私钥都比 RSA 小了非常多，数据量小，却能带来同等的安全强度，这是 ECC 相比 RSA 最大的优势。&lt;/p&gt;&lt;p&gt;私钥的参数：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;priv&lt;/code&gt;: 私钥，一个 256bits 的大整数，对应我们前面介绍的 $k 倍运算$中的 $k$&lt;/li&gt;&lt;li&gt;&lt;code&gt;pub&lt;/code&gt;: 公钥，是一个椭圆曲线（EC）上的坐标 ${x, y}$，也就是我们 well-known 的基点 $G$&lt;/li&gt;&lt;li&gt;&lt;code&gt;ASN1 OID&lt;/code&gt;: prime256v1, 椭圆曲线的名称&lt;/li&gt;&lt;li&gt;&lt;code&gt;NIST CURVE&lt;/code&gt;: P-256&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;使用安全随机数生成器即可直接生成出 ECC 的私钥 &lt;code&gt;priv&lt;/code&gt;，因此 ECC 的密钥对生成速度非常快。&lt;/p&gt;&lt;h3 id=&#34;ecdh-密钥交换&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#ecdh-%e5%af%86%e9%92%a5%e4%ba%a4%e6%8d%a2&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;ECDH 密钥交换&lt;/h3&gt;&lt;p&gt;这个在前面&lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;已经介绍过了，不过这里再复述一遍：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Alice 跟 Bob 协商好椭圆曲线的各项参数，以及基点 G，这些参数都是公开的。&lt;/li&gt;&lt;li&gt;Alice 生成一个随机的 ECC 密钥对（公钥：$alicePrivate * G$, 私钥: $alicePrivate$）&lt;/li&gt;&lt;li&gt;Bob 生成一个随机的 ECC 密钥对（公钥：$bobPrivate * G$, 私钥: $bobPrivate$）&lt;/li&gt;&lt;li&gt;两人通过不安全的信道交换公钥&lt;/li&gt;&lt;li&gt;Alice 将 Bob 的公钥乘上自己的私钥，得到共享密钥 $sharedKey = (bobPrivate * G) * alicePrivate$&lt;/li&gt;&lt;li&gt;Bob 将 Alice 的公钥乘上自己的私钥，得到共享密钥 $sharedKey = (alicePrivate * G) * bobPrivate$&lt;/li&gt;&lt;li&gt;因为 $(a * G) * b = (b * G) * a$，Alice 与 Bob 计算出的共享密钥应该是相等的&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这样两方就通过 ECDH 完成了密钥交换。而 ECDH 的安全性，则由 ECDLP 问题提供保证。&lt;/p&gt;&lt;h3 id=&#34;ecc-加密与解密&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#ecc-%e5%8a%a0%e5%af%86%e4%b8%8e%e8%a7%a3%e5%af%86&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;ECC 加密与解密&lt;/h3&gt;&lt;p&gt;ECC 本身并没有提供加密与解密的功能，但是我们可以借助 ECDH 迂回实现加解密。流程如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Bob 想要将消息 &lt;code&gt;M&lt;/code&gt; 安全地发送给 Alice，他手上已经拥有了 Alice 的 ECC 公钥 &lt;code&gt;alicePubKey&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Bob 首先使用如下算法生成出「共享密钥」&#43;「密文公钥」&lt;ul&gt;&lt;li&gt;随机生成一个临时 ECC 密钥对&lt;ul&gt;&lt;li&gt;私钥：安全随机数 &lt;code&gt;ciphertextPrivKey&lt;/code&gt;&lt;/li&gt;&lt;li&gt;公钥：&lt;code&gt;ciphertextPubKey = ciphertextPrivKey * G&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;使用 ECDH 计算出共享密钥：&lt;code&gt;sharedECCKey = alicePubKey * ciphertextPrivKey&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Bob 使用「共享密钥」与对称加密算法加密消息，得到密文 &lt;code&gt;C&lt;/code&gt;&lt;ul&gt;&lt;li&gt;比如使用 AES-256-GCM 或者 ChaCha20-Poly1305 进行对称加密&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Bob 将 &lt;code&gt;C&lt;/code&gt; &#43; &lt;code&gt;ciphertextPubKey&lt;/code&gt; 打包传输给 Alice&lt;/li&gt;&lt;li&gt;Alice 使用 &lt;code&gt;ciphertextPubKey&lt;/code&gt; 与自己的私钥计算出共享密钥 &lt;code&gt;sharedECCKey = ciphertextPubKey * alicePrivKey&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Alice 使用计算出的共享密钥解密 &lt;code&gt;C&lt;/code&gt; 得到消息 &lt;code&gt;M&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;实际上就是消息的发送方先生成一个临时的 ECC 密钥对，然后借助 ECDH 协议计算出共享密钥用于加密。消息的接收方同样通过 ECDH 协议计算出共享密钥再解密数据。&lt;/p&gt;&lt;p&gt;使用 Python 演示如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install tinyec  # &amp;lt;= ECC 曲线库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tinyec&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;registry&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;secrets&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用这条曲线进行演示&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;brainpoolP256r1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compress_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ecc_calc_encryption_keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    安全地生成一个随机 ECC 密钥对，然后按 ECDH 流程计算出共享密钥 sharedECCKey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    最后返回（共享密钥, 临时 ECC 公钥 ciphertextPubKey）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ciphertextPrivKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randbelow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ciphertextPubKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertextPrivKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sharedECCKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertextPrivKey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sharedECCKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertextPubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ecc_calc_decryption_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;privKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertextPubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sharedECCKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertextPubKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;privKey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sharedECCKey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 首先生成出 Alice 的 ECC 密钥对&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;privKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randbelow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;privKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;private key:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;privKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;public key:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. Alice 将公钥发送给 Bob&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. Bob 使用 Alice 的公钥生成出（共享密钥, 临时 ECC 公钥 ciphertextPubKey）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encryptKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertextPubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ecc_calc_encryption_keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ciphertext pubKey:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ciphertextPubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;encryption key:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encryptKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 4. Bob 使用共享密钥 encryptKey 加密数据，然后将密文与 ciphertextPubKey 一起发送给 Alice&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 5. Alice 使用自己的私钥 &#43; ciphertextPubKey 计算出共享密钥 decryptKey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;decryptKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ecc_calc_decryption_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;privKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertextPubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;decryption key:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress_point&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decryptKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 6. Alice 使用 decryptKey 解密密文得到原始消息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&#34;ecc-数字签名&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#ecc-%e6%95%b0%e5%ad%97%e7%ad%be%e5%90%8d&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;ECC 数字签名&lt;/h3&gt;&lt;p&gt;前面已经介绍了 RSA 签名，这里介绍下基于 ECC 的签名算法。&lt;/p&gt;&lt;p&gt;基于 ECC 的签名算法主要有两种：ECDSA 与 EdDSA，以及 EdDSA 的变体。其中 ECDSA 算法稍微有点复杂，而安全强度跟它基本一致的 EdDSA 的算法更简洁更易于理解，在使用特定曲线的情况下 EdDSA 还要比 ECDSA 更快一点，因此现在通常更推荐使用 &lt;strong&gt;EdDSA&lt;/strong&gt; 算法。&lt;/p&gt;&lt;h4 id=&#34;eddsa-与-ed25519-签名算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#eddsa-%e4%b8%8e-ed25519-%e7%ad%be%e5%90%8d%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;EdDSA 与 Ed25519 签名算法&lt;/h4&gt;&lt;p&gt;EdDSA（Edwards-curve Digital Signature Algorithm）是一种现代的安全数字签名算法，它使用专为性能优化的椭圆曲线，如 255bits 曲线 edwards25519 和 448bits 曲线 edwards448.&lt;/p&gt;&lt;p&gt;EdDSA 签名算法及其变体 Ed25519 和 Ed448 在技术上在 &lt;a href=&#34;https://tools.ietf.org/html/rfc8032&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC8032&lt;/a&gt; 中进行了描述。&lt;/p&gt;&lt;p&gt;首先，用户需要基于 edwards25519 或者 edwards448 曲线，生成一个 ECC 密钥对。生成私钥的时候，算法首先生成一个随机数，然后会对随机数做一些变换以确保安全性，防范计时攻击等攻击手段。对于 edwards25519 公私钥都是 32 字节，而对于 edwards448 公私钥都是 57 字节。&lt;/p&gt;&lt;p&gt;对于 edwards25519 输出的签名长度为 64 字节，而对于 Ed448 输出为 114 字节。&lt;/p&gt;&lt;p&gt;具体的算法虽然比 ECDSA 简单，但还是有点难度的，这里就直接略过了。&lt;/p&gt;&lt;p&gt;下面给出个 ed25519 的计算示例：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives.asymmetric.ed25519&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ed25519PrivateKey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 也可用 openssl 生成，都没啥毛病&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ed25519PrivateKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 签名&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my authenticated message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显然 ECC 的公钥 kG 也能直接从私钥 k 生成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 验证&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Raises InvalidSignature if verification fails&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my authenticated message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;ed448 的代码也完全类似：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives.asymmetric.ed448&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ed448PrivateKey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ed448PrivateKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;signature&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sign&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my authenticated message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;private_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Raises InvalidSignature if verification fails&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;signature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my authenticated message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&#34;密码学常用椭圆曲线介绍&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%af%86%e7%a0%81%e5%ad%a6%e5%b8%b8%e7%94%a8%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e4%bb%8b%e7%bb%8d&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;密码学常用椭圆曲线介绍&lt;/h3&gt;&lt;p&gt;在介绍密码学中的常用椭圆曲线前，需要先介绍一下椭圆曲线的&lt;strong&gt;阶&lt;/strong&gt;（order）以及&lt;strong&gt;辅助因子&lt;/strong&gt;（cofactor）这两个概念。&lt;/p&gt;&lt;p&gt;首先还得介绍下数学中「循环群」的概念，它是指能由单个元素所生成的群，在 ECC 中这就是预先定义好的基点 $G$.&lt;/p&gt;&lt;p&gt;一个有限域上的椭圆曲线可以形成一个有限「循环代数群」，它由曲线上的所有点组成。椭圆曲线的&lt;strong&gt;阶&lt;/strong&gt;被定义为该曲线上所有点的个数（包括无穷远点）。&lt;/p&gt;&lt;p&gt;有些曲线加上 G 点可以形成一个单一循环群，这一个群包含了曲线上的所有点。而其他的曲线加上 G 点则形成多个不相交的循环子群，每个子群包含了曲线的一个子集。对于上述第二种情况，假设曲线上的点被拆分到了 &lt;strong&gt;h&lt;/strong&gt; 个循环子群中，每个子群的&lt;strong&gt;阶&lt;/strong&gt;都是 &lt;strong&gt;r&lt;/strong&gt;，那这时整个群的阶就是 $n = h * r$，其中子群的个数 &lt;strong&gt;h&lt;/strong&gt; 被称为&lt;strong&gt;辅助因子&lt;/strong&gt;。&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/elliptic-curve-subgroups.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;有限域上的椭圆曲线的阶都是有限的，也就是说对于曲线上任意一点 $G$，我们计算它的数乘 $kG$，随着整数 $k$ 的增大，一定会存在某个 $k$ 使 $kG = O_{\infty}$ 成立，然后 $k$ 继续增大时，因为 $O_{\infty} * P = O_{\infty}$，$kG$ 的值就固定为 $O_{\infty}$ 了，更大的 $k$ 值已经失去了意义。&lt;/p&gt;&lt;p&gt;因此 ECC 中要求 $kG$ 中的私钥 $k$ 符合条件 $0 \le k \le r$，也就是说总的私钥数量是受 $r$ 限制的。&lt;/p&gt;&lt;p&gt;辅助因子通过用如下公式表示：&lt;/p&gt;&lt;p&gt;$$h = n / r$$&lt;/p&gt;&lt;p&gt;其中 $n$ 是曲线的阶，$r$ 是每个子群的阶，$h$ 是辅助因子。如果曲线形成了一个单一循环群，那显然 $h = 1$，否则 $h &amp;gt; 1$&lt;/p&gt;&lt;p&gt;举例如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;secp256k1&lt;/code&gt; 的辅助因子为 1&lt;/li&gt;&lt;li&gt;&lt;code&gt;Curve25519&lt;/code&gt; 的辅助因子为 8&lt;/li&gt;&lt;li&gt;&lt;code&gt;Curve448&lt;/code&gt; 的辅助因子为 4&lt;/li&gt;&lt;/ul&gt;&lt;h4 id=&#34;生成点-g&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e7%94%9f%e6%88%90%e7%82%b9-g&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;生成点 G&lt;/h4&gt;&lt;p&gt;生成点 G 的选择是很有讲究的，虽然每个循环子群都包含有很多个生成点，但是 ECC 只会谨慎的选择其中一个。首先 G 点必须要能生成出整个循环子群，其次还需要有尽可能高的计算性能。&lt;/p&gt;&lt;p&gt;数学上已知某些椭圆曲线上，不同的生成点生成出的循环子群，阶也是不同的。如果 G 点选得不好，可能会导致生成出的子群的阶较小。前面我们已经提过子群的阶 $r$ 会限制总的私钥数量，导致算法强度变弱！因此不恰当的 $G$ 点可能会导致我们遭受「&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc2785&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;小子群攻击&lt;/a&gt;」。为了避免这种风险，建议尽量使用被广泛使用的加密库，而不是自己撸一个。&lt;/p&gt;&lt;h4 id=&#34;椭圆曲线的域参数&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e7%9a%84%e5%9f%9f%e5%8f%82%e6%95%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;椭圆曲线的域参数&lt;/h4&gt;&lt;p&gt;ECC椭圆曲线由一组椭圆曲线域参数描述，如曲线方程参数、场参数和生成点坐标。这些参数在各种密码学标准中指定，你可以网上搜到相应的 RFC 或 NIST 文档。&lt;/p&gt;&lt;p&gt;这些标准定义了一组命名曲线的参数，例如 secp256k1、P-521、brainpoolP512t1 和 SM2. 这些加密标准中描述的有限域上的椭圆曲线得到了密码学家的充分研究和分析，并被认为具有一定的安全强度。&lt;/p&gt;&lt;p&gt;也有一些密码学家（如 Daniel Bernstein）认为，官方密码标准中描述的大多数曲线都是「不安全的」，并定义了他们自己的密码标准，这些标准在更广泛的层面上考虑了 ECC 安全性。&lt;/p&gt;&lt;p&gt;开发人员应该仅使用各项标准文档给出的、经过密码学家充分研究的命名曲线。&lt;/p&gt;&lt;h5 id=&#34;secp256k1&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#secp256k1&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;secp256k1&lt;/h5&gt;&lt;p&gt;此曲线被应用在比特币中，它的域参数如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;em&gt;&lt;strong&gt;p&lt;/strong&gt;&lt;/em&gt; (modulus) = &lt;code&gt;0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/em&gt; (order; size; the count of all possible EC points) = &lt;code&gt;0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;strong&gt;a&lt;/strong&gt;&lt;/em&gt; (方程 $y^2 ≡ x^3 &#43; a*x &#43; b (\mod p)$ 中的常数) = &lt;code&gt;0x0000000000000000000000000000000000000000000000000000000000000000&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/em&gt; (方程 $y^2 ≡ x^3 &#43; a*x &#43; b (\mod p)$ 中的常数)= &lt;code&gt;0x0000000000000000000000000000000000000000000000000000000000000007&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;strong&gt;g&lt;/strong&gt;&lt;/em&gt; (the curve generator point G {x, y}) = (&lt;code&gt;0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798&lt;/code&gt;, &lt;code&gt;0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8&lt;/code&gt;)&lt;/li&gt;&lt;li&gt;&lt;em&gt;&lt;strong&gt;h&lt;/strong&gt;&lt;/em&gt; (cofactor, typically 1) = 01&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;edwards-曲线&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#edwards-%e6%9b%b2%e7%ba%bf&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Edwards 曲线&lt;/h5&gt;&lt;p&gt;椭圆曲线方程除了我们前面使用的 Weierstrass 形式 $$y^2 = (x^3 &#43; ax &#43; b) \mod p$$ 外，还可以被写成其他多种形式，这些不同的形式是&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/%E6%9C%89%E7%90%86%E6%98%A0%E5%B0%84&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;双有理等价&lt;/a&gt;的（别问，我也不懂什么叫「双有理等价」&amp;hellip;）。不同的方程形式在计算机的数值计算上可能会存在区别。&lt;/p&gt;&lt;p&gt;为了性能考虑，ECC 在部分场景下会考虑使用 Edwards 曲线形式进行计算，该方程形式如下：&lt;/p&gt;&lt;p&gt;$$x^{2}&#43;y^{2}=1&#43;dx^{2}y^{2}$$&lt;/p&gt;&lt;p&gt;画个图长这样：&lt;/p&gt;&lt;p&gt;&lt;img        class=&#34;lazyload&#34;        data-src=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp&#34;        data-srcset=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp, /images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp 1.5x, /images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp 2x&#34;        data-sizes=&#34;auto&#34;        alt=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp&#34;        title=&#34;/images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp&#34;&gt;&lt;/p&gt;&lt;p&gt;知名的 Edwards 曲线有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Curve1174 (251-bit)&lt;/li&gt;&lt;li&gt;Curve25519 (255-bit)&lt;/li&gt;&lt;li&gt;Curve383187 (383-bit)&lt;/li&gt;&lt;li&gt;Curve41417 (414-bit)&lt;/li&gt;&lt;li&gt;Curve448 (448-bit)&lt;/li&gt;&lt;li&gt;E-521 (521-bit)&lt;/li&gt;&lt;li&gt;&amp;hellip;&lt;/li&gt;&lt;/ul&gt;&lt;h5 id=&#34;curve25519-x25519-和-ed25519&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#curve25519-x25519-%e5%92%8c-ed25519&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Curve25519, X25519 和 Ed25519&lt;/h5&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ed25519/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ed25519/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;只要域参数选得好，Edwards 就可以以非常高的性能实现 ECC 密钥交换、数字签名、混合加密方案。&lt;/p&gt;&lt;p&gt;一个例子就是 &lt;a href=&#34;https://en.wikipedia.org/wiki/Curve25519&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Curve25519&lt;/a&gt;，它是 Edwards 曲线，其 Montgomery 形式的定义如下：&lt;/p&gt;&lt;p&gt;$$y^{2}=x^{3}&#43;486662x^{2}&#43;x$$&lt;/p&gt;&lt;p&gt;其被定义在有限域 $\mathbb {F} _{p}$ 上，$p = 2255 - 19$, 其他域参数如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;阶 &lt;code&gt;n = 2252 &#43; 0x14def9dea2f79cd65812631a5cf5d3ed&lt;/code&gt;&lt;/li&gt;&lt;li&gt;辅因子 &lt;code&gt;h = 8&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;虽然此曲线并未以 Edwards 形式定义，但是它已被证明与如下扭曲 Edwards 曲线（&lt;code&gt;edwards25519&lt;/code&gt;）双有理等价：&lt;/p&gt;&lt;p&gt;$$-x^2 &#43; y^2 = 1 &#43; 37095705934669439343138083508754565189542113879843219016388785533085940283555 x^2 y^2$$&lt;/p&gt;&lt;p&gt;上面给出的这种 Edwards 形式与前文给出的 Weierstrass 形式完全等价，是专为计算速度优化而设计成这样的。&lt;/p&gt;&lt;p&gt;Curve25519 由 Daniel Bernstein 领导的密码学家团队精心设计，在多个设计和实现层面上达成了非常高的性能，同时不影响安全性。&lt;/p&gt;&lt;p&gt;Curve25519 的构造使其避免了许多潜在的实现缺陷。根据设计，它不受定时攻击的影响，并且它接受任何 32 字节的字符串作为有效的公钥，并且不需要验证。它能提供 125.8bits 的安全强度（有时称为 ~ 128bits 安全性）&lt;/p&gt;&lt;p&gt;Curve25519 的私钥为 251 位，通常编码为 256 位整数（32 个字节，64 个十六进制数字）。公钥通常也编码为 256 位整数（255 位 y 坐标 &#43; 1 位 x 坐标），这对开发人员来说非常方便。&lt;/p&gt;&lt;p&gt;基于 Curve25519 派生出了名为 &lt;a href=&#34;https://en.wikipedia.org/wiki/Curve25519&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;X25519&lt;/a&gt; 的 ECDH 算法，以及基于 EdDSA 的高速数字签名算法 &lt;a href=&#34;https://en.wikipedia.org/wiki/EdDSA#Ed25519&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Ed25519&lt;/a&gt;.&lt;/p&gt;&lt;h5 id=&#34;curve448-x448-和-ed448&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#curve448-x448-%e5%92%8c-ed448&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;Curve448, X448 和 Ed448&lt;/h5&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ed448/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ed448/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Curve448&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Curve448&lt;/a&gt;（Curve448-Goldilocks）是一种非扭曲 Edwards 曲线，它的方程定义如下：&lt;/p&gt;&lt;p&gt;$$x^2 &#43; y^2 = 1 - 39081 x^2 y^2$$&lt;/p&gt;&lt;p&gt;其被定义在有限域 $\mathbb {F} _{p}$ 上，$p = 2448 - 2224 - 1$，其他域参数：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;阶 &lt;code&gt;n = 2446 - 0x8335dc163bb124b65129c96fde933d8d723a70aadc873d6d54a7bb0d&lt;/code&gt;&lt;/li&gt;&lt;li&gt;辅助因子 &lt;code&gt;h = 4&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;与 Curve25519 一样，Curve448 也等价于前面给出的 Weierstrass 形式，选择 Edwards 形式主要是因为它能显著提升性能。&lt;/p&gt;&lt;p&gt;Curve448 提供 222.8 位的安全强度。Curve448 的私钥为 446 位，通常编码为 448 位整数（56 个字节，112 个十六进制数字）。公钥也被编码为 448 位整数。&lt;/p&gt;&lt;p&gt;基于 Curve448 派生出了名为 &lt;a href=&#34;https://tools.ietf.org/html/rfc7748#section-5&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;X448&lt;/a&gt; 的 ECDH 算法，以及基于 EdDSA 的高速数字签名算法 &lt;a href=&#34;https://tools.ietf.org/html/rfc8032#section-5.2&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Ed448&lt;/a&gt;.&lt;/p&gt;&lt;h5 id=&#34;该选择哪种椭圆曲线&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e8%af%a5%e9%80%89%e6%8b%a9%e5%93%aa%e7%a7%8d%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;该选择哪种椭圆曲线&lt;/h5&gt;&lt;p&gt;首先，Bernstein 的 SafeCurves 标准列出了符合一组 ECC 安全要求的安全曲线，可访问 &lt;a href=&#34;https://safecurves.cr.yp.to&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://safecurves.cr.yp.to&lt;/a&gt; 了解此标准。&lt;/p&gt;&lt;p&gt;此外对于我们前面介绍的 Curve448 与 Curve25519，可以从性能跟安全性方面考量：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;要更好的性能，可以接受弱一点的安全性：选择 Curve25519&lt;/li&gt;&lt;li&gt;要更好的安全性，可以接受比 Curve25519 慢 3 倍的计算速度：选择 Curve448&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;如果你的应用场景中暂时还很难用上 Curve448/Curve25519，你可以考虑一些应用更广泛的其他曲线，但是一定要遵守如下安全规范：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;模数 p 应该至少有 256 位&lt;ul&gt;&lt;li&gt;比如 &lt;code&gt;secp224k1&lt;/code&gt; &lt;code&gt;secp192k1&lt;/code&gt; 啥的就可以扫进历史尘埃里了&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;暂时没有想补充的，可以参考 &lt;a href=&#34;https://safecurves.cr.yp.to&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://safecurves.cr.yp.to&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;目前在 TLS 协议以及 JWT 签名算法中，目前应该最广泛的椭圆曲线仍然是 NIST 系列：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;P-256&lt;/code&gt;: 到目前为止 P-256 应该仍然是应用最为广泛的椭圆曲线&lt;ul&gt;&lt;li&gt;在 openssl 中对应的名称为 &lt;code&gt;prime256v1&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;P-384&lt;/code&gt;&lt;ul&gt;&lt;li&gt;在 openssl 中对应的名称为 &lt;code&gt;secp384r1&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;P-521&lt;/code&gt;&lt;ul&gt;&lt;li&gt;在 openssl 中对应的名称为 &lt;code&gt;secp521r1&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但是我们也看到 Curve25519 正在越来越流行，因为美国政府有前科，NIST 标准被怀疑可能有后门，目前很多人都在推动使用 Curve25519 等社区方案取代掉 NIST 标准曲线。&lt;/p&gt;&lt;p&gt;对于 openssl，如下命令会列出 openssl 支持的所有曲线：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openssl ecparam -list_curves&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&#34;ecies---集成加密方案&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#ecies---%e9%9b%86%e6%88%90%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;ECIES - 集成加密方案&lt;/h3&gt;&lt;p&gt;在文章开头我们已经介绍了集成加密方案 (IES)，它在密钥封装机制（KEM）的基础上，添加了密钥派生算法 KDF、消息认证算法 MAC 等其他密码学算法以达成我们对消息的安全性、真实性、完全性的需求。&lt;/p&gt;&lt;p&gt;而 ECIES 也完全类似，是在 ECC &#43; 对称加密算法的基础上，添加了许多其他的密码学算法实现的。&lt;/p&gt;&lt;p&gt;ECIES 是一个加密框架，而不是某种固定的算法。它可以通过插拔不同的算法，形成不同的实现。比如「secp256k1 &#43; Scrypt &#43; AES-GCM &#43; HMAC-SHA512」。&lt;/p&gt;&lt;p&gt;大概就介绍到这里吧，后续就请在需要用到时自行探索相关的细节咯。&lt;/p&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;A complete overview of SSL/TLS and its cryptographic system&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://www.oscca.gov.cn/sca/zxfw/2017-04/24/content_1011711.shtml&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;密码发展史之近现代密码 - 中国国家密码管理局&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6090&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC6090 - Fundamental Elliptic Curve Cryptography Algorithms&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://security.stackexchange.com/questions/78621/which-elliptic-curve-should-i-use&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Which elliptic curve should I use?&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">写给开发人员的实用密码学（六）—— 对称密钥加密算法</title><link href="https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/"/><id>https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/</id><author><name>ryan4yin</name></author><published>2022-03-06T18:44:00+08:00</published><updated>2022-03-06T18:44:00+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;本文主要翻译自 &lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者补充了部分代码示例。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;《写给开发人员的实用密码学》系列文章目录：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-1/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（一）—— 概览&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-2-hash/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（二）—— 哈希函数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-3-key-derivation-function/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-4-secure-random-generators/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-6-symmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（六）—— 对称密钥加密算法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/about-tls-cert&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt;&lt;/li&gt;&lt;li&gt;待续&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;零术语介绍&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e9%9b%b6%e6%9c%af%e8%af%ad%e4%bb%8b%e7%bb%8d&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;零、术语介绍&lt;/h2&gt;&lt;p&gt;两个常用动词：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;加密：cipher 或者 encrypt&lt;/li&gt;&lt;li&gt;解密：decipher 或者 decrypt&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;另外有几个名词有必要解释：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;cipher: 指用于加解密的「密码算法」，有时也被直接翻译成「密码」&lt;/li&gt;&lt;li&gt;cryptographic algorithm: 密码学算法，泛指密码学相关的各类算法&lt;/li&gt;&lt;li&gt;ciphertext: 密文，即加密后的信息。对应的词是明文 plaintext&lt;/li&gt;&lt;li&gt;password: 这个应该不需要解释，就是我们日常用的各种字符或者数字密码，也可称作口令。&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Passphrase&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;passphrase&lt;/a&gt;: 翻译成「密码词组」或者「密碼片語」，通常指用于保护密钥或者其他敏感数据的一个 password&lt;ul&gt;&lt;li&gt;如果你用 ssh/gpg/openssl 等工具生成或使用过密钥，应该对它不陌生。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在密码学里面，最容易搞混的词估计就是「密码」了，cipher/password/passphrase 都可以被翻译成「密码」，需要注意下其中区别。&lt;/p&gt;&lt;h2 id=&#34;一什么是对称加密&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80%e4%bb%80%e4%b9%88%e6%98%af%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、什么是对称加密&lt;/h2&gt;&lt;p&gt;在密码学中，有两种加密方案被广泛使用：「对称加密」与「非对称加密」。&lt;/p&gt;&lt;p&gt;对称加密是指，使用相同的密钥进行消息的加密与解密。因为这个特性，我们也称这个密钥为「共享密钥（Shared Secret Key）」，示意图如下：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-6-symmetric-key-ciphers/symmetric-cryptography.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;现代密码学中广泛使用的对称加密算法（ciphers）有：AES（AES-128、AES-192、AES-256）、ChaCha20、Twofish、IDEA、Serpent、Camelia、RC6、CAST 等。其中绝大多数都是「&lt;strong&gt;块密码算法&lt;/strong&gt;（Block Cipher）」或者叫「&lt;strong&gt;分组密码算法&lt;/strong&gt;」，这种算法一次只能加密固定大小的块（例如 128 位）；少部分是「&lt;strong&gt;流密码算法&lt;/strong&gt;（Stream Cipher）」，流密码算法将数据逐字节地加密为密文流。&lt;/p&gt;&lt;p&gt;通过使用称为「分组密码工作模式」的技术，可以将「分组密码算法」转换为「流密码算法」。&lt;/p&gt;&lt;h3 id=&#34;量子安全性&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e9%87%8f%e5%ad%90%e5%ae%89%e5%85%a8%e6%80%a7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;量子安全性&lt;/h3&gt;&lt;p&gt;即使计算机进入量子时代，仍然可以沿用当前的对称密码算法。因为大多数现代对称密钥密码算法都是&lt;strong&gt;抗量子的&lt;/strong&gt;（&lt;strong&gt;quantum-resistant&lt;/strong&gt;），这意味当使用长度足够的密钥时，强大的量子计算机无法破坏其安全性。目前来看 256 位的 AES/Twofish 在很长一段时间内都将是 &lt;strong&gt;量子安全&lt;/strong&gt; 的。&lt;/p&gt;&lt;h2 id=&#34;二对称加密方案的结构&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8c%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88%e7%9a%84%e7%bb%93%e6%9e%84&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、对称加密方案的结构&lt;/h2&gt;&lt;p&gt;我们在第一章「概览」里介绍过，单纯使用数据加密算法只能保证数据的&lt;strong&gt;安全性&lt;/strong&gt;，并不能满足我们对消息&lt;strong&gt;真实性、完整性与不可否认性&lt;/strong&gt;的需求，因此通常我们会将对称加密算法跟其他算法组合成一个「&lt;strong&gt;对称加密方案&lt;/strong&gt;」来使用，这种多个密码学算法组成的「加密方案」能同时保证数据的安全性、真实性、完整性与不可否认性。&lt;/p&gt;&lt;p&gt;一个&lt;strong&gt;分组加密方案&lt;/strong&gt;通常会包含如下几种算法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;将密码转换为密钥的&lt;strong&gt;密钥派生算法 KDF&lt;/strong&gt;（如 Scrypt 或 Argon2）：通过使用 KDF，加密方案可以允许用户使用字符密码作为「Shared Secret Key」，并使密码的破解变得困难和缓慢&lt;/li&gt;&lt;li&gt;&lt;strong&gt;分组密码工作模式&lt;/strong&gt;（用于将分组密码转换为流密码，如 CBC 或 CTR）&#43; &lt;strong&gt;消息填充算法&lt;/strong&gt;（如 PKCS7）：分组密码算法（如 AES）需要借助这两种算法，才能加密任意大小的数据&lt;/li&gt;&lt;li&gt;&lt;strong&gt;分组密码算法&lt;/strong&gt;（如 AES）：使用密钥安全地加密固定长度的数据块&lt;ul&gt;&lt;li&gt;大多数流行的对称加密算法，都是分组密码算法&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;消息认证算法&lt;/strong&gt;（如HMAC）：用于验证消息的真实性、完整性、不可否认性&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;而一个&lt;strong&gt;流密码加密方案&lt;/strong&gt;本身就能加密任意长度的数据，因此不需要「分组密码模式」与「消息填充算法」。&lt;/p&gt;&lt;p&gt;如 AES-256-CTR-HMAC-SHA256 就表示一个使用 AES-256 与 Counter 分组模式进行加密，使用 HMAC-SHA256 进行消息认证的加密方案。其他流行的对称加密方案还有 ChaCha20-Poly1305 和 AES-128-GCM 等，其中 ChaCha20-Poly130 是一个流密码加密方案。我们会在后面单独介绍这两种加密方案。&lt;/p&gt;&lt;h2 id=&#34;三分组密码工作模式&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%89%e5%88%86%e7%bb%84%e5%af%86%e7%a0%81%e5%b7%a5%e4%bd%9c%e6%a8%a1%e5%bc%8f&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;三、分组密码工作模式&lt;/h2&gt;&lt;p&gt;前面简单介绍了「&lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;&lt;strong&gt;分组密码工作模式&lt;/strong&gt;&lt;/a&gt;」可以将「分组密码算法」转换为「流密码算法」，从而实现加密任意长度的数据，这里主要就具体介绍下这个分组密码工作模式（下文简称为「&lt;strong&gt;分组模式&lt;/strong&gt;」或者「&lt;strong&gt;XXX 模式&lt;/strong&gt;」）。&lt;/p&gt;&lt;p&gt;加密方案的名称中就带有具体的「分组模式」名称，如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;AES-256-GCM&lt;/strong&gt; - 具有 256 位加密密钥和 GCM 分组模式的 AES 密码&lt;/li&gt;&lt;li&gt;&lt;strong&gt;AES-128-CTR&lt;/strong&gt; - 具有 128 位加密密钥和 CTR 分组模式的 AES 密码&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Serpent-128-CBC&lt;/strong&gt; - 具有 128 位加密密钥和 CBC 分组模式的 Serpent 密码&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;「分组密码工作模式」背后的主要思想是把明文分成多个长度固定的组，再在这些分组上重复应用分组密码算法进行加密/解密，以实现安全地加密/解密任意长度的数据。&lt;/p&gt;&lt;p&gt;某些分组模式（如 CBC）要求将输入拆分为分组，并使用填充算法（例如添加特殊填充字符）将最末尾的分组填充到块大小。也有些分组模式（如 CTR、CFB、OFB、CCM、EAX 和 GCM）根本不需要填充，因为它们在每个步骤中，都直接在明文部分和内部密码状态之间执行异或（XOR）运算.&lt;/p&gt;&lt;p&gt;使用「分组模式」加密大量数据的流程基本如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;初始化加密算法状态（使用加密密钥 &#43; 初始向量 IV）&lt;/li&gt;&lt;li&gt;加密数据的第一个分组&lt;/li&gt;&lt;li&gt;使用加密密钥和其他参数转换加密算法的当前状态&lt;/li&gt;&lt;li&gt;加密下一个分组&lt;/li&gt;&lt;li&gt;再次转换加密状态&lt;/li&gt;&lt;li&gt;再加密下一分组&lt;/li&gt;&lt;li&gt;依此类推，直到处理完所有输入数据&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;解密的流程跟加密完全类似：先初始化算法，然后依次解密所有分组，中间可能会涉及到加密状态的转换。&lt;/p&gt;&lt;p&gt;下面我们来具体介绍下 CTR 与 GCM 两个常见的分组模式。&lt;/p&gt;&lt;h3 id=&#34;0-初始向量-iv&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#0-%e5%88%9d%e5%a7%8b%e5%90%91%e9%87%8f-iv&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;0. 初始向量 IV&lt;/h3&gt;&lt;p&gt;介绍具体的分组模式前，需要先了解下&lt;strong&gt;初始向量 IV&lt;/strong&gt;（Initialization Vector）这个概念，它有时也被称作 Salt 或者 Nonce。初始向量 IV 通常是一个随机数，主要作用是往密文中添加随机性，使同样的明文被多次加密也会产生不同的密文，从而确保密文的不可预测性。&lt;/p&gt;&lt;p&gt;IV 的大小应与密码块大小相同，例如 AES、Serpent 和 Camellia 都只支持 128 位密码块，那么它们需要的 IV 也必须也 128 位。&lt;/p&gt;&lt;p&gt;IV 通常无需保密，但是应当足够随机（无法预测），而且不允许重用，应该对每条加密消息使用随机且不可预测的 IV。&lt;/p&gt;&lt;p&gt;一个常见错误是使用相同的对称密钥和&lt;strong&gt;相同的 IV&lt;/strong&gt; 加密多条消息，这使得针对大多数分组模式的各种加密攻击成为可能。&lt;/p&gt;&lt;h3 id=&#34;counter_mode&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#counter_mode&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. CTR (Counter) 分组模式&lt;/h3&gt;&lt;blockquote&gt;&lt;p&gt;参考文档: &lt;a href=&#34;https://csrc.nist.gov/publications/detail/sp/800-38a/final&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://csrc.nist.gov/publications/detail/sp/800-38a/final&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;下图说明了「CTR 分组工作模式」的加密解密流程，基本上就是将明文/密文拆分成一个个长度固定的分组，然后使用一定的算法进行加密与解密：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-6-symmetric-key-ciphers/CTR_encryption.svg&#34;/&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-6-symmetric-key-ciphers/CTR_decryption.svg&#34;/&gt;&lt;/figure&gt;&lt;p&gt;可以看到两图中左边的第一个步骤，涉及到三个参数：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;Nonce&lt;/code&gt;，初始向量 IV 的别名，前面已经介绍过了。&lt;/li&gt;&lt;li&gt;&lt;code&gt;Counter&lt;/code&gt;: 一个计数器，最常用的 Counter 实现是「从 0 开始，每次计算都自增 1」&lt;/li&gt;&lt;li&gt;&lt;code&gt;Key&lt;/code&gt;: 对称加密的密钥&lt;/li&gt;&lt;li&gt;&lt;code&gt;Plaintext&lt;/code&gt;: 明文的一个分组。除了最后一个分组外，其他分组的长度应该跟 &lt;code&gt;Key&lt;/code&gt; 相同&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;CTR 模式加解密的算法使用公式来表示如下：&lt;/p&gt;&lt;p&gt;$$\begin{alignedat}{2}C_i &amp;amp;= P_i \oplus O_i, \ &amp;amp;\text{for } i &amp;amp;= 1, 2 &amp;hellip; n-1 \\P_i &amp;amp;= C_i \oplus O_i, \ &amp;amp;\text{for } i &amp;amp;= 1, 2 &amp;hellip; n-1 \\O_i &amp;amp;= \text{CIPH}_{key}(\text{Nonce} &#43; I_i), \ &amp;amp;\text{for } i &amp;amp;= 1, 2 &amp;hellip; n-1\end{alignedat}$$&lt;/p&gt;&lt;p&gt;公式的符号说明如下&lt;/p&gt;&lt;ul&gt;&lt;li&gt;$C_i$ 表示密文的第 $i$ 个分组&lt;/li&gt;&lt;li&gt;$P_i$ 表示明文的第 $i$ 个 分组&lt;/li&gt;&lt;li&gt;$O_i$ 是一个中间量，第三个公式是它的计算方法&lt;/li&gt;&lt;li&gt;$I_i$ 表示计数器返回的第 $i$ 个值，其长度应与分组的长度相同&lt;/li&gt;&lt;li&gt;$\text{CIPH}_{key}$ 表示使用密钥 $key$ 的对称加密算法&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上面的公式只描述了 $ 0 \ge i \le n-1$ 的场景，最后一个分组  $i = n$ 要特殊一些——它的长度可能比 &lt;code&gt;Key&lt;/code&gt; 要短。CTR 模式加解密这最后这个分组时，会直接忽略掉 $O_n$ 末尾多余的 bytes.这种处理方式使得 CTR 模式不需要使用填充算法对最后一个分组进行填充，而且还使密文跟明文的长度完全一致。我们假设最后一个分组的长度为 $u$，它的加解密算法描述如下（$MSB_u(O_n)$ 表示取 $O_n$ 的 u 个最高有效位）：&lt;/p&gt;&lt;p&gt;$$\begin{alignedat}{2}C_{n} &amp;amp;= P_{n} \oplus {MSB_u}(O_n) \\P_{n} &amp;amp;= C_{n} \oplus {MSB_u}(O_n)\\O_n &amp;amp;= \text{CIPH}_{key}(\text{Nonce} &#43; I_n)\end{alignedat}$$&lt;/p&gt;&lt;p&gt;可以看到，因为异或 XOR 的对称性，加密跟解密的算法是完全相同的，直接 XOR $O_i$ 即可。&lt;/p&gt;&lt;p&gt;Python 中最流行的密码学库是 &lt;a href=&#34;https://github.com/pyca/cryptography&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;cryptography&lt;/a&gt;，&lt;code&gt;requests&lt;/code&gt; 的底层曾经就使用了它（新版本已经换成使用标准库 ssl 了），下面我们使用这个库来演示下 AES-256-CTR 算法：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives.ciphers&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;algorithms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;this is a test message, hahahahahaha~&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用 32bytes 的 key，即使用算法 AES-256-CTR&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# key =&amp;gt; b&amp;#39;\x96\xec.\xc7\xd5\x1b/5\xa1\x10s\x9d\xd5\x10z\xdc\x90\xb5\x1cm&amp;#34;&amp;gt;x\xfd \xd5\xc5\xaf\x19\xd1Z\xbb&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# AES 算法的 block 大小是固定的 128bits，即 16 bytes, IV 长度需要与 block 一致&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# iv =&amp;gt; b&amp;#39;\x88[\xc9\n`\xe4\xc2^\xaf\xdc\x1e\xfd.c&amp;gt;=&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 发送方加密数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 构建 AES-256-CTR 的 cipher，然后加密数据，得到密文&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;algorithms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CTR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ciphertext =&amp;gt; b&amp;#39;\x9b6(\x1d\xfd\xde\x96S\x8b\x8f\x90\xc5}ou\x9e\xb1\xbd\x9af\xb8\xdc\xec\xbf\xa3&amp;#34;\x18^\xac\x14\xc8s2*\x1a\xcf\x1d&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 发送方将 iv &#43; ciphertext 发送给接收方&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. 接收方解密数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 接收方使用自己的 key &#43; 接收到的 iv，构建 cipher，然后解密出原始数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;algorithms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CTR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;从上面的算法描述能感觉到，CTR 算法还蛮简单的。下面我使用 Python 写一个能够 work 的 CTR 实现：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;xor_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;Returns a new byte array with the elements xor&amp;#39;ed.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;       if len(a) != len(b), extra parts are discard.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inc_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34; Returns a new byte array with the value increment by 1 &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;reversed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;split_blocks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;require_padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    Split `message` with fixed length `block_size`&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;require_padding&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;encrypt_ctr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block_cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    Encrypts `plaintext` using CTR mode with the given nounce/IV.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;blocks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nonce&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plaintext_block&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;split_blocks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;require_padding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# CTR mode encrypt: plaintext_block XOR encrypt(nonce)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block_cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nonce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;block&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xor_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plaintext_block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# extra parts of `o` are discard in this step&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;blocks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;nonce&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inc_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nonce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blocks&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 加密与解密的算法完全一致&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;decrypt_ctr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encrypt_ctr&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;接下来验证下算法的正确性：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Python 官方库未提供 AES 实现，因此需要先装下这个库：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install pyaes==1.6.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pyaes&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# AES-256-CTR - plaintext key 都与前面的测试代码完全一致&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;this is a test message, hahahahahaha~&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x96\xec&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xc7\xd5\x1b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/5&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xa1\x10&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x9d\xd5\x10&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xdc\x90\xb5\x1c&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;m&amp;#34;&amp;gt;x&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xfd&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xd5\xc5\xaf\x19\xd1&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xbb&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 发送方加密数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 首先生成一个随机 IV，为了对比，这里使用前面生成好的数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x88&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xc9\n&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xe4\xc2&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xaf\xdc\x1e\xfd&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.c&amp;gt;=&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;aes_cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encrypt_ctr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aes_cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ciphertext =&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 输出应该与前面用 cryptography 计算出来的完全一致&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ciphertext =&amp;gt; b&amp;#39;\x9b6(\x1d\xfd\xde\x96S\x8b\x8f\x90\xc5}ou\x9e\xb1\xbd\x9af\xb8\xdc\xec\xbf\xa3&amp;#34;\x18^\xac\x14\xc8s2*\x1a\xcf\x1d&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 发送方将 ciphertext &#43; iv 发送给接收方&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. 接收方使用自己的 key 解密数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;aes_cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;decrypted_bytes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decrypt_ctr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aes_cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;decrypted_bytes =&amp;gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decrypted_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# decrypted_bytes =&amp;gt; b&amp;#34;this is a test message, hahahahahaha~&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&#34;2-gcm-galoiscounter-分组模式&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-gcm-galoiscounter-%e5%88%86%e7%bb%84%e6%a8%a1%e5%bc%8f&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. GCM (Galois/Counter) 分组模式&lt;/h3&gt;&lt;p&gt;GCM (Galois/Counter) 模式在 CTR 模式的基础上，添加了消息认证的功能，而且同时还具有与 CTR 模式相同的并行计算能力。因此相比 CTR 模式，GCM 不仅速度一样快，还能额外提供对消息完整性、真实性的验证能力。&lt;/p&gt;&lt;p&gt;下图直观地解释了 GCM 块模式（Galois/Counter 模式）的工作原理：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-6-symmetric-key-ciphers/gcm-galois_counter_mode.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;GCM 模式新增的 Auth Tag，计算起来会有些复杂，我们就直接略过了，对原理感兴趣的可以看下 &lt;a href=&#34;https://en.wikipedia.org/wiki/Galois/Counter_Mode&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Galois/Counter_Mode_wiki&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&#34;3-如何选用块模式&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-%e5%a6%82%e4%bd%95%e9%80%89%e7%94%a8%e5%9d%97%e6%a8%a1%e5%bc%8f&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. 如何选用块模式&lt;/h3&gt;&lt;p&gt;一些 Tips:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;常用的安全块模式是 CBC（密码块链接）、CTR（计数器）和 GCM（伽罗瓦/计数器模式），它们需要一个随机（不可预测的）初始化向量 (IV)，也称为 &lt;code&gt;nonce&lt;/code&gt; 或 &lt;code&gt;salt&lt;/code&gt;&lt;/li&gt;&lt;li&gt;「&lt;strong&gt;CTR&lt;/strong&gt;（Counter）」块模式在大多数情况下是一个不错的选择，因为它具有很强的安全性和并行处理能力，允许任意输入数据长度（无填充）。但它不提供身份验证和完整性，只提供加密&lt;/li&gt;&lt;li&gt;&lt;strong&gt;GCM&lt;/strong&gt;（Galois/Counter Mode）块模式继承了 CTR 模式的所有优点，并增加了加密消息认证能力。GCM 是在对称密码中实现认证加密的快速有效的方法，&lt;strong&gt;强烈推荐&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;CBC 模式在固定大小的分组上工作。因此，在将输入数据拆分为分组后，应使用填充算法使最后一个分组的长度一致。大多数应用程序使用 &lt;strong&gt;PKCS7&lt;/strong&gt; 填充方案或 ANSI X.923. 在某些情况下，CBC 阻塞模式可能容易受到「padding oracle」攻击，因此&lt;strong&gt;最好避免使用 CBC 模式&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;众所周知的不安全块模式是 &lt;strong&gt;ECB&lt;/strong&gt;（电子密码本），它将相等的输入块加密为相等的输出块（无加密扩散能力）。&lt;strong&gt;不要使用 ECB 块模式&lt;/strong&gt;！它可能会危及整个加密方案。&lt;/li&gt;&lt;li&gt;CBC、CTR 和 GCM 模式等大多数块都支持「随机访问」解密。比如在视频播放器中的任意时间偏移处寻找，播放加密的视频流&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;总之，建议使用 CTR (Counter) 或 GCM (Galois/Counter) 分组模式。其他的分组在某些情况下可能会有所帮助，但很可能有安全隐患，因此除非你很清楚自己在做什么，否则不要使用其他分组模式！&lt;/p&gt;&lt;p&gt;CTR 和 GCM 加密模式有很多优点：它们是安全的（目前没有已知的重大缺陷），可以加密任意长度的数据而无需填充，可以并行加密和解密分组（在多核 CPU 中）并可以直接解密任意一个密文分组。因此它们适用于加密加密钱包、文档和流视频（用户可以按时间查找）。GCM 还提供消息认证，是一般情况下密码块模式的推荐选择。&lt;/p&gt;&lt;p&gt;请注意，GCM、CTR 和其他分组模式会泄漏原始消息的长度，因为它们生成的密文长度与明文消息的长度相同。如果您想避免泄露原始明文长度，可以在加密前向明文添加一些随机字节（额外的填充数据），并在解密后将其删除。&lt;/p&gt;&lt;h2 id=&#34;四对称加密算法与对称加密方案&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%9b%9b%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95%e4%b8%8e%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;四、对称加密算法与对称加密方案&lt;/h2&gt;&lt;p&gt;前面啰嗦了这么多，下面进入正题：对称加密算法&lt;/p&gt;&lt;h3 id=&#34;1-安全的对称加密算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e5%ae%89%e5%85%a8%e7%9a%84%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 安全的对称加密算法&lt;/h3&gt;&lt;p&gt;目前应用最广泛的对称加密算法，是 AES 跟 Salsa20 / ChaCha20 这两个系列。&lt;/p&gt;&lt;h4 id=&#34;1-aes-rijndael&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-aes-rijndael&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. AES (Rijndael)&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;wiki: &lt;a href=&#34;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://en.wikipedia.org/wiki/Advanced_Encryption_Standard&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;AES（高级加密标准，也称为 Rijndael）是现代 IT 行业中最流行和广泛使用的对称加密算法。AES 被证明是高度安全、快速且标准化的，到目前为止没有发现任何明显的弱点或攻击手段，而且几乎在所有平台上都得到了很好的支持。 AES 是 128 位分组密码，使用 128、192 或 256 位密钥。它通常与分组模式组合成分组加密方案（如 AES-CTR 或 AES-GCM）以处理流数据。在大多数分组模式中，AES 还需要一个随机的 128 位初始向量 IV。&lt;/p&gt;&lt;p&gt;Rijndael (AES) 算法可免费用于任何用途，而且非常流行。很多站点都选择 AES 作为 TLS 协议的一部分，以实现安全通信。现代 CPU 硬件基本都在微处理器级别实现了 AES 指令以加速 AES 加密解密操作。&lt;/p&gt;&lt;p&gt;这里有一个纯 Python 的 AES 实现可供参考: &lt;a href=&#34;https://github.com/boppreh/aes/blob/master/aes.py&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;AES encryption in pure Python - boppreh&lt;/a&gt;&lt;/p&gt;&lt;p&gt;我们在前面的 &lt;a href=&#34;#counter_mode&#34; rel=&#34;&#34;&gt;CTR 分组模式&lt;/a&gt;中已经使用 Python 实践了 AES-256-CTR 加密方案。而实际上更常用的是支持集成身份验证加密（AEAD）的 AES-256-GCM 加密方案，它的优势我们前面已经介绍过了，这里我们使用 Python 演示下如何使用：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives.ciphers&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;algorithms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;associated_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Generate a random 96-bit IV.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Construct an AES-GCM Cipher object with the given key and a&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# randomly generated IV.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;algorithms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GCM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# associated_data will be authenticated but not encrypted,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# it must also be passed in on decryption.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authenticate_additional_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;associated_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Encrypt the plaintext and get the associated ciphertext.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# GCM does not require padding.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;associated_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Construct a Cipher object, with the key, iv, and additionally the&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# GCM tag used for authenticating the message.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;algorithms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GCM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# We put associated_data back in or the tag will fail to verify&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# when we finalize the decryptor.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;authenticate_additional_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;associated_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Decryption gets us the authenticated plaintext.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# If the tag does not match an InvalidTag exception will be raised.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 接下来进行算法验证&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;this is a paintext, hahahahahaha~&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x96\xec&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xc7\xd5\x1b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/5&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xa1\x10&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x9d\xd5\x10&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xdc\x90\xb5\x1c&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;m&amp;#34;&amp;gt;x&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xfd&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xd5\xc5\xaf\x19\xd1&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xbb&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;associated_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;authenticated but not encrypted payload&amp;#34;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 被用于消息认证的关联数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 发送方加密消息&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;associated_data&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 发送方将 associated_data iv ciphertext tag 打包发送给接收方&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. 接收方使用自己的 key 验证并解密数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;descrypt_text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;associated_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;tag&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;2-salsa20--chacha20&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-salsa20--chacha20&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. Salsa20 / ChaCha20&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;wiki: &lt;a href=&#34;https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Salsa20 及其改进的变体 ChaCha（ChaCha8、ChaCha12、ChaCha20）和 XSalsa20 是由密码学家 Daniel Bernstein 设计的现代、快速的对称流密码家族。 Salsa20 密码是对称流密码设计竞赛 eSTREAM（2004-2008）的决赛选手之一，它随后与相关的 BLAKE 哈希函数一起被广泛采用。 Salsa20 及其变体是免版税的，没有专利。&lt;/p&gt;&lt;p&gt;Salsa20 密码将 128 位或 256 位对称密钥 &#43; 随机生成的 64 位随机数（初始向量）和无限长度的数据流作为输入，并生成长度相同的加密数据流作为输出输入流。&lt;/p&gt;&lt;h5 id=&#34;chacha20-poly1305&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#chacha20-poly1305&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;ChaCha20-Poly1305&lt;/h5&gt;&lt;p&gt;Salsa20 应用最为广泛的是认证加密方案：&lt;a href=&#34;https://en.wikipedia.org/wiki/ChaCha20-Poly1305&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;ChaCha20-Poly1305&lt;/a&gt;，即组合使用 ChaCha20 与消息认证算法 Poly1305，它们都由密码学家 Bernstein 设计。&lt;/p&gt;&lt;p&gt;ChaCha20-Poly1305 已被证明足够安全，不过跟 GCM 一样它的安全性也依赖于足够随机的初始向量 IV，另外 ChaCha20-Poly1305 也不容易遭受计时攻击。&lt;/p&gt;&lt;p&gt;在没有硬件加速的情况下，ChaCha20 通常比 AES 要快得多（比如在旧的没有硬件加速的移动设备上），这是它最大的优势。&lt;/p&gt;&lt;p&gt;以下是一个 ChaCha20 的 Python 示例：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives.ciphers&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;algorithms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;this is a paintext, hahahahahaha~&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x96\xec&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xc7\xd5\x1b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;/5&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xa1\x10&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x9d\xd5\x10&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xdc\x90\xb5\x1c&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;m&amp;#34;&amp;gt;x&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xfd&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt; &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xd5\xc5\xaf\x19\xd1&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;Z&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\xbb&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;nonce&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;algorithm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;algorithms&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ChaCha20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nonce&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# ChaCha20 是一个流密码，mode 必须为 None&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;algorithm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 加密&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. 解密&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;decryptor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;3-其他流行的对称加密算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-%e5%85%b6%e4%bb%96%e6%b5%81%e8%a1%8c%e7%9a%84%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. 其他流行的对称加密算法&lt;/h4&gt;&lt;p&gt;还有一些其他的现代安全对称密码，它们的应用不如 AES 和 ChaCha20 这么广泛，但在程序员和信息安全社区中仍然很流行：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Serpent_%28cipher%29&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Serpent&lt;/a&gt; - 安全对称密钥分组密码（密钥大小：128、192 或 256 位），公众所有（Public Domain），完全免费&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Twofish&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Twofish&lt;/a&gt; - 安全对称密钥分组密码（密钥大小：128、192 或 256 位），公众所有（Public Domain），完全免费&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Camellia_%28cipher%29&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Camellia&lt;/a&gt; - 安全对称密钥分组密码（分组大小：128 位；密钥大小：128、192 和 256 位），专利算法，但完全免费&lt;ul&gt;&lt;li&gt;该算法由三菱和日本电信电话（NTT）在 2000 年共同发明&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/RC5&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RC5&lt;/a&gt; - 安全对称密钥分组密码（密钥大小：128 到 2040 位；分组大小：32、64 或 128 位；轮数：1 &amp;hellip; 255），短密钥不安全（56 位密钥已被暴力破解） , 专利在 2015 年到期，现在完全免费&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/RC6&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RC6&lt;/a&gt; - 安全对称密钥分组密码，类似于 RC5，但更复杂（密钥大小：128 到 2040 位；分组大小：32、64 或 128 位；轮数：1 &amp;hellip; 255），专利在 2017 年到期，现在完全免费&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;IDEA&lt;/a&gt; - 安全对称密钥分组密码（密钥大小：128 位），所有专利在均 2012 年前过期，完全免费&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CAST-256&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;CAST (CAST-128 / CAST5, CAST-256 / CAST6)&lt;/a&gt; - 安全对称密钥分组密码系列（密钥大小：40 &amp;hellip; 256 位），免版税&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/ARIA_%28cipher%29&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;ARIA&lt;/a&gt; - 安全对称密钥分组密码，类似于 AES（密钥大小：128、192 或 256 位），韩国官方标准，免费供公众使用&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SM4_%28cipher%29&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;SM4&lt;/a&gt; - 安全对称密钥分组密码，类似于 AES（密钥大小：128 位），中国官方标准，免费供公众使用&lt;ul&gt;&lt;li&gt;由中国国家密码管理局于 2012 年 3 月 21 日发布&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;具体的算法内容这里就不介绍了，有兴趣或者用得到的时候，可以再去仔细了解。&lt;/p&gt;&lt;h3 id=&#34;2-不安全的对称加密算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e4%b8%8d%e5%ae%89%e5%85%a8%e7%9a%84%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 不安全的对称加密算法&lt;/h3&gt;&lt;p&gt;如下这些对称加密算法曾经很流行，但现在被认为是不安全的或有争议的安全性，&lt;strong&gt;不建议再使用&lt;/strong&gt;：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;DES - 56 位密钥大小，可以被暴力破解&lt;/li&gt;&lt;li&gt;3DES（三重 DES, TDES）- 64 位密码，被认为不安全，已在 2017 年被 NIST 弃用.&lt;/li&gt;&lt;li&gt;RC2 - 64 位密码，被认为不安全&lt;/li&gt;&lt;li&gt;RC4 - 流密码，已被破解，网上存在大量它的破解资料&lt;/li&gt;&lt;li&gt;Blowfish - 旧的 64 位密码，已被破坏&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20161009174028/https://sweet32.info/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Sweet32: Birthday attacks on 64-bit block ciphers in TLS and OpenVPN&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;GOST - 俄罗斯 64 位分组密码，有争议的安全性，被认为有风险&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;对称认证加密算法-ae--aead&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%af%b9%e7%a7%b0%e8%ae%a4%e8%af%81%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95-ae--aead&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;对称认证加密算法 AE / AEAD&lt;/h3&gt;&lt;p&gt;我们在前面第三篇文章「MAC 与密钥派生函数 KDF」中介绍过 AE 认证加密及其变体 AEAD.&lt;/p&gt;&lt;p&gt;一些对称加密方案提供集成身份验证加密（AEAD），比如使用了 GCM 分组模式的加密方案 AES-GCM，而其他加密方案（如 AES-CBC 和 AES-CTR）自身不提供身份验证能力，需要额外添加。&lt;/p&gt;&lt;p&gt;最流行的认证加密（AEAD）方案有如下几个，我们在之前已经简单介绍过它们：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ChaCha20-Poly1305&lt;ul&gt;&lt;li&gt;具有集成 Poly1305 身份验证器的 ChaCha20 流密码（集成身份验证 AEAD 加密）&lt;/li&gt;&lt;li&gt;使用 256 位密钥和 96 位随机数（初始向量）&lt;/li&gt;&lt;li&gt;极高的性能&lt;/li&gt;&lt;li&gt;在硬件不支持 AES 加速指令时（如路由器、旧手机等硬件上），推荐使用此算法&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;AES-256-GCM&lt;ul&gt;&lt;li&gt;我们在前面的 GCM 模式一节，使用 Python 实现并验证了这个 AES-256-GCM 加密方案&lt;/li&gt;&lt;li&gt;使用 256 位密钥和 128 位随机数（初始向量）&lt;/li&gt;&lt;li&gt;较高的性能&lt;/li&gt;&lt;li&gt;在硬件支持 AES 加速时（如桌面、服务器等场景），更推荐使用此算法&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;AES-128-GCM&lt;ul&gt;&lt;li&gt;跟 AES-256-GCM 一样，区别在于它使用 128 位密钥，安全性弱于 ChaCha20-Poly1305 与 AES-256-GCM.&lt;/li&gt;&lt;li&gt;目前被广泛应用在 HTTPS 等多种加密场景下，但是正在慢慢被前面两种方案取代&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;今天的大多数应用程序应该优先选用上面这些加密方案进行对称加密，而不是自己造轮子。上述方案是高度安全的、经过验证的、经过良好测试的，并且大多数加密库都已经提供了高效的实现，可以说是开箱即用。&lt;/p&gt;&lt;p&gt;目前应用最广泛的对称加密方案应该是 AES-128-GCM，而 ChaCha20-Poly1305 因为其极高的性能，也越来越多地被应用在 TLS1.2、TLS1.3、QUIC/HTTP3、Wireguard、SSH 等协议中。&lt;/p&gt;&lt;h2 id=&#34;五aes-算法案例以太坊钱包加密&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%94aes-%e7%ae%97%e6%b3%95%e6%a1%88%e4%be%8b%e4%bb%a5%e5%a4%aa%e5%9d%8a%e9%92%b1%e5%8c%85%e5%8a%a0%e5%af%86&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;五、AES 算法案例：以太坊钱包加密&lt;/h2&gt;&lt;p&gt;在这一小节我们研究一个现实中的 AES 应用场景：以太坊区块链的标准加密钱包文件格式。我们将看到 AES-128-CTR 密码方案如何与 Scrypt 和 MAC 相结合，通过字符密码安全地实现经过身份验证的对称密钥加密。&lt;/p&gt;&lt;h4 id=&#34;以太坊-utc--json-钱包&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%bb%a5%e5%a4%aa%e5%9d%8a-utc--json-%e9%92%b1%e5%8c%85&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;以太坊 UTC / JSON 钱包&lt;/h4&gt;&lt;p&gt;在比特币和以太坊等区块链网络中，区块链资产持有者的私钥存储在称为&lt;strong&gt;加密钱包&lt;/strong&gt;的特殊密钥库中。通常，这些加密钱包是本地硬盘上的文件，并使用字符密码加密。&lt;/p&gt;&lt;p&gt;在以太坊区块链中，&lt;strong&gt;加密钱包&lt;/strong&gt;以一种特殊的加密格式在内部存储，称为「UTC / JSON 钱包（密钥库文件）」或「Web3 秘密存储定义」。这是一种加密钱包的文件格式，被广泛应用在 geth 和 Parity（以太坊的主要协议实现）、MyEtherWallet（流行的在线客户端以太坊钱包）、MetaMask（广泛使用的浏览器内以太坊钱包）、ethers.js 和 Nethereum 库以及许多其他与以太坊相关的技术和工具中。&lt;/p&gt;&lt;p&gt;以太坊 UTC/JSON 密钥库将加密的私钥、加密数据、加密算法及其参数保存为 JSON 文本文档。&lt;/p&gt;&lt;p&gt;UTC / JSON 钱包的一个示例如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;{&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;: &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;id&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;07a9f767-93c5-4842-9afd-b3b083659f04&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;address&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;aef8cad64d29fcc4ed07629b9e896ebc3160a8d0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;Crypto&amp;#34;: &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;ciphertext&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;99d0e66c67941a08690e48222a58843ef2481e110969325db7ff5284cd3d3093&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;cipherparams&amp;#34;: { &amp;#34;iv&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;7d7fabf8dee2e77f0d7e3ff3b965fc23&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;cipher&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;aes-128-ctr&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;kdf&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;scrypt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;kdfparams&amp;#34;: &lt;/span&gt;{&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;dklen&amp;#34;: &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;salt&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;85ad073989d461c72358ccaea3551f7ecb8e672503cb05c2ee80cfb6b922f4d4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;n&amp;#34;: &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8192&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;r&amp;#34;: &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;p&amp;#34;: &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;}&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;#34;mac&amp;#34;: &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;06dcf1cc4bffe1616fafe94a2a7087fd79df444756bb17c93af588c3ab02a913&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;}&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;上述 json 内容也是认证对称加密的一个典型示例，可以很容易分析出它的一些组成成分：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;kdf&lt;/code&gt;: 用于从字符密码派生出密钥的 KDF 算法名称，这里用的是 &lt;code&gt;scrypt&lt;/code&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;kdfparams&lt;/code&gt;: KDF 算法的参数，如迭代参数、盐等&amp;hellip;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;ciphertext&lt;/code&gt;: 钱包内容的密文，通常这就是一个被加密的 256 位私钥&lt;/li&gt;&lt;li&gt;&lt;code&gt;cipher&lt;/code&gt; &#43; &lt;code&gt;cipherparams&lt;/code&gt;: 对称加密算法的名称及参数，这里使用了 AES-128-CTR，并给出了初始向量 IV&lt;/li&gt;&lt;li&gt;&lt;code&gt;mac&lt;/code&gt;: 由 MAC 算法生成的消息认证码，被用于验证解密密码的正确性&lt;ul&gt;&lt;li&gt;以太坊使用截取派生密钥的一部分，拼接上完整密文，然后进行 keccak-256 哈希运算得到 MAC 值&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;其他钱包相关的信息&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;默认情况下，密钥派生函数是 scrypt 并使用的是弱 scrypt 参数（n=8192 成本因子，r=8 块大小，p=1 并行化），因此建议使用长而复杂的密码以避免钱包被暴力解密。&lt;/p&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;A complete overview of SSL/TLS and its cryptographic system&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/boppreh/aes/blob/master/aes.py&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;AES encryption in pure Python - boppreh&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Block_cipher_mode_of_operation_wiki&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Galois/Counter_Mode&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Galois/Counter_Mode_wiki&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">「转」且看有思想的年轻人</title><link href="https://thiscute.world/posts/the-thoughtful-youth/"/><id>https://thiscute.world/posts/the-thoughtful-youth/</id><author><name>ryan4yin</name></author><published>2022-03-04T22:58:00+08:00</published><updated>2022-03-04T22:58:00+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;原文：&lt;a href=&#34;https://www.zhihu.com/question/447184915/answer/1768006207&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;哪一刻你发现年轻人正在悄悄改变社会？ - 赦己&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;我的读后感：他的眼里有光！&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;之前见过一个特别厉害的面试者，让我觉得，老一辈真的是老一辈了，他放弃了一个月薪一万三，十三薪的工作，他的演讲让我记忆非常深刻，也使得面试官面面相觑。&lt;/p&gt;&lt;p&gt;这个岗位算是万人过独木桥，不仅海内的很多大学生在竞争，海外的很多大学生也在努力，真个过程是这样的：简历筛选-线上一面-线上hr二面-线下主管面试-总裁轮面试（压力轮）。&lt;/p&gt;&lt;p&gt;我们都到了最后的一轮面试,本来就是压力轮面试，但是那天不知道为什么总裁的脾气很暴躁，对他冷嘲热讽，说了一些比较难听的话，大概的意思就是“你还小，以后需要认真学，你们太嫩了”，其实总裁的意思非常明确了，会招他，但是他太嫩需要学很多东西，但是就是他这样大人看小屁孩的感觉惹怒了他，后面他的演讲就是十分高能了，我尽量原文复述。&lt;/p&gt;&lt;p&gt;「你坐在我前面会不会有点点害怕呢？你看看你身边有什么人可以给你参考吗？你没有，你只能战战兢兢如履薄冰，走错一步都是深渊。你知道你在我眼里是什么吗？你只是一个猎物，一个我追逐的、猎杀的的目标，其实你哪里来的自信呢？就凭你是这个公司的总裁吗？来自职级和制度的压力我一概不屑，反而觉得是黔驴技穷，小人做法，我不会服气，只是照做而已。&lt;/p&gt;&lt;p&gt;其实我也很享受被统治的感觉，上一个能统治我的人已经很久了，你知道那种纯粹的实力压服吗？我可以毫无保留地顺从他的任何意见，我从来不怀疑他的任何决定，哪怕行动后面失败了我也觉得他是对的。但是你呢？只是来自制度的威力，你的每一个决定都会遭到我的质疑。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;我最讨厌的就是别人和我说，我想让你去做点什么但是你能力还不够，简直瞎扯淡，其实是你能力不够，作为一个管理者，你甚至不知道怎么用我，我如何为你卖命啊&lt;/strong&gt;？&lt;/p&gt;&lt;p&gt;我渴望的是在一个稳定的环境默默耕耘，把坏的变成好的，但是前提是我们够团队，你呢？凭你作为一个过来人的经验吗？这些东西经过时间大家都会有的，你还有其他的吗？你真的有能力把我变成你的三头六臂吗？你真的控制得住我吗？」&lt;/p&gt;&lt;p&gt;复述其实没那么精彩了，他支着手目光瞪着总裁的眼睛的时候超级精彩，后面他去了一个对手小公司，相当于这边的市值来了，相差了十倍之多，但是七个月之后再见面已是兵刃交接，他成了六个人团队的小主管，耀武扬威地围着我们总部办公地盘下了一圈广告。&lt;/p&gt;]]></content></entry><entry><title type="html">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</title><link href="https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/"/><id>https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:05+08:00</published><updated>2022-03-13T15:26:00+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;本文主要翻译自 &lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者额外补充了 DHKE/ECDH 的代码示例，以及「PFS 完美前向保密协议 DHE/ECDHE」一节。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;《写给开发人员的实用密码学》系列文章目录：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-1/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（一）—— 概览&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-2-hash/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（二）—— 哈希函数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-3-key-derivation-function/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-4-secure-random-generators/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-6-symmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（六）—— 对称密钥加密算法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/about-tls-cert&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt;&lt;/li&gt;&lt;li&gt;待续&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;一前言&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80%e5%89%8d%e8%a8%80&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;在密码学中&lt;strong&gt;密钥交换&lt;/strong&gt;是一种协议，功能是在两方之间安全地交换加密密钥，其他任何人都无法获得密钥的副本。通常各种加密通讯协议的第一步都是密钥交换。密钥交换技术具体来说有两种方案：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;密钥协商：协议中的双方都参与了共享密钥的生成，两个代表算法是 Diffie-Hellman (DHKE) 和 Elliptic-Curve Diffie-Hellman (ECDH)&lt;/li&gt;&lt;li&gt;密钥传输：双方中其中一方生成出共享密钥，并通过此方案将共享密钥传输给另一方。密钥传输方案通常都通过公钥密码系统实现。比如在 RSA 密钥交换中，客户端使用它的私钥加密一个随机生成的会话密钥，然后将密文发送给服务端，服务端再使用它的公钥解密出会话密钥。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;密钥交换协议无时无刻不在数字世界中运行，在你连接 WiFi 时，或者使用 HTTPS 协议访问一个网站，都会执行密钥交换协议。密钥交换可以基于匿名的密钥协商协议如 DHKE，一个密码或预共享密钥，一个数字证书等等。有些通讯协议只在开始时交换一次密钥，而有些协议则会随着时间的推移不断地交换密钥。&lt;/p&gt;&lt;p&gt;认证密钥交换（AKE）是一种会同时认证相关方身份的密钥交换协议，比如个人 WiFi 通常就会使用 password-authenticated key agreement (PAKE)，而如果你连接的是公开 WiFi，则会使用匿名密钥交换协议。&lt;/p&gt;&lt;p&gt;目前有许多用于密钥交换的密码算法。其中一些使用公钥密码系统，而另一些则使用更简单的密钥交换方案（如 Diffie-Hellman 密钥交换）；其中有些算法涉及服务器身份验证，也有些涉及客户端身份验证；其中部分算法使用密码，另一部分使用数字证书或其他身份验证机制。下面列举一些知名的密钥交换算法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Diffie-Hellman Key Exchange (DHКЕ) ：传统的、应用最为广泛的密钥交换协议&lt;/li&gt;&lt;li&gt;椭圆曲线 Diffie-Hellman (ECDH)&lt;/li&gt;&lt;li&gt;RSA-OAEP 和 RSA-KEM（RSA 密钥传输）&lt;/li&gt;&lt;li&gt;PSK（预共享密钥）&lt;/li&gt;&lt;li&gt;SRP（安全远程密码协议）&lt;/li&gt;&lt;li&gt;FHMQV（Fully Hashed Menezes-Qu-Vanstone）&lt;/li&gt;&lt;li&gt;ECMQV（Ellictic-Curve Menezes-Qu-Vanstone）&lt;/li&gt;&lt;li&gt;CECPQ1（量子安全密钥协议）&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;二diffiehellman-密钥交换&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8cdiffiehellman-%e5%af%86%e9%92%a5%e4%ba%a4%e6%8d%a2&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、Diffie–Hellman 密钥交换&lt;/h2&gt;&lt;p&gt;迪菲-赫尔曼密钥交换（Diffie–Hellman Key Exchange）是一种安全协议，它可以让双方在完全没有对方任何预先信息的条件下通过不安全信道安全地协商出一个安全密钥，而且任何窃听者都无法得知密钥信息。这个密钥可以在后续的通讯中作为对称密钥来加密通讯内容。&lt;/p&gt;&lt;p&gt;DHKE 可以防范嗅探攻击（窃听），但是无法抵挡中间人攻击（中继）。&lt;/p&gt;&lt;p&gt;DHKE 有两种实现方案：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;传统的 DHKE 算法：使用离散对数实现&lt;/li&gt;&lt;li&gt;基于椭圆曲线密码学的 ECDH&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;为了理解 DHKE 如何实现在「大庭广众之下」安全地协商出密钥，我们首先使用色彩混合来形象地解释下它大致的思路。&lt;/p&gt;&lt;p&gt;跟编程语言的 Hello World 一样，密钥交换的解释通常会使用 Alice 跟 Bob 来作为通信双方。现在他俩想要在公开的信道上，协商出一个&lt;strong&gt;秘密色彩&lt;/strong&gt;出来，但是不希望其他任何人知道这个&lt;strong&gt;秘密色彩&lt;/strong&gt;。他们可以这样做：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-5-key-exchange/key-exchange-by-mixing-color.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;分步解释如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;首先 Alice 跟 Bob 沟通，确定一个&lt;strong&gt;初始的色彩&lt;/strong&gt;，比如黄色。这个沟通不需要保密。&lt;/li&gt;&lt;li&gt;然后，Alice 跟 Bob 分别偷偷地选择出一个自己的&lt;strong&gt;秘密色彩&lt;/strong&gt;，这个就得保密啦。&lt;/li&gt;&lt;li&gt;现在 Alice 跟 Bob，分别将&lt;strong&gt;初始色彩&lt;/strong&gt;跟自己选择的&lt;strong&gt;秘密色彩&lt;/strong&gt;混合，分别得到两个&lt;strong&gt;混合色彩&lt;/strong&gt;。&lt;/li&gt;&lt;li&gt;之后，Alice 跟 Bob 再回到公开信道上，交换双方的&lt;strong&gt;混合色彩&lt;/strong&gt;。&lt;ul&gt;&lt;li&gt;我们假设在仅知道&lt;strong&gt;初始色彩&lt;/strong&gt;跟&lt;strong&gt;混合色彩&lt;/strong&gt;的情况下，很难推导出被混合的&lt;strong&gt;秘密色彩&lt;/strong&gt;。这样第三方就猜不出 Bob 跟 Alice 分别选择了什么&lt;strong&gt;秘密色彩&lt;/strong&gt;了。&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;最后 Alice 跟 Bob 再分别将&lt;strong&gt;自己的秘密色彩&lt;/strong&gt;，跟&lt;strong&gt;对方的混合色彩&lt;/strong&gt;混合，就得到了最终的&lt;strong&gt;秘密色彩&lt;/strong&gt;。这个最终色彩只有 Alice 跟 Bob 知道，信道上的任何人都无法猜出来。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;DHKE 协议也是基于类似的原理，但是使用的是离散对数（discrete logarithms）跟模幂（modular exponentiations）而不是色彩混合。&lt;/p&gt;&lt;h2 id=&#34;三经典-dhke-协议&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%89%e7%bb%8f%e5%85%b8-dhke-%e5%8d%8f%e8%ae%ae&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;三、经典 DHKE 协议&lt;/h2&gt;&lt;h3 id=&#34;基础数学知识&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%9f%ba%e7%a1%80%e6%95%b0%e5%ad%a6%e7%9f%a5%e8%af%86&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;基础数学知识&lt;/h3&gt;&lt;p&gt;首先介绍下「模幂（modular exponentiations）」，它是指求 $g$ 的 $a$ 次幂模 $p$ 的值 $c$ 的过程，其中 $g$ $a$ $c$ 均为整数，公式如下：&lt;/p&gt;&lt;p&gt;$$g^a \mod p = c$$&lt;/p&gt;&lt;p&gt;而「离散对数（discrete logarithms）」，其实就是指模幂的逆运算，它使用如下公式表示：&lt;/p&gt;&lt;p&gt;$$Ind_{g}c \equiv a {\pmod {p}}$$&lt;/p&gt;&lt;p&gt;上述公式，即指在已知整数 $g$，质数 $p$，以及余数（p 的一个原根） $c$ 的情况下，求使前面的模幂等式成立的幂指数 $a$。&lt;/p&gt;&lt;p&gt;已知使用计算机计算上述「模幂」是非常快速的，但是在质数 $p$ 非常大的情况下，求「离散对数」却是非常难的，这就是「离散对数难题」。&lt;/p&gt;&lt;p&gt;然后为了理解 HDKE 的原理，我们还需要了解下模幂运算的一个性质：&lt;/p&gt;&lt;p&gt;$$g^{ab} \mod p = {g^a \mod p}^b \mod p$$&lt;/p&gt;&lt;p&gt;懂了上面这些基础数学知识，下面就开始介绍 HDKE 算法。&lt;/p&gt;&lt;h3 id=&#34;dhke-密钥交换流程&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#dhke-%e5%af%86%e9%92%a5%e4%ba%a4%e6%8d%a2%e6%b5%81%e7%a8%8b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;DHKE 密钥交换流程&lt;/h3&gt;&lt;p&gt;下面该轮到 Alice 跟 Bob 出场来介绍 DHKE 的过程了，先看图（下面&lt;span style=&#34;color:green&#34;&gt;绿色&lt;/span&gt;表示非秘密信息，&lt;span style=&#34;color:red&#34;&gt;&lt;strong&gt;红色&lt;/strong&gt;&lt;/span&gt;表示秘密信息）：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-5-key-exchange/diffle-hellman.webp&#34;/&gt;&lt;/figure&gt;&lt;ul&gt;&lt;li&gt;Alice 跟 Bob 协定使用两个比较独特的正整数 &lt;span style=&#34;color:green&#34;&gt;$p$&lt;/span&gt; 跟 &lt;span style=&#34;color:green&#34;&gt;$g$&lt;/span&gt;&lt;ul&gt;&lt;li&gt;假设 &lt;span style=&#34;color:green&#34;&gt;$p=23$, $g=5$&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Alice 选择一个秘密整数 &lt;span style=&#34;color:red&#34;&gt;$a$&lt;/span&gt;，计算 &lt;span style=&#34;color:green&#34;&gt;$A$&lt;/span&gt;$\ = g^a \mod p$ 并发送给 Bob&lt;ul&gt;&lt;li&gt;假设 &lt;span style=&#34;color:red&#34;&gt;$a=4$&lt;/span&gt;，则 &lt;span style=&#34;color:green&#34;&gt;$A$&lt;/span&gt;$\ = 5^4 \mod 23 = 4$&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Bob 也选择一个秘密整数 &lt;span style=&#34;color:red&#34;&gt;$b$&lt;/span&gt;，计算 &lt;span style=&#34;color:green&#34;&gt;$B$&lt;/span&gt;$\ = g^b \mod p$ 并发送给 Alice&lt;ul&gt;&lt;li&gt;假设 &lt;span style=&#34;color:red&#34;&gt;$b=3$&lt;/span&gt;，则 &lt;span style=&#34;color:green&#34;&gt;$B$&lt;/span&gt;$\ = 5^3 \mod 23 = 10$&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Alice 计算  $S_1 = B^a \mod p$&lt;ul&gt;&lt;li&gt;$S_1 = 10^4 \mod 23 = 18$&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;Bob 计算 $S_2 = A^b \mod p$&lt;ul&gt;&lt;li&gt;$S_2 = 4^3 \mod 23 = 18$&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;已知 $B^a \mod p = g^{ab} \mod p = A^b \mod p$，因此 &lt;span style=&#34;color:red&#34;&gt;$S_1 = S_2 = S$&lt;/span&gt;&lt;/li&gt;&lt;li&gt;这样 Alice 跟 Bob 就协商出了密钥 &lt;span style=&#34;color:red&#34;&gt;$S$&lt;/span&gt;&lt;/li&gt;&lt;li&gt;因为离散对数的计算非常难，任何窃听者都几乎不可能通过公开的 &lt;span style=&#34;color:green&#34;&gt;$p$ $g$ $A$ $B$&lt;/span&gt; 逆推出 &lt;span style=&#34;color:red&#34;&gt;$S$&lt;/span&gt; 的值&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;在最常见的 DHKE 实现中（&lt;a href=&#34;https://tools.ietf.org/html/rfc3526&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RFC3526&lt;/a&gt;），基数是 $g = 2$，模数 $p$ 是一个 1536 到 8192 比特的大素数。而整数 &lt;span style=&#34;color:green&#34;&gt;$A$ $B$&lt;/span&gt; 通常会使用非常大的数字（1024、2048 或 4096 比特甚至更大）以防范暴力破解。&lt;/p&gt;&lt;p&gt;DHKE 协议基于 Diffie-Hellman 问题的实际难度，这是计算机科学中众所周知的离散对数问题（DLP）的变体，目前还不存在有效的算法。&lt;/p&gt;&lt;p&gt;使用 Python 演示下大概是这样：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives.asymmetric&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dh&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 双方协商使用两个独特的正整数 g 与 p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## generator =&amp;gt; 即基数 g，通常使用 2, 有时也使用 5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## key_size =&amp;gt; 模数 p 的长度，通常使用 2048-3096 位（2048 位的安全性正在减弱）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2048&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parameter_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; 肯定是 2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; 一个 2048 位的整数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. Alice 生成自己的秘密整数 a 与公开整数 A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_priv_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_private_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alice_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alice_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. Bob 生成自己的秘密整数 b 与公开整数 B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_private_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 4. Alice 与 Bob 公开交换整数 A 跟 B（即各自的公钥）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 5. Alice 使用 a B 与 p 计算出共享密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 首先使用 B p g 构造出 bob 的公钥对象（实际上 g 不参与计算）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_pub_numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DHPublicNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_pub_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_pub_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 计算共享密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_shared_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alice_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bob_pub_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 6. Bob 使用 b A 与 p 计算出共享密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 首先使用 A p g 构造出 alice 的公钥对象（实际上 g 不参与计算）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_pub_numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DHPublicNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_pub_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alice_pub_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 计算共享密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_shared_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alice_pub_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 两者应该完全相等， Alice 与 Bob 完成第一次密钥交换&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_shared_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_shared_key&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 7. Alice 与 Bob 使用 shared_key 进行对称加密通讯&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&#34;四新一代-ecdh-协议&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%9b%9b%e6%96%b0%e4%b8%80%e4%bb%a3-ecdh-%e5%8d%8f%e8%ae%ae&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;四、新一代 ECDH 协议&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Elliptic-Curve Diffie-Hellman (ECDH)&lt;/a&gt; 是一种匿名密钥协商协议，它允许两方，每方都有一个椭圆曲线公钥-私钥对，它的功能也是让双方在完全没有对方任何预先信息的条件下通过不安全信道安全地协商出一个安全密钥。&lt;/p&gt;&lt;p&gt;ECDH 是经典 DHKE 协议的变体，其中模幂计算被椭圆曲线的乘法计算取代，以提高安全性。&lt;/p&gt;&lt;p&gt;ECDH 跟前面介绍的 DHKE 非常相似，只要你理解了椭圆曲线的数学原理，结合前面已经介绍了的 DHKE，基本上可以秒懂。我&lt;strong&gt;会在后面「非对称算法」一文中简单介绍椭圆曲线的数学原理&lt;/strong&gt;，不过这里也可以先提一下 ECDH 依赖的公式（其中 $a, b$ 为常数，$G$ 为椭圆曲线上的某一点的坐标 $(x, y)$）：&lt;/p&gt;&lt;p&gt;$$(a * G) * b = (b * G) * a$$&lt;/p&gt;&lt;p&gt;这个公式还是挺直观的吧，感觉小学生也能理解个大概。下面简单介绍下 ECDH 的流程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Alice 跟 Bob 协商好椭圆曲线的各项参数，以及基点 G，这些参数都是公开的。&lt;/li&gt;&lt;li&gt;Alice 生成一个随机的 ECC 密钥对（公钥：$alicePrivate * G$, 私钥: $alicePrivate$）&lt;/li&gt;&lt;li&gt;Bob 生成一个随机的 ECC 密钥对（公钥：$bobPrivate * G$, 私钥: $bobPrivate$）&lt;/li&gt;&lt;li&gt;两人通过不安全的信道交换公钥&lt;/li&gt;&lt;li&gt;Alice 将 Bob 的公钥乘上自己的私钥，得到共享密钥 $sharedKey = (bobPrivate * G) * alicePrivate$&lt;/li&gt;&lt;li&gt;Bob 将 Alice 的公钥乘上自己的私钥，得到共享密钥 $sharedKey = (alicePrivate * G) * bobPrivate$&lt;/li&gt;&lt;li&gt;因为前面提到的公式，Alice 与 Bob 计算出的共享密钥应该是相等的&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;这样两方就通过 ECDH 完成了密钥交换。&lt;/p&gt;&lt;p&gt;而 ECDH 的安全性，则由 ECDLP 问题提供保证。这个问题是说，「通过公开的 $kG$ 以及 $G$ 这两个参数，目前没有有效的手段能快速求解出 $k$ 的值。」&lt;/p&gt;&lt;p&gt;从上面的流程中能看到，公钥就是 ECDLP 中的 $kG$，另外 $G$ 也是公开的，而私钥就是 ECDLP 中的 $k$。因为 ECDLP 问题的存在，攻击者破解不出 Alice 跟 Bob 的私钥。&lt;/p&gt;&lt;p&gt;代码示例：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install tinyec  # ECC 曲线库&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;tinyec&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;registry&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;secrets&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pubKey&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;registry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_curve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;brainpoolP256r1&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alicePrivKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randbelow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alicePubKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alicePrivKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Alice public key:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alicePubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bobPrivKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randbelow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;field&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bobPubKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bobPrivKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;curve&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Bob public key:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bobPubKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Now exchange the public keys (e.g. through Internet)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;aliceSharedKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alicePrivKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bobPubKey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Alice shared key:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aliceSharedKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bobSharedKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bobPrivKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alicePubKey&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Bob shared key:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bobSharedKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Equal shared keys:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aliceSharedKey&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bobSharedKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&#34;五pfs-完美前向保密协议-dheecdhe&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%94pfs-%e5%ae%8c%e7%be%8e%e5%89%8d%e5%90%91%e4%bf%9d%e5%af%86%e5%8d%8f%e8%ae%ae-dheecdhe&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;五、PFS 完美前向保密协议 DHE/ECDHE&lt;/h2&gt;&lt;p&gt;前面介绍的经典 DHKE 与 ECDH 协议流程，都是在最开始时交换一次密钥，之后就一直使用该密钥通讯。因此如果密钥被破解，整个会话的所有信息对攻击者而言就完全透明了。&lt;/p&gt;&lt;p&gt;为了进一步提高安全性，密码学家提出了「&lt;a href=&#34;https://en.wikipedia.org/wiki/Forward_secrecy&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;&lt;strong&gt;完全前向保密&lt;/strong&gt;（Perfect Forward Secrecy，PFS）&lt;/a&gt;」的概念，并在 DHKE 与 ECDH 的基础上提出了支持 PFS 的 DHE/ECDHE 协议（末尾的 &lt;code&gt;E&lt;/code&gt; 是 &lt;code&gt;ephemeral&lt;/code&gt; 的缩写，即指所有的共享密钥都是临时的）。&lt;/p&gt;&lt;p&gt;完全前向保密是指长期使用的主密钥泄漏不会导致过去的会话密钥泄漏，从而保护过去进行的通讯不受密码或密钥在未来暴露的威胁。&lt;/p&gt;&lt;p&gt;下面使用 Python 演示下 DHE 协议的流程（ECDHE 的流程也完全类似）：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;76&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;77&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;78&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashes&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives.asymmetric&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dh&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 1. 双方协商使用两个独特的正整数 g 与 p&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## generator =&amp;gt; 即基数 g，通常使用 2, 有时也使用 5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## key_size =&amp;gt; 模数 p 的长度，通常使用 2048-3096 位（2048 位的安全性正在减弱）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;params&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key_size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2048&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parameter_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; 肯定是 2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# =&amp;gt; 一个 2048 位的整数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2. Alice 生成自己的秘密整数 a 与公开整数 A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_priv_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_private_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alice_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alice_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 3. Bob 生成自己的秘密整数 b 与公开整数 B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;params&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_private_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 4. Alice 与 Bob 公开交换整数 A 跟 B（即各自的公钥）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 5. Alice 使用 a B 与 p 计算出共享密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 首先使用 B p g 构造出 bob 的公钥对象（实际上 g 不参与计算）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_pub_numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DHPublicNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_pub_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_pub_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 计算共享密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_shared_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alice_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bob_pub_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 6. Bob 使用 b A 与 p 计算出共享密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 首先使用 A p g 构造出 alice 的公钥对象（实际上 g 不参与计算）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_pub_numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DHPublicNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_pub_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alice_pub_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 计算共享密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_shared_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;alice_pub_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 上面的流程跟经典 DHKE 完全一致，代码也是从前面 Copy 下来的&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 但是从这里开始，进入 DHE 协议补充的部分&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;shared_key_1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_shared_key&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 第一个共享密钥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 7. 假设 Bob 现在要发送消息 M_b_1 给 Alice&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 首先 Bob 使用对称加密算法加密消息 M_b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;M_b_1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello Alice, I&amp;#39;m bob~&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;C_b_1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Encrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;M_b_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_key_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Encrypt 是某种对称加密方案的加密算法，如 AES-256-CTR-HMAC-SHA-256&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 然后 Bob 需要生成一个新的公私钥 b_2 与 B_2（注意 g 与 p 两个参数是不变的）&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_priv_key_2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_private_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;b_2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;B_2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_priv_key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;private_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_numbers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b_2&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_2&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;=}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 8. Bob 将 C_b_1 与 B_2 一起发送给 Alice&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 9. Alice 首先解密数据 C_b_1 得到原始消息 M_b_1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;assert&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;M_b_1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Decrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C_b_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_key_1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Dncrypt 是某种对称加密方案的解密算法，如 AES-256-CTR-HMAC-SHA-256&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 然后 Alice 也生成新的公私钥 a_2 与 A_2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;alice_priv_key_2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;generate_private_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Alice 使用 a_2 B_2 与 p 计算出新的共享密钥 shared_key_2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_pub_numbers_2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dh&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DHPublicNumbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;B_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;param_numbers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bob_pub_key_2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bob_pub_numbers_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;public_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;shared_key_2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;alice_priv_key_2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exchange&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bob_pub_key_2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 10. Alice 回复 Bob 消息时，使用新共享密钥 shared_key_2 加密消息得到 C_a_1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 然后将密文 C_a_1 与 A_2 一起发送给 Bob&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 11. Bob 使用 b_2 A_2 与 p 计算出共享密钥 shared_key_2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 然后再使用 shared_key_2 解密数据&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Bob 在下次发送消息时，会生成新的 b_3 与 B_3，将 B_3 随密文一起发送&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 依次类推&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;通过上面的代码描述我们应该能理解到，&lt;strong&gt;Alice 与 Bob 每次交换数据，实际上都会生成新的临时共享密钥&lt;/strong&gt;，公钥密钥在每次数据交换时都会更新。即使攻击者破解了花费了很大的代价破解了其中某一个临时共享密钥 &lt;strong&gt;shared_key_k&lt;/strong&gt;（或者该密钥因为某种原因泄漏了），它也只能解密出其中某一次数据交换的信息 &lt;strong&gt;M_b_k&lt;/strong&gt;，其他所有的消息仍然是保密的，不受此次攻击（或泄漏）的影响。&lt;/p&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;A complete overview of SSL/TLS and its cryptographic system&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</title><link href="https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/"/><id>https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:04+08:00</published><updated>2022-03-01T17:15:04+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;本文主要翻译自 &lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;《写给开发人员的实用密码学》系列文章目录：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-1/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（一）—— 概览&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-2-hash/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（二）—— 哈希函数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-3-key-derivation-function/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-4-secure-random-generators/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-6-symmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（六）—— 对称密钥加密算法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/about-tls-cert&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt;&lt;/li&gt;&lt;li&gt;待续&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;一前言&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80%e5%89%8d%e8%a8%80&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;在密码学中，随机性（熵）扮演了一个非常重要的角色，许多密码学算法都要求使用一个不可预测的随机数，只有在生成的随机数不可预测时，这些算法才能保证其安全性。&lt;/p&gt;&lt;p&gt;比如 MAC 算法中的 key 就必须是一个不可预测的值，在这个条件下 MAC 值才是不可伪造的。&lt;/p&gt;&lt;p&gt;另外许多的高性能算法如快速排序、布隆过滤器、蒙特卡洛方法等，都依赖于随机性，如果随机性可以被预测，或者能够找到特定的输入值使这些算法变得特别慢，那黑客就能借此对服务进行 DDoS 攻击，以很小的成本达到让服务不可用的目的。&lt;/p&gt;&lt;h2 id=&#34;二prng-伪随机数生成器&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8cprng-%e4%bc%aa%e9%9a%8f%e6%9c%ba%e6%95%b0%e7%94%9f%e6%88%90%e5%99%a8&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、PRNG 伪随机数生成器&lt;/h2&gt;&lt;p&gt;Pseudo-Random Number Generators(PRNG) 是一种数字序列的生成算法，它生成出的数字序列的统计学属性跟真正的随机数序列非常相似，但它生成的伪随机数序列并不是真正的随机数序列！因为该序列完全依赖于提供给 PRNG 的初始值，这个值被称为 PRNG 的种子。&lt;/p&gt;&lt;p&gt;算法流程如下，算法的每次迭代都生成出一个新的伪随机数：&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-4-secure-random-generators/pseudorandom-number-generators.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;如果输入的初始种子是相同的，PRNG 总是会生成出相同的伪随机数序列，因此 PRNG 也被称为 Deterministic Random Bit Generator (DRBG)，即确定性随机比特生成器。&lt;/p&gt;&lt;p&gt;实际上目前也有所谓的「硬件随机数生成器 TRNG」能生成出真正的随机数，但是因为 PRNG 的高速、低成本、可复现等原因，它仍然被大量使用在现代软件开发中。&lt;/p&gt;&lt;p&gt;PRNG 可用于从一个很小的初始随机性（熵）生成出大量的伪随机性，这被称做「拉伸（Stretching）」。&lt;/p&gt;&lt;p&gt;PRNG 被广泛应用在前面提到的各种依赖随机性的高性能算法以及密码学算法中。&lt;/p&gt;&lt;h3 id=&#34;prng-的实现&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#prng-%e7%9a%84%e5%ae%9e%e7%8e%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;PRNG 的实现&lt;/h3&gt;&lt;p&gt;我们在上一篇文章的「MAC 的应用」一节中提到，一个最简单的 PRNG 可以直接使用 MAC 算法实现，用 Python 实现如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hmac&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hashlib&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;random_number_generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_num&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seed&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hmac&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;    &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 这里取余实际上是压缩了信息，某种程度上说，这可以保证内部的真实状态 state 不被逆向出来&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;byteorder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;big&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;max_num&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 测试下，计算 20 个 100 以内的随机数&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;random_number_generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;abc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; [71, 41, 52, 18, 51, 14, 58, 30, 70, 20, 59, 93, 3, 10, 81, 63, 48, 67, 18, 36]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&#34;三随机性---熵&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%89%e9%9a%8f%e6%9c%ba%e6%80%a7---%e7%86%b5&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;三、随机性 - 熵&lt;/h2&gt;&lt;p&gt;如果初始的 PRNG 种子是完全不可预测的，PRNG 就能保证整个随机序列都不可预测。&lt;/p&gt;&lt;p&gt;因此在 PRNG 中，生成出一个足够随机的种子，就变得非常重要了。&lt;/p&gt;&lt;p&gt;一个最简单的方法，就是收集随机性。对于桌面电脑，随机性可以从鼠标的移动点击、按键事件、网络状况等随机输入来收集。这个事情是由操作系统在内核中处理的，内核会直接为应用程序提供随机数获取的 API，比如 Linux/MacOSX 的 &lt;code&gt;/dev/random&lt;/code&gt; 虚拟设备。&lt;/p&gt;&lt;p&gt;如果这个熵的生成有漏洞，就很可能造成严重的问题，一个现实事件就是&lt;a href=&#34;https://bitcoinmagazine.com/technical/critical-vulnerability-found-in-android-wallets-1376273924&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;安卓的 &lt;code&gt;java.security.SecureRandom&lt;/code&gt; 漏洞导致安卓用户的比特币钱包失窃&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;Python 的 &lt;code&gt;random&lt;/code&gt; 库的默认会使用当前时间作为初始 seed，这显然是不够安全的——黑客如果知道你运行程序的大概时间，就能通过遍历的方式暴力破解出你的随机数来！&lt;/p&gt;&lt;h2 id=&#34;四csprng-密码学安全随机数生成器&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%9b%9bcsprng-%e5%af%86%e7%a0%81%e5%ad%a6%e5%ae%89%e5%85%a8%e9%9a%8f%e6%9c%ba%e6%95%b0%e7%94%9f%e6%88%90%e5%99%a8&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;四、CSPRNG 密码学安全随机数生成器&lt;/h2&gt;&lt;p&gt;Cryptography Secure Random Number Generators(CSPRNG) 是一种适用于密码学领域的 PRNG，一个 PRNG 如果能够具备如下两个条件，它就是一个 CSPRNG:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;能通过「下一比特测试 next-bit test」：即使有人获知了该 PRNG 的 k 位，他也无法使用合理的资源预测第 k&#43;1 位的值&lt;/li&gt;&lt;li&gt;如果攻击者猜出了 PRNG 的内部状态或该状态因某种原因而泄漏，攻击者也无法重建出内部状态泄漏之前生成的所有随机数&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有许多的设计都被证明可以用于构造一个 CSPRNG:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;基于计数器(CTR)模式下的&lt;strong&gt;安全&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;分组密码&lt;/a&gt;&lt;/strong&gt;、&lt;strong&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B5%81%E5%AF%86%E7%A0%81&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;流密码&lt;/a&gt;&lt;strong&gt;或&lt;/strong&gt;安全散列函数&lt;/strong&gt;的 CSPRNG&lt;/li&gt;&lt;li&gt;基于数论设计的 CSPRNG，它依靠整数分解问题（IFP）、离散对数问题（DLP）或椭圆曲线离散对数问题（ECDLP）的高难度来确保安全性&lt;/li&gt;&lt;li&gt;CSPRNG 基于加密安全随机性的特殊设计，例如 Yarrow algorithm 和 Fortuna，这俩分别被用于 MacOS 和 FreeBSD.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;大多数的 CSPRNG 结合使用来自 OS 的熵与高质量的 PRNG，并且一旦系统生成了新的熵（这可能来自用户输入、磁盘  IO、系统中断、或者硬件 RNG），CSPRNG 会立即使用新的熵来作为 PRNG 新的种子。这种不断重置 PRNG 种子的行为，使随机数变得非常难以预测。&lt;/p&gt;&lt;h3 id=&#34;csprng-的用途&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#csprng-%e7%9a%84%e7%94%a8%e9%80%94&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;CSPRNG 的用途&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;加密程序：因为 OS 中熵的收集很缓慢，等待收集到足够多的熵再进行运算是不切实际的，因此很多的加密程序都使用 CSPRNG 来从系统的初始熵生成出足够多的伪随机熵。&lt;/li&gt;&lt;li&gt;其他需要安全随机数的场景 emmmm&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;如何在代码中使用-csprng&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%a6%82%e4%bd%95%e5%9c%a8%e4%bb%a3%e7%a0%81%e4%b8%ad%e4%bd%bf%e7%94%a8-csprng&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;如何在代码中使用 CSPRNG&lt;/h2&gt;&lt;p&gt;多数系统都内置了 CSPRNG 算法并提供了内核 API，Unix-like 系统都通过如下两个虚拟设备提供 CSPRNG:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;/dev/random&lt;/code&gt;（受限阻塞随机生成器）: 从这个设备中读取到的是内核熵池中已经收集好的熵，如果熵池空了，此设备会一直阻塞，直到收集到新的环境噪声。&lt;/li&gt;&lt;li&gt;&lt;code&gt;/dev/urandom&lt;/code&gt;（不受限非阻塞随机生成器）: 它可能会返回内核熵池中的熵，也可能返回使用「之前收集的熵 &#43; CSPRNG」计算出的安全伪随机数。它不会阻塞。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;编程语言的 CSPRNG 接口或库如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Java: &lt;code&gt;java.security.SecureRandom&lt;/code&gt;&lt;/li&gt;&lt;li&gt;Python: &lt;code&gt;secrets&lt;/code&gt; 库或者 &lt;code&gt;os.urandom()&lt;/code&gt;&lt;/li&gt;&lt;li&gt;C#: &lt;code&gt;System.Security.Cryptography.RandomNumberGenerator.Create()&lt;/code&gt;&lt;/li&gt;&lt;li&gt;JavaScript: 客户端可使用 &lt;code&gt;window.crypto.getRandomValues(Uint8Array)&lt;/code&gt;，服务端可使用 &lt;code&gt;crypto.randomBytes()&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;比如使用 Python 实现一个简单但足够安全的随机密码生成器：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;secrets&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;chars&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digits&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;your_custom_-content&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ascii_letters&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;random_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;生成随机字符串&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# 注意，这里不应该使用 random 库！而应该使用 secrets&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;secrets&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;choice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chars&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;random_string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; _rebBfgYs4OtkrPbYtnGmc4n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</title><link href="https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/"/><id>https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:03+08:00</published><updated>2022-03-01T17:15:03+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;本文主要翻译自 &lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者补充了 HMAC 的 Python 实现以及 scrypt 使用示例。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;《写给开发人员的实用密码学》系列文章目录：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-1/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（一）—— 概览&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-2-hash/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（二）—— 哈希函数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-3-key-derivation-function/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-4-secure-random-generators/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-6-symmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（六）—— 对称密钥加密算法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/about-tls-cert&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt;&lt;/li&gt;&lt;li&gt;待续&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;一mac-消息认证码&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80mac-%e6%b6%88%e6%81%af%e8%ae%a4%e8%af%81%e7%a0%81&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、MAC 消息认证码&lt;/h2&gt;&lt;p&gt;MAC 消息认证码，即 Message Authentication Code，是用于验证消息的一小段信息。换句话说，能用它确认消息的真实性——消息来自指定的发件人并且没有被篡改。&lt;/p&gt;&lt;p&gt;MAC 值通过允许验证者（也拥有密钥）检测消息内容的任何更改来保护消息的数据完整性及其真实性。&lt;/p&gt;&lt;p&gt;一个安全的 MAC 函数，跟加密哈希函数非常类似，也拥有如下特性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;快速&lt;/strong&gt;：计算速度要足够快&lt;/li&gt;&lt;li&gt;&lt;strong&gt;确定性&lt;/strong&gt;：对同样的消息跟密钥，应该总是产生同样的输出&lt;/li&gt;&lt;li&gt;&lt;strong&gt;难以分析&lt;/strong&gt;：对消息或密钥的任何微小改动，都应该使输出完全发生变化&lt;/li&gt;&lt;li&gt;&lt;strong&gt;不可逆&lt;/strong&gt;：从 MAC 值逆向演算出消息跟密钥应该是不可行的。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;无碰撞&lt;/strong&gt;：找到具有相同哈希的两条不同消息应该非常困难（或几乎不可能）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;但是 MAC 算法比加密哈希函数多一个输入值：密钥，因此也被称为 keyed hash functions，即「加密钥的哈希函数」。&lt;/p&gt;&lt;p&gt;如下 Python 代码使用 key 跟 消息计算出对应的 HMAC-SHA256 值：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hmac&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;binascii&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some msg&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;mac&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hmac&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HMAC-SHA256(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mac&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; HMAC-SHA256(b&amp;#39;key&amp;#39;, b&amp;#39;some msg&amp;#39;) = 32885b49c8a1009e6d66662f8462e7dd5df769a7b725d1d546574e6d5d6e76ad&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;HMAC 的算法实际上非常简单，我参考 &lt;a href=&#34;https://en.wikipedia.org/wiki/HMAC&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;wiki/HMAC&lt;/a&gt; 给出的伪码，编写了下面这个 Python 实现，没几行代码，但是完全 work：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;binascii&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;xor_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;zip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;my_hmac&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# hash =&amp;gt; (block_size, output_size)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 单位是 bytes，数据来源于 https://en.wikipedia.org/wiki/HMAC&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;hash_size_dict&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;md5&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha224&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha256&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# &amp;#34;sha512/224&amp;#34;: (128, 28),  # 这俩算法暂时不清楚在 hashlib 里叫啥名&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# &amp;#34;sha512/256&amp;#34;: (128, 32),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha_384&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha_512&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha3_224&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;144&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha3_256&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;136&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha3_384&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;104&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;48&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha3_512&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;72&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_name&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_size_dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;raise&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;ValueError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;unknown hash_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_size_dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hash_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;hash_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;getattr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# 确保 key 的长度为 block_size&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;block_sized_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;block_sized_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 用 hash 函数进行压缩&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;block_sized_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x00&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 末尾补 0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;o_key_pad&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xor_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block_sized_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x5c&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Outer padded key&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;i_key_pad&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xor_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;block_sized_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x36&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;block_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# Inner padded key&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o_key_pad&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hash_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i_key_pad&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&#43;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 下面验证下&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some msg&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;mac_&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;my_hmac&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;sha256&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HMAC-SHA256(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;, &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mac_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 输出跟标准库完全一致：&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; HMAC-SHA256(b&amp;#39;key&amp;#39;, b&amp;#39;some msg&amp;#39;) = 32885b49c8a1009e6d66662f8462e7dd5df769a7b725d1d546574e6d5d6e76ad&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 id=&#34;mac-与哈希函数数字签名的区别&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#mac-%e4%b8%8e%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0%e6%95%b0%e5%ad%97%e7%ad%be%e5%90%8d%e7%9a%84%e5%8c%ba%e5%88%ab&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;MAC 与哈希函数、数字签名的区别&lt;/h3&gt;&lt;p&gt;上一篇文章提到过，哈希函数只负责生成哈希值，不负责哈希值的可靠传递。&lt;/p&gt;&lt;p&gt;而数字签名呢，跟 MAC 非常相似，但是数字签名使用的是非对称加密系统，更复杂，计算速度也更慢。&lt;/p&gt;&lt;p&gt;MAC 的功能跟数字签名一致，都是验证消息的真实性（authenticity）、完整性（integrity）、不可否认性（non-repudiation），但是 MAC 使用哈希函数或者对称密码系统来做这件事情，速度要更快，算法也更简单。&lt;/p&gt;&lt;h3 id=&#34;mac-的应用&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#mac-%e7%9a%84%e5%ba%94%e7%94%a8&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;MAC 的应用&lt;/h3&gt;&lt;h4 id=&#34;1-验证消息的真实性完整性&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e9%aa%8c%e8%af%81%e6%b6%88%e6%81%af%e7%9a%84%e7%9c%9f%e5%ae%9e%e6%80%a7%e5%ae%8c%e6%95%b4%e6%80%a7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 验证消息的真实性、完整性&lt;/h4&gt;&lt;p&gt;这是最简单的一个应用场景，在通信双向都持有一个预共享密钥的前提下，通信时都附带上消息的 MAC 码。接收方也使用「收到的消息&#43;预共享密钥」计算出 MAC 码，如果跟收到的一致，就说明消息真实无误。&lt;/p&gt;&lt;p&gt;注意这种应用场景中，消息是不保密的！&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-3-key-derivation-function/mac-message-is-authentic.webp&#34;/&gt;&lt;/figure&gt;&lt;h4 id=&#34;2-ae-认证加密---authenticated-encryption&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-ae-%e8%ae%a4%e8%af%81%e5%8a%a0%e5%af%86---authenticated-encryption&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. AE 认证加密 - Authenticated encryption&lt;/h4&gt;&lt;p&gt;常用的加密方法只能保证数据的保密性，并不能保证数据的完整性。&lt;/p&gt;&lt;p&gt;而这里介绍的 MAC 算法，或者还未介绍的基于非对称加密的数字签名，都只能保证数据的真实性、完整性，不能保证数据被安全传输。&lt;/p&gt;&lt;p&gt;而认证加密，就是将加密算法与 MAC 算法结合使用的一种加密方案。&lt;/p&gt;&lt;p&gt;在确保 MAC 码「强不可伪造」的前提下，首先对数据进行加密，然后计算密文的 MAC 码，再同时传输密文与 MAC 码，就能同时保证数据的保密性、完整性、真实性，这种方法叫 Encrypt-then-MAC, 缩写做 EtM. 接收方在解密前先计算密文的 MAC 码与收到的对比，就能验证密文的完整性与真实性。&lt;/p&gt;&lt;p&gt;AE 有一种更安全的变体——&lt;strong&gt;带有关联数据的认证加密&lt;/strong&gt; (authenticated encryption with associated data，&lt;strong&gt;AEAD&lt;/strong&gt;)。AEAD 将「关联数据(Associated Data, AD)」——也称为「附加验证数据（Additional Authenticated Data, AAD）」——绑定到密文和它应该出现的上下文，以便可以检测和拒绝将有效密文“剪切并粘贴”到不同上下文的尝试。 AEAD 用于加密和未加密数据一起使用的场景（例如，在加密的网络协议中），并确保整个数据流经过身份验证和完整性保护。换句话说，AEAD 增加了检查某些内容的完整性和真实性的能力。&lt;/p&gt;&lt;p&gt;我们会在第六章「对称加密算法」中看到如何通过 Python 使用 AEAD 加密方案 AES-256-GCM.&lt;/p&gt;&lt;h4 id=&#34;3-基于-mac-的伪随机数生成器&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-%e5%9f%ba%e4%ba%8e-mac-%e7%9a%84%e4%bc%aa%e9%9a%8f%e6%9c%ba%e6%95%b0%e7%94%9f%e6%88%90%e5%99%a8&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. 基于 MAC 的伪随机数生成器&lt;/h4&gt;&lt;p&gt;MAC 码的另一个用途就是伪随机数生成函数，相比直接使用熵&#43;哈希函数的进行伪随机数计算，MAC 码因为多引入了一个变量 key，理论上它会更安全。&lt;/p&gt;&lt;p&gt;这种场景下，我们称 MAC 使用的密钥为 &lt;code&gt;salt&lt;/code&gt;，即盐。&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;next_seed = MAC(salt, seed)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&#34;二kdf-密钥派生函数&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8ckdf-%e5%af%86%e9%92%a5%e6%b4%be%e7%94%9f%e5%87%bd%e6%95%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、KDF 密钥派生函数&lt;/h2&gt;&lt;p&gt;我们都更喜欢使用密码来保护自己的数据而不是二进制的密钥，因为相比之下二进制密钥太难记忆了，字符形式的密码才是符合人类思维习惯的东西。&lt;/p&gt;&lt;p&gt;可对计算机而言就刚好相反了，现代密码学的很多算法都要求输入是一个大的数字，二进制的密钥就是这样一个大的数字。因此显然我们需要一个将字符密码（Password）转换成密钥（Key）的函数，这就是密钥派生函数 Key Derivation Function.&lt;/p&gt;&lt;p&gt;直接使用 SHA256 之类的加密哈希函数来生成密钥是不安全的，因为为了方便记忆，通常密码并不会很长，绝大多数人的密码长度估计都不超过 15 位。甚至很多人都在使用非常常见的弱密码，如 123456 admin 生日等等。这就导致如果直接使用 SHA256 之类的算法，许多密码将很容易被暴力破解、字典攻击、彩虹表攻击等手段猜测出来！&lt;/p&gt;&lt;p&gt;KDF 目前主要从如下三个维度提升 hash 碰撞难度：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;时间复杂度：对应 CPU/GPU 计算资源&lt;/li&gt;&lt;li&gt;空间复杂度：对应 Memory 内存资源&lt;/li&gt;&lt;li&gt;并行维度：使用无法分解的算法，锁定只允许单线程运算&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;主要手段是加盐，以及多次迭代。这种设计方法被称为「密钥拉伸 Key stretching」。&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-3-key-derivation-function/key-derivation-function.webp&#34;/&gt;&lt;/figure&gt;&lt;p&gt;因为它的独特属性，KDF 也被称作慢哈希算法。&lt;/p&gt;&lt;p&gt;目前比较著名的 KDF 算法主要有如下几个：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;PBKDF2：这是一个非常简单的加密 KDF 算法，目前已经不推荐使用。&lt;/li&gt;&lt;li&gt;Bcrypt：安全性在下降，用得越来越少了。不建议使用。&lt;/li&gt;&lt;li&gt;Scrypt：可以灵活地设定使用的内存大小，在 argon2 不可用时，可使用它。&lt;/li&gt;&lt;li&gt;Argon2：目前最强的密码 Hash 算法，在 2015 年赢得了密码 Hash 竞赛。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;如果你正在开发一个新的程序，需要使用到 KDF，建议选用 argon2/scrypt.&lt;/p&gt;&lt;p&gt;Python 中最流行的密码学库是 &lt;a href=&#34;https://github.com/pyca/cryptography&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;cryptography&lt;/a&gt;，&lt;code&gt;requests&lt;/code&gt; 的底层曾经就使用了它（新版本已经换成使用标准库 ssl 了），下面我们使用这个库来演示下 Scrypt 算法的使用：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pip install cryptography==36.0.1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;os&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;cryptography.hazmat.primitives.kdf.scrypt&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scrypt&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;salt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;urandom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# derive&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;kdf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;salt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;salt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kdf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;derive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my great password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# verify&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;kdf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;salt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;salt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;kdf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;verify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;my great password&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;A complete overview of SSL/TLS and its cryptographic system&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">写给开发人员的实用密码学（二）—— 哈希函数</title><link href="https://thiscute.world/posts/practical-cryptography-basics-2-hash/"/><id>https://thiscute.world/posts/practical-cryptography-basics-2-hash/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:01+08:00</published><updated>2022-03-01T17:15:01+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;本文主要翻译自 &lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;，笔者额外补充了「非加密哈希函数」的简单介绍。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;《写给开发人员的实用密码学》系列文章目录：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-1/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（一）—— 概览&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-2-hash/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（二）—— 哈希函数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-3-key-derivation-function/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-4-secure-random-generators/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-6-symmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（六）—— 对称密钥加密算法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/about-tls-cert&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt;&lt;/li&gt;&lt;li&gt;待续&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;一什么是哈希函数&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80%e4%bb%80%e4%b9%88%e6%98%af%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、什么是哈希函数&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;哈希函数&lt;/strong&gt;，或者叫&lt;strong&gt;散列函数&lt;/strong&gt;，是一种从任何一种数据中创建一个&lt;strong&gt;数字指纹&lt;/strong&gt;（也叫数字摘要）的方法，散列函数把数据压缩（或者放大）成一个长度固定的字符串。&lt;/p&gt;&lt;p&gt;哈希函数的输入空间（文本或者二进制数据）是无限大，但是输出空间（一个固定长度的摘要）却是有限的。将「无限」映射到「有限」，不可避免的会有概率不同的输入得到相同的输出，这种情况我们称为&lt;strong&gt;碰撞&lt;/strong&gt;（collision）。&lt;/p&gt;&lt;p&gt;一个简单的哈希函数是直接对输入数据/文本的字节求和。它会导致大量的碰撞，例如 hello 和 ehllo 将具有相同的哈希值。&lt;/p&gt;&lt;p&gt;更好的哈希函数可以使用这样的方案：它将第一个字节作为状态，然后转换状态（例如，将它乘以像 31 这样的素数），然后将下一个字节添加到状态，然后再次转换状态并添加下一个字节等。这样的操作可以显着降低碰撞概率并产生更均匀的分布。&lt;/p&gt;&lt;h2 id=&#34;二加密哈希函数&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8c%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、加密哈希函数&lt;/h2&gt;&lt;p&gt;加密哈希函数（也叫密码学哈希函数）是指一类有特殊属性的哈希函数。&lt;/p&gt;&lt;p&gt;一个好的「加密哈希函数」必须满足&lt;strong&gt;抗碰撞&lt;/strong&gt;（collision-resistant）和&lt;strong&gt;不可逆&lt;/strong&gt;（irreversible）这两个条件。抗碰撞是指通过统计学方法（彩虹表）很难或几乎不可能猜出哈希值对应的原始数据，而不可逆则是说攻击者很难或几乎不可能从算法层面通过哈希值逆向演算出原始数据。&lt;/p&gt;&lt;p&gt;具体而言，一个理想的&lt;strong&gt;加密哈希函数&lt;/strong&gt;，应当具有如下属性：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;快速&lt;/strong&gt;：计算速度要足够快&lt;/li&gt;&lt;li&gt;&lt;strong&gt;确定性&lt;/strong&gt;：对同样的输入，应该总是产生同样的输出&lt;/li&gt;&lt;li&gt;&lt;strong&gt;难以分析&lt;/strong&gt;：对输入的任何微小改动，都应该使输出完全发生变化&lt;/li&gt;&lt;li&gt;&lt;strong&gt;不可逆&lt;/strong&gt;：从其哈希值逆向演算出输入值应该是不可行的。这意味着没有比暴力破解更好的破解方法&lt;/li&gt;&lt;li&gt;&lt;strong&gt;无碰撞&lt;/strong&gt;：找到具有相同哈希值的两条不同消息应该非常困难（或几乎不可能）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;现代加密哈希函数（如 SHA2 和 SHA3）都具有上述几个属性，并被广泛应用在多个领域，各种现代编程语言和平台的标准库中基本都包含这些常用的哈希函数。&lt;/p&gt;&lt;h3 id=&#34;量子安全性&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e9%87%8f%e5%ad%90%e5%ae%89%e5%85%a8%e6%80%a7&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;量子安全性&lt;/h3&gt;&lt;p&gt;现代密码学哈希函数（如 SHA2, SHA3, BLAKE2）都被认为是量子安全的，无惧量子计算机的发展。&lt;/p&gt;&lt;h3 id=&#34;加密哈希函数的应用&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0%e7%9a%84%e5%ba%94%e7%94%a8&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;加密哈希函数的应用&lt;/h3&gt;&lt;h4 id=&#34;1-数据完整性校验&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e6%95%b0%e6%8d%ae%e5%ae%8c%e6%95%b4%e6%80%a7%e6%a0%a1%e9%aa%8c&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 数据完整性校验&lt;/h4&gt;&lt;p&gt;加密哈希函数被广泛用于文件完整性校验。如果你从网上下载的文件计算出的 SHA256 校验和（checksum）跟官方公布的一致，那就说明文件没有损坏。&lt;/p&gt;&lt;p&gt;但是哈希函数自身不能保证文件的真实性，目前来讲，真实性通常是 TLS 协议要保证的，它确保你在 openssl 网站上看到的「SHA256 校验和」真实无误（未被篡改）。&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-2-hash/openssl-sha256-checksum.webp&#34;/&gt;&lt;/figure&gt;&lt;blockquote&gt;&lt;p&gt;现代网络基本都很难遇到文件损坏的情况了，但是在古早的低速网络中，即使 TCP 跟底层协议已经有多种数据纠错手段，下载完成的文件仍然是有可能损坏的。这也是以前 rar 压缩格式很流行的原因之一—— rar 压缩文件拥有一定程度上的自我修复能力，传输过程中损坏少量数据，仍然能正常解压。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&#34;2-保存密码&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e4%bf%9d%e5%ad%98%e5%af%86%e7%a0%81&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 保存密码&lt;/h4&gt;&lt;p&gt;加密哈希函数还被用于密码的安全存储，现代系统使用专门设计的安全哈希算法计算用户密码的哈希摘要，保存到数据库中，这样能确保密码的安全性。除了用户自己，没有人清楚该密码的原始数据，即使数据库管理员也只能看到一个哈希摘要。&lt;/p&gt;&lt;figure&gt;&lt;img src=&#34;/images/practical-cryptography-basics-2-hash/sha512-password-hash.webp&#34;/&gt;&lt;/figure&gt;&lt;h4 id=&#34;3-生成唯一-id&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-%e7%94%9f%e6%88%90%e5%94%af%e4%b8%80-id&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. 生成唯一 ID&lt;/h4&gt;&lt;p&gt;加密哈希函数也被用于为文档或消息生成（绝大多数情况下）唯一的 ID，因此哈希值也被称为&lt;strong&gt;数字指纹&lt;/strong&gt;。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;注意这里说的是数字指纹，而非数字签名。数字签名是与下一篇文章介绍的「MAC」码比较类似的，用于验证消息的真实、完整、认证作者身份的一段数据。&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;加密哈希函数计算出的哈希值理论上确实有碰撞的概率，但是这个概率实在太小了，因此绝大多数系统（如 Git）都假设哈希函数是无碰撞的（collistion free）。&lt;/p&gt;&lt;p&gt;文档的哈希值可以被用于证明该文档的存在性，或者被当成一个索引，用于从存储系统中提取文档。&lt;/p&gt;&lt;p&gt;使用哈希值作为唯一 ID 的典型例子，Git 版本控制系统（如 &lt;code&gt;3c3be25bc1757ca99aba55d4157596a8ea217698&lt;/code&gt;）肯定算一个，比特币地址（如 &lt;code&gt;1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2&lt;/code&gt;）也算。&lt;/p&gt;&lt;h4 id=&#34;4-伪随机数生成&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#4-%e4%bc%aa%e9%9a%8f%e6%9c%ba%e6%95%b0%e7%94%9f%e6%88%90&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;4. 伪随机数生成&lt;/h4&gt;&lt;p&gt;哈希值可以被当作一个随机数看待，生成一个伪随机数的简单流程如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;通过随机事件得到一个熵（例如键盘点击或鼠标移动），将它作为最初的随机数种子（random seed）。&lt;/li&gt;&lt;li&gt;添加一个 &lt;code&gt;1&lt;/code&gt; 到熵中，进行哈希计算得到第一个随机数&lt;/li&gt;&lt;li&gt;再添加一个 &lt;code&gt;2&lt;/code&gt;，进行哈希计算得到第二个随机数&lt;/li&gt;&lt;li&gt;以此类推&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当然为了确保安全性，实际的加密随机数生成器会比这再复杂一些，我们会在后面的「随机数生成器」一节学习其中细节。&lt;/p&gt;&lt;h3 id=&#34;安全的加密哈希算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%ae%89%e5%85%a8%e7%9a%84%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;安全的加密哈希算法&lt;/h3&gt;&lt;h4 id=&#34;1-sha-2-sha-256-sha-512&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-sha-2-sha-256-sha-512&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. SHA-2, SHA-256, SHA-512&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://zh.wikipedia.org/wiki/SHA-2&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;SHA-2&lt;/a&gt;，即 Secure Hash Algorithm 2，是一组强密码哈希函数，其成本包括：SHA-256（256位哈希）、SHA-384（384位哈希）、SHA-512（512位哈希）等。基于密码概念「Merkle–Damgård 构造」，目前被认为高度安全。 SHA-2 是 SHA-1 的继任者，于 2001 年在美国作为官方加密标准发布。&lt;/p&gt;&lt;p&gt;SHA-2 在软件开发和密码学中被广泛使用，可用于现代商业应用。其中 SHA-256 被广泛用于 HTTPS 协议、文件完整性校验、比特币区块链等各种场景。&lt;/p&gt;&lt;p&gt;Python 代码示例：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;binascii&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sha256hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHA-256(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;) = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha256hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sha384hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha384&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHA-384(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;) = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha384hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sha512hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHA-512(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;) = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha512hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;输出如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA-256(&amp;#39;hello&amp;#39;) = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA-384(&amp;#39;hello&amp;#39;) = 59e1748777448c69de6b800d7a33bbfb9ff1b463e44354c3553bcdb9c666fa90125a3c79f90397bdf5f6a13de828684f&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA-512(&amp;#39;hello&amp;#39;) = 9b71d224bd62f3785d96d46ad3ea3d73319bfbc2890caadae2dff72519673ca72323c3d99ba5c11d7c7acc6e14b8c5da0c4663475c2e5c3adef46f73bcdec043&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;2-更长的哈希值--更高的抗碰撞能力&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e6%9b%b4%e9%95%bf%e7%9a%84%e5%93%88%e5%b8%8c%e5%80%bc--%e6%9b%b4%e9%ab%98%e7%9a%84%e6%8a%97%e7%a2%b0%e6%92%9e%e8%83%bd%e5%8a%9b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 更长的哈希值 == 更高的抗碰撞能力&lt;/h4&gt;&lt;p&gt;按照设计，哈希函数的输出越长，就有望实现更高的安全性和抗碰撞能力（但也有一些例外）。一般来说，128 位哈希算法比 256 位哈希算法弱，256 位哈希算法比 512 位哈希算法弱。&lt;/p&gt;&lt;p&gt;因此显然 SHA-512 比 SHA-256 更强。我们可以预期，SHA-512 的碰撞概率要比 SHA-256 更低。&lt;/p&gt;&lt;h4 id=&#34;3-sha-3-sha3-256-sha3-512-keccak-256&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-sha-3-sha3-256-sha3-512-keccak-256&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. SHA-3, SHA3-256, SHA3-512, Keccak-256&lt;/h4&gt;&lt;p&gt;在输出的哈希长度相同时，&lt;a href=&#34;https://zh.wikipedia.org/wiki/SHA-3&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;SHA-3&lt;/a&gt;（及其变体 SHA3-224、SHA3-256、SHA3-384、SHA3-512）被认为拥有比 SHA-2（SHA-224、SHA-256、SHA-384、SHA-512）更高的加密强度。例如，对于相同的哈希长度（256 位），SHA3-256 提供比 SHA-256 更高的加密强度。&lt;/p&gt;&lt;p&gt;SHA-3 系列函数是 Keccak 哈希家族的代表，它基于密码学概念&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B5%B7%E7%B6%BF%E5%87%BD%E6%95%B8&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;海绵函数&lt;/a&gt;。而 Keccak 是&lt;a href=&#34;https://en.wikipedia.org/wiki/NIST_hash_function_competition#Finalists&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;SHA3 NIST 比赛&lt;/a&gt;的冠军。&lt;/p&gt;&lt;p&gt;与 SHA-2 不同，SHA-3 系列加密哈希函数不易受到&lt;a href=&#34;https://en.wikipedia.org/wiki/Length_extension_attack&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;长度拓展攻击 Length extension attack&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;SHA-3 被认为是高度安全的，并于 2015 年作为美国官方推荐的加密标准发布。&lt;/p&gt;&lt;p&gt;以太坊（Ethereum）区块链中使用的哈希函数 Keccak-256 是 SHA3-256 的变体，在代码中更改了一些常量。&lt;/p&gt;&lt;p&gt;哈希函数 &lt;code&gt;SHAKE128(msg, length)&lt;/code&gt; 和 &lt;code&gt;SHAKE256(msg, length)&lt;/code&gt; 是 SHA3-256 和 SHA3-512 算法的变体，它们输出消息的长度可以变化。&lt;/p&gt;&lt;p&gt;SHA3 的 Python 代码示例：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;binascii&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sha3_256hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha3_256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHA3-256(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;) = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha3_256hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sha3_512hash&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha3_512&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SHA3-512(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;) = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sha3_512hash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;输出：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA3-256(&amp;#39;hello&amp;#39;) = 3338be694f50c5f338814986cdf0686453a888b84f424d792af4b9202398f392&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Keccak-256(&amp;#39;hello&amp;#39;) = 1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHA3-512(&amp;#39;hello&amp;#39;) = 75d527c368f2efe848ecf6b073a36767800805e9eef2b1857d5f984f036eb6df891d75f72d9b154518c1cd58835286d1da9a38deba3de98b5a53e5ed78a84976&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHAKE-128(&amp;#39;hello&amp;#39;, 256) = 4a361de3a0e980a55388df742e9b314bd69d918260d9247768d0221df5262380&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;SHAKE-256(&amp;#39;hello&amp;#39;, 160) = 1234075ae4a1e77316cf2d8000974581a343b9eb&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;4-blake2--blake2s--blake2b&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#4-blake2--blake2s--blake2b&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;4. BLAKE2 / BLAKE2s / BLAKE2b&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/BLAKE_%28hash_function&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;BLAKE&lt;/a&gt; / BLAKE2 / BLAKE2s / BLAKE2b 是一系列快速、高度安全的密码学哈希函数，提供 160 位、224 位、256 位、384 位和 512 位摘要大小的计算，在现代密码学中被广泛应用。BLAKE 进入了&lt;a href=&#34;https://en.wikipedia.org/wiki/NIST_hash_function_competition#Finalists&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;SHA3 NIST 比赛&lt;/a&gt;的决赛。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;BLAKE2 函数是 BLAKE 的改进版本。&lt;/li&gt;&lt;li&gt;BLAKE2s（通常为 256 位）是 BLAKE2 实现，针对 32 位微处理器进行了性能优化。&lt;/li&gt;&lt;li&gt;BLAKE2b（通常为 512 位）是 BLAKE2 实现，针对 64 位微处理器进行了性能优化。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;BLAKE2 哈希函数具有与 SHA-3 类似的安全强度，但开发人员目前仍然更倾向于使用 SHA2 和 SHA3。&lt;/p&gt;&lt;p&gt;BLAKE 哈希值的 Python 示例：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;binascii&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;blake2s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;blake2s&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;BLAKE2s(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{text}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;) = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blake2s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;blake2b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;blake2b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;BLAKE2b(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{text}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;) = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;blake2b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;输出如下：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;BLAKE2s(&amp;#39;hello&amp;#39;) = 19213bacc58dee6dbde3ceb9a47cbb330b3d86f8cca8997eb00be456f140ca25&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;BLAKE2b(&amp;#39;hello&amp;#39;) = e4cfa39a3d37be31c59609e807970799caa68a19bfaa15135f165085e01d41a65ba1e1b146aeb6bd0092b49eac214c103ccfa3a365954bbbe52f74a2b3620c94&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;5-ripemd-160&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#5-ripemd-160&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;5. RIPEMD-160&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/RIPEMD&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;RIPEMD-160, RIPE Message Digest&lt;/a&gt; 是一种安全哈希函数，发布于 1996 年，目前主要被应用在 PGP 和比特币中。&lt;/p&gt;&lt;p&gt;RIPEMD 的 160 位变体在实践中被广泛使用，而 RIPEMD-128、RIPEMD-256 和 RIPEMD-320 等其他变体并不流行，并且它们的安全优势具有争议。&lt;/p&gt;&lt;p&gt;建议优先使用 SHA-2 和 SHA-3 而不是 RIPEMD，因为它们输出的哈希值更长，抗碰撞能力更强。&lt;/p&gt;&lt;p&gt;Python 示例：&lt;/p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;lntd&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;binascii&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ripemd160&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hashlib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ripemd160&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;digest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;RIPEMD-160(&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;{text}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;) = &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binascii&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexlify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ripemd160&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# =&amp;gt; RIPEMD-160({text}) =  108f07b8382412612c048d07d13f814118445acd&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h4 id=&#34;6-其他安全哈希算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#6-%e5%85%b6%e4%bb%96%e5%ae%89%e5%85%a8%e5%93%88%e5%b8%8c%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;6. 其他安全哈希算法&lt;/h4&gt;&lt;p&gt;以下是目前流行的强加密哈希函数，它们都可被用于替代 SHA-2、SHA-3 和 BLAKE2：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Whirlpool&lt;/strong&gt; 发布于 2000 年，此算法输出固定的 512 位哈希值。该算法使用512位的密钥，参考了分组密码的思路，使用轮函数加迭代，算法结构与 AES 相似。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;SM3&lt;/strong&gt; 是中国国密密码杂凑算法标准，由国家密码管理局于 2010 年 12 月公布。它类似于 SHA-256（基于 Merkle-Damgård 结构），输出为 256 位哈希值。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;GOST&lt;/strong&gt;（GOST R 34.11-94）哈希函数是俄罗斯的国家标准，它的输出也是 256 位哈希值。&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以下函数是 SHA-2、SHA-3 和 BLAKE 的不太受欢迎的替代品，它们是&lt;a href=&#34;https://en.wikipedia.org/wiki/NIST_hash_function_competition#Finalists&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;SHA3 NIST 比赛&lt;/a&gt;的决赛入围者&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Skein&lt;/strong&gt; 能够计算出 128、160、224、256、384、512 和 1024 位哈希值。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Grøstl&lt;/strong&gt; 能够计算出 224、256、384 和 512 位哈希值。&lt;/li&gt;&lt;li&gt;&lt;strong&gt;JH&lt;/strong&gt; 能够计算出 224、256、384 和 512 位哈希值。&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&#34;不安全的加密哈希算法&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%8d%e5%ae%89%e5%85%a8%e7%9a%84%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e7%ae%97%e6%b3%95&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;不安全的加密哈希算法&lt;/h3&gt;&lt;p&gt;一些老一代的加密哈希算法，如 MD5, SHA-0 和 SHA-1 被认为是不安全的，并且都存在已被发现的加密漏洞（碰撞）。&lt;strong&gt;不要使用 MD5、SHA-0 和 SHA-1&lt;/strong&gt;！这些哈希函数都已被证明不够安全。&lt;/p&gt;&lt;p&gt;使用这些不安全的哈希算法，可能会导致数字签名被伪造、密码泄漏等严重问题！&lt;/p&gt;&lt;p&gt;另外也请避免使用以下被认为不安全或安全性有争议的哈希算法： &lt;strong&gt;MD2, MD4, MD5, SHA-0, SHA-1, Panama&lt;/strong&gt;, &lt;strong&gt;HAVAL&lt;/strong&gt;（有争议的安全性，在 HAVAL-128 上发现了碰撞），&lt;strong&gt;Tiger&lt;/strong&gt;（有争议，已发现其弱点），&lt;strong&gt;SipHash&lt;/strong&gt;（它属于非加密哈希函数）。&lt;/p&gt;&lt;h3 id=&#34;pow-工作量证明哈希函数&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#pow-%e5%b7%a5%e4%bd%9c%e9%87%8f%e8%af%81%e6%98%8e%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;PoW 工作量证明哈希函数&lt;/h3&gt;&lt;p&gt;区块链中的 Proof-of-Work 工作量证明挖矿算法使用了一类特殊的哈希函数，这些函数是计算密集型和内存密集型的。这些哈希函数被设计成需要消耗大量计算资源和大量内存，并且很难在硬件设备（例如集成电路或矿机）中实现，也就难以设计专用硬件来加速计算。这种哈希函数被称为&lt;strong&gt;抗 ASIC&lt;/strong&gt;（ASIC-resistant）。&lt;/p&gt;&lt;p&gt;大部分工作量证明（Proof-of-Work）算法，都是要求计算出一个比特定值（称为挖掘难度）更大的哈希值。因为哈希值是不可预测的，为了找出符合条件的哈希值，矿工需要计算数十亿个不同的哈希值，再从中找出最大的那个。比如，一个工作量证明问题可能会被定义成这样：已有常数 &lt;code&gt;x&lt;/code&gt;，要求找到一个数 &lt;code&gt;p&lt;/code&gt;，使 &lt;code&gt;hash(x &#43; p)&lt;/code&gt; 的前十个比特都为 &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;有许多哈希函数是专为工作量证明挖掘算法设计的，例如 ETHash、Equihash、CryptoNight 和 Cookoo Cycle.这些哈希函数的计算速度很慢，通常使用 GPU 硬件（如 NVIDIA GTX 1080 等显卡）或强大的 CPU 硬件（如 Intel Core i7-8700K）和大量快速 RAM 内存（如 DDR4 芯片）来执行这类算法。这些挖矿算法的目标是通过刺激小型矿工（家庭用户和小型矿场）来&lt;strong&gt;最大限度地减少挖矿的集中化&lt;/strong&gt;，并限制挖矿行业中高级玩家们（他们有能力建造巨型挖矿设施和数据中心）的力量。与少数的高玩相比，&lt;strong&gt;大量小玩家意味着更好的去中心化&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;目前大型虚拟货币挖矿公司手中的主要武器是 ASIC 矿机，因此，现代加密货币通常会要求使用「抗 ASIC 哈希算法」或「权益证明（proof-of-stake）共识协议」进行「工作量证明挖矿」，以限制这部分高级玩家，达成更好的去中心化。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;因为工作量证明算法需要消耗大量能源，不够环保，以太坊等区块链已经声明未来将会升级到权益证明（Proof-of-S）这类更环保的算法。不过这里我们只关注 PoW 如何基于哈希函数实现的，不讨论这个。&lt;/p&gt;&lt;/blockquote&gt;&lt;h4 id=&#34;1-ethash&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-ethash&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. ETHash&lt;/h4&gt;&lt;p&gt;这里简要说明下以太坊区块链中使用的 ETHash 工作量证明挖掘哈希函数背后的思想。&lt;/p&gt;&lt;p&gt;ETHash 是以太坊区块链中的工作量证明哈希函数。它是内存密集型哈希函数（需要大量 RAM 才能快速计算），因此它被认为是抗 ASIC 的。&lt;/p&gt;&lt;p&gt;ETHash 的工作流程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;基于直到当前区块的整个链，为每个区块计算一个「种子」&lt;/li&gt;&lt;li&gt;从种子中计算出一个 16 MB 的伪随机缓存&lt;/li&gt;&lt;li&gt;从缓存中提取 1 GB 数据集以用于挖掘&lt;/li&gt;&lt;li&gt;挖掘涉及将数据集的随机切片一起进行哈希&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;更多信息参见 &lt;a href=&#34;https://eth.wiki/en/concepts/ethash/ethash&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;eth.wiki - ethash&lt;/a&gt;&lt;/p&gt;&lt;h4 id=&#34;2-equihash&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-equihash&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. Equihash&lt;/h4&gt;&lt;p&gt;简要解释一下 Zcash、Bitcoin Gold 和其他一些区块链中使用的 Equihash 工作量证明挖掘哈希函数背后的思想。&lt;/p&gt;&lt;p&gt;Equihash 是 Zcash 和 Bitcoin Gold 区块链中的工作量证明哈希函数。它是内存密集型哈希函数（需要大量 RAM 才能进行快速计算），因此它被认为是抗 ASIC 的。&lt;/p&gt;&lt;p&gt;Equihash 的工作流程：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;基于直到当前区块的整个链，使用 BLAKE2b 计算出 50 MB 哈希数据集&lt;/li&gt;&lt;li&gt;在生成的哈希数据集上解决「广义生日问题」（从 2097152 中挑选 512 个不同的字符串，使得它们的二进制 XOR 为零）。已知最佳的解决方案（瓦格纳算法）在指数时间内运行，因此它需要大量的内存密集型和计算密集型计算&lt;/li&gt;&lt;li&gt;对前面得到的结果，进行双 SHA256 计算得到最终结果，即 &lt;code&gt;SHA256(SHA256(solution))&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;更多信息参见 &lt;a href=&#34;https://github.com/tromp/equihash&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;https://github.com/tromp/equihash&lt;/a&gt;&lt;/p&gt;&lt;h2 id=&#34;三非加密哈希函数&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%89%e9%9d%9e%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;三、非加密哈希函数&lt;/h2&gt;&lt;p&gt;加密哈希函数非常看重「加密」，为了实现更高的安全强度，费了非常多的心思、也付出了很多代价。&lt;/p&gt;&lt;p&gt;但是实际应用中很多场景是不需要这么高的安全性的，相反可能会对速度、随机均匀性等有更高的要求。这就催生出了很多「非加密哈希函数」。&lt;/p&gt;&lt;p&gt;非加密哈希函数的应用场景有很多：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;哈希表 Hash Table: 在很多语言中也被称为 map/dict，它使用的算法很简单，通常就是把对象的各种属性不断乘个质数（比如 31）再相加，哈希空间会随着表的变化而变化。这里最希望的是数据的分布足够均匀。&lt;/li&gt;&lt;li&gt;一致性哈希：目的是解决分布式缓存的问题。在移除或者添加一个服务器时，能够尽可能小地改变已存在的服务请求与处理请求服务器之间的映射关系。&lt;/li&gt;&lt;li&gt;高性能哈希算法：SipHash MurMurHash3 等，使用它们的目的可能是对数据进行快速去重，要求就是足够快。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;有时我们甚至可能不太在意哈希碰撞的概率。也有的场景输入是有限的，这时我们可能会希望哈希函数具有可逆性。&lt;/p&gt;&lt;p&gt;总之非加密哈希函数也有非常多的应用，但不是本文的主题。这里就不详细介绍了，有兴趣的朋友们可以自行寻找其他资源。&lt;/p&gt;&lt;h2 id=&#34;参考&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%8f%82%e8%80%83&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000010990136&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;漫谈非加密哈希算法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://thomaslau.xyz/2020/05/20/2020-05-20-on_hash_1/&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;开发中常见的一些Hash函数（一）&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;]]></content></entry><entry><title type="html">写给开发人员的实用密码学（一）—— 概览</title><link href="https://thiscute.world/posts/practical-cryptography-basics-1/"/><id>https://thiscute.world/posts/practical-cryptography-basics-1/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:00+08:00</published><updated>2022-03-01T17:15:00+08:00</updated><content type="html"><![CDATA[&lt;blockquote&gt;&lt;p&gt;本文主要翻译自 &lt;a href=&#34;https://github.com/nakov/Practical-Cryptography-for-Developers-Book&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;Practical-Cryptography-for-Developers-Book&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;《写给开发人员的实用密码学》系列文章目录：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-1/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（一）—— 概览&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-2-hash/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（二）—— 哈希函数&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-3-key-derivation-function/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-4-secure-random-generators/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-5-key-exchange/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-6-symmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（六）—— 对称密钥加密算法&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;/posts/about-tls-cert&#34; rel=&#34;&#34;&gt;写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议&lt;/a&gt;&lt;/li&gt;&lt;li&gt;待续&lt;/li&gt;&lt;/ul&gt;&lt;h2 id=&#34;零前言&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e9%9b%b6%e5%89%8d%e8%a8%80&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;零、前言&lt;/h2&gt;&lt;p&gt;你是软件开发人员吗？有时你会需要在日常工作中使用哈希、加密或数字签名等密码学工具吗？你认为密码学很复杂，充满了数学知识，而且只适合书呆子吗？不，不是这样滴，每个开发人员都可以学习如何使用加密算法。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;从开发人员的角度理解密码学概念&lt;/strong&gt;不需要你是一个厉害的数学家。本书将尽量以最浅显的方式教你&lt;strong&gt;应用密码学&lt;/strong&gt;的基础知识，而且包含大量循序渐进的代码示例和实践练习——就像你学习 Web 开发、数据库或 APP 一样。&lt;/p&gt;&lt;p&gt;没错，如果你能够学会 Web 开发或 RESTful 服务，那么你也完全可以学会实用密码学。这就像学习一个新的 API 或一个新的 Web 开发框架，只要掌握了概念 &#43; 加密库 API &#43; 工具 &#43; 最佳实践，你就学会了实用密码学~&lt;/p&gt;&lt;p&gt;从本书中，你将学习如何使用密码算法和密码系统，如哈希、MAC 码和密钥派生函数 (KDF)、随机生成器、密钥交换协议、对称密码算法、加密方案、非对称密码系统、公钥密码学、椭圆曲线、数字签名和量子安全加密算法，以及现代加密工具和库。&lt;/p&gt;&lt;h2 id=&#34;一现代密码学概览&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%80%e7%8e%b0%e4%bb%a3%e5%af%86%e7%a0%81%e5%ad%a6%e6%a6%82%e8%a7%88&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;一、现代密码学概览&lt;/h2&gt;&lt;p&gt;密码学已经从第一代广泛应用的密码学算法（比如已经退役的 MD5 跟 DES），发展到现代密码学算法（如 SHA-3, Argon2 以及 ChaCha20）。&lt;/p&gt;&lt;p&gt;让我们首先跟一些基本的密码学概念混个脸熟：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;哈希函数&lt;/strong&gt;，如 SHA-256, SHA3, RIPEMD 等&lt;/li&gt;&lt;li&gt;&lt;strong&gt;散列消息认证码 HMAC&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;密钥派生函数 KDF&lt;/strong&gt;，如 Scrypt&lt;/li&gt;&lt;li&gt;&lt;strong&gt;密钥交换算法&lt;/strong&gt;，如 Diffie-Hellman 密钥交换协议&lt;/li&gt;&lt;li&gt;&lt;strong&gt;对称密钥加密方案&lt;/strong&gt;，如 AES-256-CTR-HMAC-SHA-256&lt;/li&gt;&lt;li&gt;使用公私钥的&lt;strong&gt;非对称密钥加密方案&lt;/strong&gt;，如 RSA 和 ECC, secp256k1 曲线跟 Ed25519 密码系统&lt;/li&gt;&lt;li&gt;&lt;strong&gt;数字签名算法&lt;/strong&gt;，如 ECDSA&lt;/li&gt;&lt;li&gt;&lt;strong&gt;熵&lt;/strong&gt;（entropy）与&lt;strong&gt;安全随机数生成&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;量子安全&lt;/strong&gt;密码学&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;上述这些概念涉及到技术被广泛应用在 IT 领域，如果你有过一些开发经验，可能会很熟悉其中部分名词。如果不熟也没任何关系，本书的目的就是帮你搞清楚这些概念。&lt;/p&gt;&lt;p&gt;这个系列的文章会按上面给出的顺序，依次介绍这些密码学概念以及如何在日常开发中使用它们。&lt;/p&gt;&lt;p&gt;不过在开始学习之前，我们先来了解一下什么是密码学，以及密码学的几大用途。&lt;/p&gt;&lt;h2 id=&#34;二什么是密码学&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%8c%e4%bb%80%e4%b9%88%e6%98%af%e5%af%86%e7%a0%81%e5%ad%a6&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;二、什么是密码学&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;密码学（Cryptography）&lt;strong&gt;是提供信息&lt;/strong&gt;安全&lt;/strong&gt;和&lt;strong&gt;保护&lt;/strong&gt;的科学。它在我们的数字世界中无处不在，当你打开网站时、发送电子邮件时、连接到 WiFi 网络时，使用账号密码登录 APP 时、使用二步认证验证码认证身份时，都有涉及到密码学相关技术。因此开发人员应该&lt;strong&gt;对密码学有基本的了解&lt;/strong&gt;，以避免写出不安全的代码。至少也得知道如何使用密码算法和密码库，了解哈希、对称密码算法、非对称密码算法（cipher）与加密方案这些概念，知晓数字签名及其背后的密码系统和算法。&lt;/p&gt;&lt;h2 id=&#34;三密码学的用途&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%b8%89%e5%af%86%e7%a0%81%e5%ad%a6%e7%9a%84%e7%94%a8%e9%80%94&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;三、密码学的用途&lt;/h2&gt;&lt;h3 id=&#34;1-加密与密钥&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#1-%e5%8a%a0%e5%af%86%e4%b8%8e%e5%af%86%e9%92%a5&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;1. 加密与密钥&lt;/h3&gt;&lt;p&gt;密码学的一大用途，就是进行数据的安全存储和安全传输。这可能涉及使用对称或非对称加密方案&lt;strong&gt;加密&lt;/strong&gt;和&lt;strong&gt;解密&lt;/strong&gt;数据，其中一个或多个&lt;strong&gt;密钥&lt;/strong&gt;用于将数据从明文转换为加密形式或者相反。&lt;/p&gt;&lt;p&gt;对称加密（如 AES、Twofish 和 ChaCha20）使用相同的密钥（一个密钥）来加密和解密消息，而非对称加密使用公钥密码系统（如 RSA 或 ECC）和密钥对（两个密钥）来进行这两项操作。&lt;/p&gt;&lt;p&gt;单纯使用加密算法是不够的，这是因为有的加密算法只能按块进行加密，而且很多加密算法并不能保证密文的真实性、完整性。因此现实中我们通常会使用加密方案进行数据的加密解密。加密方案是结合了加密算法、消息认证或数字签名算法、块密码模式等多种算法，能同时保证数据的安全性、真实性、完整性的一套加密方案，如 AES-256-CTR-HMAC-SHA-256、ChaCha20-Poly1305 或 ECIES-secp256k1-AES-128-GCM。后面我们会学到，加密方案的名称就是使用到的各种密码算法名称的组合。&lt;/p&gt;&lt;h3 id=&#34;2-数字签名与消息认证&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#2-%e6%95%b0%e5%ad%97%e7%ad%be%e5%90%8d%e4%b8%8e%e6%b6%88%e6%81%af%e8%ae%a4%e8%af%81&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;2. 数字签名与消息认证&lt;/h3&gt;&lt;p&gt;密码学提供了保证消息真实性（authenticity）、完整性（integrity）和不可否认性（non-repudiation）的方法：数字签名算法与消息认证（MAC）算法。&lt;/p&gt;&lt;p&gt;大多数数字签名算法（如 DSA、ECDSA 和 EdDSA）使用非对称密钥对（私钥和公钥）干这个活：消息由私钥&lt;strong&gt;签名&lt;/strong&gt;，签名由相应的公钥&lt;strong&gt;验证&lt;/strong&gt;。在银行系统中，数字签名用于签署和批准付款。在区块链签名交易中，用户可以将区块链资产从一个地址转移到另一个地址，确保转移操作的真实、完整、不可否认。&lt;/p&gt;&lt;p&gt;消息认证算法（如 HMAC）和消息认证码（MAC 码）也是密码学的一部分。MAC 跟数字签名的功能实际上是一致的，区别在于 MAC 使用哈希算法或者对称加密系统。&lt;/p&gt;&lt;h3 id=&#34;3-安全随机数&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#3-%e5%ae%89%e5%85%a8%e9%9a%8f%e6%9c%ba%e6%95%b0&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;3. 安全随机数&lt;/h3&gt;&lt;p&gt;密码学的另一个部分，是&lt;strong&gt;熵&lt;/strong&gt;（entropy，不可预测的随机性）和&lt;strong&gt;随机数的安全生成&lt;/strong&gt;（例如使用 CSPRNG）。&lt;/p&gt;&lt;p&gt;安全随机数理论上是&lt;strong&gt;不可预测的&lt;/strong&gt;，开发人员需要关心的是你使用的随机数生成器是否足够安全。很多编程语言中被广泛使用的随机数生成器都是不安全的（比如 Python 的 &lt;code&gt;random&lt;/code&gt; 库），如果你在对安全有严格要求的场景下使用了这种不安全的随机生成器，可能会黑客被预测到它生成的随机数，导致系统或者 APP 被黑客入侵。&lt;/p&gt;&lt;h3 id=&#34;4-密钥交换&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#4-%e5%af%86%e9%92%a5%e4%ba%a4%e6%8d%a2&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;4. 密钥交换&lt;/h3&gt;&lt;p&gt;密码学定义了&lt;strong&gt;密钥交换算法&lt;/strong&gt;（如 Diffie-Hellman 密钥交换和 ECDH）和密钥构建方案，用于在需要安全传输消息的两方之间安全地构建加密密钥。这种算法通常在两方之间建立新的安全连接时执行，例如当你打开一个现代 HTTPS 网站或连接到 WiFi 网络时。&lt;/p&gt;&lt;h2 id=&#34;5-加密哈希与-password-哈希&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#5-%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e4%b8%8e-password-%e5%93%88%e5%b8%8c&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;5. 加密哈希与 Password 哈希&lt;/h2&gt;&lt;p&gt;密码学提供了加密哈希函数（如 SHA-3 和 BLAKE2）将消息转换为消息摘要/数字指纹（固定长度的散列），确保无法逆向出原始消息，并且几乎不可能找到具有相同哈希值的两条不同消息。&lt;/p&gt;&lt;p&gt;例如，在区块链系统中，哈希用于生成区块链地址、交易 ID 以及许多其他算法和协议。在 Git 中，加密哈希用于为文件和提交生成唯一 ID。&lt;/p&gt;&lt;p&gt;而密钥派生函数（如 Scrypt 和 Argon2）通过从基于文本的 Password 安全地派生出哈希值（或密钥），并且这种算法还通过注入随机参数（盐）和使用大量迭代和计算资源使密码破解速度变慢。&lt;/p&gt;&lt;p&gt;密码学也被用于密钥（一个非常大的、保密的数字）的生成。因为人类只擅长记忆字符形式的 Password/Passphrases，而各种需要加密算法需要的密钥，都是一个非常大的、保密的数字。&lt;/p&gt;&lt;h2 id=&#34;四混淆与扩散&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e5%9b%9b%e6%b7%b7%e6%b7%86%e4%b8%8e%e6%89%a9%e6%95%a3&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;四、混淆与扩散&lt;/h2&gt;&lt;p&gt;在密码学当中，香农提出的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E6%B7%B7%E6%B7%86%E8%88%87%E6%93%B4%E6%95%A3&#34; target=&#34;_blank&#34; rel=&#34;noopener noreffer&#34;&gt;&lt;strong&gt;混淆&lt;/strong&gt;（confusion）与&lt;strong&gt;扩散&lt;/strong&gt;（diffusion）&lt;/a&gt;是设计安全密码学算法的两个原则。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;混淆&lt;/strong&gt;使&lt;strong&gt;密文&lt;/strong&gt;和对称加密中&lt;strong&gt;密钥&lt;/strong&gt;的映射关系变得尽可能的复杂，使之难以分析。如果使用了&lt;strong&gt;混淆&lt;/strong&gt;，那么输出密文中的每个比特位都应该依赖于密钥和输入数据的多个部分，确保两者无法建立直接映射。&lt;strong&gt;混淆&lt;/strong&gt;常用的方法是「替换」与「排列」。&lt;/p&gt;&lt;p&gt;「&lt;strong&gt;扩散&lt;/strong&gt;」将明文的统计结构扩散到大量密文中，隐藏明文与密文之间的统计学关系。使单个明文或密钥位的影响尽可能扩大到更多的密文中去，确保改变输入中的任意一位都应该导致输出中大约一半的位发生变化，反过来改变输出密文的任一位，明文中大约一半的位也必须发生变化。&lt;strong&gt;扩散&lt;/strong&gt;常用的方法是「置换」。&lt;/p&gt;&lt;p&gt;这两个原则被包含在大多数散列函数、MAC 算法、随机数生成器、对称和非对称密码算法中。&lt;/p&gt;&lt;h2 id=&#34;五密码库&#34; class=&#34;headerLink&#34;&gt;    &lt;a href=&#34;#%e4%ba%94%e5%af%86%e7%a0%81%e5%ba%93&#34; class=&#34;header-mark&#34;&gt;&lt;/a&gt;五、密码库&lt;/h2&gt;&lt;p&gt;说了这么多，作为一个程序员，我学习密码学的目的，只是了解如何在编程语言中使用现代密码库，并从中挑选合适的算法、使用合适的参数。&lt;/p&gt;&lt;p&gt;程序员经常会自嘲日常复制粘贴，但是在编写涉及到密码学的代码时，一定要&lt;strong&gt;谨慎处理&lt;/strong&gt;！盲目地从 Internet 复制/粘贴代码或遵循博客中的示例可能会导致安全问题；曾经安全的代码、算法或者最佳实践，随着时间的推移也可能变得不再安全。&lt;/p&gt;&lt;p&gt;本系列文章的后续部分，会分别介绍上述密码学概念，并使用 Python 演示其用法，其他语言的写法网上也很容易找到。&lt;/p&gt;]]></content></entry><entry><title type="html">「转」仙马赛记——我又 PB 了</title><link href="https://thiscute.world/posts/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/"/><id>https://thiscute.world/posts/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/</id><author><name>ryan4yin</name></author><published>2022-02-26T17:44:00+08:00</published><updated>2022-02-26T17:44:00+08:00</updated></entry><entry><title type="html">「转」MIRT出征广马——首次摸到330的边儿</title><link href="https://thiscute.world/posts/likenttt-2020-12-13-guangzhou-marathon-3_30_15/"/><id>https://thiscute.world/posts/likenttt-2020-12-13-guangzhou-marathon-3_30_15/</id><author><name>ryan4yin</name></author><published>2022-02-26T16:59:00+08:00</published><updated>2022-02-26T16:59:00+08:00</updated></entry><entry><title type="html">Linux/Windows/MacOSX 系统常用命令集锦</title><link href="https://thiscute.world/posts/common-commands-for-various-operating-systems/"/><id>https://thiscute.world/posts/common-commands-for-various-operating-systems/</id><author><name>ryan4yin</name></author><published>2022-02-13T16:09:00+08:00</published><updated>2022-02-13T16:09:00+08:00</updated></entry><entry><title type="html">Python 实用技巧与常见错误集锦</title><link href="https://thiscute.world/posts/python-tips-and-tricks/"/><id>https://thiscute.world/posts/python-tips-and-tricks/</id><author><name>ryan4yin</name></author><published>2022-02-13T01:17:00+08:00</published><updated>2022-02-13T01:17:00+08:00</updated></entry><entry><title type="html">部署一个 Kubernetes 集群</title><link href="https://thiscute.world/posts/kubernetes-deployment-using-kubeadm/"/><id>https://thiscute.world/posts/kubernetes-deployment-using-kubeadm/</id><author><name>ryan4yin</name></author><published>2022-01-25T01:37:00+08:00</published><updated>2022-01-25T01:37:00+08:00</updated></entry><entry><title type="html">Kubernetes 微服务最佳实践</title><link href="https://thiscute.world/posts/kubernetes-best-practices/"/><id>https://thiscute.world/posts/kubernetes-best-practices/</id><author><name>ryan4yin</name></author><published>2022-01-25T00:13:00+08:00</published><updated>2022-01-25T00:13:00+08:00</updated></entry><entry><title type="html">2021 年年终总结</title><link href="https://thiscute.world/posts/2021-summary/"/><id>https://thiscute.world/posts/2021-summary/</id><author><name>ryan4yin</name></author><published>2022-01-03T14:50:00+08:00</published><updated>2022-01-03T14:50:00+08:00</updated></entry><entry><title type="html">月宫</title><link href="https://thiscute.world/posts/moon-palace/"/><id>https://thiscute.world/posts/moon-palace/</id><author><name>ryan4yin</name></author><published>2021-12-27T17:23:00+08:00</published><updated>2021-12-27T17:23:00+08:00</updated></entry><entry><title type="html">浮生若梦，为欢几何？</title><link href="https://thiscute.world/posts/life-is-just-like-a-dream/"/><id>https://thiscute.world/posts/life-is-just-like-a-dream/</id><author><name>ryan4yin</name></author><published>2021-11-16T02:07:39+08:00</published><updated>2021-11-16T02:14:37+08:00</updated></entry><entry><title type="html">此岸弃草，彼岸繁花</title><link href="https://thiscute.world/posts/weeds-on-this-side-flowers-on-the-other/"/><id>https://thiscute.world/posts/weeds-on-this-side-flowers-on-the-other/</id><author><name>ryan4yin</name></author><published>2021-08-28T12:24:20+08:00</published><updated>2021-08-28T12:24:20+08:00</updated></entry><entry><title type="html">iptables 及 docker 容器网络分析</title><link href="https://thiscute.world/posts/iptables-and-container-networks/"/><id>https://thiscute.world/posts/iptables-and-container-networks/</id><author><name>ryan4yin</name></author><published>2021-08-15T19:11:29+08:00</published><updated>2021-08-15T19:11:29+08:00</updated></entry><entry><title type="html">Linux 中的虚拟网络接口</title><link href="https://thiscute.world/posts/linux-virtual-network-interfaces/"/><id>https://thiscute.world/posts/linux-virtual-network-interfaces/</id><author><name>ryan4yin</name></author><published>2021-08-14T11:13:03+08:00</published><updated>2021-08-14T11:13:03+08:00</updated></entry><entry><title type="html">Linux 网络工具中的瑞士军刀 - socat &amp;amp; netcat</title><link href="https://thiscute.world/posts/socat-netcat/"/><id>https://thiscute.world/posts/socat-netcat/</id><author><name>ryan4yin</name></author><published>2021-04-11T16:38:13+08:00</published><updated>2021-04-11T16:38:13+08:00</updated></entry><entry><title type="html">脚踏实地，仰望星空</title><link href="https://thiscute.world/posts/no-more-dreams/"/><id>https://thiscute.world/posts/no-more-dreams/</id><author><name>ryan4yin</name></author><published>2021-02-13T10:32:56+08:00</published><updated>2021-02-13T10:32:56+08:00</updated></entry><entry><title type="html">我在创业公司做技术一年多的一点体会</title><link href="https://thiscute.world/posts/end-of-the-first-round/"/><id>https://thiscute.world/posts/end-of-the-first-round/</id><author><name>ryan4yin</name></author><published>2021-02-06T08:46:46+08:00</published><updated>2021-02-06T08:46:46+08:00</updated></entry><entry><title type="html">云原生流水线 Argo Workflows 的安装、使用以及个人体验</title><link href="https://thiscute.world/posts/expirence-of-argo-workflow/"/><id>https://thiscute.world/posts/expirence-of-argo-workflow/</id><author><name>ryan4yin</name></author><published>2021-01-27T15:37:27+08:00</published><updated>2021-01-27T15:37:27+08:00</updated></entry><entry><title type="html">secrets 管理工具 Vault 的介绍、安装及使用</title><link href="https://thiscute.world/posts/expirence-of-vault/"/><id>https://thiscute.world/posts/expirence-of-vault/</id><author><name>ryan4yin</name></author><published>2021-01-24T09:31:41+08:00</published><updated>2021-01-24T09:31:41+08:00</updated></entry><entry><title type="html">QEMU-KVM 虚拟化环境的搭建与使用</title><link href="https://thiscute.world/posts/qemu-kvm-usage/"/><id>https://thiscute.world/posts/qemu-kvm-usage/</id><author><name>ryan4yin</name></author><published>2021-01-17T21:34:04+08:00</published><updated>2021-01-17T21:34:04+08:00</updated></entry><entry><title type="html">Pulumi 使用体验 - 基础设施代码化</title><link href="https://thiscute.world/posts/expirence-of-pulumi/"/><id>https://thiscute.world/posts/expirence-of-pulumi/</id><author><name>ryan4yin</name></author><published>2021-01-08T18:51:30+08:00</published><updated>2021-01-08T18:51:30+08:00</updated></entry><entry><title type="html">openSUSE 使用指南</title><link href="https://thiscute.world/posts/opensuse-instruction/"/><id>https://thiscute.world/posts/opensuse-instruction/</id><author><name>ryan4yin</name></author><published>2021-01-04T08:42:21+08:00</published><updated>2021-01-04T08:42:21+08:00</updated></entry><entry><title type="html">2020 年年终总结</title><link href="https://thiscute.world/posts/2020-summary/"/><id>https://thiscute.world/posts/2020-summary/</id><author><name>ryan4yin</name></author><published>2020-12-12T23:45:00+08:00</published><updated>2020-12-12T23:45:00+08:00</updated></entry><entry><title type="html">「小歌行」-景德镇文艺复兴-2020巡演-深圳</title><link href="https://thiscute.world/posts/jingdezhen-renaissance-band-2020-shenzhen/"/><id>https://thiscute.world/posts/jingdezhen-renaissance-band-2020-shenzhen/</id><author><name>ryan4yin</name></author><published>2020-11-28T11:49:00+08:00</published><updated>2020-11-28T11:49:00+08:00</updated></entry><entry><title type="html">Base64 编码并不唯一</title><link href="https://thiscute.world/posts/base64-encoding-is-not-unique/"/><id>https://thiscute.world/posts/base64-encoding-is-not-unique/</id><author><name>ryan4yin</name></author><published>2020-05-31T00:13:00+08:00</published><updated>2020-05-31T00:13:00+08:00</updated></entry><entry><title type="html">使用 tcpdump 和 Wireshark 进行远程实时抓包分析</title><link href="https://thiscute.world/posts/tcpdump-and-wireshark/"/><id>https://thiscute.world/posts/tcpdump-and-wireshark/</id><author><name>ryan4yin</name></author><published>2020-05-28T16:20:26+08:00</published><updated>2020-05-28T16:20:26+08:00</updated></entry><entry><title type="html">使用 Istio 进行 JWT 身份验证（充当 API 网关）</title><link href="https://thiscute.world/posts/use-istio-for-jwt-auth/"/><id>https://thiscute.world/posts/use-istio-for-jwt-auth/</id><author><name>ryan4yin</name></author><published>2020-04-06T21:48:26+08:00</published><updated>2020-04-06T21:48:26+08:00</updated></entry><entry><title type="html">Linux网络学习笔记（二）：域名解析(DNS)——以 CoreDNS 为例</title><link href="https://thiscute.world/posts/about-dns-protocol/"/><id>https://thiscute.world/posts/about-dns-protocol/</id><author><name>ryan4yin</name></author><published>2020-03-29T15:49:23+08:00</published><updated>2020-03-29T15:49:23+08:00</updated></entry><entry><title type="html">JWT 签名算法 HS256、RS256 及 ES256 及密钥生成</title><link href="https://thiscute.world/posts/jwt-algorithm-key-generation/"/><id>https://thiscute.world/posts/jwt-algorithm-key-generation/</id><author><name>ryan4yin</name></author><published>2020-03-03T14:09:46+08:00</published><updated>2020-03-03T14:09:46+08:00</updated></entry><entry><title type="html">2019 年年终总结</title><link href="https://thiscute.world/posts/2019-summary/"/><id>https://thiscute.world/posts/2019-summary/</id><author><name>ryan4yin</name></author><published>2020-01-31T19:19:00+08:00</published><updated>2020-01-31T19:19:00+08:00</updated></entry><entry><title type="html">Kubernetes 常见错误、原因及处理方法</title><link href="https://thiscute.world/posts/kubernetes-common-errors-and-solutions/"/><id>https://thiscute.world/posts/kubernetes-common-errors-and-solutions/</id><author><name>ryan4yin</name></author><published>2019-11-24T19:26:54+08:00</published><updated>2019-11-24T19:26:54+08:00</updated></entry><entry><title type="html">Manjaro 使用指南</title><link href="https://thiscute.world/posts/manjaro-instruction/"/><id>https://thiscute.world/posts/manjaro-instruction/</id><author><name>ryan4yin</name></author><published>2019-07-13T20:38:24+08:00</published><updated>2019-07-13T20:38:24+08:00</updated></entry><entry><title type="html">逃离我的大学</title><link href="https://thiscute.world/posts/escape-my-university/"/><id>https://thiscute.world/posts/escape-my-university/</id><author><name>ryan4yin</name></author><published>2019-06-20T22:32:31+08:00</published><updated>2019-06-20T22:32:31+08:00</updated></entry><entry><title type="html">SQLAlchemy 学习笔记（三）：ORM 中的关系构建</title><link href="https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/"/><id>https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/</id><author><name>ryan4yin</name></author><published>2019-05-21T22:19:00+08:00</published><updated>2019-05-21T22:19:00+08:00</updated></entry><entry><title type="html">瘾的退却</title><link href="https://thiscute.world/posts/webnovel-addiction-recovery/"/><id>https://thiscute.world/posts/webnovel-addiction-recovery/</id><author><name>ryan4yin</name></author><published>2019-04-14T21:27:32+08:00</published><updated>2019-04-14T21:27:32+08:00</updated></entry><entry><title type="html">Python 并发编程：PoolExecutor 篇</title><link href="https://thiscute.world/posts/python-concurrency-pool-executor/"/><id>https://thiscute.world/posts/python-concurrency-pool-executor/</id><author><name>ryan4yin</name></author><published>2019-03-15T22:34:00+08:00</published><updated>2019-03-15T22:34:00+08:00</updated></entry><entry><title type="html">Python 异步编程笔记：asyncio</title><link href="https://thiscute.world/posts/python-asyncio/"/><id>https://thiscute.world/posts/python-asyncio/</id><author><name>ryan4yin</name></author><published>2019-02-14T13:11:00+08:00</published><updated>2019-02-14T13:11:00+08:00</updated></entry></feed>