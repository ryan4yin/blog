<feed xmlns="http://www.w3.org/2005/Atom"><title>This Cute World</title><link href="https://thiscute.world/index.xml" rel="self"/><link href="https://thiscute.world/"/><updated>2023-12-31T23:59:45+08:00</updated><id>https://thiscute.world/</id><author><name>ryan4yin</name></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">我的 2023 - 认识更多有趣的人，见识更宽广的世界</title><link href="https://thiscute.world/posts/2023-summary/"/><id>https://thiscute.world/posts/2023-summary/</id><author><name>ryan4yin</name></author><published>2023-12-31T23:59:45+08:00</published><updated>2024-01-01T01:17:45+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/2023-summary/2023-ryan4yin-github-oss-insight.webp" height="1753" width="874"><figcaption></figcaption>
        </figure><h2 id="闲言碎语" class="headerLink">
    <a href="#%e9%97%b2%e8%a8%80%e7%a2%8e%e8%af%ad" class="header-mark"></a>闲言碎语</h2><p>啊呀，又到了一年一度的传统节目——年终总结时间。</p>
<h2 id="2023-年流水账" class="headerLink">
    <a href="#2023-%e5%b9%b4%e6%b5%81%e6%b0%b4%e8%b4%a6" class="header-mark"></a>2023 年流水账</h2><p>还是跟去年一样，先简单过一下我 2023 年的流水账：</p>
<ul>
<li>1 月
<ul>
<li>再一次完成了公司 K8s 集群一年一度的升级，虽然仍然有比较大的压力，但这次的过程相当顺利。</li>
<li>然后就是朋友约饭，玩耍，回家过春节。</li>
</ul>
</li>
<li>2 月
<ul>
<li>延续去年底开始对嵌入式硬件的兴趣，继续折腾 stm32 / orange pi 5 / esp32 等嵌入式硬件。
<ul>
<li>用 STM32 点亮了 TFT 液晶屏，以及搞定了使用 printf 打印日志到串口 - <a href="https://github.com/ryan4yin/learn-stm32f103c8t6" target="_blank" rel="noopener noreferrer">ryan4yin/learn-stm32f103c8t6</a></li>
<li>研究在 orangepi5(rk3558s) 上用 npu 跑 AI 任务，写了点笔记 <a href="https://github.com/ryan4yin/knowledge/tree/master/electrical-engineering/rk3588" target="_blank" rel="noopener noreferrer">demos_rk3588</a></li>
</ul>
</li>
<li>折腾 Proxmox VE 集群
<ul>
<li>主力节点 UM560 固态翻车了，是才用了三个月的 Asgard 512G SSD，颗粒是长江存储的。走京东售后了。（上次翻车是 2022-11-02 炸了根光威弈 Pro 1T，这也没隔多久啊&hellip;）
<figure><img src="/images/now/nvme-critial-medium-error.webp" width="100%"/><figcaption>
                  <h4>2022-11-02 翻车记录 - 系统无法启动</h4>
              </figcaption>
      </figure>

<figure><img src="/images/now/nvme-device-not-ready.webp" width="100%"/><figcaption>
                  <h4>2023-02-03 翻车记录 - 系统能启动但是文件损坏</h4>
              </figcaption>
      </figure>
</li>
<li>研究 Homelab 备份与数据同步方案，写了点笔记 <a href="https://github.com/ryan4yin/knowledge/blob/master/homelab/%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E5%90%8C%E6%AD%A5.md" target="_blank" rel="noopener noreferrer">数据备份与同步策略</a></li>
<li>发布文章 <a href="https://thiscute.world/posts/ee-basics-2-esp32-display/" target="_blank" rel="noopener noreferrer">EE 入门（二） - 使用 ESP32 + SPI 显示屏绘图、显示图片、跑贪吃蛇</a>
<figure><img src="/images/ee-basics-2-esp32-display/tft_esp32_show_image-2.webp" width="100%"/>
      </figure>
</li>
</ul>
</li>
<li>简单玩了玩 Stable-Diffusion-WebUI 跟 sd-webui-controlnet，抄了些网上的提示词，效果确实很惊艳。不过玩了一波就没啥兴趣了，不太想花很多精力去折腾它。</li>
</ul>
</li>
<li>3 月
<ul>
<li>生活上
<ul>
<li>读完了「The Moon and Sixpence」</li>
<li>跟朋友到游泳馆游泳，算是开年以来最剧烈的一次运动&hellip;</li>
<li>跟同事们约着一起穿越了东西冲海岸线，这是我第三次走这条线，风景仍旧很美，当然也走得挺累&hellip;</li>
<li>买了块冲浪训练平衡板，练习了一段时间，挺有意思。</li>
</ul>
</li>
<li>业余技术上
<ul>
<li>仍旧是折腾各种嵌入式设备，新入手了 Sipeed MAIX-III AXera-Pi AX620A（爱芯派）+ Maix M0s MCU, 野火鲁班猫 0，荔枝糖 Nano 9K、M1s Dock、Longan Nano 等一堆大小开发板，折腾各种 Linux 编译、嵌入式开发的内容。</li>
<li>被 Copilot X 小小震撼了下，花了 100 美刀买了个 1 年的订阅，价格不贵，希望能切实帮我提升写代码的效率。</li>
<li>发了篇新博客：<a href="https://thiscute.world/posts/wireguard-on-linux/" target="_blank" rel="noopener noreferrer">Linux 上的 WireGuard 网络分析（一）</a></li>
<li>读了一点 <a href="https://github.com/PacktPublishing/Linux-Device-Driver-Development-Second-Edition" target="_blank" rel="noopener noreferrer">Linux Device Drivers Development 2nd Edition</a></li>
</ul>
</li>
</ul>
</li>
<li>4 月
<ul>
<li>在业余爱好上投入的精力越来越多，工作上相对的越来越懈怠，感觉碰到了瓶颈，但搞不明白该怎么解决。</li>
<li>听了 <a href="https://github.com/wdvxdr1123" target="_blank" rel="noopener noreferrer">wd 佬</a>的建议整了个达尔优 A87Pro 天空轴 v3，一番体验这个天空轴 v3 手感确实贼爽、声音也小，感觉可能有点类似静电容了（虽然我没用过静电容 emmm）。
<ul>
<li>我毕业以来就 19 年跟 20 年分别买过两把 IKBC 的茶轴跟红轴，茶轴放家里了，红轴一直放在公司用。当时国产轴感觉还不太出名，但是现在我聊键盘的朋友都看不上 cherry 轴了，网上搜了下 cheery 轴也有各种品控下降、轴心不稳、杂音大的诟病。</li>
<li>结合朋友推荐，另外看到 v2ex 上聊键盘的朋友也有说天空轴 v3 好用的，还在知乎上也看到有人说这个轴不错，于是就按捺不住心思下单了。到手确实很惊艳，甚至让我再一次喜欢上了打字的感觉！打了几篇小鹤练习群的赛文享受这种飘逸的 feel~</li>
</ul>
</li>
<li>搞了个 chatglm-6b int4 量化版，本地用我的拯救者笔记本（16G RAM + RTX3070 8G）玩了下，响应速度感觉可以，确实有一定的上下文联想能力，简单的问题也能解答，但是有点不聪明的样子，内容投毒比较严重。</li>
<li>玩 AI 联想到淘垃圾显卡，看嗨了就直接整了套新主机新显示器（我的第一台 PC 主机，以前只买过笔记本电脑），<strong>玻璃侧透机箱，RTX 4090，双水冷，27 寸 4K 显示器</strong>。组装了大半夜，后面又折腾了好几天，机箱直接当手办展示柜了，效果相当惊艳！缺点一是套下来貌似花了两万多，罪魁祸首是 RTX4090&hellip;
<figure><img src="/images/now/endeavour-rtx4090.webp" width="80%"/><figcaption>
                <h4>主机配置</h4>
            </figcaption>
    </figure>

<figure><img src="/images/now/rtx4090-pc-1.webp" width="80%"/><figcaption>
                <h4>机箱展示</h4>
            </figcaption>
    </figure>

<figure><img src="/images/now/rtx4090-pc-2.webp" width="80%"/><figcaption>
                <h4>机箱展示</h4>
            </figcaption>
    </figure>
</li>
<li>去听了个 Live House，乐队叫迎春归，青岛的乐队，不过前面许多歌我都觉得一般般，主唱唱功也差了点，全靠架子鼓贝斯烘托。不过末尾几首歌还挺好听的。</li>
<li>天依手办到货，很飒～
<figure><img src="/images/now/tianyi-vsinger.webp" width="80%"/><figcaption>
                <h4>洛天依 秘境花庭 常服手办</h4>
            </figcaption>
    </figure>
</li>
<li>新主机装了个 Endeavour OS 遇到些奇怪的问题，一怒之下决定换 OS，刚好朋友提到了 NixOS，听说过这玩意儿能做到「可复现」，直接就在 Homelab 里开了个 NixOS 虚拟机开始折腾，由此开始了我的 NixOS 之旅。</li>
<li>用新主机试玩了米忽悠的新游戏「星穹铁道」，还是熟悉的画风跟 UI，制作质量也很高，回合式对战的玩法我本以为会枯燥，不过也还 OK。最重要是 4090 画质够高，很多可爱的角色，游戏的动画跟剧情也都很在线，总体很 Nice!</li>
<li>用新主机连 Quest 2 打 VR 游戏，发现做过参数优化后，RTX4090 跑 beta saber，Quest 2 的画质参数全调到最高， 5K 120 帧无压力，相当流畅。</li>
<li>用 RTX4090 玩 Cyperpunk 2077，顶配光追画质（叫啥 onedrive）贼棒，真的非常还原真实环境，在 GeForece Experience 上调了个啥优化参数后，4K 差不多能稳定在 100 帧，看半天风景。</li>
</ul>
</li>
<li>5 月
<ul>
<li>月初，在虚拟机里折腾了大半个月 NixOS 后，成功地用几条简单的命令，在我的新主机上复现了整个 NixOS 环境，那一刻真的超级开心，半个月的努力终于得到了回报！
<figure><img src="/images/2023-summary/i3_2023-07-29_1.webp" width="100%"/>
    </figure>
</li>
<li>在新主机上成功复现出我的 NixOS 环境后，紧接着发布了我的系统配置 <a href="https://github.com/ryan4yin/nix-config/releases/tag/v0.0.2" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config/v0.0.2)</a> 以及这大半个月的学习笔记 <a href="https://thiscute.world/posts/nixos-and-flake-basics/" target="_blank" rel="noopener noreferrer">NixOS 与 Nix Flakes 新手入门</a>，然后事情就变得越来越有趣起来了！随着读者的反馈以及我对它的不断迭代，这份学习笔记逐渐膨胀成一篇一万多字的博文，并且有了中英双语，然后又转变成一本开源书藉 <a href="https://nixos-and-flakes.thiscute.world/" target="_blank" rel="noopener noreferrer">nixos-and-flakes-book</a>，在 NixOS 国际社区获得了大量好评！它给我带来了巨大的成就感以及社区参与感。
<figure><img src="/images/2023-summary/nixos-and-flakes-book-comments_reddit.webp" width="100%"/><figcaption>
                <h4>NixOS &amp; Flakes Book 的部分评论 - Reddit</h4>
            </figcaption>
    </figure>

<figure><img src="/images/2023-summary/nixos-and-flakes-book-comments_discourse-github.webp" width="100%"/><figcaption>
                <h4>NixOS &amp; Flakes Book 的部分评论 - Discourse 与 GitHub</h4>
            </figcaption>
    </figure>

<figure><img src="/images/2023-summary/nixos-and-flakes-book-comments_discord.webp" width="100%"/><figcaption>
                <h4>NixOS &amp; Flakes Book 的部分评论 - Discord</h4>
            </figcaption>
    </figure>
</li>
<li>在 NixOS 上尝试了 i3 与 Hyprland 两个窗口管理器，并且使用 agenix 管理了系统中的敏感信息，比如密码、私钥、wireguard 配置等。
<ul>
<li>agenix 确实 OK，但它纯 bash 脚本实现的核心功能，体验太差了，错误信息一团糟，解决错误全靠自己摸索。</li>
</ul>
</li>
</ul>
</li>
<li>6 月
<ul>
<li>立了个 flag - 把 NixOS 移稙到我手上的两块开发版上跑起来，一块 ARM64 架构的 Orange Pi 5，以及另一块 RISC-V 架构的 LicheePi 4A.
<ul>
<li>花了好几天时间研究，在俄罗斯网友的耐心帮助下，终于在 6/4 晚上在 Orange Pi 5 上把 NixOS 跑起来了，还挺有成就感的（虽然现在也不知道拿这板子用来干啥&hellip;）</li>
<li>之后断断续续折腾了一个月的 NixOS on LicheePi 4A，试了很多方案，还请教了 <a href="https://github.com/HougeLangley" target="_blank" rel="noopener noreferrer">HougeLangley</a>、<a href="https://github.com/NickCao" target="_blank" rel="noopener noreferrer">@nickcao</a>、<a href="https://github.com/chainsx" target="_blank" rel="noopener noreferrer">@chainsx</a> 等大佬，学会了很多 Linux 相关的东西，费尽千辛万苦终于成功把 rootfs 编译出来了，但死活引导不成功。感觉是 uboot-spl 跟 boot 分区这两个地方的内容有问题，但不知道怎么解决，累觉不爱。</li>
</ul>
</li>
<li>收到一封来自 2018 年的我在 futureme.org 发送的邮件，回想起来，当时我是真迷茫哪。
<figure><img src="/images/2023-summary/futureme-from-2018-to-2023.webp" width="80%"/><figcaption>
                <h4>2018 年写给 5 年后的我的邮件</h4>
            </figcaption>
    </figure>
</li>
<li>受读者评论启发，将之前的 NixOS 笔记做成了一个单独的文档站点 + GitHub 仓库，<a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">nixos-and-flakes-book</a>，也对其内容做了大量更新，用 ChatGPT 3.5 全面优化了英文内容，阅读体验大大提升（英文苦手默默路过&hellip;）
<figure><img src="/images/now/2023-08-13-nixos-and-flakes-book.webp" width="100%"/><figcaption>
                <h4>NixOS &amp; Flakes Book</h4>
            </figcaption>
    </figure>
</li>
</ul>
</li>
<li>7 月
<ul>
<li>NixOS 系统配置 <a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config</a> 迭代：
<ul>
<li>把办公电脑 Macbook Pro 2020 重裝了一遍系統，新系统環境完全通過 nix-darwin 安裝管理，就連大部分的 macOS 系統配置也完全声明式管理了。至此，我的常用电脑环境（NixOS+macOS）全部都使用同一份 nix 配置管理起来了，感覺非常香！
<ul>
<li>Linux 与 macOS 都使用了同一份小鹤音形的 rime 配置，现在输入法的跨平台体验也完全一致了，非常棒！</li>
<li>nixpkgs 对 macOS 的支持有限，因此常用的 GUI 程序都通过 nix-darwin 调用 homebrew 进行安装管理。</li>
</ul>
</li>
<li>所有命令行工具的主题，全部统一为了 <a href="https://github.com/catppuccin/catppuccin" target="_blank" rel="noopener noreferrer">catppuccin-mocha</a>.</li>
<li>壁纸文件太大了，将它们拆分到单独的仓库中，方便管理。同时还添加了随机切换壁纸的功能。</li>
<li>添加了三台在 Proxmox VE 上运行的 NixOS 虚拟机，并且尝试用它们组建 NixOS 的分布式构建集群，挺有意思。</li>
<li>发现之前用的 alacritty 功能有限，于是将主力终端换成了 kitty，wezterm 作为备用选择，而 alacritty 就基本不使用了。</li>
<li>主力编辑器从 VsCode 换成了 AstroNvim， 一个 Neovim 发行版，使用非常顺手，启动速度以及使用流畅度都比 VSCode 快很多，缺点就是花了挺长的时间完善我的 Neovim 配置（时间销金窟哪）。
<figure><img src="/images/now/2023-07-29_astronvim.webp" width="100%"/><figcaption>
                  <h4>AstroNvim(Neovim)</h4>
              </figcaption>
      </figure>
</li>
</ul>
</li>
<li>基于在 macOS 上折腾 nix-darwin 的经验，制作了一个 <a href="https://github.com/ryan4yin/nix-darwin-kickstarter" target="_blank" rel="noopener noreferrer">ryan4yin/nix-darwin-kickstarter</a> 模板仓库，并且在 <a href="https://twitter.com/ryan4yin/status/1681639068957028352" target="_blank" rel="noopener noreferrer">Twitter</a> 等社区分享了一波，获得一波好评。</li>
<li>从 4 月份折腾 NixOS 到现在，GitHub 上开了五六个 Nix 项目，获得了接近 400 stars，也认识了许多朋友、收到了许多好评，在这个圈子里是有点混开了的 feel.
<ul>
<li>甚至发现有俄罗斯的老铁在将我的 NixOS 小书翻译成俄语！<a href="https://github.com/fl42v/nixos-and-flakes-book-ru" target="_blank" rel="noopener noreferrer">fl42v/nixos-and-flakes-book-ru</a>，成就感又涨了一点。</li>
</ul>
</li>
</ul>
</li>
<li>8 月
<ul>
<li>时隔一个多月，在 LicheePi 的 Telegram 群组被老外 ping NixOS 移植进展。又来了点动力再次接续之前 6 月份的移植工作，一番尝试后成功在 Lichee Pi 4A 上把 NixOS 跑起来了！离开始移植已经过去了两个月，迟来的成功，泪目！ping 我的老外也在第二天用我提供的镜像成功把 NixOS 跑起来了！他甚至给我打了 $50 美元以表感谢，原因是「这太有意思了！」
<ul>
<li><a href="https://github.com/ryan4yin/nixos-licheepi4a" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-licheepi4a</a>
<figure><img src="/images/2023-summary/nixos-riscv-cluster.webp" width="100%"/><figcaption>
                  <h4>NixOS on LicheePi4A</h4>
              </figcaption>
      </figure>
</li>
</ul>
</li>
<li>排查问题的方法：首先刷好一个可在 LicheePi 4A 上正常启动的 Fedora 系统，然后用我编译出的 NixOS 的 rootfs 与 initrd 等文件，替换掉 Fedora 的 rootfs 以及 boot 分区中对应的文件，结果发现就能正常启动了！进一步排查确认到，我 6 月份生成的 NixOS rootfs 无法启动的原因是：
<ul>
<li>我使用了 opensbi 的主线代码编译出的 opensbi，而 LicheePi 4A 的 TH1520 核心需要使用它 fork 的分支</li>
<li>此外我生成的 img 镜像，分区也存在问题，root 分区的大小不对劲。</li>
</ul>
</li>
<li>有读者在 NixOS Discourse 上询问我是否会考虑在 Patreon 上创建一个赞助页面，再加上之前已经有老外赞助了我 $50 刀，我于是在 GitHub 个人页面以及项目中都新增了 Patreon、buymeacoffee、爱发电与 Ethereum Address 等赞助链接。
<ul>
<li>截止 2023 年底，<a href="https://patreon.com/ryan4yin" target="_blank" rel="noopener noreferrer">Patreon</a> 共收到赞助 10 刀，<a href="https://www.buymeacoffee.com/ryan4yin" target="_blank" rel="noopener noreferrer">buymeacoffee</a> 收到赞助 70 刀，爱发电收到赞助 ￥25 元，以及加密货币收到赞助 50 刀。
<figure><img src="/images/now/nixos-patreon_the-first-member.jpg" width="80%"/><figcaption>
                  <h4>Patreon Messages</h4>
              </figcaption>
      </figure>
</li>
</ul>
</li>
<li>写下新文章 <a href="https://thiscute.world/posts/a-quarter-of-the-way-through-life/" target="_blank" rel="noopener noreferrer">人生已过四分之一</a>，回顾我到目前为止的人生，以及对未来的展望，挺多感想。</li>
<li>在 <a href="https://twitter.com/Manjusaka_Lee" target="_blank" rel="noopener noreferrer">@Manjusaka_Lee</a> 的熏陶下，我也整了一个新的邮箱地址 <a href="mailto:ryan4yin@linux.com" rel="">ryan4yin@linux.com</a>。先给 Linux Foundation 捐 99 刀，然后再付 150 刀就能得到这个终身邮箱地址。
<ul>
<li>一是用了这么久 Linux 也该捐点钱，二是感觉这个邮箱很酷！</li>
</ul>
</li>
<li>因为一些心态上的变化，开始参加一些公益活动，想在工作与业余爱好之外，再找到一些自我价值感，比如说加入了「恒晖公益月捐」活动，每月捐 300 块。</li>
<li>在 <a href="https://github.com/chainsx" target="_blank" rel="noopener noreferrer">@chainsx</a> 的帮助下，成功在 rock 5a 跟 orange pi 5 plus 两块板子上把 NixOS 跑了起来。</li>
</ul>
</li>
<li>9 月
<ul>
<li>临时起意看了个午夜场的《奥本海默》，IMAX 巨幕。给个 4 星没问题吧，演挺好的，原来美共曾经有这么多美国高级知识分子，这是我以前不了解的。</li>
<li>前几天跟老妹聊时，她引用了我看的小说里的一句话，然后我看<a href="https://www.lionad.art/" target="_blank" rel="noopener noreferrer">@仿生狮子</a>的荐书时发现，这一句就是《山月记》的摘抄，药哥说他也看过这书，挺好。当时就下单了，今天书到了，决定读一读。
<ul>
<li>读了第一个短篇，最知名的《山月记》，更类似一个寓言故事，最有韵味的就是那一句「<strong>深怕自己并非明珠而不敢刻苦琢磨，又自信有几分才华，不甘与瓦砾为伍。日渐避世离俗，心中自卑怯懦之自尊终在愤懑与羞怒中愈发张狂。世人皆为驯兽师，猛兽即个人性情</strong>。」
<figure><img src="/images/now/2023-09-02_midi-keyboard.webp" width="100%"/><figcaption>
                  <h4>MIDI 键盘、山月记、以及凌乱的桌台...</h4>
              </figcaption>
      </figure>
</li>
</ul>
</li>
<li>跟朋友聊到陈行甲老师，他给我分享了深慈联《2023 年第二期慈善大讲堂》（报道见 <a href="https://new.qq.com/rain/a/20230821A06QDX00" target="_blank" rel="noopener noreferrer">“坚守初心，笃行致远”，深慈联举办2023年第二期慈善大讲堂</a>）的视频，看上去分享者与与会者年龄段主要在 40+ 到 50+，他们看待问题的角度跟我们年轻人完全不同，陈行甲老师以及肖兴萍老师的演讲都干货满满，很有收获。</li>
<li>请半天假去看了中国国际光博会，看到了挺多新鲜的东西，像啥气动开关啊、光波导眼镜啊、高能量密度的锌空电池充电包啊、中科院光电所的两台小光刻机啊、长春光机所的空间站小机械臂啊、以及压电陶瓷驱动技术的各种应用，长了见识。</li>
<li>看了些 NixCon 2023 的视频，挺有意思。而且发现所有视频都有一只招财猫在讲台上哈哈。</li>
<li>最感兴趣的内容是这个 - <a href="https://www.youtube.com/watch?v=Gm8yrvbgY-Y" target="_blank" rel="noopener noreferrer">NixCon2023 Bootstrapping Nix and Linux from TinyCC</a></li>
<li>看了记录片 <a href="https://movie.douban.com/subject/25850443/" target="_blank" rel="noopener noreferrer">史蒂夫·乔布斯 Steve Jobs</a>，Jobs 简直是最差的丈夫、父亲跟同事，但他确实是最牛逼的设计天才（或许这两句都应该再加一个「之一」）。</li>
<li>听了天依的新曲<a href="https://www.bilibili.com/video/BV1Yp4y1j7jX/" target="_blank" rel="noopener noreferrer">《歌行四方 - 天依游学记》</a>，曲跟词都非常棒！完美融合了二次元跟三次元的各种传统音乐，天依的人物建模、服装设计跟渲染质量也提升了一个档次。 很多年前第一次听天依，感觉声音怪怪的，后来出了全息现场会，效果其实也挺差的，然后一步步地建模质量越来越好，人物越来越生动活泼，声音越来越自然，现在又走进了三次元，与传统音乐大师一起合奏。听下来真的很感动，有一种老父亲甚感欣慰的 feel.</li>
<li>了解了下 <a href="https://worldjusticeproject.org/rule-of-law-index/country/2022/China" target="_blank" rel="noopener noreferrer">世界法治指数</a> 与 <a href="https://www.cnfin.com/hg-lb/detail/20230425/3851364_1.html" target="_blank" rel="noopener noreferrer">中国各省份司法文明指数</a>
<ul>
<li>湖南省貌似一直在倒数前二徘徊&hellip;很尴尬。</li>
</ul>
</li>
<li>今天看到推上有 MTF 说自己双相情感障碍（躁郁症），突然就想百度一下，进一步找到了注意力缺失障碍（ADHD）这个病，联想到我自己好像有这个问题。
<ul>
<li>大学时曾经怀疑自己有这个注意力缺失症，还买了本《分心不是我的错》，但书买了一直没看（我整个大学期间都不太看得下书），也没去医院看过。</li>
</ul>
</li>
<li>中秋国庆连休
<ul>
<li>看完了《被讨厌的勇气》，觉得它虽然缺乏科学依据，但这套理论得确实很有价值，给我很大启发。</li>
<li>看了一点《这才是心理学》</li>
<li>带我妹使用 ESP32 练习 C 语言，兴趣导向。玩了用 5x5 的 WS2812 彩灯模块写跑马灯、红绿灯之类的小程序，她还非要用 SSD1306 小屏幕显示个「原神启动」，搞得挺开心 emmm</li>
</ul>
</li>
<li>突然对 FPGA 燃起了兴趣，在 HDLBits 上刷了许多 Verilog 入门题。</li>
</ul>
</li>
<li>10 月
<ul>
<li>读完了《叫魂：1768 年中国妖术大恐慌》</li>
<li>看了记录片《溥仪：末代皇帝》跟电影《末代皇帝》，两个片子的内容有些出入，不过这边的史料显然可信度更高，都好评。</li>
<li>我的开源小书 NixOS &amp; Flakes Book 上了 Hacker News 热门，很开心：<a href="https://news.ycombinator.com/item?id=37818570" target="_blank" rel="noopener noreferrer">NixOS and Flakes Book: An unofficial book for beginners (free)</a></li>
<li>之前跟朋友聊过我可能有注意力缺失障碍（ADHD），朋友提到可以去看看医生。国庆后经 <a href="bleatingsheep.org/" rel="">@咩咩</a> 再次提醒，约了深圳康宁医院（深圳市精神卫生中心）的特需门诊，然后确诊，开始服药治疗&hellip;
<ul>
<li>跟 0xffff 群友辩论 ADHD 病症相关问题，讨论的内容逐渐发散 - <a href="https://0xffff.one/d/1643-cong-adhd-zhu-yi-li-que-shi-zheng" target="_blank" rel="noopener noreferrer">从 ADHD 注意力缺失症聊开去</a></li>
</ul>
</li>
<li>遵医嘱，搜了些正念冥想的资料，看了点 <a href="https://www.bilibili.com/video/BV19y4y1V7RU" target="_blank" rel="noopener noreferrer">正念减压疗法创始人-乔.卡巴金 教正念冥想大师课（中英字幕）</a>，尝试了下还有点意思。</li>
<li>跟我妹沟通后感觉她也比较有可能有 ADHD，提前安排她来深圳看心理医生。我妹确诊了抑郁症 + ADHD，医生给开了安非他酮，先吃半个月看看效果再复诊，同时也建议多带我妹出去运动散心。
<ul>
<li>我妹确诊抑郁症这一点真的让我很意外，让我意识到我一直有些忽视她的心理健康问题。</li>
</ul>
</li>
<li>我确诊 ADHD 并开始用药之后心态有很大的变化，我妹确诊抑郁症又给了我很大的触动。我完全放下了所有技术上的业余爱好，工作上专心工作，业余时间更多地花在了关心家人、运动、学习心理学等事情上。</li>
</ul>
</li>
<li>11 月
<ul>
<li>我的 NixOS &amp; Flakes Book 被加进了 NixOS 官方文档的推荐阅读，挺开心的：<a href="https://github.com/NixOS/nix.dev/pull/781" target="_blank" rel="noopener noreferrer">nix.dev - PR 781</a></li>
<li>持续服药治疗以及复诊，确诊后这段时间是我印象中工作效率最高的一段时间，治疗挺有成效。</li>
<li>给我妹买往返火车票、学校请假、预约医生、带她在深圳到处玩。</li>
<li>有挺长一阵没怎么碰电脑了，最近发现我的 NixOS 总是启动没多久网络就会卡死，为了解决问题，我重装了 NixOS 系统，顺便给系统添加了 LUKS 全盘加密 + Secure Boot + impermanence，根卷换成了 tmpfs，因此任何未显式声明持久化的数据，每次重启系统都会被清空。优雅，太优雅了！
<ul>
<li>重装好系统后网络问题就消失了，猜测是 home 目录有什么 X Server 相关的配置文件有毛病导致的。</li>
</ul>
</li>
</ul>
</li>
<li>12 月
<ul>
<li>沉寂一个多月的对业余项目的兴趣回来了一点，对 NixOS 相关的几个项目做了一番更新。</li>
<li>工作电脑用满三年换新了，新电脑是 Macbook Pro M2，终于用上了 M 系列的 CPU，体验显然比之前的 Intel 版本好很多，不发热了风扇也不响了，续航知道很牛但没啥机会测试。</li>
<li>淘汰下的旧工作电脑给装了个 NixOS，体验还不错，有些小问题但勉强能忍受。
<ul>
<li>主要问题：Touchbar 跑着跑着会失灵，Touch ID 无法使用，盖上盖子会直接关机，触摸板比较容易误触。其他的体验都挺不错的，第一次在笔记本上用 NixOS，还挺新奇的。</li>
</ul>
</li>
<li>折腾 Guix 系统、Scheme 语言、Emacs 编辑器以及 nushell.
<ul>
<li>打算后面多写写 Scheme 跟 nushell，Python 脚本有点写腻歪了，而且 Python 在 NixOS 上有点水土不服。</li>
</ul>
</li>
<li>将 Zellij 设为了默认的终端环境，体验非常丝滑，而且新手引导做得简直绝了，极大地降低了上手难度。</li>
<li>带我妹逛了深圳 AD01 动漫展。第一次逛漫展，体验挺不错的，玩得挺开心。
<ul>
<li>我妹对看到的各路原神、星穹铁道、魔道祖师、天依、芙莉莲等角色如数家珍，我变成了单纯的陪玩哈哈，已经变成跟不上时代的老东西了（不是</li>
<li>原神角色是最多的，如果论单个角色的话 Miku 应该是 Top1，另外因为芙莉莲正在热播，所以她的角色也很多。</li>
<li>感觉漫展真的相当年轻化，大都是 00 后，超有活力，是平常我接触不到的人群，混迹其中有找回一点我逝去的青春 emmmm</li>
<li>明年再参加的话，或许该考虑下 Cos 个啥角色，更能融入这个圈子，玩得更开心。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2023-年-highlights" class="headerLink">
    <a href="#2023-%e5%b9%b4-highlights" class="header-mark"></a>2023 年 Highlights</h2><h3 id="1-业余技术" class="headerLink">
    <a href="#1-%e4%b8%9a%e4%bd%99%e6%8a%80%e6%9c%af" class="header-mark"></a>1. 业余技术</h3><p>技术方面我今年的进展还是挺大的，可跟去年写的展望几乎没啥关联，人生总是充满了意外哈哈&hellip;</p>
<p>今年的主要技术成就基本完全集中在 NixOS 这一块，新建的几个项目都收到了挺多 stars 跟好评。</p>
<p>截止 2023/12/31，我 stars 比较高的几个项目如下：</p>
<ul>
<li><a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-and-flakes-book</a>: 这本开源小书的仓库于 2023/6/23 创建，目前获得了 15 个 issues，24 位贡献者，43 个 forks，923 个 stars，以及 4 位国外读者的共计 $80 零花钱赞助。
<ul>
<li>是我目前 stars 数最高的项目</li>
<li>它的文档站目前稳定在每天 150 UV</li>
</ul>
</li>
<li><a href="https://github.com/ryan4yin/knowledge" target="_blank" rel="noopener noreferrer">ryan4yin/knowledge</a>: 这份个人笔记我从 2019 年工作开始写，目前有了 38 个 forks，363 个 stars.</li>
<li><a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config</a>: 这份 NixOS 系统配置仓库于 2023/4/23 创建，目前获得了 6 位贡献者，23 个 forks，以及 297 个 stars.</li>
<li><a href="https://github.com/ryan4yin/nix-darwin-kickstarter" target="_blank" rel="noopener noreferrer">ryan4yin/nix-darwin-kickstarter</a>: 我于 2023/7/19 创建的一个 Nix-Darwin 模板仓库，目前 133 stars.</li>
<li><a href="https://github.com/ryan4yin/nixos-rk3588" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-rk3588</a>: 这是我在 2023/6/4 创建的一个 NixOS 移植项目，目前支持了三块 RK3588 开发板，获得了 2 位贡献者，9 个 forks，11 个 issues，以及 49 stars.</li>
<li><a href="https://github.com/ryan4yin/nixos-licheepi4a" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-licheepi4a</a>: 同样是一个 NixOS 移植项目，但目标是基于 RISC-V 指令集的 LicheePi 4A 开发板。目前获得了 3 位贡献者与 23 stars，其中一位贡献者还赞助了 $50 给我。
<ul>
<li>这个项目断断续续花了两个月才搞定，用时远超预料&hellip;不过成功后获得的成就感也是巨大的！</li>
</ul>
</li>
</ul>
<p>对比下从 2023 年 1 月 1 日到现在，我的 GitHub Metrics 统计数据：</p>
<figure><img src="/images/2023-summary/2023-01-01-github-metrics.svg"/><figcaption>
            <p>
                    <a href="https://github.com/ryan4yin/ryan4yin/blob/f58f1769a72289b44e5313eaed3bbfc21febebda/metrics.classic.svg">2023/01/01 GitHub 统计数据</a></p>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/2023-12-31-github-metrics.svg"/><figcaption>
            <p>
                    <a href="https://github.com/ryan4yin/ryan4yin/blob/master/metrics.classic.svg">2023/12/31 GitHub 统计数据</a></p>
        </figcaption>
</figure>

<p>几个关键指标的变化：</p>
<ul>
<li>Stars: 312 =&gt; 2072, 涨幅 564%.</li>
<li>Followers: 152 =&gt; 468, 涨幅 208%.</li>
<li>Forkers: 97 =&gt; 203, 涨幅 109%.</li>
<li>Watchers: 39 =&gt; 102, 涨幅 161%.</li>
</ul>
<p>在折腾 NixOS 的过程中我写的入门指南（<a href="https://nixos-and-flakes.thiscute.world/" target="_blank" rel="noopener noreferrer">nixos-and-flakes-book</a>）获得了国内外社区的大量好评，其他项目也各有斩获；另外认识了好几位国内外的 NixOS 资深用户、开源项目作者以及嵌入式开发者，还收到了一些外国读者的打赏。</p>
<p>这些成绩给我带来了巨大的成就感以及社区参与感，也完全契合了我年初给自己的期许——「<strong>认识更多有趣的人，见识下更宽广的世界</strong>」。</p>
<p>今年不仅给 AstroNvim, ESP-IDF 等知名项目贡献了少许代码，甚至还创造了这么多个受欢迎的新项目、收到了几十个 PR。之前定的给一些开源项目贡献代码的目标，完全是超额完成了。</p>
<p>在折腾上 NixOS 后，年中的时候又顺带将 VSCode 彻底换成了 Zellij + Neovim，甚至年底又开始折腾 Guix 系统、Emacs 编辑器，以及 nushell 等新鲜玩意儿。</p>
<p>总的来说，业余技术今年搞到这个程度，相比去年，能称得上是「优秀」、「超出预期」。</p>
<p>要说我在搞技术这方面有啥诀窍可分享的话，那应该就是 <strong>Learning by Teaching</strong>，我 GitHub 上目前 stars 最高的两个项目（NixOS &amp; Flakes Book 以及 knowledge）以及这个博客站点就是我在践行它最好的证明，而它们获得的评论、 stars、以及零花钱赞助，则证明了它的价值。</p>
<h3 id="2-工作" class="headerLink">
    <a href="#2-%e5%b7%a5%e4%bd%9c" class="header-mark"></a>2. 工作</h3><p>工作上只能说马马虎虎，上半年业余在 NixOS 上做的成果得到了非常多的认可，相当有成就感，花了大量的精力在 NixOS 上，也创建了许多相关项目。
但另一方面，精力就这么多，我也一直做不到平衡好工作与生活/业余爱好，其结果就是那段时间没啥心思在工作上，把工作搞得一团糟。
当时觉得自己进入了一个瓶颈期，在工作上找不到什么成就感，业余爱好虽然做出了不错的成绩，但又不能靠这个吃饭。</p>
<p>在折腾业余爱好期间，一种找不到方向的焦虑感一直萦绕着我，有跟一些朋友、同事沟通过这个问题，但大道理谁都懂，真要做起来又是另一回事了。</p>
<p>因为业余搞了些嵌入式硬件感觉有意思，也有隐约考虑过转行搞硬件，但只是些粗浅的想法。
到 8 月份的时候，做的几个 NixOS 项目收到些赞助，让我可能有点异想天开？了解了些「如何通过开源项目养活自己」类似的信息，8 月中下旬的时候在苏洋的折腾群里提到这个想法，被洋哥泼了冷水 emmm</p>
<p>冷静下来后回想，洋哥说的挺在理的，靠开源用爱发电真能养活自己的凤毛麟角，如果专门往商业项目的方向做，又没了那份折腾的快乐了。</p>
<p>8 月底的时候，苏洋的折腾群里发起一场自我介绍活动，读了许多群友的自我介绍，很有感触，于是基于我自己在群里发的自我介绍调整扩写，成果就是这篇 <a href="https://thiscute.world/posts/a-quarter-of-the-way-through-life/" target="_blank" rel="noopener noreferrer">人生已过四分之一</a>。</p>
<p>当时文章完成后发出来，真觉得自己想明白不少，也跟领导同事做了些沟通，工作上状态有所好转。
但还是很难集中注意力，分心的情况仍然相当严重。也尝试了通过番茄钟之类的方式来提高工作效率，但效果不佳。
当时有点认命了，想着人生可能就是这样永远在这样未知的道路上的挣扎着前进，也有痛苦，也有快乐。</p>
<p>转折点是国庆前跟朋友提了嘴感觉自己有 ADHD，国庆后就被<a href="bleatingsheep.org/" rel="">@咩咩</a>催促去看心理医生，之后就确诊了 ADHD 并开始服药。
确诊让我的心态出现巨大的改变，业余爱好因此放下了一个多月。而服药则帮助我扭转了工作状态，我的专注能力有了质的提升，这也是我今年最大的收获之一。</p>
<p>总体上，我今年的工作做得比去年差，尤其是上半年，总体上只能算「及格」吧。</p>
<h3 id="3-生活" class="headerLink">
    <a href="#3-%e7%94%9f%e6%b4%bb" class="header-mark"></a>3. 生活</h3><h4 id="31-确诊-adhd-以及治疗" class="headerLink">
    <a href="#31-%e7%a1%ae%e8%af%8a-adhd-%e4%bb%a5%e5%8f%8a%e6%b2%bb%e7%96%97" class="header-mark"></a>3.1. 确诊 ADHD 以及治疗</h4><p>前文提了，我今年确诊了 ADHD，这是我今年最大的收获之一。
它让我搞明白了，原来我一直存在的注意力问题，并不是什么人格缺陷或者意志力不够，而是一种有挺多人都存在的功能失调（disorder），可以通过药物等方式治疗缓解。</p>
<p>考虑到 ADHD 的遗传特性，跟妹妹、父母一番沟通后，带我妹来深圳看医生，确诊了 ADHD 以及抑郁症。
说真的，我一直知道我妹妹情绪比较敏感，但从没想过是因为抑郁症。</p>
<p>这之后，除了工作外，我大部分的精力都花在了关心家人、运动、学习心理学等事情上。
这是一个非常明显的转变，我跟我妹的关系更好了，另外持续好几个月的治疗跟每个月带她在深圳散散心，她的情绪也有了很大的改善。</p>
<h4 id="32-参与公益活动" class="headerLink">
    <a href="#32-%e5%8f%82%e4%b8%8e%e5%85%ac%e7%9b%8a%e6%b4%bb%e5%8a%a8" class="header-mark"></a>3.2. 参与公益活动</h4><p>因缘际会跟 <a href="https://twitter.com/Manjusaka_Lee" target="_blank" rel="noopener noreferrer">@Manjusaka_Lee</a> 以及另一位朋友聊到了公益，当时在工作上缺乏动力，想在其他的事情上找找感觉，公益本身也是一件很有意义的事情，那段时间学习了解了许多公益资料，参加了一些公益会展与捐款活动，还一度考虑做志愿者。</p>
<p>今年算是迈出了参与公益活动的第一步，这拓展了我的视野，让我更加了解了社会。
在学习了解公益期间也结识了一些志同道合的朋友，这也挺符合我去年给自己的期许——「认识更多有趣的人，见识下更宽广的世界」。</p>
<p>做事情，最难的就是从 0 到 1，因此今年的这一进展就显得尤为可贵，称得上是「优秀」。</p>
<h4 id="33-阅读与写作" class="headerLink">
    <a href="#33-%e9%98%85%e8%af%bb%e4%b8%8e%e5%86%99%e4%bd%9c" class="header-mark"></a>3.3. 阅读与写作</h4><p>首先是我 2023 年的读书记录：</p>
<ul>
<li>2023-03-09 - The Moon and Sixpence
<ul>
<li>你是要地上的六便士，还是要天上的月亮？</li>
</ul>
</li>
<li>2023-08-31 - <a href="http://www.paulgraham.com/greatwork.html" target="_blank" rel="noopener noreferrer">How to Do Great Work - Paul Graham</a>
<ul>
<li>黑客与画家一篇两万多字的长文，也算是一本小书了吧，干货满满。</li>
</ul>
</li>
<li>2023-09-29 - 《被讨厌的勇气》
<ul>
<li>一本通过对话的形式讲述阿勒德心理学的书，这门心理学与现代科学心理学不同，它更偏向哲学。</li>
</ul>
</li>
<li>2023-10-08 - 《叫魂：1768 年中国妖术大恐慌》
<ul>
<li>从 1768 年的叫魂案出发，分析了乾隆时期的中国社会的许多方面。比如因各种原因导致人口过度增长、人均资源减少、社会矛盾激化导致的普遍恐慌，以及官僚君主制的运作机制、存在的问题。此书以史为鉴，能帮助我们理解现代中国政治与中国社会的一些基本问题。</li>
</ul>
</li>
<li>2023-10-17 - 《分心不是我的错》
<ul>
<li>介绍 ADHD 的一本书，列举了很多 ADHD 案例，也给出了诊疗建议，对我相当有用！</li>
</ul>
</li>
</ul>
<p>以及一些未读完的书：</p>
<ul>
<li>《这才是心理学 - 看穿伪科学的批判性思维 第 11 版》</li>
<li>Psychology and Life, 20th edition, by Richard J. Gerrig</li>
<li>The Great Gatsby - 10/41</li>
<li>《复杂 - 梅拉尼 米歇尔》</li>
<li><a href="https://github.com/PacktPublishing/Linux-Device-Driver-Development-Second-Edition" target="_blank" rel="noopener noreferrer">Linux Device Driver Development - Second Edition</a>: Linux 驱动编程入门，2022 年出的新书，基于 Linux 5.10，amazon 上评价不错，目前只有英文版，写的很好，对新手很友好。</li>
</ul>
<p>2023 年我读的书籍数量不多，没达成每月读一本书的目标。
而写作方面，算上这篇总结，今年我一共写了 9 篇博文，也没达成每月写一篇的目标。</p>
<p>但鉴于我今年写了一本挺受欢迎的小书 <a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">NixOS &amp; Flakes Book</a>，它得到了 NixOS 社区诸多好评，还在 10 月份上了 Hacker News 热榜，甚至被官方文档 <a href="https://nix.dev/recommended-reading#other-articles" target="_blank" rel="noopener noreferrer">nix.dev</a> 列入推荐阅读，我姑且将今年「阅读与写作」这一项的评分定为「超出期待」！</p>
<h4 id="34-其他" class="headerLink">
    <a href="#34-%e5%85%b6%e4%bb%96" class="header-mark"></a>3.4. 其他</h4><ol>
<li>运动方面乏善可陈，穿越了一次东西冲海岸线，游了几次泳，12 月初晨跑了一周但因为是空腹跑，胃炎给跑犯了，就没再跑了。体重全年都在 60kg 波动，没啥变化。</li>
<li>给我老爸全款买了我们全家的第一辆小轿车（自己没买，一是天天坐地铁用不到，二是我对车也缺乏兴趣）。</li>
<li>计划开始给父母约年度体检，待实施。</li>
</ol>
<h4 id="35-总结" class="headerLink">
    <a href="#35-%e6%80%bb%e7%bb%93" class="header-mark"></a>3.5. 总结</h4><p>生活上今年达成了这么多有意义的成就（确诊 ADHD、将更多精力花在关心家人上、参与公益活动、给家里买车等等），我给自己的评价当然是「优秀」。</p>
<h3 id="4-各种统计数据" class="headerLink">
    <a href="#4-%e5%90%84%e7%a7%8d%e7%bb%9f%e8%ae%a1%e6%95%b0%e6%8d%ae" class="header-mark"></a>4. 各种统计数据</h3><p>首先是我的博客站点 <a href="https://thiscute.world/" target="_blank" rel="noopener noreferrer">https://thiscute.world/</a> 的统计数据：</p>
<blockquote>
<p>我在 6 月份的时候把 NixOS &amp; Flakes 那篇文章迁移到单独的站点，博客里仅保留了跳转链接，Engagement Time 有因此受到比较大的影响。去掉这个因素的话感觉应该能超过 2 分钟。</p>
</blockquote>
<p><figure><img src="/images/2023-summary/thiscute.world-2023-google-analytics-stats.webp" width="100%"/><figcaption>
            <h4>thiscute.world - 2023 年 Google Analytics 访问统计</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/thiscute.world-2023-google-analytics-stats-by-country.webp" width="100%"/><figcaption>
            <h4>thiscute.world - 2023 年 Google Analytics 访问统计 - 按国家分类</h4>
        </figcaption>
</figure>
</p>
<figure><img src="/images/2023-summary/thiscute.world-2023-google-search.webp" width="100%"/><figcaption>
            <h4>thiscute.world - 2023 年 Google Search 统计数据</h4>
        </figcaption>
</figure>

<p>另外是我今年 6 月份新建的 NixOS 笔记站点 <a href="https://nixos-and-flakes.thiscute.world" target="_blank" rel="noopener noreferrer">https://nixos-and-flakes.thiscute.world</a> 的统计数据（国外读者相当多，这跟 stars 以及收到的赞助情况也比较匹配）：</p>
<p><figure><img src="/images/2023-summary/nixos-and-flakes-2023-google-analytics-stats.webp" width="100%"/><figcaption>
            <h4>NixOS &amp; Flakes Book - 2023 年 Google Analytics 访问统计</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/nixos-and-flakes-2023-google-analytics-stats-by-country.webp" width="100%"/><figcaption>
            <h4>NixOS &amp; Flakes Book - 2023 年 Google Analytics 访问统计 - 按国家分类</h4>
        </figcaption>
</figure>
</p>
<figure><img src="/images/2023-summary/nixos-and-flakes-2023-google-search.webp" width="100%"/><figcaption>
            <h4>NixOS &amp; Flakes Book - 2023 年 Google Search 访问统计</h4>
        </figcaption>
</figure>

<p>以及两个站点全年在 Vercel 上的流量统计（感谢 Vercel 每个月的 100G 免费流量，目前看白嫖阶段流量还有挺大增长空间哈哈）：</p>
<figure><img src="/images/2023-summary/2023-12-31-vercel-bandwidth-stats.webp" width="100%"/><figcaption>
            <h4>Vercel - 2023 年流量统计</h4>
        </figcaption>
</figure>

<p>还有文章阅读排行统计：</p>
<figure><img src="/images/2023-summary/2023-top-posts-stats.webp" width="100%"/><figcaption>
            <h4>2023 年文章阅读排行</h4>
        </figcaption>
</figure>

<p>此外，我今年在 <a href="https://twitter.com/ryan4yin" target="_blank" rel="noopener noreferrer">Twitter(X)</a> 上比较活跃，也新增了不少粉丝：</p>
<figure><img src="/images/2023-summary/2023-twitter-stats.webp" width="100%"/><figcaption>
            <h4>2023 年 Twitter 统计数据</h4>
        </figcaption>
</figure>

<p>最后，是一些赞助平台上收到的零花钱统计：</p>
<p><figure><img src="/images/2023-summary/2023-buymeacoffee-earning.webp" width="100%"/><figcaption>
            <h4>2023 年 buymeacoffee 收入统计</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/2023-patreon-earning.webp" width="100%"/><figcaption>
            <h4>2023 年 patreon 收入统计</h4>
        </figcaption>
</figure>

<figure><img src="/images/2023-summary/2023-afdian-earning.webp" width="100%"/><figcaption>
            <h4>2023 年爱发电收入统计</h4>
        </figcaption>
</figure>
</p>
<blockquote>
<p>另有加密货币 $50 没有好的统计页面，就不放截图了。以及部分国外读者希望使用我未使用的支付方式赞助，我比较懒没折腾了&hellip;</p>
</blockquote>
<h2 id="2024-年展望" class="headerLink">
    <a href="#2024-%e5%b9%b4%e5%b1%95%e6%9c%9b" class="header-mark"></a>2024 年展望</h2><p>我当下工作维持着不错的状态，业余兴趣不减，生活上也挺满意。
所以其实对明年反而没啥特别的期望，保持现在的状态就挺好的（这大概就是「现充」吧 emmm）</p>
<p>但总不能因为这个就摆烂，还是要给自己定一些目标，能否达成就看缘分了。</p>
<h3 id="1-技术侧" class="headerLink">
    <a href="#1-%e6%8a%80%e6%9c%af%e4%be%a7" class="header-mark"></a>1. 技术侧</h3><p>首先是前几年就定的一些目标，但一直没实现的：</p>
<ul>
<li>云原生
<ul>
<li>2021 年定的阅读 k8s 及相关生态的源码，两年了没任何进度，2024 年继续…</li>
</ul>
</li>
<li>Linux 与网络
<ul>
<li>2022 年看了一半《Linux/Unix 系统编程手册 - 上册》，2023 全年没动这本书，2024 年总该看完了吧&hellip;</li>
<li>MIT6.S081 Operating System Engineering (Fall 2020) 之前定了个目标学一遍但完全没开始，2024 年继续&hellip;</li>
<li>学习学习时下超流行的 eBPF 技术</li>
</ul>
</li>
<li>编程语言
<ul>
<li>2023 年 Go/C 两项语言也算是写了一点吧，2024 年期望提升些代码量，熟能生巧。</li>
</ul>
</li>
</ul>
<p>然后是今年新增的一些目标：</p>
<ul>
<li>2023 年既然意外地点亮了 NixOS 这项技能点，希望 2024 年能继续深入学习 NixOS 与 Nix 生态，争取为 NixOS 社区做更多的贡献（也可以搞一搞 Guix）。</li>
<li>2024 年在 EE 与嵌入式方面，也希望能更深入些，设计一点自己的板子玩玩，做点有意思的东西，比如无人机啊、智能机械臂啊啥的。</li>
<li>2024 年对 Scheme/Nushell/Rust 都比较感兴趣，其中 Scheme/Nushell 都是挺简单的语言，希望能在新的一年里用它们整些活。Rust 偏复杂，有应用机会的话也搞一搞。</li>
</ul>
<h3 id="2-生活侧" class="headerLink">
    <a href="#2-%e7%94%9f%e6%b4%bb%e4%be%a7" class="header-mark"></a>2. 生活侧</h3><p>生活上，2024 年希望能：</p>
<ul>
<li>首先仍然是每年固定的目标：每月读一本书、写一篇博客。</li>
<li>新增的旅游目标：带家人至少出省旅游三次。</li>
<li>运动：2023 年意识到了身体健康的重要性，在 2024 年想多多运动，晨跑就是个不错的选择（但可别空腹晨跑，胃炎犯了很难受）。</li>
<li>学学心理学：要往「久病成医」的方向发展了 emmmm. 2024 年想入门个心理学，帮我更好地照顾自己、关心家人、处理人际关系。</li>
<li>音乐：今年买了个 Quest 3 VR 头显，它有个 AR 弹琴的游戏挺不错，希望 2023 年能借此学会些简单的钢琴曲。</li>
</ul>
<h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>2022 年的年终总结文末，我给自己 2023 年的期许是「<strong>认识更多有趣的人，见识下更宽广的世界</strong>」，感觉确实应验了。
由衷感谢在 2023 年给我帮助与支持的朋友、领导跟同事，以及努力探索未知的我自己！</p>
<p>那么在 2024 年，我希望自己能够「<strong>工作与业余爱好上稳中求进，生活上锻炼好身体、多关心家人</strong>」~</p>
<blockquote>
<p>Carpe Diem. Seize The Day, Boys. Make Your Lives Extraordinary. &ndash; <a href="https://movie.douban.com/subject/1291548/" target="_blank" rel="noopener noreferrer">《死亡诗社》</a></p>
</blockquote>
<blockquote>
<p>文末推荐一个年终回顾与展望的帮助手册，感觉设计得很好：<a href="https://yearcompass.com/cn/" target="_blank" rel="noopener noreferrer">https://yearcompass.com/cn/</a></p>
</blockquote>
]]></content></entry><entry><title type="html">两岸猿声啼不住，轻舟已过万重山——我的四分之一人生</title><link href="https://thiscute.world/posts/a-quarter-of-the-way-through-life/"/><id>https://thiscute.world/posts/a-quarter-of-the-way-through-life/</id><author><name>ryan4yin</name></author><published>2023-08-19T18:00:45+08:00</published><updated>2023-08-19T18:00:45+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/a-quarter-of-the-way-through-life/2023-08-20_github-projects.webp" height="1661" width="536"><figcaption></figcaption>
        </figure><blockquote>
<p>本文稍有点长，推荐配合歌曲《夜空中最亮的星——逃跑计划》食用。我曾在无数个白天夜晚，听着这首歌，想着自己的人生，书写本文时也不例外。</p>
</blockquote>
<p>2023 年，按我能长命百岁来计算，我已经走过了四分之一的人生路。</p>
<p>如果要我用一句话总结我过去这四分之一的人生，我想用这句诗再合适不过了：</p>
<blockquote>
<p>两岸猿声啼不住，轻舟已过万重山。</p>
</blockquote>
<p>我想大部分人前四分之一的人生，主旋律都是求学，我也不例外。</p>
<p>我的求学之路并不顺利，小学初中时我不知道自己想要什么，高中时压力太大几乎退学，大学时我又因为自己的问题无法毕业。
但是在工作后我反而逐渐建立起了自信心，就像是突然进入了康庄大道。</p>
<p>最近我又经历了许多，受到了一些启发，觉得到了一个合适的时机，因此写下这篇文章，既是记录我的过去，也同时思考下未来的路该怎么走。</p>
<p>这篇文章主要是写给我自己看的，但如果也能带给你一些启发，那就再好不过了。</p>
<h2 id="我的高中" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e9%ab%98%e4%b8%ad" class="header-mark"></a>我的高中</h2><p>2015 年，我高三，那时候我是一个科幻迷，并且刚刚经历过一次退学风波。
为什么会闹出这样的事情？简单的说就是因为我抗压能力差，高三巨大的压力压得我喘不过气来，我想要逃避。</p>
<p>当时班主任找我谈话，怎么劝都劝不动我，劝不动他就开始骂，把我骂个狗血淋头，这一骂把我给骂醒了，我因此得以坚持到高考结束。
至今仍然相当感谢我的班主任王老师，他骂醒了我，让我不至于走上另一条更艰难的路。</p>
<p>但是即使如此，我还是没有任何动力去坚持备考。
当时整个班级的学习强度都越来越高，只有我仿佛活在另一个世界。
整个高三下学期，只有各种考试跟测验我会认真完成，其他时间我都在看各种与学习无关的书。</p>
<p>我读了很多的书。</p>
<p>我读刘慈欣的《三体》、山田正纪的《艾达》、保罗·巴奇加卢皮的《发条女孩》跟《拆船工》、以及《科幻世界》，
我读川端康成的《雪国》跟《千只鹤》、村上春树的《当我谈跑步时我谈些什么》，
读卡勒德·胡赛尼的《追风筝的人》、马尔克斯的《百年孤独》，
读江南的《龙族》、余秋雨的《中国戏剧史》。
因为压力太大，我甚至开始对哲学、禅宗感兴趣，我读了妙莉叶·芭贝里的《刺猬的优雅》、乔斯坦·贾德的《苏菲的世界》，我甚至开始读《心之道》、《学禅方便谭》、《新世界 : 灵性的觉醒》。</p>
<p>读了村上春树的《当我谈跑步时我谈些什么》后，我开始把跑步当成一种宣泄压力的方式，我经常晚自习时偷偷溜去操场跑步。
跑了五圈、十圈、二十圈，跑到感觉脚下力重千钧，呼吸火辣辣地痛，这些痛苦与不适，让我忘记了高考的压力。</p>
<p>我还喜欢上了看星星，经常在晚上熄灯后，偷偷爬上宿舍天台，用手机的《星图》APP，寻找各种星宿、寻找牛郎织女、北斗七星、大角星、看可见卫星过境。</p>
<p>我考的是理科，高考结束后，我拿网上的答案随便估了个分，尽量往低了估，算出二本都不够的。
但这也没啥，我自认只能做到这个程度，当时的想法就是尽人事，听天命。</p>
<p>然后是浑浑噩噩地等待高考成绩，中间也胡思乱想过一些要不要考虑复读的问题，但最终还是决定不复读了，因为我觉得我不可能再坚持一年了。</p>
<p>或许是因为我心态很平稳（心如死灰），考试时发挥得很好，成绩出来居然超过了一本线十多分。</p>
<p>之后就是填报志愿了，我不知道自己想学什么，可能是电子信息？毕竟我小时候挺喜欢捣鼓各种电子设备。</p>
<p>偶然想起在学校阅览室读杂志时，曾被<a href="https://read.douban.com/ebook/3088216/" target="_blank" rel="noopener noreferrer">科幻世界 2013 年 12 期</a>里沖氏武彦的《<strong>在回声中重历</strong>》给打动——用耳朵“看见”世界实在是太奇妙了，我当时痴痴地幻想了好几天。</p>
<p>这样我开始考虑选择声学。</p>
<p>我从高中同桌推荐的《刀剑神域》开始接触日本的 ACG 文化，后来接触到初音未来和洛天依，就对歌声合成(singing synthesis)产生了很大的兴趣，仔细一想发现这也应该是声学的范畴，这使我坚定了我选择声学的想法。</p>
<p>家里父母都没学问，他们的意见就是听我的，于是我的第一志愿就填了安徽建筑大学的声学专业。</p>
<p>声学是一个非常冷门的专业，我很顺利地被录取了。</p>
<p>就这样，我开始了我错位的大学生活，并为我自己草率的选择付出了巨大的代价。</p>
<h2 id="我的大学" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e5%a4%a7%e5%ad%a6" class="header-mark"></a>我的大学</h2><p>我凭着自己粗浅的想象与一时热血，填报了声学专业，但现实不同于想象，我发现我并不喜欢声学专业。</p>
<p>一开始，到新的学校，我接触到的一切都让我觉得自己就像是刘姥姥进大观园，处处都是新鲜事物——山里的孩子出来，第一次发现大家都只讲普通话，第一次见识到平原的广阔，第一次见识到城市的繁华，第一次见识到大学的自由。</p>
<p>但渐渐的问题就变得明显了，我发现学校教授的声学课程与我想象的完全不同，教的东西跟声学成像、声音合成几乎毫无关联，而且大学也并没有我想象的那般神圣无垢，它照样存在着各种各样的问题（比如一些形式主义、一些水课）。
另一方面我刚进大学时，为了弥补自己高三的遗憾，如同苦行僧一般的学习，而这种状态完全无法持续。</p>
<p>我很快就出了问题，这从我以前写过的文章中可见一斑：</p>
<ul>
<li><a href="https://thiscute.world/posts/reading-anxiety/" target="_blank" rel="noopener noreferrer">2017-03-07 - 我患上了阅读焦虑症</a></li>
<li><a href="https://thiscute.world/posts/the-holiday-is-coming-to-an-end/" target="_blank" rel="noopener noreferrer">2017-02-06 - 忽而假末</a></li>
</ul>
<p>另外大学期间我迷上了编程，开始自学各种编程技术，最开始是 C，后来有一次学校校友、在美国常春滕读天体物理学博士的<a href="https://github.com/jisuoqing" target="_blank" rel="noopener noreferrer">季索清学长</a>（现在已经是 Professor of Astrophysics 了）回校演讲，谈到了他们实验室现在都用 Python 了，Matlab 都没人用了，于是我开始学习 Python. 后来又跟着知乎上的推荐学习路线学习过 SICP、Linux C 编程等各种内容。</p>
<p>大学四年，学校对我帮助最大的，一是让我接触到了更大的世界，二是图书馆藏书丰富，尤其是计算机类书籍。四年时间我读了很多很多的书，学校的图书馆成了我最喜欢的地方。</p>
<p>但我始终无法平衡学业与编程，我开始彻底忽略学业。</p>
<p>问题愈演愈烈，大三时我尝试过申请休学，但是又被劝住了。
到大四临近毕业时，我心理问题已经相当严重。
尤其因为我性格还比较轴，觉得这个世界不应该是这样的，不想学的课程我一个字都不想看，相关的考试我要么缺考要么交白卷。</p>
<p>结果就是我完全无法毕业，觉得前途一片灰暗，见不到任何光亮，甚至感觉自己要得抑郁症，那是我这四分之一人生中最黑暗的时期。</p>
<p>某天跟在深圳工作的初中同学聊天，他说到深圳这方面的公司挺多的，建议我考虑下。</p>
<p>于是我买了张火车票直接就奔去了深圳，还写下了<a href="https://thiscute.world/posts/escape-my-university/" target="_blank" rel="noopener noreferrer">逃离我的大学</a>，现在回想起来，当时的想法大概是，「做什么都好，总之再也不想继续待在这个对我而言暗无天日的地方了。」</p>
<p>在学校的经历让我对学校产生了极大的反感，我拉黑了学校的所有联系方式。
这完全是我自己的问题，我的导员对我很好，我在学校也有过许多美好的回忆，但我就是心理上无法接受再跟这个地方有任何联系。</p>
<blockquote>
<p>工作后也有过很多朋友觉得我应该回去把学位拿了，每次我都会回答，如果能做到我也想，但我真的做不到，再在学校呆下去我真的要疯掉了。
至今我仍然觉得这是我当初做的最正确的决定。</p>
</blockquote>
<p>导员联系不上我，就让同学给我传话，又为我着想给我办理了延期，但后面的一年我也一门网课都没听过，又一年后，我的学历状态就变成了结业。</p>
<h2 id="我的打工人生活" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e6%89%93%e5%b7%a5%e4%ba%ba%e7%94%9f%e6%b4%bb" class="header-mark"></a>我的打工人生活</h2><p>我初中同学是读书不好的那种，高中就直接读了武术学校，在深圳教跆拳道。
我跟他一张床挤着睡了三天（很感谢他愿意为我做到这个程度），期间投了几十份简历。</p>
<p>我大学时自学涉猎过 Python Java Linux，因此后端、运维都有投，但只收到一家 Python 自动化运维的面试邀请，面试对我而言难度不高，很轻易就通过了，这家小创业公司也不看学历。
不知该说是运气好还是不好，我之后再也没收到过任何面试邀请。</p>
<p>就这样，我开始了我的打工人生活。</p>
<p>我在上大学时虽然自学了许多计算机与编程知识，但是那个时候全是我自己单干，现实中几乎没接触过其他做 IT 的人。
另一方面大学读得一团糟，因此刚工作时我相当不自信甚至可以说是自卑。
在工作后，我发现周围都是同样做技术的人，这种一起解决技术问题、完成技术目标的感觉是我从未体验过的，另一方面我的工作成果也获得了大家的认可，这让我在工作期间一直非常开心（虽然工资真的相当低，而且加班很严重。毕竟我没学历，当时能找到个工作都谢天谢地了）。</p>
<p>在这第一份正式工作期间，我学会了 Kubernetes、Istio、Docker、阿里云、Terraform/Pulumi、Argo Workflows 等云原生技术，Jenkins 等自动化运维技术，写了很多 Python 代码锻炼了自己的代码能力，还折腾了洋垃圾服务器、组装了公司办公电脑，工作能力也得到了领导同事的认可。</p>
<p>我很感谢这家公司，它是我 IT 生涯的起点，在这里我学到了令我足以在 IT 行业立足的技术，也建立起了技术自信。
但它给的工资实在太低了，还加班严重、画饼充饥，很多东西都不规范，处处透露着小作坊的气息，因此在工作了一年零八个月后，我决定离职。</p>
<p>离职后我休息了一个多月，给自己放了一个长假，期间也写了 <a href="https://thiscute.world/posts/end-of-the-first-round/" target="_blank" rel="noopener noreferrer">我在创业公司做技术一年多的一点体会</a> 跟 <a href="https://thiscute.world/posts/no-more-dreams/" target="_blank" rel="noopener noreferrer">脚踏实地，仰望星空</a>。
现在看来，当时这些文章也是写得纯真又幼稚。或许再过几年回头看，我会觉得现在这篇文章也纯真又幼稚？那就再好不过了——<strong>我对这个世界的认知又更正确了一点</strong>，我得以再次优化指导我行动的「<strong>人生模型</strong>」，避免在未来因此造成更大的问题（笑</p>
<p>之后我开始找工作。我当时很自信地（其实也有点忐忑）在简历上写下了「本人因学分不足，未能取得学位」，实话说，这句话帮我省去了不少无意义的沟通，大概 50% 的公司在确认了情况后会直接忽略我。
即使如此，我仍然拿到好几份 offer，也得以进入现在这家公司，职位是 SRE。</p>
<p>在新公司这几年的经历相当丰富，我简单总结如下：</p>
<ul>
<li>2021 年：
<ul>
<li>年初的期许：<strong>拆破玉笼飞彩凤，顿开金锁走蛟龙</strong>。</li>
<li>工作上我的工资相比之前翻了数倍，工作环境也好了太多。同事中不乏 985 211、海归甚至清北的大佬（同事的 title 可能代表不了什么，但这确实让我很有成就感），跟他们学到了许多东西，熟悉了全新的工作文化（OKR 等），接触到了拥有数千万日活、十多万 QPS 的云上系统架构，并且完成了其中核心组件 K8s 集群的运维升级工作，获得了许多牛逼同事与领导对我专业能力的认可。</li>
<li>业余生活上被同事带着第一次海边冲浪、烧烤，又开始玩轮滑，还学上了泡茶。</li>
<li><a href="https://thiscute.world/posts/2021-summary/" target="_blank" rel="noopener noreferrer">2021 年年终总结</a></li>
</ul>
</li>
<li>2022 年：
<ul>
<li>年初的期许：<strong>更上一层楼</strong></li>
<li>工作上一是通过了职级晋升，不再是 SRE 萌新了。二是在流量链路上做了很多工作，帮公司省了很多钱，还因此拿了一个 S（公司最高绩效），年终奖也很丰厚。</li>
<li>业余生活上做出了更多的探索，学了很多新技术，认识了很多有趣的人（0xffff 社区），还坚持学了好几个月的英语。</li>
<li><a href="https://thiscute.world/posts/2022-summary/" target="_blank" rel="noopener noreferrer">2022 年年终总结</a></li>
</ul>
</li>
<li>2023 年（虽然还没过完）：
<ul>
<li>年初的期许：<strong>认识更多有趣的人，见识下更宽广的世界</strong></li>
<li>今年在工作上没有做出很好的成绩，马马虎虎。我更多的把时间投入到了业余爱好上。</li>
<li>业余生活上，我又折腾了许多新技术（MCU 开发、各种 ARM/RISCV 开发板、Homelab、NixOS），并且因此认识了许多嵌入式领域的大佬。在折腾 NixOS 的过程中我做的开源项目、入门指南更是获得了国内外社区的大量好评，认识了好几位外国朋友，还收到了一些外国读者的打赏。这完全契合了我年初给自己的期许。</li>
<li><a href="https://www.zhihu.com/question/20870514/answer/3024654921" target="_blank" rel="noopener noreferrer">我今年写 NixOS 入门指南的经历</a></li>
</ul>
</li>
</ul>
<p>两份工作，四年多的时间，我的经历很难通过上面这只言片语就完全概括，中间当然也有过许多挣扎、迷茫、许多心酸苦辣。
但就得到的结果来说，在第一家公司我学到了很多很多，接着从进入新公司开始到现在，我每一年年初给自己的期许，也都能如约兑现。</p>
<p>现在，我相信在深圳这四年只是我上升期的第一步，这一步我完成了自信心的构建、眼界的开拓、基础技术能力的积累，也攒下了能让我衣食无忧好几年的少许财富（就在今天，还给我老爸全款买了我们全家的第一辆小轿车，全家都很开心）。
下一个四年或者五年，我一定能收获更多，就像几年前我第一份工作刚结束，好朋友 <a href="https://github.com/Likenttt" target="_blank" rel="noopener noreferrer">@Likenttt</a> 送我的诗一样：</p>
<blockquote>
<p><strong>拆破玉笼飞彩凤，顿开金锁走蛟龙</strong>。</p>
</blockquote>
<p>人生还很长，我想一个阶段的失败，可能只是在提前优化我对世界的认知，帮我提前发现并解决我「<strong>人生模型</strong>」中隐藏的问题，为下一个阶段的成功做铺垫。</p>
<h2 id="我的未来" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e6%9c%aa%e6%9d%a5" class="header-mark"></a>我的未来</h2><p>我过去的这四分之一人生，很难复刻，其中有太多的莽撞、理想主义让我饱尝苦果，其中的转折点也有许多运气与机遇的成分。
但我的未来正是构建在此之上。</p>
<p>有的人喜欢稳定，但当今大世，AI 飞速发展、中美摩擦不断、欧洲也各种难民、党争问题，全世界都在变化，真的有什么绝对稳定的东西可以依靠么？
世事无常，纷繁复杂，我能做的，是在接受这份无常的同时，仍然能维持自驱力，在这个世界中探索出自己的一片天地。</p>
<p>最近在<a href="https://zhuanlan.zhihu.com/p/557928933" target="_blank" rel="noopener noreferrer">苏洋的折腾群</a>，从大家的自我介绍里看到了形形色色的人生，年龄从 20+ 到 50+，学历从高中专科到博士，
职业从软硬件到电工、灯光师、全职公益人、见证纸媒体消亡的电脑报前编辑，生活地点也遍布全球。我甚至还发现最近跟我深入交流过 NixOS 相关技术问题的群友，在十多年前就做过我当时使用或者接触过的产品，而那个时候我还在上初中甚至小学，这让我感到十分震撼。
其中大部群友的年龄都比我大许多，他们的经历给了我很大的启发，让我意识到我往后 3/4 的人生还有很多的可能。</p>
<p>另外随着我近两年逐渐在自己的业余爱好上有所建树，我也越来越觉得工作作为养家糊口的手段，确实很重要，但它只是生活的一部分，在工作之外我还有许多可以做的事。</p>
<p>我一直在践行「兴趣是最好的老师」，虽然因为太过兴趣驱动以及一些其他原因导致我大学读得比较糟糕，但是能让我达成现在的成就的同样是兴趣，让我最近几个月接触 NixOS 并且获得了众多好评与感谢的同样是兴趣。
最近有推友分享了一篇很实用的长文 <a href="http://www.paulgraham.com/greatwork.html" target="_blank" rel="noopener noreferrer">How to Do Great Work - Paul Graham</a>（中译 <a href="https://mp.weixin.qq.com/s/31iL-Kbs4KrqpgrERVRNzQ" target="_blank" rel="noopener noreferrer">【实用指南】Paul Graham 两万字新文：如何取得杰出成就 </a>），我读了个开头，还没看完，但是发觉它很契合我，它与我的经历能相互印证，也对我未来的行动很有指导意义。
其中我目前读到印象最深刻的一句话就是：</p>
<blockquote>
<p>The three most powerful motives are curiosity, delight, and the desire to do something impressive. Sometimes they converge, and that combination is the most powerful of all.</p>
</blockquote>
<blockquote>
<p>三个最强大的内在动机是好奇心、快乐和做出令人印象深刻的事情的欲望，当它们汇聚在一起时，会成为最强大的组合。</p>
</blockquote>
<p>写这篇文章花了我一整天时间，第二天我又做了不少修修补补的工作。
写作时我回想了很多的东西，也翻阅了我自己过往的各种日记、随笔，往事历历在目。</p>
<p>我甚至有一点使命感，能感觉到这是一件相当有意义的事情。</p>
<p>文章写完后，我又反复读了好多遍，越读我越喜欢它，觉得它会成为我的一个人生里程碑。
这个里程碑不只有纪念意义，它更是对我未来方向的指引。迈过这个里程碑，我对仍旧未知的未来，有了更多的期待。</p>
<h2 id="后记" class="headerLink">
    <a href="#%e5%90%8e%e8%ae%b0" class="header-mark"></a>后记</h2><p>因着今天发现我认识的网友中就有人在深圳做了多年全职公益人，我想起了去年 8 月份看过的《在峡江的转弯处——陈行甲人生笔记》，作者现在也在深圳做公益。
我又把书翻出来略读了一遍，很有些感触。</p>
<p>偶尔回忆起自己当初的自卑、迷茫、挣扎，我会意识到现在的我虽然不再自卑，但仍然会迷茫、挣扎，怀疑自己的想法是否正确。
但我不觉得这是坏事，这正说明我走在了正确的路上。经常会有人说要「走出舒适区」，有这种迷茫、挣扎的感觉，说明我正在这么做。</p>
<p>正因为曾经经历过人生的灰暗时刻，所以我更希望自己能记住，这是一个可爱的世界，这正是我博客域名 <code>thiscute.world</code> 的由来，今后我也会牢记这一点。</p>
<blockquote>
<p>其实这段人生是最美好的，以后可能没有这么好的日子了。 —— v2ex 网友的评论，留做警示。最近几年过得一帆风顺，我确实是有点飘了，应该「居安思危」。</p>
</blockquote>
<p>文章的最后，我想我应该再次感谢，感谢这一路走来，帮助过我的老师、同学、朋友，认可我工作的同事跟领导，鼓励过我的家人、朋友、网友，感谢你们！
没有你们，我可能早就迷失了方向，更不会有现在的成绩了。</p>
<p>四年多前，我从学校不辞而别，我欠我的导员圆圆姐一个道歉，一份感谢，一个交代。这次，我也<del>会一并补上</del>已经补上了：</p>
<p><figure><img src="./to-yuanyuan.jpg" width="50%"/>
</figure>

<figure><img src="./reply-of-yuanyuan.jpg" width="50%"/>
</figure>
</p>
<p>人是社会性动物，我们互相成就。我今后也会争取交到更多有趣的朋友，认识更多有趣的人，见识这个宽广、可爱的世界。</p>
<h2 id="评论区" class="headerLink">
    <a href="#%e8%af%84%e8%ae%ba%e5%8c%ba" class="header-mark"></a>评论区</h2><p>我也在其他平台分享了这篇文章，其中评论有些不礼貌的 judge（直接无视掉就好，有的人这辈子也就剩这点东西了），但也不乏好的内容。
其中许多的留言相当治愈，让人心里暖暖的，有些留言让我会心一笑，这些内容都让我觉得，能够把文章分享到这些平台，让大家看到，真的是太好了！
在跟评论区一些朋友交流时，也碰撞出了许多思想的火花，这也让我相当开心。</p>
<p>为着让大家都能看到其中好的内容，我把它们都列在这里。</p>
<ul>
<li><a href="https://0xffff.one/d/1605-liang-an-yuan-sheng-ti-bu-zhu-qing" target="_blank" rel="noopener noreferrer">0xffff 社区</a>: 0xffff 评论区真的有很多真知灼见，强烈推荐一读！</li>
<li><a href="https://www.v2ex.com/t/966753" target="_blank" rel="noopener noreferrer">v2ex</a>: 有些很治愈的评论，也有个别不好的，我觉得这些评论都挺有意思。</li>
<li><a href="https://www.cnblogs.com/kirito-c/p/a-quarter-of-the-way-through-life.html" target="_blank" rel="noopener noreferrer">博客园</a></li>
</ul>
<blockquote>
<p>关于这些不好的评论（譬如 v2ex 上有人评论我是在「无病呻吟」，还挺多人点赞。另外 Twitter 上有人发推喷我「谁 TM 在意你的人生怎么样」，我觉得都挺好笑的），我想在这里为一些因此不快意的读者解释下。
我其实感觉到，在我自己的体系能够自洽后，看待这类评论时我更像是一个旁观者。我甚至完全不觉得这些评论冒犯了我（笑）。
这样的深入剖析自我的文章，肯定会刺痛到一些被生活磨去了棱角，迷失了自己的人。这种人别说跟我共情了，他们甚至下意识就要攻击我、反驳我。<br>
以前看过朋友推荐的一本小说，里面有一句话我印象很深刻：「正如纯氧对生物有害，毫无保留的真相，只会把人的精神击溃。一比<del>五</del>（四）的氧与氮，才是可供呼吸的空气。同样，呼吸着以戏言稀释的少量真实，人才能维持健全的心。」<br>
对这种被世界的真相击溃的人，我没啥好说的。以铜为镜，可以正衣冠；以人为镜，可以明得失。这些评论在警示我，不要成为这样的人，看清世界的真相后，仍要热爱生活。</p>
</blockquote>
<blockquote>
<p>如果说体系自洽有点不好懂，那我可以用个简单的类比来说明这一点：面对这种品头论足，我觉得我简直是在对牛弹琴。牛的哞哞叫会让我感到不开心么？我有必要跟牛解释我弹的曲子么？它听不懂关我何事？</p>
</blockquote>]]></content></entry><entry><title type="html">为什么我折腾这些小众技术？</title><link href="https://thiscute.world/posts/why-i-choose-niche-products/"/><id>https://thiscute.world/posts/why-i-choose-niche-products/</id><author><name>ryan4yin</name></author><published>2023-08-01T11:40:57+08:00</published><updated>2023-08-01T11:40:57+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/why-i-choose-niche-products/anime-girls-seagulls.webp" height="2428" width="1134"><figcaption></figcaption>
        </figure><p>我折腾过许多的小众技术，而今年新折腾的主要有 NixOS、窗口管理器 i3 / hyprland、以及 Neovim，其中 NixOS 我甚至折腾到了一个新境界——出了一本帮助新手入门的中英双语开源书籍 <a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">nixos-and-flakes-book</a>，还搞了好几个 NixOS 相关的开源项目（比如 <a href="https://github.com/ryan4yin/nix-darwin-kickstarter" target="_blank" rel="noopener noreferrer">nix-darwin-kickstarter</a> 跟 <a href="https://github.com/ryan4yin/nix-config" target="_blank" rel="noopener noreferrer">ryan4yin/nix-config</a>），都收到了许多好评。</p>
<p>结合我自己折腾这些小众技术的经历，以及我经常被问到的问题（为什么你选择用 <a href="nixos.org/" rel="">NixOS</a> / <a href="https://github.com/Neovim/Neovim" target="_blank" rel="noopener noreferrer">Neovim</a> / <a href="https://flypy.com/" target="_blank" rel="noopener noreferrer">小鹤音形中文输入法</a>？它有什么好处？它真的能提升效率吗？等等），我想在这里简单谈谈我对它们的看法。</p>
<h2 id="什么是小众技术" class="headerLink">
    <a href="#%e4%bb%80%e4%b9%88%e6%98%af%e5%b0%8f%e4%bc%97%e6%8a%80%e6%9c%af" class="header-mark"></a>什么是小众技术？</h2><p>小众，是相对于大众而言的。小众技术，指在该领域中用户占比较相对较小的技术。</p>
<p>基于这样的定义，我可以列举出我接触过的不同领域的一些小众技术：</p>
<table>
<thead>
<tr>
<th>领域</th>
<th>小众技术</th>
<th>大众技术</th>
</tr>
</thead>
<tbody>
<tr>
<td>编辑器</td>
<td>Neovim、Emacs</td>
<td>VSCode、PyCharm、IDEA</td>
</tr>
<tr>
<td>中文输入方案</td>
<td>双拼、小鹤音形、五笔、二笔、郑码、灵形速影</td>
<td>智能拼音</td>
</tr>
<tr>
<td>Linux 操作系统</td>
<td>NixOS、Gentoo、Arch Linux</td>
<td>Ubuntu、Fedora</td>
</tr>
<tr>
<td>窗口管理器</td>
<td>i3、hyprland</td>
<td>KDE、GNOME</td>
</tr>
</tbody>
</table>
<p>大多数人在使用这些领域的技术时，都会选择大众技术，因为它们的入门门槛低，使用起来也比较方便。
我曾经也是这大多数人之一，但是我渐渐发现，这些小众技术也有它们的优势，所以我开始尝试使用它们，并逐渐过渡到了它们。</p>
<h2 id="这些小众技术有什么特点" class="headerLink">
    <a href="#%e8%bf%99%e4%ba%9b%e5%b0%8f%e4%bc%97%e6%8a%80%e6%9c%af%e6%9c%89%e4%bb%80%e4%b9%88%e7%89%b9%e7%82%b9" class="header-mark"></a>这些小众技术有什么特点？</h2><p>小众技术显然得拥有一些优势，才能吸引到一部分用户，让这些用户选择它们而不是大众技术。</p>
<p>从我个人的使用经验来看，我用过的这些小众技术，具有一些比较明显的共同特征。</p>
<p>首先是它们共同的劣势：<strong>入门门槛更高，入门阶段需要花费更多的时间去学习、熟悉</strong>。</p>
<p>这就过滤掉了大部分用户，只有那些喜欢折腾、喜欢挑战的人才会去尝试这些小众技术。</p>
<p>比如说五笔输入法，它们的入门门槛很高，需要花费大量的时间去记忆它的键位编排、去练习，前期的输入体验会跌到谷底。
要想达到你曾经智能拼音的输入速度，感觉至少得每天练习 1 个小时，持续一个月（这很可能还不够）。</p>
<p>其他形码输入法也是一样，我用的小鹤音形算是一个折衷的选择，它的入门门槛比五笔低一些，学会后也能获得类似五笔的输入体验。</p>
<p>再说说它们共同的优势：</p>
<ol>
<li><strong>定制程度高</strong>：用户可以根据自己的需求，自由地定制各种功能。</li>
<li><strong>强烈的掌控感、绝佳的使用体验</strong>：高度的自定义，让用户感觉到自己在使用这些技术的过程中，能够完全掌控一切，从而带来绝佳的使用体验。</li>
<li><strong>用户黏性高、社区活跃</strong>：用户在使用这些技术的过程中，会不断地去探索、去学习、去定制，这会让用户对它们产生强烈的归属感。</li>
</ol>
<p>也因为上面这些原因，用户一旦成功入门某项小众技术（比如说形码输入法、Neovim/Emacs 编辑器），就很难再退回到曾经的大众方案——他们会发现曾经的大众方案用起来，各种不顺手、不爽快。</p>
<h2 id="我为什么折腾这些小众技术" class="headerLink">
    <a href="#%e6%88%91%e4%b8%ba%e4%bb%80%e4%b9%88%e6%8a%98%e8%85%be%e8%bf%99%e4%ba%9b%e5%b0%8f%e4%bc%97%e6%8a%80%e6%9c%af" class="header-mark"></a>我为什么折腾这些小众技术？</h2><p>我折腾过许多小众技术，而原因中最大的一部分，应该是好奇心。
但好奇心只能让我去尝试，让我留下来的，是它们优秀的使用体验。</p>
<p>比如说最近折腾的 Neovim 编辑器、Hyprland 窗口管理器，让我留下来继续使用它们的原因，一是 Neovim 跟 Hyprland 配置好了之后，真的很漂亮！而且 Neovim 速度真的超快、太快了！
一些从没深度体验过 Neovim 的 VSCode / IDEA 用户可能会觉得这种快不过如此，但是一旦你真的体验过，就会发现这种快真的很爽，就像流浪地球 2 中图恒宇的感叹一样（550W 太快了！这速度太快了！）</p>
<p>二是实际入门后，发现它们用起来很爽快，基于键盘的交互，能带给我形码输入法的那种掌控感、流畅感（优雅，太优雅了 hhh）。</p>
<p><figure><img src="./hyprland_2023-07-29_1.webp" width="85%"/><figcaption>
            <h4>我的 NixOS &#43; Hyprland 桌面</h4>
        </figcaption>
</figure>

<figure><img src="./hyprland_2023-07-29_2.webp" width="85%"/><figcaption>
            <h4>我的 Neovim 编辑器</h4>
        </figcaption>
</figure>
</p>
<p>而我折腾并且爱上 NixOS，也是基于类似的原因。
拥有声明式、可复现（一致的运行环境）、OS as Code 等这些特点的 NixOS，对于本运维狗而言，真就是理想中的样子，这让我迫不及待地想要使用它，即使发现了问题也希望能尽快完善它，使它能够适用于更多的场景。</p>
<blockquote>
<p>前两天在 4chan 上看到某外国网友的这么一段评论（虽然言词有点偏激，但我还真有点认同&hellip;）：
Completely and utterly unacceptable. Imagine having a tool that can&rsquo;t even properly undo an operation and then relying on it to manage an operating system.
<code>apt</code>, <code>pip</code>, <code>pm</code>, <code>rpm</code>, <code>pacman</code>, whatever are all a mad fucking joke.</p>
</blockquote>
<h2 id="小众工具或技术能提升效率吗" class="headerLink">
    <a href="#%e5%b0%8f%e4%bc%97%e5%b7%a5%e5%85%b7%e6%88%96%e6%8a%80%e6%9c%af%e8%83%bd%e6%8f%90%e5%8d%87%e6%95%88%e7%8e%87%e5%90%97" class="header-mark"></a>小众工具或技术能提升效率吗？</h2><p>有许多人说，Neovim 编辑器、i3 窗口管理器、形码输入法等这些小众工具或技术，能提升效率，我觉得这是一个误区。
相反，其中许多工具或技术，实际上是一个时间销金窟，你会被自己的兴趣驱使着去不断探索它们的边界、调整它的配置使其更契合自己的需求。
这导致至少前面较长一段上升期，这些投入的时间会比你效率提升所省下的时间多得多。</p>
<p>所以说到底，想用这些技术来提升效率啥的还是不用想了。
它能提升你的效率，但是比较有限，除非你写代码/文档的效率是受限于你的手速 emmm</p>
<blockquote>
<p>当然也有些特殊场景，比如说有的人需要经常输入些生僻字，这时候智能拼音就比较鸡肋了，五笔等形码输入法就确实能大大提升输入效率。</p>
</blockquote>
<p>或者有人会说，完全熟悉后，vim/emacs 能使你更容易进入心流状态？这个也很难说吧。</p>
<h2 id="那折腾这些东西到底有什么好处" class="headerLink">
    <a href="#%e9%82%a3%e6%8a%98%e8%85%be%e8%bf%99%e4%ba%9b%e4%b8%9c%e8%a5%bf%e5%88%b0%e5%ba%95%e6%9c%89%e4%bb%80%e4%b9%88%e5%a5%bd%e5%a4%84" class="header-mark"></a>那折腾这些东西，到底有什么好处？</h2><p>如果从很功利的角度看的话，确实就没啥好处，就跟打游戏一样，单纯在消遣时光而已。</p>
<figure><img src="./useless-work.jpg" width="35%"/>
</figure>

<p>要说跟做些无聊的事消遣时光有啥区别的话，大概就是还确实能获得点有用的东西。
比如我，遇到 AstroNvim 的 bug ，会提 PR 给上游仓库。发现 NixOS 的文档很糟糕，我直接自己写文档并分享出来。
发现 NixOS 缺少对我手头某块开发板的支持，我会自己尝试移植。
啥时候发现某工具缺少自己想要的功能，我也可能直接自己写一个。</p>
<p>这些折腾过程中获得的经验、创建的开源项目、在上游仓库中留下的 PR 、在社区中收获的感谢，感觉都是有价值的。
它不一定有啥业务价值，但是它好玩啊，还能交到朋友，帮到别人，在开源社区留下自己的痕迹，这不是很有意思么？</p>
<p>Linus 最开始写 Linux，也<a href="https://book.douban.com/subject/1451172/" target="_blank" rel="noopener noreferrer">只是为了好玩（Just For Fun）</a>.</p>
<h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>你展望人生的时候，不可能把这些点连起来；只有当你回顾人生的时候，才能发现它们之间的联系。所以你必须有信心，相信这些点总会以某种方式，对你的未来产生影响。你必须相信一些事情——你的勇气、命运、人生、缘分等等。这样做从未令我失望，反而决定了我人生中所有与众不同之处。</p>
<p>Stay Hungry. Stay Foolish.</p>
<p>—— <a href="https://news.stanford.edu/2005/06/12/youve-got-find-love-jobs-says/" target="_blank" rel="noopener noreferrer">You’ve got to find what you love, by Steve Jobs, CEO of Apple Computer</a></p>
<h2 id="评论区" class="headerLink">
    <a href="#%e8%af%84%e8%ae%ba%e5%8c%ba" class="header-mark"></a>评论区</h2><p>文末附上来自其他论坛的评论，其中不乏一些有趣的观点：</p>
<ul>
<li>0xffff.one: <a href="https://0xffff.one/d/1595-wei-shen-me-wo-zhe-teng-zhei-xie" target="_blank" rel="noopener noreferrer">https://0xffff.one/d/1595-wei-shen-me-wo-zhe-teng-zhei-xie</a></li>
<li>v2ex: <a href="https://www.v2ex.com/t/961562" target="_blank" rel="noopener noreferrer">https://www.v2ex.com/t/961562</a></li>
</ul>]]></content></entry><entry><title type="html">MacOS 窗口管理器 yabai 玩耍笔记</title><link href="https://thiscute.world/posts/macos-window-manager-yabai-usage/"/><id>https://thiscute.world/posts/macos-window-manager-yabai-usage/</id><author><name>ryan4yin</name></author><published>2023-05-22T12:24:57+08:00</published><updated>2023-05-22T12:24:57+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/macos-window-manager-yabai-usage/yabai.png" height="1280" width="640"><figcaption></figcaption>
        </figure><p>在 Linux 上用了一段时间 i3wm 后，我就有点忍受不了工作电脑的桌面环境了，公司给配的是 Macbook Pro 2020，一番查找发现 yabai 比较符合我的需求，于是开始了折腾之旅。</p>
<h2 id="使用体验总结" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c%e6%80%bb%e7%bb%93" class="header-mark"></a>使用体验总结</h2><p>我的电脑配置为 Macbook Pro 2020，i5 + 16G RAM + 512G Disk，性能尚可。
我从 2023-04-25 开始在这台机器上使用 yabai，到现在（2023-05-18）有三周了，刚刚把 yabai 卸载掉，这里总结下使用体验。</p>
<p>一句话总结：体验还不错，但是还不太成熟，Bug 比较多，而且有点吃性能，安装 yabai 后偶尔就会卡顿一下。</p>
<p>自动分屏 + 快捷键自动调整窗口的体验还是很舒服的，劝退我的主要是如下这些问题：</p>
<ol>
<li>对有些软件，比如企业微信、微信、QQ，自动分屏功能不太行，会出现窗口错位。</li>
<li>如下两个问题逼着我一会儿进入全屏模式，一会儿又要退出全屏，简直离谱。
<ol>
<li>全屏下 Chrome 搜索框下方的提示栏被会 Chrome 本身遮挡，必须退出全屏功能才能看到。</li>
<li>非全屏下，Chrome 页面中的输入框「自动填充」功能会被 Chrome 遮挡，必须进入全屏模式才能看到&hellip;</li>
</ol>
</li>
<li>在右键修改 Firefox Bookmark 中标签时，弹出的修改菜单会被 Bookmark 收藏夹本身的弹窗遮挡，导致有些选项无法点击到。</li>
<li>开始使用 yabai 后，系统经常性地卡顿，或者风扇狂转，说明这玩意儿有点吃性能。</li>
</ol>
<h2 id="安装流程" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85%e6%b5%81%e7%a8%8b" class="header-mark"></a>安装流程</h2><p>首先参考这篇官方 Wiki <a href="https://github.com/koekeishiya/yabai/wiki/Disabling-System-Integrity-Protection" target="_blank" rel="noopener noreferrer">Disabling System Integrity Protection</a> 关闭 SIP，然后参照如下流程安装 yabai 与 skhd。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装yabai</span>
</span></span><span class="line"><span class="cl">brew install koekeishiya/formulae/yabai
</span></span><span class="line"><span class="cl">sudo yabai --install-sa
</span></span><span class="line"><span class="cl"><span class="c1"># 启动yabai 这时候需要授权辅助功能</span>
</span></span><span class="line"><span class="cl">brew services start yabai
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装skhd</span>
</span></span><span class="line"><span class="cl">brew install koekeishiya/formulae/skhd
</span></span><span class="line"><span class="cl"><span class="c1"># 启动skhd 这时候需要授权辅助功能</span>
</span></span><span class="line"><span class="cl">brew services start skhd
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">########### 为 yabai 添加 sudo 权限 ###########</span>
</span></span><span class="line"><span class="cl">sudo yabai --load-sa
</span></span><span class="line"><span class="cl">sudo visudo -f /private/etc/sudoers.d/yabai
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 然后输入以下内容 其中 &lt;user&gt; 修改为当前 mac 的用户名</span>
</span></span><span class="line"><span class="cl"><span class="c1"># input the line below into the file you are editing.</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  replace &lt;yabai&gt; with the path to the yabai binary (output of: which yabai).</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  replace &lt;user&gt; with your username (output of: whoami).</span>
</span></span><span class="line"><span class="cl"><span class="c1">#  replace &lt;hash&gt; with the sha256 hash of the yabai binary (output of: shasum -a 256 $(which yabai)).</span>
</span></span><span class="line"><span class="cl"><span class="c1">#   this hash must be updated manually after running brew upgrade.</span>
</span></span><span class="line"><span class="cl">&lt;user&gt; <span class="nv">ALL</span><span class="o">=(</span>root<span class="o">)</span> NOPASSWD: sha256:&lt;hash&gt; &lt;yabai&gt; --load-sa
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面就完成了安装流程，但是到这里还不能使用，还需要为 skhd 与 yabai 添加配置文件，并添加自定义配置。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 创建yabai配置文件</span>
</span></span><span class="line"><span class="cl">touch ~/.yabairc
</span></span><span class="line"><span class="cl">chmod +x ~/.yabairc
</span></span><span class="line"><span class="cl"><span class="c1"># 创建skhd配置文件</span>
</span></span><span class="line"><span class="cl">touch ~/.skhdrc
</span></span><span class="line"><span class="cl">chmod +x ~/.skhdrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 之后在 ~/.yabairc 中添加以下命令</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF &gt; ~/.yabairc
</span></span></span><span class="line"><span class="cl"><span class="s">#!/usr/bin/env sh
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s"># wiki 要求在配置最前面加这个，看起来是跟 sudo 权限相关的东西
</span></span></span><span class="line"><span class="cl"><span class="s">sudo yabai --load-sa
</span></span></span><span class="line"><span class="cl"><span class="s">yabai -m signal --add event=dock_did_restart action=&#34;sudo yabai --load-sa&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="自定义-skhd-与-yabai-配置" class="headerLink">
    <a href="#%e8%87%aa%e5%ae%9a%e4%b9%89-skhd-%e4%b8%8e-yabai-%e9%85%8d%e7%bd%ae" class="header-mark"></a>自定义 skhd 与 yabai 配置</h2><p>这里配置的目标是，尽量与 i3wm 的默认快捷键保持一致，因为我在家用的是 Linux，只有办公电脑是 Mac.</p>
<p>我目前的 <code>~/.yabairc</code>，它用于配置 yabai 的各种行为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/usr/bin/env sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1"># wiki 要求在配置最前面加这个，看起来是跟 sudo 权限相关的东西</span>
</span></span><span class="line"><span class="cl">sudo yabai --load-sa
</span></span><span class="line"><span class="cl">yabai -m signal --add <span class="nv">event</span><span class="o">=</span>dock_did_restart <span class="nv">action</span><span class="o">=</span><span class="s2">&#34;sudo yabai --load-sa&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 输出 debug 日志，出问题时方便排查</span>
</span></span><span class="line"><span class="cl">yabai -m config debug_output on
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 窗口平铺</span>
</span></span><span class="line"><span class="cl">yabai -m space --layout bsp
</span></span><span class="line"><span class="cl"><span class="c1"># 默认拆分规则 first_child second_child</span>
</span></span><span class="line"><span class="cl">yabai -m config window_placement             second_child
</span></span><span class="line"><span class="cl"><span class="c1"># 窗口间距设置</span>
</span></span><span class="line"><span class="cl">yabai -m config top_padding                  <span class="m">10</span>
</span></span><span class="line"><span class="cl">yabai -m config bottom_padding               <span class="m">10</span>
</span></span><span class="line"><span class="cl">yabai -m config left_padding                 <span class="m">10</span>
</span></span><span class="line"><span class="cl">yabai -m config right_padding                <span class="m">10</span>
</span></span><span class="line"><span class="cl">yabai -m config window_gap                   <span class="m">10</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 自动平衡所有窗口始终占据相同的空间</span>
</span></span><span class="line"><span class="cl">yabai -m config auto_balance                 off
</span></span><span class="line"><span class="cl"><span class="c1"># 如果禁用自动平衡，此项属性定义的是新窗口占用的空间量。0.5意为旧窗口占用50%</span>
</span></span><span class="line"><span class="cl">yabai -m config split_ratio                 0.50
</span></span><span class="line"><span class="cl"><span class="c1"># 鼠标修饰键 意思就是按着这个键就可以使用鼠标单独修改窗口大小了</span>
</span></span><span class="line"><span class="cl">yabai -m config mouse_modifier ctrl
</span></span><span class="line"><span class="cl"><span class="c1"># ctrl + 鼠标左键 移动窗口</span>
</span></span><span class="line"><span class="cl">yabai -m config mouse_action1 move
</span></span><span class="line"><span class="cl"><span class="c1"># ctrl + 鼠标右键 调整窗口大小</span>
</span></span><span class="line"><span class="cl">yabai -m config mouse_action2 resize
</span></span><span class="line"><span class="cl"><span class="c1"># 焦点跟随鼠标 默认off: 关闭  autoraise:自动提升 autofocus: 自动对焦</span>
</span></span><span class="line"><span class="cl">yabai -m config focus_follows_mouse          autofocus
</span></span><span class="line"><span class="cl"><span class="c1"># 设置鼠标是否跟随当前活动窗口 默认 off: 关闭 on: 开启</span>
</span></span><span class="line"><span class="cl">yabai -m config mouse_follows_focus          on
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 浮动窗口问题在顶部</span>
</span></span><span class="line"><span class="cl">yabai -m config window_topmost               on
</span></span><span class="line"><span class="cl"><span class="c1"># 修改窗口阴影 on: 打开 off: 关闭 float: 只显示浮动窗口的阴影</span>
</span></span><span class="line"><span class="cl">yabai -m config window_shadow                float
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 窗口透明度设置</span>
</span></span><span class="line"><span class="cl">yabai -m config window_opacity               on
</span></span><span class="line"><span class="cl"><span class="c1"># 配置活动窗口不透明度</span>
</span></span><span class="line"><span class="cl">yabai -m config active_window_opacity        0.98
</span></span><span class="line"><span class="cl">yabai -m config normal_window_opacity        0.9
</span></span><span class="line"><span class="cl">yabai -m config window_opacity_duration      0.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在所有显示器上的每个空间顶部添加 0 填充 底部添加 0 填充</span>
</span></span><span class="line"><span class="cl">yabai -m config external_bar all:0:0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ================================ 规则 ================================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 打开系统偏好设置，不使用平铺模式</span>
</span></span><span class="line"><span class="cl">yabai -m rule --add <span class="nv">app</span><span class="o">=</span><span class="s2">&#34;^系统偏好设置</span>$<span class="s2">&#34;</span> <span class="nv">manage</span><span class="o">=</span>off
</span></span><span class="line"><span class="cl">yabai -m rule --add <span class="nv">app</span><span class="o">=</span><span class="s2">&#34;^提醒事项</span>$<span class="s2">&#34;</span> <span class="nv">manage</span><span class="o">=</span>off
</span></span><span class="line"><span class="cl">yabai -m rule --add <span class="nv">app</span><span class="o">=</span><span class="s2">&#34;^关于本机</span>$<span class="s2">&#34;</span> <span class="nv">manage</span><span class="o">=</span>off
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;yabai configuration loaded..&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再就是 <code>~/.skhdrc</code>，它负责配置各种快捷键，如下是我的配置:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 配置语法 : &lt;modifier&gt; - &lt;key&gt; : &lt;command&gt;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># modifier 可以是单个键比如 cmd, alt, ctrl, 也可以是组合键比如  ctrl + shift, ctrl + alt</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ================================ 打开终端 ================================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 启动终端</span>
</span></span><span class="line"><span class="cl">cmd - <span class="k">return</span> : open -a iTerm
</span></span><span class="line"><span class="cl"><span class="c1"># 关闭当前窗口，这个不需要加，macOS 默认是 cmd + q，我 Linux 也这么设置的</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ================================ 窗口设置 ================================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =============== 为了避免快捷键冲突改用了 ctrl 作为 modifier =================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ctrl + e 切换为平铺模式</span>
</span></span><span class="line"><span class="cl">ctrl - e : yabai -m space --layout bsp
</span></span><span class="line"><span class="cl"><span class="c1"># ctrl + s 切换为堆叠模式</span>
</span></span><span class="line"><span class="cl">ctrl - s : yabai -m space --layout stack
</span></span><span class="line"><span class="cl"><span class="c1"># 浮动/不浮动窗口 float</span>
</span></span><span class="line"><span class="cl">ctrl - f : yabai -m window --toggle float
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ================================ 多桌面配置  ================================</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 创建一个新桌面，并把当前活动的窗口发送到新桌面，并且自动跳转到新桌面. 需要 jq 支持 brew install jq</span>
</span></span><span class="line"><span class="cl"><span class="nb">shift</span> + cmd - n : yabai -m space --create <span class="o">&amp;&amp;</span> <span class="nv">index</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>yabai -m query --spaces --display <span class="p">|</span> jq <span class="s1">&#39;.| length&#39;</span><span class="k">)</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> yabai -m window --space <span class="s2">&#34;</span><span class="si">${</span><span class="nv">index</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> yabai -m space --focus <span class="s2">&#34;</span><span class="si">${</span><span class="nv">index</span><span class="si">}</span><span class="s2">&#34;</span> <span class="o">&amp;&amp;</span> yabai -m space --layout bsp
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在 stack 模式下通过方向键切换窗口</span>
</span></span><span class="line"><span class="cl">ctrl - down : yabai -m window --focus stack.next <span class="o">||</span> yabai -m window --focus south
</span></span><span class="line"><span class="cl">ctrl - up : yabai -m window --focus stack.prev <span class="o">||</span> yabai -m window --focus north
</span></span><span class="line"><span class="cl"><span class="c1"># 在 bsp 模式下通过方向键切换窗口</span>
</span></span><span class="line"><span class="cl">cmd - left : yabai -m window --focus west
</span></span><span class="line"><span class="cl">cmd - right : yabai -m window --focus east
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在 9 个桌面之间切换</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">1</span> : yabai -m space --focus <span class="m">1</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">2</span> : yabai -m space --focus <span class="m">2</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">3</span> : yabai -m space --focus <span class="m">3</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">4</span> : yabai -m space --focus <span class="m">4</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">5</span> : yabai -m space --focus <span class="m">5</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">6</span> : yabai -m space --focus <span class="m">6</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">7</span> : yabai -m space --focus <span class="m">7</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">8</span> : yabai -m space --focus <span class="m">8</span>
</span></span><span class="line"><span class="cl">ctrl - <span class="m">9</span> : yabai -m space --focus <span class="m">9</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将窗口发送到某个其他桌面</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">1</span> : yabai -m window --space <span class="m">1</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">2</span> : yabai -m window --space <span class="m">2</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">3</span> : yabai -m window --space <span class="m">3</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">4</span> : yabai -m window --space <span class="m">4</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">5</span> : yabai -m window --space <span class="m">5</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">6</span> : yabai -m window --space <span class="m">6</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">7</span> : yabai -m window --space <span class="m">7</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">8</span> : yabai -m window --space <span class="m">8</span>
</span></span><span class="line"><span class="cl">ctrl + <span class="nb">shift</span> - <span class="m">9</span> : yabai -m window --space <span class="m">9</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>配置加好后重启 yabai 与 skhd:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">brew services restart yabai
</span></span><span class="line"><span class="cl">brew services restart skhd
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在就可以随便打开几个程序试试，正常情况下 yabai 会自动帮你分屏。
再尝试下添加好的这些快捷键，看看是否生效。</p>
<h2 id="问题排查" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98%e6%8e%92%e6%9f%a5" class="header-mark"></a>问题排查</h2><h3 id="1-yabai" class="headerLink">
    <a href="#1-yabai" class="header-mark"></a>1. yabai</h3><p>如果 yabai 配置没有生效，有可能是权限问题，可以试下这个命令重启 yabai:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo yabai --uninstall-sa<span class="p">;</span> sudo yabai --load-sa<span class="p">;</span> brew services restart yabai
</span></span></code></pre></td></tr></table>
</div>
</div><p>其他问题可查看 yabai 的日志解决：</p>
<ul>
<li>错误日志路径: /usr/local/var/log/yabai/yabai.err.log</li>
<li>普通日志路径: /usr/local/var/log/yabai/yabai.out.log</li>
</ul>
<h3 id="2-skhd" class="headerLink">
    <a href="#2-skhd" class="header-mark"></a>2. skhd</h3><p>如果 skhd 配置没有生效，首先可以查看 skhd 的日志:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat /usr/local/var/log/skhd/*.log
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果日志文件不存在，可以停止 skhd 服务并手动启动它，看看是否有输出报错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">brew services stop skhd
</span></span><span class="line"><span class="cl">skhd -c ~/.skhdrc
</span></span></code></pre></td></tr></table>
</div>
</div><p>比如我之前改错了配置，执行上述命令就会报错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">#27:7 expected modifier
</span></span></code></pre></td></tr></table>
</div>
</div><p>提示我配置的第 27 行配置有问题，我就去看了下，发现是我把 <code>cmd - return</code> 写成了 <code>cmd + return</code>，改正后再 <code>brew services start skhd</code> 重启 skhd 就好了。</p>
<h2 id="堆叠模式下的可视化" class="headerLink">
    <a href="#%e5%a0%86%e5%8f%a0%e6%a8%a1%e5%bc%8f%e4%b8%8b%e7%9a%84%e5%8f%af%e8%a7%86%e5%8c%96" class="header-mark"></a>堆叠模式下的可视化</h2><p>yabai 在堆叠模式下的可视化效果不是很好，可以使用 <a href="https://github.com/AdamWagner/stackline" target="_blank" rel="noopener noreferrer">stackline</a> 来改善一下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># stackline 依赖 hammerspoon，这是一个 macOS 桌面自动化工具</span>
</span></span><span class="line"><span class="cl">brew install hammerspoon --cask
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 现在将 stackline 安装到 hammerspoon 的配置目录中</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/AdamWagner/stackline.git ~/.hammerspoon/stackline
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Make stackline run when hammerspoon launches</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> ~/.hammerspoon
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;stackline = require &#34;stackline&#34;&#39;</span> &gt;&gt; init.lua
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;stackline:init()&#39;</span> &gt;&gt; init.lua
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在还需要安装下 hammerspoon 的命令行工具 hs，它用于在脚本中执行 stackline 操作，安装方法如下：</p>
<ol>
<li>首先搜索打开 Hamerspoon 程序，或者使用命令 <code>open -a &quot;Hammerspoon&quot;</code>
<ol>
<li>这里启动时会申请权限，需要手动打开下</li>
<li>同时注意勾选登录时自动启动</li>
</ol>
</li>
<li>在下方的命令输出栏中键入 <code>hs.ipc.cliInstall()</code> 再回车，即可完成安装</li>
</ol>
<p>现在确认下 hs 命令已经可用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">which hs
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用时的常见问题与解决方法" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e6%97%b6%e7%9a%84%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98%e4%b8%8e%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95" class="header-mark"></a>使用时的常见问题与解决方法</h2><ol>
<li>Chrome/WeChat 等程序的弹窗无法显示: 尝试下进入全屏或者退出全屏，总有一种场景下可以显示弹窗&hellip;</li>
<li>&hellip;</li>
</ol>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://vccv.cc/article/mac-tiling-yabai.html" target="_blank" rel="noopener noreferrer">mac 下的平铺桌面 yabai 使用 - 月青悠</a></li>
<li><a href="https://gist.github.com/Krever/74d43fa38c57c42c355df55faa0a00ee" target="_blank" rel="noopener noreferrer">Yabai setup for i3wm users - Krever</a></li>
</ul>
]]></content></entry><entry><title type="html">NixOS 与 Nix Flakes 新手入门</title><link href="https://thiscute.world/posts/nixos-and-flake-basics/"/><id>https://thiscute.world/posts/nixos-and-flake-basics/</id><author><name>ryan4yin</name></author><published>2023-05-04T15:19:28+08:00</published><updated>2023-06-21T16:16:00+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/nixos-and-flake-basics/nixos-and-flakes-book.webp" height="2219" width="800"><figcaption></figcaption>
        </figure><p>随着文章的更新，文章内容逐渐增多，为了方便阅读，文章内容已经迁移到单独的站点:</p>
<ul>
<li>文档站: <a href="https://nixos-and-flakes.thiscute.world/zh/" target="_blank" rel="noopener noreferrer">https://nixos-and-flakes.thiscute.world/zh/</a></li>
<li>GitHub: <a href="https://github.com/ryan4yin/nixos-and-flakes-book" target="_blank" rel="noopener noreferrer">https://github.com/ryan4yin/nixos-and-flakes-book</a></li>
</ul>
<p>非常感谢 <a href="https://www.reddit.com/r/NixOS/comments/14fvz1q/comment/jp4xhj3/?context=3" target="_blank" rel="noopener noreferrer">Reddit</a>、文章评论区、<a href="https://www.v2ex.com/t/951190#reply9" target="_blank" rel="noopener noreferrer">V2EX</a> 以及 <a href="https://0xffff.one/d/1521-nixos-yu-nix-flakes-xin-shou-ru-men/4" target="_blank" rel="noopener noreferrer">0xffff.one</a> 等平台上各位朋友的反馈、批评与建议 ❤️</p>
]]></content></entry><entry><title type="html">Linux 上的 WireGuard 网络分析（一）</title><link href="https://thiscute.world/posts/wireguard-on-linux/"/><id>https://thiscute.world/posts/wireguard-on-linux/</id><author><name>ryan4yin</name></author><published>2023-03-28T22:19:25+08:00</published><updated>2023-03-28T22:19:25+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/wireguard-on-linux/wireguard.png" height="1280" width="500"><figcaption></figcaption>
        </figure><blockquote>
<p>阅读此文章需要前置知识：Linux 网络基础知识、iptables、conntrack</p>
</blockquote>
<blockquote>
<p>本文内容部分采用了 Copilot 提示内容，也有部分内容用了 ChatGPT 免费版进行分析，确实都比较有帮助。</p>
</blockquote>
<p>最近因为工作需要研究了一波 WireGuard 协议，在这篇文章中简单记录下心得。</p>
<h2 id="wireguard-是什么" class="headerLink">
    <a href="#wireguard-%e6%98%af%e4%bb%80%e4%b9%88" class="header-mark"></a>WireGuard 是什么</h2><p>WireGuard 是极简主义思想下的 VPN 实现，解决了很多现存 VPN 协议存在的问题。
它于 2015 年由 Jason A. Donenfeld 设计实现，因其代码实现简洁易懂、配置简单、性能高、安全强度高而受到广泛关注。</p>
<p>WireGuard 在 2020 年初进入 Linux 主线分支，随后成为 Linux 5.6 的一个内核模块，这之后很快就涌现出许多基于 WireGuard 的开源项目与相关企业，各大老牌 VPN 服务商也逐渐开始支持 WireGuard 协议，很多企业也使用它来组建企业 VPN 网络。</p>
<p>基于 WireGuard 的明星开源项目举例：</p>
<ul>
<li><a href="https://github.com/tailscale/tailscale" target="_blank" rel="noopener noreferrer">tailscale</a>: 一套简单易用的 WireGuard VPN 私有网络解决方案，强烈推荐！</li>
<li><a href="https://github.com/juanfont/headscale" target="_blank" rel="noopener noreferrer">headscale</a>: tailscale 控制服务器的开源实现，使你可以自建 tailscale 服务。</li>
<li><a href="https://github.com/squat/kilo" target="_blank" rel="noopener noreferrer">kilo</a>: 基于 WireGuard 的 Kubernetes 多云网络解决方案。</li>
<li>&hellip;</li>
<li>除了上面这些，还有很多其他 WireGuard 项目，有兴趣可以去 <a href="https://github.com/cedrickchee/awesome-wireguard" target="_blank" rel="noopener noreferrer">awesome-wireguard</a> 仓库看看。</li>
</ul>
<p>WireGuard 本身只是一个点对点隧道协议，只提供点对点通信的能力（这也是其极简主义思想的体现）。而其他网络路由、NAT 穿越、DNS 解析、防火墙策略等功能都是基于 Linux 系统的现有工具来实现的。</p>
<p>在这篇文章里，我将搭建一个简单的单服务器 + 单客户端 WireGuard 网络，然后分析它如何使用 Linux 系统现有的工具，在 WireGuard 隧道上搭建出一个安全可靠的虚拟网络。</p>
<p>文章测试用到的服务器与客户端均为虚拟机，使用 Ubuntu 20.04 系统，内核版本为 5.15，也就是说都包含了 wireguard 内核模块。</p>
<h2 id="wireguard-服务端网络分析" class="headerLink">
    <a href="#wireguard-%e6%9c%8d%e5%8a%a1%e7%ab%af%e7%bd%91%e7%bb%9c%e5%88%86%e6%9e%90" class="header-mark"></a>WireGuard 服务端网络分析</h2><p>简单起见，这里使用 docker-compose 启动一个 WireGuard 服务端，使用的镜像是 <a href="https://github.com/linuxserver/docker-wireguard" target="_blank" rel="noopener noreferrer">linuxserver/docker-wireguard</a>。</p>
<p>配置文件如下，内容完全参考自此镜像的官方 README：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2.1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">wireguard</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">lscr.io/linuxserver/wireguard:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">wireguard</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cap_add</span><span class="p">:</span><span class="w">           
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">NET_ADMIN</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SYS_MODULE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=Etc/UTC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SERVERURL=auto  </span><span class="w"> </span><span class="c"># 自动确定服务器的外部 IP 地址，在生成客户端配置时会用到</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SERVERPORT=51820</span><span class="w"> </span><span class="c"># 服务端监听的端口号</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PEERS=1         </span><span class="w"> </span><span class="c"># 自动生成 1 个客户端配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PEERDNS=auto    </span><span class="w"> </span><span class="c"># 自动确定客户端的 DNS 服务器地址，同样是在生成客户端配置时会用到</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">INTERNAL_SUBNET=10.13.13.0   </span><span class="w"> </span><span class="c"># WireGuard 虚拟网络的网段</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">ALLOWEDIPS=0.0.0.0/0         </span><span class="w"> </span><span class="c"># 这条规则表示允许虚拟网络内的所有客户端将流量发送到此节点</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 众所周知，NAT 网络需要定期发送心跳包来保持 NAT 表内容不过期，俗称连接保活。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 这里设置为 all 表示所有客户端都开启连接保活。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PERSISTENTKEEPALIVE_PEERS=all </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">LOG_CONFS=true</span><span class="w"> </span><span class="c"># 开启日志</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./config:/config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/lib/modules:/lib/modules</span><span class="w"> </span><span class="c"># 将宿主机的内核模块挂载到容器内，用于加载 WireGuard 内核模块</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">51820</span><span class="p">:</span><span class="m">51820</span><span class="l">/udp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">sysctls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">net.ipv4.conf.all.src_valid_mark=1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>将上面的配置文件保存为 <code>docker-compose.yml</code>，然后通过如下命令后台启动 WireGuard 服务端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker-compose up -d
</span></span></code></pre></td></tr></table>
</div>
</div><p>WireGuard 服务端启动好了，现在查看下服务端容器的日志（我加了详细注释说明）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ docker logs wireguard
</span></span><span class="line"><span class="cl"><span class="c1"># ...省略若干内容</span>
</span></span><span class="line"><span class="cl">.:53                          <span class="c1"># 这几行日志是启动 CoreDNS，为虚拟网络提供默认的 DNS 服务</span>
</span></span><span class="line"><span class="cl">CoreDNS-1.10.1                <span class="c1"># 实际上 CoreDNS 不是必须的，客户端可以改用其他 DNS 服务器</span>
</span></span><span class="line"><span class="cl">linux/amd64, go1.20, 055b2c3
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link add wg0 type wireguard   # 创建一个 wireguard 设备</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] wg setconf wg0 /dev/fd/63        # 设置 wireguard 设备的配置</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 address add 10.13.13.1 dev wg0   # 为 wireguard 设备添加一个 ip 地址</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link set mtu 1420 up dev wg0        # 设置 wireguard 设备的 mtu</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 route add 10.13.13.2/32 dev wg0  # 为 wireguard peer1 添加路由，其地址来自 wireguard 配置的 `allowedIPs` 参数</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 下面这几条 iptables 命令为 wireguard 设备添加 NAT 规则，使其成为 WireGuard 虚拟网络的默认网关</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 并使虚拟网络内的其他 peers 能通过此默认网关访问外部网络。</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>ls.io-init<span class="o">]</span> <span class="k">done</span>.
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过日志能看到，程序首先创建了 WireGuard 设备 wg0 并绑定了地址 <code>10.13.13.1</code>。作为 WireGuard 网络中的服务端，它所创建的这个 wg0 的任务是成为整个 WireGuard 虚拟网络的默认网关，处理来自虚拟网络内的其他 peers 的流量，构成一个星型网络。</p>
<p>然后服务端为它所生成的 peer1 添加了一个路由，使得 peer1 的流量能够被正确路由到 wg0 设备上。</p>
<p>最后为了让 WireGuard 虚拟网络内的其他 peers 的流量能够通过 wg0 设备访问外部网络或者互相访问，服务端为 wg0 设备添加了如下的 iptables 规则：</p>
<ul>
<li><code>iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT;</code>：允许进出 wg0 设备的数据包通过 netfilter 的 FORWARD 链（默认规则是 DROP，即默认是不允许通过的）</li>
<li><code>iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE</code>：在 eth+ 网卡上添加 MASQUERADE 规则，即将数据包的源地址伪装成 eth+ 网卡的地址，目的是为了允许 wireguard 的数据包通过 NAT 访问外部网络。
<ul>
<li>而回来的流量会被 NAT 的 conntrack 链接追踪规则自动允许通过，不过 conntrack 表有自动清理机制，长时间没流量的话会被从 conntrack 表中移除。这就是前面 <code>docker-compose.yml</code> 中的 <code>PERSISTENTKEEPALIVE_PEERS=all</code> 参数解决的问题通过定期发送心跳包来保持 conntrack 表中的连接信息。</li>
<li>这里还涉及到了 NAT 穿越相关内容，就不多展开了，感兴趣的可以自行了解。</li>
</ul>
</li>
</ul>
<p>WireGuard 的实现中还有一个比较重要的概念叫做 <code>AllowedIPs</code>，它是一个 IP 地址列表，表示允许哪些 IP 地址的流量通过 WireGuard 虚拟网络。
为了详细说明这一点，我们先看下服务端配置文件夹中 wg0 的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat wg0.conf
</span></span><span class="line"><span class="cl"><span class="o">[</span>Interface<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Address</span> <span class="o">=</span> 10.13.13.1
</span></span><span class="line"><span class="cl"><span class="nv">ListenPort</span> <span class="o">=</span> <span class="m">51820</span>
</span></span><span class="line"><span class="cl"><span class="nv">PrivateKey</span> <span class="o">=</span> kGZzt/CU2MVgq19ffXB2YMDSr6WIhlkdlL1MOeGH700<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1"># wg0 隧道启动后添加 iptables 规则</span>
</span></span><span class="line"><span class="cl"><span class="nv">PostUp</span> <span class="o">=</span> iptables -A FORWARD -i %i -j ACCEPT<span class="p">;</span> iptables -A FORWARD -o %i -j ACCEPT<span class="p">;</span> iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE
</span></span><span class="line"><span class="cl"><span class="c1"># wg0 隧道停止后删除前面添加的 iptables 规则</span>
</span></span><span class="line"><span class="cl"><span class="nv">PostDown</span> <span class="o">=</span> iptables -D FORWARD -i %i -j ACCEPT<span class="p">;</span> iptables -D FORWARD -o %i -j ACCEPT<span class="p">;</span> iptables -t nat -D POSTROUTING -o eth+ -j MASQUERADE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Peer<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="c1"># peer1</span>
</span></span><span class="line"><span class="cl"><span class="nv">PublicKey</span> <span class="o">=</span> HR8Kp3xWIt2rNdS3aaCk+Ss7yQqC9cn6h3WS6UK3WE0<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">PresharedKey</span> <span class="o">=</span> 7mCNCZdMKeRz1Zrpl9bFS08jJAdv6/USazRVq7tjznY<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1"># AllowedIPs 设置为 peer1 的虚拟 IP 地址，表示允许 peer1 的流量通过 WireGuard 虚拟网络</span>
</span></span><span class="line"><span class="cl"><span class="nv">AllowedIPs</span> <span class="o">=</span> 10.13.13.2/32
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>AllowedIPs</code> 实际就是每个 peer 在服务端路由表中的 ip 地址，它既可以是 ip 也可以是网段，而且能设置多个，这使所有 peer 都可以负责一个甚至多个 ip 段的转发，也就是充当局域网的路由器——VPN 子路由。</p>
<p>WireGuard 本身只是一个点对点隧道协议，它非常通用。通过 <code>AllowedIPs</code> 参数，我们就能在每个 peer 上添加各 peers 的配置与不同的路由规则，构建出各种复杂的网络拓扑，比如星型、环型、树型等等。</p>
<h2 id="wireguard-客户端网络分析" class="headerLink">
    <a href="#wireguard-%e5%ae%a2%e6%88%b7%e7%ab%af%e7%bd%91%e7%bb%9c%e5%88%86%e6%9e%90" class="header-mark"></a>WireGuard 客户端网络分析</h2><p>现在换台虚拟机跑 WireGuard 客户端，首先需要安装 wireguard 命令行工具：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo apt install wireguard resolvconf
</span></span></code></pre></td></tr></table>
</div>
</div><p>第二步是从服务端的配置文件夹中找到 <code>peer1/peer1.conf</code>，它是服务端容器根据参数 <code>PEERS=1</code> 自动生成的客户端配置文件，先确认下它的内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ <span class="nb">cd</span> ./config/peer1
</span></span><span class="line"><span class="cl">$ cat peer1.conf
</span></span><span class="line"><span class="cl"><span class="o">[</span>Interface<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">Address</span> <span class="o">=</span> 10.13.13.2
</span></span><span class="line"><span class="cl"><span class="nv">PrivateKey</span> <span class="o">=</span> +GLDb5QQOHQ2QKWvuFS/4FiWpnivaxzwlm0QmFJIHV8<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">ListenPort</span> <span class="o">=</span> <span class="m">51820</span>
</span></span><span class="line"><span class="cl"><span class="nv">DNS</span> <span class="o">=</span> 10.13.13.1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">[</span>Peer<span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="nv">PublicKey</span> <span class="o">=</span> <span class="nv">t95vF4b11RLCId3ArVVIJoC5Ih9CNbI0VTNuDuEzZyw</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">PresharedKey</span> <span class="o">=</span> 7mCNCZdMKeRz1Zrpl9bFS08jJAdv6/USazRVq7tjznY<span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 需要注意的是这个 Peer Endpoint 的 IP 是否正确</span>
</span></span><span class="line"><span class="cl"><span class="nv">Endpoint</span> <span class="o">=</span> 192.168.5.198:51820
</span></span><span class="line"><span class="cl"><span class="nv">AllowedIPs</span> <span class="o">=</span> 0.0.0.0/0
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>插入下，这个 Endpoint 的地址也很值得一说，能看到服务端 wg0.conf 的配置中，peer1 并未被设置任何 Endpoint，这实质是表示这个 peer1 的 Endpoint 是动态的，也就是说每次 peer1 发送数据到服务端 wg0 时，服务端通过认证加密技术认证了数据后，就会以数据包的来源 IP 地址作为 peer1 的 Endpoint，这样 peer1 就可以随意更换自己的 IP 地址（Roaming），而 WireGuard 隧道仍然能正常工作（IP 频繁更换的一个典型场景就是手机的网络漫游与 WiFi 切换）。这使 WireGuard 具备了比较明显的无连接特性，也就是说 WireGuard 隧道不需要保持一个什么连接，切换网络也不需要重连，只要数据包能够到达服务端，就能够正常工作。</p>
</blockquote>
<p>因为我这里是内网环境测试，配置文件中的 <code>Peer</code> - <code>Endpoint</code> 的 IP 地址直接用服务端的内网 IP 地址就行，也就是 <code>192.168.5.198</code>。</p>
<blockquote>
<p>如果你的服务端有公网 IP 地址（比如是云服务器，或者通过端口映射用家庭宽带的动态公网 IP），这个 Endpoint 地址也可以使用该公网 IP 地址，效果是一样的。</p>
</blockquote>
<p>配置文件确认无误后，将该配置文件保存到客户端的 <code>/etc/wireguard/peer1.conf</code> 这个路径下，然后使用如下命令启动 WireGuard 客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo wg-quick up peer1
</span></span></code></pre></td></tr></table>
</div>
</div><p>上述命令会自动在 <code>/etc/wireguard/</code> 目录下找到名为 <code>peer1.conf</code> 的配置文件，然后根据其内容启动一个名为 <code>peer1</code> 的 WireGuard 设备并完成对应配置。</p>
<p>我启动时的日志如下，wg-quick 打印出了它执行的所有网络相关指令（我添加了详细的注释）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo wg-quick up peer1
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link add peer1 type wireguard        # 创建一个名为 peer1 的 WireGuard 设备</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] wg setconf peer1 /dev/fd/63             # 设置 peer1 设备的配置</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 address add 10.13.13.2 dev peer1  # 设置 peer1 设备的 IP 地址</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link set mtu 1420 up dev peer1       # 设置 peer1 设备的 MTU</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] resolvconf -a tun.peer1 -m 0 -x  # 设置 peer1 设备的 DNS，确保 DNS 能够正常工作</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] wg set peer1 fwmark 51820        # 将 peer1 设备的防火墙标记设为 51820，用于标记 WireGuard 出站流量</span>
</span></span><span class="line"><span class="cl">                                     <span class="c1"># 在后面的路由策略中会使用该标记使 WireGuard 出站流量走默认路由表</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 route add 0.0.0.0/0 dev peer1 table 51820     # 创建单独的路由表 51820，默认将所有流量转发到 peer1 接口</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 rule add not fwmark 51820 table 51820         # 所有不带 51820 标记的流量（普通流量），都转发到前面新建的路由表 51820</span>
</span></span><span class="line"><span class="cl">                                                        <span class="c1"># 也就是所有普通流量都转发到 peer1 接口</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 rule add table main suppress_prefixlength 0   # 流量全都走 main 路由表（即默认路由表），但是排除掉前缀长度（掩码） &lt;= 0 的流量</span>
</span></span><span class="line"><span class="cl">                                                        <span class="c1"># 掩码 &lt;= 0 的只有 0.0.0.0/0，即默认路由。所以意思是所有非默认路由策略的流量都走 main 路由表</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] sysctl -q net.ipv4.conf.all.src_valid_mark=1        # 启用源地址有效性检查，用于防止伪造源地址</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] nft -f /dev/fd/63                                   # 配置 nftables 规则，用于确保 WireGuard 流量能正确路由，并防止恶意数据包进入网络</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>跑完后我们现在确认下状态，应该是能正常走 WireGuard 访问相关网络了，可以 WireShark 抓个包确认下。</p>
<blockquote>
<p>如果网络不通，那肯定是中间哪一步配置有问题，可以根据上面的日志一步步排查网络接口、路由表、路由策略、iptables/nftables 的配置，必要时可以通过 WireShark 抓包定位。</p>
</blockquote>
<p>现在再检查下系统的网络状态，首先检查下路由表，会发现路由表没任何变化：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ip route ls
</span></span><span class="line"><span class="cl">default via 192.168.5.201 dev eth0 proto static 
</span></span><span class="line"><span class="cl">192.168.5.0/24 dev eth0 proto kernel scope link src 192.168.5.197 
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是我们的 WireGuard 隧道已经生效了，这就说明现在我们的流量已经不是直接走上面这个默认路由表了，还有其他配置在起作用。
往回看看前面的客户端启动日志，其中显示 wg-quick 创建了一个名为 51820 的路由表，我们来检查下这个表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ryan@ubuntu-2004-builder:~$ ip route ls table <span class="m">51820</span>
</span></span><span class="line"><span class="cl">default dev peer1 scope link
</span></span></code></pre></td></tr></table>
</div>
</div><p>能看到这个表确实是将所有流量都转发到了 WireGuard 的 peer1 接口，基本能确认现在流量都走了这个路由表。
那么问题来了，系统的流量是如何被转发到这个路由表的呢？为什么默认的路由表现在不生效了？</p>
<p>要理清这个问题，需要补充点知识——Linux 从 2.2 开始支持了多路由表，并通过路由策略数据库来为每个数据包选择正确的路由表，这个路由策略数据库可以通过 <code>ip rule</code> 命令来查看、修改。</p>
<p>前置知识补充完毕，现在来看下系统当前的路由策略，同样我已经补充好了注释：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ ip rule show
</span></span><span class="line"><span class="cl">0:      from all lookup <span class="nb">local</span>   <span class="c1"># 0 是最高优先级，`all` 表示所有流量，`lookup local` 表示查找 local 路由表。</span>
</span></span><span class="line"><span class="cl">                                <span class="c1"># local 是一个特殊路由表，包含对本地和广播地址的优先级控制路由。</span>
</span></span><span class="line"><span class="cl">32764:  from all lookup main suppress_prefixlength <span class="m">0</span>  <span class="c1"># 32764 目前是第二优先级，将所有流量路由到 main 路由表，但是排除掉默认路由（前缀/掩码 &lt;= 0）</span>
</span></span><span class="line"><span class="cl">                                                      <span class="c1"># 功能是让所有非默认路由的流量都走 main 路由表</span>
</span></span><span class="line"><span class="cl">                                                      <span class="c1"># 这条规则前面实际解释过了，它是 wg-quick 在启动隧道时添加的规则。</span>
</span></span><span class="line"><span class="cl">32765:  not from all fwmark 0xca6c lookup <span class="m">51820</span> <span class="c1"># 所有不带 0xca6c 标记（51820 的 16 进制格式）的流量（普通流量），都走 51820 路由表</span>
</span></span><span class="line"><span class="cl">                                                <span class="c1"># 也就是都转发到 WireGuard peer1 接口。</span>
</span></span><span class="line"><span class="cl">                                                <span class="c1"># 这条规则是前面的 `ip -4 rule add not fwmark 51820 table 51820` 命令添加的。</span>
</span></span><span class="line"><span class="cl">                                                <span class="c1"># 而它所匹配的防火墙标记则是由前面的 `wg set peer1 fwmark 51820` 命令设置的。</span>
</span></span><span class="line"><span class="cl">32766:  from all lookup main    <span class="c1"># 所有流量都走 main 路由表，当前是不生效状态，因为前面的规则优先级更高。</span>
</span></span><span class="line"><span class="cl">                                <span class="c1"># main 是系统的默认路由表，通常我们使用 ip route 命令都是在这个表上操作。</span>
</span></span><span class="line"><span class="cl">32767:  from all lookup default <span class="c1"># 所有流量都走 default 路由表，当前同样是不生效状态。</span>
</span></span><span class="line"><span class="cl">                                <span class="c1"># default 是一个系统生成的兜底路由表，默认不包含任何路由规则，可用于自定义路由策略，也可删除。</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>结合注释看完上面的路由策略，现在你应该理清楚 WireGuard 的路由规则了，它加了条比默认路由策略 <code>32766</code> 优先级更高的路由策略 <code>32765</code>，将所有普通流量都通过它的自定义路由表路由到 peer1 接口。
另一方面 peer1 接口在前面已经被打了 fwmark 标记 <code>51820</code> 也就是 16 进制的 0xca6c，所以 peer1 出站到服务端的流量不会被 <code>32765</code> 匹配到，所以会走优先级更低的 <code>32766</code> 策略，也就是走了 main 路由表。</p>
<p>另外 <code>32764</code> 这条路由策略有点特殊，这里也简单解释下，此策略在前面注释中已经做了解释——是让所有非默认路由的流量都走 main 路由表，而 main 路由表中的非默认路由一般都是其他程序自动管理添加的，或者是我们手动添加的，所以这条规则其实就是确保这些路由策略仍然有效，避免 WireGuard 策略把它们覆盖掉而导致问题。</p>
<p>前面都分析完了，现在还剩下 wg-quick 日志的最后一行 <code>nft -f /dev/fd/63</code>，它到底做了什么呢？
nft 是 nftables 的命令行工具名称，所以它实际是设置了一些 nftables 规则，我们查看下它的规则内容：</p>
<blockquote>
<p>注意：nftables 的这些 chain 名称是完全自定义的，没啥特殊意义</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo nft list ruleset
</span></span><span class="line"><span class="cl">table ip wg-quick-peer1 <span class="o">{</span>
</span></span><span class="line"><span class="cl">        chain preraw <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">type</span> filter hook prerouting priority raw<span class="p">;</span> policy accept<span class="p">;</span>
</span></span><span class="line"><span class="cl">                iifname !<span class="o">=</span> <span class="s2">&#34;peer1&#34;</span> ip daddr 10.13.13.2 fib saddr <span class="nb">type</span> !<span class="o">=</span> <span class="nb">local</span> drop
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        chain premangle <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">type</span> filter hook prerouting priority mangle<span class="p">;</span> policy accept<span class="p">;</span>
</span></span><span class="line"><span class="cl">                meta l4proto udp meta mark <span class="nb">set</span> ct mark
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        chain postmangle <span class="o">{</span>
</span></span><span class="line"><span class="cl">                <span class="nb">type</span> filter hook postrouting priority mangle<span class="p">;</span> policy accept<span class="p">;</span>
</span></span><span class="line"><span class="cl">                meta l4proto udp meta mark 0x0000ca6c ct mark <span class="nb">set</span> meta mark
</span></span><span class="line"><span class="cl">        <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到这里是创建了一个 <code>wg-quick-peer1</code> 表，通过该表在 netfilter 上设置了如下规则：</p>
<ol>
<li><code>preraw</code> 链：此链用于防止恶意数据包进入网络。
<ol>
<li>type 开头的一行是规则的类型，这里是 <code>filter</code>，仅匹配了 <code>raw</code> 链的 <code>prerouting</code> 表。</li>
<li>它丢弃掉所有来源接口不是 peer1、目的地址是 10.13.13.2、且源地址不是本地地址的数据包。</li>
<li>总结下就是只允许本地地址或者 peer1 直接访问 10.13.13.2 这个地址。</li>
</ol>
</li>
<li><code>premangle</code> 链：此链用于确保所有 UDP 数据包都能被正确从 WireGuard 接口入站。
<ol>
<li>它将所有 UDP 数据包的标记设置为连接跟踪标记（没搞懂这个标记是如何生效的&hellip;.）。</li>
</ol>
</li>
<li><code>postmangle</code> 链：此链用于确保所有 UDP 数据包都能被正确从 WireGuard 接口出站。
<ol>
<li>它将所有 UDP 数据包的标记设置为 0xca6c（51820 的 16 进制格式）（同样没理解这个标记是如何生效的&hellip;）。</li>
</ol>
</li>
</ol>
<p>最后看下 WireGuard 的状态，它是前面 <code>wg setconf peer1 /dev/fd/63</code> 设置的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ryan@ubuntu-2004-builder:~$ sudo wg show 
</span></span><span class="line"><span class="cl">interface: peer1
</span></span><span class="line"><span class="cl">  public key: HR8Kp3xWIt2rNdS3aaCk+Ss7yQqC9cn6h3WS6UK3WE0<span class="o">=</span>
</span></span><span class="line"><span class="cl">  private key: <span class="o">(</span>hidden<span class="o">)</span>
</span></span><span class="line"><span class="cl">  listening port: <span class="m">51820</span>
</span></span><span class="line"><span class="cl">  fwmark: 0xca6c
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">peer: <span class="nv">t95vF4b11RLCId3ArVVIJoC5Ih9CNbI0VTNuDuEzZyw</span><span class="o">=</span>
</span></span><span class="line"><span class="cl">  preshared key: <span class="o">(</span>hidden<span class="o">)</span>
</span></span><span class="line"><span class="cl">  endpoint: 192.168.5.198:51820
</span></span><span class="line"><span class="cl">  allowed ips: 0.0.0.0/0
</span></span><span class="line"><span class="cl">  latest handshake: <span class="m">18</span> minutes, <span class="m">59</span> seconds ago
</span></span><span class="line"><span class="cl">  transfer: <span class="m">124</span> B received, <span class="m">324</span> B sent
</span></span></code></pre></td></tr></table>
</div>
</div><p>分析完毕，现在关闭掉 WireGuard 客户端，将客户端主机的网络恢复到正常状态。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ sudo wg-quick down peer1
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 rule delete table 51820</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip -4 rule delete table main suppress_prefixlength 0</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] ip link delete dev peer1</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] resolvconf -d tun.peer1 -f</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span><span class="c1">#] nft -f /dev/fd/63</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>一通分析，你是否感觉到了 wg-quick 的实现十分巧妙，通过简单几行 iptables/nftables 与 iproute2 命令就在 WireGuard 隧道上实现了一个 VPN 网络，更妙的是只要把新增的这些 iptables/nftables 与 iproute2 规则删除，就能恢复到 WireGuard 未启动的状态，相当于整个工作是完全可逆的（显然前面的 <code>sudo wg-quick down peer1</code> 就是这么干的）。</p>
<p>总之这篇文章简单分析了 wireguard 虚拟网络在 Linux 上的实现，希望对你有所帮助。</p>
<p>下一篇文章（如果有的话&hellip;），我会带来更多的 WireGuard 实现细节，敬请期待。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://www.wireguard.com/protocol/" target="_blank" rel="noopener noreferrer">wireguard protocol</a>： 官方文档还有官方的白皮书，都写得很清晰易懂。</li>
<li><a href="https://zhuanlan.zhihu.com/p/404402933" target="_blank" rel="noopener noreferrer">WireGuard到底好在哪？</a>: 比较深入浅出的随想，值得一读。</li>
<li><a href="https://ro-che.info/articles/2021-02-27-linux-routing" target="_blank" rel="noopener noreferrer">Understanding modern Linux routing (and wg-quick)</a>: 对 WireGuard 客户端用到的多路由表与路由策略技术做了详细的介绍。
<ul>
<li>它的中文翻译：<a href="https://icloudnative.io/posts/linux-routing-of-wireguard/" target="_blank" rel="noopener noreferrer">WireGuard 基础教程：wg-quick 路由策略解读 - 米开朗基扬</a></li>
</ul>
</li>
</ul>
]]></content></entry><entry><title type="html">EE 入门（二） - 使用 ESP32 与 SPI 显示屏绘图、显示图片、跑贪吃蛇</title><link href="https://thiscute.world/posts/ee-basics-2-esp32-display/"/><id>https://thiscute.world/posts/ee-basics-2-esp32-display/</id><author><name>ryan4yin</name></author><published>2023-03-05T21:57:01+08:00</published><updated>2023-03-05T21:57:01+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/ee-basics-2-esp32-display/tft_esp32_show_image-2.webp" height="1333" width="1000"><figcaption></figcaption>
        </figure><h2 id="零硬件准备与依赖库调研" class="headerLink">
    <a href="#%e9%9b%b6%e7%a1%ac%e4%bb%b6%e5%87%86%e5%a4%87%e4%b8%8e%e4%be%9d%e8%b5%96%e5%ba%93%e8%b0%83%e7%a0%94" class="header-mark"></a>零、硬件准备与依赖库调研</h2><p>之前淘货买了挺多显示屏的，本文使用的是这一块：</p>
<ul>
<li><a href="http://www.lcdwiki.com/3.5inch_SPI_Module_ILI9488_SKU:MSP3520" target="_blank" rel="noopener noreferrer">3.5 寸电阻触摸屏，480 * 320，SPI 协议，显示屏驱动 IC 为 ILI9488</a></li>
</ul>
<p>开发板是 ESP-WROOM-32 模组开发板。
其他需要的东西：杜邦线、面包板、四个 10 K$\Omega$ 电阻、四个按键。</p>
<p>至于需要的依赖库，我找到如下几个 stars 数较高的支持 ILI9488 + ESP32 的显示屏驱动库：</p>
<ul>
<li><a href="https://github.com/Bodmer/TFT_eSPI" target="_blank" rel="noopener noreferrer">Bodmer/TFT_eSPI</a>: 一个基于 Arudino 框架的 tft 显示屏驱动，支持 STM32/ESP32 等多种芯片。</li>
<li><a href="https://github.com/lvgl/lv_port_esp32" target="_blank" rel="noopener noreferrer">lv_port_esp32</a>: lvgl 官方提供的 esp32 port，但是几百年不更新了，目前仅支持到 esp-idf v4，试用了一波被坑了，不建议使用。</li>
<li><a href="https://github.com/espressif/esp-idf/tree/master/examples/peripherals/lcd" target="_blank" rel="noopener noreferrer">esp-idf/peripherals/lcd</a>: ESP 官方的 lcd 示例，不过仅支持部分常见显示屏驱动，比如我这里用的 ili9488 官方就没有。</li>
</ul>
<p>总之强烈推荐 TFT_eSPI 这个库，很好用，而且驱动支持很齐全。</p>
<h2 id="一开发环境搭建电路搭建与测试" class="headerLink">
    <a href="#%e4%b8%80%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba%e7%94%b5%e8%b7%af%e6%90%ad%e5%bb%ba%e4%b8%8e%e6%b5%8b%e8%af%95" class="header-mark"></a>一、开发环境搭建、电路搭建与测试</h2><h3 id="1-创建项目并配置好环境" class="headerLink">
    <a href="#1-%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae%e5%b9%b6%e9%85%8d%e7%bd%ae%e5%a5%bd%e7%8e%af%e5%a2%83" class="header-mark"></a>1. 创建项目并配置好环境</h3><p>ESP32 开发有好几种方式：</p>
<ol>
<li>vscode 的 esp-idf 插件 + 官方的 esp-idf 工具</li>
<li>vscode 的 platformio 插件 + arudino 框架</li>
</ol>
<p><a href="https://github.com/Bodmer/TFT_eSPI" target="_blank" rel="noopener noreferrer">Bodmer/TFT_eSPI</a> 这个依赖库两种方式都支持，不过看了下官方文档，仓库作者表示 ESP-IDF 的支持是其他人提供的，他不保证能用，所以稳妥起见我选择了 PlatformIO + Arduino 框架作为开发环境。</p>
<p>首先当然是创建一个空项目，点击 VSCode 侧栏的 PlatformIO 图标，再点击列表中的 <code>PlatformIO Core CLI</code> 选项进入 shell 执行如下命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pio project init --ide<span class="o">=</span>vscode -d tft_esp32_arduino
</span></span></code></pre></td></tr></table>
</div>
</div><p>这条命令会创建一个空项目，并配置好 vscode 插件相关配置，这样就算完成了一个空的项目框架。</p>
<h3 id="1-显示屏接线与项目参数配置" class="headerLink">
    <a href="#1-%e6%98%be%e7%a4%ba%e5%b1%8f%e6%8e%a5%e7%ba%bf%e4%b8%8e%e9%a1%b9%e7%9b%ae%e5%8f%82%e6%95%b0%e9%85%8d%e7%bd%ae" class="header-mark"></a>1. 显示屏接线与项目参数配置</h3><p>网上简单搜了下 ESP32 pinout，找到这张图，引脚定义与我的 ESP32 开发板完全一致，用做接线参考：</p>
<figure><img src="/images/ee-basics-2-esp32-display/ESP32-DOIT-DEVKIT-V1-Board-Pinout-36-GPIOs-updated.webp" width="70%"/>
</figure>

<p>可以看到这块 ESP32 开发板有两个 SPI 端口：HSPI 跟 VSPI，这里我们使用 HSPI，那么 MOSI/MISO/SCK 三个引脚的接线必须与上图的定义完全一致。
而其他引脚随便找个普通 GPIO 口接上就行。</p>
<p>此外背光灯的线我试了下接 GPIO 口不好使，建议直接接在 3V3 引脚上（缺点就是没法通过程序关闭背光，问题不大）。</p>
<p>我的接线如下：</p>
<p><figure><img src="/images/ee-basics-2-esp32-display/esp32-spi-display-wiring.webp" width="70%"/><figcaption>
            <h4>使用 wokwi.com 制作的示意图</h4>
        </figcaption>
</figure>

<figure><img src="/images/ee-basics-2-esp32-display/esp32-spi-display-wiring-real.webp" width="70%"/><figcaption>
            <h4>接线实操</h4>
        </figcaption>
</figure>
</p>
<p>线接好后需要更新下 PlatformIO 项目根目录 <code>platformio.ini</code> 的配置，使其显示屏引脚相关的参数与我们的接线完全对应起来，这样才能正常驱动这个显示屏。</p>
<p>这里我以驱动库官方提供的模板 <a href="https://github.com/Bodmer/TFT_eSPI/tree/master/docs/PlatformIO" target="_blank" rel="noopener noreferrer">Bodmer/TFT_eSPI/docs/PlatformIO</a> 为基础，更新了其构建参数对应的引脚，加了点注释，得到的内容如下（如果你的接线与我一致，直接抄就行）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[env:esp32dev]</span>
</span></span><span class="line"><span class="cl"><span class="na">platform</span> <span class="o">=</span> <span class="s">espressif32</span>
</span></span><span class="line"><span class="cl"><span class="na">board</span> <span class="o">=</span> <span class="s">esp32dev</span>
</span></span><span class="line"><span class="cl"><span class="na">framework</span> <span class="o">=</span> <span class="s">arduino</span>
</span></span><span class="line"><span class="cl"><span class="na">lib_deps</span> <span class="o">=</span><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">  bodmer/TFT_eSPI@^2.5.0
</span></span></span><span class="line"><span class="cl"><span class="s">  Bodmer/TFT_eWidget@^0.0.5</span>
</span></span><span class="line"><span class="cl"><span class="na">monitor_speed</span> <span class="o">=</span> <span class="s">115200</span>
</span></span><span class="line"><span class="cl"><span class="na">build_flags</span> <span class="o">=</span><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s">  -Os
</span></span></span><span class="line"><span class="cl"><span class="s">  -DCORE_DEBUG_LEVEL=ARDUHAL_LOG_LEVEL_DEBUG
</span></span></span><span class="line"><span class="cl"><span class="s">  -DUSER_SETUP_LOADED=1
</span></span></span><span class="line"><span class="cl"><span class="s">  
</span></span></span><span class="line"><span class="cl"><span class="s">  ; Define the TFT driver, pins etc here:
</span></span></span><span class="line"><span class="cl"><span class="s">  ; 显示屏驱动要对得上
</span></span></span><span class="line"><span class="cl"><span class="s">  -DILI9488_DRIVER=1
</span></span></span><span class="line"><span class="cl"><span class="s">  # 宽度与高度
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_WIDTH=480
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_HEIGHT=320
</span></span></span><span class="line"><span class="cl"><span class="s">  # SPI 引脚的接线方式，
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_MISO=12
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_MOSI=13
</span></span></span><span class="line"><span class="cl"><span class="s">  # SCLK 在显示屏上对应的引脚可能叫 SCK，是同一个东西
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_SCLK=14
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_CS=15
</span></span></span><span class="line"><span class="cl"><span class="s">  # DC 在显示屏上对应的引脚可能叫 RS 或者 DC/RS，是同一个东西
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_DC=4
</span></span></span><span class="line"><span class="cl"><span class="s">  -DTFT_RST=2
</span></span></span><span class="line"><span class="cl"><span class="s">  # 背光暂时直接接在 3V3 上
</span></span></span><span class="line"><span class="cl"><span class="s">  ; -DTFT_BL=27
</span></span></span><span class="line"><span class="cl"><span class="s">  # 触摸，暂时不用
</span></span></span><span class="line"><span class="cl"><span class="s">  ;-DTOUCH_CS=22
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_GLCD=1
</span></span></span><span class="line"><span class="cl"><span class="s">  # 其他配置，保持默认即可
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT2=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT4=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT6=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT7=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_FONT8=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DLOAD_GFXFF=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DSMOOTH_FONT=1
</span></span></span><span class="line"><span class="cl"><span class="s">  -DSPI_FREQUENCY=27000000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>修好后保存修改，platformio 将会自动检测到配置文件变更，并根据配置文件下载 Arduino/ESP32 工具链，更新构建配置、拉取依赖库（建议开个全局代理，不然下载会贼慢）。</p>
<h3 id="3-测试验证" class="headerLink">
    <a href="#3-%e6%b5%8b%e8%af%95%e9%aa%8c%e8%af%81" class="header-mark"></a>3. 测试验证</h3><p>现在找几个 demo 跑跑看，新建文件 <code>src/main.ino</code>，从如下文件夹中随便找个 demo copy 进去然后编译上传，看看效果：</p>
<ul>
<li><a href="https://github.com/Bodmer/TFT_eSPI/blob/master/examples/480%20x%20320" target="_blank" rel="noopener noreferrer">Bodmer/TFT_eSPI - examples/480x320</a></li>
</ul>
<blockquote>
<p>可以直接从 libdeps 中 copy exmaples 代码过来测试：<code>cp .pio/libdeps/esp32dev/TFT_eSPI/examples/480\ x\ 320/TFT_Meters/TFT_Meters.ino src/main.ino</code></p>
</blockquote>
<p>我跑出来的效果：</p>
<p><figure><img src="/images/ee-basics-2-esp32-display/tft_esp32_meters_demo_2.webp" width="60%"/>
</figure>

<figure><img src="/images/ee-basics-2-esp32-display/tft_esp32_sin_cosin_chart_2.webp" width="60%"/>
</figure>
</p>
<h2 id="二显示图片文字" class="headerLink">
    <a href="#%e4%ba%8c%e6%98%be%e7%a4%ba%e5%9b%be%e7%89%87%e6%96%87%e5%ad%97" class="header-mark"></a>二、显示图片、文字</h2><p>这需要首先将图片/文字转换成 bitmap 格式的 C 代码，可使用在线工具 <a href="https://github.com/javl/image2cpp" target="_blank" rel="noopener noreferrer">javl/image2cpp</a> 进行转换，简单演示下：</p>
<figure><img src="/images/ee-basics-2-esp32-display/how-to-use-image2cpp.webp" width="50%"/>
</figure>

<p>注意高度与宽度调整为与屏幕大小一致，设置放缩模式，然后色彩改为 RGB565，最后上传图片、生成代码。</p>
<p>将生成好的代码贴到 <code>src/test_img.h</code> 中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">// We need this header file to use FLASH as storage with PROGMEM directive:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Icon width and height
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">imgWidth</span> <span class="o">=</span> <span class="mi">480</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">imgHeight</span> <span class="o">=</span> <span class="mi">320</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// &#39;evt_source&#39;, 480x320px
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">const</span> <span class="kt">uint16_t</span> <span class="n">epd_bitmap_evt_source</span> <span class="p">[]</span> <span class="n">PROGMEM</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 这里省略掉图片内容......
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后写个主程序 <code>src/main.ino</code> 显示图像：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;TFT_eSPI.h&gt;       // Hardware-specific library</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">TFT_eSPI</span> <span class="n">tft</span> <span class="o">=</span> <span class="nf">TFT_eSPI</span><span class="p">();</span>  <span class="c1">// Invoke custom library
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// Include the header files that contain the icons
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#include</span> <span class="cpf">&#34;test_img.h&#34;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Serial</span><span class="p">.</span><span class="nf">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">setRotation</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>	<span class="c1">// landscape
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">fillScreen</span><span class="p">(</span><span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Swap the colour byte order when rendering
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">tft</span><span class="p">.</span><span class="nf">setSwapBytes</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// 显示图片
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">tft</span><span class="p">.</span><span class="nf">pushImage</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">imgWidth</span><span class="p">,</span> <span class="n">imgHeight</span><span class="p">,</span> <span class="n">epd_bitmap_evt_source</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">delay</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>编译上传，效果如下：</p>
<figure><img src="/images/ee-basics-2-esp32-display/tft_esp32_show_image-2.webp" width="60%"/>
</figure>

<h2 id="三写个极简贪吃蛇游戏" class="headerLink">
    <a href="#%e4%b8%89%e5%86%99%e4%b8%aa%e6%9e%81%e7%ae%80%e8%b4%aa%e5%90%83%e8%9b%87%e6%b8%b8%e6%88%8f" class="header-mark"></a>三、写个极简贪吃蛇游戏</h2><p>N 年前我写的第一篇博客文章，是用 C 语言写一个贪吃蛇，这里把它移植过来玩玩看~</p>
<p>我的旧文章地址为：<a href="https://www.cnblogs.com/kirito-c/p/5596160.html" target="_blank" rel="noopener noreferrer">贪吃蛇—C—基于easyx图形库(下):从画图程序到贪吃蛇【自带穿墙术】 </a>，里面详细介绍了程序的思路。</p>
<p>那么现在开始代码移植，TFT 屏幕前面已经接好了不需要动，要改的只有软件部分，还有就是添加上下左右四个按键的电路。</p>
<p>首先清空 <code>src</code> 文件夹，新建文件 <code>src/main.ino</code>，内容如下，其中主要逻辑均移植自我前面贴的文章：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span><span class="lnt">184
</span><span class="lnt">185
</span><span class="lnt">186
</span><span class="lnt">187
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;math.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;TFT_eSPI.h&gt; // Hardware-specific library</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#define WIDTH 480
</span></span></span><span class="line"><span class="cl"><span class="cp">#define HEIGHT 320
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 四个方向键对应的 GPIO 引脚
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cp">#define BUTTON_UP_PIN     5
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BUTTON_LEFT_PIN   18
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BUTTON_DOWN_PIN   19
</span></span></span><span class="line"><span class="cl"><span class="cp">#define BUTTON_RIGHT_PIN  21
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="n">TFT_eSPI</span> <span class="n">tft</span> <span class="o">=</span> <span class="nf">TFT_eSPI</span><span class="p">();</span> <span class="c1">// Invoke custom library
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">Position</span> <span class="c1">// 坐标结构
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="n">Pos</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Pos</span> <span class="n">SNAKE</span><span class="p">[</span><span class="mi">3000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="n">Pos</span> <span class="n">DIRECTION</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="n">Pos</span> <span class="n">EGG</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="kt">long</span> <span class="n">SNAKE_LEN</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Serial</span><span class="p">.</span><span class="nf">begin</span><span class="p">(</span><span class="mi">115200</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">begin</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">setRotation</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// landscape
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">fillScreen</span><span class="p">(</span><span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// Swap the colour byte order when rendering
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">tft</span><span class="p">.</span><span class="nf">setSwapBytes</span><span class="p">(</span><span class="nb">true</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1">// initialize the pushbutton pin as an input: the default state is LOW
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">pinMode</span><span class="p">(</span><span class="n">BUTTON_UP_PIN</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pinMode</span><span class="p">(</span><span class="n">BUTTON_LEFT_PIN</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pinMode</span><span class="p">(</span><span class="n">BUTTON_DOWN_PIN</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="nf">pinMode</span><span class="p">(</span><span class="n">BUTTON_RIGHT_PIN</span><span class="p">,</span> <span class="n">INPUT</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nf">init_game</span><span class="p">();</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">command</span><span class="p">();</span> <span class="c1">// 获取按键消息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">move</span><span class="p">();</span>    <span class="c1">// 修改头节点坐标-蛇的移动
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">eat_egg</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nf">draw</span><span class="p">();</span> <span class="c1">// 作图
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">eat_self</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">  <span class="nf">delay</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">init_game</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 初始化小蛇
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">SNAKE_LEN</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span>  <span class="nf">random</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">WIDTH</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span> <span class="c1">// 头节点位置随机化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span>  <span class="nf">random</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nf">pow</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nf">random</span><span class="p">());</span> <span class="c1">// 初始化方向向量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nf">creat_egg</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;GAM STARTED, Having Fun~&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">creat_egg</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="p">(</span><span class="nb">true</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">ok</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">EGG</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">WIDTH</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span> <span class="c1">// 头节点位置随机化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">EGG</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="nf">random</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="n">HEIGHT</span> <span class="o">-</span> <span class="mi">50</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">SNAKE_LEN</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">continue</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="n">EGG</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">10</span> <span class="o">&amp;&amp;</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="n">EGG</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">ok</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">ok</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">command</span><span class="p">()</span> <span class="c1">// 获取按键命令命令
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nf">digitalRead</span><span class="p">(</span><span class="n">BUTTON_LEFT_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span> <span class="c1">// 如果不是反方向，按键才有效
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;Trun Left!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nf">digitalRead</span><span class="p">(</span><span class="n">BUTTON_RIGHT_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;Trun Right!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nf">digitalRead</span><span class="p">(</span><span class="n">BUTTON_UP_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>  <span class="c1">// 注意 Y 轴，向上是负轴，因为屏幕左上角是原点 (0,0)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;Trun Up!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nf">digitalRead</span><span class="p">(</span><span class="n">BUTTON_DOWN_PIN</span><span class="p">)</span> <span class="o">==</span> <span class="n">HIGH</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">      <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">Serial</span><span class="p">.</span><span class="nf">println</span><span class="p">(</span><span class="s">&#34;Trun Down!&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">move</span><span class="p">()</span> <span class="c1">// 修改各节点坐标以达到移动的目的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// 覆盖尾部走过的痕迹
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">tft</span><span class="p">.</span><span class="nf">drawRect</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">SNAKE_LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">SNAKE_LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">SNAKE_LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">+=</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 每次移动10pix
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">+=</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="n">WIDTH</span><span class="p">)</span> <span class="c1">// 如果越界，从另一边出来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span> <span class="n">WIDTH</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="n">HEIGHT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span> <span class="n">HEIGHT</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">eat_egg</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="n">EGG</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="n">EGG</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// shade old egg
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">tft</span><span class="p">.</span><span class="nf">drawCircle</span><span class="p">(</span><span class="n">EGG</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">EGG</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="nf">creat_egg</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// add snake node
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SNAKE_LEN</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">SNAKE_LEN</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">x</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">      <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="n">y</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span> <span class="o">+=</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span> <span class="c1">// 每次移动10pix
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span> <span class="o">+=</span> <span class="n">DIRECTION</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">draw</span><span class="p">()</span> <span class="c1">// 画出蛇和食物
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">SNAKE_LEN</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">tft</span><span class="p">.</span><span class="nf">drawRect</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">TFT_BLUE</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="n">tft</span><span class="p">.</span><span class="nf">drawCircle</span><span class="p">(</span><span class="n">EGG</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">EGG</span><span class="p">.</span><span class="n">y</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">TFT_RED</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">eat_self</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">SNAKE_LEN</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">SNAKE_LEN</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">x</span> <span class="o">-</span> <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">x</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="o">&amp;&amp;</span> <span class="nf">fabs</span><span class="p">(</span><span class="n">SNAKE</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">y</span> <span class="o">-</span> <span class="n">SNAKE</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">y</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nf">delay</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">tft</span><span class="p">.</span><span class="nf">setTextColor</span><span class="p">(</span><span class="n">TFT_RED</span><span class="p">,</span> <span class="n">TFT_BLACK</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="n">tft</span><span class="p">.</span><span class="nf">drawString</span><span class="p">(</span><span class="s">&#34;GAME OVER!&#34;</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">      <span class="nf">delay</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="nf">setup</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">      <span class="k">break</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>代码就这么点，没几行，接下来我们来接一下按键电路，这部分是参考了 arduino 的官方文档 <a href="https://docs.arduino.cc/built-in-examples/digital/Button" target="_blank" rel="noopener noreferrer">How to Wire and Program a Button</a></p>
<p>接线方式如下，主要原理就是通过 GND 接线，使四个方向键对应的 GPIO 口默认值为低电平。
当按键按下时，GPIO 口会被拉升成高电平，从而使程序识别到该按键被按下。</p>
<p>接线示意图如下（简单起见，省略了前面的显示屏接线部分）：</p>
<figure><img src="/images/ee-basics-2-esp32-display/esp32-wiring-4-buttons.webp" width="60%"/><figcaption>
            <h4>使用 wokwi.com 制作的示意图</h4>
        </figcaption>
</figure>

<p>现在运行程序，效果如下（手上只有两个按键，所以是双键模式请见谅&hellip;）：</p>
<div class="bilibili"><iframe src="//player.bilibili.com/player.html?bvid=BV1jT411e7HJ&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>

<!-- 
因为买的摇秆有问题，没焊好，各种锡把引脚连在了一起，暂时放弃此想法。

## 四、换成用摇杆控制贪吃蛇吧

用按键控制总还是差了点意思，换成用摇杆控制看看是不是更爽一点。

之前在淘宝上买的一堆元件中有一个 HW-504 摇秆，查了下找到这篇文章 [arduino-joystick](https://arduinogetstarted.com/tutorials/arduino-joystick) 详细说明了怎么在 Arduino 中用它，在 ESP32-Arduino 上使用方法也完全类似。

根据其说明，HW-504 这类摇秆的五个引脚功能分别如下：

- GDN: 接地
- VCC/5V: 接 5V 电源
- VRx 与 VRy: 分别输出 X 轴与 Y 轴的偏移量，是模拟信号
- SW: 对应摇秆内部的按键，按下摇秆会使 SW 输出高电平

我们暂时用不到摇秆的按键，所以只需要接上另外四根引脚就行，而 VRx 与 VRy 因为输出的是模拟量，需要用到 ESP32 的 ADC 功能（Analog to Digital Converter 模数转换器）。

根据 ESP32 官方文档 [Analog to Digital Converter (ADC) - ESP32  Peripherals API](https://docs.espressif.com/projects/esp-idf/en/v4.4.4/esp32/api-reference/peripherals/adc.html) 描述，ESP32 包含两个模数转换器 ADC1 与 ADC2，其中 ADC2 在启用 Wi-Fi 时会被 WiFi 占用导致无法使用，所以我们写程序通常仅使用 ADC1。

然后根据前面的文章内容修改 C 代码，用摇秆控制逻辑取代掉按键相关的内容，改好后的代码内容如下：

```c

``` -->
]]></content></entry><entry><title type="html">EE 入门（一） - 电子电路基础知识</title><link href="https://thiscute.world/posts/electrical-engineering-circuits-basics-1/"/><id>https://thiscute.world/posts/electrical-engineering-circuits-basics-1/</id><author><name>ryan4yin</name></author><published>2023-01-31T22:33:51+08:00</published><updated>2023-08-08T07:23:51+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/electrical-engineering-circuits-basics-1/8051-display-2023.webp" height="2108" width="1044"><figcaption></figcaption>
        </figure><h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>我是从去年 12 月开始玩电子的，起因是 11 月搞了个 Homelab，然后就一路玩到 ESPHome，买了一堆传感器。
玩了一阵后 ESPHome 这种小白式玩法就满足不了我了，于是开始学习电路知识，用树莓派跟其他单片机开始折腾遥控小车、简易机械臂、跑马灯等等，可以说是玩得很尽兴。</p>
<p>今年我也打算继续玩一玩这一块，尤其想玩一玩用 ESP32/STM32 自制无人机，如果能搞搞无人机编队飞行就更好了~</p>
<p>言归正传，这篇文章是我入门电子电路的第一篇笔记，涵盖最基础的电路理论与一些焊接知识，末尾还包含了后续的学习规划。</p>
<p>笔记内容参考了许多网上的资料，主要有如下几个：</p>
<ul>
<li><a href="https://rmxd.gitee.io/guide/elec_start/" target="_blank" rel="noopener noreferrer">纵横向导 - 电路入门</a>
<ul>
<li>采用类比的方法来讲解电路基础，很适合业余玩家零基础快速入门。</li>
</ul>
</li>
<li><a href="https://www.sparkfun.com/engineering_essentials" target="_blank" rel="noopener noreferrer">Electrical Engineering Essentails - sparkfun</a>
<ul>
<li>同样是零基础入门，尤其是还介绍了电烙铁等玩电路板的实用知识。</li>
</ul>
</li>
<li><a href="https://elamazing.com/" target="_blank" rel="noopener noreferrer">The Amazing World of Electronics - Only the Cool Stuff :-)</a>
<ul>
<li>这个是一篇篇零散的文章，每篇文章一个知识点，但是讲得比较深入透彻。</li>
</ul>
</li>
</ul>
<p>我看完上面的文章后，随着玩得越来越深入，又陆续了解了这些内容：</p>
<ul>
<li>电路基础
<ul>
<li>什么是面包板、面包线、杜邦线</li>
<li>如何使用万用表测电压、电流、电阻、电容，判断二极管、三极管引脚。
<ul>
<li>（N 年前学这玩意儿时用的是最简单易懂的物理指针表，但是实际显然是电子的用着更方便）</li>
<li>回忆下用法：首先调到合适档位，然后测电流要串联到电路中、测电压要与被测器件并联、测电阻直接接在被测器件两端即可。</li>
<li>对于手动量程万用表（如 DT-9205A），它的显示单位为量程名字末尾非数字部分。
<ul>
<li>比如电阻 200 量程的显示单位就为 Ω；2K/20K/200K 这三个量程的显示单位都为 KΩ；2M/20M/200M 的显示单位都为 MΩ</li>
<li>对于电流/电压/电容也是一样。</li>
</ul>
</li>
</ul>
</li>
<li>什么元件需要防静电，以及有线防静电手环/台垫</li>
<li>如何读色环电阻的阻值？（不会读不如直接万用表走起&hellip;）</li>
<li>如何选购、使用电烙铁/吸锡器等焊接工具</li>
<li>&hellip;</li>
</ul>
</li>
<li>单片机（MCU）与单板计算机（SBC）
<ul>
<li>什么是开发版</li>
<li>什么是 TTL 串口、串口驱动、波特率</li>
<li>什么是 SPI/UART/I$^{2}$C 数据传输协议</li>
<li>什么是 GPIO 引脚，以及开发版的引脚各有什么功能</li>
<li>如何使用 USB 转 TTL 串口板给 ESP32/ESP8266/51/STM32 等单片机刷固件</li>
<li>ST-Link/J-Link/DAPLink 调试编程器（仿真器）与 TTL 串口有何区别，JTAG 和 SWD 接口又是个啥？该用哪个？</li>
<li>如何使用 C 语言为单片机编写程序？如何上传编译好的固件？如何调试？</li>
<li>&hellip;</li>
</ul>
</li>
</ul>
<p>总之兴趣驱动，不会的东西就 Google 一下或者问问 ChatGPT，玩起来~</p>
<h2 id="一常见基础公式" class="headerLink">
    <a href="#%e4%b8%80%e5%b8%b8%e8%a7%81%e5%9f%ba%e7%a1%80%e5%85%ac%e5%bc%8f" class="header-mark"></a>一、常见基础公式</h2><ol>
<li>欧姆定律： $U = IR$
<ol>
<li>电压 U 单位伏特 Volt，符号 $V$</li>
<li>电流 I 单位安培 Ampere，符号 $A$</li>
<li>电阻 R 单位欧姆 Ohm，符号 $\Omega$</li>
</ol>
</li>
<li>电功率公式： $p= UI$
<ol>
<li>功率 p 单位瓦特 Watt，符号 $W$，等同于 $V \cdot A$ 的缩写</li>
</ol>
</li>
<li>电能公式： $w = pT$
<ol>
<li>其中 p 为电功率，单位前面说了就是 Watt</li>
<li>T 为时间，单位秒 Second</li>
<li>$w$ 电能的单位为焦耳 joule，等同于 $V \cdot A \cdot s$</li>
<li>常见的电池通常会使用 $mA \cdot h$ 或者 $w \cdot h$ 来标记其电能容量。
<ol>
<li>$mA \cdot h$ 乘上电压再转换下电流跟时间的单位为 A 跟 s，就得到焦耳数</li>
<li>$w \cdot h$ 直接乘 3600（1 小时的秒数）就得到焦耳数</li>
</ol>
</li>
</ol>
</li>
<li>电容量公式： $C = Q/U$
<ol>
<li>电容量 C 单位为法拉 Farad，符号为 $F$</li>
<li>带电量 Q 的单位为库仑 Coulomb，符号为 $C$</li>
</ol>
</li>
<li>库仑的定义： $1C = 1A \cdot s$
<ol>
<li>1 库仑即 $6.24146 \times 10^{18}$ 个电子所带的电荷量</li>
</ol>
</li>
<li>电感 TODO（貌似用得比较少&hellip;待补充）</li>
</ol>
<h2 id="二常用电子元件介绍" class="headerLink">
    <a href="#%e4%ba%8c%e5%b8%b8%e7%94%a8%e7%94%b5%e5%ad%90%e5%85%83%e4%bb%b6%e4%bb%8b%e7%bb%8d" class="header-mark"></a>二、常用电子元件介绍</h2><p>常见电子元器件：</p>
<ul>
<li>电阻</li>
<li>二极管 Diode
<ul>
<li>发光二极管</li>
<li>整流二极管</li>
<li>稳压二极管</li>
</ul>
</li>
<li>三极管</li>
<li>MOSFET 场效应管
<ul>
<li>电压转换器（power converter）：整流器（rectifier）、逆变器（inverter）、斩波器（chopper）及变频驱动器（VFD）</li>
</ul>
</li>
<li>电容
<ul>
<li>电解电容</li>
<li>瓷片电容</li>
<li>独石电容</li>
</ul>
</li>
<li>晶振</li>
</ul>
<h3 id="1-二极管-diode" class="headerLink">
    <a href="#1-%e4%ba%8c%e6%9e%81%e7%ae%a1-diode" class="header-mark"></a>1. 二极管 Diode</h3><blockquote>
<p><a href="https://learn.sparkfun.com/tutorials/diodes" target="_blank" rel="noopener noreferrer">https://learn.sparkfun.com/tutorials/diodes</a></p>
</blockquote>
<p>二极管是一种<strong>只允许电流由单一方向流过</strong>，具有两个电极的元件，是现代电子产业的基石。
可类比水流中的单向阀门，水只能从一端流向另一端，而不能逆流。</p>
<p>最初的二极管是真空电子二极管，很大、需要预热、功耗大，易破碎。
后来美国人使用半导体材料发明了晶体二极管（或者叫半导体二极管）。
目前常用的二极管都是晶体二极管，主要使用硅或者锗这类半导体材料。</p>
<p>晶体二极管的核心是 PN 结（p–n junction），要了解  PN 结，需要先介绍半导体的几个概念：</p>
<ul>
<li>空穴：又称 Electron hole，物理学中指原子的共价键上流失一个电子，最后在共价键上留下的空位。</li>
<li>载流子：半导体中有两种载流子，即价带中带正电的空穴，和导带中带负电的电子。</li>
<li>P 型半导体：P 表示 Positive，指以带正电的空穴导电为主的半导体，也叫空穴半导体。
<ul>
<li>在纯净的硅晶体中掺入三价元素（如硼），使之取代晶格中硅原子的位置，就形成P型半导体。</li>
</ul>
</li>
<li>N 型半导体：N 表示 Negative，指自由电子浓度远大于空穴浓度的杂质半导体。
<ul>
<li>例如，含有适量五价元素砷、磷、锑等的锗或硅等半导体。</li>
</ul>
</li>
</ul>
<p>懂了上面这些后，让我们考虑在一个 N 型半导体跟 P 型半导体形成的 PN 结中，电子显然只能从 N 极流向 P 极，因为只有 N 极才有足够的电子。相反电流只能从 P 级流向 N 极，因为只有 P 极才有足够的空穴。</p>
<p>如果电流要反向流动，那 PN 结的 P 极的电子会更多，而 N 级的空穴也会更多，电势差会更大，显然就会非常费劲。</p>
<p>二极管在导通状态下二示意图如下，其中也展示了二极管对应的符号与真实二极管的结构（带环的一侧为其 N 极）：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/diode-1.webp" width="50%"/>
</figure>

<p>电阻拥有线性的伏安特性曲线，遵从欧姆定律。而二极管则完全不同，它伏安特性曲线（Current-Voltage Graph）如下：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/diode-current-voltage-graph.png" width="50%"/>
</figure>

<p>几个主要特征与相关名词介绍：</p>
<blockquote>
<p>更详细的文章：<a href="https://elamazing.com/2021/04/13/pn-junction-diode/" target="_blank" rel="noopener noreferrer">PN Junction Diode</a></p>
</blockquote>
<ul>
<li>正向压降 Forward Voltage: 指使电流能够导通的最小电压 $V_F$
<ul>
<li>「正向压降」被用于克服二极管的内部电场了，所以在电流通过二极管后，电压需要减去这个电压，这也是中文名「正向压降」的由来。
<ul>
<li>硅二极管的正向压降通常为 0.6v - 1v，锗二极管的正向压降通常为 0.3v</li>
</ul>
</li>
<li>根据伏安特性曲线，实际上随着电流的变化，「正向压降」也是有小幅波动的，不过计算时一般都认为它是固定值。</li>
</ul>
</li>
<li>击穿电压 Breakdown Voltage: 指使电流能否反向导通的最小电压，从图中标识看 $V_{BR}$ 为 -50v，显然它远大于不到 1v 的「正向压降」。
<ul>
<li>当电流能经过二极管反向导通时，我们称二极管被击穿（Breakdown）</li>
</ul>
</li>
</ul>
<p>二极管依据其设计目标，分类了许多不同类别：</p>
<ul>
<li>普通二极管</li>
<li>整流器(rectifier) / 功率二极管（power diode）
<ul>
<li>依靠二极管只能单向导通的原理，可以使用它将交流电变成直流电。</li>
<li>能承受较大的正向电流和较高的反向电压</li>
</ul>
</li>
<li>发光二极管（Light-Emitting Diodes, LEDs）
<ul>
<li>LED 的正向压降取决于它的颜色，而且比较固定，通常红色约为 1.6v，绿色有 2v 和 3v 两种，黄色和橙色约为 2.2v，蓝色约为 3.2v</li>
</ul>
</li>
<li>稳压二极管
<ul>
<li>利用二极管在反向击穿状态，其电流可在很大范围内变化而电压基本不变的现象，制成的起稳压作用的二极管。</li>
</ul>
</li>
<li>开关二极管
<ul>
<li>能够快速由导通变为截止或由截止变为导通的一种二极管。</li>
</ul>
</li>
<li>检波二极管
<ul>
<li>TODO</li>
</ul>
</li>
<li>阻尼二极管
<ul>
<li>具有较低有电压降和较高的工作频率，且能承受较高的反向击穿电压和较大的峰值电流。</li>
</ul>
</li>
</ul>
<p>还有二极管堆组：</p>
<ul>
<li>整流桥堆(半桥、全桥)
<ul>
<li>菱形联接</li>
</ul>
</li>
</ul>
<p>等等&hellip;</p>
<h3 id="2-三极管-triode--bipolar-transistor" class="headerLink">
    <a href="#2-%e4%b8%89%e6%9e%81%e7%ae%a1-triode--bipolar-transistor" class="header-mark"></a>2. 三极管 triode / bipolar transistor</h3><p>三极管即双极型晶体管，缩写 BJT，前面介绍了二极管结构为单个 PN 结，而三极管的结构则为 PNP 或者 NPN 结构，<strong>具有电流放大作用</strong>，是电子电路的核心元件之一。</p>
<p>它的工作方式就像是一个一个液压阀门，通过小电流来顶开中间的通路，使大电流得以通过，一个 NPN 型放大器电路的示意图如下：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/bipolar-transistor-1.jpg" width="70%"/>
</figure>

<p>b 与 e 之间的电压形成一个小电流，这个小电流越大，c 与 e 之间的电阻就越小。</p>
<p>就像是如下液压阀门，b 处的水压越大，液压阀门被推得越开，c 与 e 之间的水流就越大：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/bipolar-transistor-vs-hydraulic-valve.png" width="40%"/>
</figure>

<p>三极管不是凭空把电放大了，而是说： 小的电信号（小水流）把另一个通路的大电流的阀门打开了，后面的器件能够感受到这个大电流， 所以是放大了。对电来说 实际有两个电源供电的 一个是小电源（小信号、信号源） 一个是大电源。</p>
<p>咱们的收音机，实际就是天线，接收到空气中的小电流，你可以理解为毛毛雨。</p>
<p>这个毛毛雨到了三极管的一个脚上打开阀门， 电池供电通过另外两个脚流动，再打开一个后面的三极管， 一级级的这样不断打开，一般收音机最早的时候是三管收音机、六管收音机，就是这么个意思一直到这个水流大到能够推动喇叭就发声了。</p>
<p>一个极简三级放大收音机电路：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/minimalist-triode-radio.png" width="60%"/>
</figure>

<p>两种三极管的符号与识别：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/pnp-npn-transistor.png" width="60%"/>
</figure>

<p>三个电极介绍：</p>
<ul>
<li>C: 即 Collector 集电极</li>
<li>B: 即 Base 基极</li>
<li>E: 即 Emitter 发射极</li>
</ul>
<p>可以看到 NPN 跟 PNP 三极管最大的区别，是在于电流流向：</p>
<ul>
<li>NPN 的 Base 基极是 P 对应正极，电流从 B 与 C 极 流向 E 极</li>
<li>PNP 的 Base 基极是 N 对应负极，电流从 E 极流向 B 与 C 两个电极</li>
</ul>
<p>根据 B 极电流 $I_B$ 的变化，$V_{CE}$ 的变化曲线如图：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/output-characteristics-curves-of-bipolar-transistor.webp" width="60%"/>
</figure>

<p>可以看到<strong>在 $I_{B}$ 一定的情况下，不论 $V_{CE}$ 在 2v 以上如何变化，$I_{C}$ 的电流都几乎是恒定的</strong>。换个角度看电压在 2v - 12v 之间时，$I_{B}$ 与 $I_{C}$ 几乎是完全的线性关系，不受电压波动的影响。</p>
<blockquote>
<p>注意 12v 以上只是没有画出来，假使这个三极管最多只能承受 12v 电压，那更高的电压会击穿它，你就能看到三极管冒火花了&hellip;</p>
</blockquote>
<p>$\frac{I_{C}}{I_{B}}$ 之间的比率（常数）被称做三极管的电流增益（Current Gain），一般使用 $\beta$ 表示。</p>
<p>因为实际场景中 $I_{B}$ 不太好判断，通常都是直接调整 $V_{BE}$，因此我们再换个角度，对比下 $I_{C}$ 与 $V_{BE}$：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/npn-transistor-Ic-vs-Vbe.png" width="40%"/>
</figure>

<p>通过上图可以发现三极管的另外两个特征：</p>
<ol>
<li><strong>$V_{BE}$ 需要一个启动电压，大约在 0.7v 左右，低于 0.7v 时$I_C$ 的电流一直非常小</strong>。</li>
<li><strong>在 $V_{BE}$ 超过 0.7v 后，任何此电压的小变化，都会导致 $I_{C}$ 的剧烈变化</strong>。</li>
</ol>
<p>一个常见的单状态 NPN 放大器电路如下：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/npn-transistor-aimplifier-circuit.webp" width="60%"/>
</figure>

<p>可以注意到，输入 $V_{in}$是一个很小的交流信号，过来之前加了一个电容隔绝掉其中参杂的直流信号。</p>
<p>其次因为 $V_{BE}$ 需要一个启动电压才能进入电流放大的工作区间，这里通过 $R1$ 与 $R2$ 为 $V_{BE}$ 提供了一个启动电压 DC Biasing Point.</p>
<h3 id="3-mosfet-金属氧化物场效应晶体管" class="headerLink">
    <a href="#3-mosfet-%e9%87%91%e5%b1%9e%e6%b0%a7%e5%8c%96%e7%89%a9%e5%9c%ba%e6%95%88%e5%ba%94%e6%99%b6%e4%bd%93%e7%ae%a1" class="header-mark"></a>3. MOSFET 金属氧化物场效应晶体管</h3><blockquote>
<p><a href="https://elamazing.com/2021/03/31/mosfet/" target="_blank" rel="noopener noreferrer">https://elamazing.com/2021/03/31/mosfet/</a></p>
</blockquote>
<blockquote>
<p>MOSFET 与三极管的区别与选用：https://www.eet-china.com/mp/a17394.html</p>
</blockquote>
<blockquote>
<p>CMOS 集成电路工艺 - 百科: <a href="https://www.zgbk.com/ecph/words?SiteID=1&amp;ID=124559&amp;Type=bkzyb" target="_blank" rel="noopener noreferrer">https://www.zgbk.com/ecph/words?SiteID=1&ID=124559&Type=bkzyb</a></p>
</blockquote>
<p><strong>MOSFET 晶体管一般简称 MOS 管，是电压控制元件（通过栅极电压控制源漏间导通电阻），而双极型晶体管（三极管）是电流控制元件（通过基极较小的电流控制较大的集电极电流）</strong>。</p>
<p>MOS 管在导通压降下，导通电阻小，栅极驱动不需要电流，损耗小，驱动电路简单，自带保护二极管，热阻特性好，适合大功率并联，缺点开关速度不高，比较昂贵。</p>
<p>而功能与 MOS 管类似的三极管，特点是开关速度高，大型三极管的 IC 可以做的很大，缺点损耗大，基极驱动电流大，驱动复杂。</p>
<p>一般来说低成本场合，普通应用优先考虑用三极管，不行的话才考虑 MOS 管。</p>
<p>场效应管能在很小电流和很低电压的条件下工作，功耗低，而且可以很方便地把很多场效应管集成在一块硅片上，因此场效应管在大规模集成电路中得到了广泛的应用。
目前主流的数字集成电路，包括 CPU/GPU/RAM，基本都是通过光刻制造的 CMOS 集成电路（Complementary Metal-Oxide-Semiconductor Integrated Circuit），CMOS 就是基于 MOSFET 技术实现的。</p>
<p>MOSFET 管的结构、极性，用法等内容，待补充&hellip;</p>
<p>TODO</p>
<h3 id="4-电容-capacitor" class="headerLink">
    <a href="#4-%e7%94%b5%e5%ae%b9-capacitor" class="header-mark"></a>4. 电容 Capacitor</h3><p>电容是电能的容器，里面存储的是电荷，电容在电路中是储能、缓冲、减压、过滤器件。。</p>
<p>水要通过池塘、湖泊，首先需要灌满它才能过得去。所以这部分水（电能）可以被这些容器保存下来，这是<strong>电容的储能作用</strong>，另外很明显，无论前面的水流多么湍急，到了湖泊就要先灌满它，湖泊开口再向下游流水，自然流水就缓慢一些，所以它<strong>也有缓冲的作用</strong>。大波浪到了湖泊变平稳，实际变成了小波浪，波的形状都变了，这就是<strong>过滤的作用，只允许特定的波通过</strong>。</p>
<p>再回顾下电容相关的公式：</p>
<ol>
<li>电容量公式： $C = Q/U$
<ol>
<li>电容量 C 单位为法拉 Farad，符号为 $F$</li>
<li>带电量 Q 的单位为库仑 Coulomb，符号为 $C$</li>
</ol>
</li>
<li>库仑的定义： $1C = 1A \cdot s$
<ol>
<li>1 库仑即 $6.24146 \times 10^{18}$ 个电子所带的电荷量</li>
</ol>
</li>
</ol>
<p>电容的类型：</p>
<ul>
<li>瓷片电容
<ul>
<li>用陶瓷材料作介质，在陶瓷表面涂覆一层金属（银）薄膜，再经高温烧结后作为电极而成。</li>
<li>用途：通常用于高稳定振荡回路中，作为回路、旁路电容器及垫整电容器。但仅限于在工作频率较低的回路中作旁路或隔直流用，或对稳定性和损耗要求不高的场合〈包括高频在内〉。瓷片电容不宜使用在脉冲电路中，因为它们易于被脉冲电压击穿。</li>
</ul>
</li>
<li>铝电解电容（有极性）
<ul>
<li>有极性铝电解电容器是将附有氧化膜的铝箔（正极）和浸有电解液的衬垫纸，与阴极（负极）箔叠片一起卷绕而成。</li>
<li><strong>优点</strong>: 容量范围大，一般为1~10 000 μF，额定工作电压范围为6.3 V~450 V。</li>
<li><strong>缺点</strong>: 介质损耗、容量误差大（最大允许偏差+100%、–20%）耐高温性较差，存放时间长容易失效。</li>
<li><strong>用途</strong>: 通常在直流电源电路或中、低频电路中起滤波、退耦、信号耦合及时间常数设定、隔直流等作用。</li>
<li>注意：因其具有极性，不能用于交流电路。</li>
</ul>
</li>
<li>独石电容
<ul>
<li>独石电容是用钛酸钡为主的陶瓷材料烧结制成的多层叠片状超小型电容器。</li>
<li><strong>优点</strong>: 性能可靠、耐高温、耐潮湿、容量大（容量范围1 pF ~ 1 μF）、漏电流小等</li>
<li><strong>缺点</strong>: 工作电压低（耐压低于100 V）</li>
<li><strong>用途</strong>: 广泛应用于谐振、旁路、耦合、滤波等。 常用的有CT4 （低频） 、CT42（低频）；CC4（高频）、CC42（高频）等系列。</li>
</ul>
</li>
<li>钽电解电容
<ul>
<li>有两种制作工艺：
<ul>
<li>箔式钽电解电容器：内部采用卷绕芯子,负极为液体电解质，介质为氧化钽</li>
<li>粉烧结式： 阳极（正极）用颗粒很细的钽粉压块后烧结而成</li>
</ul>
</li>
<li><strong>优点</strong>: 介质损耗小、频率特性好、耐高温、漏电流小。</li>
<li><strong>缺点</strong>: 生产成本高、耐压低</li>
<li><strong>用途</strong>: 广泛应用于通信、航天、军工及家用电器上各种中 、低频电路和时间常数设置电路中。</li>
</ul>
</li>
<li>等等</li>
</ul>
<h3 id="5-电感-inductance" class="headerLink">
    <a href="#5-%e7%94%b5%e6%84%9f-inductance" class="header-mark"></a>5. 电感 Inductance</h3><p>「电磁感应（Electromagnetic induction）」我们都学过，它是指放在变化磁通量中的导体，会产生电动势。 此电动势称为感应电动势或感生电动势，若将此导体闭合成一回路，则该电动势会驱使电子流动，形成感应电流（感生电流）。
<strong>简单的说就是磁场变化能产生电能，电流变化也会形成磁场</strong>。</p>
<p>电磁感应最为人所知的应用应该就是「发电机」、「电动马达」跟「变压器」了。「发电机」通过电磁感应将机械能转换为电能，而「电动马达」刚好相反，它通过电磁感应将电能转换为机械能。
这个转换实际上都是依靠磁场与「电磁感应」实现的。</p>
<p>而我们这里提的电感这种元器件，其核心原理是楞次定律（Lenz&rsquo;s law）：</p>
<blockquote>
<p>由于磁通量的改变而产生的感应电流，此电流的流向为抗拒磁通量改变的方向。</p>
</blockquote>
<p>将楞次定律应用在闭合回路的自感效应中，得到的结论是：</p>
<blockquote>
<p>电路上所诱导出的电动势的方向，总是使得它所驱动的电流，会阻碍原先产生它（即电动势）的磁通量之变化。</p>
</blockquote>
<p>具体而言，<strong>对于「电感」，当电流增加时它会将能量以磁场的形式暂时存储起来，等到电流减小时它又会将磁场的能量释放出来，这会产生抵抗电流变化的效果</strong>。</p>
<p>电感并不损耗能量，它只是临时将电流存储起来，待会儿再释放出来而已（这叫什么？削峰填谷，平滑算法）。</p>
<p>电感的结构通常是漆包铜线缠绕在一个永磁体上，因为需要有电流的变化才能工作，通常仅应用在交流电领域。</p>
<h3 id="6-电阻" class="headerLink">
    <a href="#6-%e7%94%b5%e9%98%bb" class="header-mark"></a>6. 电阻</h3><blockquote>
<p>足够深入的分析：<a href="https://www.zhihu.com/question/68567332" target="_blank" rel="noopener noreferrer">电阻的定义到底是什么？</a></p>
</blockquote>
<p>我们对电阻最直观的理解，是中学时学过的：</p>
<p>$$R =  \frac{V}{I}$$</p>
<p>但是在简单的含有电阻 R + 一个电感或电容的直流电路中，电流是随时间变化的，并在最终达到一个稳态。</p>
<p>这时根据上面的公式计算，因为电压是固定的，我们发现电路中电阻 R 的阻值实际是随时间变化的。</p>
<p>这个问题在直流电路中并不明显，因为电路最终仍然会达到稳态，这时电阻就跟它的标称电阻差距不大了。</p>
<p>但是在交流电路中，因为电流始终是在震荡的，这个问题就会变得相当明显，以至于无法简单地使用「电阻」来表达一个电阻器的特性，为此引入了一个新概念叫「阻抗」。</p>
<blockquote>
<p>在具有电阻、电感和电容的电路里，对电路中的电流所起的阻碍作用叫做阻抗。阻抗常用Z表示，是一个复数，实部称为电阻，虚部称为电抗，其中电容在电路中对交流电所起的阻碍作用称为容抗 ,电感在电路中对交流电所起的阻碍作用称为感抗，电容和电感在电路中对交流电引起的阻碍作用总称为阻抗。 阻抗的单位是欧姆。阻抗的概念不仅存在于电路中，在力学的振动系统中也有涉及。</p>
</blockquote>
<p>如果仔细看看你买过的耳机的相关参数，会发现它就包含一个「阻抗」参数，知乎上就有相关讨论 <a href="https://www.zhihu.com/question/22519059" target="_blank" rel="noopener noreferrer">耳机是不是阻抗越高越好？</a>.</p>
<p>对电阻更精确的理解是：电阻是电压对电流的变化率，它不一定是一个静态值（也就是说可能是非线性的，比如二极管的伏安特性曲线就不是直线）。</p>
<h4 id="单片机的下拉电阻与上拉电阻" class="headerLink">
    <a href="#%e5%8d%95%e7%89%87%e6%9c%ba%e7%9a%84%e4%b8%8b%e6%8b%89%e7%94%b5%e9%98%bb%e4%b8%8e%e4%b8%8a%e6%8b%89%e7%94%b5%e9%98%bb" class="header-mark"></a>单片机的下拉电阻与上拉电阻</h4><p>用单片机设计电路时，一个重要的点就是下拉电阻与上拉电阻。</p>
<p>不太好直接解释，直接看视频吧，下面这两个视频解释得很清晰：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1W34y1579U/" target="_blank" rel="noopener noreferrer">上拉电阻的通俗解释</a></li>
<li><a href="https://www.bilibili.com/video/BV1ZU4y1Q7eo/" target="_blank" rel="noopener noreferrer">下拉电阻的通俗解释</a></li>
</ul>
<p>再补充一个博友的文章 <a href="https://panqiincs.me/2019/09/25/mcu-gpio-settings/" target="_blank" rel="noopener noreferrer">单片机的GPIO配置</a>，详细解释了 GPIO 相关的配置原理。</p>
<h3 id="7-晶振-xtal-与振荡电路" class="headerLink">
    <a href="#7-%e6%99%b6%e6%8c%af-xtal-%e4%b8%8e%e6%8c%af%e8%8d%a1%e7%94%b5%e8%b7%af" class="header-mark"></a>7. 晶振 (Xtal) 与振荡电路</h3><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/72583737" target="_blank" rel="noopener noreferrer">秒懂单片机晶振电路原理</a></p>
</blockquote>
<p>石英晶体或晶振，是利用石英晶体（又称水晶）的压电效应，用来产生高精度振荡频率的一种电子器件，属于被动器件（无源源件）。</p>
<p>晶体是指其中的原子、分子、或离子以规则、重复的模式朝各方向延伸的一种固体。
晶体与几乎所有的弹性物质都具有自然共振频率，透过适当的传感器可加以利用。</p>
<p>石英晶体的优点是在温度变化时，影响震荡频率的弹性系数与尺寸变化轻微，因而在频率特性上表现稳定。</p>
<p>石英晶体谐振器的原理：</p>
<ul>
<li>石英晶体上的电极对一颗被适当切割并安置的石英晶体施以电场时，晶体会产生形变。这与晶体受压力产生电势的现象刚好相反，因此被称做<strong>逆压电效应</strong>。</li>
<li>当外加电场移除时，石英晶体又会恢复原状并发出电场，因而在电极上产生电压，这是我们熟知的<strong>压电效应</strong>。</li>
<li><strong>逆压电效应</strong> + <strong>压电效应</strong> 这两个特性造成石英晶体在电路中的行为，类似于某种电感器、电容器、与电阻器所组合成的 RLC 电路。组合中的电感电容谐振频率则反映了石英晶体的实体共振频率。</li>
<li>当外加交变电压的频率与晶片的固有频率（决定于晶片的尺寸与切割方法）相等时，机械振动的幅度将急剧增加，这种现象称为<strong>压电谐振</strong>。</li>
</ul>
<p>可能有些初学者会对晶振的频率感到奇怪，12M、24M 之类的晶振较好理解，选用如 11.0592MHZ 的晶振给人一种奇怪的感觉，这个问题解释起来比较麻烦，如果初学者在练习串口编程的时候就会对此有所理解，这种晶振主要是可以方便和精确的设计串口或其它异步通讯时的波特率。</p>
<h3 id="8-地" class="headerLink">
    <a href="#8-%e5%9c%b0" class="header-mark"></a>8. 地</h3><p>电路中每个器件上有电能量集聚，形成电势差，就相当于物体的高度差。
假设没有一个参考基准点，就没法测量这个电势差了，因此规定电路的某个点就是作为基准面，也就是地（GND/Ground）了。</p>
<p>地/GND 并不需要是真正的地面，对于我主要关注的弱电电路板而言，电路的负极就是地。</p>
<p>同理可推出，如果需要将同一个电路板同时接入多个源电路，则必须将这多个电路板的负极连接在一起，这样它们的「GND」参考基准点才是一致的！</p>
<h4 id="静电破坏与防静电" class="headerLink">
    <a href="#%e9%9d%99%e7%94%b5%e7%a0%b4%e5%9d%8f%e4%b8%8e%e9%98%b2%e9%9d%99%e7%94%b5" class="header-mark"></a>静电破坏与防静电</h4><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/570713171" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/570713171</a></p>
</blockquote>
<p>弱电领域另外一个常见的接地应该就是静电接地了，这是为了确保人体/工作台与地面的电势差为零，避免工作时静电放电导致元器件损坏。</p>
<p>人体感应的静电电压一般在 2KV-4KV 左右，通常是人体轻微运动或与绝缘摩擦引起的。
这么高的电压，足够击穿很多电子元件了，所以电子厂都会强制员工穿戴防静电装置（有线防静电手环）。</p>
<p>静电接地通常要求接真正的地面，比如与建筑物接触紧密的金属门窗、水龙头等都算是「地」。
个人用的话，据朋友介绍效果最好的方法是：穿拖鞋，并且一只脚踩地上哈哈~</p>
<h2 id="三常见电路计算方式" class="headerLink">
    <a href="#%e4%b8%89%e5%b8%b8%e8%a7%81%e7%94%b5%e8%b7%af%e8%ae%a1%e7%ae%97%e6%96%b9%e5%bc%8f" class="header-mark"></a>三、常见电路计算方式</h2><h3 id="1-如何选用正确的电阻" class="headerLink">
    <a href="#1-%e5%a6%82%e4%bd%95%e9%80%89%e7%94%a8%e6%ad%a3%e7%a1%ae%e7%9a%84%e7%94%b5%e9%98%bb" class="header-mark"></a>1. 如何选用正确的电阻？</h3><p>这需要使用到我们中学学过的物理学欧姆定律公式：</p>
<p>$$V =  I \cdot R$$</p>
<p>首先针对电子电路领域的 hello world，即发光二极管 + 电阻：</p>
<figure><img src="/images/electrical-engineering-circuits-basics-1/helloworld-led%2Bresistor.png" width="40%"/>
</figure>

<p>我们可以根据 LED 灯的最大电流来估算电阻值，根据欧姆定律有</p>
<p>$$R = \frac{V}{I}$$</p>
<p>普通发光二极管的正常工作电流通常为 $2 \text{mA}$ ~ $20 \text{mA}$，电流越大它就越亮，正向压降有好几种，假设我们的为 $3.3v$。</p>
<p>因此电路允许的最大电流为 $0.02 \text{A}$，如果电源电压为 3.7v，那电阻得到的电压大概为 $0.4 \text{V}$，这样可计算得到 $R$ 为 $20 \Omega$.</p>
<p>发光二极管在正常工作状态几乎没有电阻，因此可以直接将上面计算出的结果当作串联电阻的阻值。</p>
<p>因此为了使发光二极管正常工作，串联电阻应该略大于 $25 \Omega$.</p>
<h3 id="2-电路分析中的两个重要定律" class="headerLink">
    <a href="#2-%e7%94%b5%e8%b7%af%e5%88%86%e6%9e%90%e4%b8%ad%e7%9a%84%e4%b8%a4%e4%b8%aa%e9%87%8d%e8%a6%81%e5%ae%9a%e5%be%8b" class="header-mark"></a>2. 电路分析中的两个重要定律</h3><ul>
<li>KAL 基尔霍夫电流定律：所有进入某节点的电流的总和等于所有离开这节点的电流的总和</li>
<li>KVL 基尔霍夫电压定律：沿着闭合回路所有元件两端的电势差（电压）的代数和等于零</li>
</ul>
<p>这两个定律感觉通过「能量守恒」去理解，会显得很直观，不论是电流还是电压，都不会无中生有，在整个电路上它始终是守恒的。</p>
<p>KVL + 节点电压法是分析电路的一种有效手段。</p>
<h3 id="3-隔直通交与隔交通直" class="headerLink">
    <a href="#3-%e9%9a%94%e7%9b%b4%e9%80%9a%e4%ba%a4%e4%b8%8e%e9%9a%94%e4%ba%a4%e9%80%9a%e7%9b%b4" class="header-mark"></a>3. 隔直通交与隔交通直</h3><p>上面这个是常见的简单特性描述，但是不够准确，准确的说：</p>
<ul>
<li>电容是隔断不变的电信号，通过变化的电信号。</li>
<li>电感是阻碍变化的电信号，通过不变的电信号。</li>
</ul>
<p>显然直流电的电流也是可以变化的，比如刚过了整流桥的直流电就是一个脉动信号。</p>
<h3 id="4-交直流叠加信号" class="headerLink">
    <a href="#4-%e4%ba%a4%e7%9b%b4%e6%b5%81%e5%8f%a0%e5%8a%a0%e4%bf%a1%e5%8f%b7" class="header-mark"></a>4. 交直流叠加信号</h3><p>交流信号就很好，很真实，为什么还要有交流直流叠加信号，到最后还要把直流信号去掉，只保留交流信号，多麻烦。这是因为，任何器件如果想打开或者处于一定状态，多少都需要一定的能量驱动的，如果这个能量不足，让器件处于不稳定的状态，我们还原不了真实的信号，所以三极管放大加上静态偏置，实际上就是为了让他先工作在临近放大区，再来交流信号才能正确还原。</p>
<p>所谓的静态偏置，实际上就是挂上个电阻先给这个三极管的某个引脚加上直流电。再来的交流信号与直流叠加变成交直流混叠信号，来驱动三极管的b极。</p>
<p>犹如大坝的开口在5米处，但是交流信号（变化的信号）只有1米的波动，所以先把水位抬高到5米，这个波动才能送过去。</p>
<p>现在信号放大电路大部分被运算放大器替代，两个运放之间有一个隔直电容，这是因为运放不需要这种类似三极管的偏置，它不需要抬高水位，本身它建立的条件就是你来波动我就能正常反馈到后级，你这个时候如果叠加了直流信号，反而出问题了，因为你把水位抬高了，比较低的信号不能正常反馈到后级被这个直流信号掩盖了。</p>
<h2 id="四电子电路工具套装介绍" class="headerLink">
    <a href="#%e5%9b%9b%e7%94%b5%e5%ad%90%e7%94%b5%e8%b7%af%e5%b7%a5%e5%85%b7%e5%a5%97%e8%a3%85%e4%bb%8b%e7%bb%8d" class="header-mark"></a>四、电子电路工具套装介绍</h2><p>玩硬件的话，工具套装是必不可少的，最先遇到的场景就是——很多的传感器都需要自己焊接排针。</p>
<p>常用工具的主要有这些：</p>
<ul>
<li>万用电表（Multimeter）</li>
<li>面包板（Breadboard）</li>
<li>电烙铁（Soldering Iron）</li>
<li>玻纤洞洞板（Stripboard / Perfboard）</li>
</ul>
<p>其他进阶玩耍时可能会用到的工具：</p>
<ul>
<li>示波器（Oscilloscope）</li>
<li>可调直流稳压电源（Adjustable DC Power Supply）</li>
<li>频谱分析仪</li>
</ul>
<p>电子元器件又主要分类两类：</p>
<ul>
<li>插式元器件
<ul>
<li>传统电子元器件，都带有较长引脚，PCB 版需要为引脚预留通孔。</li>
<li>相关技术：through-hole technology</li>
<li>这种元件比较大个，都很适合手工焊接，焊接完成后还需要剪掉多余引脚。</li>
</ul>
</li>
<li>片式元器件 SMD (surface-mount device)
<ul>
<li>一种新型元器件，也叫贴片元件。</li>
<li>比插式元器件要小很多，而且 PCB 板不需要预留插孔，更节省材料跟空间，广泛应用在各种小型化电子设备中。</li>
<li>相关技术：(SMT) Surface-mount technology</li>
<li>相关设备：激光打印钢网、贴片机（巨贵）</li>
<li>贴片元件手工焊接时不适合用电烙铁焊，因为它太小了，这样焊接会很费劲。</li>
<li>贴片元件最简单的手工焊接方法是使用针筒焊锡膏在 PCB 触点上涂好锡膏，可用牙签去掉多余锡膏，然后用镊子将贴片元件放上去，最后使用恒温焊台加热完成焊接。元件放歪点没关系，加热时它会因为液态锡的表面张力自动正位。</li>
</ul>
</li>
</ul>
<h3 id="1-电烙铁篇" class="headerLink">
    <a href="#1-%e7%94%b5%e7%83%99%e9%93%81%e7%af%87" class="header-mark"></a>1. 电烙铁篇</h3><p>电烙铁主要考虑的是升温速度跟温度保持能力，便宜的电烙铁基本都有升温慢、焊接中途易失温等毛病。
目前总结的电烙铁信息如下：</p>
<ul>
<li>便携电烙铁：入门级别推荐
<ul>
<li><strong>优缺点</strong>: 便携、价格低。但是升温相对焊台要慢一些，温控相对不够精确，而且无自动休眠，空烧烙铁头容易氧化，再有就是它没有接地不防经典，焊接精密元件比较危险。</li>
<li>貌似主要推荐广东黄花 907 电烙铁，淘宝官方店买个刀头的 54 大洋</li>
</ul>
</li>
<li>热风枪：主要用来拆焊，以及焊接贴片元件 + 芯片。
<ul>
<li>我买了一把德力西 2000W 的数显热风枪，不过貌似更多人推荐那种二合一焊台，直接控制热风枪跟电烙铁两个玩意儿。</li>
</ul>
</li>
<li>焊台：进阶推荐，也可考虑一步到位&hellip;
<ul>
<li><strong>优缺点</strong>: 发热很快、热容相对较大，自动休眠不会空烧、还有过流保护、单片机稳定温控。缺点是要贵一些，另外相对没那么便携。</li>
<li>相关流行产品
<ul>
<li><a href="https://hackmd.io/@openlabtaipei/SyfdnAPtU" target="_blank" rel="noopener noreferrer">白菜白光 T12 恒温焊台</a>，最早是网友基于日本白光公司 T12 烙铁头（日本工厂到期强制报废的洋垃圾）配上自制恒温控制电路完成的 DIY 焊台，因为相对高端焊台相当便宜所以冠以「白菜」之名。
<ul>
<li>淘宝上有一些卖这个的，质量见仁见智吧，我没买过。</li>
</ul>
</li>
<li>日本白光 HAKKO 焊台：这个很多人推荐，说是质量好。不过贵，新手用可能有点奢侈了。</li>
</ul>
</li>
</ul>
</li>
<li>二合一焊台：焊台自带热风枪 + 高频电烙铁两件套，高手必备（一般拆机才会用到热风枪）
<ul>
<li>高频电烙铁使用的是跟电磁炉一样的高频涡流发热原理，电烙铁头自身发热，不需要任何发热芯，发热很快、热容大、烙铁头更换便宜。高端烙铁头都是高频的。</li>
<li>反正就很高级也很贵啦。我现阶段买了它也是浪费钱，所以没了解具体型号啥的了</li>
</ul>
</li>
<li>恒温加热台：功能跟热风枪差不多，但是体积大很多，而且更贵，新手不推荐买。</li>
</ul>
<p>关于电烙铁头，貌似刀头是最推荐的，因为它用途最广泛，热容大，基本适用所有场景。</p>
<p>电烙铁，我最后买的第一把电烙铁是网友 DIY 的「<strong>L245 焊笔 玫瑰金</strong>」，铝合金 CNC 切割工艺，Type-C 供电，最高支持到 PD 120W，颜值很高，口碑也很好，价格是 148 大洋。
使用起来还是比较 OK 的，热得很快，热容也 OK。不过毕竟是 DIY 的便宜焊笔，质量不稳，我有遇到过多次误休眠、未识别到焊芯、芯片系统崩溃等问题，都是靠断电重启解决的。</p>
<h4 id="电烙铁的使用与保养" class="headerLink">
    <a href="#%e7%94%b5%e7%83%99%e9%93%81%e7%9a%84%e4%bd%bf%e7%94%a8%e4%b8%8e%e4%bf%9d%e5%85%bb" class="header-mark"></a>电烙铁的使用与保养</h4><blockquote>
<p>参考：http://www.cxg.cn/newshow1346.html</p>
</blockquote>
<p>前面讲了，我毕竟买的是 150 一把的焊笔，C245 这个烙铁头也不便宜，直接当耗材随便折腾就太浪费了。有必要搞清楚怎么使用与保养电烙铁：</p>
<ul>
<li>焊接作业前，先为高温海绵加水湿润，再挤掉部分水分。
<ul>
<li>如果使用非湿润的清洁海绵，会使烙铁头受损氧化，导致不沾锡。</li>
<li>另外我发现「<strong>镀铜钢丝球</strong>」确实比高温海绵好用多了，墙裂推荐！笔不干净了往钢丝球里插一插，立即光亮如新。</li>
</ul>
</li>
<li>焊接作业中，每次都先在高温海绵上擦干净烙铁头上的旧锡，再进行焊接。
<ul>
<li>如果是用「<strong>镀铜钢丝球</strong>」，那就直接在钢丝球里插一插，立即光洁如新。</li>
<li>中途不使用时，如果无自动休眠功能，可以手动将温度调低至 200 度以下，避免空烧。空烧会降低烙铁头寿命。</li>
</ul>
</li>
<li>焊接完毕后，将温度调至约 250 摄氏度，使用湿润的高温海绵清洁烙铁头，最后将烙铁头加上一层新锡作保护，这样可以保护烙铁头和空气隔离，烙铁头不会氧化变黑。</li>
<li>烙铁头已经氧化、不沾锡时应如何处理
<ul>
<li>先把温度调到 300 摄氏度，用清洁海绵清理烙铁头，并检查烙铁头状况。</li>
<li>如果烙铁头的镀锡层部分含有黑色氧化物时，可镀上新锡层，再用清洁海绵抹净烙铁头。如此重复清理，直到彻底去除氧化物，然后在镀上新锡层。
<ul>
<li>将温度调至 200 摄氏度左右貌似比较容易上锡，不易聚成球。</li>
<li>实测上锡再用海绵抹除，每次都能摸走一些黑色氧化物，非常有效。不过要清理干净还是需要一些耐心。</li>
</ul>
</li>
<li>如果烙铁头变形或穿孔，必须替换新咀。</li>
</ul>
</li>
<li>其他注意事项
<ul>
<li>勿大力焊接：只要让烙铁头充分接触焊点，热量就可传递，无需大力焊接。</li>
<li>尽量低温焊接：高温焊接会加速烙铁头氧化，降低烙铁头使用寿命。如烙铁头温度超过470℃，它的氧化速度是380℃的两倍。</li>
<li>经常保持烙铁头上锡：这可以减低烙铁头的氧化机会，使烙铁头更耐用。</li>
<li>保持烙铁头清洁与及时清理氧化物</li>
<li>小心放入烙铁架：如果烙铁头接触到烙铁架无法自动休眠，长时间空烧将会毁掉烙铁头。</li>
<li>选用活性低的助焊剂：最便宜的就是松香，更好一点的是无铅无酸无卤素助焊剂。</li>
</ul>
</li>
</ul>
<h4 id="焊锡丝在焊接过程中为什么会爆锡" class="headerLink">
    <a href="#%e7%84%8a%e9%94%a1%e4%b8%9d%e5%9c%a8%e7%84%8a%e6%8e%a5%e8%bf%87%e7%a8%8b%e4%b8%ad%e4%b8%ba%e4%bb%80%e4%b9%88%e4%bc%9a%e7%88%86%e9%94%a1" class="header-mark"></a>焊锡丝在焊接过程中为什么会爆锡？</h4><blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/584316437" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/584316437</a></p>
</blockquote>
<p>建议直接看上面的文章，可能的原因大概是：</p>
<ol>
<li>受潮</li>
<li>焊锡丝混有杂质，或者助焊剂含量过高</li>
<li>焊接操作时手上有汗或是洗过手后手没有完全干就开始焊接</li>
<li>烙铁温度过高</li>
</ol>
<p><del>我最近买的两卷焊锡丝就有爆锡的问题，烙铁温度是设的很常规的 320 度甚至更低的 290 度，现在怀疑是不是这个无铅焊锡丝有问题</del>。
罪魁祸首找到了，是因为我的锡线架，它下方就是湿润的高温海绵&hellip;这显然很容易受潮&hellip;</p>
<h4 id="如何使用电烙铁进行拆焊" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8%e7%94%b5%e7%83%99%e9%93%81%e8%bf%9b%e8%a1%8c%e6%8b%86%e7%84%8a" class="header-mark"></a>如何使用电烙铁进行拆焊</h4><p>当你焊错焊反了元件，或者你需要修修改改电路板时，就需要先进行拆焊。</p>
<p>用电烙铁进行拆焊需要注意这些事项：</p>
<ul>
<li>温度必须要高，起码 350 以上</li>
<li>烙铁尖必须留点锡在上面。如果烙铁尖不挂锡，焊接的时候会发现即使温度高，电路板的焊锡也很难融化</li>
<li>另一个方式是先加点有铅锡丝降低焊锡熔点，然后再用吸锡器或吸锡带来吸</li>
<li>如果用吸锡器，发现不撤烙铁头直接把吸锡器怼上去，效果是最好的</li>
<li>如果使用的是吸锡带，温度就必须更高，估计至少得 380 甚至更高
<ul>
<li>因为吸锡带一般是纯铜，导热性能很好。一般 320 度就很容易熔的锡，上了吸锡带后热量全被吸锡带传导走了，温度不高根本融化不了</li>
</ul>
</li>
</ul>
<p>或者直接上热风枪+镊子也行（我还没试过&hellip;）。</p>
<h3 id="2-其他工具与材料" class="headerLink">
    <a href="#2-%e5%85%b6%e4%bb%96%e5%b7%a5%e5%85%b7%e4%b8%8e%e6%9d%90%e6%96%99" class="header-mark"></a>2. 其他工具与材料</h3><p>焊材（建议日常用贵一点的无铅锡丝，虽然熔点高些，但对身体好）：</p>
<ul>
<li><strong>焊锡丝</strong>：最常见的焊材，不过稍微要求一点焊接技术，可能需要大约半个小时熟悉下
<ul>
<li>常用 0.8mm 跟 1.0mm 的锡丝</li>
<li>个人玩建议买无铅的，虽然贵点熔点高一点，但更环保，对身体也好。</li>
</ul>
</li>
<li><strong>锡膏</strong>：新型焊接材料，由焊锡粉、助焊剂以及其它的表面活性剂等混合成的膏状物。
<ul>
<li>对于常用焊接场景，可以直接抹上锡膏，然后用热风枪一吹，或者用烙铁刀头拖焊，或者直接上发热板 / 恒温加热台，据说非常简单好用。</li>
<li>最常用的场景是复杂 PCB 板子，直接用定制的钢丝网覆盖 PCB 板子刷上锡膏、直接就把触点都刷上了，然后再用镊子手工贴上贴片元器件。不过这个有难度&hellip;已经是高手玩法了。最省心是花钱直接找 PCB 厂子给打印 + 焊接（钞能力）。</li>
<li>对于焊点不多的贴片，可以直接使用针筒式的锡膏挤上去，然后再用牙签或镊子去掉多余的锡膏，用镊子把贴片元件放上去（有点歪没事，加热时焊锡的张力会使它自动回正），最后直接上热风枪或加热台就能焊接 ok 了。</li>
<li>同样建议买无铅的，虽然贵点熔点高一点，但更环保，对身体也好。</li>
</ul>
</li>
<li><strong>高温海绵</strong>：可以说是焊接必备了，一定要加水湿润后再使用。可以多备几片，脏了洗洗，洗不干净就换。</li>
<li><strong>镀铜钢丝球</strong>：同样是用于清洁烙铁头的，前面讲焊接技术时已经说过了，这个确实比高温海绵好用很多。</li>
<li><strong>助焊剂 Flux</strong>：
<ul>
<li>在焊接工艺中能帮助和促进焊接过程，同时具有保护作用、阻止氧化反应的化学物质。</li>
<li>高纯度松香：便宜常用，一般焊个传感器跟普通 PCB 板子完全够用。
<ul>
<li>如果板子要长期使用，那焊完需要用酒精浸泡清洗，避免助焊剂碳化导致绝缘性能下降。（如果只是练手的板子，那就无所谓了）</li>
</ul>
</li>
<li>无铅无卤无酸助焊剂：高端助焊剂，免洗
<ul>
<li>无铅主要是为了环保，对身体好。</li>
<li>因为卤素离子很难清洗干净，助焊剂残留将导致绝缘性能下降，因此免洗助焊剂必须得无卤素。</li>
<li>无酸是为了避免助焊剂腐蚀电路板跟、引脚、烙铁头。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>以及其他焊接相关工具：</p>
<ul>
<li>吸锡器：主要用于电器拆焊
<ul>
<li>场景：一是焊错了或者锡多了，拆焊后重新焊接。二是拆焊其他电路</li>
<li>这玩意儿一个便宜的才十多块，入门阶段买一个也行。不过也有说拿电烙铁热一下然后一磕，焊锡就自己掉下去了，自己玩不一定需要这玩意儿。</li>
</ul>
</li>
<li>吸锡带：拿来清理表贴焊盘上的残锡。就是一卷细铜丝编制的带子，融化的锡容易被它吸走
<ul>
<li>比吸锡器更便宜万用，缺点是需要更高的温度，可以考虑买一卷。</li>
</ul>
</li>
<li>热风枪：貌似主要是拆焊用的，当然用来吹热缩管也很好用。</li>
<li>焊台夹具：焊线焊板子都挺实用，相当于长出来四只手。而且相比放桌面，它的散热速度低很多，更难失温。</li>
<li>尖嘴钳：焊接完一些非贴片元件，必须要把多余的引脚剪掉，尖嘴钳感觉挺需要的。</li>
<li>维修工作台（耐高温硅胶垫）：淘宝上一二十块钱一块，可以保护桌子、方便放一些小元器件。</li>
</ul>
<p>还有就是跟焊接没啥关系，但是 DIY 常用的工具：</p>
<ul>
<li>切割垫：如果需要做一些切割，这个应该也很有用，看许多网友都有，不过我暂时没搞清楚自己是否需要。</li>
<li>螺丝磁性收纳垫：其实跟焊接关系不大了，不过也列一下</li>
<li>螺丝刀 + 万能扳手 + 水口钳：这个好像跟焊接没啥关系，不过也可以列一下
<ul>
<li>尤其是电动螺丝刀，刀头一定要买好一点的，并且最好是标准有替代品的。我以前用电动螺丝刀就遇到过刀头硬度不行被十字螺丝刀头磨平了的情况&hellip;</li>
<li>水口钳推荐德力西</li>
</ul>
</li>
<li>螺丝 + 螺母：螺丝刀跟扳手都有了，螺丝螺母不得买几套？
<ul>
<li>其中有些特别的是自锁螺母，这种螺母自带尼龙自锁圈，即使没拧到位也能自锁。不过需要用比较大的力气才能拧进去，这是正常现象。</li>
<li><a href="https://zhuanlan.zhihu.com/p/107820259" target="_blank" rel="noopener noreferrer">螺母防松的六种基本方法，你知道几个？（动图）</a></li>
<li>螺丝的型号，DIY 中常用的，M3即螺絲外徑為 3mm, M4 即螺絲外徑為 4mm，同理 M5 即 5mm
<ul>
<li>有時會註明螺絲牙距，如 M3x0.5，M4x0.70，M5x0.8，M6x1，但因為这是標準規範，通常不提</li>
</ul>
</li>
<li>对结构强度要求不高的场景，也可以自己用 3D 打印机打印螺丝螺母。</li>
<li>螺丝更详细的中英术语对照：<a href="https://www.weicheng-screw.com.tw/news-detail-1432955.html" target="_blank" rel="noopener noreferrer">螺絲規格與定義 - 緯丞螺絲</a></li>
</ul>
</li>
<li>游标卡尺 + 卷尺：最简单的是买数字的，不需要费心思读数&hellip;也推荐德力西的</li>
<li>3D 打印机、激光切割机等等其他 DIY 工具</li>
</ul>
<h2 id="五后续学习路线" class="headerLink">
    <a href="#%e4%ba%94%e5%90%8e%e7%bb%ad%e5%ad%a6%e4%b9%a0%e8%b7%af%e7%ba%bf" class="header-mark"></a>五、后续学习路线</h2><p>有了电路基础后，首先可以买一些入门的焊接套件练练焊接技术，并搞明白它的原理。
我在淘宝「电子爱好者之家」上买了几个焊接套件，如指尖陀螺、5v 升 12v 升压板、LED 摇摇棒、十二个实验洞洞板套件、高压发生器等。</p>
<p>边玩边学习相关知识是最有意思的，玩到一定阶段后，可以再考虑补一补基础知识。
基础理论方面我查到这几本（为了我的英语能力，选择读英文的）：</p>
<ul>
<li><a href="https://book.douban.com/subject/30332697/" target="_blank" rel="noopener noreferrer">Practical Electronics for Inventors, Fourth Edition</a>: 中文版名为《实用电子元器件与电路基础》，是评论区 <a href="https://github.com/panqiincs" target="_blank" rel="noopener noreferrer">@辛未羊</a> 推荐的，感觉确实很适合我这种业余新手入门~</li>
<li><a href="https://book.douban.com/subject/1926610/" target="_blank" rel="noopener noreferrer">Foundations of Analog and Digital Electronic Circuits</a>：这本书比较受推荐，中文版《模拟和数字电子电路基础》，豆瓣评分 9.3，不过我看了下比上面那本要难，感觉适合后面进阶看。</li>
</ul>
<p>学习基础的电路理论时可以仿真软件同步学习，如：</p>
<ul>
<li>Multisim（元器件仿真）、Proteus（单片机仿真）
<ul>
<li>这两个软件都非常流行，不过基本都仅支持 Windows 系统，我选择放弃。</li>
</ul>
</li>
<li>EDA（Electronic Design Automation） 电路板原理图、PCB（Printed Circuit Board） 设计工具
<ul>
<li><a href="https://lceda.cn/" target="_blank" rel="noopener noreferrer">立创 EDA</a>: 国产 EDA，全平台支持，也提供 Web 版</li>
<li><a href="https://github.com/KiCad" target="_blank" rel="noopener noreferrer">KiCAD</a>: 开源电路板设计工具，功能强大，支持插件，社区资源多。</li>
</ul>
</li>
</ul>
<h3 id="1-单片机" class="headerLink">
    <a href="#1-%e5%8d%95%e7%89%87%e6%9c%ba" class="header-mark"></a>1. 单片机</h3><p>有一定电路基础后，就可以开始玩单片机了。</p>
<ul>
<li>介绍：单片机的英文名叫 Microcontroller Unit，缩写为 <strong>MCU</strong>. 它是把 CPU、RAM、定时/计数器（timer/counter）、I/O 接口等都集成在一块集成电路芯片上的微型计算机。</li>
<li>应用：主要用于前端的无操作系统、以实时控制为主的环境，如电子钟表、电机控制等。在硬件爱好者手中可用于机器人前端控制，四轴飞行器前端控制，3D打印机前端控制等。</li>
<li>典型产品：
<ul>
<li>Arduino: AVR 单片机为核心控制器的单片机应用开发板，是开源硬件，新手友好</li>
<li>STM32: 貌似是单片机从业人员的入行首选，使用 ARM Cortex-M 系列核心。</li>
</ul>
</li>
<li>补充说明：
<ul>
<li>单片机非常简单，因为很接近底层，而且硬件配置极差，干不了太多的事。主要的优势就是稳定、开发也简单。</li>
<li>单片机跟硬件的绑定很严重，经常出现一套代码换一个单片机平台，就得完全重写。</li>
</ul>
</li>
</ul>
<p>单片机最简单的玩法当属 <a href="https://github.com/esphome/esphome" target="_blank" rel="noopener noreferrer">esphome</a>，只需要会 yaml 配置语言就能开始用 ESP32/ESP8266/ESP32-C3 等 MCU 玩智能家居，不需要写任何代码，生态非常丰富，作为入门路径感觉很合适（文章开头就说了，我就是从这玩意儿入坑的硬件&hellip;）</p>
<p>但是 ESPHome 毕竟太简单，用的都是别人写好的现成模块，想实现点更自定义的功能就得自己学习单片机编程了。</p>
<p>我的单片机编程学习路径大概是：</p>
<ul>
<li>8051: 最简单最经典的单片机
<ul>
<li>我的 8051 汇编学习笔记与代码：<a href="https://github.com/ryan4yin/learn-8051-asm" target="_blank" rel="noopener noreferrer">ryan4yin/learn-8051-asm</a></li>
</ul>
</li>
<li>STM32: 工业届应用最广泛的单片机，网上资料众多。
<ul>
<li>开发工具链很成熟完善，不过有点偏底层，适合用于学习底层知识。</li>
<li>我的 STM32 学习笔记与代码（持续更新中，使用 C 语言，后续打算试下 Rust）：<a href="https://github.com/ryan4yin/learn-stm32f103c8t6" target="_blank" rel="noopener noreferrer">ryan4yin/learn-stm32f103c8t6</a></li>
</ul>
</li>
<li>ESP32: 包含 wifi 蓝牙功能的 IoT 单片机，在物联网领域应用非常广泛，硬件发烧友的最爱。
<ul>
<li>乐鑫官方的 ESP-IDF 完全开源，功能比较完善，封装层次比 STM32 HAL 更高，而且迭代很快，用起来更简单（不过相对地就对底层更缺乏掌控）。</li>
<li>我的 ESP32 学习笔记与代码（同样持续更新中，也是用的 C，后面也打算用 Rust 搞搞）：<a href="https://github.com/ryan4yin/knowledge/tree/master/electrical-engineering/esp32" target="_blank" rel="noopener noreferrer">electrical-engineering/esp32</a></li>
</ul>
</li>
<li>其他
<ul>
<li>买了矽速科技新出的 Maix Zero M0S/M1S，使用 RISC-V 架构的 MCU，貌似目前必须用芯片官方（博流智能）的 SDK 写代码。点了个灯就一直吃灰了（</li>
</ul>
</li>
</ul>
<blockquote>
<p>单片机领域目前仍然是 ARM32 架构的天下，不过开源免费的 RISC-V 架构发展迅猛，有望与 ARM32 分庭抗礼。目前乐鑫基于 RISC-V 的 ESP32C3 就挺受欢迎的，还出了书，另外后续版本 ESP32C5 也已经被 ESP-IDF 支持了，发展很快。</p>
</blockquote>
<h3 id="2-嵌入式-linuxlinux-on-embedded-system" class="headerLink">
    <a href="#2-%e5%b5%8c%e5%85%a5%e5%bc%8f-linuxlinux-on-embedded-system" class="header-mark"></a>2. 嵌入式 Linux（Linux on Embedded System）</h3><blockquote>
<p>嵌入式系统（Embedded System），是指嵌入机械或电气系统内部、具有专一功能和实时计算性能的计算机系统。</p>
</blockquote>
<p>单片机玩够了后，就可以开始玩嵌入式 Linux了。</p>
<ul>
<li>介绍：嵌入式 Linux，即运行 Linux 操作系统的、性能比 MCU 更高的微型计算机，行业上最常用 ARM Cortex-A5X 系列芯片与 Linux 开发一些嵌入式设备。</li>
<li>应用：路由器、电视盒子、智能家居等。在硬件爱好者手里可以用来做计算机视觉控制小车、WiFi、蓝牙控制中枢等等。</li>
<li>典型产品
<ul>
<li>Raspberry Pi: 使用 ARM Cortex-A 系列 CPU 的微型计算机，社区庞大，生态丰富。</li>
<li>其他各种国产派，如基于瑞芯微 RK35XX 系列 SoC 的 OrangePi、RockPi、野火鲁班猫等，它们都比现在的树莓派便宜很多（2023 年的 4B 2G 全新要 1000+ 太恐怖了），性能也更高，生态差一些不过瑕不掩瑜。</li>
<li>STM32/IMX6ULL 也有相关产品</li>
</ul>
</li>
<li>补充说明
<ul>
<li>嵌入式 Linux 代码的可移植性相对要好很多，因为硬件相关的逻辑都封装在驱动层了。</li>
</ul>
</li>
</ul>
<p>我目前的学习顺序与进度：</p>
<ul>
<li>瑞芯微 RK3588s 系列国产派: 性能贼强，还自带 NPU(2TOPS * 3)
<ul>
<li>玩耍的笔记代码放在了这里（Python 与 C 语言）<a href="https://github.com/ryan4yin/knowledge/tree/master/electrical-engineering/rk3588" target="_blank" rel="noopener noreferrer">electrical-engineering/rk3588</a></li>
<li>也用它玩上了 NixOS: <a href="https://github.com/ryan4yin/nixos-rk3588" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-rk3588</a></li>
</ul>
</li>
<li>树莓派 4B:
<ul>
<li>玩耍笔记与代码：<a href="https://github.com/ryan4yin/knowledge/tree/master/electrical-engineering/raspberrypi" target="_blank" rel="noopener noreferrer">electrical-engineering/raspberrypi</a></li>
</ul>
</li>
<li>其他
<ul>
<li>除了前面俩，还兜兜转转玩了很多新产品，笔记都写在这里面了：<a href="https://github.com/ryan4yin/knowledge/tree/master/electrical-engineering/" target="_blank" rel="noopener noreferrer">electrical-engineering</a></li>
<li>MAIX-III AXera-Pi AX620A（爱芯派），1.8TOPS 算力（标称 3.6TOPS 的一半不能用于 AI）
<ul>
<li>这块板子的 NPU 感觉性能还可以，但是 CPU 跟 IO 都有点拉，跑个 <code>pip3 list</code> 都要卡老半天。毕竟 A7 内核，估计性能也就这样了，全靠交叉编译续命。</li>
<li>没啥开源资料，只适合用来玩玩 AI，Linux 系统没啥可玩性。</li>
</ul>
</li>
<li>鲁班猫 0 无线版（LubanCat Zero W）
<ul>
<li>基于 RK3566，开放的资料非常全，包含 SoC 原厂的各种文档、SDK 驱动开发包、核心板封装库，还提供许多免费的在线文档，内容包含  Linux 内核编译部署、Linux 驱动开发、嵌入式 QT 开发等等</li>
<li>因为资料很全，用来学 Linux 内核驱动开发感觉是比较合适的。</li>
</ul>
</li>
<li>矽速科技的 LicheePi 4A，国产高性能 RISC-V 开发版。
<ul>
<li>已经用它玩上了 NixOS: <a href="https://github.com/ryan4yin/nixos-licheepi4a" target="_blank" rel="noopener noreferrer">ryan4yin/nixos-licheepi4a</a></li>
</ul>
</li>
<li>群星闪耀家的 Milk-V Mars，同样是国产高性能 RISC-V 开发版，不过比 LicheePi 4A 弱一些（价格低好多哪）。
<ul>
<li>用的是赛昉家的 JH7100 芯片，用 Nick_Cao 老师的代码跑了 NixOS 玩。</li>
<li>吐槽：它家这名字是会取的，不论是「群星闪耀」还是「Milk-V」都很有意思</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>其他我感兴趣的资料（资料内容有一定的重叠）：</p>
<ul>
<li>《<a href="https://man7.org/tlpi/index.html" target="_blank" rel="noopener noreferrer">Linux/Unix 系统编程手册</a>》：讲解 Linux 的主要系统 API</li>
<li>野火嵌入式 Linux 系列教程：
<ol>
<li><a href="https://doc.embedfire.com/linux/imx6/linux_base/zh/latest/index.html" target="_blank" rel="noopener noreferrer">基础使用 + 内核编程</a>：感觉跟《Linux/Unix 系统编程手册》内容是重复的，可以简单过一过</li>
<li><a href="https://doc.embedfire.com/linux/rk356x/build_and_deploy/zh/latest/index.html" target="_blank" rel="noopener noreferrer">Linux 镜像构建与部署</a>: 跟随此文档自己构建一个 Linux 镜像部署到板卡上，这样可以更好的理解 Linux 的启动过程</li>
<li><a href="https://doc.embedfire.com/linux/rk356x/driver/zh/latest/index.html" target="_blank" rel="noopener noreferrer">Linux 驱动开发入门 - 基于鲁班猫 RK356X 系列板卡</a>: Linux 驱动开发入门教程。</li>
</ol>
</li>
<li><a href="https://github.com/PacktPublishing/Linux-Device-Driver-Development-Second-Edition" target="_blank" rel="noopener noreferrer">Linux Device Driver Development - Second Edition</a>: Linux 驱动编程入门，2022 年出的新书，基于 Linux 5.10，amazon 上评价不错，目前只有英文版，写的很好，对新手很友好。内容跟野火的教程差不多，可以对照学习。
<ul>
<li>另外还有本 2018 年出的 <a href="https://github.com/ALIBERA/linux_book_2nd_edition" target="_blank" rel="noopener noreferrer">Linux Driver Development for Embedded Processors 2nd Edition</a> 可当作参考书看，写得没上面那本好、内容也没那么新，但是看评价也不错，特点是有许多的 Lab 可做。</li>
</ul>
</li>
<li><a href="https://book.douban.com/subject/35415097/" target="_blank" rel="noopener noreferrer">Linux Kernel Programming: A comprehensive guide to kernel internals</a>: Linux 内核编程领域的新书，适合入门 Linux 内核，amazon 上评价挺好，先收藏一个</li>
<li><a href="https://nju-projectn.github.io/ics-pa-gitbook/" target="_blank" rel="noopener noreferrer">南京大学 计算机科学与技术系 计算机系统基础 课程实验 (PA)</a></li>
<li><a href="https://book.douban.com/subject/1776614/" target="_blank" rel="noopener noreferrer">Understanding the Linux Kernel, 3rd Edition</a>：Linux 内核技术进阶。</li>
</ul>
<blockquote>
<p>嵌入式 Linux 领域目前也仍然是 ARM 架构的天下，但是开源免费的 RISC-V 架构发展也很快，性能越来越强，生态越来越好，很值得期待。</p>
</blockquote>
<h2 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h2><p>最近也整了点 FPGA 玩，学了点 Verilog 语言，浅尝辄止，做了点笔记：</p>
<ul>
<li><a href="https://github.com/ryan4yin/knowledge/tree/master/electrical-engineering/fpga" target="_blank" rel="noopener noreferrer">ee/fpga</a></li>
</ul>
<h2 id="社区公众号收藏" class="headerLink">
    <a href="#%e7%a4%be%e5%8c%ba%e5%85%ac%e4%bc%97%e5%8f%b7%e6%94%b6%e8%97%8f" class="header-mark"></a>社区公众号收藏</h2><p>单纯一个人埋头自学未免太过枯燥，效率也不一定高，偶尔也可以逛逛各种社区、看看相关的技术博客、文章，是一个更丰富的信息源。</p>
<p>我收集的一些相关论坛、公众号、交流群总结在了这里，可供参考：</p>
<ul>
<li><a href="https://www.zhihu.com/question/352385472/answer/2921790194" target="_blank" rel="noopener noreferrer">可以给我推荐几个相关的论坛或者微信公众号吗？ - 知乎</a></li>
</ul>
<h2 id="最后简单总结下" class="headerLink">
    <a href="#%e6%9c%80%e5%90%8e%e7%ae%80%e5%8d%95%e6%80%bb%e7%bb%93%e4%b8%8b" class="header-mark"></a>最后简单总结下</h2><p>上面这些都学了一遍的话，业余玩玩硬件应该就很够用了，期待我完成这个学习路线的那一天&hellip;</p>
]]></content></entry><entry><title type="html">2022 年年终总结</title><link href="https://thiscute.world/posts/2022-summary/"/><id>https://thiscute.world/posts/2022-summary/</id><author><name>ryan4yin</name></author><published>2023-01-02T18:00:45+08:00</published><updated>2023-01-02T18:00:45+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/2022-summary/github-profile-2022-ryan4yin.webp" height="1772" width="882"><figcaption></figcaption>
        </figure><h2 id="闲言碎语" class="headerLink">
    <a href="#%e9%97%b2%e8%a8%80%e7%a2%8e%e8%af%ad" class="header-mark"></a>闲言碎语</h2><p>是的又过去一年，又到了一年一度的传统节目——年终总结时间。</p>
<h2 id="2022-年流水账" class="headerLink">
    <a href="#2022-%e5%b9%b4%e6%b5%81%e6%b0%b4%e8%b4%a6" class="header-mark"></a>2022 年流水账</h2><p>先简单过一下我 2022 年的流水账（有记录一个 <code>/history</code>，回顾起来就是方便）：</p>
<ul>
<li>1 月
<ul>
<li>购入 Synthesizer V + 青溯 AI 声库，简单调了几首歌试试，效果非常棒。然后就一直放了一年没碰它&hellip;还试用了免费的 ACE 虚拟歌姬，合成效果确实很强，跟收费的 Synthesizer V 有的一拼。</li>
<li>在家过春节，给家里二楼装了空调、加湿器跟地垫。但是没买地暖垫，导致开了空调后地上的垫子冰凉。后面补买了地暖垫但是已经要上班了没体验上。</li>
</ul>
</li>
<li>2 月跟 3 月
<ul>
<li>想学下区块链技术，结果发现课程一开始就讲加密哈希函数的基本性质，就决定先搞一波密码学，结果就是输出了一个<a href="https://thiscute.world/posts/practical-cryptography-basics-1/" target="_blank" rel="noopener noreferrer">《写给开发人员的实用密码学》系列文章</a>，内容大部分是翻译的，少部分是我自己补充。</li>
<li>主要工作：跟推荐系统大佬一起将服务从 HTTP 切换到 gRPC，效果立竿见影，服务流量下降 50% ~ 60%，延迟下降 30% ~ 50%。</li>
</ul>
</li>
<li>4 月份
<ul>
<li>读完了 <a href="https://github.com/ethereumbook/ethereumbook" target="_blank" rel="noopener noreferrer">Mastering Ethereum</a>，对以太坊有了基本的了解。</li>
<li>读了《Go 程序设计语言（英文版）》
<ul>
<li><figure><img
        
        loading="lazy"
        src="/images/now/the-go-programming-language.webp"
        srcset="/images/now/the-go-programming-language.webp, /images/now/the-go-programming-language.webp 1.5x, /images/now/the-go-programming-language.webp 2x"
        sizes="auto"
        alt="/images/now/the-go-programming-language.webp"
        title="/images/now/the-go-programming-language.webp" ><figcaption class="image-caption">Go 程序设计语言（英文版） 2022-08-19 补图</figcaption>
    </figure></li>
</ul>
</li>
<li>很高兴通过了职级晋升，不再是 SRE 萌新了。</li>
<li>主要工作：使用 <a href="https://github.com/aws/karpenter" target="_blank" rel="noopener noreferrer">aws/karpenter</a> 实现离线计算集群的弹性扩缩容，省了一波成本。</li>
</ul>
</li>
<li>5 月份
<ul>
<li>主要是学完了《深入浅出 Kubernetes》这个极客时间专栏</li>
<li>通过《分布式协议与算法实战》等相关资料简单了解了下分布式共识算法的原理，记录了些笔记，8 月份的时候把笔记整理输出为了一篇博客 <a href="https://thiscute.world/posts/consistency-and-consensus-algorithm/" target="_blank" rel="noopener noreferrer">分布式系统的一致性问题与共识算法</a></li>
<li>还读了许多社区的区块链相关资料，包括但不限于 <a href="https://www.zhihu.com/special/1452635344142909440" target="_blank" rel="noopener noreferrer">Web 3.0：穿越十年的讨论 - 知乎</a>、<a href="https://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek" target="_blank" rel="noopener noreferrer">《Web3 DApp 最佳编程实践指南》</a>、<a href="https://github.com/dcbuild3r/blockchain-development-guide" target="_blank" rel="noopener noreferrer">dcbuild3r/blockchain-development-guide</a></li>
<li>因为 AI 发展迅猛，来了三分钟兴趣学了一点 <a href="https://github.com/d2l-ai/d2l-zh" target="_blank" rel="noopener noreferrer">动手学深度学习 - Pytorch 版</a>，但是进度条走了不到 15% 就不了了之了。</li>
<li>主要工作：研究跨云应用部署方案与跨云 kubernetes 网络方案，如 karmada/kubevela/istio，以及 L4/L7 层的开源/商业网关方案</li>
</ul>
</li>
<li>6 月份
<ul>
<li>读完了《在生命的尽头拥抱你-临终关怀医生手记》</li>
<li>读了一点买的新书：《语言学的邀请》跟《Intimate Relationship》</li>
</ul>
</li>
<li>7 月份
<ul>
<li>主要工作：确定并实施网关架构优化的初步方案，使用 Go 语言写了一个 Nginx Gateway 控制器，迁移流量到新容器化网关省了一波成本。</li>
</ul>
</li>
<li>8 月
<ul>
<li>读完了《在峡江的转弯处 - 陈行甲人生笔记》
<ul>
<li><figure><img
        
        loading="lazy"
        src="/images/now/life-notes-of-chenxingjia.webp"
        srcset="/images/now/life-notes-of-chenxingjia.webp, /images/now/life-notes-of-chenxingjia.webp 1.5x, /images/now/life-notes-of-chenxingjia.webp 2x"
        sizes="auto"
        alt="/images/now/life-notes-of-chenxingjia.webp"
        title="/images/now/life-notes-of-chenxingjia.webp" ><figcaption class="image-caption">陈行甲人生笔记</figcaption>
    </figure></li>
</ul>
</li>
<li>延续上个月对 Linux 系统的兴趣，快速过了一遍 The ANSI C Programming Language 以熟悉 C 的语法，之后开始阅读 <a href="https://man7.org/tlpi/" target="_blank" rel="noopener noreferrer">Linux/Unix 系统编程手册（上册）</a>
<ul>
<li>写了一个小项目 <a href="https://github.com/ryan4yin/video2ascii-c" target="_blank" rel="noopener noreferrer">video2ascii-c</a> 练手 C 语言。</li>
<li><figure><img
        
        loading="lazy"
        src="/images/now/the-asni-c-programming-language.webp"
        srcset="/images/now/the-asni-c-programming-language.webp, /images/now/the-asni-c-programming-language.webp 1.5x, /images/now/the-asni-c-programming-language.webp 2x"
        sizes="auto"
        alt="/images/now/the-asni-c-programming-language.webp"
        title="/images/now/the-asni-c-programming-language.webp" ><figcaption class="image-caption">The ANSI C Programming Language</figcaption>
    </figure></li>
</ul>
</li>
<li>因为今年搞网关 APISIX/Nginx 接触比较多，看了一点极客时间《OpenResty 从入门到实战》但是因为兴趣并不强烈，又不了了之了。</li>
<li>主要工作：
<ul>
<li>搞网关优化省了一波成本，但是期间也搞出一个严重故障&hellip;</li>
<li>承接了一个数据上报网关的需求，需要在网关层支持一些稍微复杂点的功能确保升级流程的稳定性。跟 APISIX 官方沟通后得到了比较好的解决方案 <a href="https://github.com/apache/apisix/discussions/7773" target="_blank" rel="noopener noreferrer">custom plugin - set an upstream as a http fallback server</a></li>
</ul>
</li>
</ul>
</li>
<li>9 月
<ul>
<li>偶然发现手机桌面上有一个安装了好久但是一直没用过的 APP 英语流利说，顺手用它测了下自己的英文水平。然后就对英语感兴趣了，制定了英语学习计划并发布对应的博文 <a href="https://thiscute.world/posts/learn-english-again/" target="_blank" rel="noopener noreferrer">Learn English Again</a>，然后就开始坚持学英语，感觉整个过程都很顺利。</li>
<li>主要工作：
<ul>
<li>仍然是搞网关优化省成本，因为各种原因，再次输出一篇 Post Mortem</li>
<li>搞数据上报网关的需求</li>
</ul>
</li>
</ul>
</li>
<li>10 月
<ul>
<li>找了很多英语学习资料，通过每日的坚持学习，渐渐找到了自己的英语学习节奏，完善了学习规划。</li>
<li>《Linux/Unix 系统编程手册（上册）》阅读进度过半，但是业余时间就这么点，同时用来学习 Linux 跟英语实在有点吃力，这本书的阅读就慢慢放下了。
<ul>
<li><figure><img
        
        loading="lazy"
        src="/images/now/the-linux-programming-interface.webp"
        srcset="/images/now/the-linux-programming-interface.webp, /images/now/the-linux-programming-interface.webp 1.5x, /images/now/the-linux-programming-interface.webp 2x"
        sizes="auto"
        alt="/images/now/the-linux-programming-interface.webp"
        title="/images/now/the-linux-programming-interface.webp" ><figcaption class="image-caption">Linux/Unix 系统编程手册（上册）</figcaption>
    </figure></li>
</ul>
</li>
<li>通过友链漫游，发现了 <a href="https://0xffff.one" target="_blank" rel="noopener noreferrer">0xFFFF 社区</a>，内容质量很高，也在社区的 QQ 群里跟群友们聊了些有意思有价值的内容。</li>
<li>打游戏学英语
<figure><img
        
        loading="lazy"
        src="/images/learn-english-again/genshin-impact-noelle.webp"
        srcset="/images/learn-english-again/genshin-impact-noelle.webp, /images/learn-english-again/genshin-impact-noelle.webp 1.5x, /images/learn-english-again/genshin-impact-noelle.webp 2x"
        sizes="auto"
        alt="/images/learn-english-again/genshin-impact-noelle.webp"
        title="/images/learn-english-again/genshin-impact-noelle.webp" ><figcaption class="image-caption">超飒的重剑女仆 Noelle</figcaption>
    </figure>
<figure><img
        
        loading="lazy"
        src="/images/learn-english-again/demo2-talk-1.webp"
        srcset="/images/learn-english-again/demo2-talk-1.webp, /images/learn-english-again/demo2-talk-1.webp 1.5x, /images/learn-english-again/demo2-talk-1.webp 2x"
        sizes="auto"
        alt="/images/learn-english-again/demo2-talk-1.webp"
        title="/images/learn-english-again/demo2-talk-1.webp" ><figcaption class="image-caption">DEEMO 2 中丰富的对话内容</figcaption>
    </figure></li>
<li>因为许多原因，中概股大跌，公司架构大调整，走了很多大佬，包括去年带我冲浪的算法部门前辈。</li>
<li>主要工作
<ul>
<li>搞数据上报网关的需求，一路踩坑，总算把数万 QPS 的流量全部迁移到新网关上了。</li>
</ul>
</li>
</ul>
</li>
<li>11 月
<ul>
<li>重新对搞 Homelab 产生了兴趣，买了三台 MINI 主机组了一个 Homelab，时隔一年多又开始折腾 Proxmox VE，做各种规划。</li>
<li>迭代了很多次后的个人 Homelab 文档：<a href="https://github.com/ryan4yin/knowledge/tree/master/homelab" target="_blank" rel="noopener noreferrer">ryan4yin/knowledge/homelab</a>
<ul>
<li><figure><img
        
        loading="lazy"
        src="/images/now/dashy-homepage.webp"
        srcset="/images/now/dashy-homepage.webp, /images/now/dashy-homepage.webp 1.5x, /images/now/dashy-homepage.webp 2x"
        sizes="auto"
        alt="/images/now/dashy-homepage.webp"
        title="/images/now/dashy-homepage.webp" ><figcaption class="image-caption">我的 Homelab 导航页 2022-11-12</figcaption>
    </figure></li>
</ul>
</li>
<li>因为业余时间沉迷搞 Homelab，英语打卡就变得断断续续了&hellip;但是词汇量测试的效果出乎意料，进步速度喜人，阅读能力也能感觉到有明显提升。</li>
<li>月底搬家换了个新租房，床是挂天花板上的，房间就宽敞了很多，而且拉了独立的电信宽带，网速杠杠的。</li>
<li>11/25 去东莞松山湖跟高中同学聚会，然后跟几位同学打麻将打到半夜三点多&hellip; 还远远眺望了眼同学读博的地方——「<a href="http://english.ihep.cas.cn/csns/" target="_blank" rel="noopener noreferrer">中国散裂中子源</a>」，感觉很高大上
<figure><img
        
        loading="lazy"
        src="/images/now/play-mahjong-with-classmates.webp"
        srcset="/images/now/play-mahjong-with-classmates.webp, /images/now/play-mahjong-with-classmates.webp 1.5x, /images/now/play-mahjong-with-classmates.webp 2x"
        sizes="auto"
        alt="/images/now/play-mahjong-with-classmates.webp"
        title="/images/now/play-mahjong-with-classmates.webp" ></figure>
<figure><img
        
        loading="lazy"
        src="/images/now/china-spallation-neutron-source.webp"
        srcset="/images/now/china-spallation-neutron-source.webp, /images/now/china-spallation-neutron-source.webp 1.5x, /images/now/china-spallation-neutron-source.webp 2x"
        sizes="auto"
        alt="/images/now/china-spallation-neutron-source.webp"
        title="/images/now/china-spallation-neutron-source.webp" ></figure></li>
<li>主要工作：继续推进线上网关优化项目，以及调研 K8s / Istio 的新版本变化，为集群升级做预备工作。</li>
</ul>
</li>
<li>12 月
<ul>
<li>从 Homelab 折腾到 HomeAssistant/ESPHome，然后就折腾 ESP32/ESP8266，结果很意外地就买了一堆硬件，入手了电烙铁热风枪万用表等各种仪器，ESP/51/STM32 都玩了个遍&hellip;
<ul>
<li>输出内容有两个代码仓库：<a href="https://github.com/ryan4yin/learn-8051-asm" target="_blank" rel="noopener noreferrer">learn-8051-asm</a> 与 <a href="https://github.com/ryan4yin/learn-stm32f103c8t6" target="_blank" rel="noopener noreferrer">learn-stm32f103c8t6</a>，以及一份 EE 笔记：<a href="https://github.com/ryan4yin/knowledge/blob/master/electrical-engineering" target="_blank" rel="noopener noreferrer">Electrical Engineering</a>
<figure><img src="/images/now/experience-of-electrical-engineering.webp" width="60%"/><figcaption>
                  <h4>我的电子电路初体验</h4>
              </figcaption>
      </figure>

<figure><img src="/images/now/8051-display-2023.webp" width="70%"/><figcaption>
                  <h4>8051 汇编 - 数码管显示 2023</h4>
              </figcaption>
      </figure>
</li>
</ul>
</li>
<li>ChatGPT 横空出世，引发全网热潮。有技术大佬感慨，这个时刻竟然来临得如此之快，惊喜之余也有点猝不及防。我也把玩了一波，也用它帮助我学了许多硬件相关的东西，很有帮助。
<ul>
<li>个人猜测未来 ChatGPT 成熟后大概率能极大提升技术人员的工作效率，很可能间接影响到许多人的工作。</li>
</ul>
</li>
<li>年底还入手了一台 3D 打印机 ELEGOO Neptune 3 Pro&hellip;</li>
<li>全国逐渐放开疫情管控，我得了新冠，然后康复&hellip;</li>
<li>这个月折腾硬件，英语漏打卡更严重了，但是词汇量仍然在稳步增长，阅读起来也是越来越顺畅。</li>
<li>主要工作：
<ul>
<li>线上网关优化项目基本落地，取得了预期收益，但是没达到之前设的激进目标。（旧网关仍留存极少部分流量，还需要时间去统一网关架构）</li>
<li>做 K8s 集群升级准备，然后月底公司大面积新冠，拖慢了这项工作的进度，即使后调了升级时间，仍然感觉有点虚&hellip;</li>
</ul>
</li>
</ul>
</li>
<li>最后是连续三年蝉联我年度歌手的天依同学，截图放这里纪念一下：
<figure><img src="/images/now/netease-cloud-music-2022-singer-of-ryan4yin.webp" width="50%"/><figcaption>
              <h4>我的网易云年度歌手</h4>
          </figcaption>
  </figure>
</li>
</ul>
<h2 id="2022-年-highlight" class="headerLink">
    <a href="#2022-%e5%b9%b4-highlight" class="header-mark"></a>2022 年 Highlight</h2><h3 id="1-英语" class="headerLink">
    <a href="#1-%e8%8b%b1%e8%af%ad" class="header-mark"></a>1. 英语</h3><p>英语也是我今年比较惊喜的一个部分，很长一段时间内，我都觉得英语的优先级并不高，一直没有把它的学习排上日程，水平也一直没啥显著提升。</p>
<p>但是从今年 9 月份开始到现在这四个月的英语学习中，我的进步相当明显，从去年大概  4700 词，到现在测试结果为 6583 词，涨了近 2000 词，月均接近 500 词（按这个速度，2023 年 10000 词的目标好像没啥难度了）。</p>
<p>词汇量测试结果按时间排序如下，使用的测试工具是 <a href="https://preply.com/en/learn/english/test-your-vocab" target="_blank" rel="noopener noreferrer">Test Your Vocabulary</a> ：</p>
<p><figure><img src="/images/now/2023-01-02-test-your-vocabulary-result.webp" width="70%"/><figcaption>
            <h4>2023-01-02 词汇量测试结果：6583 词</h4>
        </figcaption>
</figure>

<figure><img src="/images/now/2022-12-19-test-your-vocabulary-result.webp" width="40%"/><figcaption>
            <h4>2022-12-19 词汇量测试结果：6300 词</h4>
        </figcaption>
</figure>

<figure><img src="/images/learn-english-again/2022-11-17-test-your-vocabulary-result.webp" width="65%"/><figcaption>
            <h4>2022-11-17 词汇量测试结果：5600 词</h4>
        </figcaption>
</figure>

<figure><img src="/images/learn-english-again/2022-10-18-test-your-vocabulary-result.webp" width="40%"/><figcaption>
            <h4>2022-10-18 词汇量测试结果：5100 词</h4>
        </figcaption>
</figure>
</p>
<p>另外因为主要是靠读书来学英语，今年的英文阅读能力也有明显提升，跟 9 月份刚开始读的时候比，阅读体验要流畅多了。
一些英文原版书阅读成就：</p>
<figure><img src="/images/now/mintreading-first-100days-achivement.webp" width="35%"/><figcaption>
            <h4>在薄荷阅读上读完的第一本英语原版书</h4>
        </figcaption>
</figure>

<p>而口语、写作这些今年基本没练习，原地踏步。</p>
<h3 id="2-业余技术" class="headerLink">
    <a href="#2-%e4%b8%9a%e4%bd%99%e6%8a%80%e6%9c%af" class="header-mark"></a>2. 业余技术</h3><p>今年业余搞的技术，感觉这些都是我比较满意的：</p>
<ul>
<li>Web3: 今年上半年花了不少时间去了解 Web3，但是仍然没敢说自己已经懂了它。水比较深，浅尝辄止。</li>
<li>电子电路（硬件）：点亮这个技能完全是个意外&hellip;但也挺惊喜的，毕竟我大学学的建筑声学，以前都没接触过硬件。</li>
<li>Go 语言：去年底定的目标是将 Go 语言应用在至少两个项目上，实际上只用在了一个项目上，完成度 50% 吧。</li>
<li>Linux: Linux 今年主要是复习了一遍 C 语言，然后看了半本《Linux/Unix 系统编程手册（上册）》，之后因为学英语就给放下了。
<ul>
<li>毕竟英语的成果很不错，这个结果我觉得也是预期内的。</li>
</ul>
</li>
<li>博客：今年博客经营得尚可，数了下有 18 篇技术干货，四篇非技术文章。最主要是三月份翻译密码学的文章冲了一波内容量。虽然 12 月份又鸽掉了&hellip;总体还是满意的。</li>
</ul>
<h3 id="3-工作" class="headerLink">
    <a href="#3-%e5%b7%a5%e4%bd%9c" class="header-mark"></a>3. 工作</h3><p>SRE 组 2022 年工作的主旋律其实就是省钱，我 2022 年的工作上有更多的挑战，不过因为得心应手很多，反倒没什么想特别着墨描述的了。</p>
<p>我上半年工作成果比较突出，下半年虽然工作成果差一些，但是业余的学习成果相当突出，总体很满意自己今年的成绩。</p>
<p>单纯从工作方面讲，我给自己的评价仍然是「良好」。</p>
<h3 id="4-阅读" class="headerLink">
    <a href="#4-%e9%98%85%e8%af%bb" class="header-mark"></a>4. 阅读</h3><p>2022 年一共读完了这些书：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 《人间失格》</li>
<li><input checked="" disabled="" type="checkbox"> 《月宫》</li>
<li><input checked="" disabled="" type="checkbox"> 《<a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreferrer">Practical Cryptography for Developers</a>》</li>
<li><input checked="" disabled="" type="checkbox"> 《<a href="https://github.com/ethereumbook/ethereumbook" target="_blank" rel="noopener noreferrer">Mastering Ethereum</a>》</li>
<li><input checked="" disabled="" type="checkbox"> 《Go 程序设计语言（英文版）》</li>
<li><input checked="" disabled="" type="checkbox"> 《深入浅出 Kubernetes - 张磊》</li>
<li><input checked="" disabled="" type="checkbox"> 《在生命的尽头拥抱你-临终关怀医生手记》</li>
<li><input checked="" disabled="" type="checkbox"> 《在峡江的转弯处 - 陈行甲人生笔记》</li>
<li><input checked="" disabled="" type="checkbox"> 《The ANSI C Programming Language》</li>
<li><input checked="" disabled="" type="checkbox"> The Time Machine</li>
<li><input checked="" disabled="" type="checkbox"> Learn Robotics With Raspberry Pi
<ul>
<li>学习使用树莓派控制智能小车，结合本书与网上资料，我制作了一台使用 Xbox One 手柄遥控的四驱小车，相当有意思~</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> Learn Robotics Programming, 2nd Edition
<ul>
<li>跟前面那本一样是讲树莓派小车的，不过这本书更深入，代码含量高很多。</li>
<li>快速翻了一遍，跳过了其中大部分代码，因为书中的小车不太符合我的需求。</li>
</ul>
</li>
<li><input checked="" disabled="" type="checkbox"> The Unlikely Pilgrimage of Harold Fry</li>
<li><input checked="" disabled="" type="checkbox"> 51 单片机自学笔记</li>
</ul>
<p>看起来，去年定的一个月至少读一本书的目标，还是达成了滴~</p>
<h2 id="2023-年的展望" class="headerLink">
    <a href="#2023-%e5%b9%b4%e7%9a%84%e5%b1%95%e6%9c%9b" class="header-mark"></a>2023 年的展望</h2><h3 id="技术侧" class="headerLink">
    <a href="#%e6%8a%80%e6%9c%af%e4%be%a7" class="header-mark"></a>技术侧</h3><p>2022 年的结果跟年初的展望区别仍然是挺大的，但是我个人挺满意。</p>
<p>这里再记一下 2023 年技术上的展望，看看今年能实现多少，又会点出多少意料之外的技能吧哈哈：</p>
<ul>
<li>云原生
<ul>
<li>去年定的阅读 k8s 及相关生态的源码没任何进度，2023 年继续&hellip;</li>
<li>2019 年到现在，我的工作时长已经有三年半了，希望更多的东西能通过学习底层知识去知其所以然，而不是全靠网上找资料，人云亦云一知半解地去解决问题。</li>
</ul>
</li>
<li>Linux 与网络
<ul>
<li>2023 年把《Linux/Unix 系统编程手册》这套书看完，并且过完 <a href="https://0xffff.one/d/1085-mit6-s081-operating-system" target="_blank" rel="noopener noreferrer">0xFFFF - MIT6.S081 Operating System Engineering (Fall 2020)</a> 这个课，对 Linux 内核与操作系统形成较深入的理解。</li>
<li>借着对硬件的兴趣学一学 Linux 驱动开发。</li>
<li>学习学习时下超流行的 eBPF 技术</li>
</ul>
</li>
<li>3D 打印
<ul>
<li>2022 年底买了台打印机，那不必须得打印点自己设计的东西？</li>
<li>FreeCAD 学！Blender 可能跟 3D 打印没啥关系但是也要学！</li>
</ul>
</li>
<li>编程语言
<ul>
<li>今年 Go/C 两个语言的技能点感觉是点出来了，2023 年需要巩固下，用它们完成些更复杂的任务。</li>
<li>另外借着搞硬件的兴趣，把 Rust/C++ 两门语言也玩一玩
<ul>
<li>C++ 主要是用来玩 ESP32/ESP8266，rust 那可是时下最潮的系统级语言，2022 年虽然用 rust 写了点 demo 但离熟练还差很远。</li>
</ul>
</li>
</ul>
</li>
<li>其他
<ul>
<li>2022 年我给开源社区提交的代码贡献几乎没有，希望 2023 年能至少给三个开源项目提交一些代码贡献，这也是检验自己的代码水平。</li>
<li>制作一台自己的无人机或者穿越机（虽然还不太懂什么是穿越机&hellip;），并借此练习自己学习的软硬件知识。</li>
<li>更多地在公司内部、博客等地方分享自己所学的知识，提升所学知识的可复用性，同时也碰撞出更多的灵光，更深入地理解它们。</li>
</ul>
</li>
</ul>
<h3 id="生活侧" class="headerLink">
    <a href="#%e7%94%9f%e6%b4%bb%e4%be%a7" class="header-mark"></a>生活侧</h3><p>2022 年初我写的生活上的展望，貌似只有「阅读」这一项达标了&hellip;
不过今年也仍旧记录下 2023 年的展望：</p>
<ul>
<li>2022 年因为疫情以及自己懒，参与的户外活动相当少，2023 年希望能更多的做些户外运动，身体还是很重要的啊。</li>
<li>把轮滑水平练上去一点，轮滑鞋在 2022 年吃灰了几乎一整年&hellip;</li>
<li>音乐上，口琴、竹笛、midi 键盘、Synthesizer V / ACE Studio / Reaper，总要把其中一个练一练吧&hellip;（什么？学吉他？？不敢开新坑了，旧坑都还没填完呢&hellip;）</li>
<li>阅读：仍然跟去年保持一样的节奏就好，目标是一个月至少阅读一本书。</li>
<li>英语：英语的规划在 <a href="https://thiscute.world/posts/learn-english-again/" target="_blank" rel="noopener noreferrer">Learn English Again</a> 中已经做得比较详尽了，这里仅摘抄下目标。
<ul>
<li>2023 年达到 CEFR 的 C1 等级，报考并取得 BEC 高级证书</li>
<li>2023 年底词汇量超过 10000</li>
</ul>
</li>
</ul>
<h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>2021 年的年终总结文末，我给自己 2022 年的期许是「更上一层楼」，感觉确实应验了。</p>
<p>那么 2023 年，我希望自己能够「认识更多有趣的人，见识下更宽广的世界」~</p>
<blockquote>
<p>更多有趣的的 2022 年度总结：<a href="https://github.com/saveweb/review-2022" target="_blank" rel="noopener noreferrer">https://github.com/saveweb/review-2022</a></p>
</blockquote>
]]></content></entry><entry><title type="html">Proxmox Virtual Environment 使用指南</title><link href="https://thiscute.world/posts/proxmox-virtual-environment-instruction/"/><id>https://thiscute.world/posts/proxmox-virtual-environment-instruction/</id><author><name>ryan4yin</name></author><published>2022-11-27T22:38:03+08:00</published><updated>2022-11-27T22:38:03+08:00</updated><content type="html"><![CDATA[<figure>
          <img class="lazyload" src="/posts/proxmox-virtual-environment-instruction/proxmox-logo.webp" height="2019" width="854"><figcaption></figcaption>
        </figure><blockquote>
<p>本文介绍我使用 PVE 的一些心得（不保证正确 emmmm），可能需要一定使用经验才能顺畅阅读。</p>
</blockquote>
<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>我在去年的文章 <a href="https://thiscute.world/posts/QEMU/KVM-usage/" target="_blank" rel="noopener noreferrer">「QEMU/KVM 虚拟化环境的搭建与使用」</a> 中介绍了如何使用 QEMU/KVM 作为桌面虚拟化软件，其功能对标开源免费的 <a href="https://www.virtualbox.org/" target="_blank" rel="noopener noreferrer">Oracle VM VirtualBox</a> 以及收费但是用户众多的 <a href="https://www.vmware.com/products/workstation-pro.html" target="_blank" rel="noopener noreferrer">VMware Workstation Pro</a>.</p>
<p>虽然我们也可以远程使用 QEMU/KVM，但是使用门槛比较高。而且如果要管理多台服务器，各种命令也比较繁琐。
我们显然需要更易用的软件来管理服务器场景下的虚拟化。</p>
<p>而这篇文章介绍的 <a href="https://pve.proxmox.com/wiki/Main_Page" target="_blank" rel="noopener noreferrer">Proxmox Virtual Environment</a>（后续简称 PVE），就是一个基于 QEMU/KVM 的虚拟机集群管理平台。</p>
<p>PVE 以 Debian + QEMU/KVM + LXC 为基础进行了深度定制，提供了一套比较完善的 Web UI，基本上 95% 的操作都可以直接通过它的 Web UI 完成，但是仍然有些功能只需要使用它的 CLI 完成，或者说需要手动修改一些配置文件。</p>
<p>PVE 完全基于 Linux 世界的各种开源技术，存储技术使用了 LVM（也支持 Ceph/iSCSI/NFS），也支持通过 cloudinit 预配置网络、磁盘扩容、设置 hostname（这其实是 libvirtd 的功能）。
它的文档也比较齐全，而且写得清晰易懂，还包含许多它底层的 QEMU/KVM/CEPH/Cloudinit 等开源技术的内容，对学习 Linux 虚拟化技术也有些帮助。（这里必须喷下 VMware 的文档，真的是写得烂得一批，不知所云）</p>
<p>总的来说，PVE 没有 <a href="https://www.vmware.com/cn/products/vsphere-hypervisor.html" target="_blank" rel="noopener noreferrer">vShpere Hypervisor</a> 跟 <a href="https://learn.microsoft.com/en-us/windows-server/virtualization/hyper-v/hyper-v-technology-overview" target="_blank" rel="noopener noreferrer">Windows Hyper-V</a> 那么成熟、完善、稳定，但是基于 QEMU/KVM 且能够免费使用，很适合 Linux/开源/虚拟化 爱好者折腾。</p>
<blockquote>
<p>你可能还听说过 OpenStack，不过这个玩意儿我没接触过，所以这里略过了它。</p>
</blockquote>
<p>因为这些原因，我选择了 PVE 作为我的 Homelab 系统。</p>
<p>先贴一张我当前 Homelab 的 PVE 控制台截图，然后就进入正文。</p>
<p><figure><img
        
        loading="lazy"
        src="/images/proxmox-ve-instruction/ryan-pve-console.webp"
        srcset="/images/proxmox-ve-instruction/ryan-pve-console.webp, /images/proxmox-ve-instruction/ryan-pve-console.webp 1.5x, /images/proxmox-ve-instruction/ryan-pve-console.webp 2x"
        sizes="auto"
        alt="/images/proxmox-ve-instruction/ryan-pve-console.webp"
        title="/images/proxmox-ve-instruction/ryan-pve-console.webp" ><figcaption class="image-caption">我的 PVE 集群</figcaption>
    </figure></p>
<blockquote>
<p>如果你想了解我的 PVE 集群都跑了些啥，可以瞅一瞅 <a href="https://github.com/ryan4yin/knowledge/tree/master/homelab" target="_blank" rel="noopener noreferrer">homelab - ryan4yin/knowledge</a>.</p>
</blockquote>
<h2 id="一安装-pve-系统" class="headerLink">
    <a href="#%e4%b8%80%e5%ae%89%e8%a3%85-pve-%e7%b3%bb%e7%bb%9f" class="header-mark"></a>一、安装 PVE 系统</h2><p>建议直接使用 <a href="https://github.com/ventoy/Ventoy" target="_blank" rel="noopener noreferrer">ventoy</a> 制作一个 U 盘启动盘，把官网下载的 PVE ISO 镜像拷贝进去，即可使用它进行系统安装。
安装过程中需要注意的点有：</p>
<ul>
<li>如果你有多台机器，每台机器需要使用不同的主机名称（hostname），否则后面组建 PVE 集群时会有麻烦。
<ul>
<li>建议使用机器型号 + 数字编号作为机器的 hostname</li>
</ul>
</li>
<li>为每台 PVE 节点配置静态 IP，避免 IP 变更。</li>
</ul>
<p>系统安装好后即可按照提示直接访问其 Web UI，会提示 HTTPS 证书无效，忽略即可。另外还会有一个烦人的 PVE 订阅提示，也可直接忽略（7.2 及以上版本，暂时没找到怎么禁用掉这个提示）。</p>
<p>此外对于国内环境，建议使用如下命令配置国内镜像源（提升软件安装速度）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 设置 debian 的阿里镜像源</span>
</span></span><span class="line"><span class="cl">cp /etc/apt/sources.list /etc/apt/sources.list.bak
</span></span><span class="line"><span class="cl">sed -i <span class="s2">&#34;s@\(deb\|security\).debian.org@mirrors.aliyun.com@g&#34;</span> /etc/apt/sources.list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 设置 pve 国内镜像源</span>
</span></span><span class="line"><span class="cl"><span class="c1"># https://mirrors.bfsu.edu.cn/help/proxmox/</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;deb https://mirrors.bfsu.edu.cn/proxmox/debian buster pve-no-subscription&#39;</span> &gt; /etc/apt/sources.list.d/pve-no-subscription.list
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="组建-pve-集群" class="headerLink">
    <a href="#%e7%bb%84%e5%bb%ba-pve-%e9%9b%86%e7%be%a4" class="header-mark"></a>组建 PVE 集群</h3><blockquote>
<p>如果你仅使用单机 PVE，可忽略这一节内容。</p>
</blockquote>
<p>将多台 PVE 节点组成一个集群，可以获得很多新玩法，比如虚拟机在多节点间的热迁移。</p>
<blockquote>
<p>注意 CPU 架构差别较大很可能会导致无法热迁移，建议使用同品牌、同代的 CPU，最好是 CPU 型号完全一致。比如都是 Intel 的 12 代 CPU，或者都是 AMD 的 5 代 CPU。</p>
</blockquote>
<p>这个也还挺简单的，首先随便登入一台机器的 Web Console，点击「Datacenter」=&gt;「Cluster」=&gt;「Create Cluster」即可创建一个 PVE 集群。</p>
<p>接着复制「Join Information」中的内容，在其他每台 PVE 节点的 Web Console 页面中，点击「Datacenter」=&gt;「Cluster」=&gt;「Join Cluster」，然后粘贴前面复制的「Join Information」，再输入前面节点的密码，等待大约一分钟，然后刷新页面，PVE 集群即组建完成。</p>
<p><figure><img
        
        loading="lazy"
        src="/images/proxmox-ve-instruction/pve-cluster-configuration.webp"
        srcset="/images/proxmox-ve-instruction/pve-cluster-configuration.webp, /images/proxmox-ve-instruction/pve-cluster-configuration.webp 1.5x, /images/proxmox-ve-instruction/pve-cluster-configuration.webp 2x"
        sizes="auto"
        alt="/images/proxmox-ve-instruction/pve-cluster-configuration.webp"
        title="/images/proxmox-ve-instruction/pve-cluster-configuration.webp" ><figcaption class="image-caption">PVE 集群配置</figcaption>
    </figure></p>
<p>PVE 集群的所有节点是完全平等的，集群组建完成后，登录其中任意一个节点的 Web Console 都可以管理集群中所有节点的资源。</p>
<h2 id="二pve-控制台的使用" class="headerLink">
    <a href="#%e4%ba%8cpve-%e6%8e%a7%e5%88%b6%e5%8f%b0%e7%9a%84%e4%bd%bf%e7%94%a8" class="header-mark"></a>二、PVE 控制台的使用</h2><p>PVE 控制台的使用还挺简单的，多试试基本就会用了。这里不做详细介绍，主要说明下创建虚拟机时一些重要的参数：</p>
<ul>
<li>CPU
<ul>
<li>将 CPU 类型设置为 <code>host</code> 可以提高性能，适合比较吃性能或者对实时性要求高的虚拟机如 windows/openwrt</li>
<li>对于虚拟机核数，建议将 <code>sockets</code> 设为 1（即 CPU 插槽数，一般物理服务器才会有 2 及以上的 CPU 插槽），cores 设为你想分配给该虚拟机的 CPU 核数</li>
<li>仅针对多物理 CPU 场景（多 <code>sockets</code>）才需要启用 NUMA（个人猜测，可能有错）</li>
</ul>
</li>
<li>磁盘、网卡
<ul>
<li>磁盘驱动建议用 <code>virtio SCSI</code>、网卡驱动建议用 <code>VirtIO(paravirtualized)</code>，它的性能更高。
<ul>
<li>Linux 虚拟机原生支持 virtio 半虚拟化，而 windows 想要完全开启半虚拟化，需要手动安装驱动，详见 <a href="https://pve.proxmox.com/wiki/Windows_VirtIO_Drivers" target="_blank" rel="noopener noreferrer">Windows_VirtIO_Drivers - Proxmox WIKI</a>，简单的说就是要下个 iso 挂载到 windows 主机中，并安装其中的驱动。</li>
</ul>
</li>
<li>如果硬盘是 SSD，虚拟机磁盘可以启用 <code>SSD Emulation</code>，对于 IO 性能要求高的场景还可以为磁盘勾选 <code>IO  Thread</code> 功能</li>
</ul>
</li>
<li>显示器
<ul>
<li>默认使用 std 类型，兼容性最好，但是是纯 CPU 模拟的，比较耗 CPU。</li>
<li>如果你有需要显卡加速的桌面虚拟机，但是又不想搞复杂的显卡直通，可以选择 <code>VirGL GPU(virtio-gl)</code> 类型（注意不是 <code>VirtIO-GPU(virtio)</code>，这个驱动没有显卡加速能力），它能以较小的性能损耗将虚拟机中的 3D/2D 运算 offload 到 host GPU，而且避免复杂的驱动配置，只需要在 PVE 中执行。但是目前它仅支持 Linux 4.4+ 的 Guest 主机，并且要求 mesa (&gt;=11.2) compiled with the option <code>gallium-drivers=virgl</code>（我感觉这功能目前还有点鸡肋）。
<ul>
<li>要使用 <code>VirGL GPU(virtio-gl)</code>，还需要在 PVE 主机上安装额外的依赖：<code>apt install libgl1 libegl1</code>，安装好后即可使用。</li>
</ul>
</li>
<li>详见 <a href="https://pve.proxmox.com/pve-docs/chapter-qm.html#qm_display" target="_blank" rel="noopener noreferrer">QEMU Graphic card - Proxmox VE</a></li>
</ul>
</li>
<li>其他选项
<ul>
<li>调整启动项顺序，对于 cloud image 建议只启用 scsi0 这个选项</li>
</ul>
</li>
<li>虚拟机模板（Template）与克隆（Clone）
<ul>
<li>建议首先使用 ubuntu/opensuse cloud image 配置好基础环境（比如安装好 vim/curl/qemu-guest-agent），然后转换为 template，其他所有 Linux 虚拟机都可以直接 clone 一个，改个新名字，再改改 cloudinit 配置跟磁盘大小，就能直接启动使用了。相当方便。</li>
<li>仅 Full Clone 的虚拟机才可以在 PVE 集群节点间随意迁移，因此如果你需要虚拟机迁移功能，请不要使用 Link Clone.</li>
</ul>
</li>
<li>BIOS 通常都建议使用默认的 SeaBIOS，仅 Windows 等场景才建议换成 OMVF(UEFI)
<ul>
<li>OMVF 的分辨率、Secure Boot 等参数，都可以在启动时按 ESC 进入 UEFI 配置界面来调整。</li>
</ul>
</li>
</ul>
<p>上面这些内容，官方有详细文档，能读英文的话可以直接看 <a href="https://pve.proxmox.com/wiki/Qemu/KVM_Virtual_Machines" target="_blank" rel="noopener noreferrer">Qemu/KVM Virtual Machines - Proxmox WIKI</a>.</p>
<h3 id="1-使用-cloudinit-自动配置网卡ssh密钥存储空间" class="headerLink">
    <a href="#1-%e4%bd%bf%e7%94%a8-cloudinit-%e8%87%aa%e5%8a%a8%e9%85%8d%e7%bd%ae%e7%bd%91%e5%8d%a1ssh%e5%af%86%e9%92%a5%e5%ad%98%e5%82%a8%e7%a9%ba%e9%97%b4" class="header-mark"></a>1. 使用 cloudinit 自动配置网卡、SSH密钥、存储空间</h3><blockquote>
<p>完全参照官方文档 <a href="https://pve.proxmox.com/wiki/Cloud-Init_Support" target="_blank" rel="noopener noreferrer">Cloud-Init_Support - PVE Docs</a></p>
</blockquote>
<blockquote>
<p>注意：下面的几种镜像都分别有自己的坑点，仅 Ubuntu/OpenSUSE 测试通过，其他发行版的 Cloud 镜像都有各种毛病&hellip;</p>
</blockquote>
<p>一般配 Linux 虚拟机，我们当然希望能在虚拟机启动时，就自动配置好 IP 地址、SSH 密钥、文件系统自动扩容，这样能免去很多手工操作。cloudinit 就是一个能帮你自动完成这些功能的工具，AWS、阿里云等各大云服务厂商都支持这种配置方式，好消息是 PVE 也支持。</p>
<p>下面简单介绍下如何使用 cloudinit 来自动化配置 Linux 虚拟机。</p>
<p>首先 cloudinit 必须使用特殊的系统镜像，下面是几个知名发行版的 Cloud 系统镜像：</p>
<ol>
<li><a href="https://cloud-images.ubuntu.com/releases/" target="_blank" rel="noopener noreferrer">Ubuntu Cloud Images (RELEASED)</a>: 提供 img 格式的裸镜像（PVE 也支持此格式）
<ul>
<li>请下载带有 .img 结尾的镜像，其中以 <code>kvm.img</code> 结尾的镜像会更精简一点，而名称中不包含 kvm 的镜像会稍微大一点，但是带了所有常用的内核模块。（如果你不理解前者精简了啥，请选择后者——也就是稍大的这个镜像文件。）</li>
</ul>
</li>
<li><a href="https://download.opensuse.org/repositories/Cloud:/Images:/" target="_blank" rel="noopener noreferrer">OpenSUSE Cloud Images</a>
<ul>
<li>请下载带有 NoCloud 或者 OpenStack 字样的镜像。</li>
</ul>
</li>
<li>对于其他镜像，可以考虑手动通过 iso 来制作一个 cloudinit 镜像，参考 <a href="https://docs.openstack.org/image-guide/ubuntu-image.html" target="_blank" rel="noopener noreferrer">openstack - create ubuntu cloud images from iso</a></li>
</ol>
<blockquote>
<p>注：<a href="https://cdimage.debian.org/cdimage/cloud/" target="_blank" rel="noopener noreferrer">Debian Cloud Images</a> 的镜像无法使用，其他 ubuntu/opensuse 的 cloud 镜像也各有问题&hellip;在后面的常见问题中有简单描述这些问题。</p>
</blockquote>
<blockquote>
<p>这里评论区有些新内容，指出 cloud image 的各种毛病可能的解决方案，想深入了解请移步评论区。</p>
</blockquote>
<p>上述镜像和我们普通虚拟机使用的 ISO 镜像的区别，一是镜像格式不同，二是都自带了 <code>cloud-init</code>/<code>cloud-utils-growpart</code> 等用于自动化配置虚拟机的相关工具。</p>
<p>其名字中的 NoCloud 表示支持 cloudinit NoCloud 数据源——即使用 <code>seed.iso</code> 提供 user-data/meta-data/network-config 配置，PVE 就是使用的这种模式。
而 Openstack 镜像通常也都支持 NoCloud 模式，所以一般也是可以使用的。</p>
<p>以 ubuntu 的 cloudimg 镜像为例，下载好镜像后，首先创建虚拟机，并以导入的磁盘为该虚拟机的硬盘，命令如下：</p>
<blockquote>
<p>如下操作也可在 Web UI 上操作，这里仅以命令行为例。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 创建新虚拟机</span>
</span></span><span class="line"><span class="cl">qm create <span class="m">9000</span> --name ubuntu-bionic-template --memory <span class="m">2048</span> --net0 virtio,bridge<span class="o">=</span>vmbr0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将下载好的 img/qcow2 镜像导入为新虚拟机的硬盘</span>
</span></span><span class="line"><span class="cl">qm importdisk <span class="m">9000</span> ubuntu-20.10-server-cloudimg-amd64.img local-lvm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 通过 scsi 方式，将导入的硬盘挂载到虚拟机上</span>
</span></span><span class="line"><span class="cl">qm <span class="nb">set</span> <span class="m">9000</span> --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-9000-disk-0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># qcow2 镜像默认仅 2G 大小，需要手动扩容到 32G，否则虚拟机启动会报错</span>
</span></span><span class="line"><span class="cl">qm resize <span class="m">9000</span> scsi0 32G
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后创建挂载 cloud-init 的 seed.iso，修改启动项以及其他：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 创建一个 cloud-init 需要使用的 CDROM 盘(sr0)</span>
</span></span><span class="line"><span class="cl">qm <span class="nb">set</span> <span class="m">9000</span> --ide2 local-lvm:cloudinit
</span></span><span class="line"><span class="cl"><span class="c1"># 设置系统引导盘</span>
</span></span><span class="line"><span class="cl">qm <span class="nb">set</span> <span class="m">9000</span> --boot c --bootdisk scsi0
</span></span><span class="line"><span class="cl"><span class="c1"># 设置 serial0 为显示终端，很多云镜像都需要这个。</span>
</span></span><span class="line"><span class="cl">qm <span class="nb">set</span> <span class="m">9000</span> --serial0 socket --vga serial0
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的工作都完成后，还需要做一些后续配置</p>
<ol>
<li>手动设置 cloud-init 参数，<strong>重新生成 cloudinit image</strong>，启动虚拟机，并通过 ssh 登入远程终端
<ol>
<li>cloud image 基本都没有默认密码，并且禁用了 SSH 密码登录。必须通过 cloud-init 参数添加私钥、设置账号、密码、私钥。</li>
</ol>
</li>
<li>检查 qemu-guest-agent，如果未自带，一定要手动安装它！
<ol>
<li>ubuntu 需要通过 <code>sudo apt install qemu-guest-agent</code> 手动安装它</li>
</ol>
</li>
<li>安装所需的基础环境，如 docker/docker-compose/vim/git/python3</li>
<li>关闭虚拟机，然后将虚拟机设为模板</li>
</ol>
<p>接下来就可以从这个模板虚拟机，克隆各类新虚拟机了~</p>
<p><figure><img
        
        loading="lazy"
        src="/images/proxmox-ve-instruction/pve-cloudinit-configuration.webp"
        srcset="/images/proxmox-ve-instruction/pve-cloudinit-configuration.webp, /images/proxmox-ve-instruction/pve-cloudinit-configuration.webp 1.5x, /images/proxmox-ve-instruction/pve-cloudinit-configuration.webp 2x"
        sizes="auto"
        alt="/images/proxmox-ve-instruction/pve-cloudinit-configuration.webp"
        title="/images/proxmox-ve-instruction/pve-cloudinit-configuration.webp" ><figcaption class="image-caption">保险起见，改完配置后记得点下 Regenerate Image</figcaption>
    </figure></p>
<p>其他 cloudinit 相关文档：</p>
<ul>
<li><a href="https://support.huaweicloud.com/usermanual-ims/ims_01_0407.html" target="_blank" rel="noopener noreferrer">配置 Cloud-Init 工具 - 华为云</a></li>
<li><a href="https://github.com/canonical/cloud-init" target="_blank" rel="noopener noreferrer">canonical/cloud-init - github</a></li>
<li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/amazon-linux-2-virtual-machine.html" target="_blank" rel="noopener noreferrer">Run Amazon Linux 2 as a virtual machine on premises</a></li>
</ul>
<h3 id="2-虚拟机硬盘扩容" class="headerLink">
    <a href="#2-%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%a1%ac%e7%9b%98%e6%89%a9%e5%ae%b9" class="header-mark"></a>2. 虚拟机硬盘扩容</h3><p>CentOS/Ubuntu/Debian 提供的 Cloud 镜像，都自带了 <code>cloud-utils-growpart</code> 这个组件，可以实现在扩容物理硬盘时，自动调整 Linux 的分区大小。</p>
<p>因此需要扩容虚拟机时，直接通过 UI 面板/命令行扩容虚拟机的硬盘，然后重启虚拟机即可，Linux 的分区会在系统启动阶段被 <code>cloud-utils-growpart</code> 自动扩容。</p>
<p>PVE 可通过如下命令进行磁盘扩容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 将 id 为 9000 的虚拟机的 scsi0 磁盘，扩容到 32G</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 请自行修改虚拟机 ID 与磁盘大小，注意仅支持扩容！不能缩容。</span>
</span></span><span class="line"><span class="cl">qm resize <span class="m">9000</span> scsi0 32G
</span></span></code></pre></td></tr></table>
</div>
</div><p>而其他非 Cloud 镜像，则需要在扩容磁盘后再进入虚拟机手动扩容分区跟磁盘，具体命令就不介绍了，请自行查阅相关文档吧。</p>
<blockquote>
<p>因为这个方便的特性，也为了减少虚拟化的开销，Cloud 镜像默认是不使用 LVM 逻辑分区的。
LVM 逻辑分区虽然方便，但是它对物理机的作用更大些。虚拟机因为本身就能动态扩容“物理硬盘”的大小，基本不用不到 LVM。</p>
</blockquote>
<blockquote>
<p>还有一点，就是虚拟机通常只需要一个根分区就行，尤其是归 openstack/kubernetes 管的虚拟机。
只有在使用分布式存储之类的场景下，数据需要独立存储，才需要用到额外的分区(<code>/data</code> 之类的)。
一般只有物理机，才需要像网上很多文章提的那样，为 <code>/boot</code> <code>/</code> <code>/home</code> 去单独分区。
而且现在大家都用 SSD 了，物理机这样做分区的都少了，比如我个人电脑，就是一个 <code>/</code> 分区打天下。。。</p>
</blockquote>
<h2 id="三常见问题" class="headerLink">
    <a href="#%e4%b8%89%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" class="header-mark"></a>三、常见问题</h2><h3 id="1-导入已有的-qcow2-镜像" class="headerLink">
    <a href="#1-%e5%af%bc%e5%85%a5%e5%b7%b2%e6%9c%89%e7%9a%84-qcow2-%e9%95%9c%e5%83%8f" class="header-mark"></a>1. 导入已有的 qcow2 镜像</h3><blockquote>
<p>这一步必须要命令行操作，WebUI 界面不支持。</p>
</blockquote>
<p>首先在页面上新建一台新虚拟机，记录下虚拟机 ID。</p>
<p>假设你创建的虚拟机 id 为 201，现在通过 scp/rsync 等手段将 qcow2 传输到 PVE 节点上，然后命令行使用如下命令导入 qcow2/img 镜像：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 命令格式</span>
</span></span><span class="line"><span class="cl">qm importdisk &lt;vmid&gt; &lt;source&gt; &lt;storage&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 示例</span>
</span></span><span class="line"><span class="cl">qm importdisk <span class="m">201</span> vm-201-disk-1.qcow2 local-lvm
</span></span></code></pre></td></tr></table>
</div>
</div><p>导入完成后，在虚拟机的 WebUI 界面中，会看到底下多了一个「未使用的磁盘 0」。</p>
<p>接着删除掉默认的磁盘（分离+删除，要两步），再挂载这个「未使用的磁盘 0」。</p>
<p>挂载完成后直接启动是不行的，还需要在设置中将新磁盘添加到启动项中，这样就能正常启动了。</p>
<h3 id="2-点击-shutdown-后-pve-系统卡住" class="headerLink">
    <a href="#2-%e7%82%b9%e5%87%bb-shutdown-%e5%90%8e-pve-%e7%b3%bb%e7%bb%9f%e5%8d%a1%e4%bd%8f" class="header-mark"></a>2. 点击 shutdown 后 PVE 系统卡住</h3><p>PVE 的 <code>shutdown</code> 功能依赖 <code>qemu-guest-agent</code>，对于还没有安装 <code>qemu-guest-agent</code> 的任何主机，或者已经卡死无响应的虚拟机，千万不要点 <code>shutdown</code> 按钮，因为一定会卡住很久，最后失败！</p>
<p><code>shutdown</code> 卡住的解决办法：手动在下方的「Tasks」面板中双击卡住的「Shutdown」操作，然后点击「stop」停止该操作。</p>
<p>该如何关闭这类没有 <code>qemu-guest-agent</code> 或者已经卡死无响应的主机？答案是使用 <code>stop</code>！</p>
<h3 id="3-cant-lock-file-varlockqemu-serverlock-xxxconf--got-timeout" class="headerLink">
    <a href="#3-cant-lock-file-varlockqemu-serverlock-xxxconf--got-timeout" class="header-mark"></a>3. can’t lock file ‘/var/lock/qemu-server/lock-xxx.conf’ – got timeout</h3><p>PVE 虚拟机卡在 BIOS 系统引导这一步，无法启动，也无法 <code>stop</code>！</p>
<p>解决方法：手动删除掉 lockfile: <code>/var/lock/qemu-server/lock-xxx.conf</code></p>
<p>因为虚拟机还卡在 BIOS 引导这一步，删除掉 lockfile 再关闭虚拟机并不会导致数据丢失。</p>
<h3 id="4-pve-集群有一个节点宕机如何解除关联" class="headerLink">
    <a href="#4-pve-%e9%9b%86%e7%be%a4%e6%9c%89%e4%b8%80%e4%b8%aa%e8%8a%82%e7%82%b9%e5%ae%95%e6%9c%ba%e5%a6%82%e4%bd%95%e8%a7%a3%e9%99%a4%e5%85%b3%e8%81%94" class="header-mark"></a>4. PVE 集群有一个节点宕机，如何解除关联？</h3><p>将多个节点组成一个 PVE Cluster 是很自然的一个选择，它能提供虚拟机热迁移、统一管理面板等非常方便的功能。
但是这会带来集群级别的高可用问题。</p>
<p>根据官方文档 <a href="https://pve.proxmox.com/wiki/Cluster_Manager" target="_blank" rel="noopener noreferrer">Cluster_Manager - Proxmox</a>，如果你需要容忍一定数量的节点宕机，PVE Cluster 至少需要三台主机（这跟 Etcd 一样，大概是 Raft 共识算法的要求），并且所有节点的 PVE 版本要完全一致。</p>
<p>那么如果个别节点出了问题，无法修复，该如何将它踢出集群呢？</p>
<p>如果在线节点占比超过 50%，节点删除的流程如下：</p>
<ul>
<li>首先通过访问节点的 shell 界面，通过命令 <code>pvecm nodes</code> 确认集群的所有节点</li>
<li>将需要移除的节点彻底关机，并且确保它不会以当前配置再次启动（也就是说关机后需要清空硬盘，避免数据混乱）
<ul>
<li>如果被删除节点已宕机，则可跳过 关机 步骤</li>
</ul>
</li>
<li>通过命令 <code>pvecm delnode xxx</code> 将问题节点移除集群</li>
<li>重置旧节点硬盘，并重新装机，用做其他用途。</li>
</ul>
<p>如果你的集群只有 2 个节点，或者有超过 3 个节点但是宕机节点数不低于 50%，那出于数据一致性要求 Raft 算法会禁止更新集群数据，上面的流程就走不通了。如果你直接走上面的流程，它会报错 <code>cluster not ready - no quorum?</code> 这时需要首先修改配置，使剩下的节点重新达成一致。其实就是修改选主节点时的投票数。</p>
<p>对于 2 个节点但挂掉 1 个的情况，首先执行如下指令允许当前节点自己选主：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 设置只需要 1 票就能当前主节点</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 潜在问题是可能有些集群元数据只在损坏节点上有，这么改会导致这些数据丢失，从而造成一些问题。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 安全起见，建议在修复集群后，再重启一遍节点...</span>
</span></span><span class="line"><span class="cl">pvecm expected <span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在 quorum 就已经恢复了，可以走前面给出的节点移除流程。</p>
<p>如果节点已经删除，但是 Web GUI 上仍然显示有被删除的节点，可以在集群的所有剩余节点上，手动删除掉 <code>/etc/pve/nodes/node-name/</code> 文件夹，即可从集群中彻底删除该节点的数据，注意千万别删错了，不然就尴尬了&hellip;</p>
<p>如果 corosync 完全无法启动，上面给出的命令也会修改选主投票参数也会失败，这时可以直接手动修改 <code>/etc/corosync/corosync.conf</code> 删除掉有问题的节点对应的配置，调低 expceted 投票数，使 corosync 能正常启动，再执行前述操作。</p>
<h3 id="5-cloud-image-的坑" class="headerLink">
    <a href="#5-cloud-image-%e7%9a%84%e5%9d%91" class="header-mark"></a>5. cloud image 的坑</h3><h4 id="ubuntu-cloud-image-的坑" class="headerLink">
    <a href="#ubuntu-cloud-image-%e7%9a%84%e5%9d%91" class="header-mark"></a>ubuntu cloud image 的坑</h4><ul>
<li>ubuntu 启动时会报错 <code>no such device: root</code>，但是过一会就会正常启动。
<ul>
<li>这是 ubuntu cloud image 的 bug: <a href="https://bugs.launchpad.net/cloud-images/&#43;bug/1726476" target="_blank" rel="noopener noreferrer">https://bugs.launchpad.net/cloud-images/+bug/1726476</a></li>
</ul>
</li>
<li>ubuntu 启动后很快就会进入登录界面，但是 root 密码可能还没改好，登录会报密码错误，等待一会再尝试登录就 OK 了</li>
<li>ubuntu 的默认网卡名称是 ens3，不是 eth0，注意修改 network_config 的网卡名称，否则网络配置不会生效</li>
<li>以 kvm 结尾的 Ubuntu Cloud Image 无法识别到 USB 设备，将 USB 端口映射到该虚拟机中没有任何作用。
<ul>
<li>kvm 使用了精简版的 linux 内核，去掉了 USB 等在云上用不到的驱动，建议改用无 kvm 结尾的镜像。</li>
</ul>
</li>
</ul>
<h5 id="ubuntu-cloud-image-无法识别到-usb-设备的排查记录" class="headerLink">
    <a href="#ubuntu-cloud-image-%e6%97%a0%e6%b3%95%e8%af%86%e5%88%ab%e5%88%b0-usb-%e8%ae%be%e5%a4%87%e7%9a%84%e6%8e%92%e6%9f%a5%e8%ae%b0%e5%bd%95" class="header-mark"></a>「Ubuntu Cloud Image 无法识别到 USB 设备」的排查记录</h5><p>现象：</p>
<ul>
<li>在尝试使用 PVE 将 USB 接口直通到 Ubuntu Cloud Image 启动的虚拟机作为 NAS 系统时，发现 <code>lsblk</code> 根本无法找到我的 USB 硬盘</li>
<li>换成我笔记本接硬盘盒，能够正常识别并挂载硬盘</li>
<li>使用 <code>lsusb</code> 不会报错，但是也看不到任何内容</li>
<li>使用 <code>lspci</code> 能找到 USB 对应的 PCI 设备</li>
<li>进一步使用 <code>cat /proc/modules | grep usb</code> 与 <code>lsmod | grep usb</code> 均查不到任何 usb 相关的内核模块
<ul>
<li>而在我笔记本上 <code>lsmod | grep usb</code> 能够输出 <code>usb_storage</code> <code>usb_core</code> 等多项内核模块。</li>
</ul>
</li>
<li>再用 <code>modprobe usb</code> 会提示 <code>modprobe: FATAL: Module usb not found in directory /lib/modules/5.15.0-1021-kvm</code></li>
</ul>
<p>问题原因很明显了，Ubuntu 根本没有为 cloud image 预置 usb 内核模块，所以才有这个问题&hellip;</p>
<p>进一步搜索发现这个帖子：<a href="https://askubuntu.com/questions/1315370/whats-the-difference-between-ubuntus-amd64-disk-kvm-img-and-the-regular-amd64" target="_blank" rel="noopener noreferrer">What&rsquo;s the difference between ubuntu&rsquo;s amd64-disk-kvm.img and the regular amd64.img cloud images?</a>，解答了我的疑惑。</p>
<p>原因是，我使用了 ubuntu 为 cloud 环境做了精简的 kvm 内核，非常轻量，但是缺少 usb 等常用内核模块。</p>
<p>对于 NAS 外接存储这个场景，我应该使用不以 kvm 结尾的 ubuntu cloud image，换了个基础镜像后问题就解决了~</p>
<h4 id="opensuse-cloud-image-的坑" class="headerLink">
    <a href="#opensuse-cloud-image-%e7%9a%84%e5%9d%91" class="header-mark"></a>opensuse cloud image 的坑</h4><ul>
<li>opensuse leap 15 只支持 network_config v1，对 v2 的支持有 bug，<code>gateway4</code> 不会生效</li>
</ul>
<h4 id="debian-cloud-image-的坑" class="headerLink">
    <a href="#debian-cloud-image-%e7%9a%84%e5%9d%91" class="header-mark"></a>debian cloud image 的坑</h4><p>debian 的 cloud 镜像根本没法用，建议避免使用它。</p>
<ul>
<li>debian 启动时会彻底卡住，或者直接报错 kernel panic
<ul>
<li>原因是添加了 spice 图形卡，换成 vnc 就正常了</li>
</ul>
</li>
<li><a href="https://cdimage.debian.org/cdimage/cloud/" target="_blank" rel="noopener noreferrer">Debian Cloud Images</a> 中的 nocloud 镜像不会在启动时运行 cloudinit，cloudinit 完全不生效
<ul>
<li>不知道是啥坑，没解决</li>
</ul>
</li>
</ul>
<h3 id="6-克隆创建的虚拟机卡在-booting-from-hard-disk-状态" class="headerLink">
    <a href="#6-%e5%85%8b%e9%9a%86%e5%88%9b%e5%bb%ba%e7%9a%84%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%8d%a1%e5%9c%a8-booting-from-hard-disk-%e7%8a%b6%e6%80%81" class="header-mark"></a>6. 克隆创建的虚拟机，卡在 <code>Booting from Hard Disk...</code> 状态</h3><p>被用做模板的虚拟机可以正常启动，但是克隆的虚拟机就卡住了。</p>
<p>可能的原因：</p>
<ol>
<li>磁盘有问题，出这个问题的 cloud image 是 <code>ubuntu-20.10-server-cloudimg-amd64.img</code>，我更换成 <code>ubuntu-20.10-server-cloudimg-amd64-disk-kvm.img</code> 就没问题了。
<ol>
<li>磁盘镜像均下载自 <a href="https://cloud-images.ubuntu.com/releases/groovy/release-20201210/" target="_blank" rel="noopener noreferrer">https://cloud-images.ubuntu.com/releases/groovy/release-20201210/</a></li>
</ol>
</li>
<li>BIOS 不匹配：将 BIOS 从 SeaBIOS 切换到 OVMF(UEFI)
<ol>
<li>如果仍然无法启动，请进入 OVMF 的 BIOS 界面关闭「Secure Boot」后再重启看看</li>
</ol>
</li>
</ol>
<h3 id="7-虚拟机启动时-cloudinit-报错-faild-to-start-openbsd-secure-shell-server" class="headerLink">
    <a href="#7-%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%90%af%e5%8a%a8%e6%97%b6-cloudinit-%e6%8a%a5%e9%94%99-faild-to-start-openbsd-secure-shell-server" class="header-mark"></a>7. 虚拟机启动时 cloudinit 报错 faild to start OpenBSD Secure Shell server</h3><p>有如下几种可能：</p>
<ul>
<li><strong>可能性一：虚拟机名称包含非法字符</strong>
<ul>
<li>pve 的 cloudinit 配置会在启动时尝试将虚拟机 hostname 修改为与虚拟机一致，但是又没有对虚拟机名称做合法性校验&hellip;</li>
<li>当你使用的虚拟机名称包含了非法字符时就会出这个问题，比如 <code>ubuntu-22.10-cloudimage-template</code>，其中的 <code>.</code> 就是非法的， <code>.</code> 在 DNS 中用于划分不同的域！</li>
<li><strong>解决方法</strong>：克隆个新虚拟机并改用合法名称，再删除旧虚拟机，问题就解决了。</li>
</ul>
</li>
<li><strong>可能性二：磁盘空间不足</strong>
<ul>
<li>qcow 镜像转换成的虚拟机磁盘很小，只有 2G，如果不扩容，启动时就会出各种奇怪的问题。</li>
<li><strong>解决方法</strong>：通过 Web UI 扩容磁盘大小，建议至少给 32G。</li>
</ul>
</li>
</ul>
<h3 id="8-修改-linux-虚拟机的-hostname" class="headerLink">
    <a href="#8-%e4%bf%ae%e6%94%b9-linux-%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%9a%84-hostname" class="header-mark"></a>8. 修改 Linux 虚拟机的 Hostname</h3><p>如前所述，pve 的 cloudinit 配置会在启动时尝试将虚拟机 hostname 修改为与虚拟机一致，这导致手动修改无法生效无效。</p>
<p>解决方法：从旧的虚拟机克隆一个新虚拟机，将新虚拟机名称设为你期望的 hostname，然后删除旧虚拟机，启动新克隆的虚拟机，即完成了 hostname 重命名。</p>
<h3 id="9-虚拟机迁移时报错-host-key-verification-failed" class="headerLink">
    <a href="#9-%e8%99%9a%e6%8b%9f%e6%9c%ba%e8%bf%81%e7%a7%bb%e6%97%b6%e6%8a%a5%e9%94%99-host-key-verification-failed" class="header-mark"></a>9. 虚拟机迁移时报错 <code>Host key verification failed</code></h3><blockquote>
<p>社区相关帖子：https://forum.proxmox.com/threads/host-key-verification-failed-when-migrate.41666/</p>
</blockquote>
<p>这通常是因为节点增删，或者不小心动到了 <code>~/.ssh/known_hosts</code> 文件，导致的问题。</p>
<p>可以通过手动在每台节点上执行如下命令解决：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ssh -o <span class="s1">&#39;HostKeyAlias=&lt;Target node Name&gt;&#39;</span> root@&lt;Target node IP&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意将上述命令中的 <code>Target node Name&gt;</code> 改为节点名称，将 <code>&lt;Target node IP&gt;</code> 改为节点 IP 地址。</p>
<h3 id="10-pve-的-vm-不支持-vmxsvm-虚拟化指令集" class="headerLink">
    <a href="#10-pve-%e7%9a%84-vm-%e4%b8%8d%e6%94%af%e6%8c%81-vmxsvm-%e8%99%9a%e6%8b%9f%e5%8c%96%e6%8c%87%e4%bb%a4%e9%9b%86" class="header-mark"></a>10. PVE 的 vm 不支持 vmx/svm 虚拟化指令集</h3><p>在 Linux 虚拟机中运行如下命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">egrep <span class="s1">&#39;(vmx|svm)&#39;</span> --color<span class="o">=</span>always /proc/cpuinfo
</span></span></code></pre></td></tr></table>
</div>
</div><p>有输出则说明此虚拟机本身也支持 vmx/svm 虚拟化指令集（vmx 是 intel 指令集，svm 是 amd 的指令集）。</p>
<p>如果没有任何输出，说明此虚拟机不支持嵌套虚拟机，无法在其内部运行 Hyper-V 或者 kvm 虚拟化程序。</p>
<p>一般来说 PVE 宿主机默认就会启用嵌套虚拟化功能，可通过如下指令验证：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># intel 用这个命令，输出 Y 则表示启用了嵌套虚拟化</span>
</span></span><span class="line"><span class="cl">cat /sys/module/kvm_intel/parameters/nested
</span></span><span class="line"><span class="cl"><span class="c1"># amd 用如下指令，输出 1 则表示启用了嵌套虚拟化</span>
</span></span><span class="line"><span class="cl">cat /sys/module/kvm_amd/parameters/nested
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果输出不是 <code>Y</code>/<code>1</code>，则需要手动启用嵌套虚拟化功能。</p>
<p>如果是 intel cpu，需要使用如下命令启用嵌套虚拟化功能：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">## 1. 关闭所有虚拟机，并卸载 kvm_intel 内核模块</span>
</span></span><span class="line"><span class="cl">sudo modprobe -r kvm_intel
</span></span><span class="line"><span class="cl"><span class="c1">## 2. 启用嵌套虚拟化功能</span>
</span></span><span class="line"><span class="cl">sudo modprobe kvm_intel <span class="nv">nested</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 3. 保存配置，使嵌套虚拟化功能在重启后自动启用</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modprobe.d/kvm.conf
</span></span></span><span class="line"><span class="cl"><span class="s">options kvm_intel nested=1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果是 amd cpu，则应使用如下命令启用嵌套虚拟化功能：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">## 1. 关闭所有虚拟机，并卸载 kvm_intel 内核模块</span>
</span></span><span class="line"><span class="cl">sudo modprobe -r kvm_amd
</span></span><span class="line"><span class="cl"><span class="c1">## 2. 启用嵌套虚拟化功能</span>
</span></span><span class="line"><span class="cl">sudo modprobe kvm_amd <span class="nv">nested</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 3. 保存配置，使嵌套虚拟化功能在重启后自动启用</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modprobe.d/kvm.conf
</span></span></span><span class="line"><span class="cl"><span class="s">options kvm_amd nested=1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面这么一堆操作后，宿主机就已经启用了嵌套虚拟化，但是虚拟机内部却仍然不一定能有虚拟化指令集。</p>
<p><strong>根本原因是 PVE 默认使用 kvm64 这种虚拟化的 CPU 类型，它不支持 vmx/svm 指令集！将虚拟机的 CPU 类型改为 <code>host</code>，然后重启虚拟机，问题就解决了</strong>。</p>
<h3 id="backup" class="headerLink">
    <a href="#backup" class="header-mark"></a>11. 如何在多台主机间同步 iso 镜像、backup 文件</h3><p>PVE 自动创建的备份，默认都只会保存到本机的 <code>local</code> 分区中，那万一机器出了问题，很可能备份就一起丢了。
为了确保数据安全，就需要做多机备份，或者将数据统一备份到另一个 NAS 系统。</p>
<p>我考虑了如下几个备份方案：</p>
<ol>
<li><a href="https://www.proxmox.com/en/proxmox-backup-server" target="_blank" rel="noopener noreferrer">proxmox-backup-server</a>：proxmox 官方推出的一个备份工具，使用 rust 编写。
<ol>
<li>它的主要好处在于，支持直接在 proxmox-ve 中将其添加为 cluster 级别的 storage，然后就可以通过 PVE 的定时备份任务，直接将数据备份到 proxmox-backup-server 中。但是我遇到这么几个问题，导致我放弃了它:
<ol>
<li>一是我想直接把数据通过 SMB 协议备份到 Windows Server 远程存储中，但是将 SMB 挂载磁盘用做  proxmox-backup-server 的 Datastore 会出问题，备份时 pbs 会创建一些特殊的临时文件，可能要用到 SMB 挂载插件不支持的特性，导致操作会失败。</li>
<li>二是我的 proxmox-backup-server 跟 Windows Server 都跑在 proxmox 虚拟机里面，那它就不能备份它自己，一备份就会卡住。</li>
</ol>
</li>
</ol>
</li>
<li>cronab + rclone/rsync: 极简方案，使用 crontab 跑定时脚本，用 rclone/rsync 同步数据。流程大致如下：
<ol>
<li>首先在 PVE DataCenter =&gt; Backup 中创建一个定期备份任务，将所有 vm 都备份到 local 存储中，它实际就存储位置为宿主机的 <code>/var/lib/vz/dump</code>。</li>
<li>通过 crontab 定时任务跑脚本，使用 rclone 将每个节点的 <code>/var/lib/vz/</code> 中的文件全部通过 SMB 协议同步到 HDD 中。crontab 的运行时间设置在 PVE 完成后为最佳。并且将同步指标上传到 victoria-metrics 监控系统，如果备份功能失效，监控系统将通过短信或邮件告警。</li>
<li><code>/var/lib/vz/</code> 中除了备份文件外还保存了 iso 镜像等文件，这里也一起备份了。</li>
</ol>
</li>
<li><a href="https://github.com/restic/restic" target="_blank" rel="noopener noreferrer">restic</a>: 一个更专业的远程增量备份工具，通过 rclone 支持几乎所有常见协议的远程存储（s3/ssh/smb 等），支持多种备份策略、版本策略、保留策略，支持加密备份。
<ol>
<li>restic 看着确实挺棒，但是感觉有点复杂了，很多功能我都不需要。PVE 自带的备份功能已经提供了备份的「保留策略」，我这里实际只需要一个数据同步工具。因此没选择它。</li>
</ol>
</li>
</ol>
<p>如上文所述，一番研究后我抛弃了 proxmox-backup-server 与 restic，最终选择了最简单的 cronab + rclone 方案，简单实用又符合我自己的需求（仅我个人的选择，建议结合需求自行抉择）。</p>
<p>同步脚本也很简单，首先通过 <code>rclone config</code> 手动将所有 PVE 节点加入为 rclone 的 remote，再将我的 smb 远程存储加进来（也可以手动改 <code>~/.config/rclone/rclone.conf</code>）。</p>
<blockquote>
<p>这个方案最大的缺点是，所有备份都需要保存在每台节点的 local 卷中，所以有必要给 local 分配较大的磁盘空间，不然机器多的话很快就满了&hellip;</p>
</blockquote>
<p>rclone 配置好后，我写了个几行的 shell 脚本做备份同步：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 我的三台 pve 节点，对应的 rclone remote 名称</span>
</span></span><span class="line"><span class="cl"><span class="nb">declare</span> -a <span class="nv">pve_nodes</span><span class="o">=(</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;pve-um560&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;pve-gtr5&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;pve-s500plus&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># crontab 执行任务，需要指定下配置文件的绝对路径</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> node in <span class="s2">&#34;</span><span class="si">${</span><span class="nv">pve_nodes</span><span class="p">[@]</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">;</span> <span class="k">do</span>
</span></span><span class="line"><span class="cl">  rclone sync --progress <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --config<span class="o">=</span>/home/ryan/.config/rclone/rclone.conf  <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="si">${</span><span class="nv">node</span><span class="si">}</span>:/var/lib/vz <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  smb-downloads:/Downloads/proxmox-backup/<span class="si">${</span><span class="nv">node</span><span class="si">}</span>/
</span></span><span class="line"><span class="cl"><span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># TODO 上传监控指标到监控系统，用于监控任务是否成功。</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后手动执行 <code>/bin/bash /home/ryan/rclone-sync-to-nas.sh &gt; /home/ryan/rclone-sync.log</code> 看看是否运行正常。</p>
<p>运行没问题后，再添加这么一个每天晚上 5 点（UTC 21 点）多执行的定时任务进行同步，就完成了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 为了均衡负载，建议分钟值随便填个奇数。</span>
</span></span><span class="line"><span class="cl"><span class="m">17</span> <span class="m">21</span> * * * /bin/bash /home/ryan/rclone-sync-to-nas.sh &gt; /home/ryan/rclone-sync.log
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以把运行时间调整到 1 分钟后确认下效果，如果要看实时日志可以用 <code>tail -f /home/ryan/rclone-sync.log</code> 查看。</p>
<p>如果任务未执行，可以通过 <code>sudo systmctl status cron</code> 查看任务执行日志，排查问题。</p>
<h3 id="12-使用-cloud-image-创建的虚拟机扩容磁盘并重启后文件系统未自动扩容" class="headerLink">
    <a href="#12-%e4%bd%bf%e7%94%a8-cloud-image-%e5%88%9b%e5%bb%ba%e7%9a%84%e8%99%9a%e6%8b%9f%e6%9c%ba%e6%89%a9%e5%ae%b9%e7%a3%81%e7%9b%98%e5%b9%b6%e9%87%8d%e5%90%af%e5%90%8e%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e6%9c%aa%e8%87%aa%e5%8a%a8%e6%89%a9%e5%ae%b9" class="header-mark"></a>12. 使用 cloud image 创建的虚拟机扩容磁盘并重启后，文件系统未自动扩容</h3><p>这个我遇到过几次，都是因为磁盘容量用尽，导致 cloudinit 扩容脚本运行失败，只要手动回收些空间，再重启系统，就能自动扩容。</p>
<p>我试了只要能确保系统还剩余 100M 左右的存储空间就能正常扩容了，更低的还没试过。</p>
<p>如果数据实在不能清，也可以考虑手动扩容，有两种方法：</p>
<ol>
<li>直接使用 <code>growpart /dev/vda 1</code> 进行扩容。第一个参数是磁盘路径，第二个参数是分区号，这里是 1，表示扩容第一个分区。此命令会同时扩容分区和文件系统。</li>
<li>用 <code>fdisk</code> 先删除分区，再重新创建分区，实现修改分区表扩容。然后还需要用 <code>resize2fs</code> 扩容文件系统。细节请自行网上搜索文档。</li>
</ol>
<h2 id="四pve-网络配置" class="headerLink">
    <a href="#%e5%9b%9bpve-%e7%bd%91%e7%bb%9c%e9%85%8d%e7%bd%ae" class="header-mark"></a>四、PVE 网络配置</h2><h3 id="1-桥接多张物理网卡" class="headerLink">
    <a href="#1-%e6%a1%a5%e6%8e%a5%e5%a4%9a%e5%bc%a0%e7%89%a9%e7%90%86%e7%bd%91%e5%8d%a1" class="header-mark"></a>1. 桥接多张物理网卡</h3><p>示例如下，主要就是在 vmbr0 网桥的 <code>Bridge Ports</code> 里面：</p>
<p><figure><img
        
        loading="lazy"
        src="/images/proxmox-ve-instruction/pve-multiple-nic.webp"
        srcset="/images/proxmox-ve-instruction/pve-multiple-nic.webp, /images/proxmox-ve-instruction/pve-multiple-nic.webp 1.5x, /images/proxmox-ve-instruction/pve-multiple-nic.webp 2x"
        sizes="auto"
        alt="/images/proxmox-ve-instruction/pve-multiple-nic.webp"
        title="/images/proxmox-ve-instruction/pve-multiple-nic.webp" ><figcaption class="image-caption">桥接多张物理网卡</figcaption>
    </figure></p>
<h3 id="2-手动添加-usb-物理网卡" class="headerLink">
    <a href="#2-%e6%89%8b%e5%8a%a8%e6%b7%bb%e5%8a%a0-usb-%e7%89%a9%e7%90%86%e7%bd%91%e5%8d%a1" class="header-mark"></a>2. 手动添加 USB 物理网卡</h3><blockquote>
<p>参考官方文档: <a href="https://pve.proxmox.com/pve-docs/chapter-sysadmin.html#sysadmin_network_configuration" target="_blank" rel="noopener noreferrer">SysAdmin - Network Configuration</a></p>
</blockquote>
<p>我遇到这个问题的场景是：我的 mini 主机（GTR5）只有两个 2.5G 网卡，不太够用。而家里的路由器剩下的都是千兆网口，路由器也难以拓展网卡。
网上搜了下 2.5G 交换机又发现价格 429 起步，所以决定买两张 USB 2.5GbE 网卡插在这台小主机上作为便宜的网口拓展方案。</p>
<p>现在网卡有了，有两种方式可以让 PVE 识别到这张网卡：</p>
<blockquote>
<p>好像 PVE 偶尔也能自动识别到网卡，就是比较慢&hellip;</p>
</blockquote>
<ol>
<li>方法一：直接重启机器，然后就能在 Web UI 的 <code>Network</code> 配置中见到这张 USB 网卡了。之后直接把该网卡加入到 vmbr 网桥的 <code>Bridge Ports</code> 中并应用配置，就大功告成了。</li>
<li>方法二：不重启机器实现添加 USB 网卡。如果机器不能重启，就可以走这个流程：
<ol>
<li>首先，使用 <code>ip link</code> 命令打印出当前的所有网络接口</li>
<li>将 2.5GbE 网卡插到 USB3.0 端口上，Linux 将自动识别到它</li>
<li>现在再使用 <code>ip link</code> 命令查看所有网络接口，找到新增的接口名称（通常在输出内容最末尾）。
<ol>
<li>在我的环境中新的 USB 网卡名称为 <code>enx00e04c680178</code></li>
</ol>
</li>
<li>在配置文件 <code>/etc/network/interfaces</code> 的末尾新增一行：<code>iface enx00e04c680178 inet manual</code>（注意替换网卡名称）</li>
<li>现在直接刷新 Web UI 页面， USB 网卡就会出现了。之后直接把该网卡加入到 vmbr 网桥的 <code>Bridge Ports</code> 中并应用配置，就大功告成了。</li>
</ol>
</li>
</ol>
<h3 id="3-配置-wifi-网卡" class="headerLink">
    <a href="#3-%e9%85%8d%e7%bd%ae-wifi-%e7%bd%91%e5%8d%a1" class="header-mark"></a>3. 配置 WiFi 网卡</h3><p>如果主机自带了 WiFi 网卡，启动后 Proxmox VE 能识别到该网卡，但是无法通过 Web UI 修改它的任何配置。</p>
<p>那么本着物尽其用的精神，该如何利用上这张 WiFi 网卡呢？</p>
<p>根据 PVE 官方文档 <a href="https://pve.proxmox.com/wiki/WLAN" target="_blank" rel="noopener noreferrer">WLAN - Proxmox VE Docs</a>，并不建议在 PVE 上使用 WLAN，它存在如下问题：</p>
<ul>
<li>WiFi 自身必须是一个 Linux Bridge 设备，无法被桥接到 vmbr0 等网桥上。因为大多数 Access Point 都会直接拒绝掉未授权的源地址发过来的数据包&hellip;</li>
<li>与有线连接相比，WiFi 的延迟要高得多，而且延迟波动较大。</li>
</ul>
<p>因此仅建议在不得已的情况下，才使用 WiFi 网卡.</p>
<p>如果要配置 WLAN 网卡的话，官方建议直接参考 Debian 的官方文档进行配置：<a href="https://wiki.debian.org/WiFi/HowToUse" target="_blank" rel="noopener noreferrer">How to use a WiFi interface - Debian</a>，不过这里也找到一篇中文博客：</p>
<ul>
<li><a href="https://foxi.buduanwang.vip/virtualization/pve/1939.html/" target="_blank" rel="noopener noreferrer">proxmox中使用ax210连接无线网络 - 佛西博客</a></li>
</ul>
<h2 id="五提升-pve-的安全性" class="headerLink">
    <a href="#%e4%ba%94%e6%8f%90%e5%8d%87-pve-%e7%9a%84%e5%ae%89%e5%85%a8%e6%80%a7" class="header-mark"></a>五、提升 PVE 的安全性</h2><h3 id="1-配置-acme-证书并使其自动更新" class="headerLink">
    <a href="#1-%e9%85%8d%e7%bd%ae-acme-%e8%af%81%e4%b9%a6%e5%b9%b6%e4%bd%bf%e5%85%b6%e8%87%aa%e5%8a%a8%e6%9b%b4%e6%96%b0" class="header-mark"></a>1. 配置 ACME 证书并使其自动更新</h3><p>对于个人使用而言，不配置证书好像也 ok，虽然访问 Web UI 时浏览器会提示不安全，但也不影响使用。</p>
<p>如果你拥有自己的域名，同时也期望更高的安全性，根据<a href="https://pve.proxmox.com/wiki/Certificate_Management#sysadmin_certs_acme_dns_challenge" target="_blank" rel="noopener noreferrer">Certificate Management - 官方文档</a>，pve 可借助 acme.sh 进行证书的申请与自动更新。</p>
<p>TODO</p>
<h3 id="2-ssh-禁用密码登录" class="headerLink">
    <a href="#2-ssh-%e7%a6%81%e7%94%a8%e5%af%86%e7%a0%81%e7%99%bb%e5%bd%95" class="header-mark"></a>2. SSH 禁用密码登录</h3><p>pve 的 ssh 默认是启用了密码登录的，为了安全性，建议上传 ssh 密钥改用密钥登录，并禁用密码登录功能。</p>
<p>详见 <a href="https://github.com/ryan4yin/knowledge/blob/master/linux/Linux%20%E4%B8%BB%E6%9C%BA%E5%AE%89%E5%85%A8%E8%AE%BE%E7%BD%AE.md" target="_blank" rel="noopener noreferrer">Linux 主机安全设置.md - ryan4yin</a></p>
<h3 id="3-用户管理" class="headerLink">
    <a href="#3-%e7%94%a8%e6%88%b7%e7%ae%a1%e7%90%86" class="header-mark"></a>3. 用户管理</h3><p>PVE 支持对接多种授权协议，对于个人使用而言，直接使用 Linux PAM 是最简单的。</p>
<p>即使是在内网，为了安全性，也建议设置复杂密码，同时所有虚拟机也建议仅启用密钥登录，所有 Web 页面都建议设置复杂密码。（特别是家里没有访客网络的时候&hellip;）</p>
<h2 id="六pcie-直通显卡硬盘usb-设备等" class="headerLink">
    <a href="#%e5%85%adpcie-%e7%9b%b4%e9%80%9a%e6%98%be%e5%8d%a1%e7%a1%ac%e7%9b%98usb-%e8%ae%be%e5%a4%87%e7%ad%89" class="header-mark"></a>六、PCI(e) 直通（显卡、硬盘、USB 设备等）</h2><p>QEMU/KVM 的 PCI(e) 直通功能可以让虚拟机<strong>独占</strong>指定的 PCI(e) 设备，越过宿主机控制器直接与该 PCI(e) 设备通信。</p>
<p>相比使用 QEMU/KVM 提供的 virtio 半虚拟化硬件，PCI(e) 直通有如下优势：</p>
<ul>
<li>大大提升虚拟机与 PCI(e) 设备的 IO 性能（更低的延迟，更高的速度，更低的资源占用）。</li>
<li>可以利用上 QEMU/KVM 本身不支持的硬件特性，比如 PCI 直通最常见的使用场景——显卡直通。</li>
</ul>
<p>那么最常见的 PCI(e) 直通需求有：</p>
<ul>
<li><strong>显卡直通</strong>，实现在内部 windows 主机中用宿主机显卡看影视、玩游戏、剪视频</li>
<li><strong>硬盘或 USB 直通</strong>，以提升硬盘或 USB 的 IO 性能。</li>
</ul>
<p>首先列举下相关的文档：</p>
<ul>
<li><a href="https://pve.proxmox.com/wiki/PCI%28e%29_Passthrough" target="_blank" rel="noopener noreferrer">PCI(e) Passthrough - Proxmox WIKI</a>.</li>
<li><a href="https://pve.proxmox.com/wiki/Pci_passthrough#GPU_OVMF_PCI_Passthrough_.28recommended.29" target="_blank" rel="noopener noreferrer">GPU OVMF PCI Passthrough (recommended) - Proxmox WIKI</a></li>
<li><a href="https://wiki.archlinux.org/title/QEMU/Guest_graphics_acceleration" target="_blank" rel="noopener noreferrer">QEMU/Guest graphics acceleration - Arch WIKI</a></li>
</ul>
<p>TODO 实操内容待补充&hellip;</p>
<h2 id="拓展---cloudinit-高级配置" class="headerLink">
    <a href="#%e6%8b%93%e5%b1%95---cloudinit-%e9%ab%98%e7%ba%a7%e9%85%8d%e7%bd%ae" class="header-mark"></a>拓展 - cloudinit 高级配置</h2><p>PVE 使用 CDROM 只读盘(<code>/dev/sr0</code>)来进行 cloud-init 的配置。
在虚拟机启动后，<code>/dev/sr0</code> 将被卸载。</p>
<p>可挂载上该只读盘，查看其中的初始化配置内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ mkdir cloud-config
</span></span><span class="line"><span class="cl">$ mount /dev/sr0 cloud-config
</span></span><span class="line"><span class="cl">mount: /dev/sr0 is write-protected, mounting read-only
</span></span><span class="line"><span class="cl">$ ls cloud-config
</span></span><span class="line"><span class="cl">meta-data  network-config  user-data
</span></span></code></pre></td></tr></table>
</div>
</div><p>查看其中内容，会发现 <code>user-data</code> 有很多参数都被硬编码了，没有通过 PVE Web Console 暴露出来，导致我们无法自定义这些配置。</p>
<p>比如它硬编码了 <code>manage_etc_hosts: true</code>，强制每次都使用虚拟机的名称作为 hostname.</p>
<p>如果确认有修改这些配置的需求，完全可以修改掉 PVE 代码里的硬编码参数。
通过全文搜索即可找到硬编码参数的位置，以 <code>manage_etc_hosts</code> 为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 在 /usr/share 中全文搜索 manage_etc_hosts 这个关键字</span>
</span></span><span class="line"><span class="cl">grep -r manage_etc_hosts /usr/share
</span></span></code></pre></td></tr></table>
</div>
</div><p>直接就搜索到了硬编码位置是 <code>/usr/share/perl5/PVE/QemuServer/Cloudinit.pm</code>，修改对应的 cloudinit 配置模板，然后重启节点（重启才能重新加载对应的 ruby 程序），即可实现对该硬编码参数的修改。</p>
<h2 id="拓展---自动化配置与监控告警" class="headerLink">
    <a href="#%e6%8b%93%e5%b1%95---%e8%87%aa%e5%8a%a8%e5%8c%96%e9%85%8d%e7%bd%ae%e4%b8%8e%e7%9b%91%e6%8e%a7%e5%91%8a%e8%ad%a6" class="header-mark"></a>拓展 - 自动化配置与监控告警</h2><p>自动化配置相关工具：</p>
<ol>
<li><a href="https://github.com/Telmate/terraform-provider-proxmox/" target="_blank" rel="noopener noreferrer">Telmate/terraform-provider-proxmox</a>: 用户最多，但是只支持管理虚拟机资源</li>
<li><a href="https://github.com/danitso/terraform-provider-proxmox" target="_blank" rel="noopener noreferrer">danitso/terraform-provider-proxmox</a>: stars 少，但是可以管理 PVE 的大部分资源，包括节点、用户、资源池、TLS证书等等
<ul>
<li>代码更顺眼，但是作者忙，没时间合并 pr，导致 Bug 更多一些，而且很久没更新了&hellip;</li>
</ul>
</li>
<li><a href="https://github.com/ryan4yin/pulumi-proxmox" target="_blank" rel="noopener noreferrer">ryan4yin/pulumi-proxmox</a>: 我维护的一个 proxmox 自动配置工具（很久没更新了&hellip;）</li>
<li><a href="https://github.com/proxmoxer/proxmoxer" target="_blank" rel="noopener noreferrer">Python SDK</a></li>
</ol>
<p>监控告警：</p>
<ul>
<li><a href="https://github.com/prometheus-pve/prometheus-pve-exporter" target="_blank" rel="noopener noreferrer">prometheus pve expoter</a>: 通过 prometheus+grafana 监控 PVE 集群</li>
</ul>
<h2 id="拓展---pve-运行在-arm-开发版上" class="headerLink">
    <a href="#%e6%8b%93%e5%b1%95---pve-%e8%bf%90%e8%a1%8c%e5%9c%a8-arm-%e5%bc%80%e5%8f%91%e7%89%88%e4%b8%8a" class="header-mark"></a>拓展 - PVE 运行在 ARM 开发版上</h2><p>PVE 官方目前还未推出 ARM 支持，但是社区已有方案：</p>
<ul>
<li><a href="https://github.com/pimox/pimox7" target="_blank" rel="noopener noreferrer">pimox7</a></li>
<li><a href="https://foxi.buduanwang.vip/virtualization/pve/1902.html/" target="_blank" rel="noopener noreferrer">安装Arm版本的Proxmox VE - 佛西博客</a></li>
<li><a href="https://github.com/jiangcuo/Proxmox-Arm64" target="_blank" rel="noopener noreferrer">Proxmox-Arm64</a></li>
</ul>
<p>proxmox 社区比较活跃，建议多在社区内看看相关进展。</p>
<h2 id="拓展---其他-qemukvm-相关的虚拟化平台" class="headerLink">
    <a href="#%e6%8b%93%e5%b1%95---%e5%85%b6%e4%bb%96-qemukvm-%e7%9b%b8%e5%85%b3%e7%9a%84%e8%99%9a%e6%8b%9f%e5%8c%96%e5%b9%b3%e5%8f%b0" class="header-mark"></a>拓展 - 其他 QEMU/KVM 相关的虚拟化平台</h2><p>PVE 毕竟是一个商业系统，虽然目前可以免费用，但是以后就不一定了。</p>
<p>如果你担心 PVE 以后会不提供免费使用的功能，或者单纯想折腾折腾的技术，还可以试试下面这些虚拟化平台：</p>
<ul>
<li><a href="https://github.com/retspen/webvirtcloud" target="_blank" rel="noopener noreferrer">webvirtcloud</a>: 其前身是 webvirtmgr，一个完全开源的 QEMU/KVM Web UI，额外提供了用户管理功能。</li>
<li><a href="https://github.com/kubevirt/kubevirt" target="_blank" rel="noopener noreferrer">kubevirt</a>: 基于 Kubernetes 进行虚拟化管理</li>
<li><a href="https://github.com/rancher/harvester" target="_blank" rel="noopener noreferrer">rancher/harvester</a>: Rancher 开源的基于 Kubernetes 的超融合平台(HCI)
<ul>
<li>其底层使用 kubevirt 提供虚拟化能力，通过 longhorn 提供分布式存储能力。</li>
<li>HCI 超融合 = 计算虚拟化 + 网络虚拟化 + 分布式存储，它和传统的虚拟化软件最大的不同是：分布式存储。</li>
<li>企业级场景下一般至少得 10GbE 网络 + SSD 才能 hold 住 HCI 超融合架构。</li>
<li>超融合对存储的一些要求：
<ul>
<li>软件定义 – 解除硬件绑定，可通过升级拓展更丰富的功能，自动化能力高</li>
<li>全分布式架构 - 扩展性好，消除单点故障风险</li>
<li>高可靠性 - 智能的故障恢复功能，丰富的数据保护手段</li>
<li>高性能 – 支持多种存储介质，充分挖掘和利用新式硬件的性能</li>
<li>高度融合 – 架构简单并易于管理</li>
</ul>
</li>
<li>超融合架构可以降低私有云的构建与维护难度，让私有云的使用维护和公有云一样简单。</li>
<li>超融合架构下，虚拟机的计算和存储是完全高可用的：计算资源能智能动态更换，存储也是分布式存储，底层计算和存储也可以很简单的扩缩容。</li>
</ul>
</li>
</ul>
<p>我打算有时间在 PVE 集群里跑个 rancher/harvester 玩玩 emmmm</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/49118355" target="_blank" rel="noopener noreferrer">KVM 虚拟化环境搭建 - ProxmoxVE</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/49120559" target="_blank" rel="noopener noreferrer">KVM 虚拟化环境搭建 - WebVirtMgr</a></li>
<li><a href="https://pve.proxmox.com/wiki/Main_Page" target="_blank" rel="noopener noreferrer">Proxmox Virtual Environment - Proxmox WIKI</a></li>
<li><a href="https://wiki.archlinux.org/title/QEMU#top-page" target="_blank" rel="noopener noreferrer">QEMU - Arch Linux WIKI</a></li>
<li><a href="https://foxi.buduanwang.vip/category/virtualization/pve/" target="_blank" rel="noopener noreferrer">佛西博客 - PVE 相关</a>: 这位博主写了很多 pve 相关的内容，而且比较有深度</li>
</ul>
]]></content></entry><entry><title type="html">刻意练习</title><link href="https://thiscute.world/posts/deliberate-practice/"/><id>https://thiscute.world/posts/deliberate-practice/</id><author><name>ryan4yin</name></author><published>2022-10-05T13:31:00+08:00</published><updated>2022-10-05T13:31:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">Learn English Again</title><link href="https://thiscute.world/posts/learn-english-again/"/><id>https://thiscute.world/posts/learn-english-again/</id><author><name>ryan4yin</name></author><published>2022-09-04T13:22:00+08:00</published><updated>2022-09-04T13:22:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">分布式数据库的一致性问题与共识算法</title><link href="https://thiscute.world/posts/consistency-and-consensus-algorithm/"/><id>https://thiscute.world/posts/consistency-and-consensus-algorithm/</id><author><name>ryan4yin</name></author><published>2022-08-07T04:11:23+08:00</published><updated>2022-08-07T04:11:23+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">Kubernetes 中的证书管理工具 - cert-manager</title><link href="https://thiscute.world/posts/kubernetes-cert-management/"/><id>https://thiscute.world/posts/kubernetes-cert-management/</id><author><name>ryan4yin</name></author><published>2022-07-31T15:11:46+08:00</published><updated>2023-08-14T15:11:46+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">Death Is But a Dream</title><link href="https://thiscute.world/posts/death-is-but-a-dream/"/><id>https://thiscute.world/posts/death-is-but-a-dream/</id><author><name>ryan4yin</name></author><published>2022-05-24T02:17:00+08:00</published><updated>2022-05-24T02:17:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">NAT 网关、NAT 穿越以及虚拟网络</title><link href="https://thiscute.world/posts/about-nat/"/><id>https://thiscute.world/posts/about-nat/</id><author><name>ryan4yin</name></author><published>2022-05-13T11:46:00+08:00</published><updated>2022-05-13T11:46:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">FinOps for Kubernetes - 如何拆分 Kubernetes 成本</title><link href="https://thiscute.world/posts/finops-for-kubernetes/"/><id>https://thiscute.world/posts/finops-for-kubernetes/</id><author><name>ryan4yin</name></author><published>2022-05-04T23:15:00+08:00</published><updated>2022-05-05T19:31:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">变革与创新</title><link href="https://thiscute.world/posts/revolution-and-innovation/"/><id>https://thiscute.world/posts/revolution-and-innovation/</id><author><name>ryan4yin</name></author><published>2022-03-28T00:40:00+08:00</published><updated>2022-03-28T00:40:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</title><link href="https://thiscute.world/posts/about-tls-cert/"/><id>https://thiscute.world/posts/about-tls-cert/</id><author><name>ryan4yin</name></author><published>2022-03-14T00:00:00+08:00</published><updated>2022-03-14T00:00:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</title><link href="https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/"/><id>https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/</id><author><name>ryan4yin</name></author><published>2022-03-09T20:50:00+08:00</published><updated>2022-03-13T15:26:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（六）—— 对称密钥加密算法</title><link href="https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/"/><id>https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/</id><author><name>ryan4yin</name></author><published>2022-03-06T18:44:00+08:00</published><updated>2022-03-06T18:44:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">「转」且看有思想的年轻人</title><link href="https://thiscute.world/posts/the-thoughtful-youth/"/><id>https://thiscute.world/posts/the-thoughtful-youth/</id><author><name>ryan4yin</name></author><published>2022-03-04T22:58:00+08:00</published><updated>2022-03-04T22:58:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</title><link href="https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/"/><id>https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:05+08:00</published><updated>2022-03-13T15:26:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</title><link href="https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/"/><id>https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:04+08:00</published><updated>2022-03-01T17:15:04+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</title><link href="https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/"/><id>https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:03+08:00</published><updated>2022-03-01T17:15:03+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（二）—— 哈希函数</title><link href="https://thiscute.world/posts/practical-cryptography-basics-2-hash/"/><id>https://thiscute.world/posts/practical-cryptography-basics-2-hash/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:01+08:00</published><updated>2022-03-01T17:15:01+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">写给开发人员的实用密码学（一）—— 概览</title><link href="https://thiscute.world/posts/practical-cryptography-basics-1/"/><id>https://thiscute.world/posts/practical-cryptography-basics-1/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:00+08:00</published><updated>2022-03-01T17:15:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">「转」仙马赛记——我又 PB 了</title><link href="https://thiscute.world/posts/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/"/><id>https://thiscute.world/posts/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/</id><author><name>ryan4yin</name></author><published>2022-02-26T17:44:00+08:00</published><updated>2022-02-26T17:44:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">「转」MIRT出征广马——首次摸到330的边儿</title><link href="https://thiscute.world/posts/likenttt-2020-12-13-guangzhou-marathon-3_30_15/"/><id>https://thiscute.world/posts/likenttt-2020-12-13-guangzhou-marathon-3_30_15/</id><author><name>ryan4yin</name></author><published>2022-02-26T16:59:00+08:00</published><updated>2022-02-26T16:59:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry><entry><title type="html">Linux/Windows/MacOSX 系统常用命令集锦</title><link href="https://thiscute.world/posts/common-commands-for-various-operating-systems/"/><id>https://thiscute.world/posts/common-commands-for-various-operating-systems/</id><author><name>ryan4yin</name></author><published>2022-02-13T16:09:00+08:00</published><updated>2022-02-13T16:09:00+08:00</updated><content type="html">&lt;p>文章比较老就不放 RSS 里啦，请点击阅读原文吧。&lt;/p>
&lt;p>This post is too old, please click the original URL to read it.&lt;/p></content></entry></feed>