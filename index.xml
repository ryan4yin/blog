<feed xmlns="http://www.w3.org/2005/Atom"><title>This Cute World</title><link href="https://thiscute.world/index.xml" rel="self"/><link href="https://thiscute.world/"/><updated>2022-08-07T04:11:23+08:00</updated><id>https://thiscute.world/</id><author><name>ryan4yin</name></author><generator>Hugo -- gohugo.io</generator><entry><title type="html">分布式数据库的一致性问题与共识算法</title><link href="https://thiscute.world/posts/consistency-and-consensus-algorithm/"/><id>https://thiscute.world/posts/consistency-and-consensus-algorithm/</id><author><name>ryan4yin</name></author><published>2022-08-07T04:11:23+08:00</published><updated>2022-08-07T04:11:23+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，不保证正确！</p>
</blockquote>
<p>谈到分布式数据库，不论是 Etcd/Zookeeper 这样的中心化数据库，还是 Ethereum 区块链这样的去中心化数据库，都避免不了两个关键词：「<strong>一致性</strong>」跟「<strong>共识</strong>」。</p>
<p>本文是笔者学习「<strong>一致性</strong>」和「<strong>共识</strong>」以及相关的理论知识时记录的笔记，这些知识能帮助我们了解 Etcd/Zookeeper/Consul/MySQL/PostgreSQL/DynamoDB/Cassandra/MongoDB/CockroachDB/TiDB 等一众数据库的区别，理解各数据库的优势与局限性，搞懂数据库隔离级别的含义以及应该如何设置，并使我们能在各种应用场景中选择出适用的数据库。</p>
<p>如果你对区块链感兴趣，那这篇文章也能帮助你了解区块链这样的去中心化数据库，跟业界流行的分布式数据库在技术上有何区别，又有哪些共同点，具体是如何实现。</p>
<h2 id="一一致性---consistency" class="headerLink">
    <a href="#%e4%b8%80%e4%b8%80%e8%87%b4%e6%80%a7---consistency" class="header-mark"></a>一、一致性 - Consistency</h2><p>「一致性」本身是一个比较模糊的定义，视使用场景的不同，存在许多不同的含义。
由于数据库仍然是一个新兴领域，目前存在许多不同的一致性模型，其中的一些术语描述的一致性之间可能还有重叠关系，这些关系甚至会困扰专业的数据库开发人员。</p>
<p>但是究其根本，实际上在谈论一致性时，我们是在谈论<strong>事务一致性</strong>跟<strong>数据一致性</strong>，下面我们分别介绍下这两个一致性。</p>
<h3 id="1-事务一致性---transactions-consistency" class="headerLink">
    <a href="#1-%e4%ba%8b%e5%8a%a1%e4%b8%80%e8%87%b4%e6%80%a7---transactions-consistency" class="header-mark"></a>1. 事务一致性 - Transactions Consistency</h3><p>「事务一致性」指的是数据库中事务的一致性，它是 ACID 理论中最不起眼的特性，也并不是本文的重点。
但是这里就写这么一句话也说不过去，所以下面就仔细介绍下事务与 ACID 理论。</p>
<h4 id="事务与-acid-理论" class="headerLink">
    <a href="#%e4%ba%8b%e5%8a%a1%e4%b8%8e-acid-%e7%90%86%e8%ae%ba" class="header-mark"></a>事务与 ACID 理论</h4><p>事务是一种「要么全部完成，要么完全不做（All or Nothing）」的指令运行机制。</p>
<p><strong>ACID 理论</strong>定义，拥有如下四个特性的「数据库指令序列」，就被称为事务：</p>
<ul>
<li><strong>原子性 Atomicity</strong>：事务是一个不可分割的工作单元，事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在某个中间状态。
<ul>
<li>比如 A 转账 100 元给 B，要么转账失败，要么转账成功，不可能卡在 A 被扣除了 100 元，而 B 还没收到 100 元的中间状态。</li>
<li>原子性在单机数据库上已得到妥善解决，但是在分布式数据库上它成为一项新的挑战。要在分布式架构下支持原子性并不容易，所以不少 NoSQL 产品都选择绕过这个问题，聚焦到那些对原子性不敏感的细分场景。</li>
</ul>
</li>
<li><strong>一致性 Consistency</strong>：也叫数据的「<strong>正确性 Correctness</strong>」或者完整性，指事务对数据库状态的变更必须满足所有预定义的规则，包括「约束 constraints」、「级联 cascades」、「触发器 triggers」以及这些规则的任何组合。
<ul>
<li>比如如果用户为某个字段设置了约束条件 <code>unique</code>，那么事务对该表的所有修改都必须保证此约束成立，否则它将会失败。</li>
<li>是存在感最低的特性</li>
</ul>
</li>
<li><strong>隔离性 Isolation</strong>：<strong>并发执行的多个事务之间是完全隔离的</strong>，它们的执行效果跟按事务的开始顺序串行执行完全一致。
<ul>
<li>事务中最复杂的特性</li>
</ul>
</li>
<li><strong>持久性 Durability</strong>：事务执行完毕后，结果就保存不变了。这个最好理解。</li>
</ul>
<p>ACID 是传统的单机数据库的核心特性，比如 MySQL/PostgreSQL.</p>
<h4 id="acid-中最复杂的特性---隔离性" class="headerLink">
    <a href="#acid-%e4%b8%ad%e6%9c%80%e5%a4%8d%e6%9d%82%e7%9a%84%e7%89%b9%e6%80%a7---%e9%9a%94%e7%a6%bb%e6%80%a7" class="header-mark"></a>ACID 中最复杂的特性 - 隔离性</h4><p>完全地实现 ACID 得到的数据库，性能是非常差的。
因此在关系数据库中，设计者通常会选择牺牲相对不重要的「隔离性」来获取更好的性能。</p>
<p>而一旦隔离不够彻底，就可能会遇到一些事务之间互相影响的异常情况，这些异常被分为如下几种：</p>
<ul>
<li><strong>脏写 Dirty writes</strong>：即事务 T1 跟事务 T2 同时在原数据的基础上更新同一个数据，导致结果不符合预期。
<ul>
<li>案例：两个事务同时尝试从账户中扣款 1000 元，但是它们读到的初始状态都是 5000 元，于是都尝试将账户修改为 4000 元，结果就是少扣了 1000 元。</li>
<li>最简单的解决方法：针对 <code>UPDATE table SET field = field - 1000 WHERE id = 1</code> 这类数据增删改的逻辑，需要对被更新的行加一把「行写锁」，使其他需要写此数据的事务等待。</li>
</ul>
</li>
<li><strong>脏读 Dirty reads</strong>：事务 T1 读取了事务 T2 未提交的数据。这个数据不一定准确，被称为脏数据，因为假如事务 T2 回滚了，T1 拿到的就是一个错误的数据
<ul>
<li>案例：假设小明小红在一个银行账户存了 5000 元，小明小红在用这同一个账户消费 1000 元，这中间小明付款的事务读取到账户已经被小红的事务修改为了 4000 元，于是它把余额修改为 3000 元，然后付款成功。但是在小明的付款事务成功后，小红的付款失败回滚了，余额又从 3000 被修改回 5000 元。小明就完成了 0 元购的壮举。</li>
<li>最简单的解决方法：事务 T2 写数据时对被修改的行加「行写锁」，T2 结束后再释放锁，这样事务 T1 的读取就会被阻塞，直到锁释放。</li>
</ul>
</li>
<li><strong>不可重复读 Non-repeatable reads</strong>：事务 T1 读取数据后，紧接着事务 T2 就更新了数据并提交，事务 T1 再次读取的时候发现数据不一致了
<ul>
<li>案例：
<ul>
<li>小明在京东上抢购商品，抢购事务启动时事务读到还剩 36 件商品，于是继续执行抢购逻辑，之后事务因为某种原因需要再读一次商品数量，结果发现商品数量已经变成 0 了，抢购失败。</li>
<li>更麻烦的是，不可重复读导致 SELECT 跟 UPDATE 之间也可能出现数据变更，如果你在事务中先通过 <code>SELECT field INTO myvar FROM mytable WHERE uid = 1</code> 读到余额，再在此基础上通过 <code>UPDATE</code> 去更新余额，很可能导致数据变得一团糟！
<ul>
<li>正确的做法是使用 <code>UPDATE mytable SET field = field - 1000 WHERE id = 1</code>，因为每一条 SQL 命令本身都是原子的，这个 SQL 不会有问题。</li>
</ul>
</li>
</ul>
</li>
<li>最简单的解决办法：事务 T1 读数据时，也加一把「行」锁，直到不再需要读该数据了，再释放锁。</li>
</ul>
</li>
<li><strong>幻读 Phantom reads</strong>：事务 T1 在多次批量读数据时，事务 T2 往其中执行了插入/删除操作，导致 T1 读到的是旧数据的一个残影，而非当前真实的数据状态。
<ul>
<li>最简单的解决办法：事务 T1 在批量读数据时，先加一把范围锁，在事务 T1 结束读取之后，再释放这把锁。这能同时解决「幻读」跟「不可重复读」的问题。</li>
</ul>
</li>
</ul>
<p>根据隔离程度，ANSI SQL-92 标准中将「隔离性」细分为四个等级（避免「脏写」是数据库的必备要求，因此未记录在下面的四个等级中）：</p>
<ul>
<li><strong>串行化 Serializable</strong>：也就是完全的隔离，只要事务之间存在互相影响的可能，就（通过锁机制）强制它们串行执行。</li>
<li><strong>可重复读 Repeatable read</strong>：可避免脏读、不可重复读的发生，但是解决不了幻读的问题。</li>
<li><strong>读已提交 Read committed</strong>：只能避免脏读</li>
<li><strong>读未提交 Read uncommitted</strong>：最低级别，完全放弃隔离性</li>
</ul>
<p>MySQL 默认的隔离级别为「可重复读 Repeatable Read」，PostgreSQL 和 Oracle 默认隔离级别为「读已提交 Read committed」。</p>
<p>为什么 MySQL/PostgreSQL/Oracle 的默认隔离级别是这样设置的呢？该如何选择正确的隔离级别呢？
我们针对普通的高并发业务场景做个简单分析：</p>
<ul>
<li>首先，「脏读」是必须避免的，它会使事务读到错误的数据！最低的「读未提交」级别直接排除</li>
<li>「串行化」的性能太差，也直接排除</li>
<li>只要 SQL 用得对，「不可重复读」问题对业务逻辑的正确性通常并无影响，所以是可以容忍的。</li>
<li><strong>因此一般「读已提交」是最佳的隔离级别</strong>，这也是 PostgreSQL/Oracle 将其设为默认隔离级别的原因。</li>
<li>那么为什么 MySQL 这么特立独行，将默认隔离级别提高到了「可重复读」呢？为啥阿里这种大的互联网公司又会把 MySQL 默认的隔离级别改成「读已提交」？
<ul>
<li>根据网上查到的资料，这是 MySQL 的历史问题导致的。MySQL 5.0 之前只支持 statement 这种 binlog 格式，此格式在「读已提交」的隔离级别下会出现诸多问题，最明显的就是可能会导致主从数据库的数据不一致。</li>
<li>除了设置默认的隔离级别外，MySQL 还禁止在使用 statement 格式的 binlog 时，使用 READ COMMITTED 作为事务隔离级别，尝试修改隔离级别会报错 <code>Transaction level 'READ-COMMITTED' in InnoDB is not safe for binlog mode 'STATEMENT'</code></li>
<li>而互联网公司将隔离级别改为「读已提交」的原因也很好理解，正如前文所述「读已提交」是最佳的隔离级别，这样修改能够提升数据库的性能。</li>
</ul>
</li>
</ul>
<p>「隔离性」的本质其实就是<strong>事务的并发控制</strong>，不同的隔离级别代表了对并发事务的隔离程度，主要的实现手段是「<strong>多版本并发控制 MVCC</strong>」与「锁」。
锁机制前面已经简单介绍过了，而 MVCC 其实就是为每个事务创建一个特定隔离级别的快照，这样读写不会互相阻塞，性能就提升了。（MVCC 暂时也是超纲知识，后面再研究吧 emmmm）</p>
<p>ANSI SQL-92 对异常现象的分析仍然太过简单了，1995 年新发布的论文 <a href="https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/tr-95-51.pdf" target="_blank" rel="noopener noreffer">A Critique of ANSI SQL Isolation Levels</a> 丰富和细化了 SQL-92 的内容，定义了六种隔离级别和八种异常现象（有大佬强烈建议通读此论文，重点是文中的快照隔离（Snapshot Isolation, SI）级别）。</p>
<h3 id="2-数据一致性-data-consistency" class="headerLink">
    <a href="#2-%e6%95%b0%e6%8d%ae%e4%b8%80%e8%87%b4%e6%80%a7-data-consistency" class="header-mark"></a>2. 数据一致性 Data Consistency</h3><p>「数据一致性」是指对数据库的每一次读操作都应该读到最新写入的数据，或者直接报错。</p>
<p>对单机数据库而言「数据一致性」往往不是问题，因为它通常只有一份保存在磁盘或内存中的数据。
但是在分布式系统中，为了数据安全性或者为了性能，往往每一份数据都在多个节点上存有其副本，这就引出了数据副本们的一致性问题。
因此，我们通常谈论的「数据一致性」就是指分布式系统的「数据一致性」。</p>
<p><strong>CAP 原则</strong>是分布式系统领域一个著名的理论，它告诉我们在分布式系统中如下三种属性不可能全部达成，因此也被称作「<strong>CAP 不可能三角</strong>」：</p>
<ul>
<li><strong>数据一致性 Data Consistency</strong>：客户端的每次读操作，不管访问系统的哪个节点，要么读到的都是同一份最新写入的数据，要么读取失败
<ul>
<li>强调数据完全正确</li>
</ul>
</li>
<li><strong>可用性 Availability</strong>：任何来自客户端的请求，不管访问哪个非故障节点，都能得到响应数据，但不保证是同一份最新数据
<ul>
<li>强调的是服务可用，但不保证数据正确</li>
</ul>
</li>
<li><strong>分区容错性 Partition Tolerance</strong>：即使节点之间出现了任意数量的消息丢失或者高延迟，系统仍能正常运行
<ul>
<li>就是说网络丢包或延迟会导致系统被分成多个 Partition，系统能够容忍这种情况</li>
</ul>
</li>
</ul>
<p>为了保证分区容错性 P，考虑当分布式系统因为网络问题被割裂成多个分区时，每个分区只有如下两种选择，A 跟 C 必须牺牲掉其中之一：</p>
<ul>
<li>取消操作并拒绝提供服务，这降低了可用性，但是能确保数据一致性</li>
<li>继续处理请求，这确保了可用性，但是数据一致性就无法保证了</li>
</ul>
<p>如果系统的多个分区都在同时提供服务，导致数据不一致并且存在冲突无法合并，这就被称为分布式系统的「<strong>脑裂</strong>」，显然任何分布式系统都不会希望发生「脑裂」。</p>
<p>因为分布式系统与单机系统不同，它涉及到多节点间的网络通讯和交互，但是只要有网络交互就一定会有延迟和数据丢失，节点间的分区故障是很有可能发生的。因此为了正常运行，P 是分布式系统必须保证的特性，<strong>在出现分区故障时，为了 P 只能牺牲掉 A 或者 C</strong>。</p>
<p>工程上是要 AP 还是 CP，得视情况而定：</p>
<ul>
<li>Etcd/Zookeeper/Consul: 它们通常被用于存储系统运行的关键元信息，每次读，都要能读取到最新数据。因此它们实现了 CP，牺牲了 A</li>
<li>DynamoDB/Cassandra/MongoDB：不要求数据一致性，一段时间内用旧的缓存问题也不大，但是要求可用性，因此应该实现 AP，牺牲掉 C</li>
</ul>
<h4 id="数据一致性模型" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e4%b8%80%e8%87%b4%e6%80%a7%e6%a8%a1%e5%9e%8b" class="header-mark"></a>数据一致性模型</h4><p>分布式系统中，多副本数据上的一组读写策略，被称为「（数据）一致性模型 Consistency Model」。
一致性模型数量很多，让人难以分辨。
为了便于理解，我们先从状态视角出发区分一下强一致与弱一致的概念，在这个的基础上再从操作视角去理解这众多的一致性模型。</p>
<h5 id="1-状态视角---强一致与弱一致" class="headerLink">
    <a href="#1-%e7%8a%b6%e6%80%81%e8%a7%86%e8%a7%92---%e5%bc%ba%e4%b8%80%e8%87%b4%e4%b8%8e%e5%bc%b1%e4%b8%80%e8%87%b4" class="header-mark"></a>1. 状态视角 - 强一致与弱一致</h5><p>我们首先把整个分布式系统看作一个<strong>白盒</strong>，从状态视角看，任何变更操作后，分布式系统的多个数据副本只有如下三种状态：</p>
<ul>
<li>在某些条件下，各副本状态不一致的现象只是暂时的，后续还会转换到一致的状态，这被称为「<strong>弱一致</strong>」；
<ul>
<li>这通常是使用<strong>异步复制</strong>来同步各副本的状态。</li>
</ul>
</li>
<li>相对的说，如果系统各副本不存在「不一致」这种状态，只要变更操作成功数据就一定完全一致，那它就被称为「<strong>强一致</strong>」。
<ul>
<li>这要求所有副本之间的数据更新必须完全同步，就必须使用<strong>全同步复制</strong>。</li>
</ul>
</li>
<li><strong>永远不会一致</strong>：这在分布式系统中就是 bug 了，也被称为「脑裂」。</li>
</ul>
<p>上面描述的是整个系统的客观、实际状态，但对于绝大部分用户而言分布式系统更多的是一个<strong>黑盒</strong>，因此更流行的是基于「黑盒」的分类方式，它根据系统的对外状态将系统分成两种类型：</p>
<ul>
<li><strong>强一致</strong>：指对系统的任何节点/进程，写操作完成后，任何用户对任何节点的后续访问都能读到新的值。就好像系统只存在一个副本一样。
<ul>
<li>最常用算法是 Raft/Paxos，它们的写操作只要求超过半数节点写入成功，因此写入完成时，内部状态实际是不一致的，但是对它进行读写，效果跟「全同步复制」没有区别。</li>
</ul>
</li>
<li><strong>弱一致</strong>：指对系统的任何节点/进程，写操作完成后，后续的任何访问可能会拿到的值是不确定的，但经过一段时间后，后续的任何访问都能读到新的值。
<ul>
<li>弱一致是非常模糊的定义。如果我们把最终所有用户都能访问到新的值被称为「<strong>系统收敛</strong>」，系统收敛的用时可以有明确边界，也可以没有。系统收敛前的访问行为可以有明确规范，也可以不存在规范。一切都看具体系统的实现。</li>
<li>如果系统能够在有限时间内收敛，那它就是「<strong>最终一致</strong>」，否则可以认为它是「<strong>不一致</strong>」。</li>
</ul>
</li>
</ul>
<p>为了实际需要，数据库专家对系统收敛之前的读写效果进行各种限制，对系统的收敛时间进行各种限制，得到了许多一致性模型。</p>
<h5 id="2-操作视角---多种一致性模型" class="headerLink">
    <a href="#2-%e6%93%8d%e4%bd%9c%e8%a7%86%e8%a7%92---%e5%a4%9a%e7%a7%8d%e4%b8%80%e8%87%b4%e6%80%a7%e6%a8%a1%e5%9e%8b" class="header-mark"></a>2. 操作视角 - 多种一致性模型</h5><p>从每个客户端的操作角度看，有四种一致性模型：</p>
<ul>
<li><strong>写后读一致性 Read after Write Consistency</strong>：也被称作「读自己所写一致性」，即自己写完数据版本 N 后，后续读到的版本一定不小于版本 N。
<ul>
<li>它解决的问题：A 发了个抖音视频，刷新页面后却莫名其妙消失了（旧版本），几分钟后才重新刷出来。</li>
<li>实现方式之一：为写入者单独添加一个读取规则，他的读都由已更新其写入数据的副本来处理。</li>
</ul>
</li>
<li><strong>单调读一致性 Monotonic Read Consistency</strong>：保证多个读操作的顺序，即客户端一旦读到某个数据版本 N，后续不会读到比 N 更低的版本。
<ul>
<li>它解决的问题是：A 删除了一个抖音视频，可多次刷新，偶尔刷不到视频，偶尔又能刷到被删除视频（旧版本），几分钟后才彻底被删除。</li>
<li>实现方式之一：为每个用户的读都创建一个副本映射，后续的读都由一个固定的副本处理，避免随机切换副本而读到更老的值。</li>
</ul>
</li>
<li><strong>单调写一致性 Monotonic Write Consistency</strong>：保证多个写操作的顺序，即客户端对同一数据的两次写入操作，一定按其被提交的顺序被执行。</li>
<li><strong>读后写一致性 Write after Read Consistency</strong>：读后写一致性，保证一个客户端读到数据版本 N 后（可能是其他客户端写入的），随后对同一数据的写操作必须要在版本号大于等于 N 的副本上执行。</li>
</ul>
<p>上述四个一致性模型都只从每个客户端自身的角度定义规则，比较片面，因此它们都是「弱一致模型」。</p>
<p>而不考虑客户端，直接从所有数据库用户的操作视角看，有如下几种一致性模型：</p>
<ul>
<li><strong>线性一致性 Linearizability</strong>：线性一致性利用了事件的提交顺序，它保证任何读操作得到的数据，其顺序跟读/写事件的提交顺序一致。
<ul>
<li>简单的说它要求<strong>整个系统表现得像只存在一个副本</strong>，所有操作的执行结果就跟这些事件按提交顺序完全串行执行一样。这实际也是在说所有并发事件都是原子的，一旦互相之间存在冲突，就一定得按顺序执行，因此也有人称它为「原子一致性」。</li>
<li>线性一致性，完全等价于系统对外状态的「强一致性」</li>
<li>线性一致性的系统是完全确定性的</li>
<li>实现方式：需要一个所有节点都一致的「<strong>全局时钟</strong>」，这样才可以对所有事件进行全局排序。
<ul>
<li>大多数分布式数据库如 TiDB/Etcd 都是通过 NTP 等协议进行单点授时与同步实现的全局时钟。</li>
<li>有全球化部署需要的 Google Spanner 是使用 GPS + 原子钟实现的全局时钟 TrueTime，全局误差可以控制在 7ms 以内。</li>
</ul>
</li>
<li>局限性：根据爱因斯坦相对论，「时间是相对的」，实际上并不存在绝对的时间，因此线性一致性只在经典物理学范围内适用。</li>
</ul>
</li>
<li><strong><a href="https://en.wikipedia.org/wiki/Consistency_model" target="_blank" rel="noopener noreffer">顺序一致性 Sequentially Consistent</a></strong>：顺序一致性最早是 Leslie Lamport 用来描述多核 CPU 的行为的，在分布式系统领域用得较少。
<ul>
<li>顺序一致性的要求有两点：
<ul>
<li>从单个进程（副本）的角度看，所有指令的执行顺序跟代码逻辑的顺序完全一致。</li>
<li>从所有的处理器（整个分布式系统）角度看，写操作不必立即对所有用户可见，但是所有副本必须以相同的顺序接收这些写操作。</li>
</ul>
</li>
<li>顺序一致性和线性一致性都是要找到一个满足「写后读」的一组操作历史，差异在于<strong>线性一致性要求严格的时间序，而顺序一致性只要求满足代码的逻辑顺序</strong>，而其他代码逻辑未定义的事件顺序（比如多副本上各事件之间的顺序），具体是什么样的顺序无所谓，只要所有副本看到的事件顺序都相同就行。</li>
<li>顺序一致性并不能提供「确定性」，相同的两次操作仍然可能得到不同的事件顺序。</li>
<li>实现方式：因为不要求严格的全局时间序，它就不需要一个全局时钟了，但实际上为了满足全局的确定性，仍然需要一些复杂的操作。</li>
</ul>
</li>
<li><strong>因果一致性 Causal Consistency</strong>：线性一致性的全局时钟有其局限性，而因果一致性基于写事件的「偏序关系」提出了「<strong>逻辑时钟</strong>」的概念，并保证读顺序与逻辑时钟上的写事件顺序一致。
<ul>
<li>写事件的「偏序关系」关系是指，至少部分事件（比如一个节点内部的事件）是可以使用本地时钟直接排序的，而节点之间发生通讯时，接收方的事件一定晚于调用方的事件。基于这一点可以实现一个「<strong>逻辑时钟</strong>」，但逻辑时钟的缺点在于，如果某两个事件不存在相关性，那逻辑时钟给出的顺序就没有任何意义。</li>
<li>多数观点认为，因果一致性弱于线性一致性，但<strong>在并发性能上具有优势，也足以处理多数的异常现象</strong>，所以因果一致性也在工业界得到了应用。</li>
<li>CockroachDB 和 YugabyteDB 都在设计中采用了逻辑混合时钟（Hybrid Logical Clocks），这个方案源自 Lamport 的逻辑时钟，也取得了不错的效果</li>
</ul>
</li>
<li><strong>前缀一致性 Consistent Prefix</strong>：副本之间的同步过程中，会存在一些副本接收数据的顺序并不一致。「前缀一致性」是说所有用户读到的数据顺序的前缀永远是一致的。
<ul>
<li>「前缀」是指程序在执行写操作时，需要显式声明其「前缀」事件，这样每个事件就都存在一个由其他写事件排列而成的前缀。比如当前有写事件排列「A B C D」，那所有用户读到的数据都拥有同样的写事件前缀，比如「A」、「A B」、「A B C」、「A B C D」，但不可能出现「A C」或者「C A」等结果。</li>
<li>它解决的是<strong>分片分布式数据库</strong>的一致性问题：A B C 因为地域区别读写的是不同的副本，B 在抖音评论区问了个问题，然后 A 作出了回答。但是问题跟回答两个数据如果处于不同的分片，副本同步时这两个数据的顺序是无法保证的，C 可能会先读到回答信息，之后才刷新出 B 的提问，历史事件的顺序就乱了。</li>
<li>实现方式：需要程序主动为消息之间添加显式的依赖关系，再据此控制其读取顺序，实现比较复杂。</li>
<li>存在的问题：只有被显式定义了因果关系的事件，它们之间的顺序才能被保证。</li>
</ul>
</li>
</ul>
<p>其中<strong>线性一致性</strong>就是<strong>强一致性</strong>，其他所有的模型都是<strong>弱一致性模型</strong>或者说<strong>最终一致性模型</strong>。所有这些模型按强度降序排列如下：</p>
<ul>
<li>线性一致性/强一致性：系统对外表现得好像整个系统完全一致，不存在不一致的情况。</li>
<li>顺序一致性：只保证每个节点上的事件顺序一致，对节点之间的事件顺序只有非常宽松的要求。</li>
<li>因果一致性：同样只保证每个节点上的事件顺序一致，但是对节点之间的事件顺序的要求比顺序一致性更宽松。</li>
<li>有界旧一致性（Bounded Staleness）：保证读到的数据与最新版本的差距不超过 K 个版本</li>
<li>会话一致性（Session Consistency）：在一个会话内保证单调读，单调写，和读自己所写，会话之间不保证</li>
<li>前缀一致性：在每个会话内保证了单调读，但是不保证会话</li>
<li>客户端角度的四个一致性模型：写后读、单调读、单调写、读后写。这四个模型的视角都非常片面，通常被包含在前述的一致性模型中。</li>
</ul>
<p>更完整的关系树状图：<a href="https://jepsen.io/consistency" target="_blank" rel="noopener noreffer">Consistency Models</a></p>
<h2 id="二分布式系统的-base-与最终一致性" class="headerLink">
    <a href="#%e4%ba%8c%e5%88%86%e5%b8%83%e5%bc%8f%e7%b3%bb%e7%bb%9f%e7%9a%84-base-%e4%b8%8e%e6%9c%80%e7%bb%88%e4%b8%80%e8%87%b4%e6%80%a7" class="header-mark"></a>二、分布式系统的 BASE 与最终一致性</h2><p>BASE 理论：</p>
<ul>
<li><strong>基本可用 Basically Available</strong>：当分布式系统在出现不可预知的故障时，允许损失部分功能的可用性，保障核心功能的可用性
<ul>
<li>四种实现基本可用的手段：流量削峰、延迟响应、体验降级、过载保护</li>
</ul>
</li>
<li><strong>软状态 Soft state</strong>：在柔性事务中，允许系统存在中间状态，且这个中间状态不会影响系统整体可用性。比如，数据库读写分离，写库同步到读库（主库同步到从库）会有一个延时，其实就是一种柔性状态。</li>
<li><strong>最终一致性 Eventually consistent</strong>：前面已经说得很详细了，它指对系统的任何节点/进程，写操作完成后，后续的任何访问可能会拿到的值是不确定的，但经过有限的一段时间后，后续的任何访问都能读到新的值。</li>
</ul>
<p>ACID 与 BASE 实质上是分布式系统实现中的的两个极端：</p>
<ul>
<li>ACID 理论就如它的含义「<strong>酸</strong>」一样，是 CAP 原则中一致性的边界——<strong>最强的一致性</strong>，是牺牲掉 A 后达到 CP 的极致。</li>
<li>BASE 翻译过来就是「<strong>碱</strong>」，它是 CAP 原则中可用性的边界——<strong>最高的可用性，最弱的一致性</strong>，通过牺牲掉 C 来达到 AP 的极致。</li>
</ul>
<p>根据 CAP 理论，如果在分布式系统中实现了一致性，可用性必然受到影响。
比如，如果出现一个节点故障，则整个分布式事务的执行都是失败的。实际上，绝大部分场景对一致性要求没那么高，短暂的不一致是能接受的，另外，也基于可用性和并发性能的考虑，建议在开发实现分布式系统，<strong>如果不是必须，尽量不要实现事务，可以考虑采用最终一致性</strong>。</p>
<p>最终一致性的实现手段：</p>
<ul>
<li><strong>读时修复</strong>：在读取数据时，检测数据的不一致，进行修复</li>
<li><strong>写时修复</strong>：在写入数据时，检测数据的不一致，进行修复</li>
<li><strong>异步修复</strong>：这个是最常用的方式，通过定时对账，检测副本数据的一致性并修复</li>
</ul>
<p>在实现最终一致性的时候，还推荐同时实现自定义写一致性级别（比如 All、Quorum、One、Any），许多分布式数据库的最终一致性级别都是可调的。</p>
<p>但是随着 TiDB 等分布式关系数据库的兴起，分布式领域的 BASE 理论实际上正在被 ACID 赶超，ACID 焕发又一春了。</p>
<h2 id="三共识算法" class="headerLink">
    <a href="#%e4%b8%89%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95" class="header-mark"></a>三、共识算法</h2><p>共识算法，也被称为一致性协议，是指在分布式系统中多个节点之间对某个提案 Proposal（例如多个事务请求，先执行谁？）达成一致看法的一套流程。</p>
<p>提案的含义在分布式系统中十分宽泛，如多个事件发生的顺序、某个键对应的值、谁是主节点……等等。可以认为任何可以达成一致的信息都是一个提案。</p>
<p>对于分布式系统来讲，各个节点通常都是相同的确定性状态机模型（又称为状态机复制问题，State-Machine Replication），从相同初始状态开始接收相同顺序的指令，则可以保证相同的结果状态。因此，系统中多个节点最关键的是对多个事件的顺序进行共识，即排序。</p>
<p><strong>共识算法是达成数据一致性的一种手段，而且是数据强一致性的必要非充分条件</strong>。比如直接使用 Raft 算法，但是允许读取集群的任何节点，只能得到数据的最终一致性，还需要其他手段才能确保强一致性。</p>
<h3 id="拜占庭将军问题与拜占庭容错" class="headerLink">
    <a href="#%e6%8b%9c%e5%8d%a0%e5%ba%ad%e5%b0%86%e5%86%9b%e9%97%ae%e9%a2%98%e4%b8%8e%e6%8b%9c%e5%8d%a0%e5%ba%ad%e5%ae%b9%e9%94%99" class="header-mark"></a>拜占庭将军问题与拜占庭容错</h3><p>拜占庭错误是 1982 年兰伯特在《拜占庭将军问题》中提出的一个错误模型，描述了在少数节点不仅存在故障，还存在恶意行为的场景下，能否达成共识这样一个问题，论文描述如下：</p>
<blockquote>
<p>9 位拜占庭将军分别率领一支军队要共同围困一座城市，因为这座城市很强大，如果不协调统一将军们的行动策略，部分军队进攻、部分军队撤退会造成围困失败，因此各位将军必须通过投票来达成一致策略，要么一起进攻，要么一起撤退。</p>
<p>因为各位将军分别占据城市的一角，他们只能通过信使互相联系。在协调过程中每位将军都将自己投票“进攻”还是“撤退”的消息通过信使分别通知其他所有将军，这样一来每位将军根据自己的投票和其他将军送过来的投票，就可以知道投票结果，从而决定是进攻还是撤退。</p>
<p>而问题的复杂性就在于：将军中可能出现叛徒，他们不仅可以投票给错误的决策，还可能会选择性地发送投票。假设 9 位将军中有 1 名叛徒，8 位忠诚的将军中出现了 4 人投“进攻”，4 人投“撤退”，这时候叛徒可能故意给 4 名投“进攻”的将军投“进攻”，而给另外 4 名投“撤退”的将军投“撤退”。这样在 4 名投“进攻”的将军看来，投票是 5 人投“进攻”，从而发动进攻；而另外 4 名将军看来是 5 人投“撤退”，从而撤退。这样，一致性就遭到了破坏。</p>
<p>还有一种情况，因为将军之间需要通过信使交流，即便所有的将军都是忠诚的，派出去的信使也可能被敌军截杀，甚至被间谍替换，也就是说将军之间进行交流的信息通道是不能保证可靠性的。所以在没有收到对应将军消息的时候，将军们会默认投一个票，例如“进攻”。</p>
</blockquote>
<p>更一般地，在已知有 N 个将军谋反的情况下，其余 M 个忠诚的将军在不受叛徒的影响下能否达成共识？有什么样的前提条件，该如何达成共识？这就是拜占庭将军问题。</p>
<p>如果一个共识算法在一定条件下能够解决拜占庭将军问题，那我们就称这个算法是「<strong>拜占庭容错 Byzantine Fault Tolerance（BFT）</strong>」算法。
反之如果一个共识算法无法接受任何一个节点作恶，那它就被称为「<strong>非拜占庭容错 Crash Fault Tolerance (CFT)</strong>」算法。</p>
<p>可以通过简单穷举发现，二忠一叛是无法达成共识的，这个结论结合反证法可证明，<strong>拜占庭容错算法要求叛徒的比例必须低于 1/3</strong>。</p>
<h3 id="常用共识算法" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95" class="header-mark"></a>常用共识算法</h3><p>对于「<strong>非拜占庭容错 Crash Fault Tolerance (CFT)</strong>」的情况，已经存在不少经典的算法，包括 Paxos（1990 年）、Raft（2014 年）及其变种等。这类容错算法往往性能比较好，处理较快，容忍不超过一半的故障节点。</p>
<p>对于「<strong>拜占庭容错 Byzantine Fault Tolerance（BFT）</strong>」的情况，目前有 PBFT（Practical Byzantine Fault Tolerance，1999 年）为代表的确定性系列算法、PoW（1999 年）为代表的概率算法等算法可选。
确定性算法一旦达成共识就不可逆转，即共识是最终结果；
而概率类算法的共识结果则是临时的，随着时间推移或某种强化，共识结果被推翻的概率越来越小，最终成为事实上结果。
拜占庭类容错算法往往性能较差，容忍不超过 1/3 的故障节点。</p>
<p>此外，XFT（Cross Fault Tolerance，2015 年）等最近提出的改进算法可以提供类似 CFT 的处理响应速度，并能在大多数节点正常工作时提供 BFT 保障。
Algorand 算法（2017 年）基于 PBFT 进行改进，通过引入可验证随机函数解决了提案选择的问题，理论上可以在容忍拜占庭错误的前提下实现更好的性能（1000+ TPS）。</p>
<blockquote>
<p>注：实践中，对客户端来说要拿到共识结果需要自行验证，典型地，可访问足够多个服务节点来比对结果，确保获取结果的准确性。</p>
</blockquote>
<p>常见共识算法列举如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>拜占庭容错</th>
<th>一致性</th>
<th>性能</th>
<th>可用性（能容忍多大比例的节点出现故障）</th>
</tr>
</thead>
<tbody>
<tr>
<td>两阶段提交 2PC</td>
<td>否</td>
<td>强一致性</td>
<td>低</td>
<td>低</td>
</tr>
<tr>
<td>TCC(try-confirm-cancel)</td>
<td>否</td>
<td>最终一致性</td>
<td>低</td>
<td>低</td>
</tr>
<tr>
<td>Paxos</td>
<td>否</td>
<td>强一致性</td>
<td>中</td>
<td>中</td>
</tr>
<tr>
<td>ZAB</td>
<td>否</td>
<td>最终一致性</td>
<td>中</td>
<td>中</td>
</tr>
<tr>
<td>Raft</td>
<td>否</td>
<td>强一致性</td>
<td>中</td>
<td>中</td>
</tr>
<tr>
<td>Gossip</td>
<td>否</td>
<td>最终一致性</td>
<td>高</td>
<td>高</td>
</tr>
<tr>
<td>Quorum NWR</td>
<td>否</td>
<td>强一致性</td>
<td>中</td>
<td>中</td>
</tr>
<tr>
<td>PBFT</td>
<td>是</td>
<td>N/A</td>
<td>低</td>
<td>中</td>
</tr>
<tr>
<td>PoW</td>
<td>是</td>
<td>N/A</td>
<td>低</td>
<td>中</td>
</tr>
<tr>
<td>PoS</td>
<td>是</td>
<td>N/A</td>
<td>低</td>
<td>中</td>
</tr>
<tr>
<td><a href="https://medium.com/solana-labs/proof-of-history-explained-by-a-water-clock-e682183417b8" target="_blank" rel="noopener noreffer">PoH</a></td>
<td>是</td>
<td>N/A</td>
<td>中</td>
<td>中</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注：这里虽然列出了 PoW/PoS/PoH 等应用在区块链中的一致性算法，但是它们跟 PBFT 等其他拜占庭容错算法存在很大的区别，后面会给出介绍。</p>
</blockquote>
<h3 id="不同共识算法的应用场景" class="headerLink">
    <a href="#%e4%b8%8d%e5%90%8c%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95%e7%9a%84%e5%ba%94%e7%94%a8%e5%9c%ba%e6%99%af" class="header-mark"></a>不同共识算法的应用场景</h3><p>在不可信环境中，因为可能存在恶意行为，就需要使用支持拜占庭容错的共识算法如 PoW/PoS，使系统在存在部分节点作恶的情况下仍然能达成共识。这就是区块链使用 PoW/PoS 算法而不是 Paxos/Raft 算法的原因。</p>
<p>而在企业内网等场景下，可以认为是可信环境，基本不会出现恶意节点或者可以通过 mTLS 等手段进行节点身份认证，这种场景下系统具有故障容错能力就够了，就没必要做到拜占庭容错，因此常用 Raft/Paxos 等算法。</p>
<h3 id="非拜占庭错误共识算法-paxos-与-raft" class="headerLink">
    <a href="#%e9%9d%9e%e6%8b%9c%e5%8d%a0%e5%ba%ad%e9%94%99%e8%af%af%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95-paxos-%e4%b8%8e-raft" class="header-mark"></a>非拜占庭错误共识算法 Paxos 与 Raft</h3><p>受限于篇幅与笔者精力，这部分暂时跳过&hellip;后面可能会写篇新的文章专门介绍 Paxos/Raft 算法。</p>
<h3 id="能容忍拜占庭错误的-pow-概率共识算法" class="headerLink">
    <a href="#%e8%83%bd%e5%ae%b9%e5%bf%8d%e6%8b%9c%e5%8d%a0%e5%ba%ad%e9%94%99%e8%af%af%e7%9a%84-pow-%e6%a6%82%e7%8e%87%e5%85%b1%e8%af%86%e7%ae%97%e6%b3%95" class="header-mark"></a>能容忍拜占庭错误的 PoW 概率共识算法</h3><p>PoW 即 Proof of Work 工作量证明，指系统为达到某一目标而设置的度量方法。简单理解就是一份证明，用来确认你做过一定量的工作。
监测工作的整个过程通常是极为低效的，而通过对工作的结果进行认证来证明完成了相应的工作量，这个认证流程是非常简单高效的，这就是 PoW 的优势所在。</p>
<p>在 1993 年，<a href="http://www.wisdom.weizmann.ac.il/~naor/PAPERS/pvp.ps" target="_blank" rel="noopener noreffer">Cynthia Dwork 和 Moni Naor 设计了一个系统用于反垃圾邮件、避免资源被滥用</a>，这是 PoW 算法的雏形。其核心思想如下：</p>
<blockquote>
<p>The main idea is to require a user to compute a moderately hard but not intractable function in order to gain access to the resource, thus preventing frivolous use.</p>
</blockquote>
<p>翻译成中文：</p>
<blockquote>
<p>其主要思想是要求用户计算一个中等难度但不难处理的函数，以获得对资源的访问，从而防止（系统资源被）滥用。</p>
</blockquote>
<p>在 1999 年，<a href="https://link.springer.com/chapter/10.1007/978-0-387-35568-9_18" target="_blank" rel="noopener noreffer">Markus Jakobsson 与 Ari Juels 第一次从各种协议中提炼出 Proofs of Work 这个概念</a>。</p>
<p>POW 系统中一定有两个角色，工作者和验证者，他们需要具有以下特点：</p>
<ul>
<li>工作者需要完成的工作必须有一定的量，这个量由工作验证者给出。</li>
<li>验证者可以迅速的检验工作量是否达标。</li>
<li>工作者无法自己&quot;创造工作&quot;，必须由验证者发布工作。</li>
<li>工作者无法找到很快完成工作的办法。</li>
</ul>
<p>说到这里，我们对 PoW 应该有足够的理解了，它就是让工作者消耗一定的资源作为使用系统的成本。
对于正常的用户而言这部分被消耗的资源是完全可以接受的，但是对于恶意攻击者而言，它如果想滥用系统的资源或者发送海量的垃圾邮件，就需要消耗海量的计算资源作为成本，这样就极大地提升了攻击成本。</p>
<p>再总结下，PoW 算法的核心是<strong>它为信息发送加入了成本，降低了信息传递的速率</strong>。</p>
<p>把比特币区块链转换成拜占庭将军问题来看，它的思路是这样的：</p>
<ul>
<li>限制一段时间内提案的个数，只有拥有对应权限的节点（将军）可以发起提案。
<ul>
<li>这是通过 PoW 工作量证明实现的，比特币区块链要求节点进行海量的哈希计算作为<strong>获得提案权限的代价</strong>，算法难度每隔两周调整一次以保证整个系统找到正确 Hash 值的平均用时大约为 10 分钟。</li>
</ul>
</li>
<li>由强一致性放宽至最终一致性。
<ul>
<li>对应一次提案的结果不需要全部的节点马上跟进，只需要在节点能搜寻到的全网络中的所有链条中，选取最长的链条进行后续拓展就可以。</li>
</ul>
</li>
<li>使用非对称加密算法对节点间的消息传递提供签名技术支持，每个节点（将军）都有属于自己的秘钥（公钥私钥），唯一标识节点身份。
<ul>
<li>使用非对称加密算法传递消息，能够保证消息传递的私密性。而且消息签名不可篡改，这避免了消息被恶意节点伪造。</li>
</ul>
</li>
</ul>
<p>我们前面有给出一个结论：<strong>拜占庭容错算法要求叛徒的比例必须低于 1/3</strong>。</p>
<p>但是区块链与拜占庭将军问题的区别很大，举例如下：</p>
<ul>
<li>区块链允许任何节点随时加入或离开区块链，而拜占庭将军问题是预设了节点数，而且不考虑节点的添加或删除。</li>
<li>比特币区块链的 PoW 算法只能保证整个系统找到正确 Hash 值的<strong>平均用时</strong>大约为 10 分钟，那肯定就存在性能更好的节点用时更短，性能更差的节点用时更长，甚至某些节点运气好几秒钟就算出了结果，这都是完全可能的。而越早算出这个 Hash 值的节点，它的提案（区块）成为最长链条的概率就越大。</li>
<li>PoW 由强一致性放宽至最终一致性，系统总会选取最长的链进行后续拓展，那如果某个链条一开始不长，但是它的拓展速度足够快，它就能成为最长的链条。而拜占庭将军问题不允许任何分支，只存在一个结果！
<ul>
<li>只是受限于算力，随着时间的推移，短的链条追上最长链条的概率会越来越小。</li>
</ul>
</li>
</ul>
<p>总之因为区块链这样的特点，它会产生一些跟拜占庭容错算法不同的结果：</p>
<ul>
<li>攻击者拥有的节点数量占比是毫无意义的，核心是算力，也就对应着区块链中的提案权。
<ul>
<li>即使攻击者拥有了 99% 的节点，但是它的总体算力很弱的话，它的提案（区块）成为最长链条的概率也会很低。</li>
</ul>
</li>
<li><strong>区块链的 51% 攻击</strong>：因为「系统总是选取最长链条进行后续拓展」这个原则，只有某个攻击者拥有了超过 50% 算力的情况下，它才拥有绝对性的优势，使它的区块在一定时间后一定能成为最长的链条，并且始终维持这样一个优势，从而达成攻击目的。</li>
</ul>
<p>至于 PoW 算法的具体实现，以及它的替代算法 PoS/PoH 等新兴算法的原理与实现，将在后续的区块链系列文章中详细介绍，尽请期待&hellip;</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li>《Designing Data-Intensive Applications - The Big Ideas Behind Reliable, Scalable, and Maintainable Systems (Martin Kleppmann)》</li>
<li>极客时间《分布式数据库 30 讲》</li>
<li>极客时间《分布式协议与算法实战》</li>
<li><a href="https://zhuanlan.zhihu.com/p/34656939" target="_blank" rel="noopener noreffer">分布式存储系统的一致性是什么？- OceanBase</a></li>
<li><a href="https://pingcap.com/zh/blog/linearizability-and-raft" target="_blank" rel="noopener noreffer">线性一致性和 Raft - PingCAP</a></li>
<li><a href="https://int64.me/2020/%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%9E%8B%E7%AC%94%E8%AE%B0.html" target="_blank" rel="noopener noreffer">一致性模型笔记</a></li>
<li><a href="http://zhangtielei.com/posts/blog-distributed-strong-weak-consistency.html" target="_blank" rel="noopener noreffer">条分缕析分布式：浅析强弱一致性 -  张铁蕾</a></li>
<li><a href="https://cloud.google.com/blog/products/databases/why-you-should-pick-strong-consistency-whenever-possible" target="_blank" rel="noopener noreffer">Why you should pick strong consistency, whenever possible - Google Spanner</a></li>
<li><a href="https://www.infoq.cn/article/the-byzantine-generals-problem-and-blockchain" target="_blank" rel="noopener noreffer">拜占庭将军问题与区块链</a></li>
<li><a href="https://paper.seebug.org/1643/" target="_blank" rel="noopener noreffer">区块链协议安全系列— —当拜占庭将军犯错时，区块链共识还安全么？（上集）</a></li>
<li><a href="https://www.allthingsdistributed.com/2008/12/eventually_consistent.html" target="_blank" rel="noopener noreffer">Eventually Consistent - Revisited</a></li>
</ul>
]]></content></entry><entry><title type="html">Kubernetes 中的证书管理工具 - cert-manager</title><link href="https://thiscute.world/posts/kubernetes-cert-management/"/><id>https://thiscute.world/posts/kubernetes-cert-management/</id><author><name>ryan4yin</name></author><published>2022-07-31T15:11:46+08:00</published><updated>2022-07-31T15:11:46+08:00</updated><content type="html"><![CDATA[<p>我在之前的文章 <a href="https://thiscute.world/posts/about-tls-cert/" target="_blank" rel="noopener noreffer">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a> 中，介绍了如何使用 openssl 生成与管理各种用途的数字证书，也简单介绍了如何通过 certbot 等工具与 ACME 证书申请与管理协议，进行数字证书的申请与自动更新（autorenew）。</p>
<p>这篇文章要介绍的 cert-mangager，跟 certbot 这类工具有点类似，区别在于它是工作在 Kubernetes 中的。</p>
<p>cert-manager 是一个证书的自动化管理工具，用于在 Kubernetes 集群中自动化地颁发与管理各种来源、各种用途的数字证书。它将确保证书有效，并在合适的时间自动更新证书。</p>
<p>多的就不说了，证书相关的内容请参见我的 <a href="https://thiscute.world/posts/about-tls-cert/" target="_blank" rel="noopener noreffer">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a> 或者其他资料，现在直接进入正题。</p>
<blockquote>
<p>注：cert-manager 的管理对象是「证书」，如果你仅需要使用非对称加密的公私钥对进行 JWT 签名、数据加解密，可以考虑直接使用 <a href="https://thiscute.world/posts/expirence-of-vault/" target="_blank" rel="noopener noreffer">secrets 管理工具 Vault</a>.</p>
</blockquote>
<h2 id="一部署" class="headerLink">
    <a href="#%e4%b8%80%e9%83%a8%e7%bd%b2" class="header-mark"></a>一、部署</h2><blockquote>
<p><a href="https://cert-manager.io/docs/installation/helm/" target="_blank" rel="noopener noreffer">https://cert-manager.io/docs/installation/helm/</a></p>
</blockquote>
<p>官方提供了多种部署方式，使用 helm3 安装的方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看版本号</span>
</span></span><span class="line"><span class="cl">helm search repo jetstack/cert-manager -l <span class="p">|</span> head
</span></span><span class="line"><span class="cl"><span class="c1"># 下载并解压 chart，目的是方便 gitops 版本管理</span>
</span></span><span class="line"><span class="cl">helm pull jetstack/cert-manager --untar --version 1.8.2
</span></span><span class="line"><span class="cl">helm install <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  cert-manager ./cert-manager <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --namespace cert-manager <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --create-namespace <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  <span class="c1"># 这会导致使用 helm 卸载的时候会删除所有 CRDs，可能导致所有 CRDs 资源全部丢失！要格外注意</span>
</span></span><span class="line"><span class="cl">  --set <span class="nv">installCRDs</span><span class="o">=</span><span class="nb">true</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二创建-issuer" class="headerLink">
    <a href="#%e4%ba%8c%e5%88%9b%e5%bb%ba-issuer" class="header-mark"></a>二、创建 Issuer</h2><p>cert-manager 支持多种 issuer，你甚至可以通过它的标准 API 创建自己的 Issuer。</p>
<p>但是总的来说不外乎三种：</p>
<ul>
<li>由权威 CA 机构签名的「公网受信任证书」: 这类证书会被浏览器、小程序等第三方应用/服务商信任</li>
<li>本地签名证书: 即由本地 CA 证书签名的数字证书</li>
<li>自签名证书: 即使用证书的私钥为证书自己签名</li>
</ul>
<p>下面介绍下如何申请公网证书以及本地签名证书。</p>
<h3 id="1-通过权威机构创建公网受信证书" class="headerLink">
    <a href="#1-%e9%80%9a%e8%bf%87%e6%9d%83%e5%a8%81%e6%9c%ba%e6%9e%84%e5%88%9b%e5%bb%ba%e5%85%ac%e7%bd%91%e5%8f%97%e4%bf%a1%e8%af%81%e4%b9%a6" class="header-mark"></a>1. 通过权威机构创建公网受信证书</h3><p>通过权威机构创建的公网受信证书，可以直接应用在边界网关上，用于给公网用户提供 TLS 加密访问服务，比如各种 HTTPS 站点、API。
这是需求最广的一类数字证书服务。</p>
<p>cert-manager 支持两种申请公网受信证书的方式：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment" target="_blank" rel="noopener noreffer">ACME（Automated Certificate Management Environment (ACME) Certificate Authority server）</a>证书自动化申请与管理协议。</li>
<li><a href="https://cert-manager.io/docs/configuration/venafi/#creating-a-venafi-as-a-service-issuer" target="_blank" rel="noopener noreffer">venafi-as-a-service</a>: venafi 是一个证书的集中化管理平台，它也提供了 cert-manager 插件，可用于自动化申请 DigiCert/Entrust/GlobalSign/Let&rsquo;s Encrypt 四种类型的公网受信证书。</li>
</ul>
<p>这里主要介绍使用 ACMEv2 协议申请公网证书，支持使用此开放协议申请证书的权威机构有：</p>
<ul>
<li>免费服务
<ul>
<li>Let&rsquo;s Encrypt: 众所周知，它提供三个月有效期的免费证书。</li>
<li><a href="https://zerossl.com/documentation/acme/" target="_blank" rel="noopener noreffer">ZeroSSL</a>:  貌似也是一个比较有名的 SSL 证书服务
<ul>
<li>通过 ACME 协议支持不限数量的 90 天证书，也支持多域名证书与泛域名证书。</li>
<li>它提供了一个额外的 Dashboard 查看与管理所有申请的证书，这是比较方便的地方。</li>
</ul>
</li>
</ul>
</li>
<li>付费服务
<ul>
<li>DigiCert: 这个非常有名（但也是相当贵），官方文档 <a href="https://docs.digicert.com/certificate-tools/Certificate-lifecycle-automation-index/acme-user-guide/" target="_blank" rel="noopener noreffer">Digicert - Third-party ACME client automation</a></li>
<li>Google Public Authority(Google Trust Services): Google 推出的公网证书服务，也是三个月有效期，其根证书交叉验证了 GlobalSign，OCSP 服务器在国内速度也很快。
<ul>
<li>详见 <a href="https://github.com/acmesh-official/acme.sh/wiki/Google-Public-CA" target="_blank" rel="noopener noreffer">acme.sh/wiki/Google-Public-CA</a></li>
<li>此功能目前（2022-08-10）仍处于 beta 状态，需要提表单申请才能获得使用</li>
<li>官方地址：https://pki.goog/</li>
</ul>
</li>
<li>Entrust: 官方文档 <a href="https://www.entrust.com/knowledgebase/ssl/how-to-use-acme-to-install-ssl-tls-certificates-in-entrust-certificate-services-apache#step1" target="_blank" rel="noopener noreffer">Entrust&rsquo;s ACME implementation</a></li>
<li>GlobalSign: 官方文档 <a href="https://www.globalsign.com/en/acme-automated-certificate-management" target="_blank" rel="noopener noreffer">GlobalSign ACME Service</a></li>
</ul>
</li>
</ul>
<p>这里也顺便介绍下收费证书服务对证书的分级，以及该如何选用：</p>
<ul>
<li>Domain Validated（DV）证书
<ul>
<li><strong>仅验证域名所有权</strong>，验证步骤最少，价格最低，仅需要数分钟即可签发。</li>
<li>优点就是易于签发，很适合做自动化。</li>
<li>各云厂商（AWS/GCP/Cloudflare，以及 Vercel/Github 的站点服务）给自家服务提供的免费证书都是 DV 证书，Let&rsquo;s Encrypt 的证书也是这个类型。
<ul>
<li>很明显这些证书的签发都非常方便，而且仅验证域名所有权。</li>
<li>但是 AWS/GCP/Cloudflare/Vercel/Github 提供的 DV 证书都仅能在它们的云服务上使用，不提供私钥功能！</li>
</ul>
</li>
</ul>
</li>
<li>Organization Validated (OV) 证书
<ul>
<li>是企业 SSL 证书的首选，通过企业认证确保企业 SSL 证书的真实性。</li>
<li>除域名所有权外，CA 机构还会审核组织及企业的真实性，包括注册状况、联系方式、恶意软件等内容。</li>
<li>如果要做合规化，可能至少也得用 OV 这个级别的证书。</li>
</ul>
</li>
<li>Extended Validation（EV）证书
<ul>
<li>最严格的认证方式，CA 机构会深度审核组织及企业各方面的信息。</li>
<li>被认为适合用于大型企业、金融机构等组织或企业。</li>
<li>而且仅支持签发单域名、多域名证书，不支持签发泛域名证书，安全性杠杠的。</li>
</ul>
</li>
</ul>
<p>ACME 支持 HTTP01 跟 DNS01 两种域名验证方式，其中 DNS01 是最简便的方法。</p>
<p>下面以 AWS Route53 为例介绍如何申请一个 Let&rsquo;s Encrypt 证书。（其他 DNS 提供商的配置方式请直接看官方文档）</p>
<blockquote>
<p><a href="https://cert-manager.io/docs/configuration/acme/dns01/route53/" target="_blank" rel="noopener noreffer">https://cert-manager.io/docs/configuration/acme/dns01/route53/</a></p>
</blockquote>
<h4 id="11-aws-iam-授权" class="headerLink">
    <a href="#11-aws-iam-%e6%8e%88%e6%9d%83" class="header-mark"></a>1.1 AWS IAM 授权</h4><p>首先需要为 EKS 集群创建 OIDC provider，参见 <a href="https://github.com/ryan4yin/knowledge/blob/master/kubernetes/security/aws-iam-and-kubernetes.md" target="_blank" rel="noopener noreffer">aws-iam-and-kubernetes</a>，这里不再赘述。</p>
<p>cert-manager 需要查询与更新 Route53 记录的权限，因此需要使用如下配置创建一个 IAM Policy，可以命名为 <code>&lt;ClusterName&gt;CertManagerRoute53Access</code>（注意替换掉 <code>&lt;ClusterName&gt;</code>）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;Version&#34;</span><span class="p">:</span> <span class="s2">&#34;2012-10-17&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;Statement&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;Effect&#34;</span><span class="p">:</span> <span class="s2">&#34;Allow&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;Action&#34;</span><span class="p">:</span> <span class="s2">&#34;route53:GetChange&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;Resource&#34;</span><span class="p">:</span> <span class="s2">&#34;arn:aws:route53:::change/*&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;Effect&#34;</span><span class="p">:</span> <span class="s2">&#34;Allow&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;Action&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;route53:ChangeResourceRecordSets&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"> <span class="s2">&#34;route53:ListResourceRecordSets&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="p">],</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;Resource&#34;</span><span class="p">:</span> <span class="s2">&#34;arn:aws:route53:::hostedzone/*&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;Effect&#34;</span><span class="p">:</span> <span class="s2">&#34;Allow&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;Action&#34;</span><span class="p">:</span> <span class="s2">&#34;route53:ListHostedZonesByName&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">      <span class="nt">&#34;Resource&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>比如使用 awscli 创建此 policy：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">aws iam create-policy <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --policy-name XxxCertManagerRoute53Access <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --policy-document file://cert-manager-route53-access.json
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过上述配置创建一个 IAM Role 并自动给 cert-manager 所在的 EKS 集群添加信任关系：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CLUSTER_NAME</span><span class="o">=</span><span class="s2">&#34;xxx&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">AWS_ACCOUNT_ID</span><span class="o">=</span><span class="s2">&#34;112233445566&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 eksctl 自动创建对应的 role 并添加信任关系</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 需要先安装好 eksctl</span>
</span></span><span class="line"><span class="cl">eksctl create iamserviceaccount <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --cluster <span class="s2">&#34;</span><span class="si">${</span><span class="nv">CLUSTER_NAME</span><span class="si">}</span><span class="s2">&#34;</span> --name cert-manager --namespace cert-manager <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --role-name <span class="s2">&#34;</span><span class="si">${</span><span class="nv">CLUSTER_NAME</span><span class="si">}</span><span class="s2">-cert-manager-route53-role&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --attach-policy-arn <span class="s2">&#34;arn:aws:iam::</span><span class="si">${</span><span class="nv">AWS_ACCOUNT_ID</span><span class="si">}</span><span class="s2">:policy/&lt;ClusterName&gt;CertManagerRoute53Access&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --role-only <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --approve
</span></span></code></pre></td></tr></table>
</div>
</div><p>之后需要为 cert-manager 的 ServiceAccount 添加注解来绑定上面刚创建好的 IAM Role，首先创建如下 helm values 文件 <code>cert-manager-values.yaml</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 如果把这个改成 false，也会导致 cert-manager 的所有 CRDs 及相关资源被删除！</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">installCRDs</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">serviceAccount</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 注意修改这里的 ${AWS_ACCOUNT_ID} 以及 ${CLUSTER_NAME}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">eks.amazonaws.com/role-arn</span><span class="p">:</span><span class="w"> </span><span class="p">&gt;-</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      </span><span class="w">      </span><span class="l">arn:aws:iam::${AWS_ACCOUNT_ID}:role/${CLUSTER_NAME}-cert-manager-route53-role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 根据官方文档，还得修改下这个，允许 cert-manager 读取 ServiceAccount Token，从而获得授权</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">fsGroup</span><span class="p">:</span><span class="w"> </span><span class="m">1001</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后重新部署 cert-manager:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">helm upgrade -i cert-manager ./cert-manager -n cert-manager -f cert-manager-values.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样就完成了授权。</p>
<h4 id="12-创建-acme-issuer" class="headerLink">
    <a href="#12-%e5%88%9b%e5%bb%ba-acme-issuer" class="header-mark"></a>1.2 创建 ACME Issuer</h4><p>在 xxx 名字空间创建一个 Iusser：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Issuer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">acme</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 用于接受域名过期提醒的邮件地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">email</span><span class="p">:</span><span class="w"> </span><span class="l">user@example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ACME 服务器，比如 let&#39;s encrypt、Digicert 等</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># let&#39;s encrypt 的测试 URL，可用于测试配置正确性</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">server</span><span class="p">:</span><span class="w"> </span><span class="l">https://acme-staging-v02.api.letsencrypt.org/directory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># let&#39;s encrypt 的正式 URL，有速率限制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># server: https://acme-v02.api.letsencrypt.org/directory</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 用于存放 ACME 账号私钥的 Secret 名称，Issuer 创建时会自动生成此 secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">privateKeySecretRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-staging</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># DNS 验证设置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">solvers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 在有多个 solvers 的情况下，会根据每个 solvers 的 selector 来确定优先级，选择其中合适的 solver 来处理证书申请事件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 以 dnsZones 为例，越长的 Zone 优先级就越高</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 比如在为 www.sys.exapmle.com 申请证书时，sys.example.org 的优先级就比 example.org 更高</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">dnsZones</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="s2">&#34;example.org&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">dns01</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 使用 route53 进行验证</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">route53</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">region</span><span class="p">:</span><span class="w"> </span><span class="l">us-east-1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># cert-manager 已经通过 ServiceAccount 绑定了 IAM Role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 这里不需要补充额外的 IAM 授权相关信息！</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="13-通过-acme-创建证书以及问题排查" class="headerLink">
    <a href="#13-%e9%80%9a%e8%bf%87-acme-%e5%88%9b%e5%bb%ba%e8%af%81%e4%b9%a6%e4%bb%a5%e5%8f%8a%e9%97%ae%e9%a2%98%e6%8e%92%e6%9f%a5" class="header-mark"></a>1.3 通过 ACME 创建证书以及问题排查</h4><blockquote>
<p><a href="https://cert-manager.io/docs/usage/certificate/#creating-certificate-resources" target="_blank" rel="noopener noreffer">https://cert-manager.io/docs/usage/certificate/#creating-certificate-resources</a></p>
</blockquote>
<p>使用如下配置创建证书，并将证书保存到指定的 Secret 中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Certificate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example-com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Secret names are always required.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Istio Gateway/Ingress/Gateway API 都可以通过直接引用这个 secret 来添加 TLS 加密。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">tls-example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># secretTemplate is optional. If set, these annotations and labels will be</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># copied to the Secret named tls-example.com. These labels and annotations will</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># be re-reconciled if the Certificate&#39;s secretTemplate changes. secretTemplate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># is also enforced, so relevant label and annotation changes on the Secret by a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># third party will be overwriten by cert-manager to match the secretTemplate.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">secretTemplate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">my-secret-annotation-1</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;foo&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">my-secret-annotation-2</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;bar&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">my-secret-label</span><span class="p">:</span><span class="w"> </span><span class="l">foo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">duration</span><span class="p">:</span><span class="w"> </span><span class="l">2160h</span><span class="w"> </span><span class="c"># 90d</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">renewBefore</span><span class="p">:</span><span class="w"> </span><span class="l">360h</span><span class="w"> </span><span class="c"># 15d</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.CertificatePrivateKey</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">privateKey</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">algorithm</span><span class="p">:</span><span class="w"> </span><span class="l">ECDSA </span><span class="w"> </span><span class="c"># RSA/ECDSA/Ed25519，其中 RSA 应用最广泛，Ed25519 被认为最安全</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">encoding</span><span class="p">:</span><span class="w"> </span><span class="l">PKCS1 </span><span class="w"> </span><span class="c"># 对于 TLS 加密，通常都用 PKCS1 格式</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="m">256</span><span class="w">  </span><span class="c"># RSA 默认为 2048，ECDSA 默认为 256，而 Ed25519 不使用此属性！</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">rotationPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Always </span><span class="w"> </span><span class="c"># renew 时总是重新创建新的私钥</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># The use of the common name field has been deprecated since 2000 and is</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># discouraged from being used.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">commonName</span><span class="p">:</span><span class="w"> </span><span class="l">example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># At least one of a DNS Name, URI, or IP address is required.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">dnsNames</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="s1">&#39;*.example.com&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">isCA</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">usages</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">server auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">client auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># uris:  # 如果想在证书的 subjectAltNames 中添加 URI，就补充在这里</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   - spiffe://cluster.local/ns/sandbox/sa/example</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># ipAddresses:  # 如果想在证书的 subjectAltNames 添加 ip 地址，就补充在这里</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">#   - 192.168.0.5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">subject</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 证书的补充信息</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 字段索引：https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.X509Subject</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">organizations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Issuer references are always required.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">issuerRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">letsencrypt-prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># We can reference ClusterIssuers by changing the kind here.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># The default value is Issuer (i.e. a locally namespaced Issuer)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Issuer</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This is optional since cert-manager will default to this value however</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># if you are using an external issuer, change this to that issuer group.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">group</span><span class="p">:</span><span class="w"> </span><span class="l">cert-manager.io</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>部署好 Certificate 后，describe 它就能看到当前的进度：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Events: 
</span></span><span class="line"><span class="cl">  Type    Reason     Age   From    Message 
</span></span><span class="line"><span class="cl">  ----    ------     ----  ----    ------- 
</span></span><span class="line"><span class="cl">  Normal  Issuing    117s  cert-manager-certificates-trigger   Issuing certificate as Secret does not exist      
</span></span><span class="line"><span class="cl">  Normal  Generated  116s  cert-manager-certificates-key-manager      Stored new private key in temporary Secret resource &#34;example.com-f044j&#34;     
</span></span><span class="line"><span class="cl">  Normal  Requested  116s  cert-manager-certificates-request-manager  Created new CertificateRequest resource &#34;example.com-unv3d&#34;   
</span></span><span class="line"><span class="cl">  Normal  Issuing    20s   cert-manager-certificates-issuing   The certificate has been successfully issued
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果发现证书长时间未 Ready，可以参照<a href="https://cert-manager.io/docs/faq/acme/" target="_blank" rel="noopener noreffer">官方文档 - Troubleshooting Issuing ACME Certificates</a>，按证书申请流程进行逐层排查：</p>
<ul>
<li>首先 cert-manager 发现 Certificate 描述的 Secret 不存在，于是启动证书申请流程</li>
<li>首先生成私钥，存放在一个临时 Secret 中</li>
<li>然后通过私钥以及 Certificate 资源中的其他信息，生成 CSR 证书申请请求文件
<ul>
<li>这也是一个 CRD 资源，可以通过 <code>kubectl get csr -n xxx</code> 查看</li>
</ul>
</li>
<li>接着将 CSR 文件提交给 ACME 服务器，申请权威机构签发证书
<ul>
<li>这对应 CRD 资源 <code>kubectl get order</code></li>
</ul>
</li>
<li>对于上述 ACME 证书申请流程，Order 实际上会生成一个 DNS1 Challenge 资源
<ul>
<li>可以通过 <code>kubectl get challenge</code> 检查此资源</li>
</ul>
</li>
<li>challenge 验证通过后会逐层往回走，前面的 Order CSR 状态都会立即变成 valid</li>
<li>最终证书签发成功，Certificate 状态变成 Ready，所有 Order CSR challenge 资源都被自动清理掉。</li>
</ul>
<h4 id="14-通过-csi-driver-创建证书" class="headerLink">
    <a href="#14-%e9%80%9a%e8%bf%87-csi-driver-%e5%88%9b%e5%bb%ba%e8%af%81%e4%b9%a6" class="header-mark"></a>1.4 通过 csi-driver 创建证书</h4><blockquote>
<p><a href="https://cert-manager.io/docs/projects/csi-driver/" target="_blank" rel="noopener noreffer">https://cert-manager.io/docs/projects/csi-driver/</a></p>
</blockquote>
<p>直接使用 <code>Certificate</code> 资源创建的证书，会被存放在 Kubernetes Secrets 中，被认为并非足够安全。
而 cert-manager csi-driver 则避免了这个缺陷，具体而言，它提升安全性的做法有：</p>
<ul>
<li>确保私钥仅保存在对应的节点上，并挂载到对应的 Pod，完全避免私钥被通过网络传输。</li>
<li>应用的每个副本都使用自己生成的私钥，并且能确保在 Pod 的生命周期中证书跟私钥始终存在。</li>
<li>自动 renew 证书</li>
<li>副本被删除时，证书就会被销毁</li>
</ul>
<p>总的说 csi-driver 主要是用来提升安全性的，有需要可以自己看文档，就不多介绍了。</p>
<h3 id="2-通过私有-ca-颁发证书" class="headerLink">
    <a href="#2-%e9%80%9a%e8%bf%87%e7%a7%81%e6%9c%89-ca-%e9%a2%81%e5%8f%91%e8%af%81%e4%b9%a6" class="header-mark"></a>2. 通过私有 CA 颁发证书</h3><p>Private CA 是一种企业自己生成的 CA 证书，通常企业用它来构建自己的 PKI 基础设施。</p>
<p>在 TLS 协议这个应用场景下，Private CA 颁发的证书仅适合在企业内部使用，必须在客户端安装上这个 CA 证书，才能正常访问由它签名的数字证书加密的 Web API 或者站点。<strong>Private CA 签名的数字证书在公网上是不被信任的</strong>！</p>
<p>cert-manager 提供的 Private CA 服务有：</p>
<ul>
<li><a href="https://cert-manager.io/docs/configuration/vault/" target="_blank" rel="noopener noreffer">Vault</a>: 鼎鼎大名了，Vault 是一个密码即服务工具，可以部署在 K8s 集群中，提供许多密码、证书相关的功能。
<ul>
<li>开源免费</li>
</ul>
</li>
<li><a href="https://github.com/cert-manager/aws-privateca-issuer" target="_blank" rel="noopener noreffer">AWS Certificate Manager Private CA</a>: 跟 Vault 的 CA 功能是一致的，区别是它是托管的，由 AWS 负责维护。
<ul>
<li>每个 Private CA 证书：$400/month</li>
<li>每个签发的证书（仅读取了私钥及证书内容后才会收费）：按梯度一次性收费，0-1000 个以内是 $0.75 每个</li>
</ul>
</li>
<li>其他的自己看文档&hellip;</li>
</ul>
<p>这个因为暂时用不上，所以还没研究，之后有研究再给补上。</p>
<p>TO BE DONE.</p>
<h2 id="三cert-manager-与-istioingress-等网关集成" class="headerLink">
    <a href="#%e4%b8%89cert-manager-%e4%b8%8e-istioingress-%e7%ad%89%e7%bd%91%e5%85%b3%e9%9b%86%e6%88%90" class="header-mark"></a>三、cert-manager 与 istio/ingress 等网关集成</h2><p>cert-manager 提供的 <code>Certificate</code> 资源，会将生成好的公私钥存放在 Secret 中，而 Istio/Ingress 都支持这种格式的 Secret，所以使用还是挺简单的。</p>
<p>以 Istio Gateway 为例，直接在 Gateway 资源上指定 Secret 名称即可：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Gateway</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">example-gateway</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">istio</span><span class="p">:</span><span class="w"> </span><span class="l">ingressgateway</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">servers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">HTTP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">product.example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">httpsRedirect</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># sends 301 redirect for http requests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">8443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">https</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">HTTPS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tls</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mode</span><span class="p">:</span><span class="w"> </span><span class="l">SIMPLE</span><span class="w"> </span><span class="c"># enables HTTPS on this port</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">credentialName</span><span class="p">:</span><span class="w"> </span><span class="l">tls-example.com</span><span class="w"> </span><span class="c"># This should match the Certificate secretName</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">product.example.com</span><span class="w"> </span><span class="c"># This should match a DNS name in the Certificate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">VirtualService</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">product</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">product.example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">gateways</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">example-gateway</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">http</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">route</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">destination</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">product</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">port</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">number</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Service</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">product</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">product</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">grpc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">9090</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">9090</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">http</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">protocol</span><span class="p">:</span><span class="w"> </span><span class="l">TCP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">product</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sessionAffinity</span><span class="p">:</span><span class="w"> </span><span class="l">None</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">networking.istio.io/v1alpha3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">DestinationRule</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">product</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">host</span><span class="p">:</span><span class="w"> </span><span class="l">product</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 定义了两个 subset</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">subsets</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">v2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 其他 deployment 等配置</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>之后再配合 VirtualService 等资源，就可以将 Istio 跟 cert-manager 结合起来啦。</p>
<h2 id="四将-cert-manager-证书挂载到自定义网关中" class="headerLink">
    <a href="#%e5%9b%9b%e5%b0%86-cert-manager-%e8%af%81%e4%b9%a6%e6%8c%82%e8%bd%bd%e5%88%b0%e8%87%aa%e5%ae%9a%e4%b9%89%e7%bd%91%e5%85%b3%e4%b8%ad" class="header-mark"></a>四、将 cert-manager 证书挂载到自定义网关中</h2><blockquote>
<p>注意，千万别使用 <code>subPath</code> 挂载，根据<a href="https://kubernetes.io/docs/concepts/configuration/secret/#mounted-secrets-are-updated-automatically" target="_blank" rel="noopener noreffer">官方文档</a>，这种方式挂载的 Secret 文件不会自动更新！</p>
</blockquote>
<p>既然证书被存放在 Secret 中，自然可以直接当成数据卷挂载到 Pods 中，示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">nginx:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tls-example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;/certs/example.com&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">readOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tls-example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secret</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="l">tls-example.com</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">optional</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="c"># default setting; &#34;mysecret&#34; must exist</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于 nginx 而言，可以简单地搞个 sidecar 监控下，有配置变更就 reload 下 nginx，实现证书自动更新。</p>
<p>或者可以考虑直接写个 k8s informer 监控 secret 的变更，有变更就直接 reload 所有 nginx 实例，总之实现的方式有很多种。</p>
<h2 id="五注意事项" class="headerLink">
    <a href="#%e4%ba%94%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="header-mark"></a>五、注意事项</h2><p>服务端 TLS 协议的配置有许多的优化点，有些配置对性能的提升是很明显的，建议自行网上搜索相关资料，这里仅列出部分相关信息。</p>
<h3 id="ocsp-证书验证协议会大幅拖慢-https-协议的响应速度" class="headerLink">
    <a href="#ocsp-%e8%af%81%e4%b9%a6%e9%aa%8c%e8%af%81%e5%8d%8f%e8%ae%ae%e4%bc%9a%e5%a4%a7%e5%b9%85%e6%8b%96%e6%85%a2-https-%e5%8d%8f%e8%ae%ae%e7%9a%84%e5%93%8d%e5%ba%94%e9%80%9f%e5%ba%a6" class="header-mark"></a>OCSP 证书验证协议会大幅拖慢 HTTPS 协议的响应速度</h3><p>如果客户端直接通过 OCSP 协议去请求 CA 机构的 OCSP 服务器验证证书状态，那么 CA 机构的 OCSP 站点本身的性能就会对站点的 HTTPS 访问速度产生很大的影响。</p>
<p>解决方法：</p>
<ul>
<li>HTTPS 服务器一定要启用 OCSP stapling 功能，它使服务器提前访问 OCSP 获取证书状态信息并缓存到本地，
<ul>
<li>在客户端使用 TLS 协议访问时，直接在握手阶段将缓存的 OCSP 信息发送给客户端，这样就完成了证书状态的校验。</li>
<li>因为 OCSP 信息会带有 CA 证书的签名及有效期，服务端不可能伪造它，这样也能确保安全性。</li>
</ul>
</li>
<li>选用 ocsp 服务器在目标用户区域速度快的 CA 机构签发证书。</li>
</ul>
]]></content></entry><entry><title type="html">Death Is But a Dream</title><link href="https://thiscute.world/posts/death-is-but-a-dream/"/><id>https://thiscute.world/posts/death-is-but-a-dream/</id><author><name>ryan4yin</name></author><published>2022-05-24T02:17:00+08:00</published><updated>2022-05-24T02:17:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>我并不知道何时才是死期，<br>
却日日问自己，<br>
会不会有幽灵来牵我的手，<br>
引我一路向西？<br>
可他们看到的光明又在哪里？<br>
会不会也为我亮起？<br>
这一切快来吧，我已等不及！<br>
——《红色地带的沉思》 by 临终患者 Patricia</p>
</blockquote>
<p>我最近在看一本书，《在生命的尽头拥抱你-临终关怀医生手记》，它的英文原名即本文的标题。
李白在《春夜宴从弟桃花园序》中写「而浮生若梦，为欢几何？」，仿照下文法，本文的标题「Death Is But a Dream」大概可以直译成「临终若梦」，跟此书的中文版名称有些不同的韵味在。</p>
<p>这书讲的是死亡的过程——临终梦境。
随着年龄渐长，老一辈们慢慢老去，我们都不可避免地会越来越多地接触到死亡。
这世间轮替更迭，爱恨情仇是不变的主题，但是死亡始终是配角，实在是因为每人一生都只有唯一一次机会去真正体味死亡，难有实感。
而且死亡往往代表着终结，我们做为生者，当然更向往书写生者的世界。</p>
<p>救人一命胜造七级浮屠，珍爱生命是我们从小到大被教育的思想。
但是这样的思想却也造成了许多悲剧，全世界有许多的患者痛苦不堪地活在世上，求死不能，最终在病魔的折磨下凄惨离世，如果我们能谨慎承认「死亡」的价值，从这个角度看也是拯救了许多的患者与家庭。</p>
<p>而关于死亡，在我亲身经历的几次长辈葬礼中，我发现父辈们对死亡大都看得很开，他们说「人总有一死，老人家过世了我们当子女的肯定要送最后一程，但是不需要想太多，魂归天地罢了。」，我佩服这种豁达。</p>
<p>但是说到临终梦境，我是真的没什么了解。
我从来没跟长辈交流过生命末期的梦境，脑海中也挖掘不出相关的记忆。
送走我爷爷的时候，看着爷爷因为呼吸困难而大口喘气，堂哥跪在我前面，双眼泛红隐含泪光，但我完全没有实感——一切都显得那么不真实。
听着爷爷被痰堵塞气管、艰难的呼吸声，我甚至感到害怕，想要逃离。</p>
<p>爷爷过世后，奶奶就是一个人生活了，一个人起居、一个人给菜苗松土，然后在菜地里不小心跌了一跤，就随着爷爷去了。</p>
<p>我后来在爷爷奶奶房里一个壁橱上，找到三四枚铜钱，还沾着泥土，有些锈蚀痕迹。
我把其中一枚通宝红线串好，贴身带了好几年，心情不好的时候就凝视着这枚铜钱黯然神伤，心情好的时候也要捂着它入睡。</p>
<p>我还喜欢上了戏曲，缠着同学读了她的《中国戏剧史》。
大学的时候又喜欢上越剧，吴侬软语。
又因为初中时学过点竹笛，喜欢上了传统乐曲，我对一些经典老歌也情有独钟。
在很多同学跟同事的眼中，我的音乐品味是很「独特」的，这或许都源自爷爷奶奶的熏陶。
实际上我小的时候并不喜欢戏剧，我跟爷爷奶奶去看庙戏的目的，通常都只是为了吃一碗凉粉，或者为了去玩耍、看个热闹。偶尔去爷爷奶奶家玩，也只是觉得他们太孤单了，跟他们随便聊聊天，实际上这么多年，跟爷爷奶奶看过的戏曲，我就没听懂过几句台词。</p>
<p>那是多少年前了呢？只知道是很多年前了，不仔细回忆回忆、掐指算算，都搞不清具体过了多少年月。
这么多个日日夜夜里，我幼稚过、热血过，也迷茫过、颓废过，倒也不算庸庸碌碌，我还是知足的，这种心态貌似是被称作现充 emmm</p>
<p>高三时曾经看过一本超级喜欢的励志书，这么多年来我一直带在身边，名字叫《这一生再也不会有的奇遇》。书的扉页只有一句话：「当明天再也不是无限，你还会像今天一样度过你的人生吗？」</p>
<figure><img src="/images/death-is-but-a-dream/an-adventure-that-will-never-happen-again-in-this-life_cover.webp"/><figcaption>
            <h4>《这一生再也不会有的奇遇》已陪我度过了七八个春秋</h4>
        </figcaption>
</figure>

<figure><img src="/images/death-is-but-a-dream/an-adventure-that-will-never-happen-again-in-this-life_title-page.webp"/><figcaption>
            <h4>当明天再也不是无限</h4>
        </figcaption>
</figure>

<p>写到这儿，我又想起我高中时还看过一本书《刺猬的优雅》，它同样陪伴我度过了四年大学岁月，后来又辗转到了深圳，但现在倒是不在身边。书中有几句话我印象深刻，放在这篇文章里也挺应景的：</p>
<blockquote>
<p>话又说回来，不能因为有想死的心，往后就要像烂菜帮一样的过日子，甚至应该完全相反。</p>
</blockquote>
<blockquote>
<p>重要的不是死亡，而是在死亡的那一刻我们在做什么。<br>
我在做什么呢？<br>
我曾遇到一个人，而且我正准备爱上他。</p>
</blockquote>
<p>随意写下这些文字，脑子里各种想法恣意流淌，我打算提前写写我的临终遗言，把一切都准备好。</p>
<p>但在死亡到来之前，我仍要精彩的活！</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://book.douban.com/subject/35435120/" target="_blank" rel="noopener noreffer">《在生命的尽头拥抱你-临终关怀医生手记》</a></li>
<li><a href="https://www.youtube.com/watch?v=vh-nacCekR4" target="_blank" rel="noopener noreffer">Death Is But A Dream (2021) Official trailer</a></li>
<li><a href="https://www.youtube.com/watch?v=rbnBe-vXGQM" target="_blank" rel="noopener noreffer">I See Dead People: Dreams and Visions of the Dying | Dr. Christopher Kerr | TEDxBuffalo</a></li>
<li><a href="https://www.drchristopherkerr.com/tools" target="_blank" rel="noopener noreffer">End-of-Life Experiences - Dr. Christopher Kerr</a></li>
<li><a href="https://www.zhihu.com/question/21174281/answer/122969510" target="_blank" rel="noopener noreffer">有谁看过《刺猬的优雅》这本书吗？如何？ - 於清樂</a></li>
<li><a href="https://www.zhihu.com/question/52078970/answer/128900485" target="_blank" rel="noopener noreffer">有什么人生中值得一读的小说或名著？（最好现代作家的书）？ - 於清樂</a></li>
</ul>
]]></content></entry><entry><title type="html">NAT 网关、NAT 穿越以及虚拟网络</title><link href="https://thiscute.world/posts/about-nat/"/><id>https://thiscute.world/posts/about-nat/</id><author><name>ryan4yin</name></author><published>2022-05-13T11:46:00+08:00</published><updated>2022-05-13T11:46:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，不一定正确&hellip;</p>
</blockquote>
<blockquote>
<p>当前文章完成度 - 70%</p>
</blockquote>
<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>NAT，即 Network Address Translation，是 IPv4 网络中非常重要的一个功能，用于执行 IP 地址与端口的转换。</p>
<p>IPv4 的设计者没预料到因特网技术的发展会如此之快，在设计时只使用了 32bits 的地址空间，随着因特网的飞速发展，它很快就变得不够用了。
后来虽然设计了新的 IPv6 协议，但是它与 IPv4 不兼容，需要新的硬件设备以及各种网络程序支持，无法快速普及。</p>
<p>NAT 就是在 IPv6 普及前，临时解决 IPv4 地址空间不够用而开发的技术，通俗地讲 NAT 就是用来给 IPv4 续命的。它解决 IPv4 地址短缺问题的方法是：</p>
<ul>
<li>每个家庭、组织、企业，在内部都使用局域网通讯，不占用公网 IPv4 资源</li>
<li>在局域网与上层网络的交界处（路由器），使用 NAT 技术进行 IP/port 转换，使用户能正常访问上层网络</li>
</ul>
<p>在曾经 IPv4 地址还不是特别短缺的时候，普通家庭的网络架构通常是：「家庭局域网」=&gt;「NAT 网关（家庭路由器）」=&gt;「因特网」。</p>
<p>但是互联网主要发展于欧美，因此许多欧美的组织与机构在初期被分配了大量的 IPv4 资源，而后入场的中国分配到的 IPv4 地址就不太能匹配上我们的人口。
因此相比欧美，中国的 IPv4 地址是非常短缺的，即使使用上述这样的网络架构——也就是给每个家庭（或组织）分配一个 IPv4 地址——都有点捉襟见肘了。
于是中国电信等运营商不得不再加一层 NAT，让多个家庭共用同一个 IP 地址，这时网络架构会变成这样：「家庭局域网」=&gt;「NAT 网关（家庭路由器）」=&gt;「广域网（由 ISP 管理）」=&gt;「NAT 网关」=&gt;「因特网」。</p>
<p>总的来说，NAT 是一项非常成功的技术，它成功帮 IPv4 续命了几十年，甚至到如今 2022 年，全球网络仍然是 IPv4 的天下。</p>
<h2 id="nat-如何工作" class="headerLink">
    <a href="#nat-%e5%a6%82%e4%bd%95%e5%b7%a5%e4%bd%9c" class="header-mark"></a>NAT 如何工作</h2><p>NAT 的工作方式，使用图例描述是这样的：</p>
<figure><img src="/images/about-nat/NAT-demo.webp"/><figcaption>
            <h4>NAT 示例</h4>
        </figcaption>
</figure>

<p>从外部网络看一个 NAT 网关（一个启用了 NAT 的路由器），它只是拥有一个 IPv4 地址的普通设备，所有从局域网发送到公网的流量，其 IP 地址都是这个路由器的 WAN IP 地址，在上图中，这个 IP 地址是 <code>138.76.29.7</code>.</p>
<p>本质上，NAT 网关隐藏了家庭网络的细节，从外部网络上看，整个家庭网络就像一台普通的网络设备。</p>
<p>下面我们会学习到，上述这个 NAT 工作方式实际上是 NAPT，它同时使用 L3/L4 的信息进行地址转换工作。</p>
<h2 id="nat-的地址映射方式" class="headerLink">
    <a href="#nat-%e7%9a%84%e5%9c%b0%e5%9d%80%e6%98%a0%e5%b0%84%e6%96%b9%e5%bc%8f" class="header-mark"></a>NAT 的地址映射方式</h2><p>NAT 的具体实现有许多的变种，不存在统一的规范，但是大体上能分为两种模型：「一对一 NAT」与「一对多 NAT」，下面分别进行介绍。</p>
<h3 id="1-一对一-nat" class="headerLink">
    <a href="#1-%e4%b8%80%e5%af%b9%e4%b8%80-nat" class="header-mark"></a>1. 一对一 NAT</h3><p>一对一 NAT，这种类型的 NAT 在 <a href="https://datatracker.ietf.org/doc/html/rfc2663" target="_blank" rel="noopener noreffer">RFC2663</a> 中被称为  Basic NAT。
它在技术上比较简单，只利用网络层的信息，对 IP 地址进行转换。</p>
<p>简单的说，Basic NAT 要求每个内网 IP 都需要绑定一个唯一的公网 IP，才能连通外部网络。</p>
<p>其<strong>主要应用场景是，公网用户需要访问到内网主机</strong>。</p>
<p>Basic NAT 有三种类型：「<strong>静态 NAT</strong>」、「<strong>动态 NAT</strong>」以及「<strong>NAT Server</strong>」。</p>
<p>现在的很多家庭路由器都自带一个被称为 DMZ 主机的功能，它是「Demilitarized Zone」的缩写，意为隔离区。
它允许将某一台内网主机设置为 DMZ 主机（或者叫隔离区主机，仅此主机可供外网访问），所有从外部进来的流量，都会被通过 Basic NAT 修改为对应的内网 IP 地址，然后直接发送到该主机。
路由器的这种 DMZ 技术就是「静态 NAT」，因为 DMZ 主机对应的内网 IP 需要手动配置，不会动态变化。</p>
<figure><img src="/images/about-nat/dmz-host-topology.webp"/><figcaption>
            <h4>DMZ 主机拓扑结构</h4>
        </figcaption>
</figure>

<p>而「<strong>动态 NAT</strong>」则需要一个公网 IP 地址池，每次用户需要访问公网时，动态 NAT 会给它分配一个动态公网 IP 并自动配置相应的 NAT 规则，使用完再回收。</p>
<p>第三种是「<strong>NAT Server</strong>」，云服务商提供的「<strong>公网 IP</strong>」就是通过「<strong>NAT Server</strong>」实现的，在云服务器中使用 <code>ip addr ls</code> 查看你会发现，该主机上实际只配了局域网 IP 地址，但是它却能正常使用公网 IP 通信，原因就是云服务商在「<strong>NAT Server</strong>」上为这些服务器配置了 IP 转发规则。
为一台云服务器绑定一个公网 IP，实际上就是请求「<strong>NAT Server</strong>」从公网 IP 地址池中取出一个，并配置对应的 NAT 规则到这台云服务器的局域网 IP。</p>
<p>示例如下，其中的 Internet Gateway 实际上就是个一对一 NAT Server：</p>
<figure><img src="/images/about-nat/aws-vpc-nat-internet-gateway.webp"/><figcaption>
            <h4>AWS VPC 中的 NAT 网关以及 Internet 网关</h4>
        </figcaption>
</figure>

<blockquote>
<p>云服务 VPC 中的公有子网，实际上就是一个 DMZ(Demilitarized Zone) 隔离区，是不安全的。而私有子网则是安全区，公网无法直接访问到其中的主机。</p>
</blockquote>
<p>而「动态 NAT」则需要路由器维护一个<strong>公网 IP 地址池</strong>，内网服务器需要访问公网时，动态 NAT 就从地址池中拿出一个公网 IP 给它使用，用完再回收。
这种场景需要一个公网 IP 地址池，每当内部有服务需要请求外网时，就动态地为它分配一个公网 IP 地址，使用完再回收。</p>
<p>Basic NAT 的好处是，它仅工作在 L3 网络层，网络层上的协议都可以正常使用（比如 P2P），不需要啥「内网穿越」技术。</p>
<h3 id="2-一对多-nat---napt" class="headerLink">
    <a href="#2-%e4%b8%80%e5%af%b9%e5%a4%9a-nat---napt" class="header-mark"></a>2. 一对多 NAT - NAPT</h3><p>一对多 NAT，也被称为 NAPT（network address and port translation），同样在 <a href="https://datatracker.ietf.org/doc/html/rfc2663#section-4.0" target="_blank" rel="noopener noreffer">RFC2663</a> 中被定义。Easy IP 是 NAPT 的一个特殊形式。</p>
<p><strong>NAPT 的主要应用场景是，内网用户需要访问到公网主机</strong>。绝大多数的家庭网络、办公网络都是 NAPT 类型的。
原因应该很好理解——家庭网络或办公网络都包含许多联网设备，但是这类网络通常只有一个或数个公网 IP，使用一对一 NAT 的话公网 IP 显然是不够用的，所以需要使用一对多 NAT.</p>
<p>NAPT 通过同时利用 L3 的 IP 信息，以及 L4 传输层的端口信息，来为局域网设备提供透明的、配置方便的、支持超高并发连接的外部网络通信，示意图如下：</p>
<figure><img src="/images/about-nat/napt.webp"/>
</figure>

<p>NAPT 的端口分配与转换规则（<strong>Mapping Behavior</strong>）以及对外来流量的过滤规则（<strong>Filtering Behavior</strong>）都存在许多不同的实现，没有统一的规范与标准，但是存在两种分类规范，这种分类方法主要用在 NAT 穿越技术中。</p>
<h4 id="rfc3489-定义的-nat-类型四种" class="headerLink">
    <a href="#rfc3489-%e5%ae%9a%e4%b9%89%e7%9a%84-nat-%e7%b1%bb%e5%9e%8b%e5%9b%9b%e7%a7%8d" class="header-mark"></a>RFC3489 定义的 NAT 类型（四种）</h4><p>在 <a href="https://datatracker.ietf.org/doc/html/rfc3489#section-5" target="_blank" rel="noopener noreffer">RFC3489</a> 中将 NAPT 分为四种类型，这也是应用最为广泛的 NAT 分类方法，如下图：</p>
<figure><img src="/images/about-nat/nat-types-defined-in-stun.webp"/>
</figure>

<p>下面我们逐一介绍这四种不同的 NAPT 类型。</p>
<blockquote>
<p>从这里开始，下文中的 NAT 特指 NAPT，如果涉及「一对一 NAT」会使用它的全名。</p>
</blockquote>
<h5 id="1-full-cone-nat" class="headerLink">
    <a href="#1-full-cone-nat" class="header-mark"></a>1. Full-cone NAT</h5><p>Full-cone NAT 的特点如下：</p>
<ul>
<li>数据包流出：一旦内部地址（iAddr:iPort）映射到外部地址（eAddr:ePort），所有发自 iAddr:iPort 的数据包都经由 eAddr:ePort 向外发送。</li>
<li>数据包流入：任意主机发送到 eAddr:ePort 的数据包，都能通过 NAT 到达 iAddr:iPort.
<ul>
<li>也就是不对外部进来的数据做任何限制，全部放行。</li>
<li>cone 圆锥，个人理解是一个比喻，任意发送进来的数据（多），都能通过 NAT 到达这个内部地址（一），就像一个圆锥。</li>
</ul>
</li>
</ul>
<p>允许任意主机发送到 eAddr:ePort 的数据到达内部地址是很危险的行为，因为内部主机不一定配置了合适的安全策略。
因此 <strong>Full-cone NAT 比较少见</strong>，就算路由器等 NAT 设备支持 Full-cone NAT，通常也不会是默认选项。我们会在后面更详细地介绍它。</p>
<h5 id="2-restricted-cone-nat" class="headerLink">
    <a href="#2-restricted-cone-nat" class="header-mark"></a>2. Restricted cone NAT</h5><ul>
<li>数据包流出：（跟 Full-cone NAT 完全一致）一旦内部地址（iAddr:iPort）映射到外部地址（eAddr:ePort），所有发自 iAddr:iPort 的数据包都经由 eAddr:ePort 向外发送。</li>
<li>数据包流入：只有内部地址（iAddr:iPort）主动连接过的外部主机（nAddr:any），发送到 eAddr:ePort 的数据包，才能通过 NAT 到达 iAddr:iPort.
<ul>
<li>跟 Full-cone NAT 的区别在于，它<strong>限制了外部主机的 IP 地址</strong>。只有主动连接过的主机，才能发送数据到 NAT 内部。这<strong>提升了一些安全性</strong>。</li>
</ul>
</li>
</ul>
<h5 id="3-port-restricted-cone-nat" class="headerLink">
    <a href="#3-port-restricted-cone-nat" class="header-mark"></a>3. Port-Restricted cone NAT</h5><ul>
<li>数据包流出：（跟 Full-cone NAT 完全一致）一旦内部地址（iAddr:iPort）映射到外部地址（eAddr:ePort），<strong>所有发自 iAddr:iPort 的数据包都经由 eAddr:ePort 向外发送</strong>。</li>
<li>数据包流入：只有内部地址（iAddr:iPort）主动连接过的外部程序（nAddr:nPort），发送到 eAddr:ePort 的数据包，才能通过 NAT 到达 iAddr:iPort.
<ul>
<li>与 Address-Restricted cone NAT 的区别在于，它<strong>同时限制了外部主机的 IP 与端口</strong>，可以说是更<strong>进一步地提升了安全性。</strong></li>
</ul>
</li>
</ul>
<h5 id="4-symmetric-nat" class="headerLink">
    <a href="#4-symmetric-nat" class="header-mark"></a>4. Symmetric NAT</h5><p>Port-Restricted cone NAT 的数据流入流出规则导致一个问题：<strong>同一个内部地址只能映射到唯一的一个 NAT 外部地址，也就只能与唯一的一个外部程序通讯，不能并发请求多个外部地址</strong>！这实际上限制了内部主机的最高并发连接数。
而 Symmetric NAT 解决了这个问题，它的数据流入流出规则如下：</p>
<ul>
<li>数据包流出：同一个内部地址（iAddr:iPort）与不同外部主机（nAddr:nPort）的通信，会使用不同的 NAT 外部端口（eAddr:randomPort）。也就是说内部地址与 NAT 外部地址的关系也是<strong>一对多</strong>！
<ul>
<li>通过允许端口的<strong>一对多映射</strong>，实际上提升了每个内部地址（iAddr:iPort）的并发连接数上限（从 1 直接扩到了可用端口数上限）。<strong>这也是 NAT 穿越最大的难点，它导致 Symmetric NAT 的端口难以预测</strong>！</li>
</ul>
</li>
<li>数据包流入：只有内部地址（iAddr:iPort）主动连接过的外部程序（nAddr:nPort），发送到 eAddr:ePort 的数据包，才能通过 NAT 到达 iAddr:iPort.
<ul>
<li>这个数据流入规则，与 Port-Restricted cone NAT 是完全一致的。</li>
</ul>
</li>
</ul>
<p><strong>对称 NAT 是最安全的一种 NAT 结构，限制最为严格，应该也是应用最广泛的 NAT 结构</strong>。
但是它导致所有的 TCP 连接都只能由从内部主动发起，外部发起的 TCP 连接请求会直接被 NAT 拒绝，因此它也是 P2P 玩家最头疼的一种 NAT 类型。
解决方案是通过 UDP 迂回实现连接的建立，我们会在后面讨论这个问题。</p>
<h5 id="5-linux-中的-napt" class="headerLink">
    <a href="#5-linux-%e4%b8%ad%e7%9a%84-napt" class="header-mark"></a>5. Linux 中的 NAPT</h5><p>Linux 的网络栈中，可通过 <code>iptables/netfilter</code> 的 <code>SNAT/MASQUERADE</code> 实现 NAPT 网关，这种方式只能实现一个 Symmetric NAT.</p>
<p>也就是说绝大多数基于 Linux 实现的家庭局域网、Docker 虚拟网络、Kubernetes 虚拟网络、云服务的虚拟网络，都是 Symmetric NAT.</p>
<p>只有一些有 Full-cone NAT 需求的网吧、ISP 的 LSN(Large Scale NAT) 网关等组织，会使用非 Linux 内核的企业级路由器提供 Full-cone NAT 能力，这些设备可能是基于 FPGA 等专用芯片设计的。</p>
<p>想要将 Symmetric NAT 内的主机提供给外部访问，只能通过端口映射、一对一 NAT 等方式实现，后面会详细介绍这些方法。</p>
<h4 id="rfc5389-定义的-nat-类型九种" class="headerLink">
    <a href="#rfc5389-%e5%ae%9a%e4%b9%89%e7%9a%84-nat-%e7%b1%bb%e5%9e%8b%e4%b9%9d%e7%a7%8d" class="header-mark"></a>RFC5389 定义的 NAT 类型（九种）</h4><p>RFC3489 这个早期 RFC 存在一些问题，问题之一就是它对 NAT 归类过于笼统，很多 NAPT 网关都无法很好的匹配上其中某个类别。</p>
<p>于是后来，RFC3489 被废弃并由 <a href="https://www.rfc-editor.org/rfc/rfc5389" target="_blank" rel="noopener noreffer">RFC5389</a> 来替代，在 RFC5389 中，将 Mapping Behavior（映射规则）和 Filtering Behavior（过滤规则）分开来，定义了 3 种 Mapping Behavior（映射规则）和 3 种 Filtering Behavior（过滤规则），一共有 9 种组合。</p>
<h5 id="1-映射规则" class="headerLink">
    <a href="#1-%e6%98%a0%e5%b0%84%e8%a7%84%e5%88%99" class="header-mark"></a>1. 映射规则</h5><p>三种映射规则如图所示，假设一个内网主机 HostX 的内网 IP 地址为 X，端口号为 x，经 NAT 映射后的外网 IP 地址为 M，端口号为 m。为方便描述，将内网的 Endpoint 记为 <code>Endpoint(X,x)</code>，映射后外网的 Endpoint 记为 <code>Endpoint(M,m)</code>。内网 <code>Endpoint(X,x)</code> 发往外网 HostD1 的 IP 地址和端口号记为目的 <code>Endpoint(D1,d1)</code>；发往外网 HostD2 的 IP 地址和端口号记为目的 <code>Endpoint(D2,d2)</code>。</p>
<figure><img src="/images/about-nat/rfc5389-mapping-behavior.webp"/><figcaption>
            <h4>NAT 映射规则</h4>
        </figcaption>
</figure>

<ul>
<li><strong>EIM</strong>(Endpoint-Independent Mapping) 外部地址无关映射
<ul>
<li>对于一个内网 <code>Endpoint(X,x)</code>，其映射的外网 <code>Endpoint(M,m)</code> 是固定的。即从相同的 <code>Endpoint(X,x)</code> 发送到任何外部 IP 地址和任何外部端口的报文在 NAT 设备上使用相同的映射。</li>
</ul>
</li>
<li><strong>ADM</strong>(Address-Dependent Mapping) 外部地址相关映射：对于一个内网 <code>Endpoint(X,x)</code>，发往目的 <code>Endpoint(D1,d1)</code> 的报文，<code>Endpoint(X,x)</code> 被映射成 <code>Endpoint(M1,m1)</code>；发往目的 <code>Endpoint(D2,d2)</code> 的报文，<code>Endpoint(X,x)</code> 被映射成 <code>Endpoint(M2,m2)</code>。只要D1=D2，不管d1和d2是多少，都有 <code>Endpoint(M1,m1)=Endpoint(M2,m2)</code>。即从相同的 <code>Endpoint(X,x)</code> 发送到相同外部 IP 地址和任何外部端口的报文在 NAT 设备上使用相同的映射。</li>
<li><strong>APDM</strong>（Address and Port-Dependent Mapping）外部地址和端口相关映射：对于一个内网 <code>Endpoint(X,x)</code>，发往目的 <code>Endpoint(D1,d1)</code> 的报文，<code>Endpoint(X,x)</code> 被映射成 <code>Endpoint(M1,m1)</code>；发往目的 <code>Endpoint(D2,d2)</code> 的报文， <code>Endpoint(X,x)</code> 被映射成 <code>Endpoint(M2,m2)</code>。只有当D1=D2，且d1=d2，才有 <code>Endpoint(M1,m1)=Endpoint(M2,m2)</code>。即从相同的 Endpoint(X,x) 发送到相同外部IP地址和相同外部端口的报文在NAT设备上使用相同的映射。</li>
</ul>
<h5 id="2-过滤规则" class="headerLink">
    <a href="#2-%e8%bf%87%e6%bb%a4%e8%a7%84%e5%88%99" class="header-mark"></a>2. 过滤规则</h5><figure><img src="/images/about-nat/rfc5389-filtering-behavior.webp"/><figcaption>
            <h4>NAT 过滤规则</h4>
        </figcaption>
</figure>

<ul>
<li>
<p><strong>EIF</strong>（Endpoint-Independent Filtering）外部地址无关过滤：对于一个内网 <code>Endpoint(X,x)</code>，只要它曾经向外网发送过数据，外网主机就可以获取到它经 NAT 映射后的外网 <code>Endpoint(M,m)</code> 。那么只要是发给 <code>Endpoint(M,m)</code> 的报文，不管来源于 D1 还是 D2，都能被转换并发往内网，其他报文被过滤掉。</p>
</li>
<li>
<p><strong>ADF</strong>（Address-Dependent Filtering）外部地址相关过滤：对于一个内网 <code>Endpoint(X,x)</code> ，只有它曾经向 IP 地址为 D1 的外网主机发送过报文，那么来自外网 HostD1 返回的任何端口的报文，都能被转换并发往内网，其他报文被过滤掉。</p>
</li>
<li>
<p><strong>APDF</strong>（Address and Port-Dependent Filtering）外部地址和端口相关过滤：对于一个内网 <code>Endpoint(X,x)</code> ，只有它曾经向 IP 地址为 D1，端口号为 d1 的外网目的 <code>Endpoint(D1,d1)</code> 发送过报文，那么也只有外网 HostD1 中来自<code>Endpoint(D1,d1)</code>返回的报文，才能被转换并发往内网，其他报文被过滤掉。</p>
</li>
</ul>
<h5 id="3-rfc3489-与-rfc5389-的-nat-类型定义关系" class="headerLink">
    <a href="#3-rfc3489-%e4%b8%8e-rfc5389-%e7%9a%84-nat-%e7%b1%bb%e5%9e%8b%e5%ae%9a%e4%b9%89%e5%85%b3%e7%b3%bb" class="header-mark"></a>3. RFC3489 与 RFC5389 的 NAT 类型定义关系</h5><ul>
<li>Full Cone NAT 是 EIM 和 EIF 的组合。</li>
<li>Restricted Cone NAT 是 EIM 和 ADF 的组合。</li>
<li>Port Restricted Cone NAT 是 EIM 和 APDF 的组合。</li>
<li>Symmetric NAT 是 APDM 和 APDF 的组合。</li>
</ul>
<h2 id="nat-的弊端" class="headerLink">
    <a href="#nat-%e7%9a%84%e5%bc%8a%e7%ab%af" class="header-mark"></a>NAT 的弊端</h2><ul>
<li><strong>IP 会话的保持时效变短</strong>：NAT 需要维护一个会话列表，如果会话静默时间超过一个阈值，将会被从列表中移除。
<ul>
<li>为了避免这种情况，就需要定期发送心跳包来维持 NAT 会话。俗称心跳保活</li>
</ul>
</li>
<li><strong>IP 跟踪机制失效</strong>：一对多 NAT 使得多个局域网主机共用一个公网 IP，这导致基于公网 IP 进行流量分析的逻辑失去意义。
<ul>
<li>比如很多站点都加了基于 IP 的访问频率限制，这会造成局域网内多个用户之间的服务抢占与排队。</li>
</ul>
</li>
<li><strong>NAT 的工作机制依赖于修改IP包头的信息，这会妨碍一些安全协议的工作</strong>。
<ul>
<li>因为 NAT 篡改了 IP 地址、传输层端口号和校验和，这会导致 IP 层的认证协议彻底不能工作，因为认证目的就是要保证这些信息在传输过程中没有变化。</li>
<li>对于一些隧道协议，NAT 的存在也导致了额外的问题，因为隧道协议通常用外层地址标识隧道实体，穿过 NAT 的隧道会有 IP 复用关系，在另一端需要小心处理。</li>
<li>ICMP 是一种网络控制协议，它的工作原理也是在两个主机之间传递差错和控制消息，因为IP的对应关系被重新映射，ICMP 也要进行复用和解复用处理，很多情况下因为 ICMP 报文载荷无法提供足够的信息，解复用会失败。</li>
<li>IP 分片机制是在信息源端或网络路径上，需要发送的 IP 报文尺寸大于路径实际能承载最大尺寸时，IP 协议层会将一个报文分成多个片断发送，然后在接收端重组这些片断恢复原始报文。IP 这样的分片机制会导致传输层的信息只包括在第一个分片中，NAT难以识别后续分片与关联表的对应关系，因此需要特殊处理。</li>
</ul>
</li>
</ul>
<h2 id="nat-穿越---nat-traversal" class="headerLink">
    <a href="#nat-%e7%a9%bf%e8%b6%8a---nat-traversal" class="header-mark"></a>NAT 穿越 - NAT Traversal</h2><p>天下苦 NAT 久矣，尤其是对各种 P2P 玩家，如 NAS 玩家、P2P 游戏玩家，以及需要搭建 VPN 虚拟私有网络的网络管理员而言。
在常见的联机游戏、BitTorrent 文件共享协议、P2P 聊天等点对点通讯场景中，通讯双方客户端通常都运行在家庭局域网中，也就是说中间隔着两层家庭路由器的 NAT，路由器的默认配置都是安全优先的，存在很多安全限制，直接进行 P2P 通讯大概率会失败。</p>
<p>为了穿越这些 NAT 网关进行 P2P 通讯，就需要借助 <a href="https://en.wikipedia.org/wiki/NAT_traversal" target="_blank" rel="noopener noreffer">NAT 穿越技术</a>。</p>
<blockquote>
<p>这里讨论的前提是，你的网络只有单层 NAT，如果外部还存在公寓 NAT、ISP 广域网 NAT，那下面介绍的 NAT 提升技术实际上就没啥意义了。</p>
</blockquote>
<h3 id="1-dmz-主机或者定向-dnat-转发" class="headerLink">
    <a href="#1-dmz-%e4%b8%bb%e6%9c%ba%e6%88%96%e8%80%85%e5%ae%9a%e5%90%91-dnat-%e8%bd%ac%e5%8f%91" class="header-mark"></a>1. 「DMZ 主机」或者「定向 DNAT 转发」</h3><p>最简单的方法是 DMZ 主机功能，前面已经介绍过了，DMZ 可以直接给内网服务器绑定路由器的外部 IP，从该 IP 进来的所有流量都会直接被发送给这台内网服务器。
被指定的 DMZ 主机，其 NAT 类型将从 NAPT 变成一对一 NAT，而一对一 NAT 对 P2P 通讯而言是透明的，这样就可以愉快地玩耍了。</p>
<p>在 Linux 路由器上实现类似 DMZ 的功能，只需要两行 iptables 命令，这可以称作「定向 DNAT 转发」：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE <span class="c1"># 普通的SNAT</span>
</span></span><span class="line"><span class="cl">iptables -t nat -A PREROUTING -i eth0 -j DNAT --to-destination 192.168.1.3 <span class="c1"># 将入站流量DNAT转发到内网主机192.168.1.3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这两项技术的缺点是只能将一台主机提供给外网访问，而且将整台主机开放到公网实际上是很危险的，如果不懂网络<strong>很容易被黑客入侵</strong>。</p>
<h3 id="2-静态端口转发" class="headerLink">
    <a href="#2-%e9%9d%99%e6%80%81%e7%ab%af%e5%8f%a3%e8%bd%ac%e5%8f%91" class="header-mark"></a>2. 静态端口转发</h3><p>退一步，可以直接用静态端口转发功能，就是在路由器上手动设置某个端口号的所有 TCP/UDP 流量，都直接 NAT 转发到到内网的指定地址。也就是往 NAT 的转发表中手动添加内容，示意图：</p>
<figure><img src="/images/about-nat/NAPT-en.svg"/><figcaption>
            <h4>NAPT tables</h4>
        </figcaption>
</figure>

<p>设置好端口转发后，只要使用的是被设定的端口，NAT 对 P2P 通信而言将完全透明。
绝大多数路由器都支持这项功能，NAS 发烧友们想玩 P2P 下载分享，基本都是这么搞的。</p>
<h3 id="3-upnp-动态端口转发" class="headerLink">
    <a href="#3-upnp-%e5%8a%a8%e6%80%81%e7%ab%af%e5%8f%a3%e8%bd%ac%e5%8f%91" class="header-mark"></a>3. UPnP 动态端口转发</h3><blockquote>
<p>最流行的 UPnP 实现是 <a href="https://github.com/miniupnp/miniupnp" target="_blank" rel="noopener noreffer">https://github.com/miniupnp/miniupnp</a></p>
</blockquote>
<p>静态端口转发对用户的技术要求较高，我作为一个网络小白，希望有一个傻瓜式的开关能让我愉快地玩耍 Xbox/PS5 联机游戏，该怎么办呢？
你需要的只是在路由器上启用 UPnP(Universal Plug and Play) 协议，启用它后，内网游戏设备就可以通过 UPnP 向路由器动态申请一个端口号供其使用，UPnP 会自动配置对应的端口转发规则。
<strong>现在新出的路由器基本都支持 UPnP 功能，它是最简单有效的 NAT 提升方式</strong>。</p>
<p>UPnP 解决了「静态端口转发」需要手动配置的问题，在启用了 UPnP 后，对所有支持 UPnP 的内网程序而言，NAT 类型将提升到 Full-cone NAT.</p>
<h3 id="4-nat-穿越协议---stunturnice" class="headerLink">
    <a href="#4-nat-%e7%a9%bf%e8%b6%8a%e5%8d%8f%e8%ae%ae---stunturnice" class="header-mark"></a>4. NAT 穿越协议 - STUN/TURN/ICE</h3><p>如果很不幸前面提到的「DMZ 主机」/「静态端口转发」/「UPnP」 三项技术，你的路由器都不支持，那你就只能借助 NAT 穿越协议了。</p>
<p>目前有如下几个 NAT 穿越协议标准：</p>
<ul>
<li><a href="https://datatracker.ietf.org/doc/html/rfc3489" target="_blank" rel="noopener noreffer">RFC3489</a> Classic STUN
<ul>
<li>Classic STUN 是一个早期的 STUN 规范，它定义了一整套完整的 NAT 穿越方案，但是因为存在许多问题，已经被废弃。</li>
</ul>
</li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc5389" target="_blank" rel="noopener noreffer">RFC5389 - Simple Traversal of UDP Through NATs (STUN)</a>
<ul>
<li>RFC5389 所定义的 STUN 协议是对 Classic STUN 的改进，它的定位不再是一个完整的 NAT 穿越解决方案，而是作为其他协议（例如SIP、FTP、DNS）处理 NAT 穿越问题的一个工具。</li>
<li>其可以用于检查网络中NAT设备的存在，并确定两个通信端点被NAT设备分配的IP地址和端口号。然后，通过ICE（Interactive Connectivity Establishment），自动创建一条能够进行NAT穿越的数据通道。</li>
<li>STUN 支持除 Symmetric NAT 之外的另外三种 NAT 类型</li>
</ul>
</li>
<li><a href="https://tools.ietf.org/html/rfc5766" target="_blank" rel="noopener noreffer">RFC5766 - Traversal Using Relays around NAT (TURN)</a>
<ul>
<li>TURN 在 STUN 协议之上添加了一个中继，以确保在无法实现 NAT 穿越的情况下，可以 fallback 到直接使用中继服务器进行通信。</li>
<li>这个中继的原理类似反向代理，单纯负责数据的转发</li>
<li>在美国有一项数据表示在进行 P2P 穿越的时候，穿越成功的概率为 70%，但是在国内这个成功率 50% 可能都到不了。因此就有必要使用 TURN 协议，这样才能保证在穿越失败的情况下，用户仍然能正常通信。</li>
</ul>
</li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc8445" target="_blank" rel="noopener noreffer">RFC8445 - Interactive Connectivity Establishment (ICE)</a>
<ul>
<li>一个 NAT 穿越的协商协议，它统一了 STUN 与 TURN 两种协议，会尝试遍历所有可能的连接方案。</li>
</ul>
</li>
</ul>
<p>总的来说，标准的 NAT 穿越协议优先使用打洞（<strong><a href="https://en.wikipedia.org/wiki/Hole_punching_%28networking%29" target="_blank" rel="noopener noreffer">NAT Hole Pounching</a></strong>）技术，如果打洞失败，就使用中继服务器技术兜底，确保能成功穿越。</p>
<h4 id="stunturnice-的-nat-类型检测" class="headerLink">
    <a href="#stunturnice-%e7%9a%84-nat-%e7%b1%bb%e5%9e%8b%e6%a3%80%e6%b5%8b" class="header-mark"></a>STUN/TURN/ICE 的 NAT 类型检测</h4><p>RFC5389 定义了对 NAT 映射类型以及过滤类型的检测方法。</p>
<p>TBD</p>
<h4 id="stunturnice-协议如何实现-nat-打洞" class="headerLink">
    <a href="#stunturnice-%e5%8d%8f%e8%ae%ae%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0-nat-%e6%89%93%e6%b4%9e" class="header-mark"></a>STUN/TURN/ICE 协议如何实现 NAT 打洞</h4><p>首先 P2P 双方如果只隔着 0-1 层 NAT，那是不需要使用 NAT 打洞技术的，可以直连或者反向连接。</p>
<p>下面就讨论下 P2P 双方隔着 2 层及以上 NAT 的场景下，如何利用 UDP 协议实现 NAT 打洞。</p>
<p>一个完整的 NAT 打洞方案，需要包含如下功能：</p>
<ul>
<li>A 跟 B 需要知道对方的公网 IP 以及监听的端口号
<ul>
<li>解决方法：需要一个公网<strong>中介</strong>来介绍双方认识（交换 IP/port）</li>
</ul>
</li>
<li>NAT 连通性测试，需要借助公网主机，<strong>检测双方中间网络的类型</strong></li>
<li>针对不同的 NAT 类型，存在哪些穿越手段？以何种顺序进行<strong>穿越尝试</strong>？</li>
</ul>
<p>NAT 打洞可以使用 UDP/TCP 两种 L4 协议，但是 TCP 面向连接的特性使它在这个场景中限制性更大（具体限制见参考文章，我有空再补充），因此各种 NAT 穿越协议通常都基于 UDP 实现。</p>
<p>此外，因为 NAT 的具体行为是非标准化的，路由器的防火墙策略也存在很大变动空间，再有就是 RF3489 的这种 NAT 分类方法不够精确，这些因素导致 NAT 穿透能否成功通常都是谈概率。</p>
<h5 id="1-a-与-b-在同一局域网中" class="headerLink">
    <a href="#1-a-%e4%b8%8e-b-%e5%9c%a8%e5%90%8c%e4%b8%80%e5%b1%80%e5%9f%9f%e7%bd%91%e4%b8%ad" class="header-mark"></a>1. A 与 B 在同一局域网中</h5><p>这是最简单的情况，最佳方案是直接走内网通讯，不经过 NAT.</p>
<p>第二个方案是，这两个同一局域网内的客户端不走内网，仍然通过 NAT 通讯。这种通讯方式被称作「回环 NAT(Loopback NAT)」或者「发夹 NAT(Hairpin NAT)」。
对于不支持或未启用「Hairpin NAT」的网关设备而言，这样的通讯尝试将会失败！</p>
<h5 id="2-a-与-b-分别在不同的局域网中" class="headerLink">
    <a href="#2-a-%e4%b8%8e-b-%e5%88%86%e5%88%ab%e5%9c%a8%e4%b8%8d%e5%90%8c%e7%9a%84%e5%b1%80%e5%9f%9f%e7%bd%91%e4%b8%ad" class="header-mark"></a>2. A 与 B 分别在不同的局域网中</h5><p>这样实际上 A 与 B 中间就隔了两个 NAT 网关，这是最普遍的一种情况。</p>
<p>STUN/TURN 的 NAT 穿透流程大致如下：</p>
<ul>
<li>首先，A 跟 B 两个程序启动时，需要把自己的内外网 IP 及端口信息上报到一台中介服务器 S</li>
<li>现在假设 A 想要跟 B 建立一个 P2P 连接，首先他们需要从 S 获得对方的 ID</li>
<li>A 将 B 的 ID 发送给中介服务器 S，请求与 B 建立 P2P 连接</li>
<li>中介服务器将 B 的内外网 IP 及端口信息发送给 A，同时将 A 的网络信息发送给 B</li>
<li>A 尝试请求 B 的公网地址 <code>B_public_ip:B_public_port</code>
<ul>
<li>这肯定会失败，但是会在 A 的 NAT 网关上留下记录：A 曾经请求过这个地址，那之后这个地址发到 A 的 NAT 网关的流量就可以进来了。</li>
</ul>
</li>
<li>B 尝试请求 A 的公网地址 <code>A_public_ip:A_public_port</code>
<ul>
<li>同样这肯定也会失败，但是会在 B 的 NAT 网关上流量记录：B 曾经请求过这个地址，那之后这个地址发到 B 的 NAT 网关的流量就可以进来了</li>
</ul>
</li>
<li>中间的两层 NAT 网关均形成 NAT 穿越记录，<strong>穿越完成</strong>。</li>
<li>现在 A 尝试请求 B 的公网地址 <code>B_public_ip:B_public_port</code>，由于 B 的 NAT 已有记录，流量顺利通过 NAT 到达程序 B</li>
<li>B 发送给 A 的数据也同样，可以顺利到达 A</li>
</ul>
<p>上述流程中的关键点在于，如何查出内网服务器被 NAT 分配的外部 IP 及端口，只要有了这两个信息，就可以通过 STUN 中介服务器交换这个信息，然后完成连接的建立了。
家庭服务器通常都只有一个公网 IP，所以基本可以认为 IP 是固定的，因此最关键的问题就是「<strong>如何知道 NAT 为会话分配的端口地址</strong>」。</p>
<p>对端口的限制严格程度跟 NAPT 的类型有关，<strong>Full-cone 跟 Restricted cone 对端口都没有任何限制，所以上述流程肯定可以成功</strong>；</p>
<p>TBD</p>
<p>一个穿越 Symmetric NATs 的 STUN 草案：<a href="https://tools.ietf.org/id/draft-takeda-symmetric-nat-traversal-00.txt" target="_blank" rel="noopener noreffer">Symmetric NAT Traversal using STUN</a></p>
<p>在使用 STUN/TURN 进行 NAT 穿越时，支持的的 NAT 类型如下表。行与列分别代表双方的 NAT 类型，✅ 表示支持 UDP 穿越，❌ 表示 TURN 无法进行 UDP 穿越：</p>
<table>
<thead>
<tr>
<th>NAT 类型</th>
<th>Full Cone</th>
<th>Restricted</th>
<th>Port-Restricted</th>
<th>Symmetric</th>
</tr>
</thead>
<tbody>
<tr>
<td>Full Cone</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Restricted</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>Port-Restricted</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>Symmetric</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody>
</table>
<p>这种场景下 TURN 协议给出的解决方案是，fallback 到中继服务器策略作为兜底方案，保证连接能成功，但是这会给中继服务器带来很大压力，延迟等参数将不可避免地变差。</p>
<h5 id="3-a-与-b-之间隔着三层以上的-nat" class="headerLink">
    <a href="#3-a-%e4%b8%8e-b-%e4%b9%8b%e9%97%b4%e9%9a%94%e7%9d%80%e4%b8%89%e5%b1%82%e4%bb%a5%e4%b8%8a%e7%9a%84-nat" class="header-mark"></a>3. A 与 B 之间隔着三层以上的 NAT</h5><p>这种情况较为常见的有：</p>
<ul>
<li>ISP 为了节约使用公网 IP，给用户分配了个广域网 IP，中间就多了个广域网 NAT</li>
<li>大城市的各种租房公寓通常只会从 ISP 购买一两根宽带，二次分销给整栋楼的租客共用，这就造成中间多了一层公寓的 NAT</li>
</ul>
<p>这是最复杂的一种情况，基本上就没什么 NAT 穿透的希望了，只能走下面介绍的兜底策略——服务器中继。</p>
<p>TBD 待续</p>
<h5 id="4-特殊穿越方案---服务器中继" class="headerLink">
    <a href="#4-%e7%89%b9%e6%ae%8a%e7%a9%bf%e8%b6%8a%e6%96%b9%e6%a1%88---%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%ad%e7%bb%a7" class="header-mark"></a>4. 特殊穿越方案 - 服务器中继</h5><p>Relay 服务器中继是兼容性最佳，但是性能最差的方案，因为这个方案下，所有的 P2P 连接都需要经过中继服务器转发，在使用人数众多时这会给中继服务器造成很大的压力。</p>
<p>因此这个方案通常是用于兜底的。</p>
<h3 id="特定协议的自穿越技术" class="headerLink">
    <a href="#%e7%89%b9%e5%ae%9a%e5%8d%8f%e8%ae%ae%e7%9a%84%e8%87%aa%e7%a9%bf%e8%b6%8a%e6%8a%80%e6%9c%af" class="header-mark"></a>特定协议的自穿越技术</h3><p>在所有方法中最复杂也最可靠的就是自己解决自己的问题。比如 IKE 和 IPsec 技术，在设计时就考虑了到如何穿越 NAT 的问题。因为这个协议是一个自加密的协议并且具有报文防修改的鉴别能力，其他通用方法爱莫能助。因为实际应用的 NAT 网关基本都是 NAPT 方式，所有通过传输层协议承载的报文可以顺利通过 NAT。IKE 和 IPsec 采用的方案就是用 UDP 在报文外面再加一层封装，而内部的报文就不再受到影响。IKE 中还专门增加了 NAT 网关是否存在的检查能力以及绕开 NAT 网关检测 IKE 协议的方法。</p>
<h3 id="nat-algapplication-level-gateway" class="headerLink">
    <a href="#nat-algapplication-level-gateway" class="header-mark"></a>NAT ALG(Application Level Gateway)</h3><p>NAT ALG 是一种解决应用层协议（例如DNS、FTP）报文穿越 NAT 的技术，已经被 NAT 设备产商广泛采用，是 NAT 设备的必备功能。</p>
<p>TLDR 一句话介绍：NAT ALG 通过识别协议，直接修改报文数据部分（payload）的 IP 地址和端口信息，解决某些应用协议的报文穿越 NAT 问题。NAT ALG 工作在 L3-L7 层。</p>
<p>NAT ALG 的原理是利用带有 ALG 功能的 NAT 设备对特定应用层协议的支持，当设备检测到新的连接请求时，先根据传输层端口信息判断是否为已知应用类型。如果判断为已知应用，则调用该应用协议的 ALG 功能对报文的深层内容进行检查。若发现任何形式表达的 IP 地址和端口信息，NAT 都会将这些信息同步进行转换，并为这个新的连接建立一个附加的转换表项。当报文到达外网侧的目的主机时，应用层协议中携带的信息就是 NAT 设备转换后的IP地址和端口号，这样，就可以解决某些应用协议的报文穿越 NAT 问题。</p>
<p>目前支持NAT ALG功能的协议包括：DNS、FTP、SIP、PPTP和RTSP。NAT ALG 在对这些特定应用层协议进行 NAT 转换时，通过 NAT 的状态信息来改变封装在 IP 报文数据部分的特定数据，最终使应用层协议可以跨越不同范围运行。</p>
<h2 id="使用-go-实验-nat-穿透" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-go-%e5%ae%9e%e9%aa%8c-nat-%e7%a9%bf%e9%80%8f" class="header-mark"></a>使用 Go 实验 NAT 穿透</h2><p>Go 可用的 NAT 穿越库有：</p>
<ul>
<li><a href="https://github.com/coturn/coturn" target="_blank" rel="noopener noreffer">coturn</a>: 貌似是最流行的 STUN/TURN/ICE server</li>
<li><a href="https://github.com/ccding/go-stun" target="_blank" rel="noopener noreffer">go-stun</a>: 一个简洁的 stun client 实现，大概适合用于学习？</li>
<li><a href="https://github.com/pion/turn" target="_blank" rel="noopener noreffer">pion/turn</a>: 一个 STUN/TURN/ICE client/client 实现</li>
<li><a href="https://github.com/pion/ice" target="_blank" rel="noopener noreffer">pion/ice</a>: 一个 ice 实现</li>
</ul>
<p>TBD 待完善</p>
<h2 id="虚拟网络overlay-与-underlay" class="headerLink">
    <a href="#%e8%99%9a%e6%8b%9f%e7%bd%91%e7%bb%9coverlay-%e4%b8%8e-underlay" class="header-mark"></a>虚拟网络、Overlay 与 Underlay</h2><p>虚拟网络就是在物理网络之上，构建的逻辑网络，也被称作 overlay 网络。
比如 AWS VPC、Docker 容器网络、QEMU 的默认网络，都是虚拟网络。</p>
<p>而 underlay 网络，则是指承载 overlay 网络的底层网络。
我个人理解，它是一个相对的概念，物理网络一定是 underlay 网络，但是虚拟网络之上如果还承载了其他虚拟网络（套娃），那它相对上层网络而言，也是一个 underlay 网络。</p>
<p>overlay 本质上就是一种隧道技术，将原生态的二层数据帧报文进行封装后通过隧道进行传输。常见的 overlay 网络协议主要是 vxlan 以及新一代的 geneve，它俩都是使用 UDP 包来封装链路层的以太网帧。</p>
<p>vxlan 在 2014 年标准化，而 geneve 在 2020 年底才通过草案阶段，目前尚未形成最终标准。但是目前 linux/cilium 都已经支持了 geneve.</p>
<p>geneve 相对 vxlan 最大的变化，是它更灵活——它的 header 长度是可变的。</p>
<p>目前所有 overlay 的跨主机容器网络方案，几乎都是基于 vxlan 实现的（例外：cilium 也支持 geneve）。</p>
<p>vxlan/geneve 的详细介绍，参见 <a href="https://thiscute.world/posts/linux-virtual-network-interfaces/#vxlan-geneve" target="_blank" rel="noopener noreffer">Linux 中的虚拟网络接口 - vxlan/geneve</a></p>
<p>顺带再提一嘴，cilium/calico/kube-ovn 等 overlay 容器网络，都是 SDN 软件定义网络。</p>
<h3 id="相关工具" class="headerLink">
    <a href="#%e7%9b%b8%e5%85%b3%e5%b7%a5%e5%85%b7" class="header-mark"></a>相关工具</h3><p>有一些专门用于跨网搭建私有虚拟网络的工具，由于家庭网络设备前面通常都有至少一层 NAT（家庭路由器），因此这些工具都重度依赖 NAT 穿越技术。
如果 NAT 层数太多无法穿越，它们会 fallback 到代理模式，也就是由一台公网服务器进行流量中继，但是这会对中继服务器造成很大压力，延迟跟带宽通常都会差很多。</p>
<p>如下是两个比较流行的 VPN 搭建工具：</p>
<ul>
<li><a href="https://github.com/zerotier/ZeroTierOne" target="_blank" rel="noopener noreffer">zerotier</a>: 在 P2P 网络之上搭建的 SDN overlay 网络，使用自定义协议。</li>
<li><a href="https://github.com/tailscale/tailscale" target="_blank" rel="noopener noreffer">tailscales</a>: 基于 wireguard 协议快速搭建私有虚拟网络 VPN</li>
</ul>
<h3 id="vpn-协议" class="headerLink">
    <a href="#vpn-%e5%8d%8f%e8%ae%ae" class="header-mark"></a>VPN 协议</h3><p>主流的 VPN 协议有：PPTP、L2TP、IPSec、OpenVPN、SSTP，以及最新潮的 Wireguard.</p>
<p>TBD</p>
<h2 id="拓展知识" class="headerLink">
    <a href="#%e6%8b%93%e5%b1%95%e7%9f%a5%e8%af%86" class="header-mark"></a>拓展知识</h2><h3 id="symmetric-nat-允许的最大并发-tcp-连接数是多少" class="headerLink">
    <a href="#symmetric-nat-%e5%85%81%e8%ae%b8%e7%9a%84%e6%9c%80%e5%a4%a7%e5%b9%b6%e5%8f%91-tcp-%e8%bf%9e%e6%8e%a5%e6%95%b0%e6%98%af%e5%a4%9a%e5%b0%91" class="header-mark"></a>Symmetric NAT 允许的最大并发 TCP 连接数是多少？</h3><p>TCP 并发连接数受许多参数的限制，以 Linux 服务器为例，默认参数无法满足需要，通常都会手动修改它的参数，放宽文件描述符限制以及 TCP 连接队列、缓存相关的限制。</p>
<p>单纯从网络协议层面分析，对于一个仅有一个公网 IP 的 Symmetric NAT 网关，它与某个外部站点 <code>http://x.x.x.x:xx</code> 要建立连接。
考虑到 TCP 连接的定义实际上是一个四元组 <code>(srcIP, srcPort, dstIP, dstPort)</code>，其中就只有 NAT 网关自己的 <code>srcPort</code> 是唯一的变量了，而端口号是一个 16bits 数字，取值范围为 0 - 65535。
此外低于 1024 的数字是操作系统的保留端口，因此 NAT 一般只会使用 1024-65535 这个区间的端口号，也就是说这个 NAT 网关最多只能与该站点建立 64512 个连接。</p>
<p>那么对于不同的协议 NAT 是如何处理的呢？NAT 肯定可以通过协议特征区分不同协议的流量，因此不同协议通过 NAT 建立的并发连接不会相互影响。</p>
<p>对于家庭网络而言 64512 个连接已经完全够用了，但是对于数据中心或者云上的 VPC 而言，就不一定够用了。
举个例子，在 <a href="https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html" target="_blank" rel="noopener noreffer">AWS NAT 网关的文档</a>中就有提到，AWS NAT 网关最高支持与每个不同的地址建立 55000 个并发连接。destination 的 IP 地址、端口号、(TCP/UDP/ICMP) 任一个发生改变，都可以再建立其他 55000 个并发连接。
如果超过这个限制，就会发生「ErrorPortAllocation」错误。如果在 AWS 上遇到这个错误，那就说明你们的云上网络规划有问题了。</p>
<p>当然除了端口限制外，受限于 NAT 硬件、以太网协议以及其他影响，NAT 网关肯定还有包处理速率、带宽的限制，这个就略过不提了。</p>
<h3 id="aws-vpc-与-nat" class="headerLink">
    <a href="#aws-vpc-%e4%b8%8e-nat" class="header-mark"></a>AWS VPC 与 NAT</h3><p>AWS VPC(virtual private cloud) 是一个逻辑隔离的虚拟私有网络，云服务架构的最佳实践之一就是通过 VPC 搭建云上私有网络，提升网络安全性。</p>
<p>AWS VPC 提供两种网关类型：</p>
<ul>
<li><a href="https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/vpc-nat-gateway.html" target="_blank" rel="noopener noreffer">NAT 网关</a>
<ul>
<li>支持三种协议：TCP, UDP, ICMP</li>
<li>支持 IPv4 与 IPv6 两种 IP 协议</li>
<li>支持 5 Gbps 带宽，可自动扩展到 45 Gbps
<ul>
<li>可通过划分子网并在多个子网中添加 NAT 网关的方式，获得超过 45Gbps 的带宽</li>
</ul>
</li>
<li>最高支持与每个不同的地址建立 55000 个并发连接</li>
<li>NAT 网关从属于 VPC 的子网</li>
<li>每个 NAT 网关只能绑定一个 IP
<ul>
<li>可通过划分子网并在多个子网中添加 NAT 网关的方式获得多个 IP</li>
</ul>
</li>
<li>可达到 100w packets 每秒的处理速度，并能自动扩展到 400w packets 每秒
<ul>
<li>同样，需要更高的处理速度，请添加更多 NAT 网关</li>
</ul>
</li>
<li>按处理数据量收费</li>
<li>默认路由到 NAT 子网，被称为「私有子网」（或者没默认路由，那就是无法访问公网的私有子网），连接只能由内网程序主动发起。</li>
<li>NAT 网关为流量执行「<strong>Symmetric NAT</strong>」</li>
</ul>
</li>
<li><a href="https://docs.aws.amazon.com/zh_cn/vpc/latest/userguide/VPC_Internet_Gateway.html" target="_blank" rel="noopener noreffer">IGW 因特网网关</a>
<ul>
<li>IGW 是一个高度可用的逻辑组件，不会限制 VPC 的总带宽、处理能力。</li>
<li>IGW 实例直接关联 VPC，不从属于任何可用区或子网</li>
<li>IGW 实质上是一个 NAT 设备，为绑定了公网 IP 地址的 ENI/EC2 实例，执行「<strong>一对一 NAT</strong>」</li>
<li>默认路由到 IGW 的子网，被称为「公有子网」</li>
</ul>
</li>
</ul>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://info.support.huawei.com/info-finder/encyclopedia/en/NAT.html" target="_blank" rel="noopener noreffer">What Is Network Address Translation (NAT)? - Huawei Docs</a></li>
<li><a href="https://info.support.huawei.com/info-finder/encyclopedia/en/STUN.html" target="_blank" rel="noopener noreffer">What Is STUN? - Huawei Docs</a></li>
<li><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100112409/fd829977#ZH-CN_CONCEPT_0227014768" target="_blank" rel="noopener noreffer">NetEngine AR V300R019 配置指南-IP业务 - NAT 穿越 - 华为文档</a></li>
<li><a href="http://www.52im.net/thread-50-1-1.html" target="_blank" rel="noopener noreffer">P2P技术详解(一)：NAT详解——详细原理、P2P简介</a></li>
<li><a href="http://www.52im.net/thread-542-1-1.html" target="_blank" rel="noopener noreffer">P2P技术详解(二)：P2P中的NAT穿越(打洞)方案详解</a></li>
<li><a href="http://www.52im.net/thread-2872-1-1.html" target="_blank" rel="noopener noreffer">P2P技术详解(三)：P2P中的NAT穿越(打洞)方案详解(进阶分析篇)</a></li>
<li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Internet_Gateway.html" target="_blank" rel="noopener noreffer">Connect to the internet using an internet gateway - AWS VPC Internet Gateway</a></li>
<li><a href="https://blog.chionlab.moe/2018/02/09/full-cone-nat-with-linux/" target="_blank" rel="noopener noreffer">从DNAT到netfilter内核子系统，浅谈Linux的Full Cone NAT实现</a></li>
<li><a href="https://en.wikipedia.org/wiki/Network_address_translation" target="_blank" rel="noopener noreffer">Network address translation - wikipedia</a></li>
<li><a href="https://www.liveswitch.io/blog/webrtc-nat-traversal-methods-a-case-for-embedded-turn" target="_blank" rel="noopener noreffer">WebRTC NAT Traversal Methods: A Case for Embedded TURN</a></li>
<li><a href="https://icloudnative.io/posts/wireguard-endpoint-discovery-nat-traversal/" target="_blank" rel="noopener noreffer">WireGuard 教程：使用 DNS-SD 进行 NAT-to-NAT 穿透 - 云原生实验室</a></li>
</ul>
]]></content></entry><entry><title type="html">FinOps for Kubernetes - 如何拆分 Kubernetes 成本</title><link href="https://thiscute.world/posts/finops-for-kubernetes/"/><id>https://thiscute.world/posts/finops-for-kubernetes/</id><author><name>ryan4yin</name></author><published>2022-05-04T23:15:00+08:00</published><updated>2022-05-05T19:31:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>FinOps 是一种不断发展的云财务管理学科和文化实践，通过帮助工程、财务、技术和业务团队在数据驱动的预算分配上进行协作，使成本预算能够产生最大的业务价值。</p>
</blockquote>
<h2 id="云计算成本管控" class="headerLink">
    <a href="#%e4%ba%91%e8%ae%a1%e7%ae%97%e6%88%90%e6%9c%ac%e7%ae%a1%e6%8e%a7" class="header-mark"></a>云计算成本管控</h2><p>随着越来越多的企业上云，云计算的成本管控也越来越受关注。在讨论 Kubernetes 成本之前，先简单聊下如何管控云计算成本，有一个新名词被用于形容这项工作——FinOps.</p>
<p>传统的数据中心的成本是比较固定的，所有的成本变动通常都伴随着硬件更替。
而在云上环境就很不一样了，由于云服务的按量收费特性，以及五花八门的计费规则，开发人员稍有不慎，云成本就可能会出现意料之外的变化。另一方面由于计费的复杂性，业务扩容对成本的影响也变得难以预测。</p>
<p>目前的主流云服务商（AWS/GCP/Alicloud/&hellip;）基本都提供基于资源标签的成本查询方法，也支持将成本导出并使用 SQL 进行细致分析。
因此其实要做到快速高效的<strong>云成本分析与管控</strong>，主要就涉及到如下几个点：</p>
<ul>
<li><strong>契合需求的标签规范</strong>: 从公司业务侧需求出发，制定出合理的、多维度的（Department/Team/Product/&hellip;）、有扩展空间的标签规范，这样才能按业务侧需要进行成本分析。</li>
<li><strong>资源标签的准确率</strong>: 随着公司业务的发展，标签规范的迭代，标签的准确率总是会上下波动。而标签准确率越高，我们对云计算成本的管控能力就越强。</li>
</ul>
<p>但是也存在许多特殊的云上资源，云服务商目前并未提供良好的成本分析手段，Kubernetes 集群成本就是其中之一。</p>
<h2 id="kubernetes-成本分析的难点" class="headerLink">
    <a href="#kubernetes-%e6%88%90%e6%9c%ac%e5%88%86%e6%9e%90%e7%9a%84%e9%9a%be%e7%82%b9" class="header-mark"></a>Kubernetes 成本分析的难点</h2><p>目前许多企业应该都面临着这样的场景：所有的服务都运行在一或多个 Kubernetes 集群上，其中包含多条业务线、多个产品、多个业务团队的服务，甚至除了业务服务，可能还包含 CICD、数据分析、机器学习等多种其他工作负载。而这些 Kubernetes 集群通常都由一个独立的 SRE 部门管理。</p>
<p>但是 Kubernetes 集群本身并不提供成本拆分的能力，我们只能查到集群的整体成本、每个节点组的成本等这样粗粒度的成本信息，缺乏细粒度的成本分析能力。
此外，Kubernetes 集群是一个非常动态的运行环境，其节点的数量、节点规格、Pod 所在的节点/Zone/Region，都可能会随着时间动态变动，这为成本分析带来了更大的困难。</p>
<p>这就导致我们很难回答这些问题：<strong>每条业务线、每个产品、每个业务团队、或者每个服务分别花了多少钱？是否存在资源浪费？有何优化手段</strong>？</p>
<p>而 FinOps for Kubernetes，就是通过工程化分析、可视化成本分析等手段，来回答这些成本问题，分析与管控 Kubernetes 的成本。</p>
<p>接下来我会先介绍下云上 Kubernetes 成本分析的思路与手段，最后再介绍如何使用 Kubecost 分析 Kubernetes 集群的成本。</p>
<p>要做好 Kubernetes 成本工作，有如下三个要点：</p>
<ul>
<li>理解 Kubernetes 成本的构成，搞懂准确分析 Kubernetes 成本有哪些难点</li>
<li>寻找优化 Kubernetes 集群、业务服务的手段</li>
<li>确定 Kubernetes 集群的成本拆分手段，建立能快速高效地分析与管控集群成本的流程</li>
</ul>
<h2 id="kubernetes-成本的构成" class="headerLink">
    <a href="#kubernetes-%e6%88%90%e6%9c%ac%e7%9a%84%e6%9e%84%e6%88%90" class="header-mark"></a>Kubernetes 成本的构成</h2><p>以 AWS EKS 为例，它的成本有这些组成部分：</p>
<ul>
<li>AWS EKS 本身有 $0.1 per hour 的固定费用，这个很低</li>
<li>EKS 的所有节点会收对应的 EC2 实例运行费用、EBS 数据卷费用</li>
<li>EKS 中使用的 PV 会带来 EBS  数据卷的费用</li>
<li>跨区流量传输费用
<ul>
<li>所有节点之间的通讯（主要是服务之间的互相访问），如果跨了可用区，会收跨区流量传输费用</li>
<li>EKS 中的服务访问其他 AWS 服务如 RDS/ElastiCache，如果是跨可用区，会收取跨区流量费用</li>
<li>如果使用了 Istio IngressGateway 或 traefik 等网关层代理 Pod，那这些 Pod 与服务实例之间，有可能会产生跨区流量</li>
</ul>
</li>
<li>NAT 网关费用
<ul>
<li>EKS 中的容器如果要访问因特网，就需要通过 NAT 网关，产生 NAT 费用</li>
<li>如果 VPC 未配置 endpoints 使访问 AWS 服务（dynamodb/s3 等）时直接走 AWS 内部网络，这些流量会经过 VPC 的 NAT 网关，从而产生 NAT 网关费用</li>
</ul>
</li>
<li>服务如果要对外提供访问，最佳实践是通过 aws-load-balancer-controller 绑定 AWS ALB, 这里会产生 ALB 费用</li>
<li>监控系统成本
<ul>
<li>Kubernetes 的监控系统是不可或缺的</li>
<li>如果你使用的是 Datadog/NewRelic 等云服务，会造成云服务的成本；如果是自建 Prometheus，会造成 Prometheus 的运行成本，以及 Pull 指标造成的跨区流量成本</li>
</ul>
</li>
</ul>
<p><strong>总结下，其实就是三部分成本：计算、存储、网络</strong>。其中计算与存储成本是相对固定的，而网络成本就比较动态，跟是否跨区、是否通过 NAT 等诸多因素有关。</p>
<h2 id="kubernetes-资源分配的方式" class="headerLink">
    <a href="#kubernetes-%e8%b5%84%e6%ba%90%e5%88%86%e9%85%8d%e7%9a%84%e6%96%b9%e5%bc%8f" class="header-mark"></a>Kubernetes 资源分配的方式</h2><p>Kubernetes 提供了三种资源分配的方式，即服务质量 QoS，不同的分配方式，成本的计算难度也有区别：</p>
<ul>
<li>Guaranteed resource allocation(保证资源分配): 即将 requests 与 limits 设置为相等，确保预留所有所需资源
<ul>
<li>最保守的策略，服务性能最可靠，但是成本也最高</li>
<li>这种方式分配的资源，拆分起来是最方便的，因为它的计算成本是静态的</li>
</ul>
</li>
<li>Burstable resource allocation(突发性能): 将 requests 设置得比 limits 低，这样相差的这一部分就是服务的可 Burst 资源量。
<ul>
<li>最佳实践，选择合适的 requests 与 limits，可达成性能与可靠性之间的平衡</li>
<li>这种资源，它 requests 的计算成本是静态的，Burstable 部分的计算成本是动态的</li>
</ul>
</li>
<li>Best effort resource allocation(尽力而为): 只设置 limits，不设置 requests，让 Pod 可以调度到任何可调度的节点上
<ul>
<li>下策，这个选项会导致服务的性能无法保证，通常只在开发测试等资源受限的环境使用</li>
<li>这种方式分配的资源，完全依赖监控指标进行成本拆分</li>
</ul>
</li>
</ul>
<h2 id="最佳实践" class="headerLink">
    <a href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5" class="header-mark"></a>最佳实践</h2><p>要做到统一分析、拆分 Kubernetes 与其他云资源的成本，如下是一些最佳实践：</p>
<ul>
<li>按产品或者业务线来划分名字空间，不允许跨名字空间互相访问。
<ul>
<li>如果存在多个产品或业务线共用的服务，可以在每个产品的名字空间分别部署一个副本，并把它们当成不同的服务来处理。</li>
<li>这样名字空间就是成本划分的一个维度，我们还可以在名字空间上为每个产品设置资源上限与预警。</li>
</ul>
</li>
<li>按产品或业务线来划分节点组，通过节点组的标签来进行成本划分
<ul>
<li>这是第二个维度，但是节点组划分得太细，可能会导致资源利用不够充分。</li>
<li>这个方案仅供参考，不一定好用</li>
</ul>
</li>
<li>为 Kubernetes 服务设计与其他云资源一致的成本标签，添加到 Pod 的 label 中，通过 kubecost 等手段，基于 label 进行更细致的成本分析
<ul>
<li>标签一致的好处是可以统一分析 Kubernetes 与其他云资源的成本</li>
</ul>
</li>
<li>定期（比如每周一） check 云成本变化，定位并解决成本异常</li>
<li>建立自动化的成本异常检测与告警机制（部分云服务有提供类似的服务，也可自建），收到告警即触发成本异常分析任务</li>
<li>始终将资源标签准确率维持在较高数值，准确率低于一定数值即自动告警，触发标签修正任务</li>
<li>将成本上升的压力与成本下降的效益覆盖到开发人员，授权他们跟踪服务的 Kubernetes 利用率与成本，以激励开发人员与 SRE 合作管控服务成本。</li>
</ul>
<p>成本优化实践：</p>
<ul>
<li>多种工作负载混合部署，提升资源利用率。但是需要合理规划避免资源竞争</li>
<li>调节集群伸缩组件，在保障 SLA 的前提下提升资源利用率
<ul>
<li>比如 aws 就可以考虑在一些场景下用 karpenter 来做扩缩容、引入 <a href="https://github.com/aws/aws-node-termination-handler" target="_blank" rel="noopener noreffer">AWS Node Termination Handler</a> 提升 Spot 实例的 SLA</li>
</ul>
</li>
<li>尽量使用竞价实例，AWS 的竞价实例单价平均优惠超过 50%</li>
<li>合理地购买 Saving Plans 与 Reserved Instances，达成成本节约。</li>
</ul>
<h2 id="多云环境" class="headerLink">
    <a href="#%e5%a4%9a%e4%ba%91%e7%8e%af%e5%a2%83" class="header-mark"></a>多云环境</h2><p>上述讨论的绝大部分策略，都适用于多云环境。在这种涉及多个云服务提供商的场景，最重要的一点是：<strong>搭建平台无关的成本分析与管控平台</strong>。而其核心仍然是文章最前面提到的两点，只需要补充两个字 <strong>一致</strong>：</p>
<ul>
<li><strong>一致的资源标签规范</strong>: 从公司业务侧需求出发，制定出<strong>跨平台一致的</strong>标签规范，这样才能统一分析多云成本。</li>
<li><strong>资源标签的准确率</strong>: 随着公司业务的发展，标签规范的迭代，标签的准确率总是会上下波动。而标签准确率越高，我们对云计算成本的管控能力就越强。</li>
</ul>
<p>这样就可以把不同云服务商的数据转换成统一的格式，然后在自有的成本平台上进行统一的分析了。</p>
<p>搭建一个这样的成本分析平台其实并不难，许多大公司都是这么干的，小公司也可以从一个最小的平台开始做起，再慢慢完善功能。</p>
<p>以我现有的经验看，其实主要就包含这么几个部分：</p>
<ul>
<li>成本数据转换模块：将来自不同云的成本数据，转换成与云服务无关的格式，方便统一处理</li>
<li>折扣模块：处理不同资源的折扣
<ul>
<li>比如 CDN 在用量高的时候通常会有很高的折扣比例</li>
<li>还有 SavingPlans/CommitmentDiscounts 也需要特殊的处理</li>
</ul>
</li>
<li>标签修整模块
<ul>
<li>随着标签体系的发展，总会有些标签的变更，不方便直接在资源上执行，就需要在成本计算这里进行修正、增补或者删除</li>
</ul>
</li>
<li>成本拆分模块
<ul>
<li>有些资源的成本是共用的，就需要结合其他来源的数据进行成本拆分，比如 Kubernetes 集群的成本</li>
</ul>
</li>
<li>成本报表：将最终的数据制作成符合各类人员需求的可视化图表，按需求还可以考虑添加交互式特征
<ul>
<li>可使用 Grafana/Google DataStudio 等报表工具</li>
</ul>
</li>
</ul>
<p>此外这样一个跨云的成本管控平台也不一定需要完全自己来做，已经有很多公司看到了这块的前景，做出了现成的方案，可以看看 Gartner 的如下报告：</p>
<ul>
<li><a href="https://www.gartner.com/reviews/market/cloud-management-tooling" target="_blank" rel="noopener noreffer">Cloud Management Tooling Reviews and Ratings - Gartner</a></li>
</ul>
<p>多云场景下其实要考虑的还有很多，目前多云网络（multicloud networking）、多云财务（multicloud finops）、多云应用管理（multicloud application management）领域的需求越来越强劲，相关产品也越来越多，有需要可以自行研究。</p>
<h2 id="kubernetes-成本分析" class="headerLink">
    <a href="#kubernetes-%e6%88%90%e6%9c%ac%e5%88%86%e6%9e%90" class="header-mark"></a>Kubernetes 成本分析</h2><p>前面讨论的内容都很「虚」，下面来点更「务实」的：Kubernetes 成本分析实战。</p>
<p>目前据我所知，主要有如下两个相关的开源工具：</p>
<ul>
<li><a href="https://github.com/kubecost/cost-model" target="_blank" rel="noopener noreffer">Kubecost</a>: kubecost 应该是目前最优秀的开源成本分析工具了，self-hosted 是免费的，支持按 deployment/service/label 等多个维度进行成本拆分，而且支持拆分网络成本。收费版提供更丰富的功能以及更长的数据存储时间。</li>
<li><a href="https://github.com/gocrane/crane" target="_blank" rel="noopener noreffer">crane</a>: 腾讯开源的一款 Kubernetes 成本优化工具，支持成本报表以及 EHPA 两个功能，才刚开源几个月，目前还比较简陋。
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1960014" target="_blank" rel="noopener noreffer">腾讯推出国内首个云原生成本优化开源项目 Crane</a></li>
<li>腾讯云在国内上线了 crane 的闭源版本「<a href="https://cloud.tencent.com/document/product/457/64169" target="_blank" rel="noopener noreffer">容器服务成本大师</a>」，如果你使用的是腾讯云，可以体验看看（感觉跟 kubecost 很像）</li>
</ul>
</li>
</ul>
<p>其中 kubecost 是最成熟的一个，我们接下来以 kubecost 为例介绍下如何分析 Kubernetes 成本。</p>
<h3 id="安装-kubecost" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85-kubecost" class="header-mark"></a>安装 kubecost</h3><p>kubecost 有两种推荐的安装方法：</p>
<ul>
<li>使用 helm 安装免费版
<ul>
<li>包含如下组件：
<ul>
<li>frontend 前端 UI 面板</li>
<li>cost-model 核心组件，提供基础的成本拆分能力</li>
<li>postgres 长期存储，仅企业版支持</li>
<li>kubecost-network-costs 一个 daemonset，提供网络指标用于计算网络成本（貌似未开源）</li>
<li>cluster-controller 提供集群「大小调整（RightSizing）」以及「定时关闭集群」的能力</li>
</ul>
</li>
<li>只保留 15 天的指标，无 SSO/SAML 登录支持，无 alerts/notification, 不可保存 reportes 报表</li>
<li>每个 kubecost 只可管理一个集群</li>
</ul>
</li>
<li>只安装 Apache License 开源的 cost-model，它仅提供基础的成本拆分功能以及 API，无 UI 面板、长期存储、网络成本拆分、SAML 接入及其他商业功能。</li>
</ul>
<p>开源的 cost-model 直接使用此配置文件即可部署：<a href="https://github.com/kubecost/cost-model/blob/master/kubernetes/exporter/exporter.yaml" target="_blank" rel="noopener noreffer">https://github.com/kubecost/cost-model/blob/master/kubernetes/exporter/exporter.yaml</a></p>
<p>而如果要部署带 UI 的商业版，需要首先访问 <a href="https://www.kubecost.com/install#show-instructions" target="_blank" rel="noopener noreffer">https://www.kubecost.com/install#show-instructions</a> 获取到 <code>kubecostToken</code>，然后使用 helm 进行部署。</p>
<p>首先下载并编辑 values.yaml 配置文件：<a href="https://github.com/kubecost/cost-analyzer-helm-chart/blob/develop/cost-analyzer/values.yaml" target="_blank" rel="noopener noreffer">https://github.com/kubecost/cost-analyzer-helm-chart/blob/develop/cost-analyzer/values.yaml</a>，示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># kubecost-values.yaml</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 通过 http://kubecost.com/install 获取 token，用于跟踪商业授权状态</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kubecostToken</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;xxx&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">global</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 自动部署 prometheus + nodeExporter，也可以直接对接外部 prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 如果 enable=false，则使用如下地址连接外部 prometheus</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">fqdn</span><span class="p">:</span><span class="w"> </span><span class="l">http://cost-analyzer-prometheus-server.default.svc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 自动部署 grafana，也可对接外部 grafana 面板</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">grafana</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 如果 enable=false，则使用如下地址连接外部 grafana</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">domainName</span><span class="p">:</span><span class="w"> </span><span class="l">cost-analyzer-grafana.default.svc</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">scheme</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;http&#34;</span><span class="w"> </span><span class="c"># http or https, for the domain name above.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">proxy</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># If true, the kubecost frontend will route to your grafana through its service endpoint</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># grafana 子 chart 的配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">## 更好的选择是单独部署 grafana，不使用 kubecost 的 subchart</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">grafana</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">image</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">repository</span><span class="p">:</span><span class="w"> </span><span class="l">grafana/grafana </span><span class="w"> </span><span class="c"># 建议替换成私有镜像仓库地址</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">tag</span><span class="p">:</span><span class="w"> </span><span class="m">8.3.2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># prometheus 子 chart 的配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">## 更好的选择是单独部署 prometheus，不使用 kubecost 的 subchart</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">persistentVolume</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">size</span><span class="p">:</span><span class="w">  </span><span class="l">32Gi</span><span class="w"> </span><span class="c"># 这个大小得视情况调整，集群较大的话 32Gi 肯定不够</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">retention</span><span class="p">:</span><span class="w"> </span><span class="l">15d </span><span class="w"> </span><span class="c"># p8s 指标保留时长</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nodeExporter</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">## If true, node-exporter pods share the host network namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostNetwork</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">## If true, node-exporter pods share the host PID namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostPID</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">## node-exporter container name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">node-exporter</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">## node-exporter container image</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">repository</span><span class="p">:</span><span class="w"> </span><span class="l">quay.io/prometheus/node-exporter </span><span class="w"> </span><span class="c"># 替换成 quay 仓库避免 docker 仓库拉取限制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tag</span><span class="p">:</span><span class="w"> </span><span class="l">v0.18.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">pullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">## Monitors ConfigMap changes and POSTs to a URL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">## Ref: https://github.com/jimmidyson/configmap-reload</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c">##</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">configmapReload</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">prometheus</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">## If false, the configmap-reload container will not be deployed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">## configmap-reload container name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">configmap-reload</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c">## configmap-reload container image</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">image</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">repository</span><span class="p">:</span><span class="w"> </span><span class="l">jimmidyson/configmap-reload </span><span class="w"> </span><span class="c"># 建议替换成私有仓库避免 docker 仓库拉取限制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">tag</span><span class="p">:</span><span class="w"> </span><span class="l">v0.7.1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">persistentVolume</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">size</span><span class="p">:</span><span class="w"> </span><span class="l">32Gi </span><span class="w"> </span><span class="c"># 同前所述</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># storageClass: &#34;-&#34; #</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 配置 ingress 入口，供外部访问</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ingress</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># className: nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># kubernetes.io/ingress.class: nginx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># kubernetes.io/tls-acme: &#34;true&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">paths</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/&#34;</span><span class="p">]</span><span class="w"> </span><span class="c"># There&#39;s no need to route specifically to the pods-- we have an nginx deployed that handles routing</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pathType</span><span class="p">:</span><span class="w"> </span><span class="l">ImplementationSpecific</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">hosts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">cost-analyzer.local</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">nodeSelector</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 提升网络安全性的配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networkPolicy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">denyEgress</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># create a network policy that denies egress from kubecost</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">sameNamespace</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w"> </span><span class="c"># Set to true if cost analyser and prometheus are on the same namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># namespace: kubecost # Namespace where prometheus is installed</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 分析网络成本，需要额外部署一个 daemonset</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networkCosts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w"> </span>{}<span class="w">  </span><span class="c"># 详见 values.yaml 内容</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">serviceAccount</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">create</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 如果是 aws 上的集群，可以通过 serviceAccount 授权访问 ec2 pricing API 及 cur 数据</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 也可以直接为服务提供 AccessKeyID/Secret 进行授权</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 与 AWS 的集成会在后面详细介绍</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">eks.amazonaws.com/role-arn</span><span class="p">:</span><span class="w"> </span><span class="l">arn:aws:iam:112233445566:role/KubecostRole </span><span class="w"> </span><span class="c"># 注意替换这个 role-arn</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 如下配置也可通过 Kubecost product UI 调整</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 但是此处的配置优先级更高，如果在这里配置了默认值，容器重启后就会使用此默认值，UI 上的修改将失效</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kubecostProductConfigs</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>然后部署：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 添加 repo</span>
</span></span><span class="line"><span class="cl">helm repo add kubecost https://kubecost.github.io/cost-analyzer/
</span></span><span class="line"><span class="cl"><span class="c1"># 查看版本号</span>
</span></span><span class="line"><span class="cl">helm search repo kubecost/cost-analyzer -l <span class="p">|</span> head
</span></span><span class="line"><span class="cl"><span class="c1"># 下载并解压某个 chart</span>
</span></span><span class="line"><span class="cl">helm pull kubecost/cost-analyzer --untar --version 1.92.0
</span></span><span class="line"><span class="cl"><span class="c1"># 使用自定义 values 配置安装或更新本地的 chart</span>
</span></span><span class="line"><span class="cl">helm upgrade --create-namespace --install kubecost ./cost-analyzer -n kubecost -f kubecost-values.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 port-forward 访问：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl port-forward --namespace kubecost deployment/kubecost-cost-analyzer <span class="m">9090</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在访问 <a href="http://localhost:9090" target="_blank" rel="noopener noreffer">http://localhost:9090</a> 就能进入 Kubecost 的 UI 面板，其中最主要的就是 Allocation 成本拆分功能。</p>
<figure><img src="/images/finops-for-kubernetes/kubecost-demo.webp"/><figcaption>
            <h4>Kubecost 示例</h4>
        </figcaption>
</figure>

<h3 id="kubecost-的成本统计原理" class="headerLink">
    <a href="#kubecost-%e7%9a%84%e6%88%90%e6%9c%ac%e7%bb%9f%e8%ae%a1%e5%8e%9f%e7%90%86" class="header-mark"></a>kubecost 的成本统计原理</h3><h4 id="1-cpuramgpustorage-成本分析" class="headerLink">
    <a href="#1-cpuramgpustorage-%e6%88%90%e6%9c%ac%e5%88%86%e6%9e%90" class="header-mark"></a>1. CPU/RAM/GPU/Storage 成本分析</h4><p>Kubecost 通过 AWS/GCP 等云服务商 API 动态获取各 region/zone 的上述四项资源的每小时成本：CPU-hour, GPU-hour, Storage Gb-hour 与 RAM Gb-hour，或者通过 json 文件静态配置这几项资源的成本。
OD 按需实例的资源价格通常比较固定，而 AWS Spot 实例的成本波动会比较大，可以通过 SpotCPU/SpotRAM 这两个参数来设置 spot 的默认价格，也可以为 kubecost 提供权限使它动态获取这两项资源的价格。</p>
<p>kubecost 根据每个容器的资源请求 requests 以及资源用量监控进行成本分配，对于未配置 requests 的资源将仅按实际用量监控进行成本分配。</p>
<p>kubecost 的成本统计粒度为 container，而 deployment/service/namespace/label 只是按不同的维度进行成本聚合而已。</p>
<h4 id="2-网络成本的分析" class="headerLink">
    <a href="#2-%e7%bd%91%e7%bb%9c%e6%88%90%e6%9c%ac%e7%9a%84%e5%88%86%e6%9e%90" class="header-mark"></a>2. 网络成本的分析</h4><blockquote>
<p><a href="https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/network-allocation.md" target="_blank" rel="noopener noreffer">https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/network-allocation.md</a></p>
</blockquote>
<p>对提供线上服务的云上 Kubernetes 集群而言，网络成本很可能等于甚至超过计算成本。这里面最贵的，是跨区/跨域传输的流量成本，以及 NAT 网关成本。
使用单个可用区风险比较高，资源池也可能不够用，因此我们通常会使用多个可用区，这就导致跨区流量成本激增。</p>
<p>kubecost 也支持使用 Pod network 监控指标对整个集群的流量成本进行拆分，kubecost 会部署一个绑定 hostNetwork 的 daemonset 来采集需要的网络指标，提供给 prometheus 拉取，再进行进一步的分析。</p>
<p>kubecost 将网络流量分成如下几类：</p>
<ul>
<li>in-zone: 免费流量</li>
<li>in-region: 跨区流量，国外的云服务商基本都会对跨区流量收费</li>
<li>cross-region: 跨域流量</li>
</ul>
<p>更多的待研究，看 kubecost 官方文档吧。</p>
<blockquote>
<p>另外还看到 kubecost 有忽略 s3 流量（因为不收费）的 issue: <a href="https://github.com/kubecost/cost-model/issues/517" target="_blank" rel="noopener noreffer">https://github.com/kubecost/cost-model/issues/517</a></p>
</blockquote>
<h3 id="kubecost-api" class="headerLink">
    <a href="#kubecost-api" class="header-mark"></a>kubecost API</h3><blockquote>
<p><a href="https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/apis.md" target="_blank" rel="noopener noreffer">https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/apis.md</a></p>
</blockquote>
<ul>
<li>成本拆分文档：https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/cost-allocation.md</li>
<li>成本拆分 API 文档：https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/allocation.md</li>
</ul>
<p>查询成本拆分结果的 API 示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">requests</span>
</span></span><span class="line"><span class="cl"><span class="n">resp</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">&#34;http://localhost:9090/model/allocation&#34;</span><span class="p">,</span> <span class="n">params</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;window&#34;</span><span class="p">:</span> <span class="s2">&#34;2022-05-05T00:00:00Z,2022-05-06T00:00:00Z&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;aggregate&#34;</span><span class="p">:</span> <span class="s2">&#34;namespace,label:app&#34;</span><span class="p">,</span>  <span class="c1"># 以这几个纬度进行成本聚合</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;external&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>     <span class="c1"># 拆分集群外部的成本（比如 s3/rds/es 等），需要通过其他手段提供外部资源的成本</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;accumulate&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>   <span class="c1"># 累加指定 window 的所有成本</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;shareIdle&#34;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span>   <span class="c1"># 将空闲成本拆分到所有资源上</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;idleByNode&#34;</span><span class="p">:</span> <span class="kc">False</span><span class="p">,</span>  <span class="c1"># 基于节点进行空闲资源的统计</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;shareTenancyCosts&#34;</span><span class="p">:</span> <span class="kc">True</span><span class="p">,</span>  <span class="c1"># 在集群的多个租户之间共享集群管理成本、节点数据卷成本。这部分成本将被添加到 `sharedCost` 字段中</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;shareNamespaces&#34;</span><span class="p">:</span> <span class="s2">&#34;kube-system,kubecost,istio-system,monitoring&#34;</span><span class="p">,</span>  <span class="c1"># 将这些名字空间的成本设为共享成本</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;shareLabels&#34;</span><span class="p">:</span> <span class="s2">&#34;&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;shareCost&#34;</span><span class="p">:</span> <span class="kc">None</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="s2">&#34;shareSplit&#34;</span><span class="p">:</span> <span class="s2">&#34;weighted&#34;</span><span class="p">,</span>  <span class="c1"># 共享成本的拆分方法，weight 加权拆分，even 均分</span>
</span></span><span class="line"><span class="cl"><span class="p">})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">resp_json</span> <span class="o">=</span> <span class="n">resp</span><span class="o">.</span><span class="n">json</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">resp_json</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">resp_json</span><span class="p">[</span><span class="s1">&#39;data&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查询结果中有这几种特殊成本类别：</p>
<ul>
<li><code>__idle__</code>: 未被占用的空闲资源消耗的成本</li>
<li><code>__unallocated_</code>: 不含有 <code>aggregate</code> 对应维度的成本，比如按 <code>label:app</code> 进行聚合，不含有 <code>app</code> 这个 label 的 pod 成本就会被分类到此标签</li>
<li><code>__unmounted__</code>: 未挂载 PV 的成本</li>
</ul>
<p>此外如果使用 kubecost 可视化面板，可能还会看到一个 <code>other</code> 类别，这是为了方便可视化，把成本太低的一些指标聚合展示了。</p>
<h3 id="kubecost-与-aws-集成" class="headerLink">
    <a href="#kubecost-%e4%b8%8e-aws-%e9%9b%86%e6%88%90" class="header-mark"></a>Kubecost 与 AWS 集成</h3><blockquote>
<p><a href="https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/aws-cloud-integrations.md" target="_blank" rel="noopener noreffer">https://github.com/kubecost/docs/blob/b7e9d25994ce3df6b3936a06023588f2249554e5/aws-cloud-integrations.md</a></p>
</blockquote>
<blockquote>
<p><a href="https://github.com/kubecost/docs/blob/main/aws-node-price-reconcilitation-methodology.md" target="_blank" rel="noopener noreffer">https://github.com/kubecost/docs/blob/main/aws-node-price-reconcilitation-methodology.md</a></p>
</blockquote>
<p>TBD</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/kubecost/cost-model" target="_blank" rel="noopener noreffer">kubecost</a>: kubecost 应该是目前最优秀的开源成本分析工具了，self-hosted 是免费的，也提供收费的云上版本，值得研究。
<ul>
<li>文档：https://github.com/kubecost/docs</li>
</ul>
</li>
<li><a href="https://github.com/gocrane/crane" target="_blank" rel="noopener noreffer">crane</a>: 腾讯开源的一款 Kubernetes 成本优化工具，支持成本报表以及 EHPA 两个功能，才刚开源几个月，目前还比较简陋。</li>
<li><a href="https://www.finops.org/projects/calculating-container-costs/" target="_blank" rel="noopener noreffer">Calculating Container Costs - FinOps</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/523045177" target="_blank" rel="noopener noreffer">CPU利用率从10%提升至60%：中型企业云原生成本优化实战指南 - 星汉未来(Galaxy-Future)</a></li>
<li><a href="https://cloud.tencent.com/document/product/457/57732" target="_blank" rel="noopener noreffer">资源利用率分析和优化建议 - 腾讯云容器服务</a></li>
</ul>
]]></content></entry><entry><title type="html">变革与创新</title><link href="https://thiscute.world/posts/revolution-and-innovation/"/><id>https://thiscute.world/posts/revolution-and-innovation/</id><author><name>ryan4yin</name></author><published>2022-03-28T00:40:00+08:00</published><updated>2022-03-28T00:40:00+08:00</updated><content type="html"><![CDATA[<p>最近在学区块链技术，跟群友讨论时，一位群友抛出了他的观点：「所以智能合约，本质上依然是一个特殊的协议吧，只是套上了一个看起来高大上的词语而本质依然属于一种通信协议的东西，这么一想如果拆解开来实际上也应该没什么特别的。」</p>
<p>是啊，这样说的话，区块链技术确实挺简单的，没啥新的东西。底层就是各种现代密码学算法跟通讯协议而已，这些都是经过了几十年发展，已经很成熟的技术或者概念了。
但是中本聪把这些旧技术组合到一起，搞了个比特币，没几年就引发了加密货币狂潮，就连 GPU 都因为加密货币的发展价格一路狂飙。
2015 年以太坊往区块链上加了个功能：可以运行任何图灵完备的计算机程序（合约），编译成 EVM 字节码即可丢到以太坊区块链上运行。运行程序这样一件事本身有什么特殊的么？是台计算机都可以跑程序，但是以太坊第一个提出在区块链上跑图灵完备的程序，这导致以太坊成为了目前世界上第二大区块链系统，并且形成了一个庞大的开发者社区，目前网络上有多不胜数的以太坊开发教程及资料。</p>
<p>区块链技术仅仅只是以新的方式，组合使用了一系列成熟的工具而已，但是却引发了世界性的金融变革，甚至以太坊还在这之上研究出了更多的妙用，提出了 Web3.0 的概念。</p>
<p><strong>现有技术的新用法，也完全可以形成一场革命性的变革，甚至这个新用法可以非常简单，关键在于你能否发现这样一种用法，并且意识到它可能存在的价值</strong>。
这个是非常非常难的，微软曾经没看懂开源跟云计算的威力，诺基亚曾经觉得安卓就是垃圾不足为惧，很多搞金融的曾经觉得加密货币就是个笑话。
恰如很多现在丢了工作的传统运维，可能以前也是觉得容器跟云计算没啥特别的，影响不到自己吧。</p>
<p><strong>在没被新技术骑脸之前，一般人是很难感知到它对自己的影响的</strong>。</p>
<p>所以作为一名普通的技术人，我们也只能时时关注自己核心领域内各项新技术的发展，评估它们的潜力与价值，尽力看清它们的本质。
甚至偶尔也要拓展自己的视野去了解下其他关联领域的变化，这样才能降低自己被时代抛弃的概率。</p>
<p>每个新兴领域都不缺乏时代的弄潮儿，而我们普通人，只能未雨绸缪，尽量打造好自己的技术小船，不致被时代的大潮倾翻。</p>
<p>最后回到正题，我这个周末才刚学了两天区块链，还没搞明白智能合约是个啥，更遑论看清「智能合约的潜在价值」了，但是既然区块链是目前的一个风口，这么多人鼓吹，我觉得是值得花点时间搞清楚它导致是个啥的。
区块链、Web3.0 DAO NFT DeFi 这样的新概念，单单执着眼于别人的鼓吹或者贬低，只会是雾里看花一知半解。只有自己搞懂它，才有机会把握住它的本质。</p>
<p>路途漫漫，诸君共勉。</p>
]]></content></entry><entry><title type="html">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</title><link href="https://thiscute.world/posts/about-tls-cert/"/><id>https://thiscute.world/posts/about-tls-cert/</id><author><name>ryan4yin</name></author><published>2022-03-14T00:00:00+08:00</published><updated>2022-03-14T00:00:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文基本上是一篇原创文章，但是行文有点生硬，仍然在优化中，不太适合初学者阅读。</p>
</blockquote>
<p>《写给开发人员的实用密码学》系列文章目录:</p>
<ul>
<li><a href="/posts/practical-cryptography-basics-1/" rel="">写给开发人员的实用密码学（一）—— 概览</a></li>
<li><a href="/posts/practical-cryptography-basics-2-hash/" rel="">写给开发人员的实用密码学（二）—— 哈希函数</a></li>
<li><a href="/posts/practical-cryptography-basics-3-key-derivation-function/" rel="">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</a></li>
<li><a href="/posts/practical-cryptography-basics-4-secure-random-generators/" rel="">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</a></li>
<li><a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a></li>
<li><a href="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/" rel="">写给开发人员的实用密码学（六）—— 对称密钥加密算法</a></li>
<li><a href="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/" rel="">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</a></li>
<li><a href="/posts/about-tls-cert" rel="">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></li>
<li>待续</li>
</ul>
<h2 id="更新记录" class="headerLink">
    <a href="#%e6%9b%b4%e6%96%b0%e8%ae%b0%e5%bd%95" class="header-mark"></a>更新记录</h2><ul>
<li><strong>2021-01-17</strong>: 完成 TLS 协议简介、数字证书介绍、数字证书的申请或生成方法、mTLS 介绍、TLS 协议的破解手段</li>
<li><strong>2022-03-13</strong> ~ <strong>2022-03-14</strong>: 重新整理补充，改写为《写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议》，整合进我的实用密码学系列文章中
<ul>
<li>补充 PKI 公钥基础架构及 X509 证书标准介绍</li>
</ul>
</li>
<li>TODO:
<ul>
<li>补充 TLS 协议的逆向手段</li>
<li>基于 <a href="https://shoujo.ink/2021/11/cfssl-%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E5%88%86%E6%9E%90/" target="_blank" rel="noopener noreffer">cfssl</a> 详细介绍 PKI 的各项组件</li>
<li>基于 PKI 的应用服务间身份识别技术：<a href="https://github.com/spiffe/spiffe" target="_blank" rel="noopener noreffer">SPIFF ID</a>
<ul>
<li>SPIFF ID 是云原生领域的标准，<a href="https://shoujo.ink/2021/10/istio-%E5%AE%89%E5%85%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8B-pki-%E4%B8%8E%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8/" target="_blank" rel="noopener noreffer">服务网格项目 Istio 就使用了 SPIFF ID 作为安全命名</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="零前言" class="headerLink">
    <a href="#%e9%9b%b6%e5%89%8d%e8%a8%80" class="header-mark"></a>零、前言</h2><p>现代人的日常生活中，HTTPS 协议几乎无处不在，我们每天浏览网页时、用手机刷京东淘宝时、甚至每天秀自己绿色的健康码时，都在使用 HTTPS 协议。</p>
<p>作为一个开发人员，我想你应该多多少少有了解一点 HTTPS 协议。
你可能知道 HTTPS 是一种加密传输协议，能保证数据传输的保密性。
如果你拥有部署 HTTPS 服务的经验，那你或许还懂如何申请权威 HTTPS 证书，并配置在 Nginx 等 Web 程序上。</p>
<p>但是你是否清楚 HTTPS 是由 HTTP + TLS 两种协议组合而成的呢？
更进一步你是否有抓包了解过 TLS 协议的完整流程？是否清楚它加解密的底层原理？是否清楚 Nginx 的 HTTPS 配置中一堆密码学参数的真正含义？是否知道 TLS 协议有哪些弱点、存在哪些攻击手段、如何防范？</p>
<p>我们在《写给开发人员的实用密码学》的前七篇文章中已经学习了许多的密码学概念与算法，接下来我们就利用这些知识，深度剖析下 HTTPS 协议中的数字证书以及 TLS 协议。</p>
<h2 id="一数字证书与-pki-公钥基础架构" class="headerLink">
    <a href="#%e4%b8%80%e6%95%b0%e5%ad%97%e8%af%81%e4%b9%a6%e4%b8%8e-pki-%e5%85%ac%e9%92%a5%e5%9f%ba%e7%a1%80%e6%9e%b6%e6%9e%84" class="header-mark"></a>一、数字证书与 PKI 公钥基础架构</h2><p>我们在前面已经学习了「对称密码算法」与「非对称密码算法」两个密码学体系，这里做个简单的总结。</p>
<ul>
<li><strong>对称密码算法（如 AES/ChaCha20）</strong>: <strong>计算速度快、安全强度高，但是缺乏安全交换密钥的手段、密钥的保存和管理也很困难</strong>。</li>
<li><strong>非对称密码算法（如 RSA/ECC）: 计算速度慢，但是它解决了上述对称密码算法最大的两个缺陷，一是给出了安全的密钥交换算法 DHE/ECDHE，二呢它的公钥是可公开的，这降低了密钥的保存与管理难度</strong>。</li>
</ul>
<p>但是非对称密码算法仍然存在一些问题:</p>
<ul>
<li><strong>公钥该如何分发</strong>？比如 Alice 跟 Bob 交换公钥时，如何确定收到的确实是对方的公钥，也就是说如何确认公钥的真实性、完整性、认证其来源身份？
<ul>
<li>前面我们已经学习过，DH/ECDH 密钥交换协议可以防范嗅探攻击（窃听），但是<strong>无法抵挡中间人攻击</strong>（中继）。</li>
</ul>
</li>
<li>如果 Alice 的私钥泄漏了，她该<strong>如何作废自己旧的公钥</strong>？</li>
</ul>
<p>数字证书与公钥基础架构就是为了解决上述问题而设计的。</p>
<p>首先简单介绍下公钥基础架构（Public Key Infrastructure），它是一组由硬件、软件、参与者、管理政策与流程组成的基础架构，其目的在于创造、管理、分配、使用、存储以及撤销数字证书。
PKI 是一个总称，而并非指单独的某一个规范或标准，因此显然数字证书的规范（X.509）、存储格式（PKCS系列标准、DER、PEM）、TLS 协议等都是 PKI 的一部分。</p>
<p>我们下面从公钥证书开始逐步介绍 PKI 中的各种概念及架构。</p>
<h3 id="1-公钥证书" class="headerLink">
    <a href="#1-%e5%85%ac%e9%92%a5%e8%af%81%e4%b9%a6" class="header-mark"></a>1. 公钥证书</h3><p>前面我们介绍了公钥密码系统存在的一个问题是「在分发公钥时，难以确认公钥的真实性、完整性及其来源身份」。
PKI 通过「数字证书」+「证书认证机构」来解决这个问题，下面先简单介绍下「数字证书」。</p>
<p><strong>数字证书</strong>指的其实就是<strong>公钥证书</strong>（也可直接简称为<strong>证书</strong>）。
在现代网络通讯中通行的公钥证书标准名为 <a href="https://zh.wikipedia.org/wiki/X.509" target="_blank" rel="noopener noreffer">X.509</a> v3, 由 <a href="https://tools.ietf.org/html/rfc5280" target="_blank" rel="noopener noreffer">RFC5280</a> 定义。
X.509 v3 格式被广泛应用在 TLS/SSL 等众多加密通讯协议中，它规定公钥证书应该包含如下内容:</p>
<ul>
<li>证书
<ul>
<li><strong>序列号</strong>（Serial Number）: 用以识别每一张证书，在作废证书的时候会用到它</li>
<li><strong>版本</strong>: 证书的规范版本</li>
<li><strong>公钥</strong>（Public Key）: 我们的核心目的就是分发公钥，因此显然要把公钥放在证书里面</li>
<li><strong>公钥指纹</strong>: 即公钥的 Hash 值，当前大部分证书都使用 SHA256 计算此指纹</li>
<li><strong>公钥用途</strong>（Key Usage + Extended Key Usage）: 记录了此证书可用于哪些用途——数字签名、身份认证等</li>
<li><strong>主体</strong>（Subject）: 即姓名、组织、邮箱、地址等证书拥有者的个人信息。
<ul>
<li>有了这个我们就能确认证书的拥有者了</li>
</ul>
</li>
<li><strong>证书有效期的开始时间、结束时间</strong>（Not Before + Not After）: 为了确保安全性，每个证书都会记录一个自身的有效期
<ul>
<li>证书一旦签发并公开，随着科技的发展、时间的推移，其公钥的安全性会慢慢减弱</li>
<li>因此每个证书都应该包含一个合理的有效期，证书的拥有者应该在有效期截止前更换自身的证书以确保安全性</li>
</ul>
</li>
<li><strong>签发者</strong>（Issuer）: 签发此证书的「签发者」信息</li>
<li>其他拓展信息</li>
</ul>
</li>
<li><strong>数字签名</strong>（Signature）: 我们还需要对上面整个证书计算一个数字签名，来确保这些数据的真实性、完整性，确保证书未被恶意篡改/伪造
<ul>
<li>此数字签名由「证书签发者（Issuer）」使用其私钥+证书内容计算得出</li>
</ul>
</li>
<li><strong>数字签名算法</strong>（Signature Algorithm）: 证书所使用的签名算法，常用的有 <code>RSA-SHA-256</code> 与 <code>ECDSA-SHA-256</code></li>
</ul>
<p>每个证书都有唯一的 ID，这样在私钥泄漏的情况下，我们可以通过公钥基础设施的 OCSP（Online Certificate Status Protocol）协议吊销某个证书。
吊销证书的操作还是比较罕见的，毕竟私钥泄漏并不容易遇到，因此这里就略过不提了，有需要的可以自行搜索。</p>
<p>使用 Firefox 查看网站 <code>https://www.google.com</code> 的证书信息如下：</p>
<figure><img src="/images/about-tls-cert/cert-content.webp"/><figcaption>
            <h4>Google 证书内容</h4>
        </figcaption>
</figure>

<h3 id="2-证书链" class="headerLink">
    <a href="#2-%e8%af%81%e4%b9%a6%e9%93%be" class="header-mark"></a>2. 证书链</h3><p>前面介绍证书内容时，提到了每个证书都包含「签发者（Issuer）」信息，并且还包含「签发者」使用「证书内容」与「签发者私钥」生成的数字签名。</p>
<p>那么在证书交换时，如何验证证书的真实性、完整性及来源身份呢？
根据「数字签名」算法的原理，显然需要使用「签发者公钥」来验证「被签发证书」中的签名。</p>
<p>仍然辛苦 Alice 与 Bob 来演示下这个流程:</p>
<ul>
<li>假设现在 Alice 生成了自己的公私钥对，她想将公钥发送给远在千里之外的 Bob，以便与 Bob 进行加密通讯</li>
<li>但是如果 Alice 直接发送公钥给 Bob，Bob 并无法验证其来源是 Alice，也无法验证证书是否被篡改</li>
</ul>
<p>PKI 引入了一个<strong>可信赖的第三者</strong>（Trusted third party，TTP）来解决这个问题。
在 Alice 与 Bob 的案例中，就是说还有个第三者 <strong>Eve</strong>，他使用自己的私钥为自己的公钥证书签了名，生成了一个「自签名证书」，并且已经提前将这个「自签名证书」分发（比如当面交付、物理分发 emmm）给了 Alice 跟 Bob.</p>
<ul>
<li>现在 Alice 首先使用自己的公钥以及个人信息制作了自己的公钥证书，但是这个证书还缺乏一个 Issuer 属性以及数字签名，我们把它叫做「证书签名请求（Certificate Signing Request, CSR）」</li>
<li>为了实现将证书安全传递给远在千里之外的 Bob，Alice 找到 Eve，将这个 CSR 文件提交给 Eve</li>
<li>Eve 验证了 Alice 的身份后，再使用这个 CSR 签发出完整的证书文件（Issuer 就填 Eve，然后 Eve 使用自己的私钥计算出证书的数字签名）交付给 Alice
<ul>
<li>Eve 可是曾经跨越千里之遥，将自己的公钥证书分发给了 Bob，所以在给 Alice 签发证书时，他显然可能会要求 付「签名费」。目前许多证书机构就是靠这个赚钱的，当然也有非盈利的证书机构如 Let&rsquo;s Encrypt.</li>
</ul>
</li>
<li>现在 Alice 再将经 Eve 签名的证书发送给 Bob</li>
<li>Bob 收到证书后，看到 Issuer 是 Eve，于是找出以前 Eve 给他的「自签名证书」，然后使用其中的公钥验证收到的证书</li>
<li>如果验证成功，就说明证书的内容是经过 Eve 认证的。如果 Eve 没老糊涂了，那这个证书应该确实就是 Alice 的。</li>
<li>如果验证失败，那说明这是某个攻击者伪造的证书。</li>
</ul>
<p>在现实世界中，Eve 这个角色被称作「<strong>证书认证机构</strong>（Certification Authority, CA）」，全世界只有几十家这样的权威机构，它们都通过了各大软件厂商的严格审核，从而将根证书（CA 证书）直接内置于主流操作系统与浏览器中，也就是说早就提前分发给了因特网世界的几乎所有用户。由于许多操作系统或软件的更新迭代缓慢（2022 年了还有人用 XP 你敢信？），根证书的有效期通常都在十年以上。</p>
<p>但是，如果 CA 机构直接使用自己的私钥处理各种证书签名请求，这将是非常危险的。
因为全世界有海量的 HTTPS 网站，也就是说有海量的证书需求，可一共才几十家 CA 机构。
频繁的动用私钥会产生私钥泄漏的风险，如果这个私钥泄漏了，那将直接影响海量网站的安全性。</p>
<p>PKI 架构使用「<strong>数字证书链</strong>（也叫做<strong>信任链</strong>）」的机制来解决这个问题:</p>
<ul>
<li>CA 机构首先生成自己的根证书与私钥，并使用私钥给根证书签名
<ul>
<li>因为私钥跟证书本身就是一对，因此根证书也被称作「自签名证书」</li>
</ul>
</li>
<li>CA 根证书被直接交付给各大软硬件厂商，内置在主流的操作系统与浏览器中</li>
<li>然后 CA 机构再使用私钥签发一些所谓的「<strong>中间证书</strong>」，之后就把私钥雪藏了，非必要不会再拿出来使用。
<ul>
<li>通常离线存储在安全地点</li>
<li>中间层证书的有效期通常会比根证书短一些</li>
<li>部分中间证书会被作为备份使用，平常不会启用。</li>
</ul>
</li>
<li>CA 机构使用这些中间证书的私钥，为用户提交的所有 CSR 请求签名</li>
</ul>
<p>画个图来表示大概是这么个样子：</p>
<figure><img src="/images/about-tls-cert/chain-of-trust.webp"/>
</figure>

<p>CA 机构也可能会在经过严格审核后，为其他机构签发中间证书，这样就能赋予其他机构签发证书的权利，而且根证书的安全性不受影响。</p>
<p>如果你访问某个 HTTPS 站点发现浏览器显示小绿锁，那就说明这个证书是由某个权威<strong>认证机构</strong>签发的，其信息是经过这些机构认证的。</p>
<p>上述这个全球互联网上，由<strong>证书认证机构</strong>、操作系统与浏览器内置的根证书、TLS 加密认证协议、OCSP 证书吊销协议等等组成的架构，我们可以称它为 <strong>Web PKI</strong>.</p>
<p><strong>Web PKI</strong> 通常是可信的，但是并不意味着它们可靠。历史上出现过许多由于安全漏洞（<a href="http://www.ip-guard.net/blog/?p=834" target="_blank" rel="noopener noreffer">2011 DigiNotar 攻击</a>）或者政府要求，证书认证机构将假证书颁发给黑客或者政府机构的情况。获得假证书的人将可以随意伪造站点，而所有操作系统或浏览器都认为这些假站点是安全的，显示小绿锁。</p>
<p>因为<strong>证书认证机构</strong>的可靠性问题以及一些其他的原因，部分个人、企业或其他机构（比如金融机构）会生成自己的根证书与中间证书，然后自行签发证书，构建出自己的 PKI 认证架构，我们可以将它称作<strong>内部 PKI</strong>。
但是这种自己生成的根证书是未内置在操作系统与浏览器中的，为了确保安全性，用户就需要先手动在设备上安装好这个数字证书。
自行签发证书的案例有：</p>
<ul>
<li>微信、支付宝及各种银行客户端中的数字证书与安全性更高的 USB 硬件证书（U 盾），这种涉及海量资金安全甚至国家安全的场景，显然是不能直接前面提到的几十个权威 CA 机构的。</li>
<li>局域网通信，通常是网络管理员生成一个本地 CA 证书安装到所有局域网设备上，再用它的私钥签发其他证书用于局域网安全通信
<ul>
<li>典型的例子是各企业的内部通讯网络，比如 Kubernetes 容器集群</li>
</ul>
</li>
</ul>
<p>现在再拿出前面 <code>https://www.google.com</code> 的证书截图看看，最上方有三个标签页，从左至右依次是「服务器证书」、「中间证书」、「根证书」，可以点进去分别查看这三个证书的各项参数，各位看官可以自行尝试：</p>
<figure><img src="/images/about-tls-cert/cert-content.webp"/><figcaption>
            <h4>Google 证书内容</h4>
        </figcaption>
</figure>

<h4 id="交叉签名" class="headerLink">
    <a href="#%e4%ba%a4%e5%8f%89%e7%ad%be%e5%90%8d" class="header-mark"></a>交叉签名</h4><p>按前面的描述，每个权威认证机构都拥有一个正在使用的根证书，使用它签发出几个中间证书后，就会把它离线存储在安全地点，平常仅使用中间证书签发终端实体证书。
这样实际上每个权威认证机构的证书都形成一颗证书树，树的顶端就是根证书。</p>
<p>实际上在 PKI 体系中，一些证书链上的中间证书会被使用多个根证书进行签名——我们称这为交叉签名。
交叉签名的主要目的是提升证书的兼容性——客户端只要安装有其中任何一个根证书，就能正常验证这个中间证书。
从而使中间证书在较老的设备也能顺利通过证书验证。</p>
<h3 id="3-证书的存储格式与编码标准" class="headerLink">
    <a href="#3-%e8%af%81%e4%b9%a6%e7%9a%84%e5%ad%98%e5%82%a8%e6%a0%bc%e5%bc%8f%e4%b8%8e%e7%bc%96%e7%a0%81%e6%a0%87%e5%87%86" class="header-mark"></a>3. 证书的存储格式与编码标准</h3><blockquote>
<p>证书的格式这一块，是真的五花八门&hellip;沉重的历史包袱&hellip;</p>
</blockquote>
<p>X509 只规定了证书应该包含哪些信息，但是未定义证书该如何存储。为了解决证书的描述与编码存储问题，又出现了如下标准：</p>
<ul>
<li>ASN.1 结构：是一种描述证书格式的方法。
<ul>
<li>它类似 protobuf 数据描述语言、SQL DDL</li>
<li>ASN.1 只规定了该如何描述证书，未定义该如何编码。</li>
</ul>
</li>
<li>将 ASN.1 结构编码存储的格式有
<ul>
<li>DER：一种二进制编码格式</li>
<li>PEM：DER 是二进制格式，不便于复制粘贴，因此出现了 PEM，它是一个文本编码格式（其实就是把 DER 编码后的数据再 Base64 编码下&hellip;）</li>
</ul>
</li>
<li>某些场景下，X.509 信息不够丰富，因此又设计了一些信息更丰富（例如可以包含证书 链、秘钥）的证书封装格式，包括 PKCS #7 和 PKCS #12
<ul>
<li>仍然用 ASN.1 格式描述</li>
<li>基本都是用 DER 编码</li>
</ul>
</li>
</ul>
<p>下面详细介绍下这些相关的标准与格式。</p>
<h4 id="编码存储格式-der-与-pem" class="headerLink">
    <a href="#%e7%bc%96%e7%a0%81%e5%ad%98%e5%82%a8%e6%a0%bc%e5%bc%8f-der-%e4%b8%8e-pem" class="header-mark"></a>编码存储格式 DER 与 PEM</h4><p>DER 是由国际电信联盟（ITU）在 <a href="https://www.itu.int/ITU-T/recommendations/rec.aspx?rec=x.690" target="_blank" rel="noopener noreffer"> ITU-T X.690</a>标准中定义的一种数据编码规则，用于将 ASN.1 结构的信息编码为二进制数据。
直接以 DER 格式存储的证书，大都使用 <code>.cer</code> <code>.crt</code> <code>.der</code> 拓展名，在 Windows 系统比较常见。</p>
<p>而 PEM 格式，即 Privacy-Enhanced Mail，是 openssl 默认使用的证书格式。可用于编码公钥、私钥、公钥证书等多种密码学信息。
PEM 其实就是在 DER 的基础上多做一步——使用 Base64 将 DER 编码出的二进制数据再处理一次，编码成字符串再存储。好处是存储、传输要方便很多，可以直接复制粘贴。</p>
<p>一个 2048 位 RSA 公钥的 PEM 文件内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-----BEGIN PUBLIC KEY-----
</span></span><span class="line"><span class="cl">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyl6q6BkEcEUi9V1/Q7il
</span></span><span class="line"><span class="cl">bngnh1YzG1tM4Hd6XCZQ35OzDN4my9eXWtjoL8YvLYqlYTJqhTHpuptgjF/lmlhg
</span></span><span class="line"><span class="cl">WIMKNNcuDAbvmWExRyZateVrjO9OtgkyJCuGhaum0TIUC+dbZ9L9xsdK/fU1L5BB
</span></span><span class="line"><span class="cl">nPRSYMloH8uE1CbK/DhFUiKp36aHZFfqLPicY3c6/N+k2kIJCEWBY0SROqpqy2Iz
</span></span><span class="line"><span class="cl">yCIP54JSoOoGz6pdtWhd5cEeicr9e7f/WixEES6fgavqIHzhSJBVctpMgFPjFZ/x
</span></span><span class="line"><span class="cl">JJhQVf23WKb3YQQ/0Uc8O7OTDXoUfuJP9UgqvKNh4hPfJA+a4nxkDYhTPfrLHfKY
</span></span><span class="line"><span class="cl">YwIDAQAB
</span></span><span class="line"><span class="cl">-----END PUBLIC KEY-----
</span></span></code></pre></td></tr></table>
</div>
</div><p>PEM 格式的数据通常以 <code>.pem</code> <code>.key</code> <code>.crt</code> <code>.cer</code> 等拓展名存储，直接 <code>cat</code> 一下是不是字符串，就能确认该文件是否是 PEM 格式了。</p>
<p>因为纯文本格式处理起来很方便，大部分场景下证书、公钥、私钥等信息都会被编码成 PEM 格式再进行存储、传输。</p>
<p>openssl 默认使用的输入输出均 PEM 格式。</p>
<h4 id="pkcs1" class="headerLink">
    <a href="#pkcs1" class="header-mark"></a>PKCS#1</h4><p>PKCS#1 是专用于编码 RSA 公私钥的标准，通常被编码为 PEM 格式存储。openssl 生成的 RSA 密钥对默认使用此格式。</p>
<p>这是一个比较陈旧的格式，openssl 之所以默认使用它，主要是为了兼容性。通常建议使用更安全的 PKCS#8 而不是这个。</p>
<p>一个使用 PKCS#1 标准的 2048 位 RSA 公钥文件，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-----BEGIN PUBLIC KEY-----
</span></span><span class="line"><span class="cl">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyl6q6BkEcEUi9V1/Q7il
</span></span><span class="line"><span class="cl">bngnh1YzG1tM4Hd6XCZQ35OzDN4my9eXWtjoL8YvLYqlYTJqhTHpuptgjF/lmlhg
</span></span><span class="line"><span class="cl">WIMKNNcuDAbvmWExRyZateVrjO9OtgkyJCuGhaum0TIUC+dbZ9L9xsdK/fU1L5BB
</span></span><span class="line"><span class="cl">nPRSYMloH8uE1CbK/DhFUiKp36aHZFfqLPicY3c6/N+k2kIJCEWBY0SROqpqy2Iz
</span></span><span class="line"><span class="cl">yCIP54JSoOoGz6pdtWhd5cEeicr9e7f/WixEES6fgavqIHzhSJBVctpMgFPjFZ/x
</span></span><span class="line"><span class="cl">JJhQVf23WKb3YQQ/0Uc8O7OTDXoUfuJP9UgqvKNh4hPfJA+a4nxkDYhTPfrLHfKY
</span></span><span class="line"><span class="cl">YwIDAQAB
</span></span><span class="line"><span class="cl">-----END PUBLIC KEY-----
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="pkcs7--cms" class="headerLink">
    <a href="#pkcs7--cms" class="header-mark"></a>PKCS#7 / CMS</h4><blockquote>
<p>头疼&hellip; PKCS#7 导致是个啥玩意儿？为什么这么多五花八门的格式&hellip;</p>
</blockquote>
<p><a href="https://datatracker.ietf.org/doc/html/rfc5652" target="_blank" rel="noopener noreffer">PKCS#7/CMS</a>，是一个多用途的证书描述格式。
它包含一个数据填充规则，这个填充规则常被用在需要数据填充的分组加密、数字签名等算法中。</p>
<p>另外据说 PKCS#7 也可以被用来描述证书，并以 DER/PEM 格式保存，后缀通常使用 <code>.p7b</code> 或者 <code>.p7c</code>,
这个暂时存疑吧，有需要再研究了。</p>
<h4 id="pkcs8" class="headerLink">
    <a href="#pkcs8" class="header-mark"></a>PKCS#8</h4><p><a href="https://datatracker.ietf.org/doc/html/rfc5958" target="_blank" rel="noopener noreffer">PKCS#8</a> 是一个专门用于编码私钥的标准，可用于编码 DSA/RSA/ECC 私钥。它通常被编码成 PEM 格式存储。</p>
<p>前面介绍了专门用于编码 RSA 的 PKCS#1 标准比较陈旧，而且<a href="https://web.archive.org/web/20081117042916/http://www.gemplus.com/smart/rd/publications/pdf/CJNP00pk.pdf" target="_blank" rel="noopener noreffer">曾经出过漏洞</a>。因此通常建议使用更安全的 PKCS#8 来取代 PKCS#1.</p>
<p>C# Java 等编程语言通常要求使用此格式的私钥，而 Python 的 <a href="https://github.com/pyca/cryptography" target="_blank" rel="noopener noreffer">pyca/cryptography</a> 则支持多种编码格式。</p>
<p>一个非加密 ECC 私钥的 PKCS#8 格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-----BEGIN PRIVATE KEY-----
</span></span><span class="line"><span class="cl">MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQglQanBRiYVPX7F2Rd
</span></span><span class="line"><span class="cl">4CqyjEN0K4qfHw4tM/yMIh21wamhRANCAARsxaI4jT1b8zbDlFziuLngPcExbYzz
</span></span><span class="line"><span class="cl">ePAHUmgWL/ZCeqlODF/l/XvimkjaWC2huu1OSWB9EKuG+mKFY2Y5k+vF
</span></span><span class="line"><span class="cl">-----END PRIVATE KEY-----
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个加密 PKCS#8 私钥的 PEM 格式私钥如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">-----BEGIN ENCRYPTED PRIVATE KEY-----
</span></span><span class="line"><span class="cl">Base64 编码内容
</span></span><span class="line"><span class="cl">-----END ENCRYPTED PRIVATE KEY-----
</span></span></code></pre></td></tr></table>
</div>
</div><p>可使用如下 openssl 命令将 RSA/ECC 私钥转换为 PKCS#8 格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># RSA
</span></span><span class="line"><span class="cl">openssl pkcs8 -topk8 -inform PEM -in rsa-private-key.pem -outform PEM -nocrypt -out rsa-private-key-pkcs8.pem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># ECC 的转换命令与 RSA 完全一致
</span></span><span class="line"><span class="cl">openssl pkcs8 -topk8 -inform PEM -in ecc-private-key.pem -outform PEM -nocrypt -out ecc-private-key-pkcs8.pem
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="pkcs12" class="headerLink">
    <a href="#pkcs12" class="header-mark"></a>PKCS#12</h4><p><a href="https://zh.wikipedia.org/wiki/PKCS_12" target="_blank" rel="noopener noreffer">PKCS#12</a> 是一个归档文件格式，用于实现存储多个私钥及相关的 X.509 证书。</p>
<p>因为保存了私钥，为了安全性它通常是加密的，需要使用 passphrase 解密后才能使用。</p>
<p>PKCS#12 的常用拓展名为 <code>.p12</code> <code>.pfx</code>.</p>
<p>PKCS#12 的主要使用场景是安全地保存、传输私钥及相关的 X.509 证书，比如：</p>
<ul>
<li>微信/支付宝等支付相关的数字证书，通常使用 PKCS#12 格式存储，使用商户号做加密密码，然后编码为 base64 再提供给用户</li>
<li>安卓的 APK 签名证书通常使用 PKCS#12 格式存储，拓展名为 <code>.keystore</code> 或者 <code>.jks</code>.</li>
</ul>
<p>PEM 格式转 PKCS#12（公钥和私钥都放里面）:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># </span>
</span></span><span class="line"><span class="cl">openssl pkcs12 -export -in client.crt -inkey client.key -out client.p12
</span></span><span class="line"><span class="cl"><span class="c1"># 按提示输入保护密码</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>从 PKCS#12 中分别提取出 PEM 格式的公钥与私钥:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">openssl pkcs12 -in xxx.p12 -out xxx.crt -clcerts -nokeys
</span></span><span class="line"><span class="cl">openssl pkcs12 -in xxx.p12 -out xxx.key -nocerts -nodes
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-证书支持保护的域名类型" class="headerLink">
    <a href="#4-%e8%af%81%e4%b9%a6%e6%94%af%e6%8c%81%e4%bf%9d%e6%8a%a4%e7%9a%84%e5%9f%9f%e5%90%8d%e7%b1%bb%e5%9e%8b" class="header-mark"></a>4. 证书支持保护的域名类型</h3><p>TLS 证书支持配置多个域名，并且支持所谓的通配符（泛）域名。
但是通配符域名证书的匹配规则，<strong>和 DNS 解析中的匹配规则并不一致</strong>！</p>
<p>根据<a href="https://help.aliyun.com/document_detail/28542.html" target="_blank" rel="noopener noreffer">证书选型和购买 - **阿里云文档</a> 的解释，<strong>通配符证书只支持同级匹配</strong>，详细说明如下:</p>
<ol>
<li>一级通配符域名: 可保护该通配符域名（主域名）自身和该域名所有的一级子域名。
<ul>
<li><strong>例如</strong>: 一级通配符域名 <code>*.aliyun.com</code> 可以用于保护 <code>aliyun.com</code>、<code>www.aliyun.com</code> 以及其他所有一级子域名。
但是不能用于保护任何二级子域名，如 <code>xx.aa.aliyun.com</code></li>
</ul>
</li>
<li>二级或二级以上通配符域名: 只能保护该域名同级的所有通配域名，不支持保护该通配符域名本身。
<ul>
<li><strong>例如</strong>: <code>*.a.aliyun.com</code> 只支持保护它的所有同级域名，不能用于保护三级子域名。</li>
</ul>
</li>
</ol>
<p>要想保护多个二三级子域，只能在生成 TLS 证书时，添加多个通配符域名。
因此设计域名规则时，要考虑到这点，尽量不要使用层级太深的域名！有些信息可以通过 <code>-</code> 来拼接以减少域名层级，比如阿里云的 oss 域名:</p>
<ol>
<li>公网: <code>oss-cn-shenzhen.aliyuncs.com</code></li>
<li>内网: <code>oss-cn-shenzhen-internal.aliyuncs.com</code></li>
</ol>
<p>此外也可直接为 IP 地址签发证书，IP 地址可以记录在证书的 SAN 属性中。
在自己生成的证书链中可以为局域网 IP 或局域网域名生成本地签名证书。
此外在因特网中也有一些权威认证机构提供为公网 IP 签发证书的服务，一个例子是 Cloudflare 的 <a href="https://1.1.1.1" target="_blank" rel="noopener noreffer">https://1.1.1.1</a>, 使用 Firefox 查看其证书，可以看到是一个由 DigiCert 签发的 ECC 证书，使用了 P-256 曲线：</p>
<figure><img src="/images/about-tls-cert/1.1.1.1-cert.webp"/><figcaption>
            <h4> Cloudflare 的 IP 证书</h4>
        </figcaption>
</figure>

<h3 id="5-生成自己的证书链" class="headerLink">
    <a href="#5-%e7%94%9f%e6%88%90%e8%87%aa%e5%b7%b1%e7%9a%84%e8%af%81%e4%b9%a6%e9%93%be" class="header-mark"></a>5. 生成自己的证书链</h3><blockquote>
<p><a href="https://github.com/openssl/openssl" target="_blank" rel="noopener noreffer">OpenSSL</a> 是目前使用最广泛的网络加密算法库，这里以它为例介绍证书的生成。
另外也可以考虑使用 CloudFalre 开源的 PKI 工具 <a href="https://github.com/cloudflare/cfssl" target="_blank" rel="noopener noreffer">cfssl</a>.</p>
</blockquote>
<p>前面介绍了，在局域网通信中通常使用本地证书链来保障通信安全，这通常有如下几个原因。</p>
<ol>
<li>在内网环境下，管理员将本地 CA 证书安装到所有局域网设备上，因此并无必要向权威 CA 机构申请证书</li>
<li>内网环境使用的可能是非公网域名（<code>xxx.local</code>/<code>xxx.lan</code>/<code>xxx.srv</code> 等），甚至可能直接使用局域网 IP 通信，权威 CA 机构不签发这种类型的证书</li>
<li>本地证书链完全受自己控制，可以自己设置安全强度、证书年限等等，而且不受权威 CA 机构影响。</li>
<li>权威 CA 机构不签发客户端证书，因为客户端不一定有固定的 IP 地址或者域名。客户端证书需要自己签发。</li>
</ol>
<p>下面介绍下如何使用 OpenSSL 生成一个本地 CA 证书链，并签发用于安全通信的服务端证书，可用于 HTTPS/QUIC 等协议。</p>
<h4 id="1-生成-rsa-证书链" class="headerLink">
    <a href="#1-%e7%94%9f%e6%88%90-rsa-%e8%af%81%e4%b9%a6%e9%93%be" class="header-mark"></a>1. 生成 RSA 证书链</h4><p>到目前为止 RSA 仍然是应用最广泛的非对称加密方案，几乎所有的根证书都是使用的 2048 位或者 4096 位的 RSA 密钥对。</p>
<p>对于 RSA 算法而言，越长的密钥能提供越高的安全性，当前使用最多的 RSA 密钥长度仍然是 2048 位，但是 2048 位已被一些人认为不够安全了，密码学家更建议使用 3072 位或者 4096 位的密钥。</p>
<p>生成一个 2048 位的 RSA 证书链的流程如下:</p>
<blockquote>
<p>OpenSSL 的 CSR 配置文件官方文档: <a href="https://www.openssl.org/docs/manmaster/man1/openssl-req.html" target="_blank" rel="noopener noreffer">https://www.openssl.org/docs/manmaster/man1/openssl-req.html</a></p>
</blockquote>
<ol>
<li>编写证书签名请求的配置文件 <code>csr.conf</code>:
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ req ]
</span></span><span class="line"><span class="cl">prompt = no
</span></span><span class="line"><span class="cl">default_md = sha256  # 在签名算法中使用 SHA-256 计算哈希值
</span></span><span class="line"><span class="cl">req_extensions = req_ext
</span></span><span class="line"><span class="cl">distinguished_name = dn
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[ dn ]
</span></span><span class="line"><span class="cl">C = CN  # Contountry
</span></span><span class="line"><span class="cl">ST = Guangdong
</span></span><span class="line"><span class="cl">L = Shenzhen
</span></span><span class="line"><span class="cl">O = Xxx
</span></span><span class="line"><span class="cl">OU = Xxx-SRE
</span></span><span class="line"><span class="cl">CN = *.svc.local  # 泛域名，这个字段已经被 chrome/apple 弃用了。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[ alt_names ]  # 备用名称，chrome/apple 目前只信任这里面的域名。
</span></span><span class="line"><span class="cl">DNS.1 = *.svc.local  # 一级泛域名
</span></span><span class="line"><span class="cl">DNS.2 = *.aaa.svc.local  # 二级泛域名
</span></span><span class="line"><span class="cl">DNS.3 = *.bbb.svc.local  # 二级泛域名
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[ req_ext ]
</span></span><span class="line"><span class="cl">subjectAltName = @alt_names
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[ v3_ext ]
</span></span><span class="line"><span class="cl">subjectAltName=@alt_names  # Chrome 要求必须要有 subjectAltName(SAN)
</span></span><span class="line"><span class="cl">authorityKeyIdentifier=keyid,issuer:always
</span></span><span class="line"><span class="cl">basicConstraints=CA:FALSE
</span></span><span class="line"><span class="cl">keyUsage=keyEncipherment,dataEncipherment,digitalSignature
</span></span><span class="line"><span class="cl">extendedKeyUsage=serverAuth,clientAuth
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>此文件的详细文档</strong>: <a href="https://www.openssl.org/docs/man1.1.1/man5/" target="_blank" rel="noopener noreffer">OpenSSL file formats and conventions</a></li>
</ul>
</li>
<li>生成证书链与服务端证书:
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 1. 生成本地 CA 根证书的私钥</span>
</span></span><span class="line"><span class="cl">openssl genrsa -out ca.key <span class="m">2048</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 使用私钥签发出 CA 根证书</span>
</span></span><span class="line"><span class="cl"><span class="c1">## CA 根证书的有效期尽量设长一点，因为不方便更新换代，这里设了 100 年</span>
</span></span><span class="line"><span class="cl">openssl req -x509 -new -nodes -key ca.key -subj <span class="s2">&#34;/CN=MyLocalRootCA&#34;</span> -days <span class="m">36500</span> -out ca.crt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 生成服务端证书的 RSA 私钥（2048 位）</span>
</span></span><span class="line"><span class="cl">openssl genrsa -out server.key <span class="m">2048</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 4. 通过第一步编写的配置文件，生成证书签名请求（公钥+申请者信息）</span>
</span></span><span class="line"><span class="cl">openssl req -new -key server.key -out server.csr -config csr.conf
</span></span><span class="line"><span class="cl"><span class="c1"># 5. 使用 CA 根证书直接签发服务端证书，这里指定服务端证书的有效期为 3650 天</span>
</span></span><span class="line"><span class="cl">openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -CAcreateserial -out server.crt -days <span class="m">3650</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -extensions v3_ext -extfile csr.conf
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>简单起见这里没有生成中间证书，直接使用根证书签发了用于安全通信的服务端证书。</p>
<h4 id="2-生成-ecc-证书链" class="headerLink">
    <a href="#2-%e7%94%9f%e6%88%90-ecc-%e8%af%81%e4%b9%a6%e9%93%be" class="header-mark"></a>2. 生成 ECC 证书链</h4><p>在上一篇文章中我们已经介绍过了，ECC 加密方案是新一代非对称加密算法，是 RSA 的继任者，在安全性相同的情况下，ECC 拥有比 RSA 更快的计算速度、更少的内存以及更短的密钥长度。</p>
<p>对于 ECC 加密方案而言，不同的椭圆曲线生成的密钥对提供了不同程度的安全性。
各个组织（ANSI X9.62、NIST、SECG）命名了多种曲线，可通过如下命名查看 openssl 支持的所有椭圆曲线名称:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">openssl ecparam -list_curves
</span></span></code></pre></td></tr></table>
</div>
</div><p>目前在 TLS 协议以及 JWT 签名算法中，目前应该最广泛的椭圆曲线仍然是 NIST 系列：</p>
<ul>
<li><code>P-256</code>: 到目前为止 P-256 应该仍然是应用最为广泛的椭圆曲线
<ul>
<li>在 openssl 中对应的名称为 <code>prime256v1</code></li>
</ul>
</li>
<li><code>P-384</code>
<ul>
<li>在 openssl 中对应的名称为 <code>secp384r1</code></li>
</ul>
</li>
<li><code>P-521</code>
<ul>
<li>在 openssl 中对应的名称为 <code>secp521r1</code></li>
</ul>
</li>
</ul>
<p>生成一个使用 <code>P-384</code> 曲线的 ECC 证书的示例如下:</p>
<ol>
<li>编写证书签名请求的配置文件 <code>ecc-csr.conf</code>:
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">[ req ]
</span></span><span class="line"><span class="cl">prompt = no
</span></span><span class="line"><span class="cl">default_md = sha256 # 在签名算法中使用 SHA-256 计算哈希值
</span></span><span class="line"><span class="cl">req_extensions = req_ext
</span></span><span class="line"><span class="cl">distinguished_name = dn
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[ dn ]
</span></span><span class="line"><span class="cl">C = CN  # Contountry
</span></span><span class="line"><span class="cl">ST = Guangdong
</span></span><span class="line"><span class="cl">L = Shenzhen
</span></span><span class="line"><span class="cl">O = Xxx
</span></span><span class="line"><span class="cl">OU = Xxx-SRE
</span></span><span class="line"><span class="cl">CN = *.svc.local  # 泛域名，这个字段已经被 chrome/apple 弃用了。
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[ alt_names ]  # 备用名称，chrome/apple 目前只信任这里面的域名。
</span></span><span class="line"><span class="cl">DNS.1 = *.svc.local  # 一级泛域名
</span></span><span class="line"><span class="cl">DNS.2 = *.aaa.svc.local  # 二级泛域名
</span></span><span class="line"><span class="cl">DNS.3 = *.bbb.svc.local  # 二级泛域名
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[ req_ext ]
</span></span><span class="line"><span class="cl">subjectAltName = @alt_names
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">[ v3_ext ]
</span></span><span class="line"><span class="cl">subjectAltName=@alt_names  # Chrome 要求必须要有 subjectAltName(SAN)
</span></span><span class="line"><span class="cl">authorityKeyIdentifier=keyid,issuer:always
</span></span><span class="line"><span class="cl">basicConstraints=CA:FALSE
</span></span><span class="line"><span class="cl">keyUsage=keyEncipherment,dataEncipherment,digitalSignature
</span></span><span class="line"><span class="cl">extendedKeyUsage=serverAuth,clientAuth
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>此文件的详细文档</strong>: <a href="https://www.openssl.org/docs/man1.1.1/man5/" target="_blank" rel="noopener noreffer">OpenSSL file formats and conventions</a></li>
</ul>
</li>
<li>生成证书链与服务端证书:
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 1. 生成本地 CA 根证书的私钥，使用 P-384 曲线，密钥长度 384 位</span>
</span></span><span class="line"><span class="cl">openssl ecparam -genkey -name secp384r1 -out ecc-ca.key
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 使用私钥签发出 CA 根证书</span>
</span></span><span class="line"><span class="cl"><span class="c1">## CA 根证书的有效期尽量设长一点，因为不方便更新换代，这里设了 100 年</span>
</span></span><span class="line"><span class="cl">openssl req -x509 -new -nodes -key ecc-ca.key -subj <span class="s2">&#34;/CN=MyLocalRootCA&#34;</span> -days <span class="m">36500</span> -out ecc-ca.crt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 生成服务端证书的 EC 私钥，使用 P-384 曲线，密钥长度 384 位</span>
</span></span><span class="line"><span class="cl">openssl ecparam -genkey -name secp384r1 -out ecc-server.key
</span></span><span class="line"><span class="cl"><span class="c1"># 4. 通过第一步编写的配置文件，生成证书签名请求（公钥+申请者信息）</span>
</span></span><span class="line"><span class="cl">openssl req -new -key ecc-server.key -out ecc-server.csr -config ecc-csr.conf
</span></span><span class="line"><span class="cl"><span class="c1"># 5. 使用 CA 根证书直接签发 ECC 服务端证书，这里指定服务端证书的有效期为 3650 天</span>
</span></span><span class="line"><span class="cl">openssl x509 -req -in ecc-server.csr -CA ecc-ca.crt -CAkey ecc-ca.key <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -CAcreateserial -out ecc-server.crt -days <span class="m">3650</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -extensions v3_ext -extfile ecc-csr.conf
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p>简单起见这里没有生成中间证书，直接使用根证书签发了用于安全通信的服务端证书，而且根证书跟服务端证书都使用了 ECC 证书。
现实中由于根证书更新缓慢，几乎所有的根证书都还是 RSA 证书，而中间证书与终端实体证书的迭代要快得多，目前已经有不少网站在使用 ECC 证书了。</p>
<h3 id="6-证书的类型" class="headerLink">
    <a href="#6-%e8%af%81%e4%b9%a6%e7%9a%84%e7%b1%bb%e5%9e%8b" class="header-mark"></a>6. 证书的类型</h3><p>按照数字证书的生成方式进行分类，证书有三种类型:</p>
<ol>
<li>由权威 CA 机构签名的「公网受信任证书」: 这类证书会被浏览器、小程序等第三方应用/服务商信任
<ul>
<li>申请证书时需要验证你对域名/IP 的所有权，也就使证书无法伪造</li>
<li>如果你的 API 需要提供给第三方应用/服务商/用户访问，那就需要向权威 CA 机构申请此类证书</li>
</ul>
</li>
<li>本地签名证书 - <strong><code>tls_locally_signed_cert</code></strong>: 即由本地 CA 证书签名的 TLS 证书
<ul>
<li>本地 CA 证书，就是自己使用 <code>openssl</code> 等工具生成的 CA 证书</li>
<li>这类证书的缺点是无法与第三方应用/服务商建立安全的连接</li>
<li>如果客户端是完全可控的（比如是自家的 APP，或者是接入了域控的企业局域网设备），完全可以在所有客户端都安装上自己生成的 CA 证书。这种场景下使用此类证书是安全可靠的，可以不向权威 CA 机构申请证书</li>
</ul>
</li>
<li>自签名证书 - <strong><code>tls_self_signed_cert</code></strong>: 前面介绍了根证书是一个自签名证书，它使用根证书的私钥为根证书签名
<ul>
<li>这里的「自签名证书」是指<strong>直接使用根证书进行网络通讯</strong>，缺点是证书的更新迭代会很麻烦，而且安全性低。</li>
</ul>
</li>
</ol>
<p>总的来说，权威CA机构颁发的「公网受信任证书」，可以被第三方应用信任，但是自己生成的不行。
而越贵的权威证书，安全性与可信度就越高，或者可以保护更多的域名。</p>
<p>在客户端可控的情况下，可以考虑自己生成证书链并签发「本地签名证书」，将本地 CA 证书预先安装在客户端中用于验证。</p>
<p>而「自签名证书」主要是方便，能不用还是尽量不要使用。</p>
<h3 id="7-向权威-ca-机构申请公网受信任证书" class="headerLink">
    <a href="#7-%e5%90%91%e6%9d%83%e5%a8%81-ca-%e6%9c%ba%e6%9e%84%e7%94%b3%e8%af%b7%e5%85%ac%e7%bd%91%e5%8f%97%e4%bf%a1%e4%bb%bb%e8%af%81%e4%b9%a6" class="header-mark"></a>7. 向权威 CA 机构申请「公网受信任证书」</h3><p>向权威机构申请的公网受信任证书，可以直接应用在边界网关上，用于给公网用户提供 TLS 加密访问服务，比如各种 HTTPS 站点、API。这是需求最广的一类数字证书服务。</p>
<p>而证书的申请与管理方式又分为两种：</p>
<ul>
<li>通过 <a href="https://en.wikipedia.org/wiki/Automatic_Certificate_Management_Environment" target="_blank" rel="noopener noreffer">ACMEv2（Automated Certificate Management Environment (ACME) </a> 协议进行证书的自动化申请与管理。支持使用此开放协议申请证书的权威机构有：
<ul>
<li>免费服务
<ul>
<li>Let&rsquo;s Encrypt: 众所周知，它提供三个月有效期的免费证书。</li>
<li><a href="https://zerossl.com/documentation/acme/" target="_blank" rel="noopener noreffer">ZeroSSL</a>:  貌似也是一个比较有名的 SSL 证书服务
<ul>
<li>通过 ACME 协议支持不限数量的 90 天证书，也支持多域名证书与泛域名证书。</li>
<li>它相比 Let&rsquo;s Encrypt 的优势是，它提供一个证书控制台，可以查看与管理用户当前的所有证书，了解其状态。</li>
</ul>
</li>
</ul>
</li>
<li>付费服务
<ul>
<li>DigiCert: 这个非常有名（但也是相当贵），官方文档 <a href="https://docs.digicert.com/certificate-tools/Certificate-lifecycle-automation-index/acme-user-guide/" target="_blank" rel="noopener noreffer">Digicert - Third-party ACME client automation</a></li>
<li>Google Trust Services: Google 推出的公网证书服务，也是三个月有效期，其根证书交叉验证了 GlobalSign。官方文档 <a href="https://cloud.google.com/blog/products/identity-security/automate-public-certificate-lifecycle-management-via--acme-client-api" target="_blank" rel="noopener noreffer">Automate Public Certificates Lifecycle Management via RFC 8555 (ACME)</a></li>
<li>Entrust: 官方文档 <a href="https://www.entrust.com/knowledgebase/ssl/how-to-use-acme-to-install-ssl-tls-certificates-in-entrust-certificate-services-apache#step1" target="_blank" rel="noopener noreffer">Entrust&rsquo;s ACME implementation</a></li>
<li>GlobalSign: 官方文档 <a href="https://www.globalsign.com/en/acme-automated-certificate-management" target="_blank" rel="noopener noreffer">GlobalSign ACME Service</a></li>
</ul>
</li>
<li>相关的自动化工具
<ul>
<li>很多代理工具都有提供基于 ACMEv2 协议的证书申请与自动更新，比如:
<ul>
<li><a href="/network-proxy&#43;web-server/traefik/README.md" rel="">Traefik</a></li>
<li><a href="https://github.com/caddyserver/caddy" target="_blank" rel="noopener noreffer">Caddy</a></li>
<li><a href="https://github.com/nginx-proxy/docker-letsencrypt-nginx-proxy-companion" target="_blank" rel="noopener noreffer">docker-letsencrypt-nginx-proxy-companion</a></li>
</ul>
</li>
<li><strong>网上也有一些 <a href="https://github.com/certbot/certbot" target="_blank" rel="noopener noreffer">certbot</a> 插件，可以通过 DNS 提供商的 API 进行 ACMEv2 证书的申请与自动更新，比如</strong>:
<ul>
<li><a href="https://github.com/tengattack/certbot-dns-aliyun" target="_blank" rel="noopener noreffer">certbot-dns-aliyun</a></li>
</ul>
</li>
<li><strong>terraform 也有相关 provider</strong>: <a href="https://github.com/vancluever/terraform-provider-acme" target="_blank" rel="noopener noreffer">terraform-provider-acme</a></li>
<li><a href="https://github.com/cert-manager/cert-manager" target="_blank" rel="noopener noreffer">cert-manager</a>: kubernetes 中的证书管理工具，支持 ACMEv2，也支持创建与管理私有证书。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>通过一些权威 CA 机构或代理商提供的 Web 网站，手动填写信息来申请与更新证书。</li>
</ol>
<ul>
<li>这个流程相对会比较繁琐。</li>
</ul>
<p>这些权威机构提供的证书服务，提供的证书又有不同的分级，这里详细介绍下三种不同的证书级别，以及该如何选用：</p>
<ul>
<li>Domain Validated（DV）证书
<ul>
<li><strong>仅验证域名所有权</strong>，验证步骤最少，价格最低，仅需要数分钟即可签发。</li>
<li>优点就是易于签发，很适合做自动化。</li>
<li>各云厂商（AWS/GCP/Cloudflare，以及 Vercel/Github 的站点服务）给自家服务提供的免费证书都是 DV 证书，Let&rsquo;s Encrypt 的证书也是这个类型。
<ul>
<li>很明显这些证书的签发都非常方便，而且仅验证域名所有权。</li>
<li>但是 AWS/GCP/Cloudflare/Vercel/Github 提供的 DV 证书都仅能在它们的云服务上使用，不提供私钥功能！</li>
</ul>
</li>
</ul>
</li>
<li>Organization Validated (OV) 证书
<ul>
<li>是企业 SSL 证书的首选，通过企业认证确保企业 SSL 证书的真实性。</li>
<li>除域名所有权外，CA 机构还会审核组织及企业的真实性，包括注册状况、联系方式、恶意软件等内容。</li>
<li>如果要做合规化，可能至少也得用 OV 这个级别的证书。</li>
</ul>
</li>
<li>Extended Validation（EV）证书
<ul>
<li>最严格的认证方式，CA 机构会深度审核组织及企业各方面的信息。</li>
<li>被认为适合用于大型企业、金融机构等组织或企业。</li>
<li>而且仅支持签发单域名、多域名证书，不支持签发泛域名证书，安全性杠杠的。</li>
</ul>
</li>
</ul>
<p>完整的证书申请流程如下:</p>
<p><figure><a class="lightgallery" href="/images/about-tls-cert/ca-sign-sechdule.webp" title="/images/about-tls-cert/ca-sign-sechdule.webp" data-thumbnail="/images/about-tls-cert/ca-sign-sechdule.webp" data-sub-html="<h2>证书申请流程</h2>">
        <img
            class="lazyload"
            data-src="/images/about-tls-cert/ca-sign-sechdule.webp"
            data-srcset="/images/about-tls-cert/ca-sign-sechdule.webp, /images/about-tls-cert/ca-sign-sechdule.webp 1.5x, /images/about-tls-cert/ca-sign-sechdule.webp 2x"
            data-sizes="auto"
            alt="/images/about-tls-cert/ca-sign-sechdule.webp">
    </a><figcaption class="image-caption">证书申请流程</figcaption>
    </figure></p>
<p>为了方便用户，图中的申请人（Applicant）自行处理的部分，目前很多证书申请网站也可以自动处理，用户只需要提供相关信息即可。</p>
<h3 id="8-证书的寿命" class="headerLink">
    <a href="#8-%e8%af%81%e4%b9%a6%e7%9a%84%e5%af%bf%e5%91%bd" class="header-mark"></a>8. 证书的寿命</h3><p>对于公开服务，服务端证书的有效期不要超过 825 天（27 个月）！
另外从 2020 年 11 月起，新申请的服务端证书有效期已经缩短到了 398 天（13 个月）。
目前 Apple/Mozilla/Chrome 都发表了相应声明，证书有效期超过上述限制的，将被浏览器/Apple设备禁止使用。</p>
<p>而对于其他用途的证书，如果更换起来很麻烦，可以考虑放宽条件。
比如 kubernetes 集群的加密证书，可以考虑有效期设长一些，比如 10 年。</p>
<p>据<a href="https://mp.weixin.qq.com/s?__biz=MzA4MTQ2MjI5OA==&amp;mid=2664079008&amp;idx=1&amp;sn=dede1114d5705880ea757f8d9ae4c92d" target="_blank" rel="noopener noreffer">云原生安全破局｜如何管理周期越来越短的数字证书？</a>所述，大量知名企业如特斯拉/微软/领英/爱立信都曾因未及时更换 TLS 证书导致服务暂时不可用。</p>
<p>因此 TLS 证书最好是设置自动轮转！人工维护不可靠！</p>
<p>目前很多 Web 服务器/代理，都支持自动轮转 Let&rsquo;s Encrypt 证书。
另外 Vault 等安全工具，也支持自动轮转私有证书。</p>
<h3 id="9-使用-openssl-验证证书查看证书信息" class="headerLink">
    <a href="#9-%e4%bd%bf%e7%94%a8-openssl-%e9%aa%8c%e8%af%81%e8%af%81%e4%b9%a6%e6%9f%a5%e7%9c%8b%e8%af%81%e4%b9%a6%e4%bf%a1%e6%81%af" class="header-mark"></a>9. 使用 OpenSSL 验证证书、查看证书信息</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看证书(crt)信息</span>
</span></span><span class="line"><span class="cl">openssl x509 -noout -text -in server.crt
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看证书请求(csr)信息</span>
</span></span><span class="line"><span class="cl">openssl req -noout -text -in server.csr
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 RSA 私钥(key)信息</span>
</span></span><span class="line"><span class="cl">openssl rsa -noout -text -in server.key
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 验证证书是否可信</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 1. 使用系统的证书链进行验证</span>
</span></span><span class="line"><span class="cl">openssl verify server.crt
</span></span><span class="line"><span class="cl"><span class="c1">## 2. 使用指定的 CA 证书进行验证</span>
</span></span><span class="line"><span class="cl">openssl verify -CAfile ca.crt server.crt
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二tls-协议" class="headerLink">
    <a href="#%e4%ba%8ctls-%e5%8d%8f%e8%ae%ae" class="header-mark"></a>二、TLS 协议</h2><p>TLS 协议，中文名为「传输层安全协议」，是一个安全通信协议，被用于在网络上进行安全通信。</p>
<p>TLS 协议通常与 HTTP / FTP / SMTP 等协议一起使用以实现加密通讯，这种组合协议通常被缩写为 HTTPS / SFTP / SMTPS.</p>
<p>在讲 <a href="https://zh.wikipedia.org/wiki/%E5%82%B3%E8%BC%B8%E5%B1%A4%E5%AE%89%E5%85%A8%E6%80%A7%E5%8D%94%E5%AE%9A" target="_blank" rel="noopener noreffer">TLS 协议</a>前，还是先复习下「对称密码算法」与「非对称密码算法」两个密码体系的特点。</p>
<ul>
<li><strong>对称密码算法（如 AES/ChaCha20）</strong>: 计算速度快、安全强度高，但是缺乏安全交换密钥的手段、密钥的保存和管理也很困难</li>
<li><strong>非对称密码算法（如 RSA/ECC）</strong>: 解决了上述对称密码算法的两个缺陷——通过数字证书 + PKI 公钥基础架构实现了身份认证，再通过 DHE/ECDHE 实现了安全的对称密钥交换。</li>
</ul>
<p>但是非对称密码算法要比对称密码算法更复杂，计算速度也慢得多。
因此实际使用上通常结合使用这两种密码算法，各取其长，以实现高速且安全的网络通讯。
我们通常称结合使用对称密码算法以及非对称密码算法的加密方案为「混合加密方案」。</p>
<p>TLS 协议就是一个「混合加密方案」，它借助数字证书与 PKI 公钥基础架构、DHE/ECDHE 密钥交换协议以及对称加密方案这三者，实现了安全的加密通讯。</p>
<p>基于经典 DHKE 协议的 TLS 握手流程如下：</p>
<p><figure><a class="lightgallery" href="/images/about-tls-cert/tls-handshake.webp" title="/images/about-tls-cert/tls-handshake.webp" data-thumbnail="/images/about-tls-cert/tls-handshake.webp" data-sub-html="<h2>基于经典 DHKE 协议的 TLS 握手</h2>">
        <img
            class="lazyload"
            data-src="/images/about-tls-cert/tls-handshake.webp"
            data-srcset="/images/about-tls-cert/tls-handshake.webp, /images/about-tls-cert/tls-handshake.webp 1.5x, /images/about-tls-cert/tls-handshake.webp 2x"
            data-sizes="auto"
            alt="/images/about-tls-cert/tls-handshake.webp">
    </a><figcaption class="image-caption">基于经典 DHKE 协议的 TLS 握手</figcaption>
    </figure></p>
<p>而在支持「完美前向保密（Perfect Forward Secrecy）」的 TLS1.2 或 TLS1.3 协议中，经典 DH 协议被 ECDHE 协议取代。
变化之一是进行最初的握手协议从经典 DHKE 换成了基于 ECC 的 ECDH 协议，
变化之二是在每次通讯过程中也在不断地进行密钥交换，生成新的对称密钥供下次通讯使用，其细节参见 <a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a>。</p>
<p>TLS 协议通过应用 ECDHE 密钥交换协议，提供了「完美前向保密（Perfect Forward Secrecy）」特性，也就是说它能够保护过去进行的通讯不受密钥在未来暴露的威胁。
即使攻击者破解出了一个「对称密钥」，也只能获取到一次事务中的数据，其他事务的数据安全性完全不受影响。</p>
<p>另外注意一点是，CA 证书和服务端证书都只在 TLS 协议握手的前三个步骤中有用到，之后的通信就与它们无关了。</p>
<h3 id="1-密码套件与-tls-历史版本" class="headerLink">
    <a href="#1-%e5%af%86%e7%a0%81%e5%a5%97%e4%bb%b6%e4%b8%8e-tls-%e5%8e%86%e5%8f%b2%e7%89%88%e6%9c%ac" class="header-mark"></a>1. 密码套件与 TLS 历史版本</h3><p><a href="https://en.wikipedia.org/wiki/Cipher_suite" target="_blank" rel="noopener noreffer">密码套件（Cipher_suite）</a>是 TLS 协议中一组用于实现安全通讯的密码学算法，类似于我们前面学习过的加密方案。
不同密码学算法的组合形成不同的密码套件，算法组合的差异使这些密码套件具有不同的性能与安全性，另外 TLS 协议的更新迭代也导致各密码套件拥有不同的兼容性。
通常越新推出的密码套件的安全性越高，但是兼容性就越差（旧设备不支持）。</p>
<p>密码套件的名称由它使用的各种密码学算法名称组成，而且有固定的格式，以 <code>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</code> 为例介绍下：</p>
<ul>
<li><code>TLS</code>: 定义了此套件适用的协议，通常固定为 <code>TLS</code></li>
<li><code>ECDHE</code>: 密钥交换算法</li>
<li><code>RSA</code>: 数字证书认证算法</li>
<li><code>AES_128_GCM</code>: 使用的对称加密方案，这是一个基于 AES 与 GCM 模式的对称认证加密方案，使用 128 位密钥</li>
<li><code>SHA256</code>: 哈希函数，用于 HMAC 算法实现消息认证
<ul>
<li>TLS 固定使用 HMAC 算法进行消息认证</li>
</ul>
</li>
</ul>
<p>TLS 协议的前身是 SSL 协议，TLS/SSL 的发展历程展示如下：</p>
<figure><img src="/images/about-tls-cert/history-of-ssl-tls.webp"/><figcaption>
            <h4>SSL/TLS 的历史版本</h4>
        </figcaption>
</figure>

<p>SSL 协议早在 2015 年就被各大主流浏览器废除了，TLS1.0 感觉也基本没站点在用了，这俩就直接跳过了。</p>
<p>下面分别介绍下 TLS1.1 TLS1.2 与 TLS1.3.</p>
<h4 id="tls-11" class="headerLink">
    <a href="#tls-11" class="header-mark"></a>TLS 1.1</h4><p>TLS 1.1 在 RFC4346 中定义，于 2006 年 4 月发布。</p>
<p>TLS 1.1 是 TLS 1.0 的一个补丁，主要更新包括：</p>
<ul>
<li>添加对CBC攻击的保护
<ul>
<li>隐式初始向量 IV 被替换成一个显式的 IV</li>
<li>修复分组密码模式中填充算法的 bug</li>
</ul>
</li>
<li>支持 IANA 登记的参数</li>
</ul>
<p><strong>TLS 1.1</strong>及其之前的算法曾经被广泛应用，它目前已知的缺陷如下：</p>
<ul>
<li>不支持 PFS 完全前向保密</li>
<li>不支持 AEAD 认证加密算法</li>
<li>为了兼容性，保留了很多不安全的算法</li>
</ul>
<p>TLS 1.1 已经不够安全了，不过一些陈年老站点或许还在使用它。</p>
<h4 id="tls-12" class="headerLink">
    <a href="#tls-12" class="header-mark"></a>TLS 1.2</h4><p>TLS 1.2 在 RFC5246 中定义，于 2008 年 8 月发发布。</p>
<ul>
<li>可选支持 PFS 完全前向保密</li>
<li>移除对 MD5 与 SHA-1 签名算法的支持</li>
<li>添加对 HMAC-SHA-256 及 HMAC-SHA-384 消息认证算法的支持</li>
<li>添加对 AEAD 加密认证方案的支持</li>
<li>去除 forback 回到 SSL 协议的能力，提升安全性</li>
<li>为了兼容性，保留了很多不安全的算法</li>
</ul>
<p>如果你使用 TLS 1.2，需要小心地选择密码套件，避开不安全的套件，就能实现足够高的安全性。</p>
<h4 id="tls-13" class="headerLink">
    <a href="#tls-13" class="header-mark"></a>TLS 1.3</h4><p><a href="https://blog.cloudflare.com/rfc-8446-aka-tls-1-3/" target="_blank" rel="noopener noreffer">TLS 1.3</a> 做了一次大刀阔斧的更新，是一个里程碑式的版本，其更新总结如下：</p>
<ul>
<li>移除对如下算法的支持
<ul>
<li>哈希函数 SHA1/MD5</li>
<li>所有非 AEAD 加密认证的密码方案（CBC 模式）</li>
<li>移除对 RC4 与 3DES 加密算法的支持</li>
<li>移除了静态 RSA 与 DH 密钥交换算法</li>
</ul>
</li>
<li>支持高性能的 Ed25519/Ed448 签名认证算法、X25519 密钥协商算法</li>
<li>支持高性能的 ChaCha20-Poly1305 对称认证加密方案</li>
<li>将密钥交换算法与公钥认证算法从密码套件中分离出来
<ul>
<li>比如原来的 <code>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256</code> 密码套件将被拆分为 <code>ECDHE</code> 算法、<code>RSA</code> 身份认证算法、以及 <code>TLS_AES_128_GCM_SHA256</code> 密码套件</li>
<li>这样密码套件就只包含一个 AEAD 认证加密方案，以及一个哈希函数了</li>
</ul>
</li>
<li>仅支持前向安全的密钥交换算法 DHE 或 ECDHE</li>
<li>支持最短 0-RTT 的 TLS 握手（会话恢复）</li>
</ul>
<p>TLS 1.3 从协议中删除了所有不安全的算法或协议，可以说只要你的通讯用了 TLS 1.3，那你的数据就安全了（当然前提是你的私钥没泄漏）。</p>
<h4 id="如何设置-tls-协议的版本密码套件参数" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e8%ae%be%e7%bd%ae-tls-%e5%8d%8f%e8%ae%ae%e7%9a%84%e7%89%88%e6%9c%ac%e5%af%86%e7%a0%81%e5%a5%97%e4%bb%b6%e5%8f%82%e6%95%b0" class="header-mark"></a>如何设置 TLS 协议的版本、密码套件参数</h4><p>我们前面已经学习了对称加密、非对称加密、密钥交换三部分知识，对照 TLS 套件的名称，应该能很容易判断出哪些是安全的、哪些不够安全，哪些支持前向保密、哪些不支持。</p>
<p>一个非常好用的「站点 HTTPS 安全检测」网站是 <a href="https://myssl.com/" target="_blank" rel="noopener noreffer">https://myssl.com/</a>，使用它测试知乎网的检测结果如下：</p>
<figure><img src="/images/about-tls-cert/tls-cipher.webp"/><figcaption>
            <h4>SSL/TLS 的历史版本</h4>
        </figcaption>
</figure>

<p>能看到知乎为了兼容性，目前仍然支持 TLS1.0 与 TLS1.1，另外目前还不支持 TLS1.3.</p>
<p>此外，知乎仍然支持很多已经不安全的加密套件，myssl.com 专门使用黄色标识出了这些不安全的加密套件，我们总结下主要特征：</p>
<ul>
<li>部分密码套件使用了不安全的对称加密算法 <code>3DES</code></li>
<li>其他被标识为黄色的套件虽然使用了安全的对称加密算法，但是不支持 PFS 前向保密</li>
</ul>
<p>此外 myssl.com 还列出了许多站点更详细的信息，包括 TLS1.3 的会话恢复，以及后面将会介绍的公钥固定、HTTP严格传输安全等信息：</p>
<figure><img src="/images/about-tls-cert/other-https-info.webp"/><figcaption>
            <h4>SSL/TLS 的历史版本</h4>
        </figcaption>
</figure>

<h5 id="nginx-的-tls-协议配置" class="headerLink">
    <a href="#nginx-%e7%9a%84-tls-%e5%8d%8f%e8%ae%ae%e9%85%8d%e7%bd%ae" class="header-mark"></a>Nginx 的 TLS 协议配置</h5><p>以前为 Nginx 等程序配置 HTTPS 协议时，我最头疼的就是其中密码套件参数 <code>ssl_ciphers</code>，为了安全性，需要配置超长的一大堆选用的密码套件名称，我可以说一个都看不懂，但是为了把网站搞好还是得硬着头皮搜索复制粘贴，实际上也不清楚安全性导致咋样。</p>
<p>为了解决这个问题，Mozilla/DigitalOcean 都搞过流行 Web 服务器的 TLS 配置生成工具，比如 <a href="https://ssl-config.mozilla.org/#server=nginx" target="_blank" rel="noopener noreffer">ssl-config - **mozilla</a>，这个网站提供三个安全等级的配置**:</p>
<ol>
<li>「Intermediate」: 查看生成出的 <code>ssl-cipher</code> 属性，发现它只支持 <code>ECDHE</code>/<code>DHE</code> 开头的算法。因此它保证前向保密。
<ul>
<li>对于需要通过浏览器访问的 API，推荐选择这个等级。</li>
</ul>
</li>
<li>「Mordern」: 只支持 <code>TLSv1.3</code>，该协议废弃掉了过往所有不安全的算法，保证前向保密，安全性极高，性能也更好。
<ul>
<li>对于不需要通过浏览器等旧终端访问的 API，请直接选择这个等级。</li>
</ul>
</li>
<li>「Old」: 除非你的用户使用非常老的终端进行访问，否则请不要考虑这个选项！</li>
</ol>
<p>可以点进去查看详细的 TLS 套件配置。</p>
<h4 id="ocsp-证书验证协议" class="headerLink">
    <a href="#ocsp-%e8%af%81%e4%b9%a6%e9%aa%8c%e8%af%81%e5%8d%8f%e8%ae%ae" class="header-mark"></a>OCSP 证书验证协议</h4><blockquote>
<p><a href="https://www.ssl.com/blogs/how-do-browsers-handle-revoked-ssl-tls-certificates/" target="_blank" rel="noopener noreffer">https://www.ssl.com/blogs/how-do-browsers-handle-revoked-ssl-tls-certificates/</a></p>
</blockquote>
<blockquote>
<p><a href="https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html" target="_blank" rel="noopener noreffer">https://imququ.com/post/why-can-not-turn-on-ocsp-stapling.html</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.digicert.com/help/" target="_blank" rel="noopener noreffer">https://www.digicert.com/help/</a></p>
</blockquote>
<p>前面提到除了数字证书自带的有效期外，为了在私钥泄漏的情况下，能够吊销对应的证书，PKI 公钥基础设施还提供了 OCSP（Online Certificate Status Protocol）证书状态查询协议。</p>
<p>可以使用如下命令测试，确认站点是否启用了 ocsp stapling:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ openssl s_client -connect www.digicert.com:443 -servername www.digicert.com -status -tlsextdebug &lt; /dev/null 2&gt;&amp;1 | grep -i &#34;OCSP response&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果输出包含 <code>OCSP Response Status: successful</code> 就说明站点支持 ocsp stapling，
如果输出内容为 <code>OCSP response: no response sent</code> 则说明站点不支持ocsp stapling。</p>
<blockquote>
<p>实际上我测试发现只有 <a href="https://www.digicert.com/www.douban.com" target="_blank" rel="noopener noreffer">www.digicert.com/www.douban.com</a> 等少数站点启用了 ocsp stapling，www.baidu.com/www.google.com/www.zhihu.com 都未启用 ocsp stapling.</p>
</blockquote>
<p>这导致了一些问题：</p>
<ul>
<li>Chrome/Firefox 等浏览器都会定期通过 OCSP 协议去请求 CA 机构的 OCSP 服务器验证证书状态，这可能会拖慢 HTTPS 协议的响应速度。
<ul>
<li>所谓的定期是指超过上一个 OCSP 响应的 <code>nextUpdate</code> 时间（一般为 7 天），或者如果该值为空的话，Firefox 默认 24h 后会重新查询 OCSP 状态。</li>
</ul>
</li>
<li>因为客户端直接去请求 CA 机构的 OCSP 地址获取证书状态，这就导致 CA 机构可以获取到一些对应站点的用户信息（IP 地址、网络状态等）。</li>
</ul>
<p>为了解决这两个问题，<a href="https://www.rfc-editor.org/rfc/rfc6066" target="_blank" rel="noopener noreffer">rfc6066</a> 定义了 OCSP stapling 功能，它使服务器可以提前访问 OCSP 获取证书状态信息并缓存到本地，</p>
<p>在客户端使用 TLS 协议访问 HTTPS 服务时，服务端会直接在握手阶段将缓存的 OCSP 信息发送给客户端。
因为 OCSP 信息会带有 CA 证书的签名及有效期，客户端可以直接通过签名验证 OCSP 信息的真实性与有效性，这样就避免了客户端访问 OCSP 服务器带来的开销。</p>
<h4 id="alpn-应用层协议协商" class="headerLink">
    <a href="#alpn-%e5%ba%94%e7%94%a8%e5%b1%82%e5%8d%8f%e8%ae%ae%e5%8d%8f%e5%95%86" class="header-mark"></a>ALPN 应用层协议协商</h4><blockquote>
<p><a href="https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation" target="_blank" rel="noopener noreffer">https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation</a></p>
</blockquote>
<blockquote>
<p><a href="https://imququ.com/post/enable-alpn-asap.html" target="_blank" rel="noopener noreffer">https://imququ.com/post/enable-alpn-asap.html</a></p>
</blockquote>
<p>TODO</p>
<h3 id="2-mtls-双向认证" class="headerLink">
    <a href="#2-mtls-%e5%8f%8c%e5%90%91%e8%ae%a4%e8%af%81" class="header-mark"></a>2. mTLS 双向认证</h3><p>TLS 协议（tls1.0+，RFC: <a href="https://tools.ietf.org/html/rfc5246#section-7.4.4" target="_blank" rel="noopener noreffer">TLS1.2 - RFC5246</a>）也定义了可选的服务端请求验证客户端证书的方法。这
个方法是可选的。如果使用上这个方法，那客户端和服务端就会在 TLS 协议的握手阶段进行互相认证。这种验证方式被称为双向 TLS 认证(mTLS, mutual TLS)。</p>
<p>传统的「TLS 单向认证」技术，只在客户端去验证服务端是否可信。
而「TLS 双向认证（mTLS）」，则添加了服务端验证客户端是否可信的步骤（第三步）:</p>
<ol>
<li>客户端发起请求</li>
<li>「验证服务端是否可信」: 服务端将自己的 TLS 证书发送给客户端，客户端通过自己的 CA 证书链验证这个服务端证书。</li>
<li>「验证客户端是否可信」: 客户端将自己的 TLS 证书发送给服务端，服务端使用它的 CA 证书链验证该客户端证书。</li>
<li>协商对称加密算法及密钥</li>
<li>使用对称加密进行后续通信。</li>
</ol>
<p>因为相比传统的 TLS，mTLS 只是添加了「验证客户端」这样一个步骤，所以这项技术也被称为「Client Authetication」.</p>
<p>mTLS 需要用到两套 TLS 证书:</p>
<ol>
<li>服务端证书: 这个证书签名已经介绍过了。</li>
<li>客户端证书: 客户端证书貌似对证书信息（如 CN/SAN 域名）没有任何要求，只要证书能通过 CA 签名验证就行。</li>
</ol>
<p>使用 openssl 生成 TLS 客户端证书（ca 和 csr.conf 可以直接使用前面生成服务端证书用到的，也可以另外生成）:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 1. 生成 2048 位 的 RSA 密钥</span>
</span></span><span class="line"><span class="cl">openssl genrsa -out client.key <span class="m">2048</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 通过第一步编写的配置文件，生成证书签名请求</span>
</span></span><span class="line"><span class="cl">openssl req -new -key client.key -out client.csr -config csr.conf
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 生成最终的证书，这里指定证书有效期 3650 天</span>
</span></span><span class="line"><span class="cl"><span class="c1">### 使用前面生成的 ca 证书对客户端证书进行签名（客户端和服务端共用 ca 证书）</span>
</span></span><span class="line"><span class="cl">openssl x509 -req -in client.csr -CA ca.crt -CAkey ca.key <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   -CAcreateserial -out client.crt -days <span class="m">3650</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>   -extensions v3_ext -extfile csr.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>mTLS 的应用场景主要在「零信任网络架构」，或者叫「无边界网络」中。
比如微服务之间的互相访问，就可以使用 mTLS。
这样就能保证每个 RPC 调用的客户端，都是其他微服务（或者别的可信方），防止黑客入侵后为所欲为。</p>
<p>目前查到如下几个Web服务器/代理支持 mTLS:</p>
<ol>
<li>Traefik: <a href="https://docs.traefik.io/v2.0/https/tls/#client-authentication-mtls" target="_blank" rel="noopener noreffer">Docs - Client Authentication (mTLS)</a></li>
<li>Nginx: <a href="https://community.openhab.org/t/using-nginx-reverse-proxy-for-client-certificate-authentication-start-discussion/43064" target="_blank" rel="noopener noreffer">Using NGINX Reverse Proxy for client certificate authentication</a>
<ol>
<li>主要参数是两个: <code>ssl_client_certificate /etc/nginx/client-ca.pem</code> 和 <code>ssl_verify_client on</code></li>
</ol>
</li>
</ol>
<h4 id="mtls-的安全性" class="headerLink">
    <a href="#mtls-%e7%9a%84%e5%ae%89%e5%85%a8%e6%80%a7" class="header-mark"></a>mTLS 的安全性</h4><p>如果将 mTLS 用在 App 安全上，存在的风险是:</p>
<ol>
<li>客户端中隐藏的证书是否可以被提取出来，或者黑客能否 Hook 进 App 中，直接使用证书发送信息。</li>
<li>如果客户端私钥设置了「密码（passphrase）」，那这个密码是否能很容易被逆向出来？</li>
</ol>
<p>mTLS 和「公钥锁定/证书锁定」对比:</p>
<ol>
<li>公钥锁定/证书锁定: 只在客户端进行验证。
<ol>
<li>但是在服务端没有进行验证。这样就无法鉴别并拒绝第三方应用（爬虫）的请求。</li>
<li>加强安全的方法，是通过某种算法生成动态的签名。爬虫生成不出来这个签名，请求就被拒绝。</li>
</ol>
</li>
<li>mTLS: 服务端和客户端都要验证对方。
<ol>
<li>保证双边可信，在客户端证书不被破解的情况下，就能 Ban 掉所有的爬虫或代理技术。</li>
</ol>
</li>
</ol>
<h3 id="3-其他加密通讯协议" class="headerLink">
    <a href="#3-%e5%85%b6%e4%bb%96%e5%8a%a0%e5%af%86%e9%80%9a%e8%ae%af%e5%8d%8f%e8%ae%ae" class="header-mark"></a>3. 其他加密通讯协议</h3><h4 id="ssh-协议" class="headerLink">
    <a href="#ssh-%e5%8d%8f%e8%ae%ae" class="header-mark"></a>SSH 协议</h4><p>首先最容易想到的应该就是是 SSH 协议（Secure SHell protocol）。SSH 与 TLS 一样都能提供加密通讯，是 PKI 公钥基础设施的早期先驱者之一。</p>
<p>OpenSSH 应用最广泛的 SSH 实现，它使用 SSH Key 而非数字证书进行身份认证，这主要是因为 OpenSSH 仅用于用户与主机之间的安全通信，不需要记录 X.509 这么繁多的信息。</p>
<p>我们来手动生成个 OpenSSH ed25519 密钥对试试（RSA 的生成命令完全类似）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ ssh-keygen -t ed25519
</span></span><span class="line"><span class="cl">Generating public/private ed25519 key pair.
</span></span><span class="line"><span class="cl">Enter file in which to save the key <span class="o">(</span>/Users/admin/.ssh/id_ed25519<span class="o">)</span>: ed25519-key
</span></span><span class="line"><span class="cl">Enter passphrase <span class="o">(</span>empty <span class="k">for</span> no passphrase<span class="o">)</span>: 
</span></span><span class="line"><span class="cl">Enter same passphrase again: 
</span></span><span class="line"><span class="cl">Your identification has been saved in ed25519-key.
</span></span><span class="line"><span class="cl">Your public key has been saved in ed25519-key.pub.
</span></span><span class="line"><span class="cl">The key fingerprint is:
</span></span><span class="line"><span class="cl">SHA256:jgeuWVflhNXXrDDzUtW6ZV1lpBWNAj0Rstizh9Lbyg0 admin@ryan-MacBook-Pro.local
</span></span><span class="line"><span class="cl">The key<span class="err">&#39;</span>s randomart image is:
</span></span><span class="line"><span class="cl">+--<span class="o">[</span>ED25519 256<span class="o">]</span>--+
</span></span><span class="line"><span class="cl"><span class="p">|</span>          oo++ *%<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>         <span class="nv">o</span> <span class="o">=</span>B ++B<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>        . <span class="o">=</span> oO.+o<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>         . B. + +<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>      . <span class="nv">S</span> <span class="o">=</span> o. + <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>     . + o +  .  <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>      + + E .    <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>     + o . +     <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>    o     o .    <span class="p">|</span>
</span></span><span class="line"><span class="cl">+----<span class="o">[</span>SHA256<span class="o">]</span>-----+
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ cat ed25519-key    
</span></span><span class="line"><span class="cl">-----BEGIN OPENSSH PRIVATE KEY-----
</span></span><span class="line"><span class="cl">b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
</span></span><span class="line"><span class="cl">QyNTUxOQAAACDux4KnrKXVs4iR9mPZnSpur5207ceyMiZP+CDnXdooMQAAAKDnHOSY5xzk
</span></span><span class="line"><span class="cl">mAAAAAtzc2gtZWQyNTUxOQAAACDux4KnrKXVs4iR9mPZnSpur5207ceyMiZP+CDnXdooMQ
</span></span><span class="line"><span class="cl">AAAEADkVL1gZHAvBx4M5+UjVVL7ltVOC4r9tdR23CoI9iV1O7HgqespdWziJH2Y9mdKm6v
</span></span><span class="line"><span class="cl">nbTtx7IyJk/4IOdd2igxAAAAHGFkbWluQHJ5YW4tTWFjQm9vay1Qcm8ubG9jYWwB
</span></span><span class="line"><span class="cl">-----END OPENSSH PRIVATE KEY-----
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ cat ed25519-key.pub 
</span></span><span class="line"><span class="cl">ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIO7HgqespdWziJH2Y9mdKm6vnbTtx7IyJk/4IOdd2igx admin@ryan-MacBook-Pro.local
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到 SSH Key 的结构非常简单，仅包含如下三个部分：</p>
<ul>
<li>密钥对类型: 最常见的是 <code>ssh-rsa</code>，另外由于安全性目前更推荐使用 <code>ssh-ed25519</code></li>
<li>公钥的 Base64 字符串</li>
<li>一个 Comment，通常包含这个 Key 的用途，或者 Key 所有者的邮箱地址</li>
</ul>
<p>通过我们前面学的非对称密码学知识可以知道，公钥能直接从私钥生成，假设你的 ssh 公钥丢失，可以通过如下命令重新生成出公钥：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ssh-keygen -y -f xxx_rsa &gt; xxx_rsa.pub
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="http3-与-quic-协议" class="headerLink">
    <a href="#http3-%e4%b8%8e-quic-%e5%8d%8f%e8%ae%ae" class="header-mark"></a>HTTP/3 与 QUIC 协议</h4><p><a href="https://github.com/quicwg" target="_blank" rel="noopener noreffer">QUIC 协议</a>，是 Google 研发并推动标准化的 TCP 协议的替代品， QUIC 是基于 UDP 协议实现的。基于 QUIC 提出的 HTTP over QUIC 协议已被标准化为 <a href="https://www.rfc-editor.org/rfc/rfc9114.html" target="_blank" rel="noopener noreffer">RFC 9114 - HTTP/3</a>，它做了很多大刀阔斧的改革：</p>
<ul>
<li>传输层协议从 TCP 改成了 UDP，QUIC 自己实现的数据的可靠传输、按序到达、拥塞控制
<ul>
<li>也就是说 QUIC 绕过了陈旧的内核 TCP 协议实现，直接在用户空间实现了这些功能</li>
<li>通过另起炉灶，它解决了一些 TCP 协议的痛点：队头阻塞、握手延迟高、特性迭代慢、拥塞控制算法不佳等问题</li>
</ul>
</li>
<li>在 TLS1.3 出现之前，QUIC 实现了自己的加密方案 <a href="https://docs.google.com/document/d/1g5nIXAIkN_Y-7XJW5K45IblHd_L2f5LTaDUDwvZ5L6g/edit" target="_blank" rel="noopener noreffer">QUIC Crypto</a> 以取代陈旧的 TLS 协议，同时兼容现有的数字证书体系
<ul>
<li>QUIC Crypto 的特点是它直接在应用层进行加密通讯的握手，并且恢复通信时可以通过缓存实现 0RTT 握手</li>
<li>也就说 QUIC 通过另起炉灶，解决了 TLS 的安全问题，以及握手延迟高的问题</li>
</ul>
</li>
</ul>
<p>总结一下就是，旧的实验性 HTTP-over-QUIC 协议，重新实现了 HTTP+TLS+TCP 三种协议并将它们整合到一起，这带来了极佳的性能，但也使它变得非常复杂。</p>
<p>QUIC 的 0RTT 握手是一个非常妙的想法，可以显著降低握手时延，TLS1.3 的设计者们将它纳入了 TLS1.3 标准中。</p>
<p>由于 TLS1.3 的良好特性，在 TLS1.3 协议发布后，新的 QUIC 标准 <a href="https://datatracker.ietf.org/doc/html/rfc9001" target="_blank" rel="noopener noreffer">RFC 9001</a> 已经使用 TLS1.3 取代了实验阶段使用的 QUIC Crypto 加密方案，目前只有 Chromium/Chrome 仍然支持 QUIC Crypto，其他 QUIC 实现基本都只支持 TLS1.3, 详见 <a href="https://github.com/quicwg/base-drafts/wiki/Implementations" target="_blank" rel="noopener noreffer">QUIC Implementations</a>.</p>
<h3 id="4-tls-协议攻防战" class="headerLink">
    <a href="#4-tls-%e5%8d%8f%e8%ae%ae%e6%94%bb%e9%98%b2%e6%88%98" class="header-mark"></a>4. TLS 协议攻防战</h3><h4 id="1-证书锁定certifacte-pining技术" class="headerLink">
    <a href="#1-%e8%af%81%e4%b9%a6%e9%94%81%e5%ae%9acertifacte-pining%e6%8a%80%e6%9c%af" class="header-mark"></a>1. 证书锁定（Certifacte Pining）技术</h4><p>即使使用了 TLS 协议对流量进行加密，并且保证了前向保密，也无法保证流量不被代理！</p>
<p>这是因为客户端大多是直接依靠了操作系统内置的 CA 证书库进行证书验证，而 Fiddler 等代理工具可以将自己的 CA 证书添加到该证书库中。</p>
<p>为了防止流量被 Fiddler 等工具使用上述方式监听流量，出现了「证书锁定（Certifacte Pining, 或者 SSL Pinning）」技术。
方法是在客户端中硬编码证书的指纹（Hash值，或者直接保存整个证书的内容也行），在建立 TLS 连接前，先计算使用的证书的指纹是否匹配，否则就中断连接。</p>
<p>这种锁定方式需要以下几个前提才能确保流量不被监听:</p>
<ol>
<li>客户端中硬编码的证书指纹不会被篡改。</li>
<li>指纹验证不能被绕过。
<ol>
<li>目前有公开技术（XPosed+JustTrustMe）能破解 Android 上常见的 HTTPS 请求库，直接绕过证书检查。</li>
<li>针对上述问题，可以考虑加大绕过的难度。或者 App 检测自己是否运行在 Xposed 等虚拟环境下。</li>
</ol>
</li>
<li>用于 TLS 协议的证书不会频繁更换。（如果更换了，指纹就对不上了。）</li>
</ol>
<p>而对于第三方的 API，因为我们不知道它们会不会更换 TLS 证书，就不能直接将证书指纹硬编码在客户端中。
这时可以考虑从服务端获取这些 API 的证书指纹（附带私钥签名用于防伪造）。</p>
<p>为了实现证书的轮转(rotation)，可以在新版本的客户端中包含多个证书指纹，这样能保证同时有多个可信证书，达成证书的轮转。（类比 JWT 的公钥轮转机制）</p>
<blockquote>
<p>证书锁定技术几乎等同于 SSH 协议的 <code>StrictHostKeyChecking</code> 选项，客户端会验证服务端的公钥指纹（key fingerprint），验证不通过则断开连接。</p>
</blockquote>
<h4 id="2-公钥锁定public-key-pining技术" class="headerLink">
    <a href="#2-%e5%85%ac%e9%92%a5%e9%94%81%e5%ae%9apublic-key-pining%e6%8a%80%e6%9c%af" class="header-mark"></a>2. 公钥锁定（Public Key Pining）技术</h4><p>前面介绍过证书的结构，它其实包含了公钥、有效期与一系列的其他信息。
使用了证书锁定技术，会导致证书的有效期也被锁定，APK 内的证书指纹就必须随着证书一起更新。</p>
<p>更好的做法是指锁定证书中的公钥，即「公钥锁定」技术。
「公钥锁定」比「证书锁定」更灵活，这样证书本身其实就可以直接轮转了（证书有过期时间），而不需要一个旧证书和新证书共存的中间时期。</p>
<p><strong>「公钥锁定」是更推荐的锁定技术。</strong></p>
<h4 id="3-https-严格传输安全---hsts" class="headerLink">
    <a href="#3-https-%e4%b8%a5%e6%a0%bc%e4%bc%a0%e8%be%93%e5%ae%89%e5%85%a8---hsts" class="header-mark"></a>3. HTTPS 严格传输安全 - HSTS</h4><p>HSTS，即 HTTP Strict Transport Security，是一项安全技术，它允许服务端在返回 HTTPS 响应时，通过 Headers 明确要求客户端，在之后的一段时间内必须使用安全的 HTTPS 协议访问服务端。</p>
<p>比如 <code>https://example.com/</code> 的响应头中有 <code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code>，表示服务端要求客户端（比如浏览器）：</p>
<ul>
<li>在接下来的 31536000 秒（即一年）中，客户端向 example.com 或<strong>其子域名</strong>发送 HTTP 请求时，必须采用HTTPS来发起连接。
<ul>
<li>比如用户在浏览器地址栏输入 <code>http://example.com/</code> 时，浏览器应自动将 http 改写为 https 再发起请求</li>
</ul>
</li>
<li>在接下来的 31536000 秒（即一年）中，如果 example.com 服务器提供的证书无效，用户不能忽略浏览器的证书警告继续访问网站。
<ul>
<li>也就是说一旦证书失效，站点将完全无法访问，直至服务端修复证书问题。</li>
<li>一旦证书失效，HTTPS 其实就不是严格安全的了，可能会遭遇中间人攻击。</li>
</ul>
</li>
</ul>
<h4 id="3-tls-协议的逆向手段" class="headerLink">
    <a href="#3-tls-%e5%8d%8f%e8%ae%ae%e7%9a%84%e9%80%86%e5%90%91%e6%89%8b%e6%ae%b5" class="header-mark"></a>3. TLS 协议的逆向手段</h4><p>要获取一个应用的 HTTPS 数据，有两个方向:</p>
<ol>
<li>服务端入侵: 现代应用的服务端突破难度通常都比较客户端高，注入等漏洞底层框架就有处理。
<ol>
<li>不过如果你获得了服务器 root 权限，可以在 openssl 上做文章，比如篡改 openssl？</li>
</ol>
</li>
<li>客户端逆向+爬虫: 客户端是离用户最近的地方，也是最容易被突破的地方。
<ol>
<li>mTLS 常见的破解手段，是找到老版本的安装包，发现很容易就能提取出客户端证书。。</li>
</ol>
</li>
</ol>
<blockquote>
<p>wiki 列出了一些 TLS 协议的安全问题：https://en.wikipedia.org/wiki/Transport_Layer_Security#Security</p>
</blockquote>
<p>TO BE DONE&hellip;</p>
<h2 id="三参考" class="headerLink">
    <a href="#%e4%b8%89%e5%8f%82%e8%80%83" class="header-mark"></a>三、参考</h2><ul>
<li>
<p><a href="https://halfrost.com/https_tls1-2_handshake/" target="_blank" rel="noopener noreffer">HTTPS 温故知新（三） —— 直观感受 TLS 握手流程(上)</a></p>
</li>
<li>
<p><a href="https://halfrost.com/https-key-cipher/" target="_blank" rel="noopener noreffer">HTTPS 温故知新（五） —— TLS 中的密钥计算</a></p>
</li>
<li>
<p><a href="https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd" target="_blank" rel="noopener noreffer">A complete overview of SSL/TLS and its cryptographic system</a></p>
</li>
<li>
<p><a href="https://kubernetes.io/docs/concepts/cluster-administration/certificates/" target="_blank" rel="noopener noreffer">Certificates - Kubernetes Docs</a></p>
</li>
<li>
<p><a href="https://help.aliyun.com/document_detail/28542.html" target="_blank" rel="noopener noreffer">证书选型和购买 - 阿里云文档</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA4MTQ2MjI5OA==&amp;mid=2664079008&amp;idx=1&amp;sn=dede1114d5705880ea757f8d9ae4c92d" target="_blank" rel="noopener noreffer">云原生安全破局｜如何管理周期越来越短的数字证书？</a></p>
</li>
</ul>
<p>另外两个关于 CN(Common Name) 和 SAN(Subject Altnative Name) 的问答:</p>
<ul>
<li><a href="https://serverfault.com/questions/880804/can-not-get-rid-of-neterr-cert-common-name-invalid-error-in-chrome-with-self" target="_blank" rel="noopener noreffer">Can not get rid of <code>net::ERR_CERT_COMMON_NAME_INVALID</code> error in chrome with self-signed certificates</a></li>
<li><a href="https://stackoverflow.com/questions/5935369/ssl-how-do-common-names-cn-and-subject-alternative-names-san-work-together" target="_blank" rel="noopener noreffer">SSL - How do Common Names (CN) and Subject Alternative Names (SAN) work together?</a></li>
</ul>
<p>关于证书锁定/公钥锁定技术:</p>
<ul>
<li><a href="https://owasp.org/www-community/controls/Certificate_and_Public_Key_Pinning" target="_blank" rel="noopener noreffer">Certificate and Public Key Pinning - OWASP</a></li>
<li><a href="https://security.stackexchange.com/questions/85209/difference-between-certificate-pinning-and-public-key-pinning" target="_blank" rel="noopener noreffer">Difference between certificate pinning and public key pinning</a></li>
</ul>
<p>其他推荐读物:</p>
<ul>
<li><a href="https://book.douban.com/subject/26822106/" target="_blank" rel="noopener noreffer">图解密码技术 - [日]结城浩</a></li>
<li><a href="https://mp.weixin.qq.com/s/li3ZjfNgX5nh7AKjyyzt5A" target="_blank" rel="noopener noreffer">给工程师：关于证书（certificate）和公钥基础设施（PKI）的一切</a></li>
</ul>
]]></content></entry><entry><title type="html">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</title><link href="https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/"/><id>https://thiscute.world/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/</id><author><name>ryan4yin</name></author><published>2022-03-09T20:50:00+08:00</published><updated>2022-03-13T15:26:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文部分内容翻译自 <a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a>，笔者补充了密码学历史以及 openssl 命令示例，并重写了 RSA/ECC 算法原理、代码示例等内容。</p>
</blockquote>
<blockquote>
<p>这篇文章中会涉及到一些数论知识，有点难度，觉得难的可以考虑跳过。
本文不会详细介绍这些数学知识，可以在有疑惑的时候自行查找相关知识。</p>
</blockquote>
<p>《写给开发人员的实用密码学》系列文章目录：</p>
<ul>
<li><a href="/posts/practical-cryptography-basics-1/" rel="">写给开发人员的实用密码学（一）—— 概览</a></li>
<li><a href="/posts/practical-cryptography-basics-2-hash/" rel="">写给开发人员的实用密码学（二）—— 哈希函数</a></li>
<li><a href="/posts/practical-cryptography-basics-3-key-derivation-function/" rel="">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</a></li>
<li><a href="/posts/practical-cryptography-basics-4-secure-random-generators/" rel="">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</a></li>
<li><a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a></li>
<li><a href="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/" rel="">写给开发人员的实用密码学（六）—— 对称密钥加密算法</a></li>
<li><a href="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/" rel="">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</a></li>
<li><a href="/posts/about-tls-cert" rel="">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></li>
<li>待续</li>
</ul>
<h2 id="一公钥密码学--非对称密码学" class="headerLink">
    <a href="#%e4%b8%80%e5%85%ac%e9%92%a5%e5%af%86%e7%a0%81%e5%ad%a6--%e9%9d%9e%e5%af%b9%e7%a7%b0%e5%af%86%e7%a0%81%e5%ad%a6" class="header-mark"></a>一、公钥密码学 / 非对称密码学</h2><p>在介绍非对称密钥加密方案和算法之前，我们首先要了解公钥密码学的概念。</p>
<h3 id="密码学的历史" class="headerLink">
    <a href="#%e5%af%86%e7%a0%81%e5%ad%a6%e7%9a%84%e5%8e%86%e5%8f%b2" class="header-mark"></a>密码学的历史</h3><p>从第一次世界大战、第二次世界大战到 1976 年这段时期密码的发展阶段，被称为「近代密码阶段」。
在近代密码阶段，所有的密码系统都使用对称密码算法——使用相同的密钥进行加解密。
当时使用的密码算法在拥有海量计算资源的现代人看来都是非常简单的，我们经常看到各种讲述一二战的谍战片，基本都包含破译电报的片段。</p>
<p>第一二次世界大战期间，无线电被广泛应用于军事通讯，围绕无线电通讯的加密破解攻防战极大地影响了战局。</p>
<p>公元20世纪初，第一次世界大战进行到关键时刻，英国破译密码的专门机构「40号房间」利用缴获的德国密码本破译了著名的「齐默尔曼电报」，其内容显示德国打算联合墨西哥对抗可能会参战的美国，这促使美国放弃中立对德宣战，从而彻底改变了一战的走势。</p>
<p>1943 年，美国从破译的日本电报中得知山本五十六将于 4 月 18 日乘中型轰炸机，由 6 架战斗机护航，到中途岛视察。美国总统罗斯福亲自做出决定截击山本，山本乘坐的飞机在去往中途岛的路上被美军击毁，战争天才山本五十六机毁人亡，日本海军从此一蹶不振。</p>
<p>此外，在二次世界大战中，美军将印第安纳瓦霍土著语言作为密码使用，并特别征募使用印第安纳瓦霍通信兵。在二次世界大战日美的太平洋战场上，美国海军军部让北墨西哥和亚历桑那印第安纳瓦霍族人使用纳瓦霍语进行情报传递。纳瓦霍语的语法、音调及词汇都极为独特，不为世人所知道，当时纳瓦霍族以外的美国人中，能听懂这种语言的也就一二十人。这是<strong>密码学</strong>和<strong>语言学</strong>的成功结合，纳瓦霍语密码成为历史上从未被破译的密码。</p>
<p>在 1976 年 Malcolm J. Williamson 公开发表了现在被称为「Diffie–Hellman 密钥交换，DHKE」的算法，并提出了「公钥密码学」的概念，这是密码学领域一项划时代的发明，它宣告了「近代密码阶段」的终结，是「现代密码学」的起点。</p>
<p>言归正传，对称密码算法的问题有两点：</p>
<ul>
<li>「<strong>需要安全的通道进行密钥交换</strong>」，早期最常见的是面对面交换密钥</li>
<li>每个点对点通信都需要使用不同的密钥，<strong>密钥的管理会变得很困难</strong>
<ul>
<li>如果你需要跟 100 个朋友安全通信，你就要维护 100 个不同的对称密钥，而且还得确保它们不泄漏。</li>
</ul>
</li>
</ul>
<p>这会导致巨大的「密钥交换」跟「密钥保存与管理」的成本。「公钥密码学」最大的优势就是，它解决了这两个问题：</p>
<ul>
<li>「公钥密码学」可以在<strong>不安全的信道</strong>上安全地进行密钥交换，第三方即使监听到通信过程，但是（几乎）无法破解出密钥。</li>
<li>每个人只需要公开自己的公钥，就可以跟其他任何人安全地通信。
<ul>
<li>如果你需要跟 100 个朋友安全通信，你们只需要公开自己的公钥。发送消息时使用对方的公钥加密，接收消息时使用自己的私钥解密即可。</li>
<li>只有你自己的私钥需要保密，所有的公钥都可以公开，这就显著降低了密钥的维护成本。</li>
</ul>
</li>
</ul>
<p>因此公钥密码学成为了现代密码学的基石，而「公钥密码学」的诞生时间 1976 年被认为是现代密码学的开端。</p>
<h3 id="公钥密码学的概念" class="headerLink">
    <a href="#%e5%85%ac%e9%92%a5%e5%af%86%e7%a0%81%e5%ad%a6%e7%9a%84%e6%a6%82%e5%bf%b5" class="header-mark"></a>公钥密码学的概念</h3><p>公钥密码系统的密钥始终以公钥 + 私钥对的形式出现，公钥密码系统提供数学框架和算法来生成公钥+私钥对。
公钥通常与所有人共享，而私钥则保密。
公钥密码系统在设计时就确保了在预期的算力下，几乎不可能从其公开的公钥逆向演算出对应的私钥。</p>
<p>公钥密码系统主要有三大用途：<strong>加密与解密、签名与验证、密钥交换</strong>。
每种算法都需要使用到公钥和私钥，比如由公钥加密的消息只能由私钥解密，由私钥签名的消息需要用公钥验证。</p>
<p>由于加密解密、签名验证均需要两个不同的密钥，故「公钥密码学」也被称为「<strong>非对称密码学</strong>」。</p>
<p>比较著名的公钥密码系统有：RSA、ECC（椭圆曲线密码学）、ElGamal、Diffie-Hellman、ECDH、ECDSA 和 EdDSA。许多密码算法都是以这些密码系统为基础实现的，例如 RSA 签名、RSA 加密/解密、ECDH 密钥交换以及 ECDSA 和 EdDSA 签名。</p>
<h3 id="量子安全性" class="headerLink">
    <a href="#%e9%87%8f%e5%ad%90%e5%ae%89%e5%85%a8%e6%80%a7" class="header-mark"></a>量子安全性</h3><blockquote>
<p>参考文档：https://en.wikipedia.org/wiki/Post-quantum_cryptography</p>
</blockquote>
<p>目前流行的公钥密码系统基本都依赖于 IFP（整数分解问题）、DLP（离散对数问题）或者 ECDLP（椭圆曲线离散对数问题），这导致这些算法都是<strong>量子不安全</strong>（quantum-unsafe）的。</p>
<p>如果人类进入量子时代，IFP / DLP / ECDLP 的难度将大大降低，目前流行的 RSA、ECC、ElGamal、Diffie-Hellman、ECDH、ECDSA 和 EdDSA 等公钥密码算法都将被淘汰。</p>
<p>目前已经有一些量子安全的公钥密码系统问世，但是因为它们需要更长的密钥、更长的签名等原因，目前还未被广泛使用。</p>
<p>一些量子安全的公钥密码算法举例：NewHope、NTRU、GLYPH、BLISS、XMSS、<a href="https://github.com/Microsoft/Picnic" target="_blank" rel="noopener noreffer">Picnic</a> 等，有兴趣的可以自行搜索相关文档。</p>
<h2 id="二非对称加密方案简介" class="headerLink">
    <a href="#%e4%ba%8c%e9%9d%9e%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88%e7%ae%80%e4%bb%8b" class="header-mark"></a>二、非对称加密方案简介</h2><p>非对称加密要比对称加密复杂，有如下几个原因：</p>
<ul>
<li>使用密钥对进行加解密，导致其算法更为复杂</li>
<li>只能加密/解密很短的消息
<ul>
<li>在 RSA 系统中，输入消息应该被转换为大整数（例如使用 OAEP 填充），然后才能进行加密。</li>
</ul>
</li>
<li>一些非对称密码系统（如 ECC）不直接提供加密能力，需要结合使用更复杂的方案才能实现加解密</li>
</ul>
<p>此外，非对称密码比对称密码慢非常多。比如 RSA 加密比 AES 慢 1000 倍，跟 ChaCha20 就更没法比了。</p>
<p>为了解决上面提到的这些困难并支持加密任意长度的消息，现代密码学使用「<strong>非对称加密方案</strong>」来实现消息加解密。
又因为「对称加密方案」具有速度快、支持加密任意长度消息等特性，「非对称加密方案」通常直接直接组合使用<strong>对称加密算法</strong>与<strong>非对称加密算法</strong>。比如「密钥封装机制 KEM（key encapsulation mechanisms)）」与「集成加密方案 IES（Integrated Encryption Scheme）」</p>
<h3 id="1-密钥封装机制-kem" class="headerLink">
    <a href="#1-%e5%af%86%e9%92%a5%e5%b0%81%e8%a3%85%e6%9c%ba%e5%88%b6-kem" class="header-mark"></a>1. 密钥封装机制 KEM</h3><p>顾名思义，KEM 就是仅使用非对称加密算法加密另一个密钥，实际数据的加解密由该密钥完成。</p>
<p>密钥封装机制 KEM 的加密流程（使用公钥加密传输对称密钥）：</p>
<figure><img src="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/hybrid-encryption.webp"/>
</figure>

<p>密钥封装机制 KEM 的解密流程（使用私钥解密出对称密钥，然后再使用这个对称密钥解密数据）：</p>
<figure><img src="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/hybrid-decryption.webp"/>
</figure>

<p>RSA-OAEP, RSA-KEM, ECIES-KEM 和 PSEC-KEM. 都是 KEM 加密方案。</p>
<h4 id="密钥封装key-encapsulation与密钥包裹key-wrapping" class="headerLink">
    <a href="#%e5%af%86%e9%92%a5%e5%b0%81%e8%a3%85key-encapsulation%e4%b8%8e%e5%af%86%e9%92%a5%e5%8c%85%e8%a3%b9key-wrapping" class="header-mark"></a>密钥封装（Key encapsulation）与密钥包裹（Key wrapping）</h4><p>主要区别在于使用的是对称加密算法、还是非对称加密算法：</p>
<ul>
<li>密钥封装（Key encapsulation）指使用非对称密码算法的公钥加密另一个密钥。</li>
<li>密钥包裹（Key wrapping）指使用对称密码算法加密另一个密钥。</li>
</ul>
<h3 id="2-集成加密方案-ies" class="headerLink">
    <a href="#2-%e9%9b%86%e6%88%90%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88-ies" class="header-mark"></a>2. 集成加密方案 IES</h3><p>集成加密方案 (IES) 在密钥封装机制（KEM）的基础上，添加了密钥派生算法 KDF、消息认证算法 MAC 等其他密码学算法以达成更高的安全性。</p>
<p>在 IES 方案中，非对称算法（如 RSA 或 ECC）跟 KEM 一样，都是用于加密或封装对称密钥，然后通过对称密钥（如 AES 或 Chacha20）来加密输入消息。</p>
<p>DLIES（离散对数集成加密方案）和 ECIES（椭圆曲线集成加密方案）都是 IES 方案。</p>
<h2 id="三rsa-密码系统" class="headerLink">
    <a href="#%e4%b8%89rsa-%e5%af%86%e7%a0%81%e7%b3%bb%e7%bb%9f" class="header-mark"></a>三、RSA 密码系统</h2><p>RSA 密码系统是最早的公钥密码系统之一，它基于 <a href="https://en.wikipedia.org/wiki/RSA_problem" target="_blank" rel="noopener noreffer">RSA 问题</a>和<a href="https://en.wikipedia.org/wiki/Integer_factorization" target="_blank" rel="noopener noreffer">整数分解问题 （IFP）</a>的计算难度。
RSA 算法以其作者（Rivest–Shamir–Adleman）的首字母命名。</p>
<p>RSA 算法在计算机密码学的早期被广泛使用，至今仍然是数字世界应用最广泛的密码算法。
但是随着 ECC 密码学的发展，ECC 正在非对称密码系统中慢慢占据主导地位，因为它比 RSA 具有更高的安全性和更短的密钥长度。</p>
<p>RSA 算法提供如下几种功能：</p>
<ul>
<li>密钥对生成：生成随机私钥（通常大小为 1024-4096 位）和相应的公钥。</li>
<li>加密解密：使用公钥加密消息（消息要先转换为 [0&hellip;key_length] 范围内的整数），然后使用密钥解密。</li>
<li>数字签名：签署消息（使用私钥）和验证消息签名（使用公钥）。
<ul>
<li>数字签名实际上是通过 Hash 算法 + 加密解密功能实现的。后面会介绍到，它与一般加解密流程的区别，在于数字签名使用私钥加密，再使用公钥解密。</li>
</ul>
</li>
<li>密钥交换：安全地传输密钥，用于以后的加密通信。</li>
</ul>
<p>RSA 可以使用不同长度的密钥：1024、2048、3072、4096、8129、16384 甚至更多位。目前 <strong>3072</strong> 位及以上的密钥长度被认为是安全的，曾经大量使用的 <strong>2048</strong> 位 RSA 现在被破解的风险在不断提升，已经不推荐使用了。</p>
<p>更长的密钥提供更高的安全性，但会消耗更多的计算时间，同时签名也会变得更长，因此需要在安全性和速度之间进行权衡。
非常长的 RSA 密钥（例如 50000 位或 65536 位）对于实际使用可能太慢，例如密钥生成可能需要几分钟到几个小时。</p>
<h3 id="rsa-密钥对生成" class="headerLink">
    <a href="#rsa-%e5%af%86%e9%92%a5%e5%af%b9%e7%94%9f%e6%88%90" class="header-mark"></a>RSA 密钥对生成</h3><p>RSA 密钥对的生成跟我们在本系列文章的第 5 篇介绍的「DHKE 密钥交换算法」会有些类似，但是要更复杂一点。</p>
<p>首先看下我们怎么使用 openssl 生成一个 1024 位的 RSA 密钥对（<strong>仅用做演示，实际应用中建议 3072 位</strong>）：</p>
<blockquote>
<p><a href="https://github.com/openssl/openssl" target="_blank" rel="noopener noreffer">OpenSSL</a> 是目前使用最广泛的网络加密算法库，支持非常多流行的现代密码学算法，几乎所有操作系统都会内置 openssl.</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 生成 1024 位的 RSA 私钥
</span></span><span class="line"><span class="cl">❯ openssl genrsa -out rsa-private-key.pem 1024
</span></span><span class="line"><span class="cl">Generating RSA private key, 1024 bit long modulus
</span></span><span class="line"><span class="cl">.................+++
</span></span><span class="line"><span class="cl">.....+++
</span></span><span class="line"><span class="cl">e is 65537 (0x10001)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 使用私钥生成对应的公钥文件
</span></span><span class="line"><span class="cl">❯ openssl rsa -in rsa-private-key.pem -pubout -out rsa-public-key.pem
</span></span><span class="line"><span class="cl">writing RSA key
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 查看私钥内容
</span></span><span class="line"><span class="cl">❯ cat rsa-private-key.pem
</span></span><span class="line"><span class="cl">-----BEGIN RSA PRIVATE KEY-----
</span></span><span class="line"><span class="cl">MIICXAIBAAKBgQDNE8QZLJZXREOeWZ2ilAzGC4Kjq/PfsFzrXGj8g3IaS4/J3JrB
</span></span><span class="line"><span class="cl">o3qEq/k9XoRzOmNPyvWCj2FAY7A099d7qX4ztthBpUM2ePDIYDvhL0EpfQqbhe+Q
</span></span><span class="line"><span class="cl">aagcFpuKTshGR2wBjH0Cl1/WxJkfIUMmWYU+m4iKLw9KfLX6BjmSgWB6HQIDAQAB
</span></span><span class="line"><span class="cl">AoGADb5NXgKG8MI6ZdpLniGd2Yfb8WwMo+kF0SAYSRPmCa0WrciC9ocmJs3/ngU/
</span></span><span class="line"><span class="cl">ixlWnnpTibRiKBaGMIaLglYRhvbvibUo8PH4woIidTho2e6swF2aqILk6YFJDpxX
</span></span><span class="line"><span class="cl">FCFdbXM4Cm2MqbD4VtmhCYqbvuiyEUci83YrRP0jJGNt0GECQQDyZgdi8JlFQFH8
</span></span><span class="line"><span class="cl">1QRHjLN57v5bHQamv7Qb77hlbdbg1wTYO+H8tsOB181TEHA7uN8hxkzyYZy+goRx
</span></span><span class="line"><span class="cl">n0hvJcQXAkEA2JWhCb7oG1eal1aUdgofxhlWnkoFeWHay2zgDWSqmGKyDt0Cb1jq
</span></span><span class="line"><span class="cl">XTdN9dchnqfptWN2/QPLDgM+/9g39/zv6wJATC1sXNeoE29nVMHNGn9JWCSXoyK4
</span></span><span class="line"><span class="cl">GGdevvjTRm0Cfp6UUzBekQEO6Btd16Du5JXw6bhcLkAm9mgmH18jcGq5+QJBALnr
</span></span><span class="line"><span class="cl">aDv3d0PRZdE372WMt03UfniOzjgueiVaJtMYcSEyx+reabKvvy+ZxACfVirdtU+S
</span></span><span class="line"><span class="cl">PJhhYzN6MeBp+VGV/VUCQBXz0LyM08roWi6DiaRwJIbYx+WCKEOGXQ9QsZND+sGr
</span></span><span class="line"><span class="cl">pOpugr3mcUge5dcZGKtsOUx2xRVmg88nSWMQVkTlsjQ=
</span></span><span class="line"><span class="cl">-----END RSA PRIVATE KEY-----
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 查看私钥的详细参数
</span></span><span class="line"><span class="cl">❯ openssl rsa -noout -text -in rsa-private-key.pem
</span></span><span class="line"><span class="cl">Private-Key: (1024 bit)
</span></span><span class="line"><span class="cl">modulus:
</span></span><span class="line"><span class="cl">    00💿13:c4:19:2c:96:57:44:43:9e:59:9d:a2:94:
</span></span><span class="line"><span class="cl">    0c:c6:0b:82:a3🆎f3:df:b0:5c:eb:5c:68:fc:83:
</span></span><span class="line"><span class="cl">    72:1a:4b:8f:c9:dc:9a:c1:a3:7a:84🆎f9:3d:5e:
</span></span><span class="line"><span class="cl">    84:73:3a:63:4f:ca:f5:82:8f:61:40:63:b0:34:f7:
</span></span><span class="line"><span class="cl">    d7:7b:a9:7e:33:b6:d8:41:a5:43:36:78:f0:c8:60:
</span></span><span class="line"><span class="cl">    3b:e1:2f:41:29:7d:0a:9b:85:ef:90:69:a8:1c:16:
</span></span><span class="line"><span class="cl">    9b:8a:4e:c8:46:47:6c:01:8c:7d:02:97:5f:d6:c4:
</span></span><span class="line"><span class="cl">    99:1f:21:43:26:59:85:3e:9b:88:8a:2f:0f:4a:7c:
</span></span><span class="line"><span class="cl">    b5:fa:06:39:92:81:60:7a:1d
</span></span><span class="line"><span class="cl">publicExponent: 65537 (0x10001)
</span></span><span class="line"><span class="cl">privateExponent:
</span></span><span class="line"><span class="cl">    0d:be:4d:5e:02:86:f0:c2:3a:65:da:4b:9e:21:9d:
</span></span><span class="line"><span class="cl">    d9:87:db:f1:6c:0c:a3:e9:05:d1:20:18:49:13:e6:
</span></span><span class="line"><span class="cl">    09:ad:16:ad:c8:82:f6:87:26:26:cd:ff:9e:05:3f:
</span></span><span class="line"><span class="cl">    8b:19:56:9e:7a:53:89:b4:62:28:16:86:30:86:8b:
</span></span><span class="line"><span class="cl">    82:56:11:86:f6:ef:89:b5:28:f0:f1:f8:c2:82:22:
</span></span><span class="line"><span class="cl">    75:38:68:d9:ee:ac:c0:5d:9a:a8:82:e4:e9:81:49:
</span></span><span class="line"><span class="cl">    0e:9c:57:14:21:5d:6d:73:38:0a:6d:8c:a9:b0:f8:
</span></span><span class="line"><span class="cl">    56:d9:a1:09:8a:9b:be:e8:b2:11:47:22:f3:76:2b:
</span></span><span class="line"><span class="cl">    44:fd:23:24:63:6d:d0:61
</span></span><span class="line"><span class="cl">prime1:
</span></span><span class="line"><span class="cl">    00:f2:66:07:62:f0:99:45:40:51:fc:d5:04:47:8c:
</span></span><span class="line"><span class="cl">    b3:79:ee:fe:5b:1d:06:a6:bf:b4:1b:ef:b8:65:6d:
</span></span><span class="line"><span class="cl">    d6:e0:d7:04:d8:3b:e1:fc:b6:c3:81:d7:cd:53:10:
</span></span><span class="line"><span class="cl">    70:3b:b8:df:21:c6:4c:f2:61:9c:be:82:84:71:9f:
</span></span><span class="line"><span class="cl">    48:6f:25:c4:17
</span></span><span class="line"><span class="cl">prime2:
</span></span><span class="line"><span class="cl">    00:d8:95:a1:09:be:e8:1b:57:9a:97:56:94:76:0a:
</span></span><span class="line"><span class="cl">    1f:c6:19:56:9e:4a:05:79:61:da:cb:6c:e0:0d:64:
</span></span><span class="line"><span class="cl">    aa:98:62:b2:0e:dd:02:6f:58:ea:5d:37:4d:f5:d7:
</span></span><span class="line"><span class="cl">    21:9e:a7:e9:b5:63:76:fd:03:cb:0e:03:3e:ff:d8:
</span></span><span class="line"><span class="cl">    37:f7:fc:ef:eb
</span></span><span class="line"><span class="cl">exponent1:
</span></span><span class="line"><span class="cl">    4c:2d:6c:5c:d7:a8:13:6f:67:54:c1💿1a:7f:49:
</span></span><span class="line"><span class="cl">    58:24:97:a3:22:b8:18:67:5e:be:f8:d3:46:6d:02:
</span></span><span class="line"><span class="cl">    7e:9e:94:53:30:5e:91:01:0e:e8:1b:5d:d7:a0:ee:
</span></span><span class="line"><span class="cl">    e4:95:f0:e9:b8:5c:2e:40:26:f6:68:26:1f:5f:23:
</span></span><span class="line"><span class="cl">    70:6a:b9:f9
</span></span><span class="line"><span class="cl">exponent2:
</span></span><span class="line"><span class="cl">    00:b9:eb:68:3b:f7:77:43:d1:65:d1:37:ef:65:8c:
</span></span><span class="line"><span class="cl">    b7:4d:d4:7e:78:8e:ce:38:2e:7a:25:5a:26:d3:18:
</span></span><span class="line"><span class="cl">    71:21:32:c7:ea🇩🇪69:b2:af:bf:2f:99:c4:00:9f:
</span></span><span class="line"><span class="cl">    56:2a:dd:b5:4f:92:3c:98:61:63:33:7a:31:e0:69:
</span></span><span class="line"><span class="cl">    f9:51:95:fd:55
</span></span><span class="line"><span class="cl">coefficient:
</span></span><span class="line"><span class="cl">    15:f3:d0:bc:8c:d3:ca:e8:5a:2e:83:89:a4:70:24:
</span></span><span class="line"><span class="cl">    86:d8:c7:e5:82:28:43:86:5d:0f:50:b1:93:43:fa:
</span></span><span class="line"><span class="cl">    c1🆎a4:ea:6e:82:bd:e6:71:48:1e:e5:d7:19:18:
</span></span><span class="line"><span class="cl">    ab:6c:39:4c:76:c5:15:66:83:cf:27:49:63:10:56:
</span></span><span class="line"><span class="cl">    44:e5:b2:34
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 查看私钥内容
</span></span><span class="line"><span class="cl">❯ cat rsa-public-key.pem 
</span></span><span class="line"><span class="cl">-----BEGIN PUBLIC KEY-----
</span></span><span class="line"><span class="cl">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDNE8QZLJZXREOeWZ2ilAzGC4Kj
</span></span><span class="line"><span class="cl">q/PfsFzrXGj8g3IaS4/J3JrBo3qEq/k9XoRzOmNPyvWCj2FAY7A099d7qX4ztthB
</span></span><span class="line"><span class="cl">pUM2ePDIYDvhL0EpfQqbhe+QaagcFpuKTshGR2wBjH0Cl1/WxJkfIUMmWYU+m4iK
</span></span><span class="line"><span class="cl">Lw9KfLX6BjmSgWB6HQIDAQAB
</span></span><span class="line"><span class="cl">-----END PUBLIC KEY-----
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 查看公钥的参数
</span></span><span class="line"><span class="cl">❯ openssl rsa -noout -text -pubin -in rsa-public-key.pem
</span></span><span class="line"><span class="cl">Public-Key: (1024 bit)
</span></span><span class="line"><span class="cl">Modulus:
</span></span><span class="line"><span class="cl">    00💿13:c4:19:2c:96:57:44:43:9e:59:9d:a2:94:
</span></span><span class="line"><span class="cl">    0c:c6:0b:82:a3🆎f3:df:b0:5c:eb:5c:68:fc:83:
</span></span><span class="line"><span class="cl">    72:1a:4b:8f:c9:dc:9a:c1:a3:7a:84🆎f9:3d:5e:
</span></span><span class="line"><span class="cl">    84:73:3a:63:4f:ca:f5:82:8f:61:40:63:b0:34:f7:
</span></span><span class="line"><span class="cl">    d7:7b:a9:7e:33:b6:d8:41:a5:43:36:78:f0:c8:60:
</span></span><span class="line"><span class="cl">    3b:e1:2f:41:29:7d:0a:9b:85:ef:90:69:a8:1c:16:
</span></span><span class="line"><span class="cl">    9b:8a:4e:c8:46:47:6c:01:8c:7d:02:97:5f:d6:c4:
</span></span><span class="line"><span class="cl">    99:1f:21:43:26:59:85:3e:9b:88:8a:2f:0f:4a:7c:
</span></span><span class="line"><span class="cl">    b5:fa:06:39:92:81:60:7a:1d
</span></span><span class="line"><span class="cl">Exponent: 65537 (0x10001)
</span></span></code></pre></td></tr></table>
</div>
</div><p>RSA 描述的私钥的结构如下（其中除 $n, d$ 之外的都是冗余信息）：</p>
<ul>
<li><code>modulus</code>: 模数 $n$</li>
<li><code>publicExponent</code>: 公指数 $e$，固定为 65537 (0x10001)</li>
<li><code>privateExponent</code>: 私钥指数 $d$</li>
<li><code>prime1</code>: 质数 p，用于计算 $n$</li>
<li><code>prime2</code>: 质数 q，用于计算 $n$</li>
<li><code>exponent1</code>: 用于加速 RSA 运算的中国剩余定理指数一，$d \mod (p-1)$</li>
<li><code>exponent2</code>: 用于加速 RSA 运算的中国剩余定理指数二，$d \mod (q-1)$</li>
<li><code>coefficient</code>: 用于加速 RSA 运算的中国剩余定理系数，$q^{-1} \mod p$</li>
</ul>
<p>再看下 RSA 公钥的结构：</p>
<ul>
<li><code>modulus</code>: 模数 $n$</li>
<li><code>exponent</code>: 公指数 $e$，固定为 65537 (0x10001)</li>
</ul>
<p>可以看到私钥文件中就已经包含了公钥的所有参数，实际上我们也是使用 <code>openssl rsa -in rsa-private-key.pem -pubout -out rsa-public-key.pem</code> 命令通过私钥生成出的对应的公钥文件。</p>
<p>下面就介绍下具体的密钥对生成流程，搞清楚 openssl 生成出的这个私钥，各项参数分别是什么含义：</p>
<blockquote>
<p>这里不会详细介绍其中的各种数学证明，具体的请参考维基百科。
相关数学知识包括取模运算的性质、欧拉函数、模倒数（拓展欧几里得算法）</p>
</blockquote>
<ul>
<li>随机选择两个不相等的质数 $p$ 与 $q$
<ul>
<li>p 跟 q 应该非常大，但是长度相差几个整数，这样会使得破解更加困难</li>
</ul>
</li>
<li>计算出模数 $n = pq$</li>
<li>计算欧拉函数的值 $\phi(n) = \phi(pq) = (p-1)(q-1)$</li>
<li>选择公指数 $e$，要求 $1 &lt; e &lt; \lambda (n)$，且 $e$ 与 $\phi(n)$ 互质，即 $\gcd(e, \phi(n)) = 1$。
<ul>
<li>目前 openssl 固定使用 65537 (0x10001) 作为 e 的值</li>
<li>曾经也有使用过 3 作为 e 的值，但是目前 3 已被证明不够安全</li>
</ul>
</li>
<li>计算出使等式 $ed \equiv 1 \bmod \phi(n)$ 成立的值 $d$，它就是我们的私钥指数
<ul>
<li>上述等式的含义：$ed$ 被 $\phi(n)$ 的余数为 $1$</li>
<li>等式可转换为 $ed = 1 + \phi(n) \cdot k$，其中 $k$ 为整数。</li>
<li>移项得 $e d + \phi(n) \cdot y = 1 = \gcd(e, \phi(n))$，其中 $y=-k$</li>
<li>上面的等式可使用<a href="https://zh.wikipedia.org/wiki/%E6%89%A9%E5%B1%95%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95" target="_blank" rel="noopener noreffer">拓展欧几里得算法</a>求解，wiki 有给出此算法的 Python 实现，非常简洁。</li>
</ul>
</li>
<li>使用 $(n, e)$ 组成公钥，使用 $(n, d)$ 组成私钥。其他参数可以保存在私钥中，也可丢弃。
<ul>
<li>$p, q, \phi(n), d$ 四个参数都必须保密，绝不能泄漏！</li>
</ul>
</li>
<li>在现有算力下，想要通过公钥的 $(n, e)$ 推算出 $d$ 是非常困难的，这保证了 RSA 算法的安全性。</li>
</ul>
<p>下面我们使用 Python 来通过 $p,q,e$ 计算出 $n, d$ 来，跟 openssl 打印的对比下，看看是否一致。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives</span> <span class="kn">import</span> <span class="n">serialization</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">key_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;./rsa-private-key.pem&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">private_key</span> <span class="o">=</span> <span class="n">serialization</span><span class="o">.</span><span class="n">load_pem_private_key</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">key_path</span><span class="o">.</span><span class="n">read_bytes</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">password</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">private</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">public</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span><span class="o">.</span><span class="n">public_numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="n">private</span><span class="o">.</span><span class="n">p</span>
</span></span><span class="line"><span class="cl"><span class="n">q</span> <span class="o">=</span> <span class="n">private</span><span class="o">.</span><span class="n">q</span>
</span></span><span class="line"><span class="cl"><span class="n">e</span> <span class="o">=</span> <span class="n">public</span><span class="o">.</span><span class="n">e</span>
</span></span><span class="line"><span class="cl"><span class="n">phi_n</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">extended_euclidean</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">      拓展欧几里得算法，能在计算出 a 与 b 的最大公约数的同时，给出 ax + by = gcd(a, b) 中的 x 与 y 的值
</span></span></span><span class="line"><span class="cl"><span class="s2">      代码来自 wiki: https://zh.wikipedia.org/wiki/</span><span class="si">%E</span><span class="s2">6</span><span class="si">%89%</span><span class="s2">A9</span><span class="si">%E</span><span class="s2">5%B1</span><span class="si">%95%</span><span class="s2">E6%AC%A7</span><span class="si">%E</span><span class="s2">5</span><span class="si">%87%</span><span class="s2">A0</span><span class="si">%E</span><span class="s2">9</span><span class="si">%87%</span><span class="s2">8C</span><span class="si">%E</span><span class="s2">5%BE</span><span class="si">%97%</span><span class="s2">E7%AE</span><span class="si">%97%</span><span class="s2">E6%B3%95
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">old_s</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="n">old_t</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="n">old_r</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">a</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">while</span><span class="p">(</span><span class="n">r</span><span class="o">!=</span><span class="mi">0</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="n">q</span> <span class="o">=</span> <span class="n">old_r</span> <span class="o">//</span> <span class="n">r</span>
</span></span><span class="line"><span class="cl">            <span class="n">old_r</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">r</span><span class="p">,</span> <span class="n">old_r</span><span class="o">-</span><span class="n">q</span><span class="o">*</span><span class="n">r</span>
</span></span><span class="line"><span class="cl">            <span class="n">old_s</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">,</span> <span class="n">old_s</span><span class="o">-</span><span class="n">q</span><span class="o">*</span><span class="n">s</span>
</span></span><span class="line"><span class="cl">            <span class="n">old_t</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="p">,</span> <span class="n">old_t</span><span class="o">-</span><span class="n">q</span><span class="o">*</span><span class="n">t</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">old_s</span><span class="p">,</span> <span class="n">old_t</span><span class="p">,</span> <span class="n">old_r</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 我们只需要 d，y 可忽略，而余数 remainder 肯定为 1，也可忽略</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">remainder</span> <span class="o">=</span> <span class="n">extended_euclidean</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">phi_n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; hex(n)=&#39;0xcd13c4192c965744439e599da2940cc60b82a3abf3dfb05ceb5c68fc83721a4b8fc9dc9ac1a37a84abf93d5e84733a634fcaf5828f614063b034f7d77ba97e33b6d841a5433678f0c8603be12f41297d0a9b85ef9069a81c169b8a4ec846476c018c7d02975fd6c4991f21432659853e9b888a2f0f4a7cb5fa06399281607a1d&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; hex(d)=&#39;0xdbe4d5e0286f0c23a65da4b9e219dd987dbf16c0ca3e905d120184913e609ad16adc882f6872626cdff9e053f8b19569e7a5389b46228168630868b82561186f6ef89b528f0f1f8c28222753868d9eeacc05d9aa882e4e981490e9c5714215d6d73380a6d8ca9b0f856d9a1098a9bbee8b2114722f3762b44fd2324636dd061&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>对比 RSA 的输出，可以发现去掉冒号后，<code>d</code> 跟 <code>n</code> 的值是完全相同的。</p>
<h3 id="rsa-加密与解密" class="headerLink">
    <a href="#rsa-%e5%8a%a0%e5%af%86%e4%b8%8e%e8%a7%a3%e5%af%86" class="header-mark"></a>RSA 加密与解密</h3><p>RSA 加密算法，一次只能加密一个小于 $n$ 的非负整数，假设明文为整数 $msg$，加密算法如下：</p>
<p>$$
\text{encryptedMsg} = msg^e \mod n
$$</p>
<p>通常的手段是，先使用 <a href="https://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding" target="_blank" rel="noopener noreffer">EAOP</a>  将被加密消息编码成一个个符合条件的整数，再使用上述公式一个个加密。</p>
<p>解密的方法，就是对被每一段加密的数据 $encryptedMsg$，进行如下运算：</p>
<p>$$
\text{decryptedMsg} = \text{encryptedMsg}^d \mod n
$$</p>
<h4 id="rsa-解密运算的证明" class="headerLink">
    <a href="#rsa-%e8%a7%a3%e5%af%86%e8%bf%90%e7%ae%97%e7%9a%84%e8%af%81%e6%98%8e" class="header-mark"></a>RSA 解密运算的证明</h4><blockquote>
<p>这里的证明需要用到一些数论知识，觉得不容易理解的话，建议自行查找相关资料。</p>
</blockquote>
<p>证明流程如下：</p>
<p>$$
\begin{alignedat}{2}
\text{decryptedMsg} &amp;= &amp;\text{encryptedMsg}^d &amp;\mod n \\
&amp;= &amp;{(msg^e \mod n)}^d &amp;\mod n \\
&amp;= &amp;{msg^{ed}} &amp;\mod n \\
&amp;= &amp;{msg^{ed}} &amp;\mod {pq}
\end{alignedat}
$$</p>
<p>接下来将下面两个等式代入上述计算中：</p>
<ul>
<li>我们在前面的「密钥对生成」一节中有给出等式：$ed = 1 + (p-1)(q-1) \cdot k$</li>
<li>因为 $0 \le msg \lt n$ 以及 $n = pq$，有 $msg \mod pq = msg$</li>
</ul>
<p>这样就得到：</p>
<p>$$
\begin{alignedat}{2}
\text{decryptedMsg} &amp;= &amp;{msg^{ed}} &amp;\mod {pq} \\
&amp;= &amp;{(msg \mod pq) \cdot (msg^{ed-1} \mod pq)} &amp;\mod {pq} \\
&amp;= &amp;{msg \cdot (msg^{(p-1)(q-1) \cdot k} \mod pq)} &amp;\mod {pq}
\end{alignedat}
$$</p>
<p>又有<a href="https://zh.wikipedia.org/wiki/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86" target="_blank" rel="noopener noreffer">费马小定理</a>指出，在 $a$ 为整数，$p$ 为质数的情况下，有同余等式</p>
<p>$$a^{p-1} \equiv 1 {\pmod  p}$$</p>
<p>因为我们的模数 $n=pq$ 并不是质数，不能直接利用费马小定理给出的同余公式。
但是 $p$, $q$ 两数都为质数，我们可以分别计算方程  对 $p$ 以及 $q$ 取模的结果，然后再根据<a href="https://zhuanlan.zhihu.com/p/44591114" target="_blank" rel="noopener noreffer">中国剩余定理</a>得出通解，也就得到我们需要的结果。</p>
<p>对于模 $p$ 的情况，计算方法如下：</p>
<ul>
<li>当 $msg = 0 \mod p$ 时，${msg^{ed}} \mod p = 0 \equiv msg \pmod  p$</li>
<li>当 $msg \ne 0 \mod p$ 时，利用费马小定理，有
$$
\begin{alignedat}{2}
msg^{ed} &amp;= &amp;{msg \cdot (msg^{(p-1)(q-1) \cdot k} \mod p)} &amp;\pmod {p}  \\
&amp;= &amp;msg \cdot (msg^{(p-1)} \mod p)^{(q-1) \cdot k} &amp;\pmod p \\
&amp;= &amp;msg \cdot 1^{(q-1) \cdot k} &amp;\pmod p \\
&amp;\equiv &amp;msg \pmod  p
\end{alignedat}
$$</li>
</ul>
<p>同理，对模 $q$ 的情况，也能得到等式</p>
<p>$$msg^{ed} \equiv msg \pmod  q$$</p>
<p>有了上面两个结果，根据中国剩余定理，就能得到</p>
<p>$$msg^{ed} \equiv msg \pmod  {pq}$$</p>
<p>现在再接续前面的计算：</p>
<p>$$
\begin{alignedat}{2}
\text{decryptedMsg} &amp;= &amp;{msg^{ed}} &amp;\pmod {pq} \\
&amp;= &amp;msg &amp;\pmod  {pq} \\
&amp;= &amp;msg
\end{alignedat}
$$</p>
<p>这样就证明了，解密操作得到的就是原始信息。</p>
<p>因为非对称加解密非常慢，对于较大的文件，通常会分成两步加密来提升性能：首先用使用对称加密算法来加密数据，再使用 RSA 等非对称加密算法加密上一步用到的「对称密钥」。</p>
<p>下面我们用 Python 来验证下 RSA 算法的加解密流程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives</span> <span class="kn">import</span> <span class="n">serialization</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 私钥</span>
</span></span><span class="line"><span class="cl"><span class="n">key_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;./rsa-private-key.pem&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">private_key</span> <span class="o">=</span> <span class="n">serialization</span><span class="o">.</span><span class="n">load_pem_private_key</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">key_path</span><span class="o">.</span><span class="n">read_bytes</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">password</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">private</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">public</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span><span class="o">.</span><span class="n">public_numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">private</span><span class="o">.</span><span class="n">d</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 公钥</span>
</span></span><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">public</span><span class="o">.</span><span class="n">n</span>
</span></span><span class="line"><span class="cl"><span class="n">e</span> <span class="o">=</span> <span class="n">public</span><span class="o">.</span><span class="n">e</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">int_to_bytes</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">x</span><span class="o">.</span><span class="n">to_bytes</span><span class="p">((</span><span class="n">x</span><span class="o">.</span><span class="n">bit_length</span><span class="p">()</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="o">//</span> <span class="mi">8</span><span class="p">,</span> <span class="s1">&#39;big&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">int_from_bytes</span><span class="p">(</span><span class="n">xbytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">xbytes</span><span class="p">,</span> <span class="s1">&#39;big&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fast_power_modular</span><span class="p">(</span><span class="n">b</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">p</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">m</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    快速模幂运算：b^p % m
</span></span></span><span class="line"><span class="cl"><span class="s2">    复杂度： O(log p)
</span></span></span><span class="line"><span class="cl"><span class="s2">    因为 RSA 的底数跟指数都非常大，如果先进行幂运算，最后再取模，计算结果会越来越大，导致速度非常非常慢
</span></span></span><span class="line"><span class="cl"><span class="s2">    根据模幂运算的性质  b^(ab) % m = (b^a % m)^b % m, 可以通过边进行幂运算边取模，极大地提升计算速度
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">p</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">p</span> <span class="o">&amp;</span> <span class="mh">0x1</span><span class="p">:</span> <span class="n">res</span> <span class="o">*=</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl">        <span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">**</span> <span class="mi">2</span> <span class="o">%</span> <span class="n">m</span>
</span></span><span class="line"><span class="cl">        <span class="n">p</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span> <span class="o">%</span> <span class="n">m</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 明文</span>
</span></span><span class="line"><span class="cl"><span class="n">original_msg</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;an example&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">original_msg</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 加密</span>
</span></span><span class="line"><span class="cl"><span class="n">msg_int</span> <span class="o">=</span> <span class="n">int_from_bytes</span><span class="p">(</span><span class="n">original_msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">encrypt_int</span> <span class="o">=</span> <span class="n">msg_int</span> <span class="o">**</span> <span class="n">e</span> <span class="o">%</span> <span class="n">n</span>
</span></span><span class="line"><span class="cl"><span class="n">encrypt_msg</span> <span class="o">=</span> <span class="n">int_to_bytes</span><span class="p">(</span><span class="n">encrypt_int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">encrypt_msg</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 解密</span>
</span></span><span class="line"><span class="cl"><span class="c1"># decrypt_int = encrypt_int ** d % n # 因为 d 非常大，直接使用公式计算会非常非常慢，所以不能这么算</span>
</span></span><span class="line"><span class="cl"><span class="n">decrypt_int</span> <span class="o">=</span> <span class="n">fast_power_modular</span><span class="p">(</span><span class="n">encrypt_int</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">decrypt_msg</span> <span class="o">=</span> <span class="n">int_to_bytes</span><span class="p">(</span><span class="n">decrypt_int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">decrypt_msg</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>  <span class="c1"># 应该与原信息完全一致</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="rsa-数字签名" class="headerLink">
    <a href="#rsa-%e6%95%b0%e5%ad%97%e7%ad%be%e5%90%8d" class="header-mark"></a>RSA 数字签名</h3><p>前面证明了可以使用公钥加密，再使用私钥解密。</p>
<p>实际上从上面的证明也可以看出来，顺序是完全可逆的，先使用私钥加密，再使用公钥解密也完全是可行的。这种运算被我们用在数字签名算法中。</p>
<p>数字签名的方法为：</p>
<ul>
<li>首先计算原始数据的 Hash 值，比如 SHA256</li>
<li>使用私钥对计算出的 Hash 值进行加密，得到数字签名</li>
<li>其他人使用公开的公钥进行解密出 Hash 值，再对原始数据计算 Hash 值对比，如果一致，就说明数据未被篡改</li>
</ul>
<p>Python 演示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">sha512</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives</span> <span class="kn">import</span> <span class="n">serialization</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">key_path</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;./rsa-private-key.pem&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">private_key</span> <span class="o">=</span> <span class="n">serialization</span><span class="o">.</span><span class="n">load_pem_private_key</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">key_path</span><span class="o">.</span><span class="n">read_bytes</span><span class="p">(),</span>
</span></span><span class="line"><span class="cl">    <span class="n">password</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">private</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">public</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span><span class="o">.</span><span class="n">public_numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">private</span><span class="o">.</span><span class="n">d</span>
</span></span><span class="line"><span class="cl"><span class="n">n</span> <span class="o">=</span> <span class="n">public</span><span class="o">.</span><span class="n">n</span>
</span></span><span class="line"><span class="cl"><span class="n">e</span> <span class="o">=</span> <span class="n">public</span><span class="o">.</span><span class="n">e</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># RSA sign the message</span>
</span></span><span class="line"><span class="cl"><span class="n">msg</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;A message for signing&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">hash</span> <span class="o">=</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">sha512</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">(),</span> <span class="n">byteorder</span><span class="o">=</span><span class="s1">&#39;big&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">signature</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="nb">hash</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Signature:&#34;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">signature</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># RSA verify signature</span>
</span></span><span class="line"><span class="cl"><span class="n">msg</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;A message for signing&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">hash</span> <span class="o">=</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">sha512</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">(),</span> <span class="n">byteorder</span><span class="o">=</span><span class="s1">&#39;big&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">hashFromSignature</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">signature</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Signature valid:&#34;</span><span class="p">,</span> <span class="nb">hash</span> <span class="o">==</span> <span class="n">hashFromSignature</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四ecc-密码系统" class="headerLink">
    <a href="#%e5%9b%9becc-%e5%af%86%e7%a0%81%e7%b3%bb%e7%bb%9f" class="header-mark"></a>四、ECC 密码系统</h2><figure><img src="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/ecc.webp"/>
</figure>

<p>ECC 椭圆曲线密码学，于 1985 年被首次提出，并于 2004 年开始被广泛应用。
ECC 被认为是 RSA 的继任者，新一代的非对称加密算法。</p>
<p>其最大的特点在于相同密码强度下，ECC 的密钥和签名的大小都要显著低于 RSA. 256bits 的 ECC 密钥，安全性与 3072bits 的 RSA 密钥安全性相当。</p>
<p>其次 ECC 的密钥对生成、密钥交换与签名算法的速度都要比 RSA 快。</p>
<h3 id="椭圆曲线的数学原理简介" class="headerLink">
    <a href="#%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e7%9a%84%e6%95%b0%e5%ad%a6%e5%8e%9f%e7%90%86%e7%ae%80%e4%bb%8b" class="header-mark"></a>椭圆曲线的数学原理简介</h3><p>在数学中，椭圆曲线（Elliptic Curves）是一种平面曲线，由如下方程定义的点的集合组成（$A-J$ 均为常数）：</p>
<p>$$
Ax^3 + Bx^2y + Cxy^2 + Dy^3 + Ex^2 + Fxy + Gy^2 + Hx + Iy + J = 0
$$</p>
<p>而 ECC 只使用了其中很简单的一个子集（$a, b$ 均为常数）：</p>
<p>$$
y^2 = x^3 + ax + b
$$</p>
<p>比如著名的 NIST 曲线 secp256k1 就是基于如下椭圆曲线方程：</p>
<p>$$
y^2 = x^3 + 7
$$</p>
<p>椭圆曲线大概长这么个形状：</p>
<blockquote>
<p>椭圆曲线跟椭圆的关系，就犹如雷锋跟雷峰塔、Java 跟 JavaScript&hellip;</p>
</blockquote>
<figure><img src="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/elliptic-curve.webp"/>
</figure>

<p>你可以通过如下网站手动调整 $a$ 与 $b$ 的值，拖动曲线的交点：
<a href="https://www.desmos.com/calculator/ialhd71we3?lang=zh-CN" target="_blank" rel="noopener noreffer">https://www.desmos.com/calculator/ialhd71we3?lang=zh-CN</a></p>
<h4 id="椭圆曲线上的运算" class="headerLink">
    <a href="#%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e4%b8%8a%e7%9a%84%e8%bf%90%e7%ae%97" class="header-mark"></a>椭圆曲线上的运算</h4><p>数学家在椭圆曲线上定义了一些运算规则，ECC 就依赖于这些规则，下面简单介绍下我们用得到的部分。</p>
<h5 id="1-加法与负元" class="headerLink">
    <a href="#1-%e5%8a%a0%e6%b3%95%e4%b8%8e%e8%b4%9f%e5%85%83" class="header-mark"></a>1. 加法与负元</h5><p>对于曲线上的任意两点 $A$ 与 $B$，我们定义过 $A, B$ 的直线与曲线的交点为 $-(A+B)$，而 $-(A+B)$ 相对于 x 轴的对称点即为 $A+B$:</p>
<figure><img src="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/ecc-add-operation.webp"/>
</figure>

<p>上述描述一是定义了椭圆曲线的加法规则，二是定义了椭圆曲线上的负元运算。</p>
<h5 id="2-二倍运算" class="headerLink">
    <a href="#2-%e4%ba%8c%e5%80%8d%e8%bf%90%e7%ae%97" class="header-mark"></a>2. 二倍运算</h5><p>在加法规则中，如果 $A=B$，我们定义曲线在 $A$ 点的切线与曲线的交点为 $-2A$，于是得到二倍运算的规则：</p>
<figure><img src="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/ecc-2-times.webp"/>
</figure>

<h5 id="3-无穷远点" class="headerLink">
    <a href="#3-%e6%97%a0%e7%a9%b7%e8%bf%9c%e7%82%b9" class="header-mark"></a>3. 无穷远点</h5><p>对于 $(-A) + A$ 这种一个值与其负元本身相加的情况，我们会发现过这两点的直线没有交点，前面定义的加法规则在这种情况下失效。
为了解决这个问题，我们假设这直线与椭圆曲线相交于无穷远点 $O_{\infty}$.</p>
<figure><img src="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/ecc-ifinite-point.webp"/>
</figure>

<h5 id="4-k-倍运算" class="headerLink">
    <a href="#4-k-%e5%80%8d%e8%bf%90%e7%ae%97" class="header-mark"></a>4. k 倍运算</h5><p>我们在前面已经定义了椭圆曲线上的<strong>加法运算</strong>、<strong>二倍运算</strong>以及<strong>无穷远点</strong>，有了这三个概念，我们就能定义<strong>k 倍运算</strong> 了。</p>
<p>K 倍运算最简单的计算方法，就是不断地进行加法运算，但是也有许多更高效的算法。
其中最简单的算法是「Double-and-add」，它要求首先 $k$ 拆分成如下形式</p>
<p>$$
k = k_{0}+2k_{1}+2^{2}k_{2}+\cdots +2^{m}k_{m} \\
\text{其中} k_{0}~..~k_{m}\in {0,1},m=\lfloor \log _{2}{k}\rfloor
$$</p>
<p>然后再迭代计算其中各项的值，它的运算复杂度为 $log_{2}(k)$.</p>
<p>因 Double 和 add 的执行时间不同，根据执行时间就可以知道是执行 Double 还是 add，间接可以推算出 k. 因此这个算法会有计时攻击的风险。
基于「Double-and-add」修改的蒙哥马利阶梯（Montgomery Ladder）是可以避免计时分析的作法，这里就不详细介绍了。</p>
<h4 id="5-有限域上的椭圆曲线" class="headerLink">
    <a href="#5-%e6%9c%89%e9%99%90%e5%9f%9f%e4%b8%8a%e7%9a%84%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf" class="header-mark"></a>5. 有限域上的椭圆曲线</h4><p>椭圆曲线是连续且无限的，而计算机却更擅长处理离散的、存在上限的整数，因此 ECC 使用「有限域上的椭圆曲线」进行计算。</p>
<p>「有限域（也被称作 Galois Filed, 缩写为 GF）」顾名思义，就是指只有有限个数值的域。</p>
<p>有限域上的椭圆曲线方程，通过取模的方式将曲线上的所有值都映射到同一个有限域内。
有限域 $\mathbb {F} _{p}$ 上的 EC 椭圆曲线方程为：</p>
<p>$$
y^2 = x^3 + ax + b (\mod p), 0 \le x \le p
$$</p>
<p>目前主要有两种有限域在 ECC 中被广泛应用：</p>
<ul>
<li>以素数为模的整数域: $\mathbb {F} _{p}$
<ul>
<li>在通用处理器上计算很快</li>
</ul>
</li>
<li>以 2 的幂为模的整数域: $\mathbb {F} _{2^{m}}$
<ul>
<li>当使用专用硬件时，计算速度很快</li>
</ul>
</li>
</ul>
<p>通过限制 x 为整数，并使用取模进行了映射后，椭圆曲线的形状已经面目全非了，它的加减法也不再具有几何意义。
但是它的一些特性仍然跟椭圆曲线很类似，各种公式基本加个 $\mod p$ 就变成了它的有限域版本：</p>
<ul>
<li>无穷远点 $O_{\infty}$ 是零元，$O_{\infty} + O_{\infty} = O_{\infty}$，$O_{\infty} + P = P$</li>
<li>$P_{x, y}$ 的负元为 $P_{x, -y}$,，并且有 $P + (-P) = O_{\infty}$</li>
<li>$P * 0 = O_{\infty}$</li>
<li>如果 $P_{x1, y1} + Q_{x2, y2} = R_{x3, y3}$，则其坐标有如下关系
<ul>
<li>$x3 = (k^2 - x1 - x2) \mod p$</li>
<li>$y3 = (k(x1 - x3) - y1) \mod p$</li>
<li>斜率 $k$ 的计算
<ul>
<li>如果 $P=Q$，则 $k=\dfrac {3x^{2}+a} {2y_{1}}$</li>
<li>否则 $k=\dfrac {y_{2}-y_{1}} {x_{2}-x_{1}} $</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="ecdlp-椭圆曲线离散对数问题" class="headerLink">
    <a href="#ecdlp-%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e7%a6%bb%e6%95%a3%e5%af%b9%e6%95%b0%e9%97%ae%e9%a2%98" class="header-mark"></a>ECDLP 椭圆曲线离散对数问题</h4><p>前面已经介绍了椭圆曲线上的 <strong>k 倍运算</strong> 及相关的高效算法，但是我们还没有涉及到除法。</p>
<p>椭圆曲线上的除法是一个尚未被解决的难题——「ECDLP 椭圆曲线离散对数问题」：</p>
<blockquote>
<p>已知 $kG$ 与基点 $G$，求整数 $k$ 的值。</p>
</blockquote>
<p>目前并没有有效的手段可以快速计算出 $k$ 的值。
比较直观的方法应该是从基点 $G$ 开始不断进行加法运算，直到结果与 $kG$ 相等。</p>
<p>目前已知的 ECDLP 最快的解法所需步骤为 $\sqrt{k}$，而 <strong>k 倍运算</strong>高效算法前面已经介绍过了，所需步骤为 $log_2(k)$。
在 $k$ 非常大的情况下，它们的计算用时将会有指数级的差距。</p>
<blockquote>
<p>椭圆曲线上的 <strong>k 倍运算</strong>与素数上的幂运算很类似，因此 ECC 底层的数学难题 ECDLP 与 RSA 的离散对数问题 DLP 也有很大相似性。</p>
</blockquote>
<h3 id="ecc-密钥对生成" class="headerLink">
    <a href="#ecc-%e5%af%86%e9%92%a5%e5%af%b9%e7%94%9f%e6%88%90" class="header-mark"></a>ECC 密钥对生成</h3><p>首先，跟 RSA 一样，让我们先看下怎么使用 openssl 生成一个使用 prime256v1 曲线的 ECC 密钥对：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 列出 openssl 支持的所有曲线名称</span>
</span></span><span class="line"><span class="cl">openssl ecparam -list_curves
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 生成 ec 算法的私钥，使用 prime256v1 算法，密钥长度 256 位。（强度大于 2048 位的 RSA 密钥）</span>
</span></span><span class="line"><span class="cl">openssl ecparam -genkey -name prime256v1 -out ecc-private-key.pem
</span></span><span class="line"><span class="cl"><span class="c1"># 通过密钥生成公钥</span>
</span></span><span class="line"><span class="cl">openssl ec -in ecc-private-key.pem -pubout -out ecc-public-key.pem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看私钥内容</span>
</span></span><span class="line"><span class="cl">❯ cat ecc-private-key.pem
</span></span><span class="line"><span class="cl">-----BEGIN EC PARAMETERS-----
</span></span><span class="line"><span class="cl"><span class="nv">BggqhkjOPQMBBw</span><span class="o">==</span>
</span></span><span class="line"><span class="cl">-----END EC PARAMETERS-----
</span></span><span class="line"><span class="cl">-----BEGIN EC PRIVATE KEY-----
</span></span><span class="line"><span class="cl">MHcCAQEEIGm3wT/m4gDaoJGKfAHDXV2BVtdyb/aPTITJR5B6KVEtoAoGCCqGSM49
</span></span><span class="line"><span class="cl">AwEHoUQDQgAE5IEIorw0WU5+om/UgfyYSKosiGO6Hpe8hxkqL5GUVPyu4LJkfw/e
</span></span><span class="line"><span class="cl">99zhNJatliZ1Az/yCKww5KrXC8bQ9wGQvw<span class="o">==</span>
</span></span><span class="line"><span class="cl">-----END EC PRIVATE KEY-----
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看私钥的详细参数</span>
</span></span><span class="line"><span class="cl">❯ openssl ec -noout -text -in ecc-private-key.pem
</span></span><span class="line"><span class="cl"><span class="nb">read</span> EC key
</span></span><span class="line"><span class="cl">Private-Key: <span class="o">(</span><span class="m">256</span> bit<span class="o">)</span>
</span></span><span class="line"><span class="cl">priv:
</span></span><span class="line"><span class="cl">    69:b7:c1:3f:e6:e2:00:da:a0:91:8a:7c:01:c3:5d:
</span></span><span class="line"><span class="cl">    5d:81:56:d7:72:6f:f6:8f:4c:84:c9:47:90:7a:29:
</span></span><span class="line"><span class="cl">    51:2d
</span></span><span class="line"><span class="cl">pub: 
</span></span><span class="line"><span class="cl">    04:e4:81:08:a2:bc:34:59:4e:7e:a2:6f:d4:81:fc:
</span></span><span class="line"><span class="cl">    98:48:aa:2c:88:63:ba:1e:97:bc:87:19:2a:2f:91:
</span></span><span class="line"><span class="cl">    94:54:fc:ae:e0:b2:64:7f:0f🇩🇪f7:dc:e1:34:96:
</span></span><span class="line"><span class="cl">    ad:96:26:75:03:3f:f2:08:ac:30:e4:aa:d7:0b:c6:
</span></span><span class="line"><span class="cl">    d0:f7:01:90:bf
</span></span><span class="line"><span class="cl">ASN1 OID: prime256v1
</span></span><span class="line"><span class="cl">NIST CURVE: P-256
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看公钥内容</span>
</span></span><span class="line"><span class="cl">❯ cat ecc-public-key.pem 
</span></span><span class="line"><span class="cl">-----BEGIN PUBLIC KEY-----
</span></span><span class="line"><span class="cl">MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE5IEIorw0WU5+om/UgfyYSKosiGO6
</span></span><span class="line"><span class="cl">Hpe8hxkqL5GUVPyu4LJkfw/e99zhNJatliZ1Az/yCKww5KrXC8bQ9wGQvw<span class="o">==</span>
</span></span><span class="line"><span class="cl">-----END PUBLIC KEY-----
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看公钥的参数</span>
</span></span><span class="line"><span class="cl">❯ openssl ec -noout -text -pubin -in ecc-public-key.pem
</span></span><span class="line"><span class="cl"><span class="nb">read</span> EC key
</span></span><span class="line"><span class="cl">Private-Key: <span class="o">(</span><span class="m">256</span> bit<span class="o">)</span>
</span></span><span class="line"><span class="cl">pub: 
</span></span><span class="line"><span class="cl">    04:e4:81:08:a2:bc:34:59:4e:7e:a2:6f:d4:81:fc:
</span></span><span class="line"><span class="cl">    98:48:aa:2c:88:63:ba:1e:97:bc:87:19:2a:2f:91:
</span></span><span class="line"><span class="cl">    94:54:fc:ae:e0:b2:64:7f:0f🇩🇪f7:dc:e1:34:96:
</span></span><span class="line"><span class="cl">    ad:96:26:75:03:3f:f2:08:ac:30:e4:aa:d7:0b:c6:
</span></span><span class="line"><span class="cl">    d0:f7:01:90:bf
</span></span><span class="line"><span class="cl">ASN1 OID: prime256v1
</span></span><span class="line"><span class="cl">NIST CURVE: P-256
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到 ECC 算法的公钥私钥都比 RSA 小了非常多，数据量小，却能带来同等的安全强度，这是 ECC 相比 RSA 最大的优势。</p>
<p>私钥的参数：</p>
<ul>
<li><code>priv</code>: 私钥，一个 256bits 的大整数，对应我们前面介绍的 $k 倍运算$中的 $k$</li>
<li><code>pub</code>: 公钥，是一个椭圆曲线（EC）上的坐标 ${x, y}$，也就是我们 well-known 的基点 $G$</li>
<li><code>ASN1 OID</code>: prime256v1, 椭圆曲线的名称</li>
<li><code>NIST CURVE</code>: P-256</li>
</ul>
<p>使用安全随机数生成器即可直接生成出 ECC 的私钥 <code>priv</code>，因此 ECC 的密钥对生成速度非常快。</p>
<h3 id="ecdh-密钥交换" class="headerLink">
    <a href="#ecdh-%e5%af%86%e9%92%a5%e4%ba%a4%e6%8d%a2" class="header-mark"></a>ECDH 密钥交换</h3><p>这个在前面<a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a>已经介绍过了，不过这里再复述一遍：</p>
<ul>
<li>Alice 跟 Bob 协商好椭圆曲线的各项参数，以及基点 G，这些参数都是公开的。</li>
<li>Alice 生成一个随机的 ECC 密钥对（公钥：$alicePrivate * G$, 私钥: $alicePrivate$）</li>
<li>Bob 生成一个随机的 ECC 密钥对（公钥：$bobPrivate * G$, 私钥: $bobPrivate$）</li>
<li>两人通过不安全的信道交换公钥</li>
<li>Alice 将 Bob 的公钥乘上自己的私钥，得到共享密钥 $sharedKey = (bobPrivate * G) * alicePrivate$</li>
<li>Bob 将 Alice 的公钥乘上自己的私钥，得到共享密钥 $sharedKey = (alicePrivate * G) * bobPrivate$</li>
<li>因为 $(a * G) * b = (b * G) * a$，Alice 与 Bob 计算出的共享密钥应该是相等的</li>
</ul>
<p>这样两方就通过 ECDH 完成了密钥交换。
而 ECDH 的安全性，则由 ECDLP 问题提供保证。</p>
<h3 id="ecc-加密与解密" class="headerLink">
    <a href="#ecc-%e5%8a%a0%e5%af%86%e4%b8%8e%e8%a7%a3%e5%af%86" class="header-mark"></a>ECC 加密与解密</h3><p>ECC 本身并没有提供加密与解密的功能，但是我们可以借助 ECDH 迂回实现加解密。流程如下：</p>
<ul>
<li>Bob 想要将消息 <code>M</code> 安全地发送给 Alice，他手上已经拥有了 Alice 的 ECC 公钥 <code>alicePubKey</code></li>
<li>Bob 首先使用如下算法生成出「共享密钥」+「密文公钥」
<ul>
<li>随机生成一个临时 ECC 密钥对
<ul>
<li>私钥：安全随机数 <code>ciphertextPrivKey</code></li>
<li>公钥：<code>ciphertextPubKey = ciphertextPrivKey * G</code></li>
</ul>
</li>
<li>使用 ECDH 计算出共享密钥：<code>sharedECCKey = alicePubKey * ciphertextPrivKey</code></li>
</ul>
</li>
<li>Bob 使用「共享密钥」与对称加密算法加密消息，得到密文 <code>C</code>
<ul>
<li>比如使用 AES-256-GCM 或者 ChaCha20-Poly1305 进行对称加密</li>
</ul>
</li>
<li>Bob 将 <code>C</code> + <code>ciphertextPubKey</code> 打包传输给 Alice</li>
<li>Alice 使用 <code>ciphertextPubKey</code> 与自己的私钥计算出共享密钥 <code>sharedECCKey = ciphertextPubKey * alicePrivKey</code></li>
<li>Alice 使用计算出的共享密钥解密 <code>C</code> 得到消息 <code>M</code></li>
</ul>
<p>实际上就是消息的发送方先生成一个临时的 ECC 密钥对，然后借助 ECDH 协议计算出共享密钥用于加密。
消息的接收方同样通过 ECDH 协议计算出共享密钥再解密数据。</p>
<p>使用 Python 演示如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install tinyec  # &lt;= ECC 曲线库</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tinyec</span> <span class="kn">import</span> <span class="n">registry</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">secrets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用这条曲线进行演示</span>
</span></span><span class="line"><span class="cl"><span class="n">curve</span> <span class="o">=</span> <span class="n">registry</span><span class="o">.</span><span class="n">get_curve</span><span class="p">(</span><span class="s1">&#39;brainpoolP256r1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compress_point</span><span class="p">(</span><span class="n">point</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">hex</span><span class="p">(</span><span class="n">point</span><span class="o">.</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">point</span><span class="o">.</span><span class="n">y</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">ecc_calc_encryption_keys</span><span class="p">(</span><span class="n">pubKey</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    安全地生成一个随机 ECC 密钥对，然后按 ECDH 流程计算出共享密钥 sharedECCKey
</span></span></span><span class="line"><span class="cl"><span class="s2">    最后返回（共享密钥, 临时 ECC 公钥 ciphertextPubKey）
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">ciphertextPrivKey</span> <span class="o">=</span> <span class="n">secrets</span><span class="o">.</span><span class="n">randbelow</span><span class="p">(</span><span class="n">curve</span><span class="o">.</span><span class="n">field</span><span class="o">.</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">ciphertextPubKey</span> <span class="o">=</span> <span class="n">ciphertextPrivKey</span> <span class="o">*</span> <span class="n">curve</span><span class="o">.</span><span class="n">g</span>
</span></span><span class="line"><span class="cl">    <span class="n">sharedECCKey</span> <span class="o">=</span> <span class="n">pubKey</span> <span class="o">*</span> <span class="n">ciphertextPrivKey</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">sharedECCKey</span><span class="p">,</span> <span class="n">ciphertextPubKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">ecc_calc_decryption_key</span><span class="p">(</span><span class="n">privKey</span><span class="p">,</span> <span class="n">ciphertextPubKey</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">sharedECCKey</span> <span class="o">=</span> <span class="n">ciphertextPubKey</span> <span class="o">*</span> <span class="n">privKey</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">sharedECCKey</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 首先生成出 Alice 的 ECC 密钥对</span>
</span></span><span class="line"><span class="cl"><span class="n">privKey</span> <span class="o">=</span> <span class="n">secrets</span><span class="o">.</span><span class="n">randbelow</span><span class="p">(</span><span class="n">curve</span><span class="o">.</span><span class="n">field</span><span class="o">.</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">pubKey</span> <span class="o">=</span> <span class="n">privKey</span> <span class="o">*</span> <span class="n">curve</span><span class="o">.</span><span class="n">g</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;private key:&#34;</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">privKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;public key:&#34;</span><span class="p">,</span> <span class="n">compress_point</span><span class="p">(</span><span class="n">pubKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. Alice 将公钥发送给 Bob</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. Bob 使用 Alice 的公钥生成出（共享密钥, 临时 ECC 公钥 ciphertextPubKey）</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="n">encryptKey</span><span class="p">,</span> <span class="n">ciphertextPubKey</span><span class="p">)</span> <span class="o">=</span> <span class="n">ecc_calc_encryption_keys</span><span class="p">(</span><span class="n">pubKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;ciphertext pubKey:&#34;</span><span class="p">,</span> <span class="n">compress_point</span><span class="p">(</span><span class="n">ciphertextPubKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;encryption key:&#34;</span><span class="p">,</span> <span class="n">compress_point</span><span class="p">(</span><span class="n">encryptKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 4. Bob 使用共享密钥 encryptKey 加密数据，然后将密文与 ciphertextPubKey 一起发送给 Alice</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 5. Alice 使用自己的私钥 + ciphertextPubKey 计算出共享密钥 decryptKey</span>
</span></span><span class="line"><span class="cl"><span class="n">decryptKey</span> <span class="o">=</span> <span class="n">ecc_calc_decryption_key</span><span class="p">(</span><span class="n">privKey</span><span class="p">,</span> <span class="n">ciphertextPubKey</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;decryption key:&#34;</span><span class="p">,</span> <span class="n">compress_point</span><span class="p">(</span><span class="n">decryptKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 6. Alice 使用 decryptKey 解密密文得到原始消息</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ecc-数字签名" class="headerLink">
    <a href="#ecc-%e6%95%b0%e5%ad%97%e7%ad%be%e5%90%8d" class="header-mark"></a>ECC 数字签名</h3><p>前面已经介绍了 RSA 签名，这里介绍下基于 ECC 的签名算法。</p>
<p>基于 ECC 的签名算法主要有两种：ECDSA 与 EdDSA，以及 EdDSA 的变体。
其中 ECDSA 算法稍微有点复杂，而安全强度跟它基本一致的 EdDSA 的算法更简洁更易于理解，在使用特定曲线的情况下 EdDSA 还要比 ECDSA 更快一点，因此现在通常更推荐使用 <strong>EdDSA</strong> 算法。</p>
<h4 id="eddsa-与-ed25519-签名算法" class="headerLink">
    <a href="#eddsa-%e4%b8%8e-ed25519-%e7%ad%be%e5%90%8d%e7%ae%97%e6%b3%95" class="header-mark"></a>EdDSA 与 Ed25519 签名算法</h4><p>EdDSA（Edwards-curve Digital Signature Algorithm）是一种现代的安全数字签名算法，它使用专为性能优化的椭圆曲线，如 255bits 曲线 edwards25519 和 448bits 曲线 edwards448.</p>
<p>EdDSA 签名算法及其变体 Ed25519 和 Ed448 在技术上在 <a href="https://tools.ietf.org/html/rfc8032" target="_blank" rel="noopener noreffer">RFC8032</a> 中进行了描述。</p>
<p>首先，用户需要基于 edwards25519 或者 edwards448 曲线，生成一个 ECC 密钥对。
生成私钥的时候，算法首先生成一个随机数，然后会对随机数做一些变换以确保安全性，防范计时攻击等攻击手段。
对于 edwards25519 公私钥都是 32 字节，而对于 edwards448 公私钥都是 57 字节。</p>
<p>对于 edwards25519 输出的签名长度为 64 字节，而对于 Ed448 输出为 114 字节。</p>
<p>具体的算法虽然比 ECDSA 简单，但还是有点难度的，这里就直接略过了。</p>
<p>下面给出个 ed25519 的计算示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.asymmetric.ed25519</span> <span class="kn">import</span> <span class="n">Ed25519PrivateKey</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 也可用 openssl 生成，都没啥毛病</span>
</span></span><span class="line"><span class="cl"><span class="n">private_key</span> <span class="o">=</span> <span class="n">Ed25519PrivateKey</span><span class="o">.</span><span class="n">generate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 签名</span>
</span></span><span class="line"><span class="cl"><span class="n">signature</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">sign</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;my authenticated message&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 显然 ECC 的公钥 kG 也能直接从私钥 k 生成</span>
</span></span><span class="line"><span class="cl"><span class="n">public_key</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 验证</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Raises InvalidSignature if verification fails</span>
</span></span><span class="line"><span class="cl"><span class="n">public_key</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">signature</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;my authenticated message&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>ed448 的代码也完全类似：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.asymmetric.ed448</span> <span class="kn">import</span> <span class="n">Ed448PrivateKey</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">private_key</span> <span class="o">=</span> <span class="n">Ed448PrivateKey</span><span class="o">.</span><span class="n">generate</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">signature</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">sign</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;my authenticated message&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">public_key</span> <span class="o">=</span> <span class="n">private_key</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Raises InvalidSignature if verification fails</span>
</span></span><span class="line"><span class="cl"><span class="n">public_key</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">signature</span><span class="p">,</span> <span class="sa">b</span><span class="s2">&#34;my authenticated message&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="密码学常用椭圆曲线介绍" class="headerLink">
    <a href="#%e5%af%86%e7%a0%81%e5%ad%a6%e5%b8%b8%e7%94%a8%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e4%bb%8b%e7%bb%8d" class="header-mark"></a>密码学常用椭圆曲线介绍</h3><p>在介绍密码学中的常用椭圆曲线前，需要先介绍一下椭圆曲线的<strong>阶</strong>（order）以及<strong>辅助因子</strong>（cofactor）这两个概念。</p>
<p>首先还得介绍下数学中「循环群」的概念，它是指能由单个元素所生成的群，在 ECC 中这就是预先定义好的基点 $G$.</p>
<p>一个有限域上的椭圆曲线可以形成一个有限「循环代数群」，它由曲线上的所有点组成。椭圆曲线的<strong>阶</strong>被定义为该曲线上所有点的个数（包括无穷远点）。</p>
<p>有些曲线加上 G 点可以形成一个单一循环群，这一个群包含了曲线上的所有点。而其他的曲线加上 G 点则形成多个不相交的循环子群，每个子群包含了曲线的一个子集。
对于上述第二种情况，假设曲线上的点被拆分到了 <strong>h</strong> 个循环子群中，每个子群的<strong>阶</strong>都是 <strong>r</strong>，那这时整个群的阶就是 $n = h * r$，其中子群的个数 <strong>h</strong> 被称为<strong>辅助因子</strong>。</p>
<figure><img src="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/elliptic-curve-subgroups.webp"/>
</figure>

<p>有限域上的椭圆曲线的阶都是有限的，也就是说对于曲线上任意一点 $G$，我们计算它的数乘 $kG$，随着整数 $k$ 的增大，一定会存在某个 $k$ 使 $kG = O_{\infty}$ 成立，然后 $k$ 继续增大时，因为 $O_{\infty} * P = O_{\infty}$，$kG$ 的值就固定为 $O_{\infty}$ 了，更大的 $k$ 值已经失去了意义。</p>
<p>因此 ECC 中要求 $kG$ 中的私钥 $k$ 符合条件 $0 \le k \le r$，也就是说总的私钥数量是受 $r$ 限制的。</p>
<p>辅助因子通过用如下公式表示：</p>
<p>$$
h = n / r
$$</p>
<p>其中 $n$ 是曲线的阶，$r$ 是每个子群的阶，$h$ 是辅助因子。
如果曲线形成了一个单一循环群，那显然 $h = 1$，否则 $h &gt; 1$</p>
<p>举例如下：</p>
<ul>
<li><code>secp256k1</code> 的辅助因子为 1</li>
<li><code>Curve25519</code> 的辅助因子为 8</li>
<li><code>Curve448</code> 的辅助因子为 4</li>
</ul>
<h4 id="生成点-g" class="headerLink">
    <a href="#%e7%94%9f%e6%88%90%e7%82%b9-g" class="header-mark"></a>生成点 G</h4><p>生成点 G 的选择是很有讲究的，虽然每个循环子群都包含有很多个生成点，但是 ECC 只会谨慎的选择其中一个。
首先 G 点必须要能生成出整个循环子群，其次还需要有尽可能高的计算性能。</p>
<p>数学上已知某些椭圆曲线上，不同的生成点生成出的循环子群，阶也是不同的。如果 G 点选得不好，可能会导致生成出的子群的阶较小。
前面我们已经提过子群的阶 $r$ 会限制总的私钥数量，导致算法强度变弱！因此不恰当的 $G$ 点可能会导致我们遭受「<a href="https://datatracker.ietf.org/doc/html/rfc2785" target="_blank" rel="noopener noreffer">小子群攻击</a>」。
为了避免这种风险，建议尽量使用被广泛使用的加密库，而不是自己撸一个。</p>
<h4 id="椭圆曲线的域参数" class="headerLink">
    <a href="#%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf%e7%9a%84%e5%9f%9f%e5%8f%82%e6%95%b0" class="header-mark"></a>椭圆曲线的域参数</h4><p>ECC椭圆曲线由一组椭圆曲线域参数描述，如曲线方程参数、场参数和生成点坐标。这些参数在各种密码学标准中指定，你可以网上搜到相应的 RFC 或 NIST 文档。</p>
<p>这些标准定义了一组命名曲线的参数，例如 secp256k1、P-521、brainpoolP512t1 和 SM2. 这些加密标准中描述的有限域上的椭圆曲线得到了密码学家的充分研究和分析，并被认为具有一定的安全强度。</p>
<p>也有一些密码学家（如 Daniel Bernstein）认为，官方密码标准中描述的大多数曲线都是「不安全的」，并定义了他们自己的密码标准，这些标准在更广泛的层面上考虑了 ECC 安全性。</p>
<p>开发人员应该仅使用各项标准文档给出的、经过密码学家充分研究的命名曲线。</p>
<h5 id="secp256k1" class="headerLink">
    <a href="#secp256k1" class="header-mark"></a>secp256k1</h5><p>此曲线被应用在比特币中，它的域参数如下：</p>
<ul>
<li><em><strong>p</strong></em> (modulus) = <code>0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F</code></li>
<li><em><strong>n</strong></em> (order; size; the count of all possible EC points) = <code>0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141</code></li>
<li><em><strong>a</strong></em> (方程 $y^2 ≡ x^3 + a*x + b (\mod p)$ 中的常数) = <code>0x0000000000000000000000000000000000000000000000000000000000000000</code></li>
<li><em><strong>b</strong></em> (方程 $y^2 ≡ x^3 + a*x + b (\mod p)$ 中的常数)= <code>0x0000000000000000000000000000000000000000000000000000000000000007</code></li>
<li><em><strong>g</strong></em> (the curve generator point G {x, y}) = (<code>0x79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798</code>, <code>0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8</code>)</li>
<li><em><strong>h</strong></em> (cofactor, typically 1) = 01</li>
</ul>
<h5 id="edwards-曲线" class="headerLink">
    <a href="#edwards-%e6%9b%b2%e7%ba%bf" class="header-mark"></a>Edwards 曲线</h5><p>椭圆曲线方程除了我们前面使用的 Weierstrass 形式 $$y^2 = (x^3 + ax + b) \mod p$$ 外，还可以被写成其他多种形式，这些不同的形式是<a href="https://zh.wikipedia.org/zh-hans/%E6%9C%89%E7%90%86%E6%98%A0%E5%B0%84" target="_blank" rel="noopener noreffer">双有理等价</a>的（别问，我也不懂什么叫「双有理等价」&hellip;）。
不同的方程形式在计算机的数值计算上可能会存在区别。</p>
<p>为了性能考虑，ECC 在部分场景下会考虑使用 Edwards 曲线形式进行计算，该方程形式如下：</p>
<p>$$
x^{2}+y^{2}=1+dx^{2}y^{2}
$$</p>
<p>画个图长这样：</p>
<p><img
        class="lazyload"
        data-src="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp"
        data-srcset="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp, /images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp 1.5x, /images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp 2x"
        data-sizes="auto"
        alt="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp"
        title="/images/practical-cryptography-basics-7-asymmetric-key-ciphers/edwards-curve.webp"></p>
<p>知名的 Edwards 曲线有：</p>
<ul>
<li>Curve1174 (251-bit)</li>
<li>Curve25519 (255-bit)</li>
<li>Curve383187 (383-bit)</li>
<li>Curve41417 (414-bit)</li>
<li>Curve448 (448-bit)</li>
<li>E-521 (521-bit)</li>
<li>&hellip;</li>
</ul>
<h5 id="curve25519-x25519-和-ed25519" class="headerLink">
    <a href="#curve25519-x25519-%e5%92%8c-ed25519" class="header-mark"></a>Curve25519, X25519 和 Ed25519</h5><blockquote>
<p><a href="https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ed25519/" target="_blank" rel="noopener noreffer">https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ed25519/</a></p>
</blockquote>
<p>只要域参数选得好，Edwards 就可以以非常高的性能实现 ECC 密钥交换、数字签名、混合加密方案。</p>
<p>一个例子就是 <a href="https://en.wikipedia.org/wiki/Curve25519" target="_blank" rel="noopener noreffer">Curve25519</a>，它是 Edwards 曲线，其 Montgomery 形式的定义如下：</p>
<p>$$
y^{2}=x^{3}+486662x^{2}+x
$$</p>
<p>其被定义在有限域 $\mathbb {F} _{p}$ 上，$p = 2255 - 19$, 其他域参数如下：</p>
<ul>
<li>阶 <code>n = 2252 + 0x14def9dea2f79cd65812631a5cf5d3ed</code></li>
<li>辅因子 <code>h = 8</code></li>
</ul>
<p>虽然此曲线并未以 Edwards 形式定义，但是它已被证明与如下扭曲 Edwards 曲线（<code>edwards25519</code>）双有理等价：</p>
<p>$$
-x^2 + y^2 = 1 + 37095705934669439343138083508754565189542113879843219016388785533085940283555 x^2 y^2
$$</p>
<p>上面给出的这种 Edwards 形式与前文给出的 Weierstrass 形式完全等价，是专为计算速度优化而设计成这样的。</p>
<p>Curve25519 由 Daniel Bernstein 领导的密码学家团队精心设计，在多个设计和实现层面上达成了非常高的性能，同时不影响安全性。</p>
<p>Curve25519 的构造使其避免了许多潜在的实现缺陷。根据设计，它不受定时攻击的影响，并且它接受任何 32 字节的字符串作为有效的公钥，并且不需要验证。
它能提供 125.8bits 的安全强度（有时称为 ~ 128bits 安全性）</p>
<p>Curve25519 的私钥为 251 位，通常编码为 256 位整数（32 个字节，64 个十六进制数字）。
公钥通常也编码为 256 位整数（255 位 y 坐标 + 1 位 x 坐标），这对开发人员来说非常方便。</p>
<p>基于 Curve25519 派生出了名为 <a href="https://en.wikipedia.org/wiki/Curve25519" target="_blank" rel="noopener noreffer">X25519</a> 的 ECDH 算法，以及基于 EdDSA 的高速数字签名算法 <a href="https://en.wikipedia.org/wiki/EdDSA#Ed25519" target="_blank" rel="noopener noreffer">Ed25519</a>.</p>
<h5 id="curve448-x448-和-ed448" class="headerLink">
    <a href="#curve448-x448-%e5%92%8c-ed448" class="header-mark"></a>Curve448, X448 和 Ed448</h5><blockquote>
<p><a href="https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ed448/" target="_blank" rel="noopener noreffer">https://cryptography.io/en/latest/hazmat/primitives/asymmetric/ed448/</a></p>
</blockquote>
<p><a href="https://en.wikipedia.org/wiki/Curve448" target="_blank" rel="noopener noreffer">Curve448</a>（Curve448-Goldilocks）是一种非扭曲 Edwards 曲线，它的方程定义如下：</p>
<p>$$
x^2 + y^2 = 1 - 39081 x^2 y^2
$$</p>
<p>其被定义在有限域 $\mathbb {F} _{p}$ 上，$p = 2448 - 2224 - 1$，其他域参数：</p>
<ul>
<li>阶 <code>n = 2446 - 0x8335dc163bb124b65129c96fde933d8d723a70aadc873d6d54a7bb0d</code></li>
<li>辅助因子 <code>h = 4</code></li>
</ul>
<p>与 Curve25519 一样，Curve448 也等价于前面给出的 Weierstrass 形式，选择 Edwards 形式主要是因为它能显著提升性能。</p>
<p>Curve448 提供 222.8 位的安全强度。
Curve448 的私钥为 446 位，通常编码为 448 位整数（56 个字节，112 个十六进制数字）。
公钥也被编码为 448 位整数。</p>
<p>基于 Curve448 派生出了名为 <a href="https://tools.ietf.org/html/rfc7748#section-5" target="_blank" rel="noopener noreffer">X448</a> 的 ECDH 算法，以及基于 EdDSA 的高速数字签名算法 <a href="https://tools.ietf.org/html/rfc8032#section-5.2" target="_blank" rel="noopener noreffer">Ed448</a>.</p>
<h5 id="该选择哪种椭圆曲线" class="headerLink">
    <a href="#%e8%af%a5%e9%80%89%e6%8b%a9%e5%93%aa%e7%a7%8d%e6%a4%ad%e5%9c%86%e6%9b%b2%e7%ba%bf" class="header-mark"></a>该选择哪种椭圆曲线</h5><p>首先，Bernstein 的 SafeCurves 标准列出了符合一组 ECC 安全要求的安全曲线，可访问 <a href="https://safecurves.cr.yp.to" target="_blank" rel="noopener noreffer">https://safecurves.cr.yp.to</a> 了解此标准。</p>
<p>此外对于我们前面介绍的 Curve448 与 Curve25519，可以从性能跟安全性方面考量：</p>
<ul>
<li>要更好的性能，可以接受弱一点的安全性：选择 Curve25519</li>
<li>要更好的安全性，可以接受比 Curve25519 慢 3 倍的计算速度：选择 Curve448</li>
</ul>
<p>如果你的应用场景中暂时还很难用上 Curve448/Curve25519，你可以考虑一些应用更广泛的其他曲线，但是一定要遵守如下安全规范：</p>
<ul>
<li>模数 p 应该至少有 256 位
<ul>
<li>比如 <code>secp224k1</code> <code>secp192k1</code> 啥的就可以扫进历史尘埃里了</li>
</ul>
</li>
<li>暂时没有想补充的，可以参考 <a href="https://safecurves.cr.yp.to" target="_blank" rel="noopener noreffer">https://safecurves.cr.yp.to</a></li>
</ul>
<p>目前在 TLS 协议以及 JWT 签名算法中，目前应该最广泛的椭圆曲线仍然是 NIST 系列：</p>
<ul>
<li><code>P-256</code>: 到目前为止 P-256 应该仍然是应用最为广泛的椭圆曲线
<ul>
<li>在 openssl 中对应的名称为 <code>prime256v1</code></li>
</ul>
</li>
<li><code>P-384</code>
<ul>
<li>在 openssl 中对应的名称为 <code>secp384r1</code></li>
</ul>
</li>
<li><code>P-521</code>
<ul>
<li>在 openssl 中对应的名称为 <code>secp521r1</code></li>
</ul>
</li>
</ul>
<p>但是我们也看到 Curve25519 正在越来越流行，因为美国政府有前科，NIST 标准被怀疑可能有后门，目前很多人都在推动使用 Curve25519 等社区方案取代掉 NIST 标准曲线。</p>
<p>对于 openssl，如下命令会列出 openssl 支持的所有曲线：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">openssl ecparam -list_curves
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ecies---集成加密方案" class="headerLink">
    <a href="#ecies---%e9%9b%86%e6%88%90%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88" class="header-mark"></a>ECIES - 集成加密方案</h3><p>在文章开头我们已经介绍了集成加密方案 (IES)，它在密钥封装机制（KEM）的基础上，添加了密钥派生算法 KDF、消息认证算法 MAC 等其他密码学算法以达成我们对消息的安全性、真实性、完全性的需求。</p>
<p>而 ECIES 也完全类似，是在 ECC + 对称加密算法的基础上，添加了许多其他的密码学算法实现的。</p>
<p>ECIES 是一个加密框架，而不是某种固定的算法。它可以通过插拔不同的算法，形成不同的实现。
比如「secp256k1 + Scrypt + AES-GCM + HMAC-SHA512」。</p>
<p>大概就介绍到这里吧，后续就请在需要用到时自行探索相关的细节咯。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a></li>
<li><a href="https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd" target="_blank" rel="noopener noreffer">A complete overview of SSL/TLS and its cryptographic system</a></li>
<li><a href="https://www.oscca.gov.cn/sca/zxfw/2017-04/24/content_1011711.shtml" target="_blank" rel="noopener noreffer">密码发展史之近现代密码 - 中国国家密码管理局</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc6090" target="_blank" rel="noopener noreffer">RFC6090 - Fundamental Elliptic Curve Cryptography Algorithms</a></li>
<li><a href="https://security.stackexchange.com/questions/78621/which-elliptic-curve-should-i-use" target="_blank" rel="noopener noreffer">Which elliptic curve should I use?</a></li>
</ul>
]]></content></entry><entry><title type="html">写给开发人员的实用密码学（六）—— 对称密钥加密算法</title><link href="https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/"/><id>https://thiscute.world/posts/practical-cryptography-basics-6-symmetric-key-ciphers/</id><author><name>ryan4yin</name></author><published>2022-03-06T18:44:00+08:00</published><updated>2022-03-06T18:44:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文主要翻译自 <a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a>，笔者补充了部分代码示例。</p>
</blockquote>
<p>《写给开发人员的实用密码学》系列文章目录：</p>
<ul>
<li><a href="/posts/practical-cryptography-basics-1/" rel="">写给开发人员的实用密码学（一）—— 概览</a></li>
<li><a href="/posts/practical-cryptography-basics-2-hash/" rel="">写给开发人员的实用密码学（二）—— 哈希函数</a></li>
<li><a href="/posts/practical-cryptography-basics-3-key-derivation-function/" rel="">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</a></li>
<li><a href="/posts/practical-cryptography-basics-4-secure-random-generators/" rel="">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</a></li>
<li><a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a></li>
<li><a href="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/" rel="">写给开发人员的实用密码学（六）—— 对称密钥加密算法</a></li>
<li><a href="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/" rel="">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</a></li>
<li><a href="/posts/about-tls-cert" rel="">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></li>
<li>待续</li>
</ul>
<h2 id="零术语介绍" class="headerLink">
    <a href="#%e9%9b%b6%e6%9c%af%e8%af%ad%e4%bb%8b%e7%bb%8d" class="header-mark"></a>零、术语介绍</h2><p>两个常用动词：</p>
<ul>
<li>加密：cipher 或者 encrypt</li>
<li>解密：decipher 或者 decrypt</li>
</ul>
<p>另外有几个名词有必要解释：</p>
<ul>
<li>cipher: 指用于加解密的「密码算法」，有时也被直接翻译成「密码」</li>
<li>cryptographic algorithm: 密码学算法，泛指密码学相关的各类算法</li>
<li>ciphertext: 密文，即加密后的信息。对应的词是明文 plaintext</li>
<li>password: 这个应该不需要解释，就是我们日常用的各种字符或者数字密码，也可称作口令。</li>
<li><a href="https://en.wikipedia.org/wiki/Passphrase" target="_blank" rel="noopener noreffer">passphrase</a>: 翻译成「密码词组」或者「密碼片語」，通常指用于保护密钥或者其他敏感数据的一个 password
<ul>
<li>如果你用 ssh/gpg/openssl 等工具生成或使用过密钥，应该对它不陌生。</li>
</ul>
</li>
</ul>
<p>在密码学里面，最容易搞混的词估计就是「密码」了，cipher/password/passphrase 都可以被翻译成「密码」，需要注意下其中区别。</p>
<h2 id="一什么是对称加密" class="headerLink">
    <a href="#%e4%b8%80%e4%bb%80%e4%b9%88%e6%98%af%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86" class="header-mark"></a>一、什么是对称加密</h2><p>在密码学中，有两种加密方案被广泛使用：「对称加密」与「非对称加密」。</p>
<p>对称加密是指，使用相同的密钥进行消息的加密与解密。因为这个特性，我们也称这个密钥为「共享密钥（Shared Secret Key）」，示意图如下：</p>
<figure><img src="/images/practical-cryptography-basics-6-symmetric-key-ciphers/symmetric-cryptography.webp"/>
</figure>

<p>现代密码学中广泛使用的对称加密算法（ciphers）有：AES（AES-128、AES-192、AES-256）、ChaCha20、Twofish、IDEA、Serpent、Camelia、RC6、CAST 等。
其中绝大多数都是「<strong>块密码算法</strong>（Block Cipher）」或者叫「<strong>分组密码算法</strong>」，这种算法一次只能加密固定大小的块（例如 128 位）；
少部分是「<strong>流密码算法</strong>（Stream Cipher）」，流密码算法将数据逐字节地加密为密文流。</p>
<p>通过使用称为「分组密码工作模式」的技术，可以将「分组密码算法」转换为「流密码算法」。</p>
<h3 id="量子安全性" class="headerLink">
    <a href="#%e9%87%8f%e5%ad%90%e5%ae%89%e5%85%a8%e6%80%a7" class="header-mark"></a>量子安全性</h3><p>即使计算机进入量子时代，仍然可以沿用当前的对称密码算法。因为大多数现代对称密钥密码算法都是<strong>抗量子的</strong>（<strong>quantum-resistant</strong>），这意味当使用长度足够的密钥时，强大的量子计算机无法破坏其安全性。
目前来看 256 位的 AES/Twofish 在很长一段时间内都将是 <strong>量子安全</strong> 的。</p>
<h2 id="二对称加密方案的结构" class="headerLink">
    <a href="#%e4%ba%8c%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88%e7%9a%84%e7%bb%93%e6%9e%84" class="header-mark"></a>二、对称加密方案的结构</h2><p>我们在第一章「概览」里介绍过，单纯使用数据加密算法只能保证数据的<strong>安全性</strong>，并不能满足我们对消息<strong>真实性、完整性与不可否认性</strong>的需求，因此通常我们会将对称加密算法跟其他算法组合成一个「<strong>对称加密方案</strong>」来使用，这种多个密码学算法组成的「加密方案」能同时保证数据的安全性、真实性、完整性与不可否认性。</p>
<p>一个<strong>分组加密方案</strong>通常会包含如下几种算法：</p>
<ul>
<li>将密码转换为密钥的<strong>密钥派生算法 KDF</strong>（如 Scrypt 或 Argon2）：通过使用 KDF，加密方案可以允许用户使用字符密码作为「Shared Secret Key」，并使密码的破解变得困难和缓慢</li>
<li><strong>分组密码工作模式</strong>（用于将分组密码转换为流密码，如 CBC 或 CTR）+ <strong>消息填充算法</strong>（如 PKCS7）：分组密码算法（如 AES）需要借助这两种算法，才能加密任意大小的数据</li>
<li><strong>分组密码算法</strong>（如 AES）：使用密钥安全地加密固定长度的数据块
<ul>
<li>大多数流行的对称加密算法，都是分组密码算法</li>
</ul>
</li>
<li><strong>消息认证算法</strong>（如HMAC）：用于验证消息的真实性、完整性、不可否认性</li>
</ul>
<p>而一个<strong>流密码加密方案</strong>本身就能加密任意长度的数据，因此不需要「分组密码模式」与「消息填充算法」。</p>
<p>如 AES-256-CTR-HMAC-SHA256 就表示一个使用 AES-256 与 Counter 分组模式进行加密，使用 HMAC-SHA256 进行消息认证的加密方案。
其他流行的对称加密方案还有 ChaCha20-Poly1305 和 AES-128-GCM 等，其中 ChaCha20-Poly130 是一个流密码加密方案。我们会在后面单独介绍这两种加密方案。</p>
<h2 id="三分组密码工作模式" class="headerLink">
    <a href="#%e4%b8%89%e5%88%86%e7%bb%84%e5%af%86%e7%a0%81%e5%b7%a5%e4%bd%9c%e6%a8%a1%e5%bc%8f" class="header-mark"></a>三、分组密码工作模式</h2><p>前面简单介绍了「<a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation" target="_blank" rel="noopener noreffer"><strong>分组密码工作模式</strong></a>」可以将「分组密码算法」转换为「流密码算法」，从而实现加密任意长度的数据，这里主要就具体介绍下这个分组密码工作模式（下文简称为「<strong>分组模式</strong>」或者「<strong>XXX 模式</strong>」）。</p>
<p>加密方案的名称中就带有具体的「分组模式」名称，如：</p>
<ul>
<li><strong>AES-256-GCM</strong> - 具有 256 位加密密钥和 GCM 分组模式的 AES 密码</li>
<li><strong>AES-128-CTR</strong> - 具有 128 位加密密钥和 CTR 分组模式的 AES 密码</li>
<li><strong>Serpent-128-CBC</strong> - 具有 128 位加密密钥和 CBC 分组模式的 Serpent 密码</li>
</ul>
<p>「分组密码工作模式」背后的主要思想是把明文分成多个长度固定的组，再在这些分组上重复应用分组密码算法进行加密/解密，以实现安全地加密/解密任意长度的数据。</p>
<p>某些分组模式（如 CBC）要求将输入拆分为分组，并使用填充算法（例如添加特殊填充字符）将最末尾的分组填充到块大小。
也有些分组模式（如 CTR、CFB、OFB、CCM、EAX 和 GCM）根本不需要填充，因为它们在每个步骤中，都直接在明文部分和内部密码状态之间执行异或（XOR）运算.</p>
<p>使用「分组模式」加密大量数据的流程基本如下：</p>
<ul>
<li>初始化加密算法状态（使用加密密钥 + 初始向量 IV）</li>
<li>加密数据的第一个分组</li>
<li>使用加密密钥和其他参数转换加密算法的当前状态</li>
<li>加密下一个分组</li>
<li>再次转换加密状态</li>
<li>再加密下一分组</li>
<li>依此类推，直到处理完所有输入数据</li>
</ul>
<p>解密的流程跟加密完全类似：先初始化算法，然后依次解密所有分组，中间可能会涉及到加密状态的转换。</p>
<p>下面我们来具体介绍下 CTR 与 GCM 两个常见的分组模式。</p>
<h3 id="0-初始向量-iv" class="headerLink">
    <a href="#0-%e5%88%9d%e5%a7%8b%e5%90%91%e9%87%8f-iv" class="header-mark"></a>0. 初始向量 IV</h3><p>介绍具体的分组模式前，需要先了解下<strong>初始向量 IV</strong>（Initialization Vector）这个概念，它有时也被称作 Salt 或者 Nonce。
初始向量 IV 通常是一个随机数，主要作用是往密文中添加随机性，使同样的明文被多次加密也会产生不同的密文，从而确保密文的不可预测性。</p>
<p>IV 的大小应与密码块大小相同，例如 AES、Serpent 和 Camellia 都只支持 128 位密码块，那么它们需要的 IV 也必须也 128 位。</p>
<p>IV 通常无需保密，但是应当足够随机（无法预测），而且不允许重用，应该对每条加密消息使用随机且不可预测的 IV。</p>
<p>一个常见错误是使用相同的对称密钥和<strong>相同的 IV</strong> 加密多条消息，这使得针对大多数分组模式的各种加密攻击成为可能。</p>
<h3 id="counter_mode" class="headerLink">
    <a href="#counter_mode" class="header-mark"></a>1. CTR (Counter) 分组模式</h3><blockquote>
<p>参考文档: <a href="https://csrc.nist.gov/publications/detail/sp/800-38a/final" target="_blank" rel="noopener noreffer">https://csrc.nist.gov/publications/detail/sp/800-38a/final</a></p>
</blockquote>
<p>下图说明了「CTR 分组工作模式」的加密解密流程，基本上就是将明文/密文拆分成一个个长度固定的分组，然后使用一定的算法进行加密与解密：</p>
<figure><img src="/images/practical-cryptography-basics-6-symmetric-key-ciphers/CTR_encryption.svg"/>
</figure>

<figure><img src="/images/practical-cryptography-basics-6-symmetric-key-ciphers/CTR_decryption.svg"/>
</figure>

<p>可以看到两图中左边的第一个步骤，涉及到三个参数：</p>
<ul>
<li><code>Nonce</code>，初始向量 IV 的别名，前面已经介绍过了。</li>
<li><code>Counter</code>: 一个计数器，最常用的 Counter 实现是「从 0 开始，每次计算都自增 1」</li>
<li><code>Key</code>: 对称加密的密钥</li>
<li><code>Plaintext</code>: 明文的一个分组。除了最后一个分组外，其他分组的长度应该跟 <code>Key</code> 相同</li>
</ul>
<p>CTR 模式加解密的算法使用公式来表示如下：</p>
<p>$$
\begin{alignedat}{2}
C_i &amp;= P_i \oplus O_i, \ &amp;\text{for } i &amp;= 1, 2 &hellip; n-1 \\
P_i &amp;= C_i \oplus O_i, \ &amp;\text{for } i &amp;= 1, 2 &hellip; n-1 \\
O_i &amp;= \text{CIPH}_{key}(\text{Nonce} + I_i), \ &amp;\text{for } i &amp;= 1, 2 &hellip; n-1
\end{alignedat}
$$</p>
<p>公式的符号说明如下</p>
<ul>
<li>$C_i$ 表示密文的第 $i$ 个分组</li>
<li>$P_i$ 表示明文的第 $i$ 个 分组</li>
<li>$O_i$ 是一个中间量，第三个公式是它的计算方法</li>
<li>$I_i$ 表示计数器返回的第 $i$ 个值，其长度应与分组的长度相同</li>
<li>$\text{CIPH}_{key}$ 表示使用密钥 $key$ 的对称加密算法</li>
</ul>
<p>上面的公式只描述了 $ 0 \ge i \le n-1$ 的场景，最后一个分组  $i = n$ 要特殊一些——它的长度可能比 <code>Key</code> 要短。
CTR 模式加解密这最后这个分组时，会直接忽略掉 $O_n$ 末尾多余的 bytes.
这种处理方式使得 CTR 模式不需要使用填充算法对最后一个分组进行填充，而且还使密文跟明文的长度完全一致。
我们假设最后一个分组的长度为 $u$，它的加解密算法描述如下（$MSB_u(O_n)$ 表示取 $O_n$ 的 u 个最高有效位）：</p>
<p>$$
\begin{alignedat}{2}
C_{n} &amp;= P_{n} \oplus {MSB_u}(O_n) \\
P_{n} &amp;= C_{n} \oplus {MSB_u}(O_n)\\
O_n &amp;= \text{CIPH}_{key}(\text{Nonce} + I_n)
\end{alignedat}
$$</p>
<p>可以看到，因为异或 XOR 的对称性，加密跟解密的算法是完全相同的，直接 XOR $O_i$ 即可。</p>
<p>Python 中最流行的密码学库是 <a href="https://github.com/pyca/cryptography" target="_blank" rel="noopener noreffer">cryptography</a>，<code>requests</code> 的底层曾经就使用了它（新版本已经换成使用标准库 ssl 了），下面我们使用这个库来演示下 AES-256-CTR 算法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.ciphers</span> <span class="kn">import</span> <span class="n">Cipher</span><span class="p">,</span> <span class="n">algorithms</span><span class="p">,</span> <span class="n">modes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plaintext</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;this is a test message, hahahahahaha~&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 32bytes 的 key，即使用算法 AES-256-CTR</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># key =&gt; b&#39;\x96\xec.\xc7\xd5\x1b/5\xa1\x10s\x9d\xd5\x10z\xdc\x90\xb5\x1cm&#34;&gt;x\xfd \xd5\xc5\xaf\x19\xd1Z\xbb&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># AES 算法的 block 大小是固定的 128bits，即 16 bytes, IV 长度需要与 block 一致</span>
</span></span><span class="line"><span class="cl"><span class="n">iv</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># iv =&gt; b&#39;\x88[\xc9\n`\xe4\xc2^\xaf\xdc\x1e\xfd.c&gt;=&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 发送方加密数据</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 构建 AES-256-CTR 的 cipher，然后加密数据，得到密文</span>
</span></span><span class="line"><span class="cl"><span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="p">(</span><span class="n">algorithms</span><span class="o">.</span><span class="n">AES</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">modes</span><span class="o">.</span><span class="n">CTR</span><span class="p">(</span><span class="n">iv</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">encryptor</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">encryptor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">ciphertext</span> <span class="o">=</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span> <span class="o">+</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ciphertext =&gt; b&#39;\x9b6(\x1d\xfd\xde\x96S\x8b\x8f\x90\xc5}ou\x9e\xb1\xbd\x9af\xb8\xdc\xec\xbf\xa3&#34;\x18^\xac\x14\xc8s2*\x1a\xcf\x1d&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 发送方将 iv + ciphertext 发送给接收方</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 接收方解密数据</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 接收方使用自己的 key + 接收到的 iv，构建 cipher，然后解密出原始数据</span>
</span></span><span class="line"><span class="cl"><span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="p">(</span><span class="n">algorithms</span><span class="o">.</span><span class="n">AES</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">modes</span><span class="o">.</span><span class="n">CTR</span><span class="p">(</span><span class="n">iv</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">decryptor</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">decryptor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">decryptor</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span> <span class="o">+</span> <span class="n">decryptor</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>从上面的算法描述能感觉到，CTR 算法还蛮简单的。下面我使用 Python 写一个能够 work 的 CTR 实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">xor_bytes</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;Returns a new byte array with the elements xor&#39;ed.
</span></span></span><span class="line"><span class="cl"><span class="s2">       if len(a) != len(b), extra parts are discard.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">i</span><span class="o">^</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">inc_bytes</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34; Returns a new byte array with the value increment by 1 &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">out</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">out</span><span class="p">))):</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="mh">0xFF</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">split_blocks</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">block_size</span><span class="p">,</span> <span class="n">require_padding</span><span class="o">=</span><span class="kc">True</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Split `message` with fixed length `block_size`
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="p">)</span> <span class="o">%</span> <span class="n">block_size</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">require_padding</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">message</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">16</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="p">),</span> <span class="n">block_size</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">encrypt_ctr</span><span class="p">(</span><span class="n">block_cipher</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">,</span> <span class="n">iv</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Encrypts `plaintext` using CTR mode with the given nounce/IV.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">iv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">16</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">blocks</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="n">nonce</span> <span class="o">=</span> <span class="n">iv</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">plaintext_block</span> <span class="ow">in</span> <span class="n">split_blocks</span><span class="p">(</span><span class="n">plaintext</span><span class="p">,</span> <span class="n">block_size</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="n">require_padding</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># CTR mode encrypt: plaintext_block XOR encrypt(nonce)</span>
</span></span><span class="line"><span class="cl">        <span class="n">o</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">block_cipher</span><span class="o">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">nonce</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="n">block</span> <span class="o">=</span> <span class="n">xor_bytes</span><span class="p">(</span><span class="n">plaintext_block</span><span class="p">,</span> <span class="n">o</span><span class="p">)</span>  <span class="c1"># extra parts of `o` are discard in this step</span>
</span></span><span class="line"><span class="cl">        <span class="n">blocks</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">block</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">nonce</span> <span class="o">=</span> <span class="n">inc_bytes</span><span class="p">(</span><span class="n">nonce</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="sa">b</span><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">blocks</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 加密与解密的算法完全一致</span>
</span></span><span class="line"><span class="cl"><span class="n">decrypt_ctr</span> <span class="o">=</span> <span class="n">encrypt_ctr</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来验证下算法的正确性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># Python 官方库未提供 AES 实现，因此需要先装下这个库：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># pip install pyaes==1.6.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pyaes</span> <span class="kn">import</span> <span class="n">AES</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># AES-256-CTR - plaintext key 都与前面的测试代码完全一致</span>
</span></span><span class="line"><span class="cl"><span class="n">plaintext</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;this is a test message, hahahahahaha~&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x96\xec</span><span class="s1">.</span><span class="se">\xc7\xd5\x1b</span><span class="s1">/5</span><span class="se">\xa1\x10</span><span class="s1">s</span><span class="se">\x9d\xd5\x10</span><span class="s1">z</span><span class="se">\xdc\x90\xb5\x1c</span><span class="s1">m&#34;&gt;x</span><span class="se">\xfd</span><span class="s1"> </span><span class="se">\xd5\xc5\xaf\x19\xd1</span><span class="s1">Z</span><span class="se">\xbb</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 发送方加密数据</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 首先生成一个随机 IV，为了对比，这里使用前面生成好的数据</span>
</span></span><span class="line"><span class="cl"><span class="n">iv</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x88</span><span class="s1">[</span><span class="se">\xc9\n</span><span class="s1">`</span><span class="se">\xe4\xc2</span><span class="s1">^</span><span class="se">\xaf\xdc\x1e\xfd</span><span class="s1">.c&gt;=&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">aes_cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">ciphertext</span> <span class="o">=</span> <span class="n">encrypt_ctr</span><span class="p">(</span><span class="n">aes_cipher</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;ciphertext =&gt;&#34;</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">))</span> <span class="c1"># 输出应该与前面用 cryptography 计算出来的完全一致</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ciphertext =&gt; b&#39;\x9b6(\x1d\xfd\xde\x96S\x8b\x8f\x90\xc5}ou\x9e\xb1\xbd\x9af\xb8\xdc\xec\xbf\xa3&#34;\x18^\xac\x14\xc8s2*\x1a\xcf\x1d&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 发送方将 ciphertext + iv 发送给接收方</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 接收方使用自己的 key 解密数据</span>
</span></span><span class="line"><span class="cl"><span class="n">aes_cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">decrypted_bytes</span> <span class="o">=</span> <span class="n">decrypt_ctr</span><span class="p">(</span><span class="n">aes_cipher</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;decrypted_bytes =&gt;&#34;</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">decrypted_bytes</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># decrypted_bytes =&gt; b&#34;this is a test message, hahahahahaha~&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-gcm-galoiscounter-分组模式" class="headerLink">
    <a href="#2-gcm-galoiscounter-%e5%88%86%e7%bb%84%e6%a8%a1%e5%bc%8f" class="header-mark"></a>2. GCM (Galois/Counter) 分组模式</h3><p>GCM (Galois/Counter) 模式在 CTR 模式的基础上，添加了消息认证的功能，而且同时还具有与 CTR 模式相同的并行计算能力。因此相比 CTR 模式，GCM 不仅速度一样快，还能额外提供对消息完整性、真实性的验证能力。</p>
<p>下图直观地解释了 GCM 块模式（Galois/Counter 模式）的工作原理：</p>
<figure><img src="/images/practical-cryptography-basics-6-symmetric-key-ciphers/gcm-galois_counter_mode.webp"/>
</figure>

<p>GCM 模式新增的 Auth Tag，计算起来会有些复杂，我们就直接略过了，对原理感兴趣的可以看下 <a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode" target="_blank" rel="noopener noreffer">Galois/Counter_Mode_wiki</a>.</p>
<h3 id="3-如何选用块模式" class="headerLink">
    <a href="#3-%e5%a6%82%e4%bd%95%e9%80%89%e7%94%a8%e5%9d%97%e6%a8%a1%e5%bc%8f" class="header-mark"></a>3. 如何选用块模式</h3><p>一些 Tips:</p>
<ul>
<li>常用的安全块模式是 CBC（密码块链接）、CTR（计数器）和 GCM（伽罗瓦/计数器模式），它们需要一个随机（不可预测的）初始化向量 (IV)，也称为 <code>nonce</code> 或 <code>salt</code></li>
<li>「<strong>CTR</strong>（Counter）」块模式在大多数情况下是一个不错的选择，因为它具有很强的安全性和并行处理能力，允许任意输入数据长度（无填充）。但它不提供身份验证和完整性，只提供加密</li>
<li><strong>GCM</strong>（Galois/Counter Mode）块模式继承了 CTR 模式的所有优点，并增加了加密消息认证能力。GCM 是在对称密码中实现认证加密的快速有效的方法，<strong>强烈推荐</strong></li>
<li>CBC 模式在固定大小的分组上工作。因此，在将输入数据拆分为分组后，应使用填充算法使最后一个分组的长度一致。大多数应用程序使用 <strong>PKCS7</strong> 填充方案或 ANSI X.923. 在某些情况下，CBC 阻塞模式可能容易受到「padding oracle」攻击，因此<strong>最好避免使用 CBC 模式</strong></li>
<li>众所周知的不安全块模式是 <strong>ECB</strong>（电子密码本），它将相等的输入块加密为相等的输出块（无加密扩散能力）。<strong>不要使用 ECB 块模式</strong>！它可能会危及整个加密方案。</li>
<li>CBC、CTR 和 GCM 模式等大多数块都支持「随机访问」解密。比如在视频播放器中的任意时间偏移处寻找，播放加密的视频流</li>
</ul>
<p>总之，建议使用 CTR (Counter) 或 GCM (Galois/Counter) 分组模式。
其他的分组在某些情况下可能会有所帮助，但很可能有安全隐患，因此除非你很清楚自己在做什么，否则不要使用其他分组模式！</p>
<p>CTR 和 GCM 加密模式有很多优点：它们是安全的（目前没有已知的重大缺陷），可以加密任意长度的数据而无需填充，可以并行加密和解密分组（在多核 CPU 中）并可以直接解密任意一个密文分组。
因此它们适用于加密加密钱包、文档和流视频（用户可以按时间查找）。
GCM 还提供消息认证，是一般情况下密码块模式的推荐选择。</p>
<p>请注意，GCM、CTR 和其他分组模式会泄漏原始消息的长度，因为它们生成的密文长度与明文消息的长度相同。
如果您想避免泄露原始明文长度，可以在加密前向明文添加一些随机字节（额外的填充数据），并在解密后将其删除。</p>
<h2 id="四对称加密算法与对称加密方案" class="headerLink">
    <a href="#%e5%9b%9b%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95%e4%b8%8e%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e6%96%b9%e6%a1%88" class="header-mark"></a>四、对称加密算法与对称加密方案</h2><p>前面啰嗦了这么多，下面进入正题：对称加密算法</p>
<h3 id="1-安全的对称加密算法" class="headerLink">
    <a href="#1-%e5%ae%89%e5%85%a8%e7%9a%84%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95" class="header-mark"></a>1. 安全的对称加密算法</h3><p>目前应用最广泛的对称加密算法，是 AES 跟 Salsa20 / ChaCha20 这两个系列。</p>
<h4 id="1-aes-rijndael" class="headerLink">
    <a href="#1-aes-rijndael" class="header-mark"></a>1. AES (Rijndael)</h4><blockquote>
<p>wiki: <a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard" target="_blank" rel="noopener noreffer">https://en.wikipedia.org/wiki/Advanced_Encryption_Standard</a></p>
</blockquote>
<p>AES（高级加密标准，也称为 Rijndael）是现代 IT 行业中最流行和广泛使用的对称加密算法。AES 被证明是高度安全、快速且标准化的，到目前为止没有发现任何明显的弱点或攻击手段，而且几乎在所有平台上都得到了很好的支持。 AES 是 128 位分组密码，使用 128、192 或 256 位密钥。它通常与分组模式组合成分组加密方案（如 AES-CTR 或 AES-GCM）以处理流数据。
在大多数分组模式中，AES 还需要一个随机的 128 位初始向量 IV。</p>
<p>Rijndael (AES) 算法可免费用于任何用途，而且非常流行。很多站点都选择 AES 作为 TLS 协议的一部分，以实现安全通信。
现代 CPU 硬件基本都在微处理器级别实现了 AES 指令以加速 AES 加密解密操作。</p>
<p>这里有一个纯 Python 的 AES 实现可供参考: <a href="https://github.com/boppreh/aes/blob/master/aes.py" target="_blank" rel="noopener noreffer">AES encryption in pure Python - boppreh</a></p>
<p>我们在前面的 <a href="#counter_mode" rel="">CTR 分组模式</a>中已经使用 Python 实践了 AES-256-CTR 加密方案。
而实际上更常用的是支持集成身份验证加密（AEAD）的 AES-256-GCM 加密方案，它的优势我们前面已经介绍过了，这里我们使用 Python 演示下如何使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.ciphers</span> <span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">Cipher</span><span class="p">,</span> <span class="n">algorithms</span><span class="p">,</span> <span class="n">modes</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">,</span> <span class="n">associated_data</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Generate a random 96-bit IV.</span>
</span></span><span class="line"><span class="cl">    <span class="n">iv</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Construct an AES-GCM Cipher object with the given key and a</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># randomly generated IV.</span>
</span></span><span class="line"><span class="cl">    <span class="n">encryptor</span> <span class="o">=</span> <span class="n">Cipher</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">algorithms</span><span class="o">.</span><span class="n">AES</span><span class="p">(</span><span class="n">key</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">modes</span><span class="o">.</span><span class="n">GCM</span><span class="p">(</span><span class="n">iv</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span><span class="o">.</span><span class="n">encryptor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># associated_data will be authenticated but not encrypted,</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># it must also be passed in on decryption.</span>
</span></span><span class="line"><span class="cl">    <span class="n">encryptor</span><span class="o">.</span><span class="n">authenticate_additional_data</span><span class="p">(</span><span class="n">associated_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Encrypt the plaintext and get the associated ciphertext.</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># GCM does not require padding.</span>
</span></span><span class="line"><span class="cl">    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span> <span class="o">+</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">(</span><span class="n">iv</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">tag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">associated_data</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="n">tag</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Construct a Cipher object, with the key, iv, and additionally the</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># GCM tag used for authenticating the message.</span>
</span></span><span class="line"><span class="cl">    <span class="n">decryptor</span> <span class="o">=</span> <span class="n">Cipher</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">algorithms</span><span class="o">.</span><span class="n">AES</span><span class="p">(</span><span class="n">key</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">        <span class="n">modes</span><span class="o">.</span><span class="n">GCM</span><span class="p">(</span><span class="n">iv</span><span class="p">,</span> <span class="n">tag</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="p">)</span><span class="o">.</span><span class="n">decryptor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># We put associated_data back in or the tag will fail to verify</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># when we finalize the decryptor.</span>
</span></span><span class="line"><span class="cl">    <span class="n">decryptor</span><span class="o">.</span><span class="n">authenticate_additional_data</span><span class="p">(</span><span class="n">associated_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Decryption gets us the authenticated plaintext.</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># If the tag does not match an InvalidTag exception will be raised.</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">decryptor</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span> <span class="o">+</span> <span class="n">decryptor</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 接下来进行算法验证</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plaintext</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;this is a paintext, hahahahahaha~&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x96\xec</span><span class="s1">.</span><span class="se">\xc7\xd5\x1b</span><span class="s1">/5</span><span class="se">\xa1\x10</span><span class="s1">s</span><span class="se">\x9d\xd5\x10</span><span class="s1">z</span><span class="se">\xdc\x90\xb5\x1c</span><span class="s1">m&#34;&gt;x</span><span class="se">\xfd</span><span class="s1"> </span><span class="se">\xd5\xc5\xaf\x19\xd1</span><span class="s1">Z</span><span class="se">\xbb</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">associated_data</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;authenticated but not encrypted payload&#34;</span>  <span class="c1"># 被用于消息认证的关联数据</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 发送方加密消息</span>
</span></span><span class="line"><span class="cl"><span class="n">iv</span><span class="p">,</span> <span class="n">ciphertext</span><span class="p">,</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">plaintext</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">associated_data</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 发送方将 associated_data iv ciphertext tag 打包发送给接收方</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 接收方使用自己的 key 验证并解密数据</span>
</span></span><span class="line"><span class="cl"><span class="n">descrypt_text</span> <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">key</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">associated_data</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">iv</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">ciphertext</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">tag</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2-salsa20--chacha20" class="headerLink">
    <a href="#2-salsa20--chacha20" class="header-mark"></a>2. Salsa20 / ChaCha20</h4><blockquote>
<p>wiki: <a href="https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant" target="_blank" rel="noopener noreffer">https://en.wikipedia.org/wiki/Salsa20#ChaCha_variant</a></p>
</blockquote>
<p>Salsa20 及其改进的变体 ChaCha（ChaCha8、ChaCha12、ChaCha20）和 XSalsa20 是由密码学家 Daniel Bernstein 设计的现代、快速的对称流密码家族。 Salsa20 密码是对称流密码设计竞赛 eSTREAM（2004-2008）的决赛选手之一，它随后与相关的 BLAKE 哈希函数一起被广泛采用。 Salsa20 及其变体是免版税的，没有专利。</p>
<p>Salsa20 密码将 128 位或 256 位对称密钥 + 随机生成的 64 位随机数（初始向量）和无限长度的数据流作为输入，并生成长度相同的加密数据流作为输出输入流。</p>
<h5 id="chacha20-poly1305" class="headerLink">
    <a href="#chacha20-poly1305" class="header-mark"></a>ChaCha20-Poly1305</h5><p>Salsa20 应用最为广泛的是认证加密方案：<a href="https://en.wikipedia.org/wiki/ChaCha20-Poly1305" target="_blank" rel="noopener noreffer">ChaCha20-Poly1305</a>，即组合使用 ChaCha20 与消息认证算法 Poly1305，它们都由密码学家 Bernstein 设计。</p>
<p>ChaCha20-Poly1305 已被证明足够安全，不过跟 GCM 一样它的安全性也依赖于足够随机的初始向量 IV，另外 ChaCha20-Poly1305 也不容易遭受计时攻击。</p>
<p>在没有硬件加速的情况下，ChaCha20 通常比 AES 要快得多（比如在旧的没有硬件加速的移动设备上），这是它最大的优势。</p>
<p>以下是一个 ChaCha20 的 Python 示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.ciphers</span> <span class="kn">import</span> <span class="n">Cipher</span><span class="p">,</span> <span class="n">algorithms</span><span class="p">,</span> <span class="n">modes</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">plaintext</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;this is a paintext, hahahahahaha~&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x96\xec</span><span class="s1">.</span><span class="se">\xc7\xd5\x1b</span><span class="s1">/5</span><span class="se">\xa1\x10</span><span class="s1">s</span><span class="se">\x9d\xd5\x10</span><span class="s1">z</span><span class="se">\xdc\x90\xb5\x1c</span><span class="s1">m&#34;&gt;x</span><span class="se">\xfd</span><span class="s1"> </span><span class="se">\xd5\xc5\xaf\x19\xd1</span><span class="s1">Z</span><span class="se">\xbb</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">nonce</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">algorithm</span> <span class="o">=</span> <span class="n">algorithms</span><span class="o">.</span><span class="n">ChaCha20</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">nonce</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ChaCha20 是一个流密码，mode 必须为 None</span>
</span></span><span class="line"><span class="cl"><span class="n">cipher</span> <span class="o">=</span> <span class="n">Cipher</span><span class="p">(</span><span class="n">algorithm</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="kc">None</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 加密</span>
</span></span><span class="line"><span class="cl"><span class="n">encryptor</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">encryptor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">ct</span> <span class="o">=</span> <span class="n">encryptor</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 解密</span>
</span></span><span class="line"><span class="cl"><span class="n">decryptor</span> <span class="o">=</span> <span class="n">cipher</span><span class="o">.</span><span class="n">decryptor</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">decryptor</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="3-其他流行的对称加密算法" class="headerLink">
    <a href="#3-%e5%85%b6%e4%bb%96%e6%b5%81%e8%a1%8c%e7%9a%84%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95" class="header-mark"></a>3. 其他流行的对称加密算法</h4><p>还有一些其他的现代安全对称密码，它们的应用不如 AES 和 ChaCha20 这么广泛，但在程序员和信息安全社区中仍然很流行：</p>
<ul>
<li><a href="https://en.wikipedia.org/wiki/Serpent_%28cipher%29" target="_blank" rel="noopener noreffer">Serpent</a> - 安全对称密钥分组密码（密钥大小：128、192 或 256 位），公众所有（Public Domain），完全免费</li>
<li><a href="https://en.wikipedia.org/wiki/Twofish" target="_blank" rel="noopener noreffer">Twofish</a> - 安全对称密钥分组密码（密钥大小：128、192 或 256 位），公众所有（Public Domain），完全免费</li>
<li><a href="https://en.wikipedia.org/wiki/Camellia_%28cipher%29" target="_blank" rel="noopener noreffer">Camellia</a> - 安全对称密钥分组密码（分组大小：128 位；密钥大小：128、192 和 256 位），专利算法，但完全免费
<ul>
<li>该算法由三菱和日本电信电话（NTT）在 2000 年共同发明</li>
</ul>
</li>
<li><a href="https://en.wikipedia.org/wiki/RC5" target="_blank" rel="noopener noreffer">RC5</a> - 安全对称密钥分组密码（密钥大小：128 到 2040 位；分组大小：32、64 或 128 位；轮数：1 &hellip; 255），短密钥不安全（56 位密钥已被暴力破解） , 专利在 2015 年到期，现在完全免费</li>
<li><a href="https://en.wikipedia.org/wiki/RC6" target="_blank" rel="noopener noreffer">RC6</a> - 安全对称密钥分组密码，类似于 RC5，但更复杂（密钥大小：128 到 2040 位；分组大小：32、64 或 128 位；轮数：1 &hellip; 255），专利在 2017 年到期，现在完全免费</li>
<li><a href="https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm" target="_blank" rel="noopener noreffer">IDEA</a> - 安全对称密钥分组密码（密钥大小：128 位），所有专利在均 2012 年前过期，完全免费</li>
<li><a href="https://en.wikipedia.org/wiki/CAST-256" target="_blank" rel="noopener noreffer">CAST (CAST-128 / CAST5, CAST-256 / CAST6)</a> - 安全对称密钥分组密码系列（密钥大小：40 &hellip; 256 位），免版税</li>
<li><a href="https://en.wikipedia.org/wiki/ARIA_%28cipher%29" target="_blank" rel="noopener noreffer">ARIA</a> - 安全对称密钥分组密码，类似于 AES（密钥大小：128、192 或 256 位），韩国官方标准，免费供公众使用</li>
<li><a href="https://en.wikipedia.org/wiki/SM4_%28cipher%29" target="_blank" rel="noopener noreffer">SM4</a> - 安全对称密钥分组密码，类似于 AES（密钥大小：128 位），中国官方标准，免费供公众使用
<ul>
<li>由中国国家密码管理局于 2012 年 3 月 21 日发布</li>
</ul>
</li>
</ul>
<p>具体的算法内容这里就不介绍了，有兴趣或者用得到的时候，可以再去仔细了解。</p>
<h3 id="2-不安全的对称加密算法" class="headerLink">
    <a href="#2-%e4%b8%8d%e5%ae%89%e5%85%a8%e7%9a%84%e5%af%b9%e7%a7%b0%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95" class="header-mark"></a>2. 不安全的对称加密算法</h3><p>如下这些对称加密算法曾经很流行，但现在被认为是不安全的或有争议的安全性，<strong>不建议再使用</strong>：</p>
<ul>
<li>DES - 56 位密钥大小，可以被暴力破解</li>
<li>3DES（三重 DES, TDES）- 64 位密码，被认为不安全，已在 2017 年被 NIST 弃用.</li>
<li>RC2 - 64 位密码，被认为不安全</li>
<li>RC4 - 流密码，已被破解，网上存在大量它的破解资料</li>
<li>Blowfish - 旧的 64 位密码，已被破坏
<ul>
<li><a href="https://web.archive.org/web/20161009174028/https://sweet32.info/" target="_blank" rel="noopener noreffer">Sweet32: Birthday attacks on 64-bit block ciphers in TLS and OpenVPN</a></li>
</ul>
</li>
<li>GOST - 俄罗斯 64 位分组密码，有争议的安全性，被认为有风险</li>
</ul>
<h3 id="对称认证加密算法-ae--aead" class="headerLink">
    <a href="#%e5%af%b9%e7%a7%b0%e8%ae%a4%e8%af%81%e5%8a%a0%e5%af%86%e7%ae%97%e6%b3%95-ae--aead" class="header-mark"></a>对称认证加密算法 AE / AEAD</h3><p>我们在前面第三篇文章「MAC 与密钥派生函数 KDF」中介绍过 AE 认证加密及其变体 AEAD.</p>
<p>一些对称加密方案提供集成身份验证加密（AEAD），比如使用了 GCM 分组模式的加密方案 AES-GCM，而其他加密方案（如 AES-CBC 和 AES-CTR）自身不提供身份验证能力，需要额外添加。</p>
<p>最流行的认证加密（AEAD）方案有如下几个，我们在之前已经简单介绍过它们：</p>
<ul>
<li>ChaCha20-Poly1305
<ul>
<li>具有集成 Poly1305 身份验证器的 ChaCha20 流密码（集成身份验证 AEAD 加密）</li>
<li>使用 256 位密钥和 96 位随机数（初始向量）</li>
<li>极高的性能</li>
<li>在硬件不支持 AES 加速指令时（如路由器、旧手机等硬件上），推荐使用此算法</li>
</ul>
</li>
<li>AES-256-GCM
<ul>
<li>我们在前面的 GCM 模式一节，使用 Python 实现并验证了这个 AES-256-GCM 加密方案</li>
<li>使用 256 位密钥和 128 位随机数（初始向量）</li>
<li>较高的性能</li>
<li>在硬件支持 AES 加速时（如桌面、服务器等场景），更推荐使用此算法</li>
</ul>
</li>
<li>AES-128-GCM
<ul>
<li>跟 AES-256-GCM 一样，区别在于它使用 128 位密钥，安全性弱于 ChaCha20-Poly1305 与 AES-256-GCM.</li>
<li>目前被广泛应用在 HTTPS 等多种加密场景下，但是正在慢慢被前面两种方案取代</li>
</ul>
</li>
</ul>
<p>今天的大多数应用程序应该优先选用上面这些加密方案进行对称加密，而不是自己造轮子。
上述方案是高度安全的、经过验证的、经过良好测试的，并且大多数加密库都已经提供了高效的实现，可以说是开箱即用。</p>
<p>目前应用最广泛的对称加密方案应该是 AES-128-GCM，
而 ChaCha20-Poly1305 因为其极高的性能，也越来越多地被应用在 TLS1.2、TLS1.3、QUIC/HTTP3、Wireguard、SSH 等协议中。</p>
<h2 id="五aes-算法案例以太坊钱包加密" class="headerLink">
    <a href="#%e4%ba%94aes-%e7%ae%97%e6%b3%95%e6%a1%88%e4%be%8b%e4%bb%a5%e5%a4%aa%e5%9d%8a%e9%92%b1%e5%8c%85%e5%8a%a0%e5%af%86" class="header-mark"></a>五、AES 算法案例：以太坊钱包加密</h2><p>在这一小节我们研究一个现实中的 AES 应用场景：以太坊区块链的标准加密钱包文件格式。
我们将看到 AES-128-CTR 密码方案如何与 Scrypt 和 MAC 相结合，通过字符密码安全地实现经过身份验证的对称密钥加密。</p>
<h4 id="以太坊-utc--json-钱包" class="headerLink">
    <a href="#%e4%bb%a5%e5%a4%aa%e5%9d%8a-utc--json-%e9%92%b1%e5%8c%85" class="header-mark"></a>以太坊 UTC / JSON 钱包</h4><p>在比特币和以太坊等区块链网络中，区块链资产持有者的私钥存储在称为<strong>加密钱包</strong>的特殊密钥库中。
通常，这些加密钱包是本地硬盘上的文件，并使用字符密码加密。</p>
<p>在以太坊区块链中，<strong>加密钱包</strong>以一种特殊的加密格式在内部存储，称为「UTC / JSON 钱包（密钥库文件）」或「Web3 秘密存储定义」。
这是一种加密钱包的文件格式，被广泛应用在 geth 和 Parity（以太坊的主要协议实现）、MyEtherWallet（流行的在线客户端以太坊钱包）、MetaMask（广泛使用的浏览器内以太坊钱包）、ethers.js 和 Nethereum 库以及许多其他与以太坊相关的技术和工具中。</p>
<p>以太坊 UTC/JSON 密钥库将加密的私钥、加密数据、加密算法及其参数保存为 JSON 文本文档。</p>
<p>UTC / JSON 钱包的一个示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;version&#34;: </span><span class="m">3</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;id&#34;: </span><span class="s2">&#34;07a9f767-93c5-4842-9afd-b3b083659f04&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;address&#34;: </span><span class="s2">&#34;aef8cad64d29fcc4ed07629b9e896ebc3160a8d0&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">&#34;Crypto&#34;: </span>{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">&#34;ciphertext&#34;: </span><span class="s2">&#34;99d0e66c67941a08690e48222a58843ef2481e110969325db7ff5284cd3d3093&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">&#34;cipherparams&#34;: { &#34;iv&#34;: </span><span class="s2">&#34;7d7fabf8dee2e77f0d7e3ff3b965fc23&#34;</span><span class="w"> </span>}<span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">&#34;cipher&#34;: </span><span class="s2">&#34;aes-128-ctr&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">&#34;kdf&#34;: </span><span class="s2">&#34;scrypt&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">&#34;kdfparams&#34;: </span>{<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">&#34;dklen&#34;: </span><span class="m">32</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">&#34;salt&#34;: </span><span class="s2">&#34;85ad073989d461c72358ccaea3551f7ecb8e672503cb05c2ee80cfb6b922f4d4&#34;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">&#34;n&#34;: </span><span class="m">8192</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">&#34;r&#34;: </span><span class="m">8</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">&#34;p&#34;: </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>}<span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">&#34;mac&#34;: </span><span class="s2">&#34;06dcf1cc4bffe1616fafe94a2a7087fd79df444756bb17c93af588c3ab02a913&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>}<span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上述 json 内容也是认证对称加密的一个典型示例，可以很容易分析出它的一些组成成分：</p>
<ul>
<li><code>kdf</code>: 用于从字符密码派生出密钥的 KDF 算法名称，这里用的是 <code>scrypt</code>
<ul>
<li><code>kdfparams</code>: KDF 算法的参数，如迭代参数、盐等&hellip;</li>
</ul>
</li>
<li><code>ciphertext</code>: 钱包内容的密文，通常这就是一个被加密的 256 位私钥</li>
<li><code>cipher</code> + <code>cipherparams</code>: 对称加密算法的名称及参数，这里使用了 AES-128-CTR，并给出了初始向量 IV</li>
<li><code>mac</code>: 由 MAC 算法生成的消息认证码，被用于验证解密密码的正确性
<ul>
<li>以太坊使用截取派生密钥的一部分，拼接上完整密文，然后进行 keccak-256 哈希运算得到 MAC 值</li>
</ul>
</li>
<li>其他钱包相关的信息</li>
</ul>
<p>默认情况下，密钥派生函数是 scrypt 并使用的是弱 scrypt 参数（n=8192 成本因子，r=8 块大小，p=1 并行化），因此建议使用长而复杂的密码以避免钱包被暴力解密。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a></li>
<li><a href="https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd" target="_blank" rel="noopener noreffer">A complete overview of SSL/TLS and its cryptographic system</a></li>
<li><a href="https://github.com/boppreh/aes/blob/master/aes.py" target="_blank" rel="noopener noreffer">AES encryption in pure Python - boppreh</a></li>
<li><a href="https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation" target="_blank" rel="noopener noreffer">Block_cipher_mode_of_operation_wiki</a></li>
<li><a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode" target="_blank" rel="noopener noreffer">Galois/Counter_Mode_wiki</a></li>
</ul>
]]></content></entry><entry><title type="html">「转」且看有思想的年轻人</title><link href="https://thiscute.world/posts/the-thoughtful-youth/"/><id>https://thiscute.world/posts/the-thoughtful-youth/</id><author><name>ryan4yin</name></author><published>2022-03-04T22:58:00+08:00</published><updated>2022-03-04T22:58:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>原文：<a href="https://www.zhihu.com/question/447184915/answer/1768006207" target="_blank" rel="noopener noreffer">哪一刻你发现年轻人正在悄悄改变社会？ - 赦己</a></p>
</blockquote>
<blockquote>
<p>我的读后感：他的眼里有光！</p>
</blockquote>
<p>之前见过一个特别厉害的面试者，让我觉得，老一辈真的是老一辈了，他放弃了一个月薪一万三，十三薪的工作，他的演讲让我记忆非常深刻，也使得面试官面面相觑。</p>
<p>这个岗位算是万人过独木桥，不仅海内的很多大学生在竞争，海外的很多大学生也在努力，真个过程是这样的：简历筛选-线上一面-线上hr二面-线下主管面试-总裁轮面试（压力轮）。</p>
<p>我们都到了最后的一轮面试,本来就是压力轮面试，但是那天不知道为什么总裁的脾气很暴躁，对他冷嘲热讽，说了一些比较难听的话，大概的意思就是“你还小，以后需要认真学，你们太嫩了”，其实总裁的意思非常明确了，会招他，但是他太嫩需要学很多东西，但是就是他这样大人看小屁孩的感觉惹怒了他，后面他的演讲就是十分高能了，我尽量原文复述。</p>
<p>「你坐在我前面会不会有点点害怕呢？你看看你身边有什么人可以给你参考吗？你没有，你只能战战兢兢如履薄冰，走错一步都是深渊。你知道你在我眼里是什么吗？你只是一个猎物，一个我追逐的、猎杀的的目标，其实你哪里来的自信呢？就凭你是这个公司的总裁吗？来自职级和制度的压力我一概不屑，反而觉得是黔驴技穷，小人做法，我不会服气，只是照做而已。</p>
<p>其实我也很享受被统治的感觉，上一个能统治我的人已经很久了，你知道那种纯粹的实力压服吗？我可以毫无保留地顺从他的任何意见，我从来不怀疑他的任何决定，哪怕行动后面失败了我也觉得他是对的。但是你呢？只是来自制度的威力，你的每一个决定都会遭到我的质疑。</p>
<p><strong>我最讨厌的就是别人和我说，我想让你去做点什么但是你能力还不够，简直瞎扯淡，其实是你能力不够，作为一个管理者，你甚至不知道怎么用我，我如何为你卖命啊</strong>？</p>
<p>我渴望的是在一个稳定的环境默默耕耘，把坏的变成好的，但是前提是我们够团队，你呢？凭你作为一个过来人的经验吗？这些东西经过时间大家都会有的，你还有其他的吗？你真的有能力把我变成你的三头六臂吗？你真的控制得住我吗？」</p>
<p>复述其实没那么精彩了，他支着手目光瞪着总裁的眼睛的时候超级精彩，后面他去了一个对手小公司，相当于这边的市值来了，相差了十倍之多，但是七个月之后再见面已是兵刃交接，他成了六个人团队的小主管，耀武扬威地围着我们总部办公地盘下了一圈广告。</p>
]]></content></entry><entry><title type="html">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</title><link href="https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/"/><id>https://thiscute.world/posts/practical-cryptography-basics-5-key-exchange/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:05+08:00</published><updated>2022-03-13T15:26:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文主要翻译自 <a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a>，笔者额外补充了 DHKE/ECDH 的代码示例，以及「PFS 完美前向保密协议 DHE/ECDHE」一节。</p>
</blockquote>
<p>《写给开发人员的实用密码学》系列文章目录：</p>
<ul>
<li><a href="/posts/practical-cryptography-basics-1/" rel="">写给开发人员的实用密码学（一）—— 概览</a></li>
<li><a href="/posts/practical-cryptography-basics-2-hash/" rel="">写给开发人员的实用密码学（二）—— 哈希函数</a></li>
<li><a href="/posts/practical-cryptography-basics-3-key-derivation-function/" rel="">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</a></li>
<li><a href="/posts/practical-cryptography-basics-4-secure-random-generators/" rel="">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</a></li>
<li><a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a></li>
<li><a href="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/" rel="">写给开发人员的实用密码学（六）—— 对称密钥加密算法</a></li>
<li><a href="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/" rel="">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</a></li>
<li><a href="/posts/about-tls-cert" rel="">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></li>
<li>待续</li>
</ul>
<h2 id="一前言" class="headerLink">
    <a href="#%e4%b8%80%e5%89%8d%e8%a8%80" class="header-mark"></a>一、前言</h2><p>在密码学中<strong>密钥交换</strong>是一种协议，功能是在两方之间安全地交换加密密钥，其他任何人都无法获得密钥的副本。通常各种加密通讯协议的第一步都是密钥交换。
密钥交换技术具体来说有两种方案：</p>
<ul>
<li>密钥协商：协议中的双方都参与了共享密钥的生成，两个代表算法是 Diffie-Hellman (DHKE) 和 Elliptic-Curve Diffie-Hellman (ECDH)</li>
<li>密钥传输：双方中其中一方生成出共享密钥，并通过此方案将共享密钥传输给另一方。密钥传输方案通常都通过公钥密码系统实现。比如在 RSA 密钥交换中，客户端使用它的私钥加密一个随机生成的会话密钥，然后将密文发送给服务端，服务端再使用它的公钥解密出会话密钥。</li>
</ul>
<p>密钥交换协议无时无刻不在数字世界中运行，在你连接 WiFi 时，或者使用 HTTPS 协议访问一个网站，都会执行密钥交换协议。
密钥交换可以基于匿名的密钥协商协议如 DHKE，一个密码或预共享密钥，一个数字证书等等。有些通讯协议只在开始时交换一次密钥，而有些协议则会随着时间的推移不断地交换密钥。</p>
<p>认证密钥交换（AKE）是一种会同时认证相关方身份的密钥交换协议，比如个人 WiFi 通常就会使用 password-authenticated key agreement (PAKE)，而如果你连接的是公开 WiFi，则会使用匿名密钥交换协议。</p>
<p>目前有许多用于密钥交换的密码算法。其中一些使用公钥密码系统，而另一些则使用更简单的密钥交换方案（如 Diffie-Hellman 密钥交换）；其中有些算法涉及服务器身份验证，也有些涉及客户端身份验证；其中部分算法使用密码，另一部分使用数字证书或其他身份验证机制。下面列举一些知名的密钥交换算法：</p>
<ul>
<li>Diffie-Hellman Key Exchange (DHКЕ) ：传统的、应用最为广泛的密钥交换协议</li>
<li>椭圆曲线 Diffie-Hellman (ECDH)</li>
<li>RSA-OAEP 和 RSA-KEM（RSA 密钥传输）</li>
<li>PSK（预共享密钥）</li>
<li>SRP（安全远程密码协议）</li>
<li>FHMQV（Fully Hashed Menezes-Qu-Vanstone）</li>
<li>ECMQV（Ellictic-Curve Menezes-Qu-Vanstone）</li>
<li>CECPQ1（量子安全密钥协议）</li>
</ul>
<h2 id="二diffiehellman-密钥交换" class="headerLink">
    <a href="#%e4%ba%8cdiffiehellman-%e5%af%86%e9%92%a5%e4%ba%a4%e6%8d%a2" class="header-mark"></a>二、Diffie–Hellman 密钥交换</h2><p>迪菲-赫尔曼密钥交换（Diffie–Hellman Key Exchange）是一种安全协议，它可以让双方在完全没有对方任何预先信息的条件下通过不安全信道安全地协商出一个安全密钥，而且任何窃听者都无法得知密钥信息。
这个密钥可以在后续的通讯中作为对称密钥来加密通讯内容。</p>
<p>DHKE 可以防范嗅探攻击（窃听），但是无法抵挡中间人攻击（中继）。</p>
<p>DHKE 有两种实现方案：</p>
<ul>
<li>传统的 DHKE 算法：使用离散对数实现</li>
<li>基于椭圆曲线密码学的 ECDH</li>
</ul>
<p>为了理解 DHKE 如何实现在「大庭广众之下」安全地协商出密钥，我们首先使用色彩混合来形象地解释下它大致的思路。</p>
<p>跟编程语言的 Hello World 一样，密钥交换的解释通常会使用 Alice 跟 Bob 来作为通信双方。
现在他俩想要在公开的信道上，协商出一个<strong>秘密色彩</strong>出来，但是不希望其他任何人知道这个<strong>秘密色彩</strong>。他们可以这样做：</p>
<figure><img src="/images/practical-cryptography-basics-5-key-exchange/key-exchange-by-mixing-color.webp"/>
</figure>

<p>分步解释如下：</p>
<ul>
<li>首先 Alice 跟 Bob 沟通，确定一个<strong>初始的色彩</strong>，比如黄色。这个沟通不需要保密。</li>
<li>然后，Alice 跟 Bob 分别偷偷地选择出一个自己的<strong>秘密色彩</strong>，这个就得保密啦。</li>
<li>现在 Alice 跟 Bob，分别将<strong>初始色彩</strong>跟自己选择的<strong>秘密色彩</strong>混合，分别得到两个<strong>混合色彩</strong>。</li>
<li>之后，Alice 跟 Bob 再回到公开信道上，交换双方的<strong>混合色彩</strong>。
<ul>
<li>我们假设在仅知道<strong>初始色彩</strong>跟<strong>混合色彩</strong>的情况下，很难推导出被混合的<strong>秘密色彩</strong>。这样第三方就猜不出 Bob 跟 Alice 分别选择了什么<strong>秘密色彩</strong>了。</li>
</ul>
</li>
<li>最后 Alice 跟 Bob 再分别将<strong>自己的秘密色彩</strong>，跟<strong>对方的混合色彩</strong>混合，就得到了最终的<strong>秘密色彩</strong>。这个最终色彩只有 Alice 跟 Bob 知道，信道上的任何人都无法猜出来。</li>
</ul>
<p>DHKE 协议也是基于类似的原理，但是使用的是离散对数（discrete logarithms）跟模幂（modular exponentiations）而不是色彩混合。</p>
<h2 id="三经典-dhke-协议" class="headerLink">
    <a href="#%e4%b8%89%e7%bb%8f%e5%85%b8-dhke-%e5%8d%8f%e8%ae%ae" class="header-mark"></a>三、经典 DHKE 协议</h2><h3 id="基础数学知识" class="headerLink">
    <a href="#%e5%9f%ba%e7%a1%80%e6%95%b0%e5%ad%a6%e7%9f%a5%e8%af%86" class="header-mark"></a>基础数学知识</h3><p>首先介绍下「模幂（modular exponentiations）」，它是指求 $g$ 的 $a$ 次幂模 $p$ 的值 $c$ 的过程，其中 $g$ $a$ $c$ 均为整数，公式如下：</p>
<p>$$
g^a \mod p = c
$$</p>
<p>而「离散对数（discrete logarithms）」，其实就是指模幂的逆运算，它使用如下公式表示：</p>
<p>$$
Ind_{g}c \equiv a {\pmod {p}}
$$</p>
<p>上述公式，即指在已知整数 $g$，质数 $p$，以及余数（p 的一个原根） $c$ 的情况下，求使前面的模幂等式成立的幂指数 $a$。</p>
<p>已知使用计算机计算上述「模幂」是非常快速的，但是在质数 $p$ 非常大的情况下，求「离散对数」却是非常难的，这就是「离散对数难题」。</p>
<p>然后为了理解 HDKE 的原理，我们还需要了解下模幂运算的一个性质：</p>
<p>$$
g^{ab} \mod p = {g^a \mod p}^b \mod p
$$</p>
<p>懂了上面这些基础数学知识，下面就开始介绍 HDKE 算法。</p>
<h3 id="dhke-密钥交换流程" class="headerLink">
    <a href="#dhke-%e5%af%86%e9%92%a5%e4%ba%a4%e6%8d%a2%e6%b5%81%e7%a8%8b" class="header-mark"></a>DHKE 密钥交换流程</h3><p>下面该轮到 Alice 跟 Bob 出场来介绍 DHKE 的过程了，先看图（下面<span style="color:green">绿色</span>表示非秘密信息，<span style="color:red"><strong>红色</strong></span>表示秘密信息）：</p>
<figure><img src="/images/practical-cryptography-basics-5-key-exchange/diffle-hellman.webp"/>
</figure>

<ul>
<li>Alice 跟 Bob 协定使用两个比较独特的正整数 <span style="color:green">$p$</span> 跟 <span style="color:green">$g$</span>
<ul>
<li>假设 <span style="color:green">$p=23$, $g=5$</span></li>
</ul>
</li>
<li>Alice 选择一个秘密整数 <span style="color:red">$a$</span>，计算 <span style="color:green">$A$</span>$\ = g^a \mod p$ 并发送给 Bob
<ul>
<li>假设 <span style="color:red">$a=4$</span>，则 <span style="color:green">$A$</span>$\ = 5^4 \mod 23 = 4$</li>
</ul>
</li>
<li>Bob 也选择一个秘密整数 <span style="color:red">$b$</span>，计算 <span style="color:green">$B$</span>$\ = g^b \mod p$ 并发送给 Alice
<ul>
<li>假设 <span style="color:red">$b=3$</span>，则 <span style="color:green">$B$</span>$\ = 5^3 \mod 23 = 10$</li>
</ul>
</li>
<li>Alice 计算  $S_1 = B^a \mod p$
<ul>
<li>$S_1 = 10^4 \mod 23 = 18$</li>
</ul>
</li>
<li>Bob 计算 $S_2 = A^b \mod p$
<ul>
<li>$S_2 = 4^3 \mod 23 = 18$</li>
</ul>
</li>
<li>已知 $B^a \mod p = g^{ab} \mod p = A^b \mod p$，因此 <span style="color:red">$S_1 = S_2 = S$</span></li>
<li>这样 Alice 跟 Bob 就协商出了密钥 <span style="color:red">$S$</span></li>
<li>因为离散对数的计算非常难，任何窃听者都几乎不可能通过公开的 <span style="color:green">$p$ $g$ $A$ $B$</span> 逆推出 <span style="color:red">$S$</span> 的值</li>
</ul>
<p>在最常见的 DHKE 实现中（<a href="https://tools.ietf.org/html/rfc3526" target="_blank" rel="noopener noreffer">RFC3526</a>），基数是 $g = 2$，模数 $p$ 是一个 1536 到 8192 比特的大素数。
而整数 <span style="color:green">$A$ $B$</span> 通常会使用非常大的数字（1024、2048 或 4096 比特甚至更大）以防范暴力破解。</p>
<p>DHKE 协议基于 Diffie-Hellman 问题的实际难度，这是计算机科学中众所周知的离散对数问题（DLP）的变体，目前还不存在有效的算法。</p>
<p>使用 Python 演示下大概是这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives</span> <span class="kn">import</span> <span class="n">hashes</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.asymmetric</span> <span class="kn">import</span> <span class="n">dh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 双方协商使用两个独特的正整数 g 与 p</span>
</span></span><span class="line"><span class="cl"><span class="c1">## generator =&gt; 即基数 g，通常使用 2, 有时也使用 5</span>
</span></span><span class="line"><span class="cl"><span class="c1">## key_size =&gt; 模数 p 的长度，通常使用 2048-3096 位（2048 位的安全性正在减弱）</span>
</span></span><span class="line"><span class="cl"><span class="n">params</span> <span class="o">=</span> <span class="n">dh</span><span class="o">.</span><span class="n">generate_parameters</span><span class="p">(</span><span class="n">generator</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">key_size</span><span class="o">=</span><span class="mi">2048</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">param_numbers</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">parameter_numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">param_numbers</span><span class="o">.</span><span class="n">g</span>  <span class="c1"># =&gt; 肯定是 2</span>
</span></span><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="n">param_numbers</span><span class="o">.</span><span class="n">p</span>  <span class="c1"># =&gt; 一个 2048 位的整数</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">g</span><span class="si">=}</span><span class="s2">, </span><span class="si">{</span><span class="n">p</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. Alice 生成自己的秘密整数 a 与公开整数 A</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_priv_key</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">generate_private_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">alice_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">x</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span> <span class="o">=</span> <span class="n">alice_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">public_numbers</span><span class="o">.</span><span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">a</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">A</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. Bob 生成自己的秘密整数 b 与公开整数 B</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_priv_key</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">generate_private_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">bob_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">x</span>
</span></span><span class="line"><span class="cl"><span class="n">B</span> <span class="o">=</span> <span class="n">bob_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">public_numbers</span><span class="o">.</span><span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">b</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">B</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 4. Alice 与 Bob 公开交换整数 A 跟 B（即各自的公钥）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 5. Alice 使用 a B 与 p 计算出共享密钥</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 首先使用 B p g 构造出 bob 的公钥对象（实际上 g 不参与计算）</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_pub_numbers</span> <span class="o">=</span> <span class="n">dh</span><span class="o">.</span><span class="n">DHPublicNumbers</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">param_numbers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_pub_key</span> <span class="o">=</span> <span class="n">bob_pub_numbers</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 计算共享密钥</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_shared_key</span> <span class="o">=</span> <span class="n">alice_priv_key</span><span class="o">.</span><span class="n">exchange</span><span class="p">(</span><span class="n">bob_pub_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 6. Bob 使用 b A 与 p 计算出共享密钥</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 首先使用 A p g 构造出 alice 的公钥对象（实际上 g 不参与计算）</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_pub_numbers</span> <span class="o">=</span> <span class="n">dh</span><span class="o">.</span><span class="n">DHPublicNumbers</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">param_numbers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_pub_key</span> <span class="o">=</span> <span class="n">alice_pub_numbers</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 计算共享密钥</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_shared_key</span> <span class="o">=</span> <span class="n">bob_priv_key</span><span class="o">.</span><span class="n">exchange</span><span class="p">(</span><span class="n">alice_pub_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 两者应该完全相等， Alice 与 Bob 完成第一次密钥交换</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_shared_key</span> <span class="o">==</span> <span class="n">bob_shared_key</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 7. Alice 与 Bob 使用 shared_key 进行对称加密通讯</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四新一代-ecdh-协议" class="headerLink">
    <a href="#%e5%9b%9b%e6%96%b0%e4%b8%80%e4%bb%a3-ecdh-%e5%8d%8f%e8%ae%ae" class="header-mark"></a>四、新一代 ECDH 协议</h2><p><a href="https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman" target="_blank" rel="noopener noreffer">Elliptic-Curve Diffie-Hellman (ECDH)</a> 是一种匿名密钥协商协议，它允许两方，每方都有一个椭圆曲线公钥-私钥对，它的功能也是让双方在完全没有对方任何预先信息的条件下通过不安全信道安全地协商出一个安全密钥。</p>
<p>ECDH 是经典 DHKE 协议的变体，其中模幂计算被椭圆曲线的乘法计算取代，以提高安全性。</p>
<p>ECDH 跟前面介绍的 DHKE 非常相似，只要你理解了椭圆曲线的数学原理，结合前面已经介绍了的 DHKE，基本上可以秒懂。
我<strong>会在后面「非对称算法」一文中简单介绍椭圆曲线的数学原理</strong>，不过这里也可以先提一下 ECDH 依赖的公式（其中 $a, b$ 为常数，$G$ 为椭圆曲线上的某一点的坐标 $(x, y)$）：</p>
<p>$$
(a * G) * b = (b * G) * a
$$</p>
<p>这个公式还是挺直观的吧，感觉小学生也能理解个大概。
下面简单介绍下 ECDH 的流程：</p>
<ul>
<li>Alice 跟 Bob 协商好椭圆曲线的各项参数，以及基点 G，这些参数都是公开的。</li>
<li>Alice 生成一个随机的 ECC 密钥对（公钥：$alicePrivate * G$, 私钥: $alicePrivate$）</li>
<li>Bob 生成一个随机的 ECC 密钥对（公钥：$bobPrivate * G$, 私钥: $bobPrivate$）</li>
<li>两人通过不安全的信道交换公钥</li>
<li>Alice 将 Bob 的公钥乘上自己的私钥，得到共享密钥 $sharedKey = (bobPrivate * G) * alicePrivate$</li>
<li>Bob 将 Alice 的公钥乘上自己的私钥，得到共享密钥 $sharedKey = (alicePrivate * G) * bobPrivate$</li>
<li>因为前面提到的公式，Alice 与 Bob 计算出的共享密钥应该是相等的</li>
</ul>
<p>这样两方就通过 ECDH 完成了密钥交换。</p>
<p>而 ECDH 的安全性，则由 ECDLP 问题提供保证。
这个问题是说，「通过公开的 $kG$ 以及 $G$ 这两个参数，目前没有有效的手段能快速求解出 $k$ 的值。」</p>
<p>从上面的流程中能看到，公钥就是 ECDLP 中的 $kG$，另外 $G$ 也是公开的，而私钥就是 ECDLP 中的 $k$。
因为 ECDLP 问题的存在，攻击者破解不出 Alice 跟 Bob 的私钥。</p>
<p>代码示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install tinyec  # ECC 曲线库</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">tinyec</span> <span class="kn">import</span> <span class="n">registry</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">secrets</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">compress</span><span class="p">(</span><span class="n">pubKey</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">hex</span><span class="p">(</span><span class="n">pubKey</span><span class="o">.</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="nb">hex</span><span class="p">(</span><span class="n">pubKey</span><span class="o">.</span><span class="n">y</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">curve</span> <span class="o">=</span> <span class="n">registry</span><span class="o">.</span><span class="n">get_curve</span><span class="p">(</span><span class="s1">&#39;brainpoolP256r1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">alicePrivKey</span> <span class="o">=</span> <span class="n">secrets</span><span class="o">.</span><span class="n">randbelow</span><span class="p">(</span><span class="n">curve</span><span class="o">.</span><span class="n">field</span><span class="o">.</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">alicePubKey</span> <span class="o">=</span> <span class="n">alicePrivKey</span> <span class="o">*</span> <span class="n">curve</span><span class="o">.</span><span class="n">g</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Alice public key:&#34;</span><span class="p">,</span> <span class="n">compress</span><span class="p">(</span><span class="n">alicePubKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bobPrivKey</span> <span class="o">=</span> <span class="n">secrets</span><span class="o">.</span><span class="n">randbelow</span><span class="p">(</span><span class="n">curve</span><span class="o">.</span><span class="n">field</span><span class="o">.</span><span class="n">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">bobPubKey</span> <span class="o">=</span> <span class="n">bobPrivKey</span> <span class="o">*</span> <span class="n">curve</span><span class="o">.</span><span class="n">g</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Bob public key:&#34;</span><span class="p">,</span> <span class="n">compress</span><span class="p">(</span><span class="n">bobPubKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Now exchange the public keys (e.g. through Internet)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">aliceSharedKey</span> <span class="o">=</span> <span class="n">alicePrivKey</span> <span class="o">*</span> <span class="n">bobPubKey</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Alice shared key:&#34;</span><span class="p">,</span> <span class="n">compress</span><span class="p">(</span><span class="n">aliceSharedKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">bobSharedKey</span> <span class="o">=</span> <span class="n">bobPrivKey</span> <span class="o">*</span> <span class="n">alicePubKey</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Bob shared key:&#34;</span><span class="p">,</span> <span class="n">compress</span><span class="p">(</span><span class="n">bobSharedKey</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Equal shared keys:&#34;</span><span class="p">,</span> <span class="n">aliceSharedKey</span> <span class="o">==</span> <span class="n">bobSharedKey</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="五pfs-完美前向保密协议-dheecdhe" class="headerLink">
    <a href="#%e4%ba%94pfs-%e5%ae%8c%e7%be%8e%e5%89%8d%e5%90%91%e4%bf%9d%e5%af%86%e5%8d%8f%e8%ae%ae-dheecdhe" class="header-mark"></a>五、PFS 完美前向保密协议 DHE/ECDHE</h2><p>前面介绍的经典 DHKE 与 ECDH 协议流程，都是在最开始时交换一次密钥，之后就一直使用该密钥通讯。
因此如果密钥被破解，整个会话的所有信息对攻击者而言就完全透明了。</p>
<p>为了进一步提高安全性，密码学家提出了「<a href="https://en.wikipedia.org/wiki/Forward_secrecy" target="_blank" rel="noopener noreffer"><strong>完全前向保密</strong>（Perfect Forward Secrecy，PFS）</a>」的概念，并在 DHKE 与 ECDH 的基础上提出了支持 PFS 的 DHE/ECDHE 协议（末尾的 <code>E</code> 是 <code>ephemeral</code> 的缩写，即指所有的共享密钥都是临时的）。</p>
<p>完全前向保密是指长期使用的主密钥泄漏不会导致过去的会话密钥泄漏，从而保护过去进行的通讯不受密码或密钥在未来暴露的威胁。</p>
<p>下面使用 Python 演示下 DHE 协议的流程（ECDHE 的流程也完全类似）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives</span> <span class="kn">import</span> <span class="n">hashes</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.asymmetric</span> <span class="kn">import</span> <span class="n">dh</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 双方协商使用两个独特的正整数 g 与 p</span>
</span></span><span class="line"><span class="cl"><span class="c1">## generator =&gt; 即基数 g，通常使用 2, 有时也使用 5</span>
</span></span><span class="line"><span class="cl"><span class="c1">## key_size =&gt; 模数 p 的长度，通常使用 2048-3096 位（2048 位的安全性正在减弱）</span>
</span></span><span class="line"><span class="cl"><span class="n">params</span> <span class="o">=</span> <span class="n">dh</span><span class="o">.</span><span class="n">generate_parameters</span><span class="p">(</span><span class="n">generator</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">key_size</span><span class="o">=</span><span class="mi">2048</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">param_numbers</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">parameter_numbers</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">g</span> <span class="o">=</span> <span class="n">param_numbers</span><span class="o">.</span><span class="n">g</span>  <span class="c1"># =&gt; 肯定是 2</span>
</span></span><span class="line"><span class="cl"><span class="n">p</span> <span class="o">=</span> <span class="n">param_numbers</span><span class="o">.</span><span class="n">p</span>  <span class="c1"># =&gt; 一个 2048 位的整数</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">g</span><span class="si">=}</span><span class="s2">, </span><span class="si">{</span><span class="n">p</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. Alice 生成自己的秘密整数 a 与公开整数 A</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_priv_key</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">generate_private_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="n">alice_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">x</span>
</span></span><span class="line"><span class="cl"><span class="n">A</span> <span class="o">=</span> <span class="n">alice_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">public_numbers</span><span class="o">.</span><span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">a</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">A</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. Bob 生成自己的秘密整数 b 与公开整数 B</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_priv_key</span> <span class="o">=</span> <span class="n">params</span><span class="o">.</span><span class="n">generate_private_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="n">bob_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">x</span>
</span></span><span class="line"><span class="cl"><span class="n">B</span> <span class="o">=</span> <span class="n">bob_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">public_numbers</span><span class="o">.</span><span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">b</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">B</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 4. Alice 与 Bob 公开交换整数 A 跟 B（即各自的公钥）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 5. Alice 使用 a B 与 p 计算出共享密钥</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 首先使用 B p g 构造出 bob 的公钥对象（实际上 g 不参与计算）</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_pub_numbers</span> <span class="o">=</span> <span class="n">dh</span><span class="o">.</span><span class="n">DHPublicNumbers</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="n">param_numbers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_pub_key</span> <span class="o">=</span> <span class="n">bob_pub_numbers</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 计算共享密钥</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_shared_key</span> <span class="o">=</span> <span class="n">alice_priv_key</span><span class="o">.</span><span class="n">exchange</span><span class="p">(</span><span class="n">bob_pub_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 6. Bob 使用 b A 与 p 计算出共享密钥</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 首先使用 A p g 构造出 alice 的公钥对象（实际上 g 不参与计算）</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_pub_numbers</span> <span class="o">=</span> <span class="n">dh</span><span class="o">.</span><span class="n">DHPublicNumbers</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">param_numbers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_pub_key</span> <span class="o">=</span> <span class="n">alice_pub_numbers</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 计算共享密钥</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_shared_key</span> <span class="o">=</span> <span class="n">bob_priv_key</span><span class="o">.</span><span class="n">exchange</span><span class="p">(</span><span class="n">alice_pub_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 上面的流程跟经典 DHKE 完全一致，代码也是从前面 Copy 下来的</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 但是从这里开始，进入 DHE 协议补充的部分</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">shared_key_1</span> <span class="o">=</span> <span class="n">bob_shared_key</span> <span class="c1"># 第一个共享密钥</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 7. 假设 Bob 现在要发送消息 M_b_1 给 Alice</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 首先 Bob 使用对称加密算法加密消息 M_b</span>
</span></span><span class="line"><span class="cl"><span class="n">M_b_1</span> <span class="o">=</span> <span class="s2">&#34;Hello Alice, I&#39;m bob~&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">C_b_1</span> <span class="o">=</span> <span class="n">Encrypt</span><span class="p">(</span><span class="n">M_b_1</span><span class="p">,</span> <span class="n">shared_key_1</span><span class="p">)</span>  <span class="c1"># Encrypt 是某种对称加密方案的加密算法，如 AES-256-CTR-HMAC-SHA-256</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 然后 Bob 需要生成一个新的公私钥 b_2 与 B_2（注意 g 与 p 两个参数是不变的）</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_priv_key_2</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="n">generate_private_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">b_2</span> <span class="o">=</span> <span class="n">bob_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">x</span>
</span></span><span class="line"><span class="cl"><span class="n">B_2</span> <span class="o">=</span> <span class="n">bob_priv_key</span><span class="o">.</span><span class="n">private_numbers</span><span class="p">()</span><span class="o">.</span><span class="n">public_numbers</span><span class="o">.</span><span class="n">y</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">b_2</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">B_2</span><span class="si">=}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 8. Bob 将 C_b_1 与 B_2 一起发送给 Alice</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 9. Alice 首先解密数据 C_b_1 得到原始消息 M_b_1</span>
</span></span><span class="line"><span class="cl"><span class="k">assert</span> <span class="n">M_b_1</span> <span class="o">==</span> <span class="n">Decrypt</span><span class="p">(</span><span class="n">C_b_1</span><span class="p">,</span> <span class="n">shared_key_1</span><span class="p">)</span>  <span class="c1"># Dncrypt 是某种对称加密方案的解密算法，如 AES-256-CTR-HMAC-SHA-256</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 然后 Alice 也生成新的公私钥 a_2 与 A_2</span>
</span></span><span class="line"><span class="cl"><span class="n">alice_priv_key_2</span> <span class="o">=</span> <span class="n">parameters</span><span class="o">.</span><span class="n">generate_private_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1">## Alice 使用 a_2 B_2 与 p 计算出新的共享密钥 shared_key_2</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_pub_numbers_2</span> <span class="o">=</span> <span class="n">dh</span><span class="o">.</span><span class="n">DHPublicNumbers</span><span class="p">(</span><span class="n">B_2</span><span class="p">,</span> <span class="n">param_numbers</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">bob_pub_key_2</span> <span class="o">=</span> <span class="n">bob_pub_numbers_2</span><span class="o">.</span><span class="n">public_key</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">shared_key_2</span> <span class="o">=</span> <span class="n">alice_priv_key_2</span><span class="o">.</span><span class="n">exchange</span><span class="p">(</span><span class="n">bob_pub_key_2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 10. Alice 回复 Bob 消息时，使用新共享密钥 shared_key_2 加密消息得到 C_a_1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 然后将密文 C_a_1 与 A_2 一起发送给 Bob</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 11. Bob 使用 b_2 A_2 与 p 计算出共享密钥 shared_key_2</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 然后再使用 shared_key_2 解密数据</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Bob 在下次发送消息时，会生成新的 b_3 与 B_3，将 B_3 随密文一起发送</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 依次类推</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过上面的代码描述我们应该能理解到，<strong>Alice 与 Bob 每次交换数据，实际上都会生成新的临时共享密钥</strong>，公钥密钥在每次数据交换时都会更新。
即使攻击者破解了花费了很大的代价破解了其中某一个临时共享密钥 <strong>shared_key_k</strong>（或者该密钥因为某种原因泄漏了），它也只能解密出其中某一次数据交换的信息 <strong>M_b_k</strong>，其他所有的消息仍然是保密的，不受此次攻击（或泄漏）的影响。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a></li>
<li><a href="https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd" target="_blank" rel="noopener noreffer">A complete overview of SSL/TLS and its cryptographic system</a></li>
</ul>
]]></content></entry><entry><title type="html">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</title><link href="https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/"/><id>https://thiscute.world/posts/practical-cryptography-basics-4-secure-random-generators/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:04+08:00</published><updated>2022-03-01T17:15:04+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文主要翻译自 <a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a></p>
</blockquote>
<p>《写给开发人员的实用密码学》系列文章目录：</p>
<ul>
<li><a href="/posts/practical-cryptography-basics-1/" rel="">写给开发人员的实用密码学（一）—— 概览</a></li>
<li><a href="/posts/practical-cryptography-basics-2-hash/" rel="">写给开发人员的实用密码学（二）—— 哈希函数</a></li>
<li><a href="/posts/practical-cryptography-basics-3-key-derivation-function/" rel="">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</a></li>
<li><a href="/posts/practical-cryptography-basics-4-secure-random-generators/" rel="">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</a></li>
<li><a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a></li>
<li><a href="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/" rel="">写给开发人员的实用密码学（六）—— 对称密钥加密算法</a></li>
<li><a href="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/" rel="">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</a></li>
<li><a href="/posts/about-tls-cert" rel="">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></li>
<li>待续</li>
</ul>
<h2 id="一前言" class="headerLink">
    <a href="#%e4%b8%80%e5%89%8d%e8%a8%80" class="header-mark"></a>一、前言</h2><p>在密码学中，随机性（熵）扮演了一个非常重要的角色，许多密码学算法都要求使用一个不可预测的随机数，只有在生成的随机数不可预测时，这些算法才能保证其安全性。</p>
<p>比如 MAC 算法中的 key 就必须是一个不可预测的值，在这个条件下 MAC 值才是不可伪造的。</p>
<p>另外许多的高性能算法如快速排序、布隆过滤器、蒙特卡洛方法等，都依赖于随机性，如果随机性可以被预测，或者能够找到特定的输入值使这些算法变得特别慢，那黑客就能借此对服务进行 DDoS 攻击，以很小的成本达到让服务不可用的目的。</p>
<h2 id="二prng-伪随机数生成器" class="headerLink">
    <a href="#%e4%ba%8cprng-%e4%bc%aa%e9%9a%8f%e6%9c%ba%e6%95%b0%e7%94%9f%e6%88%90%e5%99%a8" class="header-mark"></a>二、PRNG 伪随机数生成器</h2><p>Pseudo-Random Number Generators(PRNG) 是一种数字序列的生成算法，它生成出的数字序列的统计学属性跟真正的随机数序列非常相似，但它生成的伪随机数序列并不是真正的随机数序列！因为该序列完全依赖于提供给 PRNG 的初始值，这个值被称为 PRNG 的种子。</p>
<p>算法流程如下，算法的每次迭代都生成出一个新的伪随机数：</p>
<figure><img src="/images/practical-cryptography-basics-4-secure-random-generators/pseudorandom-number-generators.webp"/>
</figure>

<p>如果输入的初始种子是相同的，PRNG 总是会生成出相同的伪随机数序列，因此 PRNG 也被称为 Deterministic Random Bit Generator (DRBG)，即确定性随机比特生成器。</p>
<p>实际上目前也有所谓的「硬件随机数生成器 TRNG」能生成出真正的随机数，但是因为 PRNG 的高速、低成本、可复现等原因，它仍然被大量使用在现代软件开发中。</p>
<p>PRNG 可用于从一个很小的初始随机性（熵）生成出大量的伪随机性，这被称做「拉伸（Stretching）」。</p>
<p>PRNG 被广泛应用在前面提到的各种依赖随机性的高性能算法以及密码学算法中。</p>
<h3 id="prng-的实现" class="headerLink">
    <a href="#prng-%e7%9a%84%e5%ae%9e%e7%8e%b0" class="header-mark"></a>PRNG 的实现</h3><p>我们在上一篇文章的「MAC 的应用」一节中提到，一个最简单的 PRNG 可以直接使用 MAC 算法实现，用 Python 实现如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hmac</span><span class="o">,</span> <span class="nn">hashlib</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">random_number_generator</span><span class="p">(</span><span class="n">seed</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">max_num</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">state</span> <span class="o">=</span> <span class="n">seed</span>
</span></span><span class="line"><span class="cl">  <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">while</span> <span class="kc">True</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">state</span> <span class="o">=</span> <span class="n">hmac</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">counter</span><span class="p">),</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>    
</span></span><span class="line"><span class="cl">    <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 这里取余实际上是压缩了信息，某种程度上说，这可以保证内部的真实状态 state 不被逆向出来</span>
</span></span><span class="line"><span class="cl">    <span class="k">yield</span> <span class="nb">int</span><span class="o">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">byteorder</span><span class="o">=</span><span class="s2">&#34;big&#34;</span><span class="p">)</span> <span class="o">%</span> <span class="n">max_num</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 测试下，计算 20 个 100 以内的随机数</span>
</span></span><span class="line"><span class="cl"><span class="n">gen</span> <span class="o">=</span> <span class="n">random_number_generator</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;abc&#34;</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">([</span><span class="nb">next</span><span class="p">(</span><span class="n">gen</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">20</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; [71, 41, 52, 18, 51, 14, 58, 30, 70, 20, 59, 93, 3, 10, 81, 63, 48, 67, 18, 36]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三随机性---熵" class="headerLink">
    <a href="#%e4%b8%89%e9%9a%8f%e6%9c%ba%e6%80%a7---%e7%86%b5" class="header-mark"></a>三、随机性 - 熵</h2><p>如果初始的 PRNG 种子是完全不可预测的，PRNG 就能保证整个随机序列都不可预测。</p>
<p>因此在 PRNG 中，生成出一个足够随机的种子，就变得非常重要了。</p>
<p>一个最简单的方法，就是收集随机性。对于桌面电脑，随机性可以从鼠标的移动点击、按键事件、网络状况等随机输入来收集。这个事情是由操作系统在内核中处理的，内核会直接为应用程序提供随机数获取的 API，比如 Linux/MacOSX 的 <code>/dev/random</code> 虚拟设备。</p>
<p>如果这个熵的生成有漏洞，就很可能造成严重的问题，一个现实事件就是<a href="https://bitcoinmagazine.com/technical/critical-vulnerability-found-in-android-wallets-1376273924" target="_blank" rel="noopener noreffer">安卓的 <code>java.security.SecureRandom</code> 漏洞导致安卓用户的比特币钱包失窃</a>。</p>
<p>Python 的 <code>random</code> 库的默认会使用当前时间作为初始 seed，这显然是不够安全的——黑客如果知道你运行程序的大概时间，就能通过遍历的方式暴力破解出你的随机数来！</p>
<h2 id="四csprng-密码学安全随机数生成器" class="headerLink">
    <a href="#%e5%9b%9bcsprng-%e5%af%86%e7%a0%81%e5%ad%a6%e5%ae%89%e5%85%a8%e9%9a%8f%e6%9c%ba%e6%95%b0%e7%94%9f%e6%88%90%e5%99%a8" class="header-mark"></a>四、CSPRNG 密码学安全随机数生成器</h2><p>Cryptography Secure Random Number Generators(CSPRNG) 是一种适用于密码学领域的 PRNG，一个 PRNG 如果能够具备如下两个条件，它就是一个 CSPRNG:</p>
<ul>
<li>能通过「下一比特测试 next-bit test」：即使有人获知了该 PRNG 的 k 位，他也无法使用合理的资源预测第 k+1 位的值</li>
<li>如果攻击者猜出了 PRNG 的内部状态或该状态因某种原因而泄漏，攻击者也无法重建出内部状态泄漏之前生成的所有随机数</li>
</ul>
<p>有许多的设计都被证明可以用于构造一个 CSPRNG:</p>
<ul>
<li>基于计数器(CTR)模式下的<strong>安全<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81" target="_blank" rel="noopener noreffer">分组密码</a></strong>、<strong><a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%AF%86%E7%A0%81" target="_blank" rel="noopener noreffer">流密码</a><strong>或</strong>安全散列函数</strong>的 CSPRNG</li>
<li>基于数论设计的 CSPRNG，它依靠整数分解问题（IFP）、离散对数问题（DLP）或椭圆曲线离散对数问题（ECDLP）的高难度来确保安全性</li>
<li>CSPRNG 基于加密安全随机性的特殊设计，例如 Yarrow algorithm 和 Fortuna，这俩分别被用于 MacOS 和 FreeBSD.</li>
</ul>
<p>大多数的 CSPRNG 结合使用来自 OS 的熵与高质量的 PRNG，并且一旦系统生成了新的熵（这可能来自用户输入、磁盘  IO、系统中断、或者硬件 RNG），CSPRNG 会立即使用新的熵来作为 PRNG 新的种子。
这种不断重置 PRNG 种子的行为，使随机数变得非常难以预测。</p>
<h3 id="csprng-的用途" class="headerLink">
    <a href="#csprng-%e7%9a%84%e7%94%a8%e9%80%94" class="header-mark"></a>CSPRNG 的用途</h3><ul>
<li>加密程序：因为 OS 中熵的收集很缓慢，等待收集到足够多的熵再进行运算是不切实际的，因此很多的加密程序都使用 CSPRNG 来从系统的初始熵生成出足够多的伪随机熵。</li>
<li>其他需要安全随机数的场景 emmmm</li>
</ul>
<h2 id="如何在代码中使用-csprng" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e5%9c%a8%e4%bb%a3%e7%a0%81%e4%b8%ad%e4%bd%bf%e7%94%a8-csprng" class="header-mark"></a>如何在代码中使用 CSPRNG</h2><p>多数系统都内置了 CSPRNG 算法并提供了内核 API，Unix-like 系统都通过如下两个虚拟设备提供 CSPRNG:</p>
<ul>
<li><code>/dev/random</code>（受限阻塞随机生成器）: 从这个设备中读取到的是内核熵池中已经收集好的熵，如果熵池空了，此设备会一直阻塞，直到收集到新的环境噪声。</li>
<li><code>/dev/urandom</code>（不受限非阻塞随机生成器）: 它可能会返回内核熵池中的熵，也可能返回使用「之前收集的熵 + CSPRNG」计算出的安全伪随机数。它不会阻塞。</li>
</ul>
<p>编程语言的 CSPRNG 接口或库如下：</p>
<ul>
<li>Java: <code>java.security.SecureRandom</code></li>
<li>Python: <code>secrets</code> 库或者 <code>os.urandom()</code></li>
<li>C#: <code>System.Security.Cryptography.RandomNumberGenerator.Create()</code></li>
<li>JavaScript: 客户端可使用 <code>window.crypto.getRandomValues(Uint8Array)</code>，服务端可使用 <code>crypto.randomBytes()</code></li>
</ul>
<p>比如使用 Python 实现一个简单但足够安全的随机密码生成器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">secrets</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">chars</span> <span class="o">=</span> <span class="n">string</span><span class="o">.</span><span class="n">digits</span> <span class="o">+</span> <span class="s2">&#34;your_custom_-content&#34;</span> <span class="o">+</span>  <span class="n">string</span><span class="o">.</span><span class="n">ascii_letters</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">random_string</span><span class="p">(</span><span class="n">length</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;生成随机字符串&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 注意，这里不应该使用 random 库！而应该使用 secrets</span>
</span></span><span class="line"><span class="cl">    <span class="n">code</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">secrets</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">chars</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">length</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">code</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">random_string</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; _rebBfgYs4OtkrPbYtnGmc4n</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a></li>
</ul>
]]></content></entry><entry><title type="html">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</title><link href="https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/"/><id>https://thiscute.world/posts/practical-cryptography-basics-3-key-derivation-function/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:03+08:00</published><updated>2022-03-01T17:15:03+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文主要翻译自 <a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a>，笔者补充了 HMAC 的 Python 实现以及 scrypt 使用示例。</p>
</blockquote>
<p>《写给开发人员的实用密码学》系列文章目录：</p>
<ul>
<li><a href="/posts/practical-cryptography-basics-1/" rel="">写给开发人员的实用密码学（一）—— 概览</a></li>
<li><a href="/posts/practical-cryptography-basics-2-hash/" rel="">写给开发人员的实用密码学（二）—— 哈希函数</a></li>
<li><a href="/posts/practical-cryptography-basics-3-key-derivation-function/" rel="">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</a></li>
<li><a href="/posts/practical-cryptography-basics-4-secure-random-generators/" rel="">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</a></li>
<li><a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a></li>
<li><a href="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/" rel="">写给开发人员的实用密码学（六）—— 对称密钥加密算法</a></li>
<li><a href="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/" rel="">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</a></li>
<li><a href="/posts/about-tls-cert" rel="">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></li>
<li>待续</li>
</ul>
<h2 id="一mac-消息认证码" class="headerLink">
    <a href="#%e4%b8%80mac-%e6%b6%88%e6%81%af%e8%ae%a4%e8%af%81%e7%a0%81" class="header-mark"></a>一、MAC 消息认证码</h2><p>MAC 消息认证码，即 Message Authentication Code，是用于验证消息的一小段信息。
换句话说，能用它确认消息的真实性——消息来自指定的发件人并且没有被篡改。</p>
<p>MAC 值通过允许验证者（也拥有密钥）检测消息内容的任何更改来保护消息的数据完整性及其真实性。</p>
<p>一个安全的 MAC 函数，跟加密哈希函数非常类似，也拥有如下特性：</p>
<ul>
<li><strong>快速</strong>：计算速度要足够快</li>
<li><strong>确定性</strong>：对同样的消息跟密钥，应该总是产生同样的输出</li>
<li><strong>难以分析</strong>：对消息或密钥的任何微小改动，都应该使输出完全发生变化</li>
<li><strong>不可逆</strong>：从 MAC 值逆向演算出消息跟密钥应该是不可行的。</li>
<li><strong>无碰撞</strong>：找到具有相同哈希的两条不同消息应该非常困难（或几乎不可能）</li>
</ul>
<p>但是 MAC 算法比加密哈希函数多一个输入值：密钥，因此也被称为 keyed hash functions，即「加密钥的哈希函数」。</p>
<p>如下 Python 代码使用 key 跟 消息计算出对应的 HMAC-SHA256 值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span><span class="o">,</span> <span class="nn">hmac</span><span class="o">,</span> <span class="nn">binascii</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;key&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">msg</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;some msg&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mac</span> <span class="o">=</span> <span class="n">hmac</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;HMAC-SHA256(</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="n">msg</span><span class="si">}</span><span class="s2">)&#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">mac</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf8&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; HMAC-SHA256(b&#39;key&#39;, b&#39;some msg&#39;) = 32885b49c8a1009e6d66662f8462e7dd5df769a7b725d1d546574e6d5d6e76ad</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>HMAC 的算法实际上非常简单，我参考 <a href="https://en.wikipedia.org/wiki/HMAC" target="_blank" rel="noopener noreffer">wiki/HMAC</a> 给出的伪码，编写了下面这个 Python 实现，没几行代码，但是完全 work：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span><span class="o">,</span> <span class="nn">binascii</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">xor_bytes</span><span class="p">(</span><span class="n">b1</span><span class="p">,</span> <span class="n">b2</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="n">c</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">b1</span><span class="p">,</span> <span class="n">b2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">my_hmac</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">hash_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># hash =&gt; (block_size, output_size)</span>
</span></span><span class="line"><span class="cl">  <span class="c1"># 单位是 bytes，数据来源于 https://en.wikipedia.org/wiki/HMAC</span>
</span></span><span class="line"><span class="cl">  <span class="n">hash_size_dict</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;md5&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sha1&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sha224&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">28</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sha256&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># &#34;sha512/224&#34;: (128, 28),  # 这俩算法暂时不清楚在 hashlib 里叫啥名</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># &#34;sha512/256&#34;: (128, 32),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sha_384&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">48</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sha_512&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">128</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sha3_224&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">144</span><span class="p">,</span> <span class="mi">28</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sha3_256&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">136</span><span class="p">,</span> <span class="mi">32</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sha3_384&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">104</span><span class="p">,</span> <span class="mi">48</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;sha3_512&#34;</span><span class="p">:</span> <span class="p">(</span><span class="mi">72</span><span class="p">,</span> <span class="mi">64</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="n">hash_name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">hash_size_dict</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s2">&#34;unknown hash_name&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">block_size</span><span class="p">,</span> <span class="n">output_size</span> <span class="o">=</span> <span class="n">hash_size_dict</span><span class="p">[</span><span class="n">hash_name</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="n">hash_</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">hashlib</span><span class="p">,</span> <span class="n">hash_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="c1"># 确保 key 的长度为 block_size</span>
</span></span><span class="line"><span class="cl">  <span class="n">block_sized_key</span> <span class="o">=</span> <span class="n">key</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">block_size</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">block_sized_key</span> <span class="o">=</span> <span class="n">hash_</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>  <span class="c1"># 用 hash 函数进行压缩</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">block_size</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">block_sized_key</span> <span class="o">+=</span> <span class="sa">b</span><span class="s1">&#39;</span><span class="se">\x00</span><span class="s1">&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="n">block_size</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>  <span class="c1"># 末尾补 0</span>
</span></span><span class="line"><span class="cl">  
</span></span><span class="line"><span class="cl">  <span class="n">o_key_pad</span> <span class="o">=</span> <span class="n">xor_bytes</span><span class="p">(</span><span class="n">block_sized_key</span><span class="p">,</span> <span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x5c</span><span class="s2">&#34;</span> <span class="o">*</span> <span class="n">block_size</span><span class="p">))</span>  <span class="c1"># Outer padded key</span>
</span></span><span class="line"><span class="cl">  <span class="n">i_key_pad</span> <span class="o">=</span> <span class="n">xor_bytes</span><span class="p">(</span><span class="n">block_sized_key</span><span class="p">,</span> <span class="p">(</span><span class="sa">b</span><span class="s2">&#34;</span><span class="se">\x36</span><span class="s2">&#34;</span> <span class="o">*</span> <span class="n">block_size</span><span class="p">))</span>  <span class="c1"># Inner padded key</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="k">return</span> <span class="n">hash_</span><span class="p">(</span><span class="n">o_key_pad</span> <span class="o">+</span> <span class="n">hash_</span><span class="p">(</span><span class="n">i_key_pad</span> <span class="o">+</span> <span class="n">msg</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">())</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 下面验证下</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;key&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">msg</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">&#34;some msg&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">mac_</span> <span class="o">=</span> <span class="n">my_hmac</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="s2">&#34;sha256&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;HMAC-SHA256(</span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="n">msg</span><span class="si">}</span><span class="s2">)&#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">mac_</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf8&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 输出跟标准库完全一致：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; HMAC-SHA256(b&#39;key&#39;, b&#39;some msg&#39;) = 32885b49c8a1009e6d66662f8462e7dd5df769a7b725d1d546574e6d5d6e76ad</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="mac-与哈希函数数字签名的区别" class="headerLink">
    <a href="#mac-%e4%b8%8e%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0%e6%95%b0%e5%ad%97%e7%ad%be%e5%90%8d%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-mark"></a>MAC 与哈希函数、数字签名的区别</h3><p>上一篇文章提到过，哈希函数只负责生成哈希值，不负责哈希值的可靠传递。</p>
<p>而数字签名呢，跟 MAC 非常相似，但是数字签名使用的是非对称加密系统，更复杂，计算速度也更慢。</p>
<p>MAC 的功能跟数字签名一致，都是验证消息的真实性（authenticity）、完整性（integrity）、不可否认性（non-repudiation），但是 MAC 使用哈希函数或者对称密码系统来做这件事情，速度要更快，算法也更简单。</p>
<h3 id="mac-的应用" class="headerLink">
    <a href="#mac-%e7%9a%84%e5%ba%94%e7%94%a8" class="header-mark"></a>MAC 的应用</h3><h4 id="1-验证消息的真实性完整性" class="headerLink">
    <a href="#1-%e9%aa%8c%e8%af%81%e6%b6%88%e6%81%af%e7%9a%84%e7%9c%9f%e5%ae%9e%e6%80%a7%e5%ae%8c%e6%95%b4%e6%80%a7" class="header-mark"></a>1. 验证消息的真实性、完整性</h4><p>这是最简单的一个应用场景，在通信双向都持有一个预共享密钥的前提下，通信时都附带上消息的 MAC 码。
接收方也使用「收到的消息+预共享密钥」计算出 MAC 码，如果跟收到的一致，就说明消息真实无误。</p>
<p>注意这种应用场景中，消息是不保密的！</p>
<figure><img src="/images/practical-cryptography-basics-3-key-derivation-function/mac-message-is-authentic.webp"/>
</figure>

<h4 id="2-ae-认证加密---authenticated-encryption" class="headerLink">
    <a href="#2-ae-%e8%ae%a4%e8%af%81%e5%8a%a0%e5%af%86---authenticated-encryption" class="header-mark"></a>2. AE 认证加密 - Authenticated encryption</h4><p>常用的加密方法只能保证数据的保密性，并不能保证数据的完整性。</p>
<p>而这里介绍的 MAC 算法，或者还未介绍的基于非对称加密的数字签名，都只能保证数据的真实性、完整性，不能保证数据被安全传输。</p>
<p>而认证加密，就是将加密算法与 MAC 算法结合使用的一种加密方案。</p>
<p>在确保 MAC 码「强不可伪造」的前提下，首先对数据进行加密，然后计算密文的 MAC 码，再同时传输密文与 MAC 码，就能同时保证数据的保密性、完整性、真实性，这种方法叫 Encrypt-then-MAC, 缩写做 EtM. 接收方在解密前先计算密文的 MAC 码与收到的对比，就能验证密文的完整性与真实性。</p>
<p>AE 有一种更安全的变体——<strong>带有关联数据的认证加密</strong> (authenticated encryption with associated data，<strong>AEAD</strong>)。
AEAD 将「关联数据(Associated Data, AD)」——也称为「附加验证数据（Additional Authenticated Data, AAD）」——绑定到密文和它应该出现的上下文，以便可以检测和拒绝将有效密文“剪切并粘贴”到不同上下文的尝试。 AEAD 用于加密和未加密数据一起使用的场景（例如，在加密的网络协议中），并确保整个数据流经过身份验证和完整性保护。
换句话说，AEAD 增加了检查某些内容的完整性和真实性的能力。</p>
<p>我们会在第六章「对称加密算法」中看到如何通过 Python 使用 AEAD 加密方案 AES-256-GCM.</p>
<h4 id="3-基于-mac-的伪随机数生成器" class="headerLink">
    <a href="#3-%e5%9f%ba%e4%ba%8e-mac-%e7%9a%84%e4%bc%aa%e9%9a%8f%e6%9c%ba%e6%95%b0%e7%94%9f%e6%88%90%e5%99%a8" class="header-mark"></a>3. 基于 MAC 的伪随机数生成器</h4><p>MAC 码的另一个用途就是伪随机数生成函数，相比直接使用熵+哈希函数的进行伪随机数计算，MAC 码因为多引入了一个变量 key，理论上它会更安全。</p>
<p>这种场景下，我们称 MAC 使用的密钥为 <code>salt</code>，即盐。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">next_seed = MAC(salt, seed)
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二kdf-密钥派生函数" class="headerLink">
    <a href="#%e4%ba%8ckdf-%e5%af%86%e9%92%a5%e6%b4%be%e7%94%9f%e5%87%bd%e6%95%b0" class="header-mark"></a>二、KDF 密钥派生函数</h2><p>我们都更喜欢使用密码来保护自己的数据而不是二进制的密钥，因为相比之下二进制密钥太难记忆了，字符形式的密码才是符合人类思维习惯的东西。</p>
<p>可对计算机而言就刚好相反了，现代密码学的很多算法都要求输入是一个大的数字，二进制的密钥就是这样一个大的数字。
因此显然我们需要一个将字符密码（Password）转换成密钥（Key）的函数，这就是密钥派生函数 Key Derivation Function.</p>
<p>直接使用 SHA256 之类的加密哈希函数来生成密钥是不安全的，因为为了方便记忆，通常密码并不会很长，绝大多数人的密码长度估计都不超过 15 位。
甚至很多人都在使用非常常见的弱密码，如 123456 admin 生日等等。
这就导致如果直接使用 SHA256 之类的算法，许多密码将很容易被暴力破解、字典攻击、彩虹表攻击等手段猜测出来！</p>
<p>KDF 目前主要从如下三个维度提升 hash 碰撞难度：</p>
<ol>
<li>时间复杂度：对应 CPU/GPU 计算资源</li>
<li>空间复杂度：对应 Memory 内存资源</li>
<li>并行维度：使用无法分解的算法，锁定只允许单线程运算</li>
</ol>
<p>主要手段是加盐，以及多次迭代。这种设计方法被称为「密钥拉伸 Key stretching」。</p>
<figure><img src="/images/practical-cryptography-basics-3-key-derivation-function/key-derivation-function.webp"/>
</figure>

<p>因为它的独特属性，KDF 也被称作慢哈希算法。</p>
<p>目前比较著名的 KDF 算法主要有如下几个：</p>
<ol>
<li>PBKDF2：这是一个非常简单的加密 KDF 算法，目前已经不推荐使用。</li>
<li>Bcrypt：安全性在下降，用得越来越少了。不建议使用。</li>
<li>Scrypt：可以灵活地设定使用的内存大小，在 argon2 不可用时，可使用它。</li>
<li>Argon2：目前最强的密码 Hash 算法，在 2015 年赢得了密码 Hash 竞赛。</li>
</ol>
<p>如果你正在开发一个新的程序，需要使用到 KDF，建议选用 argon2/scrypt.</p>
<p>Python 中最流行的密码学库是 <a href="https://github.com/pyca/cryptography" target="_blank" rel="noopener noreffer">cryptography</a>，<code>requests</code> 的底层曾经就使用了它（新版本已经换成使用标准库 ssl 了），下面我们使用这个库来演示下 Scrypt 算法的使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># pip install cryptography==36.0.1</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.kdf.scrypt</span> <span class="kn">import</span> <span class="n">Scrypt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">salt</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># derive</span>
</span></span><span class="line"><span class="cl"><span class="n">kdf</span> <span class="o">=</span> <span class="n">Scrypt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">salt</span><span class="o">=</span><span class="n">salt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">length</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="o">**</span><span class="mi">14</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="n">kdf</span><span class="o">.</span><span class="n">derive</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;my great password&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># verify</span>
</span></span><span class="line"><span class="cl"><span class="n">kdf</span> <span class="o">=</span> <span class="n">Scrypt</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">salt</span><span class="o">=</span><span class="n">salt</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">length</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="o">**</span><span class="mi">14</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">r</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">kdf</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="sa">b</span><span class="s2">&#34;my great password&#34;</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a></li>
<li><a href="https://dev.to/techschoolguru/a-complete-overview-of-ssl-tls-and-its-cryptographic-system-36pd" target="_blank" rel="noopener noreffer">A complete overview of SSL/TLS and its cryptographic system</a></li>
</ul>
]]></content></entry><entry><title type="html">写给开发人员的实用密码学（二）—— 哈希函数</title><link href="https://thiscute.world/posts/practical-cryptography-basics-2-hash/"/><id>https://thiscute.world/posts/practical-cryptography-basics-2-hash/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:01+08:00</published><updated>2022-03-01T17:15:01+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文主要翻译自 <a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a>，笔者额外补充了「非加密哈希函数」的简单介绍。</p>
</blockquote>
<p>《写给开发人员的实用密码学》系列文章目录：</p>
<ul>
<li><a href="/posts/practical-cryptography-basics-1/" rel="">写给开发人员的实用密码学（一）—— 概览</a></li>
<li><a href="/posts/practical-cryptography-basics-2-hash/" rel="">写给开发人员的实用密码学（二）—— 哈希函数</a></li>
<li><a href="/posts/practical-cryptography-basics-3-key-derivation-function/" rel="">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</a></li>
<li><a href="/posts/practical-cryptography-basics-4-secure-random-generators/" rel="">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</a></li>
<li><a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a></li>
<li><a href="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/" rel="">写给开发人员的实用密码学（六）—— 对称密钥加密算法</a></li>
<li><a href="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/" rel="">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</a></li>
<li><a href="/posts/about-tls-cert" rel="">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></li>
<li>待续</li>
</ul>
<h2 id="一什么是哈希函数" class="headerLink">
    <a href="#%e4%b8%80%e4%bb%80%e4%b9%88%e6%98%af%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0" class="header-mark"></a>一、什么是哈希函数</h2><p><strong>哈希函数</strong>，或者叫<strong>散列函数</strong>，是一种从任何一种数据中创建一个<strong>数字指纹</strong>（也叫数字摘要）的方法，散列函数把数据压缩（或者放大）成一个长度固定的字符串。</p>
<p>哈希函数的输入空间（文本或者二进制数据）是无限大，但是输出空间（一个固定长度的摘要）却是有限的。将「无限」映射到「有限」，不可避免的会有概率不同的输入得到相同的输出，这种情况我们称为<strong>碰撞</strong>（collision）。</p>
<p>一个简单的哈希函数是直接对输入数据/文本的字节求和。
它会导致大量的碰撞，例如 hello 和 ehllo 将具有相同的哈希值。</p>
<p>更好的哈希函数可以使用这样的方案：它将第一个字节作为状态，然后转换状态（例如，将它乘以像 31 这样的素数），然后将下一个字节添加到状态，然后再次转换状态并添加下一个字节等。
这样的操作可以显着降低碰撞概率并产生更均匀的分布。</p>
<h2 id="二加密哈希函数" class="headerLink">
    <a href="#%e4%ba%8c%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0" class="header-mark"></a>二、加密哈希函数</h2><p>加密哈希函数（也叫密码学哈希函数）是指一类有特殊属性的哈希函数。</p>
<p>一个好的「加密哈希函数」必须满足<strong>抗碰撞</strong>（collision-resistant）和<strong>不可逆</strong>（irreversible）这两个条件。
抗碰撞是指通过统计学方法（彩虹表）很难或几乎不可能猜出哈希值对应的原始数据，而不可逆则是说攻击者很难或几乎不可能从算法层面通过哈希值逆向演算出原始数据。</p>
<p>具体而言，一个理想的<strong>加密哈希函数</strong>，应当具有如下属性：</p>
<ul>
<li><strong>快速</strong>：计算速度要足够快</li>
<li><strong>确定性</strong>：对同样的输入，应该总是产生同样的输出</li>
<li><strong>难以分析</strong>：对输入的任何微小改动，都应该使输出完全发生变化</li>
<li><strong>不可逆</strong>：从其哈希值逆向演算出输入值应该是不可行的。这意味着没有比暴力破解更好的破解方法</li>
<li><strong>无碰撞</strong>：找到具有相同哈希值的两条不同消息应该非常困难（或几乎不可能）</li>
</ul>
<p>现代加密哈希函数（如 SHA2 和 SHA3）都具有上述几个属性，并被广泛应用在多个领域，各种现代编程语言和平台的标准库中基本都包含这些常用的哈希函数。</p>
<h3 id="量子安全性" class="headerLink">
    <a href="#%e9%87%8f%e5%ad%90%e5%ae%89%e5%85%a8%e6%80%a7" class="header-mark"></a>量子安全性</h3><p>现代密码学哈希函数（如 SHA2, SHA3, BLAKE2）都被认为是量子安全的，无惧量子计算机的发展。</p>
<h3 id="加密哈希函数的应用" class="headerLink">
    <a href="#%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0%e7%9a%84%e5%ba%94%e7%94%a8" class="header-mark"></a>加密哈希函数的应用</h3><h4 id="1-数据完整性校验" class="headerLink">
    <a href="#1-%e6%95%b0%e6%8d%ae%e5%ae%8c%e6%95%b4%e6%80%a7%e6%a0%a1%e9%aa%8c" class="header-mark"></a>1. 数据完整性校验</h4><p>加密哈希函数被广泛用于文件完整性校验。如果你从网上下载的文件计算出的 SHA256 校验和（checksum）跟官方公布的一致，那就说明文件没有损坏。</p>
<p>但是哈希函数自身不能保证文件的真实性，目前来讲，真实性通常是 TLS 协议要保证的，它确保你在 openssl 网站上看到的「SHA256 校验和」真实无误（未被篡改）。</p>
<figure><img src="/images/practical-cryptography-basics-2-hash/openssl-sha256-checksum.webp"/>
</figure>

<blockquote>
<p>现代网络基本都很难遇到文件损坏的情况了，但是在古早的低速网络中，即使 TCP 跟底层协议已经有多种数据纠错手段，下载完成的文件仍然是有可能损坏的。
这也是以前 rar 压缩格式很流行的原因之一—— rar 压缩文件拥有一定程度上的自我修复能力，传输过程中损坏少量数据，仍然能正常解压。</p>
</blockquote>
<h4 id="2-保存密码" class="headerLink">
    <a href="#2-%e4%bf%9d%e5%ad%98%e5%af%86%e7%a0%81" class="header-mark"></a>2. 保存密码</h4><p>加密哈希函数还被用于密码的安全存储，现代系统使用专门设计的安全哈希算法计算用户密码的哈希摘要，保存到数据库中，这样能确保密码的安全性。除了用户自己，没有人清楚该密码的原始数据，即使数据库管理员也只能看到一个哈希摘要。</p>
<figure><img src="/images/practical-cryptography-basics-2-hash/sha512-password-hash.webp"/>
</figure>

<h4 id="3-生成唯一-id" class="headerLink">
    <a href="#3-%e7%94%9f%e6%88%90%e5%94%af%e4%b8%80-id" class="header-mark"></a>3. 生成唯一 ID</h4><p>加密哈希函数也被用于为文档或消息生成（绝大多数情况下）唯一的 ID，因此哈希值也被称为<strong>数字指纹</strong>。</p>
<blockquote>
<p>注意这里说的是数字指纹，而非数字签名。
数字签名是与下一篇文章介绍的「MAC」码比较类似的，用于验证消息的真实、完整、认证作者身份的一段数据。</p>
</blockquote>
<p>加密哈希函数计算出的哈希值理论上确实有碰撞的概率，但是这个概率实在太小了，因此绝大多数系统（如 Git）都假设哈希函数是无碰撞的（collistion free）。</p>
<p>文档的哈希值可以被用于证明该文档的存在性，或者被当成一个索引，用于从存储系统中提取文档。</p>
<p>使用哈希值作为唯一 ID 的典型例子，Git 版本控制系统（如 <code>3c3be25bc1757ca99aba55d4157596a8ea217698</code>）肯定算一个，比特币地址（如 <code>1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2</code>）也算。</p>
<h4 id="4-伪随机数生成" class="headerLink">
    <a href="#4-%e4%bc%aa%e9%9a%8f%e6%9c%ba%e6%95%b0%e7%94%9f%e6%88%90" class="header-mark"></a>4. 伪随机数生成</h4><p>哈希值可以被当作一个随机数看待，生成一个伪随机数的简单流程如下：</p>
<ul>
<li>通过随机事件得到一个熵（例如键盘点击或鼠标移动），将它作为最初的随机数种子（random seed）。</li>
<li>添加一个 <code>1</code> 到熵中，进行哈希计算得到第一个随机数</li>
<li>再添加一个 <code>2</code>，进行哈希计算得到第二个随机数</li>
<li>以此类推</li>
</ul>
<p>当然为了确保安全性，实际的加密随机数生成器会比这再复杂一些，我们会在后面的「随机数生成器」一节学习其中细节。</p>
<h3 id="安全的加密哈希算法" class="headerLink">
    <a href="#%e5%ae%89%e5%85%a8%e7%9a%84%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e7%ae%97%e6%b3%95" class="header-mark"></a>安全的加密哈希算法</h3><h4 id="1-sha-2-sha-256-sha-512" class="headerLink">
    <a href="#1-sha-2-sha-256-sha-512" class="header-mark"></a>1. SHA-2, SHA-256, SHA-512</h4><p><a href="https://zh.wikipedia.org/wiki/SHA-2" target="_blank" rel="noopener noreffer">SHA-2</a>，即 Secure Hash Algorithm 2，是一组强密码哈希函数，其成本包括：SHA-256（256位哈希）、SHA-384（384位哈希）、SHA-512（512位哈希）等。基于密码概念「Merkle–Damgård 构造」，目前被认为高度安全。 SHA-2 是 SHA-1 的继任者，于 2001 年在美国作为官方加密标准发布。</p>
<p>SHA-2 在软件开发和密码学中被广泛使用，可用于现代商业应用。
其中 SHA-256 被广泛用于 HTTPS 协议、文件完整性校验、比特币区块链等各种场景。</p>
<p>Python 代码示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span><span class="o">,</span> <span class="nn">binascii</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sha256hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SHA-256(</span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s2">) = &#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">sha256hash</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sha384hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha384</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SHA-384(</span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s2">) = &#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">sha384hash</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sha512hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha512</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SHA-512(</span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s2">) = &#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">sha512hash</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">SHA-256(&#39;hello&#39;) = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
</span></span><span class="line"><span class="cl">SHA-384(&#39;hello&#39;) = 59e1748777448c69de6b800d7a33bbfb9ff1b463e44354c3553bcdb9c666fa90125a3c79f90397bdf5f6a13de828684f
</span></span><span class="line"><span class="cl">SHA-512(&#39;hello&#39;) = 9b71d224bd62f3785d96d46ad3ea3d73319bfbc2890caadae2dff72519673ca72323c3d99ba5c11d7c7acc6e14b8c5da0c4663475c2e5c3adef46f73bcdec043
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2-更长的哈希值--更高的抗碰撞能力" class="headerLink">
    <a href="#2-%e6%9b%b4%e9%95%bf%e7%9a%84%e5%93%88%e5%b8%8c%e5%80%bc--%e6%9b%b4%e9%ab%98%e7%9a%84%e6%8a%97%e7%a2%b0%e6%92%9e%e8%83%bd%e5%8a%9b" class="header-mark"></a>2. 更长的哈希值 == 更高的抗碰撞能力</h4><p>按照设计，哈希函数的输出越长，就有望实现更高的安全性和抗碰撞能力（但也有一些例外）。
一般来说，128 位哈希算法比 256 位哈希算法弱，256 位哈希算法比 512 位哈希算法弱。</p>
<p>因此显然 SHA-512 比 SHA-256 更强。我们可以预期，SHA-512 的碰撞概率要比 SHA-256 更低。</p>
<h4 id="3-sha-3-sha3-256-sha3-512-keccak-256" class="headerLink">
    <a href="#3-sha-3-sha3-256-sha3-512-keccak-256" class="header-mark"></a>3. SHA-3, SHA3-256, SHA3-512, Keccak-256</h4><p>在输出的哈希长度相同时，<a href="https://zh.wikipedia.org/wiki/SHA-3" target="_blank" rel="noopener noreffer">SHA-3</a>（及其变体 SHA3-224、SHA3-256、SHA3-384、SHA3-512）被认为拥有比 SHA-2（SHA-224、SHA-256、SHA-384、SHA-512）更高的加密强度。
例如，对于相同的哈希长度（256 位），SHA3-256 提供比 SHA-256 更高的加密强度。</p>
<p>SHA-3 系列函数是 Keccak 哈希家族的代表，它基于密码学概念<a href="https://zh.wikipedia.org/wiki/%E6%B5%B7%E7%B6%BF%E5%87%BD%E6%95%B8" target="_blank" rel="noopener noreffer">海绵函数</a>。而 Keccak 是<a href="https://en.wikipedia.org/wiki/NIST_hash_function_competition#Finalists" target="_blank" rel="noopener noreffer">SHA3 NIST 比赛</a>的冠军。</p>
<p>与 SHA-2 不同，SHA-3 系列加密哈希函数不易受到<a href="https://en.wikipedia.org/wiki/Length_extension_attack" target="_blank" rel="noopener noreffer">长度拓展攻击 Length extension attack</a>.</p>
<p>SHA-3 被认为是高度安全的，并于 2015 年作为美国官方推荐的加密标准发布。</p>
<p>以太坊（Ethereum）区块链中使用的哈希函数 Keccak-256 是 SHA3-256 的变体，在代码中更改了一些常量。</p>
<p>哈希函数 <code>SHAKE128(msg, length)</code> 和 <code>SHAKE256(msg, length)</code> 是 SHA3-256 和 SHA3-512 算法的变体，它们输出消息的长度可以变化。</p>
<p>SHA3 的 Python 代码示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span><span class="o">,</span> <span class="nn">binascii</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sha3_256hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha3_256</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SHA3-256(</span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s2">) = &#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">sha3_256hash</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sha3_512hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha3_512</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;SHA3-512(</span><span class="si">{</span><span class="n">text</span><span class="si">}</span><span class="s2">) = &#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">sha3_512hash</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">SHA3-256(&#39;hello&#39;) = 3338be694f50c5f338814986cdf0686453a888b84f424d792af4b9202398f392
</span></span><span class="line"><span class="cl">Keccak-256(&#39;hello&#39;) = 1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8
</span></span><span class="line"><span class="cl">SHA3-512(&#39;hello&#39;) = 75d527c368f2efe848ecf6b073a36767800805e9eef2b1857d5f984f036eb6df891d75f72d9b154518c1cd58835286d1da9a38deba3de98b5a53e5ed78a84976
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">SHAKE-128(&#39;hello&#39;, 256) = 4a361de3a0e980a55388df742e9b314bd69d918260d9247768d0221df5262380
</span></span><span class="line"><span class="cl">SHAKE-256(&#39;hello&#39;, 160) = 1234075ae4a1e77316cf2d8000974581a343b9eb
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="4-blake2--blake2s--blake2b" class="headerLink">
    <a href="#4-blake2--blake2s--blake2b" class="header-mark"></a>4. BLAKE2 / BLAKE2s / BLAKE2b</h4><p><a href="https://en.wikipedia.org/wiki/BLAKE_%28hash_function" target="_blank" rel="noopener noreffer">BLAKE</a> / BLAKE2 / BLAKE2s / BLAKE2b 是一系列快速、高度安全的密码学哈希函数，提供 160 位、224 位、256 位、384 位和 512 位摘要大小的计算，在现代密码学中被广泛应用。BLAKE 进入了<a href="https://en.wikipedia.org/wiki/NIST_hash_function_competition#Finalists" target="_blank" rel="noopener noreffer">SHA3 NIST 比赛</a>的决赛。</p>
<ul>
<li>BLAKE2 函数是 BLAKE 的改进版本。</li>
<li>BLAKE2s（通常为 256 位）是 BLAKE2 实现，针对 32 位微处理器进行了性能优化。</li>
<li>BLAKE2b（通常为 512 位）是 BLAKE2 实现，针对 64 位微处理器进行了性能优化。</li>
</ul>
<p>BLAKE2 哈希函数具有与 SHA-3 类似的安全强度，但开发人员目前仍然更倾向于使用 SHA2 和 SHA3。</p>
<p>BLAKE 哈希值的 Python 示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span><span class="o">,</span> <span class="nn">binascii</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">blake2s</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;blake2s&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;BLAKE2s(</span><span class="si">{text}</span><span class="s2">) = &#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">blake2s</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&#34;utf-8&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">blake2b</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;blake2b&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;BLAKE2b(</span><span class="si">{text}</span><span class="s2">) = &#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">blake2b</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&#34;utf-8&#34;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">BLAKE2s(&#39;hello&#39;) = 19213bacc58dee6dbde3ceb9a47cbb330b3d86f8cca8997eb00be456f140ca25
</span></span><span class="line"><span class="cl">BLAKE2b(&#39;hello&#39;) = e4cfa39a3d37be31c59609e807970799caa68a19bfaa15135f165085e01d41a65ba1e1b146aeb6bd0092b49eac214c103ccfa3a365954bbbe52f74a2b3620c94
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="5-ripemd-160" class="headerLink">
    <a href="#5-ripemd-160" class="header-mark"></a>5. RIPEMD-160</h4><p><a href="https://en.wikipedia.org/wiki/RIPEMD" target="_blank" rel="noopener noreffer">RIPEMD-160, RIPE Message Digest</a> 是一种安全哈希函数，发布于 1996 年，目前主要被应用在 PGP 和比特币中。</p>
<p>RIPEMD 的 160 位变体在实践中被广泛使用，而 RIPEMD-128、RIPEMD-256 和 RIPEMD-320 等其他变体并不流行，并且它们的安全优势具有争议。</p>
<p>建议优先使用 SHA-2 和 SHA-3 而不是 RIPEMD，因为它们输出的哈希值更长，抗碰撞能力更强。</p>
<p>Python 示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">hashlib</span><span class="o">,</span> <span class="nn">binascii</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">text</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">data</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s2">&#34;utf8&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">ripemd160</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;ripemd160&#39;</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;RIPEMD-160(</span><span class="si">{text}</span><span class="s2">) = &#34;</span><span class="p">,</span> <span class="n">binascii</span><span class="o">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">ripemd160</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s2">&#34;utf-8&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; RIPEMD-160({text}) =  108f07b8382412612c048d07d13f814118445acd</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="6-其他安全哈希算法" class="headerLink">
    <a href="#6-%e5%85%b6%e4%bb%96%e5%ae%89%e5%85%a8%e5%93%88%e5%b8%8c%e7%ae%97%e6%b3%95" class="header-mark"></a>6. 其他安全哈希算法</h4><p>以下是目前流行的强加密哈希函数，它们都可被用于替代 SHA-2、SHA-3 和 BLAKE2：</p>
<ul>
<li>
<p><strong>Whirlpool</strong> 发布于 2000 年，此算法输出固定的 512 位哈希值。该算法使用512位的密钥，参考了分组密码的思路，使用轮函数加迭代，算法结构与 AES 相似。</p>
</li>
<li>
<p><strong>SM3</strong> 是中国国密密码杂凑算法标准，由国家密码管理局于 2010 年 12 月公布。它类似于 SHA-256（基于 Merkle-Damgård 结构），输出为 256 位哈希值。</p>
</li>
<li>
<p><strong>GOST</strong>（GOST R 34.11-94）哈希函数是俄罗斯的国家标准，它的输出也是 256 位哈希值。</p>
</li>
</ul>
<p>以下函数是 SHA-2、SHA-3 和 BLAKE 的不太受欢迎的替代品，它们是<a href="https://en.wikipedia.org/wiki/NIST_hash_function_competition#Finalists" target="_blank" rel="noopener noreffer">SHA3 NIST 比赛</a>的决赛入围者</p>
<ul>
<li><strong>Skein</strong> 能够计算出 128、160、224、256、384、512 和 1024 位哈希值。</li>
<li><strong>Grøstl</strong> 能够计算出 224、256、384 和 512 位哈希值。</li>
<li><strong>JH</strong> 能够计算出 224、256、384 和 512 位哈希值。</li>
</ul>
<h3 id="不安全的加密哈希算法" class="headerLink">
    <a href="#%e4%b8%8d%e5%ae%89%e5%85%a8%e7%9a%84%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e7%ae%97%e6%b3%95" class="header-mark"></a>不安全的加密哈希算法</h3><p>一些老一代的加密哈希算法，如 MD5, SHA-0 和 SHA-1 被认为是不安全的，并且都存在已被发现的加密漏洞（碰撞）。<strong>不要使用 MD5、SHA-0 和 SHA-1</strong>！这些哈希函数都已被证明不够安全。</p>
<p>使用这些不安全的哈希算法，可能会导致数字签名被伪造、密码泄漏等严重问题！</p>
<p>另外也请避免使用以下被认为不安全或安全性有争议的哈希算法： <strong>MD2, MD4, MD5, SHA-0, SHA-1, Panama</strong>, <strong>HAVAL</strong>（有争议的安全性，在 HAVAL-128 上发现了碰撞），<strong>Tiger</strong>（有争议，已发现其弱点），<strong>SipHash</strong>（它属于非加密哈希函数）。</p>
<h3 id="pow-工作量证明哈希函数" class="headerLink">
    <a href="#pow-%e5%b7%a5%e4%bd%9c%e9%87%8f%e8%af%81%e6%98%8e%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0" class="header-mark"></a>PoW 工作量证明哈希函数</h3><p>区块链中的 Proof-of-Work 工作量证明挖矿算法使用了一类特殊的哈希函数，这些函数是计算密集型和内存密集型的。
这些哈希函数被设计成需要消耗大量计算资源和大量内存，并且很难在硬件设备（例如集成电路或矿机）中实现，也就难以设计专用硬件来加速计算。这种哈希函数被称为<strong>抗 ASIC</strong>（ASIC-resistant）。</p>
<p>大部分工作量证明（Proof-of-Work）算法，都是要求计算出一个比特定值（称为挖掘难度）更大的哈希值。
因为哈希值是不可预测的，为了找出符合条件的哈希值，矿工需要计算数十亿个不同的哈希值，再从中找出最大的那个。
比如，一个工作量证明问题可能会被定义成这样：已有常数 <code>x</code>，要求找到一个数 <code>p</code>，使 <code>hash(x + p)</code> 的前十个比特都为 <code>0</code>.</p>
<p>有许多哈希函数是专为工作量证明挖掘算法设计的，例如 ETHash、Equihash、CryptoNight 和 Cookoo Cycle.
这些哈希函数的计算速度很慢，通常使用 GPU 硬件（如 NVIDIA GTX 1080 等显卡）或强大的 CPU 硬件（如 Intel Core i7-8700K）和大量快速 RAM 内存（如 DDR4 芯片）来执行这类算法。
这些挖矿算法的目标是通过刺激小型矿工（家庭用户和小型矿场）来<strong>最大限度地减少挖矿的集中化</strong>，并限制挖矿行业中高级玩家们（他们有能力建造巨型挖矿设施和数据中心）的力量。
与少数的高玩相比，<strong>大量小玩家意味着更好的去中心化</strong>。</p>
<p>目前大型虚拟货币挖矿公司手中的主要武器是 ASIC 矿机，因此，现代加密货币通常会要求使用「抗 ASIC 哈希算法」或「权益证明（proof-of-stake）共识协议」进行「工作量证明挖矿」，以限制这部分高级玩家，达成更好的去中心化。</p>
<blockquote>
<p>因为工作量证明算法需要消耗大量能源，不够环保，以太坊等区块链已经声明未来将会升级到权益证明（Proof-of-S）这类更环保的算法。不过这里我们只关注 PoW 如何基于哈希函数实现的，不讨论这个。</p>
</blockquote>
<h4 id="1-ethash" class="headerLink">
    <a href="#1-ethash" class="header-mark"></a>1. ETHash</h4><p>这里简要说明下以太坊区块链中使用的 ETHash 工作量证明挖掘哈希函数背后的思想。</p>
<p>ETHash 是以太坊区块链中的工作量证明哈希函数。它是内存密集型哈希函数（需要大量 RAM 才能快速计算），因此它被认为是抗 ASIC 的。</p>
<p>ETHash 的工作流程：</p>
<ul>
<li>基于直到当前区块的整个链，为每个区块计算一个「种子」</li>
<li>从种子中计算出一个 16 MB 的伪随机缓存</li>
<li>从缓存中提取 1 GB 数据集以用于挖掘</li>
<li>挖掘涉及将数据集的随机切片一起进行哈希</li>
</ul>
<p>更多信息参见 <a href="https://eth.wiki/en/concepts/ethash/ethash" target="_blank" rel="noopener noreffer">eth.wiki - ethash</a></p>
<h4 id="2-equihash" class="headerLink">
    <a href="#2-equihash" class="header-mark"></a>2. Equihash</h4><p>简要解释一下 Zcash、Bitcoin Gold 和其他一些区块链中使用的 Equihash 工作量证明挖掘哈希函数背后的思想。</p>
<p>Equihash 是 Zcash 和 Bitcoin Gold 区块链中的工作量证明哈希函数。它是内存密集型哈希函数（需要大量 RAM 才能进行快速计算），因此它被认为是抗 ASIC 的。</p>
<p>Equihash 的工作流程：</p>
<ul>
<li>基于直到当前区块的整个链，使用 BLAKE2b 计算出 50 MB 哈希数据集</li>
<li>在生成的哈希数据集上解决「广义生日问题」（从 2097152 中挑选 512 个不同的字符串，使得它们的二进制 XOR 为零）。已知最佳的解决方案（瓦格纳算法）在指数时间内运行，因此它需要大量的内存密集型和计算密集型计算</li>
<li>对前面得到的结果，进行双 SHA256 计算得到最终结果，即 <code>SHA256(SHA256(solution))</code></li>
</ul>
<p>更多信息参见 <a href="https://github.com/tromp/equihash" target="_blank" rel="noopener noreffer">https://github.com/tromp/equihash</a></p>
<h2 id="三非加密哈希函数" class="headerLink">
    <a href="#%e4%b8%89%e9%9d%9e%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e5%87%bd%e6%95%b0" class="header-mark"></a>三、非加密哈希函数</h2><p>加密哈希函数非常看重「加密」，为了实现更高的安全强度，费了非常多的心思、也付出了很多代价。</p>
<p>但是实际应用中很多场景是不需要这么高的安全性的，相反可能会对速度、随机均匀性等有更高的要求。
这就催生出了很多「非加密哈希函数」。</p>
<p>非加密哈希函数的应用场景有很多：</p>
<ul>
<li>哈希表 Hash Table: 在很多语言中也被称为 map/dict，它使用的算法很简单，通常就是把对象的各种属性不断乘个质数（比如 31）再相加，哈希空间会随着表的变化而变化。这里最希望的是数据的分布足够均匀。</li>
<li>一致性哈希：目的是解决分布式缓存的问题。在移除或者添加一个服务器时，能够尽可能小地改变已存在的服务请求与处理请求服务器之间的映射关系。</li>
<li>高性能哈希算法：SipHash MurMurHash3 等，使用它们的目的可能是对数据进行快速去重，要求就是足够快。</li>
</ul>
<p>有时我们甚至可能不太在意哈希碰撞的概率。
也有的场景输入是有限的，这时我们可能会希望哈希函数具有可逆性。</p>
<p>总之非加密哈希函数也有非常多的应用，但不是本文的主题。
这里就不详细介绍了，有兴趣的朋友们可以自行寻找其他资源。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a></li>
<li><a href="https://segmentfault.com/a/1190000010990136" target="_blank" rel="noopener noreffer">漫谈非加密哈希算法</a></li>
<li><a href="http://thomaslau.xyz/2020/05/20/2020-05-20-on_hash_1/" target="_blank" rel="noopener noreffer">开发中常见的一些Hash函数（一）</a></li>
</ul>
]]></content></entry><entry><title type="html">写给开发人员的实用密码学（一）—— 概览</title><link href="https://thiscute.world/posts/practical-cryptography-basics-1/"/><id>https://thiscute.world/posts/practical-cryptography-basics-1/</id><author><name>ryan4yin</name></author><published>2022-03-01T17:15:00+08:00</published><updated>2022-03-01T17:15:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文主要翻译自 <a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical-Cryptography-for-Developers-Book</a></p>
</blockquote>
<p>《写给开发人员的实用密码学》系列文章目录：</p>
<ul>
<li><a href="/posts/practical-cryptography-basics-1/" rel="">写给开发人员的实用密码学（一）—— 概览</a></li>
<li><a href="/posts/practical-cryptography-basics-2-hash/" rel="">写给开发人员的实用密码学（二）—— 哈希函数</a></li>
<li><a href="/posts/practical-cryptography-basics-3-key-derivation-function/" rel="">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</a></li>
<li><a href="/posts/practical-cryptography-basics-4-secure-random-generators/" rel="">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</a></li>
<li><a href="/posts/practical-cryptography-basics-5-key-exchange/" rel="">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a></li>
<li><a href="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/" rel="">写给开发人员的实用密码学（六）—— 对称密钥加密算法</a></li>
<li><a href="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/" rel="">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</a></li>
<li><a href="/posts/about-tls-cert" rel="">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></li>
<li>待续</li>
</ul>
<h2 id="零前言" class="headerLink">
    <a href="#%e9%9b%b6%e5%89%8d%e8%a8%80" class="header-mark"></a>零、前言</h2><p>你是软件开发人员吗？有时你会需要在日常工作中使用哈希、加密或数字签名等密码学工具吗？
你认为密码学很复杂，充满了数学知识，而且只适合书呆子吗？
不，不是这样滴，每个开发人员都可以学习如何使用加密算法。</p>
<p><strong>从开发人员的角度理解密码学概念</strong>不需要你是一个厉害的数学家。
本书将尽量以最浅显的方式教你<strong>应用密码学</strong>的基础知识，而且包含大量循序渐进的代码示例和实践练习——就像你学习 Web 开发、数据库或 APP 一样。</p>
<p>没错，如果你能够学会 Web 开发或 RESTful 服务，那么你也完全可以学会实用密码学。这就像学习一个新的 API 或一个新的 Web 开发框架，只要掌握了概念 + 加密库 API + 工具 + 最佳实践，你就学会了实用密码学~</p>
<p>从本书中，你将学习如何使用密码算法和密码系统，如哈希、MAC 码和密钥派生函数 (KDF)、随机生成器、密钥交换协议、对称密码算法、加密方案、非对称密码系统、公钥密码学、椭圆曲线、数字签名和量子安全加密算法，以及现代加密工具和库。</p>
<h2 id="一现代密码学概览" class="headerLink">
    <a href="#%e4%b8%80%e7%8e%b0%e4%bb%a3%e5%af%86%e7%a0%81%e5%ad%a6%e6%a6%82%e8%a7%88" class="header-mark"></a>一、现代密码学概览</h2><p>密码学已经从第一代广泛应用的密码学算法（比如已经退役的 MD5 跟 DES），发展到现代密码学算法（如 SHA-3, Argon2 以及 ChaCha20）。</p>
<p>让我们首先跟一些基本的密码学概念混个脸熟：</p>
<ul>
<li><strong>哈希函数</strong>，如 SHA-256, SHA3, RIPEMD 等</li>
<li><strong>散列消息认证码 HMAC</strong></li>
<li><strong>密钥派生函数 KDF</strong>，如 Scrypt</li>
<li><strong>密钥交换算法</strong>，如 Diffie-Hellman 密钥交换协议</li>
<li><strong>对称密钥加密方案</strong>，如 AES-256-CTR-HMAC-SHA-256</li>
<li>使用公私钥的<strong>非对称密钥加密方案</strong>，如 RSA 和 ECC, secp256k1 曲线跟 Ed25519 密码系统</li>
<li><strong>数字签名算法</strong>，如 ECDSA</li>
<li><strong>熵</strong>（entropy）与<strong>安全随机数生成</strong></li>
<li><strong>量子安全</strong>密码学</li>
</ul>
<p>上述这些概念涉及到技术被广泛应用在 IT 领域，如果你有过一些开发经验，可能会很熟悉其中部分名词。
如果不熟也没任何关系，本书的目的就是帮你搞清楚这些概念。</p>
<p>这个系列的文章会按上面给出的顺序，依次介绍这些密码学概念以及如何在日常开发中使用它们。</p>
<p>不过在开始学习之前，我们先来了解一下什么是密码学，以及密码学的几大用途。</p>
<h2 id="二什么是密码学" class="headerLink">
    <a href="#%e4%ba%8c%e4%bb%80%e4%b9%88%e6%98%af%e5%af%86%e7%a0%81%e5%ad%a6" class="header-mark"></a>二、什么是密码学</h2><p><strong>密码学（Cryptography）<strong>是提供信息</strong>安全</strong>和<strong>保护</strong>的科学。
它在我们的数字世界中无处不在，当你打开网站时、发送电子邮件时、连接到 WiFi 网络时，使用账号密码登录 APP 时、使用二步认证验证码认证身份时，都有涉及到密码学相关技术。
因此开发人员应该<strong>对密码学有基本的了解</strong>，以避免写出不安全的代码。
至少也得知道如何使用密码算法和密码库，了解哈希、对称密码算法、非对称密码算法（cipher）与加密方案这些概念，知晓数字签名及其背后的密码系统和算法。</p>
<h2 id="三密码学的用途" class="headerLink">
    <a href="#%e4%b8%89%e5%af%86%e7%a0%81%e5%ad%a6%e7%9a%84%e7%94%a8%e9%80%94" class="header-mark"></a>三、密码学的用途</h2><h3 id="1-加密与密钥" class="headerLink">
    <a href="#1-%e5%8a%a0%e5%af%86%e4%b8%8e%e5%af%86%e9%92%a5" class="header-mark"></a>1. 加密与密钥</h3><p>密码学的一大用途，就是进行数据的安全存储和安全传输。
这可能涉及使用对称或非对称加密方案<strong>加密</strong>和<strong>解密</strong>数据，其中一个或多个<strong>密钥</strong>用于将数据从明文转换为加密形式或者相反。</p>
<p>对称加密（如 AES、Twofish 和 ChaCha20）使用相同的密钥（一个密钥）来加密和解密消息，
而非对称加密使用公钥密码系统（如 RSA 或 ECC）和密钥对（两个密钥）来进行这两项操作。</p>
<p>单纯使用加密算法是不够的，这是因为有的加密算法只能按块进行加密，而且很多加密算法并不能保证密文的真实性、完整性。
因此现实中我们通常会使用加密方案进行数据的加密解密。加密方案是结合了加密算法、消息认证或数字签名算法、块密码模式等多种算法，能同时保证数据的安全性、真实性、完整性的一套加密方案，如 AES-256-CTR-HMAC-SHA-256、ChaCha20-Poly1305 或 ECIES-secp256k1-AES-128-GCM。
后面我们会学到，加密方案的名称就是使用到的各种密码算法名称的组合。</p>
<h3 id="2-数字签名与消息认证" class="headerLink">
    <a href="#2-%e6%95%b0%e5%ad%97%e7%ad%be%e5%90%8d%e4%b8%8e%e6%b6%88%e6%81%af%e8%ae%a4%e8%af%81" class="header-mark"></a>2. 数字签名与消息认证</h3><p>密码学提供了保证消息真实性（authenticity）、完整性（integrity）和不可否认性（non-repudiation）的方法：数字签名算法与消息认证（MAC）算法。</p>
<p>大多数数字签名算法（如 DSA、ECDSA 和 EdDSA）使用非对称密钥对（私钥和公钥）干这个活：消息由私钥<strong>签名</strong>，签名由相应的公钥<strong>验证</strong>。
在银行系统中，数字签名用于签署和批准付款。
在区块链签名交易中，用户可以将区块链资产从一个地址转移到另一个地址，确保转移操作的真实、完整、不可否认。</p>
<p>消息认证算法（如 HMAC）和消息认证码（MAC 码）也是密码学的一部分。MAC 跟数字签名的功能实际上是一致的，区别在于 MAC 使用哈希算法或者对称加密系统。</p>
<h3 id="3-安全随机数" class="headerLink">
    <a href="#3-%e5%ae%89%e5%85%a8%e9%9a%8f%e6%9c%ba%e6%95%b0" class="header-mark"></a>3. 安全随机数</h3><p>密码学的另一个部分，是<strong>熵</strong>（entropy，不可预测的随机性）和<strong>随机数的安全生成</strong>（例如使用 CSPRNG）。</p>
<p>安全随机数理论上是<strong>不可预测的</strong>，开发人员需要关心的是你使用的随机数生成器是否足够安全。
很多编程语言中被广泛使用的随机数生成器都是不安全的（比如 Python 的 <code>random</code> 库），如果你在对安全有严格要求的场景下使用了这种不安全的随机生成器，可能会黑客被预测到它生成的随机数，导致系统或者 APP 被黑客入侵。</p>
<h3 id="4-密钥交换" class="headerLink">
    <a href="#4-%e5%af%86%e9%92%a5%e4%ba%a4%e6%8d%a2" class="header-mark"></a>4. 密钥交换</h3><p>密码学定义了<strong>密钥交换算法</strong>（如 Diffie-Hellman 密钥交换和 ECDH）和密钥构建方案，用于在需要安全传输消息的两方之间安全地构建加密密钥。
这种算法通常在两方之间建立新的安全连接时执行，例如当你打开一个现代 HTTPS 网站或连接到 WiFi 网络时。</p>
<h2 id="5-加密哈希与-password-哈希" class="headerLink">
    <a href="#5-%e5%8a%a0%e5%af%86%e5%93%88%e5%b8%8c%e4%b8%8e-password-%e5%93%88%e5%b8%8c" class="header-mark"></a>5. 加密哈希与 Password 哈希</h2><p>密码学提供了加密哈希函数（如 SHA-3 和 BLAKE2）将消息转换为消息摘要/数字指纹（固定长度的散列），确保无法逆向出原始消息，并且几乎不可能找到具有相同哈希值的两条不同消息。</p>
<p>例如，在区块链系统中，哈希用于生成区块链地址、交易 ID 以及许多其他算法和协议。在 Git 中，加密哈希用于为文件和提交生成唯一 ID。</p>
<p>而密钥派生函数（如 Scrypt 和 Argon2）通过从基于文本的 Password 安全地派生出哈希值（或密钥），并且这种算法还通过注入随机参数（盐）和使用大量迭代和计算资源使密码破解速度变慢。</p>
<p>密码学也被用于密钥（一个非常大的、保密的数字）的生成。
因为人类只擅长记忆字符形式的 Password/Passphrases，而各种需要加密算法需要的密钥，都是一个非常大的、保密的数字。</p>
<h2 id="四混淆与扩散" class="headerLink">
    <a href="#%e5%9b%9b%e6%b7%b7%e6%b7%86%e4%b8%8e%e6%89%a9%e6%95%a3" class="header-mark"></a>四、混淆与扩散</h2><p>在密码学当中，香农提出的<a href="https://zh.wikipedia.org/wiki/%E6%B7%B7%E6%B7%86%E8%88%87%E6%93%B4%E6%95%A3" target="_blank" rel="noopener noreffer"><strong>混淆</strong>（confusion）与<strong>扩散</strong>（diffusion）</a>是设计安全密码学算法的两个原则。</p>
<p><strong>混淆</strong>使<strong>密文</strong>和对称加密中<strong>密钥</strong>的映射关系变得尽可能的复杂，使之难以分析。
如果使用了<strong>混淆</strong>，那么输出密文中的每个比特位都应该依赖于密钥和输入数据的多个部分，确保两者无法建立直接映射。
<strong>混淆</strong>常用的方法是「替换」与「排列」。</p>
<p>「<strong>扩散</strong>」将明文的统计结构扩散到大量密文中，隐藏明文与密文之间的统计学关系。
使单个明文或密钥位的影响尽可能扩大到更多的密文中去，确保改变输入中的任意一位都应该导致输出中大约一半的位发生变化，反过来改变输出密文的任一位，明文中大约一半的位也必须发生变化。
<strong>扩散</strong>常用的方法是「置换」。</p>
<p>这两个原则被包含在大多数散列函数、MAC 算法、随机数生成器、对称和非对称密码算法中。</p>
<h2 id="五密码库" class="headerLink">
    <a href="#%e4%ba%94%e5%af%86%e7%a0%81%e5%ba%93" class="header-mark"></a>五、密码库</h2><p>说了这么多，作为一个程序员，我学习密码学的目的，只是了解如何在编程语言中使用现代密码库，并从中挑选合适的算法、使用合适的参数。</p>
<p>程序员经常会自嘲日常复制粘贴，但是在编写涉及到密码学的代码时，一定要<strong>谨慎处理</strong>！盲目地从 Internet 复制/粘贴代码或遵循博客中的示例可能会导致安全问题；曾经安全的代码、算法或者最佳实践，随着时间的推移也可能变得不再安全。</p>
<p>本系列文章的后续部分，会分别介绍上述密码学概念，并使用 Python 演示其用法，其他语言的写法网上也很容易找到。</p>
]]></content></entry><entry><title type="html">「转」仙马赛记——我又 PB 了</title><link href="https://thiscute.world/posts/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/"/><id>https://thiscute.world/posts/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/</id><author><name>ryan4yin</name></author><published>2022-02-26T17:44:00+08:00</published><updated>2022-02-26T17:44:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文转载自朋友写的 <a href="https://github.com/Likenttt/a-coder-learns-to-run-faster" target="_blank" rel="noopener noreffer">写给优秀程序员看的马拉松指南🏃 - Chuanyi</a>，读下来感觉写得超棒超正能量，征得他同意后转载过来分享下嘿嘿~</p>
</blockquote>
<blockquote>
<p>文中术语：PB(Personal Best) PW(Personal Worst) BQ(Boston Qualify)</p>
</blockquote>
<p>4 月 11 日，气温 16-19 度，东风。前两天看预报，说可能会有雷阵雨，当天看预报，雷阵雨又延后到了下午两点多，真是天公作美啊。早上八点气温非常舒适，我预感到我又要 PB 了。</p>
<p>今年仙马的路线非常平稳，起伏不到三十米。正是农历草长莺飞二月天，沿途春意盎然，令人心情愉悦。只是十公里处的折返点非常恼人，拐弯后跑出几十米就立刻折返再次拐弯，减速到 0 并再次加速浪费了数秒。我知道此举是为了凑距离，但是完全可以取消这个折返点，延长终点。路线上的这个凸起，不禁让我联想到 Ph.D 的使命。</p>
<figure><img src="/images/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/the-illustrated-guide-to-a-phd1.webp"/><figcaption>
            <h4>一名博士的使命</h4>
        </figcaption>
</figure>

<p>仙马四年，声名鹊起，一路摘得铜牌、银牌、金牌，今年又被“世界田径“正式列为标牌赛事，这些年出圈的努力和成果都蕴含在这个尖尖上了，我如此解读，组委会应该没有意见吧。</p>
<p>4 月 11 日早上，东风三级，起步向东，有些逆风，不利。吹面不寒杨柳风，逆风带来了凉爽，一路汗水都被吹干，全身上下始终都保持着干燥舒适。 第一公里计划是五分配，但是太过于兴奋，有些失控，但仍然压着 <strong>440</strong>；后五公里状态来临，逐渐将配速提到并保持在 <strong>430</strong>；六公里多迎来一个南北走向的下坡，借着势能的释放，配速拉到  <strong>410</strong> 以内。由南向北，春风拂面，夹道樱花，落英缤纷，我踩着碳板，好像踏着粉色的云霞。此时手表却一直在耳机里提醒我配速过高，机器终归是无情的，不懂风月，难知我心；七到十六公里折返点终于开始顺风，此时我稳定了 <strong>4:25</strong> 上下配速，喝了两次水，感觉还不错，并没有什么痛苦。十二公里，为了防止临近终点力量不足，我掏出一个柠檬味能量胶，迅速挤在嘴里，并在后面的水站取了一杯水。到了十三公里外已经能看见折返的第一梯队了；十六公里折返开始一个长达三公里的缓坡，中途听见一位大哥在和同伴谈论后面如何如何难跑。以我的状态看来，我不以为然，缓坡没让我失速太多。十九公里路过我的母校北门，门口有我校传统艺能舞龙舞狮，不过PB 目标不允许我驻足拍一张，有些遗憾；越跑越欢，转眼二十公里，前方是熟悉的校友团服，追上前去看，是张书记，打了招呼后，我便全力冲刺，最终成绩  <strong>133</strong>，意料之外，情理之中，冬天堆有氧的效果体现了。</p>
<p>青春仙林，大爱仙马。17 年首届，门外汉，门外看；18年入门，陈子豪（2016 年南京市大学生运动会 1500 米冠军<a href="https://www.bilibili.com/video/BV1SW41137Ai" target="_blank" rel="noopener noreffer">田径小霸王2016年南京市运会1500m一骑绝尘！</a>）带我们在仙林校区开始练，一圈刚好就是 5km 的绝佳跑场。19 年终于参加了我的第一次仙马，去年仙马因疫情停办一年，时隔一年后再次回归。故地重游，取得 PB，这段仙马记忆永远不会斑驳。</p>
<figure><img src="/images/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/2021-xianlin-half-marathon-report.webp"/><figcaption>
            <h4>仙马成绩证书</h4>
        </figcaption>
</figure>

<p>第七场半程了, 成绩一路提升，156 =&gt; 149 =&gt; 147 =&gt; null =&gt; 157 =&gt; 138 =&gt; 133，每次的进步都会令我无比激动。</p>
<p>生活好似一个湖泊，平水如鉴，岁月静好，固然优雅；但不流动的水是容易腐败的，需要一些外来的扰动，狂风骤雨之下，浊浪翻滚，却也注入了全新的生命力。每次 PB 都是我对这平静生活狂风暴雨一般的拷问，我的生命力不应该只局限在钢筋水泥之间。</p>
]]></content></entry><entry><title type="html">「转」MIRT出征广马——首次摸到330的边儿</title><link href="https://thiscute.world/posts/likenttt-2020-12-13-guangzhou-marathon-3_30_15/"/><id>https://thiscute.world/posts/likenttt-2020-12-13-guangzhou-marathon-3_30_15/</id><author><name>ryan4yin</name></author><published>2022-02-26T16:59:00+08:00</published><updated>2022-02-26T16:59:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文转载自朋友写的 <a href="https://github.com/Likenttt/a-coder-learns-to-run-faster" target="_blank" rel="noopener noreffer">写给优秀程序员看的马拉松指南🏃 - Chuanyi</a>，读下来感觉写得超棒超正能量，征得他同意后转载过来分享下嘿嘿~</p>
</blockquote>
<blockquote>
<p>本文所描述的广州马拉松赛事时间为 2020-12-13</p>
</blockquote>
<blockquote>
<p>文中术语：PB(Personal Best) PW(Personal Worst) BQ(Boston Qualify)</p>
</blockquote>
<h2 id="赛前计划" class="headerLink">
    <a href="#%e8%b5%9b%e5%89%8d%e8%ae%a1%e5%88%92" class="header-mark"></a>赛前计划</h2><p>目标成绩：3:37</p>
<p>平均配速：5:08</p>
<p>前21km  5:13 加减 5s</p>
<p>后21km  5:03 加减 5s</p>
<p>实际：3:30:15</p>
<h2 id="补给" class="headerLink">
    <a href="#%e8%a1%a5%e7%bb%99" class="header-mark"></a>补给</h2><p>能量胶6支 绿灰绿灰黄红</p>
<table>
<thead>
<tr>
<th style="text-align:center">服用时机</th>
<th style="text-align:center">颜色</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">赛前5分钟</td>
<td style="text-align:center">绿</td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">灰</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">绿</td>
</tr>
<tr>
<td style="text-align:center">30</td>
<td style="text-align:center">灰</td>
</tr>
<tr>
<td style="text-align:center">35</td>
<td style="text-align:center">黄</td>
</tr>
<tr>
<td style="text-align:center">40</td>
<td style="text-align:center">红</td>
</tr>
</tbody>
</table>
<h2 id="赛中简记" class="headerLink">
    <a href="#%e8%b5%9b%e4%b8%ad%e7%ae%80%e8%ae%b0" class="header-mark"></a>赛中简记</h2><p>我和兴勇师兄一起从 C 区出发，按照 500 配速跑，观察状态。</p>
<p>九公里处追上旦哥，旦哥此次担任 345 Pacer ，赛前他向我们许诺，如果能追上他就能摸一摸他的光头。说实话，我对这颗光头是垂涎已久，心想这是罕有的机会，舍我其谁。当我远远地望见飘动的气球时，我就忍不住兴奋的呼喊旦哥，渐渐距离迫近到数米，旦哥心照不宣地兑现承诺，主动伸过他的头，让我摸。紧实的光头满是汗水，很滑，竟没有一丝头发，既不扎手也没有阻滞感，像极了一颗剥了壳的鸡蛋，我一个程序员也不禁为之动容，设计师（旦哥是一名声音设计师）这么伤头发吗，幸亏我没入这行。师兄决意一路跟着旦哥，我遂和他分别，去追赶 330 兔子，配速始终稳定在 450～500。</p>
<p>此后至 38km 之间配速稳定在这个区间里，看看风景，胡思乱想。猎德大桥是一个不小的挑战，迂回冲坡上引桥，下桥减速绕弯弯，起伏之间容易跑崩，但我始终平稳。下了桥是一个超长的折返，双向车道被绿化带切开，木棉（也许是合欢）一字排开，树干跟保龄球一样臃肿粗壮，草地上洒满了粉的花，白的穗，这南国的冬天竟然好似江南的樱花季。去程左前方已经稀稀落落地有人折回，能拉开这么多距离，是精英选手无疑了，他们跑姿大多都很美观，服装、配件、摆臂、踏步令我欣赏了好一阵。但是也有一些跑者，跑姿不那么具有观赏性的，用力过度，姿势僵硬，力量运用地不太经济，近似一种暴力美学了，我认为他们中有一些人只是暂时领先而已。后来我也折返了，此时再往左前方看，人群开始密集了起来，这种视角仿佛和原来的自己打了个照面。目光数次和几个聚集的配速员集团相遇，我试图在人群中分辨出我的队友们，却始终搜索无获，我数度怀疑是不是我已经走神儿错过了他们。21km 附近几个隧道也是不小的挑战，U型隧道起伏大，下坡要适当利用势能但也要避免心率过高，上坡要适当减速增加抓地力，地面湿滑，摩擦系数减小，要防止滑倒。过了半程以后，广州塔近在咫尺，仰之弥高，我的精神还很轻松，决定钻之弥坚。</p>
<p>今天是国家公祭日，十点，脑子里想到南京城此时应该鸣笛的，不禁热泪盈眶，随后心中默哀了一分多钟。昭昭前事，惕惕后人。永矢弗谖，祈愿和平。</p>
<p>天气预报显示今日气温在 21～22 度，但湿度较大，体感温度高于 22 度。好在穿的是背心，体表散热面积大，心率始终控制在 175 以下。每逢水站喝一小杯水，每五公里吃两片盐丸，按着计划吃能量胶。得益于以上种种努力，前 38 公里都还轻松，甚至游刃有余。但是第 39 公里我开始感到疲惫，感到厌倦，看看手表，发现心率已经到达 189，心下想这是终点前跑崩的前兆啊。一个多月前无锡马拉松折戟的经历还令我心有余悸。第 39 和 40 公里分别跑出了 521 和 523 的配速，心里很慌。到达水站后，再度补充盐丸和能量胶，并不断给自己做心里建设工作：这是难得的机遇，跑团南下首秀，集团给了莫大支持，跑团组委会也做了大量筹备；年初 PB(Personal Best)，年尾 PW(Personal Worst)，有点虎头蛇尾，接下来，坚持鏖战，后悔几天，放弃躺倒，懊悔半年。吃完最后一支柠檬味的能量胶，喝饱了水，重新出发。最后两公里跑回 451 配速，安全完赛并 PB。冲过终点，顿时感到一种超然🤯的轻快，广州是一座充满希望的城市！不过差 15 秒就能达到广马的 BQ(Boston Qualify)，仍然有一丝遗憾。但无论如何，取得这样的成绩我已经很满意了。</p>
<p>我很庆幸，从学生时代就培养起来的长跑爱好，可以陪伴我走进职业生涯并顽强保持至今，一路上我收获一群互相砥砺支持的好朋友。易方达基金的 slogan：乐于在长跑中取得胜利，这也是广马重要收获之一。胜利，指挑战并超越过去的自己，beat yesterday。寄予希望，并不断挑战超越，这是一种痛并快乐着的幸福。长跑如此，生活职业亦如是。</p>
<h3 id="技术总结" class="headerLink">
    <a href="#%e6%8a%80%e6%9c%af%e6%80%bb%e7%bb%93" class="header-mark"></a>技术总结</h3><ol>
<li>广马当天高达二十多摄氏度，通常来说，这样的温度并不特别友好，无疑，这丰富了我高温作战的经验。及时补给，盐丸和能量胶，如果天热尤其要补水和盐丸。后来和旦哥复盘，我抱怨道中途补充了九次水，后面几乎逢水站必停。旦哥说：如果你不补水，你怎么保证后面不会崩呢？我恍然大悟，吃到第个三馒头饱了，功劳绝不只是第三个馒头的，前两个馒头亦是关键。</li>
<li>预先规划好时间和配速。根据目的估算并严格执行。如果是跑成绩，不要高估，避免过度透支能力，也不要低估，一直躺在舒适的成绩上。</li>
<li>烟雾弹还是要放的，这是赛前乐趣所在，烟雾弹放出去了，进可凡学，退可务实。</li>
<li>训练需要注意提高体能和心理承受阈值。体能耗尽，其后是心有余而力不足；心态崩溃，无心再战，先前努力便俱付东流。</li>
</ol>
]]></content></entry><entry><title type="html">Linux/Windows/MacOSX 系统常用命令集锦</title><link href="https://thiscute.world/posts/common-commands-for-various-operating-systems/"/><id>https://thiscute.world/posts/common-commands-for-various-operating-systems/</id><author><name>ryan4yin</name></author><published>2022-02-13T16:09:00+08:00</published><updated>2022-02-13T16:09:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，只会列出我自己容易忘掉的命令，方便查阅。</p>
</blockquote>
<blockquote>
<p>内容比较多，适合当参考手册用。可能不太适合从头读到尾&hellip;</p>
</blockquote>
<blockquote>
<p>本文主要介绍 Linux 命令，顺带介绍下 Windows/MacOSX.</p>
</blockquote>
<h2 id="一linux" class="headerLink">
    <a href="#%e4%b8%80linux" class="header-mark"></a>一、Linux</h2><h3 id="1-后台运行" class="headerLink">
    <a href="#1-%e5%90%8e%e5%8f%b0%e8%bf%90%e8%a1%8c" class="header-mark"></a>1. 后台运行</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 1. 后台运行命令</span>
</span></span><span class="line"><span class="cl">nohup python xxx.py <span class="p">&amp;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以使用 tmux，tmux 提供的 session 功能比 nohup 更好用，后面会介绍 tmux</p>
<h3 id="2-查找替换-sedawk" class="headerLink">
    <a href="#2-%e6%9f%a5%e6%89%be%e6%9b%bf%e6%8d%a2-sedawk" class="header-mark"></a>2. 查找替换 sed/awk</h3><p>sed 常用命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">## 只在目录中所有的 .py 和 .dart 文件中递归搜索字符&#34;main()&#34;</span>
</span></span><span class="line"><span class="cl">grep <span class="s2">&#34;main()&#34;</span> . -r --include *.<span class="o">{</span>py, dart<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 在 .js 文件中搜索关键字 xxxxx 并仅展示关键字前后 40 个字符（用在 .js 等被压缩过的文本文件上很有效）</span>
</span></span><span class="line"><span class="cl">cat *.js <span class="p">|</span> grep -o -P <span class="s1">&#39;.{0,40}xxxxx.{0,40}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 1） 全文搜索并替换</span>
</span></span><span class="line"><span class="cl"><span class="c1">### -i --in-place 原地替换（修改原文件）</span>
</span></span><span class="line"><span class="cl"><span class="c1">### -i=SUFFIX  替换后的文件添加 SUFFIX 这个后缀</span>
</span></span><span class="line"><span class="cl"><span class="c1">### -r  使用拓展的正则表达式，注意此正则不支持 \d\w\s 等语法，必须使用 [0-9] [a-zA-Z] 等来替换！！！</span>
</span></span><span class="line"><span class="cl">sed -ri <span class="s2">&#34;s/pattern_str/replace_str/g&#34;</span> <span class="sb">`</span>grep <span class="s2">&#34;key_pattern&#34;</span> <span class="s1">&#39;path_pattern&#39;</span> -rl<span class="sb">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 2）文件名搜索，替换文件内容</span>
</span></span><span class="line"><span class="cl">sed -ri <span class="s2">&#34;s/pattern_str/replace_str/g&#34;</span> <span class="sb">`</span>find . -name <span class="s2">&#34;pattern&#34;</span><span class="sb">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 3）批量转换大小写</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将当前文件夹内，所有的 gitlab URL 都转换成小写</span>
</span></span><span class="line"><span class="cl"><span class="c1"># \L 转小写  \U 转大写</span>
</span></span><span class="line"><span class="cl">sed -ri <span class="s1">&#39;s@http://GITLAB.*.git@\L&amp;@g&#39;</span> <span class="sb">`</span>find . -name pubspec*<span class="sb">`</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 4) 拷贝文件，并且保持文件夹结构（--parents 表示保持文件夹结构）</span>
</span></span><span class="line"><span class="cl">cp --parents <span class="sb">`</span>find &lt;src-dir&gt; -name *.py<span class="sb">`</span> &lt;dst-dir&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>awk 用于按列处理文本，它比 sed 更强大更复杂，常用命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">## 1. 单独选出第 1 列的文本</span>
</span></span><span class="line"><span class="cl">cat xxx.txt <span class="p">|</span> awk -F <span class="s1">&#39;{print $1}&#39;</span> <span class="p">|</span> head
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 2. 可以使用 -F 指定分隔符，打印出多列</span>
</span></span><span class="line"><span class="cl">awk -F <span class="s1">&#39;,&#39;</span> <span class="s1">&#39;{print $1,$2}&#39;</span><span class="p">|</span> head 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 3. 打印出行数</span>
</span></span><span class="line"><span class="cl">cat log_test <span class="p">|</span> awk <span class="s1">&#39;{print NR,$1}&#39;</span> <span class="p">|</span> more
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 4. if 判断语句</span>
</span></span><span class="line"><span class="cl">cat log_test <span class="p">|</span> awk <span class="s1">&#39;{if($11&gt;300) print($1,$11)}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat log_test <span class="p">|</span> awk <span class="s1">&#39;{print $11}&#39;</span> <span class="p">|</span> sort -n <span class="p">|</span> uniq -c  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 求和</span>
</span></span><span class="line"><span class="cl">cat data<span class="p">|</span>awk <span class="s1">&#39;{sum+=$1} END {print &#34;Sum = &#34;, sum}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 求平均</span>
</span></span><span class="line"><span class="cl">cat data<span class="p">|</span>awk <span class="s1">&#39;{sum+=$1} END {print &#34;Average = &#34;, sum/NR}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 求最大值</span>
</span></span><span class="line"><span class="cl">cat data<span class="p">|</span>awk <span class="s1">&#39;BEGIN {max = 0} {if ($1&gt;max) max=$1 fi} END {print &#34;Max=&#34;, max}&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 求最小值（min的初始值设置一个超大数即可）</span>
</span></span><span class="line"><span class="cl">awk <span class="s1">&#39;BEGIN {min = 1999999} {if ($1&lt;min) min=$1 fi} END {print &#34;Min=&#34;, min}&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-压缩相关" class="headerLink">
    <a href="#3-%e5%8e%8b%e7%bc%a9%e7%9b%b8%e5%85%b3" class="header-mark"></a>3. 压缩相关</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 直接 cat 压缩文件的内容</span>
</span></span><span class="line"><span class="cl">zcat xxx.gz <span class="p">|</span> more  <span class="c1"># gzip</span>
</span></span><span class="line"><span class="cl">xzcat xxx.xz <span class="p">|</span> more  <span class="c1"># xz</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">tar -axvf xxx.tar.*  <span class="c1"># 通过后缀识别压缩格式，智能解压</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>更多命令参见 <a href="https://thiscute.world/posts/compression-related-instructions-under-linux/" target="_blank" rel="noopener noreffer">常见压缩格式的区别，及 Linux 下的压缩相关指令</a></p>
<h3 id="4-文件拷贝与同步" class="headerLink">
    <a href="#4-%e6%96%87%e4%bb%b6%e6%8b%b7%e8%b4%9d%e4%b8%8e%e5%90%8c%e6%ad%a5" class="header-mark"></a>4. 文件拷贝与同步</h3><p>各种 Linux 发行版都自带 scp/ssh，这两个工具功能简单，一般够用。</p>
<p>另外就是更强大也更复杂的 rsync，部分发行版会自带 rsync。</p>
<p>下面分别介绍下。</p>
<h4 id="1-sshscp" class="headerLink">
    <a href="#1-sshscp" class="header-mark"></a>1. ssh/scp</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 如果使用 ssh 命令进行文件传输，可安装 pv 命令查看传输速度（pipeviewer）</span>
</span></span><span class="line"><span class="cl"><span class="c1">## ubuntu</span>
</span></span><span class="line"><span class="cl">sudo apt-get install pv
</span></span><span class="line"><span class="cl"><span class="c1">##  centos</span>
</span></span><span class="line"><span class="cl">sudo yum install epel-release
</span></span><span class="line"><span class="cl">sudo yum install pv
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 1)从本地上传到服务器</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">### 使用 ssh 的好处是流式传输不会占用目标机器的存储空间，适合传输可能引起空间不足的大文件，并在目标机器上实时处理该文件。</span>
</span></span><span class="line"><span class="cl">cat &lt;filename&gt; <span class="p">|</span> pv <span class="p">|</span> ssh &lt;user&gt;@&lt;host&gt; -p <span class="m">22</span> <span class="s2">&#34;cat - &gt; &lt;new-filename&gt;&#34;</span>
</span></span><span class="line"><span class="cl">tar cz &lt;filename or foldername or glob&gt; <span class="p">|</span> pv <span class="p">|</span> ssh &lt;user&gt;@&lt;host&gt; -p <span class="m">22</span> <span class="s2">&#34;tar xz&#34;</span>  <span class="c1"># 压缩传输</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## scp 命令比 ssh 命令更简洁（但是不适合用于传文件夹，它会破坏文件的权限设置，把文件夹弄得一团糟）</span>
</span></span><span class="line"><span class="cl">scp -P <span class="m">22</span> &lt;filename&gt; &lt;user&gt;@&lt;host&gt;:&lt;folder-name or filename&gt;  <span class="c1"># 通过 scp 传输，传文件夹时记得添加 -r 参数（recursive）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 2) 从服务器下载到本地</span>
</span></span><span class="line"><span class="cl">ssh &lt;user&gt;@&lt;host&gt; -p <span class="m">22</span> <span class="s2">&#34;tar cz &lt;filename or foldername or glob&gt;&#34;</span> <span class="p">|</span> pv <span class="p">|</span> tar xz  <span class="c1"># 压缩传输</span>
</span></span><span class="line"><span class="cl">scp -P <span class="m">22</span> &lt;user&gt;@&lt;host&gt;:&lt;folder-name or filename&gt; &lt;filename&gt;  <span class="c1"># 通过 scp 传输，传文件夹时记得添加 -r 参数（recursive）</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2-rsync" class="headerLink">
    <a href="#2-rsync" class="header-mark"></a>2. rsync</h4><p>rsync 的功能其实和前面的 scp/(tar+ssh) 是一样的，将文件从一个地方拷贝到另一个地方。
区别在于它只做增量同步，在多次拷贝文件时，只拷贝（同步）修改过的部分，很多场景下可以大大加快拷贝/备份速度。</p>
<p>rsync 的常用命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 将一个文件夹归档、压缩，并通过 ssh 协议（默认）同步到另一个地方</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -a, --archive   # 归档模式，保留文件的所有元信息，等同于 `-rlptgoD`</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -r, --recursive # 递归复制文件夹，`-a` 隐含了这个参数，通常都用 -a。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -v, --verbose   # 输出详细信息</span>
</span></span><span class="line"><span class="cl"><span class="c1"># --progress      # 显示传输进度</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -z, --compress  # 传输文件时进行压缩</span>
</span></span><span class="line"><span class="cl">rsync -avz --progress src host:dest
</span></span><span class="line"><span class="cl">rsync -avz --progress -e <span class="s2">&#34;ssh -p225&#34;</span> /path/src user@host:dest  <span class="c1"># 使用非默认的 ssh 端口进行传输</span>
</span></span><span class="line"><span class="cl">rsync -avz --progress -e <span class="s2">&#34;ssh -i id_xxx&#34;</span> /path/src user@host:dest  <span class="c1"># 使用指定的私钥连接 ssh 服务端，其他各种 ssh 参数都可以在这里指定</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># --exclude 排除掉某些不需要的文件(夹)</span>
</span></span><span class="line"><span class="cl">rsync -avz --progress --exclude <span class="s2">&#34;foor/bar&#34;</span> src user@host:dest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 有时我们希望在同步数据时修改文件的 user/group</span>
</span></span><span class="line"><span class="cl"><span class="c1"># --chown    # 设置文件的 user:group，必须与 `-og`/`--owner --group` 同时使用！（`-a` 隐含了 `-og`） </span>
</span></span><span class="line"><span class="cl">rsync -avz --progress --chown<span class="o">=</span>root:root src user@host:dest  <span class="c1"># 传输时修改 user/group 为 root</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 详细说明 src 和 dest 的位置</span>
</span></span><span class="line"><span class="cl">rsync -avz --progress path/src user@host:/tmp  <span class="c1"># 将 src 拷贝到远程主机的 /tmp 中（得到 /tmp/src）</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 注意 src 结尾有 /</span>
</span></span><span class="line"><span class="cl">rsync -avz --progress path/src/ user@host:/tmp/src  <span class="c1"># 将 src 目录中的文件拷贝到远程主机的 /tmp/src 目录中（同样得到 /tmp/src）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 有时候我们在传输文件时不希望保留文件的元信息</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># rsync 默认不会删除 dest 中多余的文件，使用 --delete 可让 rsync 删除这部分无关的文件</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 对 src 文件夹进行完全镜像，保证两个文件夹的内容一模一样，不多不少</span>
</span></span><span class="line"><span class="cl">rsync -avz --progress --delete src user@host:dest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 也可以使用 --ignore-existing 让 rsync 忽略掉 dest 已经存在的文件。就是只同步新增的文件。</span>
</span></span><span class="line"><span class="cl">rsync -avz --progress --ignore-existing src user@host:dest
</span></span></code></pre></td></tr></table>
</div>
</div><p>另外也有使用双冒号 <code>::</code> 分隔的传输命令，这种命令使用 <code>rsync</code> 协议进行传输，要求目标主机启用 rsync-daemon。用得会比 ssh 少一些，暂时不做介绍。</p>
<p>rsync 详细文档参见 <a href="https://rsync.samba.org/documentation.html" target="_blank" rel="noopener noreffer">https://rsync.samba.org/documentation.html</a>，或者 <code>man rsync</code>.</p>
<h3 id="5-tmux" class="headerLink">
    <a href="#5-tmux" class="header-mark"></a>5. Tmux</h3><ol>
<li>输入 <code>tmux</code> 启动一个 tmux 会话。（或者用 <code>tmux new -s &lt;session-name&gt;</code> 启动一个命名会话）</li>
<li>输入 <code>python xxx.py</code>，python 进程开始运行。</li>
<li>按快捷键 <code>ctrl+b</code>，然后再按一下 <code>d</code> 脱离(detatch)当前会话。此时 python 进程进入后台运行，关闭当前终端对 python 进程没有影响。</li>
<li>输入 <code>tmux ls</code> 可以查看当前正在后台运行的会话。（命名会话会显示名称，否则只显示 id）</li>
<li>通过 <code>tmux attach -t &lt;session-name/id&gt;</code> 重新接入后台会话。
<ol>
<li>缩写 <code>tmux a -t &lt;session&gt;</code></li>
</ol>
</li>
<li>或者通过 <code>tmux kill-session -t &lt;session-name/id&gt;</code> 杀死一个后台会话。</li>
</ol>
<p>常用快捷键：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># prefix 表示 `ctrl`+`b`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># pane 的切分与选择</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix &#34; </span><span class="w"> </span><span class="c"># 在下方新建一个 pane</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix % </span><span class="w"> </span><span class="c"># 在右侧新建一个 pane</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix `方向键` </span><span class="w"> </span><span class="c"># 光标移动到指定方向的 pane 中</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 使用方向键滚动窗口内容</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix [ </span><span class="w"> </span><span class="c"># 进入翻页模式，可使用 page up/down，或者方向键来浏览 pane 的内容</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 使用鼠标滚轮来滚动窗口内容（也可以把此命令添加到 `~/.tmux.conf` 中使它永久生效）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix `:` 然后输入 `set-window-option -g mode-mouse on`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># （调整 pane 大小）将当前的 pane 向给定的方向扩容 5 行或者 5 列</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 按住 ALT 时快速重复敲击「方向键」，能快速调整，否则就得从 prefix 开始重新输入</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix `Alt` + `方向键`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 将当前窗格全屏显示，第二次使用此命令，会将窗格还原</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix z</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># 交换 pane 的位置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix { </span><span class="w"> </span><span class="c"># 当前窗格与上一个窗格交换位置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix } </span><span class="w"> </span><span class="c"># 当前窗格与下一个窗格交换位置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># session 相关操作</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix s </span><span class="w"> </span><span class="c"># 查看 session 列表，并通过方向键选择 session</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix `number` </span><span class="w"> </span><span class="c"># 通过数字标签选择 session</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># window 相关操作（关系：每个 session 可以包含多个 window，每个 window 里面又可以有多个 pane）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix c</span><span class="w"> </span><span class="c"># 新建 window</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">prefix w</span><span class="w"> </span><span class="c"># 通过数字标签选择 window</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>参考文档：</p>
<ul>
<li><a href="https://github.com/tmux/tmux/wiki/Getting-Started" target="_blank" rel="noopener noreffer">https://github.com/tmux/tmux/wiki/Getting-Started</a></li>
<li><a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html" target="_blank" rel="noopener noreffer">https://www.ruanyifeng.com/blog/2019/10/tmux.html</a></li>
</ul>
<h3 id="6-bash-shell-基础" class="headerLink">
    <a href="#6-bash-shell-%e5%9f%ba%e7%a1%80" class="header-mark"></a>6. Bash Shell 基础</h3><p>目标：能使用 shell 编写 10 行以内的脚本。更长的脚本可以使用 Python 编写，就没必要折腾 Shell 了。</p>
<h4 id="1-for-循环" class="headerLink">
    <a href="#1-for-%e5%be%aa%e7%8e%af" class="header-mark"></a>1. For 循环</h4><p>单行 for 循环，有时候很有用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 数字枚举</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">1</span> 5<span class="k">)</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>  <span class="c1"># sh/bash 都支持</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> i in <span class="o">{</span>1..5<span class="o">}</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$i</span><span class="p">;</span> <span class="k">done</span>  <span class="c1"># sh 不支持此语法</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 文件枚举，可使用 glob 语法进行文件匹配</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> f in *<span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$f</span><span class="p">;</span> <span class="k">done</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> f in /etc/*.py<span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$f</span><span class="p">;</span> <span class="k">done</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 find 进行文件枚举</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> f in <span class="k">$(</span>find . -name *.py<span class="k">)</span><span class="p">;</span> <span class="k">do</span> <span class="nb">echo</span> <span class="nv">$f</span><span class="p">;</span> <span class="k">done</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>单行 for 循环加几个换行就得到多行 for 循环，格式如下：写脚本用得到，不过更建议用 python:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">for</span> i in <span class="k">$(</span>seq <span class="m">1</span> 5<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="k">do</span> 
</span></span><span class="line"><span class="cl">  <span class="nb">echo</span> <span class="nv">$i</span>
</span></span><span class="line"><span class="cl"><span class="k">done</span>  <span class="c1"># sh/bash 都支持</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2-if-语句" class="headerLink">
    <a href="#2-if-%e8%af%ad%e5%8f%a5" class="header-mark"></a>2. if 语句</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 单行 if 语句</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> <span class="nb">true</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span> &lt;command&gt;<span class="p">;</span> <span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#  if else</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> expression <span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="k">then</span>
</span></span><span class="line"><span class="cl">   Statement<span class="o">(</span>s<span class="o">)</span> to be executed <span class="k">if</span> expression is <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="k">else</span>
</span></span><span class="line"><span class="cl">   Statement<span class="o">(</span>s<span class="o">)</span> to be executed <span class="k">if</span> expression is not <span class="nb">true</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="3-shell脚本中的set指令比如set--x-和-set--e" class="headerLink">
    <a href="#3-shell%e8%84%9a%e6%9c%ac%e4%b8%ad%e7%9a%84set%e6%8c%87%e4%bb%a4%e6%af%94%e5%a6%82set--x-%e5%92%8c-set--e" class="header-mark"></a>3. Shell脚本中的set指令，比如set -x 和 set -e</h4><p>参见：<a href="https://www.cnblogs.com/robinunix/p/11635560.html" target="_blank" rel="noopener noreffer">Shell脚本中的set指令，比如set -x 和 set -e</a></p>
<h4 id="4-其他资料" class="headerLink">
    <a href="#4-%e5%85%b6%e4%bb%96%e8%b5%84%e6%96%99" class="header-mark"></a>4. 其他资料</h4><ul>
<li><a href="https://github.com/mritd/shell_scripts" target="_blank" rel="noopener noreffer">shell_scripts</a>: 实用 shell 小脚本</li>
</ul>
<h3 id="socket-commands" class="headerLink">
    <a href="#socket-commands" class="header-mark"></a>7. socket 连接查询 - ss/netcat/lsof</h3><p>查看 socket 信息可以帮我们回答下列问题：</p>
<ol>
<li>我的程序是不是真的在监听我指定的端口？</li>
<li>我的程序是在监听 127.0.0.1（本机），还是在监听 0.0.0.0（整个网络）</li>
<li>进程们分别在使用哪些端口？</li>
<li>我的连接数是否达到了上限？</li>
</ol>
<blockquote>
<p>现在较新版本的 Ubuntu 和 CentOS 都已经使用 <code>iproute2</code> 替换掉了 <code>net-tools</code>，
如果你还需要使用陈旧的 <code>route</code> <code>netstat</code> 等命令，需要手动安装 <code>net-tools</code>。</p>
</blockquote>
<p>我们可以使用 ss(socket statistics) 或者 netstat 命令来查看 socket 信息:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看 socket 连接的统计信息</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 主要统计处于各种状态的 tcp sockets 数量，以及其他 sockets 的统计信息</span>
</span></span><span class="line"><span class="cl">ss --summary
</span></span><span class="line"><span class="cl">ss -s  <span class="c1"># 缩写</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看哪个进程在监听 80 端口</span>
</span></span><span class="line"><span class="cl"><span class="c1"># --listening 列出所有正在被监听的 socket</span>
</span></span><span class="line"><span class="cl"><span class="c1"># --processes 显示出每个 socket 对应的 process 名称和 pid</span>
</span></span><span class="line"><span class="cl"><span class="c1"># --numeric 直接打印数字端口号（不解析协议名称）</span>
</span></span><span class="line"><span class="cl">ss --listening --processes --numeric <span class="p">|</span> grep <span class="m">80</span>
</span></span><span class="line"><span class="cl">ss -nlp <span class="p">|</span> grep <span class="m">80</span>  <span class="c1"># 缩写</span>
</span></span><span class="line"><span class="cl">ss -lp <span class="p">|</span> grep http  <span class="c1"># 解析协议名称，然后通过协议名搜索监听</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 使用过时的 netstat</span>
</span></span><span class="line"><span class="cl"><span class="c1">### -t tcp</span>
</span></span><span class="line"><span class="cl"><span class="c1">### -u udp</span>
</span></span><span class="line"><span class="cl">netstat -tunlp <span class="p">|</span> grep <span class="s2">&#34;:80&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 sshd 当前使用的端口号</span>
</span></span><span class="line"><span class="cl">ss --listening --processes <span class="p">|</span> grep sshd
</span></span><span class="line"><span class="cl"><span class="c1">## 使用过时的 netstat</span>
</span></span><span class="line"><span class="cl">netstat -tunlp <span class="p">|</span> grep &lt;pid&gt;  <span class="c1"># pid 通过 ps 命令获得</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有的 tcp sockets，包括所有的 socket 状态</span>
</span></span><span class="line"><span class="cl">ss --tcp --all
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 只列出正在 listen 的 socket</span>
</span></span><span class="line"><span class="cl">ss --listening
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有 ESTABLISHED 的 socket（默认行为）</span>
</span></span><span class="line"><span class="cl">ss
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 统计 TCP 连接数</span>
</span></span><span class="line"><span class="cl">ss <span class="p">|</span> grep ESTAB <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有 ESTABLISHED 的 socket，并且给出连接的计时器</span>
</span></span><span class="line"><span class="cl">ss --options
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看所有来自 192.168.5 的 sockets</span>
</span></span><span class="line"><span class="cl">ss dst 192.168.1.5
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看本机与服务器 192.168.1.100 建立的 sockets</span>
</span></span><span class="line"><span class="cl">ss src 192.168.1.5
</span></span></code></pre></td></tr></table>
</div>
</div><p>TCP 连接数受 Linux 文件描述符上限控制，可以通过如下方法查看已用文件句柄的数量。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 已用文件描述符数量</span>
</span></span><span class="line"><span class="cl">lsof <span class="p">|</span> wc -l
</span></span><span class="line"><span class="cl"><span class="c1"># 文件描述符上限</span>
</span></span><span class="line"><span class="cl"><span class="nb">ulimit</span> -n 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="8-其他网络相关命令" class="headerLink">
    <a href="#8-%e5%85%b6%e4%bb%96%e7%bd%91%e7%bb%9c%e7%9b%b8%e5%85%b3%e5%91%bd%e4%bb%a4" class="header-mark"></a>8. 其他网络相关命令</h3><p>主要是 iproute2 dhclient lsof 等</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看路由表</span>
</span></span><span class="line"><span class="cl">routel       <span class="c1"># 旧的 net-tools 包中的命令</span>
</span></span><span class="line"><span class="cl">ip route ls  <span class="c1"># iproute2 提供的新命令</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># DHCP，先释放旧租约，再建立新租约</span>
</span></span><span class="line"><span class="cl">sudo dhclient -r eth0 <span class="o">&amp;&amp;</span> sudo dhclient eth0
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 DHCP 租期</span>
</span></span><span class="line"><span class="cl">cat /var/lib/dhcp/dhcpd.leases
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 清理 DNS 缓存</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 1. 如果你使用的是 systemd-resolve，使用此命令</span>
</span></span><span class="line"><span class="cl">sudo systemd-resolve --flush-caches
</span></span><span class="line"><span class="cl">sudo systemd-resolve --statistics  <span class="c1"># 查看缓存状态</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 2. 如果使用的是 dnsmasq，使用此命令</span>
</span></span><span class="line"><span class="cl">sudo systemctl restart dnsmasq
</span></span><span class="line"><span class="cl">sudo killall -HUP dnsmasq  <span class="c1"># 直接发送 HUP 信号也可以</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="9-容器网络诊断---nsenter" class="headerLink">
    <a href="#9-%e5%ae%b9%e5%99%a8%e7%bd%91%e7%bb%9c%e8%af%8a%e6%96%ad---nsenter" class="header-mark"></a>9. 容器网络诊断 - nsenter</h3><p>Docker 容器有自己的 namespace，直接通过宿主机的 ss 命令是查看不到容器的 socket 信息的。</p>
<p>比较直观的方法是直接通过 <code>docker exec</code> 在容器中通过 ss 命令。但是这要求容器中必须自带 ss 等程序，有的精简镜像可能不会自带它。</p>
<p>通过 <code>nsenter</code> 可以直接进入到容器的指定 namespace 中，这样就能直接查询容器网络相关的信息了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker ps <span class="p">|</span> grep xxx
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="nv">CONTAINER</span><span class="o">=</span>xxx  <span class="c1"># 容器名称或 ID</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 查询到容器对应的 pid</span>
</span></span><span class="line"><span class="cl"><span class="nv">PID</span><span class="o">=</span><span class="k">$(</span>docker inspect --format <span class="o">{{</span>.State.Pid<span class="o">}}</span> <span class="nv">$CONTAINER</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. nsenter 通过 pid 进入容器的 network namespace，执行 ss 查看 socket 信息</span>
</span></span><span class="line"><span class="cl">nsenter --target <span class="nv">$PID</span> --net ss -s
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>nsenter</code> 这个工具貌似是 docker 自带的或者是系统内置命令，只要装了 docker，ubuntu/centos 都可以直接使用这个命令。</p>
<blockquote>
<p>nsenter 是一个进入名字空间的工具，功能不仅仅局限在「网络诊断」，还有更多用法。</p>
</blockquote>
<h3 id="10-用户与群组" class="headerLink">
    <a href="#10-%e7%94%a8%e6%88%b7%e4%b8%8e%e7%be%a4%e7%bb%84" class="header-mark"></a>10. 用户与群组</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1">## 查看用户属于哪些群组</span>
</span></span><span class="line"><span class="cl">groups &lt;user-name&gt;  <span class="c1"># 方法一</span>
</span></span><span class="line"><span class="cl">id &lt;username&gt;       <span class="c1"># 方法二，它会额外列出 gid/uid</span>
</span></span><span class="line"><span class="cl">cat /etc/group <span class="p">|</span> grep &lt;user-name&gt;  <span class="c1"># 方法三，直接查看配置</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 查看群组中有哪些用户，第一列是群组，最后一列是用户名</span>
</span></span><span class="line"><span class="cl">cat /etc/group <span class="p">|</span> grep &lt;group-name&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二powershell" class="headerLink">
    <a href="#%e4%ba%8cpowershell" class="header-mark"></a>二、Powershell</h2><p>Powershell 是微软推出的一款新一代 shell，它的特点之一是，命令都有一致的命名规则：<strong>谓词-名词</strong>，
谓词表示动作：Get/Set/Stop/Start 等，名词指示操作对象：Service/Member/ChildItem/Command 等。</p>
<p>这样的命名格式使我们可以很容易地猜测到自己需要的命令的名称。</p>
<p>为了使用方便，powershell 还提供了一些常用命令的缩写，并且添加了大量类似 Linux 命令的别名。</p>
<p>还有就是，Windows 默认不区分字母大小写，日常使用可以全部小写。</p>
<h3 id="1-实用命令" class="headerLink">
    <a href="#1-%e5%ae%9e%e7%94%a8%e5%91%bd%e4%bb%a4" class="header-mark"></a>1. 实用命令</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># 删除文件/文件夹</span>
</span></span><span class="line"><span class="cl"><span class="nb">remove-item</span> <span class="n">xxx</span>  <span class="n">-confirm</span>
</span></span><span class="line"><span class="cl"><span class="nb">ri </span><span class="n">xxx</span>  <span class="c"># 别名1</span>
</span></span><span class="line"><span class="cl"><span class="nb">rm </span><span class="n">xxx</span>  <span class="c"># 别名2</span>
</span></span><span class="line"><span class="cl"><span class="nb">rmdir </span><span class="n">xxx</span>  <span class="c"># etc...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 复制</span>
</span></span><span class="line"><span class="cl"><span class="nb">copy-item</span> <span class="n">xxx</span> <span class="n">xx</span> <span class="n">-r</span>
</span></span><span class="line"><span class="cl"><span class="nb">cp </span><span class="n">-r</span> <span class="n">xxx</span> <span class="n">xx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 显示工作目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-location</span>
</span></span><span class="line"><span class="cl"><span class="nb">gl
</span></span></span><span class="line"><span class="cl"><span class="nb">pwd
</span></span></span><span class="line"><span class="cl"><span class="nb"></span>
</span></span><span class="line"><span class="cl"><span class="c"># 切换工作目录</span>
</span></span><span class="line"><span class="cl"><span class="nb">set-location</span> <span class="n">xxx</span>
</span></span><span class="line"><span class="cl"><span class="nb">sl </span><span class="n">xxx</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd </span><span class="n">xxx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 查看环境变量</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-childitem</span> <span class="n">env</span><span class="err">:</span>
</span></span><span class="line"><span class="cl"><span class="nb">gci </span><span class="n">env</span><span class="err">:</span>
</span></span><span class="line"><span class="cl"><span class="nb">gci </span><span class="n">env</span><span class="err">:</span><span class="n">PATH</span>  <span class="c"># 查看 PATH 变量</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">$env:XXX</span><span class="p">=</span><span class="s2">&#34;value&#34;</span>   <span class="c"># 临时设置环境变量</span>
</span></span><span class="line"><span class="cl"><span class="nv">$env:Path</span> <span class="p">+=</span> <span class="s2">&#34;;SomeRandomPath&#34;</span>  <span class="c"># 临时在 Path 末尾添加新路径</span>
</span></span><span class="line"><span class="cl"><span class="c">## 以下三行命令只对 windows 有效，linux 下无效</span>
</span></span><span class="line"><span class="cl"><span class="no">[Environment]</span><span class="p">::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;XXX&#34;</span><span class="p">,</span> <span class="nv">$env:XXX</span> <span class="p">+</span> <span class="s2">&#34;;value&#34;</span><span class="p">,</span> <span class="no">[EnvironmentVariableTarget]</span><span class="p">::</span><span class="n">User</span><span class="p">)</span>  <span class="c"># 修改当前用户的环境变量（永久），只对新进程有效</span>
</span></span><span class="line"><span class="cl"><span class="no">[Environment]</span><span class="p">::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;XXX&#34;</span><span class="p">,</span> <span class="s2">&#34;value&#34;</span><span class="p">,</span> <span class="no">[EnvironmentVariableTarget]</span><span class="p">::</span><span class="n">Machine</span><span class="p">)</span>  <span class="c"># 给这台电脑设置环境变量（永久），只对新进程有效，需要管理员权限</span>
</span></span><span class="line"><span class="cl"><span class="no">[Environment]</span><span class="p">::</span><span class="n">SetEnvironmentVariable</span><span class="p">(</span><span class="s2">&#34;XXX&#34;</span><span class="p">,</span> <span class="nv">$env:XXX</span> <span class="p">+</span> <span class="s2">&#34;;value&#34;</span><span class="p">,</span> <span class="s2">&#34;User&#34;</span><span class="p">)</span>  <span class="c"># target 也可用字符串指定</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 删除文件/文件夹</span>
</span></span><span class="line"><span class="cl"><span class="nb">rm </span><span class="n">xxx</span>  <span class="c"># 删除文件夹时会进入交互界面，按提示输入就行。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 查看命名位置（类似 Linux Shell 的 which）</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-command</span> <span class="n">xxx</span>
</span></span><span class="line"><span class="cl"><span class="nb">gcm </span><span class="n">xxx</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 通过关键字查找 powershell 命令</span>
</span></span><span class="line"><span class="cl"><span class="nb">gcm </span><span class="p">|</span> <span class="nb">select-string</span> <span class="p">&lt;</span><span class="n">keyword</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 通过关键字查找 powershell 命令和环境变量中的程序，比较慢</span>
</span></span><span class="line"><span class="cl"><span class="nb">gcm </span><span class="p">*</span> <span class="p">|</span> <span class="nb">select-string</span> <span class="p">&lt;</span><span class="n">keyword</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 查看别名对应的真实命令</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-alias</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 类似 linux 的 find/ls 命令</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-childitem</span> <span class="n">-Recurse</span> <span class="n">-Include</span> <span class="p">*.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="nb">gci </span><span class="n">-r</span> <span class="n">-i</span> <span class="p">*.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 清空终端的输出</span>
</span></span><span class="line"><span class="cl"><span class="nb">clear-host</span>
</span></span><span class="line"><span class="cl"><span class="nb">clear
</span></span></span><span class="line"><span class="cl"><span class="nb"></span>
</span></span><span class="line"><span class="cl"><span class="c"># 查看文件内容</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-content</span> <span class="n">xx</span><span class="p">.</span><span class="n">py</span> <span class="p">|</span> <span class="n">more</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-content</span> <span class="n">xx</span><span class="p">.</span><span class="n">py</span> <span class="p">|</span> <span class="nb">out-host</span> <span class="n">-paging</span>
</span></span><span class="line"><span class="cl"><span class="nb">cat </span><span class="n">xx</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl"><span class="nb">gc </span><span class="n">xx</span><span class="p">.</span><span class="n">py</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 字符串搜索，不能对对象使用</span>
</span></span><span class="line"><span class="cl"><span class="c"># 类似 linux 的 grep 命令</span>
</span></span><span class="line"><span class="cl"><span class="nb">cat </span><span class="n">xxx</span><span class="p">.</span><span class="n">log</span> <span class="p">|</span> <span class="nb">select-string</span> <span class="p">&lt;</span><span class="n">pattern</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nb">gci </span><span class="n">env</span><span class="err">:</span> <span class="p">|</span> <span class="nb">out-string</span>  <span class="n">-stream</span> <span class="p">|</span> <span class="nb">select-string</span> <span class="p">&lt;</span><span class="n">pattern</span><span class="p">&gt;</span>  <span class="c"># 需要先使用 out-string 将对象转换成 string</span>
</span></span><span class="line"><span class="cl"><span class="nb">gci </span><span class="n">env</span><span class="err">:</span> <span class="p">|</span> <span class="nb">where-object</span> <span class="p">{</span><span class="nv">$_</span><span class="p">.</span><span class="n">Name</span> <span class="o">-like</span> <span class="p">&lt;</span><span class="n">pattern</span><span class="p">&gt;}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 计算输出的行数/对象个数</span>
</span></span><span class="line"><span class="cl"><span class="nb">gci </span><span class="n">env</span><span class="err">:</span> <span class="p">|</span> <span class="nb">measure-object</span>
</span></span><span class="line"><span class="cl"><span class="nb">gci </span><span class="n">env</span><span class="err">:</span> <span class="p">|</span> <span class="nb">measure </span> <span class="c"># 这是缩写</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 关机/重启</span>
</span></span><span class="line"><span class="cl"><span class="nb">stop-computer</span>
</span></span><span class="line"><span class="cl"><span class="nb">restart-computer</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># windows 计算 hash 值</span>
</span></span><span class="line"><span class="cl"><span class="c"># 功能等同于 linux 下的 sha256sum/sha1sum/sha512sum/md5sum</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-FileHash</span> <span class="n">-Path</span> <span class="p">/</span><span class="n">path</span><span class="p">/</span><span class="n">to</span><span class="p">/</span><span class="n">file</span> <span class="n">-Algorithm</span> <span class="n">SHA256</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-FileHash</span> <span class="n">-Path</span> <span class="p">/</span><span class="n">path</span><span class="p">/</span><span class="n">to</span><span class="p">/</span><span class="n">file</span> <span class="n">-Algorithm</span> <span class="n">SHA256</span>  <span class="p">|</span> <span class="nb">Format-List</span>  <span class="c"># 用 format 修改格式化效果</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># base64 编解码</span>
</span></span><span class="line"><span class="cl"><span class="no">[Convert]</span><span class="p">::</span><span class="n">ToBase64String</span><span class="p">(</span><span class="no">[Text.Encoding]</span><span class="p">::</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="s2">&#34;xxx&#34;</span><span class="p">))</span>  <span class="c"># base64 编码</span>
</span></span><span class="line"><span class="cl"><span class="no">[Text.Encoding]</span><span class="p">::</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="no">[Convert]</span><span class="p">::</span><span class="n">FromBase64String</span><span class="p">(</span><span class="s2">&#34;eHh4&#34;</span><span class="p">))</span>  <span class="c"># 解码</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>另外 windows 同样自带 ssh/scp 命令，参数也和 linux 一致</p>
<h3 id="2-进程相关命令" class="headerLink">
    <a href="#2-%e8%bf%9b%e7%a8%8b%e7%9b%b8%e5%85%b3%e5%91%bd%e4%bb%a4" class="header-mark"></a>2. 进程相关命令</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c"># 查看所有进程</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-process</span> <span class="p">|</span> <span class="n">more</span>
</span></span><span class="line"><span class="cl"><span class="nb">ps </span><span class="p">|</span> <span class="n">more</span>  <span class="c"># 别名</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 查找某进程（替代掉 tasklist）</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-process</span> <span class="n">-name</span> <span class="n">exp</span><span class="p">*,</span><span class="n">power</span><span class="p">*</span>  <span class="c"># 使用正则查找进程</span>
</span></span><span class="line"><span class="cl"><span class="nb">get-process</span> <span class="p">|</span> <span class="nb">select-string</span> <span class="p">&lt;</span><span class="n">pattern</span><span class="p">&gt;</span>  <span class="c"># 效果同上</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 通过 id 杀掉某进程（替代掉 taskkill）</span>
</span></span><span class="line"><span class="cl"><span class="c"># 也可以通过 -Name 用正则匹配进程</span>
</span></span><span class="line"><span class="cl"><span class="nb">stop-process</span> <span class="p">&lt;</span><span class="n">pid</span><span class="p">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nb">kill </span><span class="p">&lt;</span><span class="n">pid</span><span class="p">&gt;</span>  <span class="c"># 别名</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-网络相关命令" class="headerLink">
    <a href="#3-%e7%bd%91%e7%bb%9c%e7%9b%b8%e5%85%b3%e5%91%bd%e4%bb%a4" class="header-mark"></a>3. 网络相关命令</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="c">## 1. dns 相关(dns-client)</span>
</span></span><span class="line"><span class="cl"><span class="nb">Clear-DnsClientCache</span>  <span class="c"># 清除 dns 缓存（替换掉 `ipconfig /flushdns`）</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-DnsClientCache</span>  <span class="c"># 查看 dns 缓存</span>
</span></span><span class="line"><span class="cl"><span class="nb">Resolve-DnsName</span> <span class="n">baidu</span><span class="p">.</span><span class="n">com</span>  <span class="c"># 解析域名</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 更新 DHCP 租约</span>
</span></span><span class="line"><span class="cl"><span class="n">ipconfig</span> <span class="p">/</span><span class="n">renew</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c">## 2. TCP/IP 相关命令</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-Command</span> <span class="nb">Get-Net</span><span class="p">*</span>  <span class="c"># 查看所有 TCP/IP 相关的命令</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">Get-NetIPAddress</span>  <span class="c"># 查看 IP 地址</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-NetIPInterface</span>  <span class="c"># 查看 IP 接口</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-NetRoute</span>        <span class="c"># 查看路由表</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-NetNeighbor</span>     <span class="c"># 获取链路层 MAC 地址缓存</span>
</span></span><span class="line"><span class="cl"><span class="nb">Get-NetTCPConnection</span>   <span class="c"># 查看 TCP 连接</span>
</span></span><span class="line"><span class="cl"><span class="c">### 也可以对 TCP/IP 的 IP 地址、接口、路由表进行增删改</span>
</span></span><span class="line"><span class="cl"><span class="nb">New-NetRoute</span>
</span></span><span class="line"><span class="cl"><span class="nb">Remove-NetNeighbor</span>  <span class="c"># 清除 MAC 地址缓存</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-socket-信息查询---netstat" class="headerLink">
    <a href="#4-socket-%e4%bf%a1%e6%81%af%e6%9f%a5%e8%af%a2---netstat" class="header-mark"></a>4. socket 信息查询 - netstat</h3><p>Windows 系统和 macOS 一样，也没有 <code>ss</code>，但是自带 <code>netstat</code>，该命令和 Linux 下的 <code>netstat</code> 有一定差别，具体使用方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-powershell" data-lang="powershell"><span class="line"><span class="cl"><span class="n">netstat</span> <span class="p">-?</span>  <span class="c"># 查看使用帮助，很清晰易懂</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 查看那个进程在监听 80 端口，最后一列是进程的 Pid</span>
</span></span><span class="line"><span class="cl"><span class="n">netstat</span> <span class="n">-ano</span> <span class="p">|</span> <span class="n">findstr</span> <span class="n">80</span>        <span class="c"># windows 命令</span>
</span></span><span class="line"><span class="cl"><span class="n">netstat</span> <span class="n">-ano</span> <span class="p">|</span> <span class="nb">select-string</span> <span class="n">80</span>  <span class="c"># powershell 命令，就是把 findstr 替换成 select-string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 不仅列出 Pid，还给出 Pid 对应的可执行文件名称（需要管理员权限）</span>
</span></span><span class="line"><span class="cl"><span class="n">netstat</span> <span class="n">-ano</span> <span class="n">-b</span> <span class="p">|</span> <span class="nb">select-string</span> <span class="n">80</span>  <span class="c"># powershell 命令</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 列出所有 ESTABLISHED 的 socket（默认行为）</span>
</span></span><span class="line"><span class="cl"><span class="n">netstat</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 列出所有正在监听的端口</span>
</span></span><span class="line"><span class="cl"><span class="n">netstat</span> <span class="n">-ano</span> <span class="p">|</span> <span class="n">findstr</span> <span class="n">LISTENING</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 只列出 TCP 连接</span>
</span></span><span class="line"><span class="cl"><span class="n">netstat</span> <span class="n">-ano</span> <span class="n">-p</span> <span class="n">TCP</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 查看路由表</span>
</span></span><span class="line"><span class="cl"><span class="n">route</span> <span class="p">-?</span>  <span class="c"># 查看使用帮助，很清晰易懂</span>
</span></span><span class="line"><span class="cl"><span class="n">route</span> <span class="n">print</span>    <span class="c"># 查看所有路由信息</span>
</span></span><span class="line"><span class="cl"><span class="n">route</span> <span class="n">print</span> <span class="p">-</span><span class="n">4</span>  <span class="c"># 仅 ipv4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>比如我们遇到端口占用问题时，就可以通过上述命令查找到端口对应的 Pid，然后使用 <code>kill &lt;Pid&gt;</code> 命令（powershell <code>stop-process</code> 的别名）杀死对应的进程。</p>
<h2 id="三mac-os-x" class="headerLink">
    <a href="#%e4%b8%89mac-os-x" class="header-mark"></a>三、Mac OS X</h2><p>Mac OS X 系统也是 unix-like 系统，也使用 zsh/bash，因此大部分命令基本都跟 Linux 没啥区别，可以直接参考前面 Linux 一节的内容。</p>
<p>但是要注意一些坑：</p>
<ul>
<li>macos 自带的 tar 并不是 gnutar，命令使用方式不一样！
<ul>
<li>解决：<code>brew install gnu-tar</code>，安装好后通过 <code>gtar</code> 调用，参数就跟 linux 一致了。</li>
</ul>
</li>
<li>网络相关的命令区别较大，后面会详细介绍。</li>
<li>MacOSX 使用 launchpad 作为系统服务管理器，跟 systemd 区别很大。</li>
</ul>
<h3 id="1-查看-socket-信息" class="headerLink">
    <a href="#1-%e6%9f%a5%e7%9c%8b-socket-%e4%bf%a1%e6%81%af" class="header-mark"></a>1. 查看 socket 信息</h3><p>Mac OS X 系统目前没有 <code>ss</code>，但是自带 <code>netstat</code>，该命令和 Linux 下的 <code>netstat</code> 有一定差别，而且还很慢，还不能显示 pid.</p>
<p>所以 stackoverflow 上更推荐使用 <code>lsof</code>，几条常用命令记录如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># -n 表示不显示主机名</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -P 表示不显示端口俗称</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 不加 sudo 只能查看以当前用户运行的程序</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 通用格式：</span>
</span></span><span class="line"><span class="cl">sudo lsof -nP -iTCP:端口号 -sTCP:LISTEN
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看所有 tcp 连接</span>
</span></span><span class="line"><span class="cl">lsof -nP -iTCP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看所有监听端口相关的信息（command/pid）</span>
</span></span><span class="line"><span class="cl">lsof -nP -iTCP -sTCP:LISTEN
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-其他网络相关命令" class="headerLink">
    <a href="#2-%e5%85%b6%e4%bb%96%e7%bd%91%e7%bb%9c%e7%9b%b8%e5%85%b3%e5%91%bd%e4%bb%a4" class="header-mark"></a>2. 其他网络相关命令</h3><p>清理 DNS 缓存：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># macos 10.10+</span>
</span></span><span class="line"><span class="cl">sudo dscacheutil -flushcache
</span></span><span class="line"><span class="cl">sudo killall -HUP mDNSResponder
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 其他版本请自己网上搜...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 查看所有网络接口及相关参数（ip/mac/type...）</span>
</span></span><span class="line"><span class="cl">ifconfig
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看路由表</span>
</span></span><span class="line"><span class="cl">netstat -nr
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四跨平台程序" class="headerLink">
    <a href="#%e5%9b%9b%e8%b7%a8%e5%b9%b3%e5%8f%b0%e7%a8%8b%e5%ba%8f" class="header-mark"></a>四、跨平台程序</h2><h3 id="1-vim" class="headerLink">
    <a href="#1-vim" class="header-mark"></a>1. vim</h3><h4 id="常用技巧" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e6%8a%80%e5%b7%a7" class="header-mark"></a>常用技巧</h4><p>移动：</p>
<ul>
<li><code>0</code>/<code>^</code> 回到行首，<code>$</code> 去到行末</li>
<li>w 跳到下个单词的首部，e 跳到下个单词末尾
<ul>
<li>也能使用 2w 2e 这种命令按单词数量跳转</li>
</ul>
</li>
</ul>
<p>删除 <code>d</code> 或修改 <code>c</code>:</p>
<ul>
<li>dw 删除单词，d2w 删除两个单词</li>
<li>d$ 删除到行末，<code>d0</code>/<code>d^</code> 删除到行首</li>
<li><code>d(</code>/<code>d{</code>/<code>d[[</code> 删除到文件首部，<code>d)</code>/<code>d}</code>/<code>d]]</code> 删除到文件末尾</li>
<li><code>r</code> 替换一个字符，<code>R</code> 持续往后替换</li>
</ul>
<h4 id="多行修改" class="headerLink">
    <a href="#%e5%a4%9a%e8%a1%8c%e4%bf%ae%e6%94%b9" class="header-mark"></a>多行修改</h4><p>多行插入，主要用于加注释之类的：</p>
<ul>
<li>光标停留在你需要插入文本的地方</li>
<li><code>ctrl</code>+<code>v</code> 进入 visual block 模式，选中多行</li>
<li>输入 <code>I</code>，进入编辑模式</li>
<li>输入 <code>#</code> 注释或者其他字符，但是注意不能输入换行符！也不能删除？</li>
<li>按两下 <code>Esc</code>，依次退出 Insert 和 visual block 模式，就插入成功了</li>
</ul>
<p>多行删除：</p>
<ul>
<li><code>v</code> 进入 visual 模式，在第一行，选中你想要删除的文本块
<ul>
<li>或者也可以先进入 visual block 模式，再通过左右方向键选择文本。</li>
</ul>
</li>
<li><code>ctrl</code>+<code>v</code> 进入 visual block 模式，选中多行
<ul>
<li>visual block 的特点是它是垂直选择，而 visual 模式是段落选择</li>
</ul>
</li>
<li>按 <code>d</code> 键就能删除被选中的所有内容。</li>
</ul>
<h4 id="多行替换基本和-sed-一致" class="headerLink">
    <a href="#%e5%a4%9a%e8%a1%8c%e6%9b%bf%e6%8d%a2%e5%9f%ba%e6%9c%ac%e5%92%8c-sed-%e4%b8%80%e8%87%b4" class="header-mark"></a>多行替换（基本和 sed 一致）</h4><p>多行行首插入注释符号 <code>#</code></p>
<pre><code>  :1,6 s/^/#/g
  :2,$ s/^/#/g   注：此为2行至尾行
  :% s/^/#/g     注：此为所有行
</code></pre>
<p>这里使用了正则表达式 <code>^</code> 匹配行首，改成 <code>$</code> 就可在行尾进行批量修改。</p>
<p>此外，它的分隔符也不仅限于 <code>\</code>，也可以用 <code>@</code> 等符号，方便阅读。比如：</p>
<pre><code>  :1,6 s@^@#@g
  :2,$ s@^@#@g   注：此为2行至尾行
  :% s@^@#@g     注：此为所有行
</code></pre>
<p>使用 vim 的这个正则匹配功能，不仅能进行插入，也能完成删除、替换的功能。</p>
<h4 id="将选中部分写入到文件" class="headerLink">
    <a href="#%e5%b0%86%e9%80%89%e4%b8%ad%e9%83%a8%e5%88%86%e5%86%99%e5%85%a5%e5%88%b0%e6%96%87%e4%bb%b6" class="header-mark"></a>将选中部分写入到文件</h4><ul>
<li>首先按 <code>v</code> 进入 visual 模式，选中需要的内容</li>
<li>按 <code>:</code>，应该会显示 <code>:'&lt;,'&gt;</code>，表示对选中部分进行操作</li>
<li>输入内容 <code>w new.txt</code>，此时显示效果应该是 <code>:'&lt;,'&gt;w new.txt</code></li>
<li>回车就能完成文件写入</li>
</ul>
<h4 id="问题在-vim-中粘贴-yaml-时缩进会变得一团糟" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98%e5%9c%a8-vim-%e4%b8%ad%e7%b2%98%e8%b4%b4-yaml-%e6%97%b6%e7%bc%a9%e8%bf%9b%e4%bc%9a%e5%8f%98%e5%be%97%e4%b8%80%e5%9b%a2%e7%b3%9f" class="header-mark"></a>问题：在 vim 中粘贴 yaml 时缩进会变得一团糟</h4><p>解决方法：在命令模式下输入 <code>:set paste</code> 进入粘贴模式，然后再粘贴 yaml 内容。</p>
<p>注意行首可能会丢失几个字符，需要手动补上。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/45920111" target="_blank" rel="noopener noreffer">如何在 Linux 中查看进程占用的端口号</a></li>
<li><a href="https://github.com/jpetazzo/nsenter#how-do-i-use-nsenter" target="_blank" rel="noopener noreffer">github - nsenter</a></li>
<li><a href="https://tonydeng.github.io/2016/07/07/use-lsof-to-replace-netstat/" target="_blank" rel="noopener noreffer">使用 lsof 代替 Mac OS X 中的 netstat 查看占用端口的程序</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/81123584" target="_blank" rel="noopener noreffer">aws 常用命令</a></li>
</ul>
]]></content></entry><entry><title type="html">Python 实用技巧与常见错误集锦</title><link href="https://thiscute.world/posts/python-tips-and-tricks/"/><id>https://thiscute.world/posts/python-tips-and-tricks/</id><author><name>ryan4yin</name></author><published>2022-02-13T01:17:00+08:00</published><updated>2022-02-13T01:17:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，不保证正确。</p>
</blockquote>
<blockquote>
<p>内容比较多，建议参照目录浏览。</p>
</blockquote>
<h2 id="一标准库" class="headerLink">
    <a href="#%e4%b8%80%e6%a0%87%e5%87%86%e5%ba%93" class="header-mark"></a>一、标准库</h2><h3 id="1-文件路径---pathlib" class="headerLink">
    <a href="#1-%e6%96%87%e4%bb%b6%e8%b7%af%e5%be%84---pathlib" class="header-mark"></a>1. 文件路径 - pathlib</h3><p>提供了 OS 无关的文件路径抽象，可以完全替代旧的 <code>os.path</code> 和 <code>glob</code>.</p>
<p>学会了 <code>pathlib.Path</code>，你就会了 Python 处理文件路径的所有功能。</p>
<h4 id="1-路径解析与拼接" class="headerLink">
    <a href="#1-%e8%b7%af%e5%be%84%e8%a7%a3%e6%9e%90%e4%b8%8e%e6%8b%bc%e6%8e%a5" class="header-mark"></a>1. 路径解析与拼接</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data_folder</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;./source_data/text_files/&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">data_file</span> <span class="o">=</span> <span class="n">data_folder</span> <span class="o">/</span> <span class="s2">&#34;raw_data.txt&#34;</span>  <span class="c1"># Path 重载了 / 操作符，路径拼接超级方便</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 路径的解析</span>
</span></span><span class="line"><span class="cl"><span class="n">data_file</span><span class="o">.</span><span class="n">parent</span>  <span class="c1"># 获取父路径，这里的结果就是 data_folder</span>
</span></span><span class="line"><span class="cl"><span class="n">data_foler</span><span class="o">.</span><span class="n">parent</span> <span class="c1"># 会返回 Path(&#34;source_data&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="n">data_file</span><span class="o">.</span><span class="n">parents</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># 即获取到 data_file 的上上层目录，结果和上面一样是 Path(&#34;source_data&#34;)</span>
</span></span><span class="line"><span class="cl"><span class="n">data_file</span><span class="o">.</span><span class="n">parents</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># 上上上层目录，Path(&#34;.&#34;)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">dara_file</span><span class="o">.</span><span class="n">name</span> <span class="c1"># 文件名 &#34;raw_data.txt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">dara_file</span><span class="o">.</span><span class="n">suffix</span>  <span class="c1"># 文件的后缀（最末尾的）&#34;.txt&#34;，还可用 suffixes 获取所有后缀</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">data_file</span><span class="o">.</span><span class="n">stem</span>  <span class="c1"># 去除掉最末尾的后缀后（只去除一个），剩下的文件名：raw_data</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 替换文件名或者文件后缀</span>
</span></span><span class="line"><span class="cl"><span class="n">data_file</span><span class="o">.</span><span class="n">with_name</span><span class="p">(</span><span class="s2">&#34;test.txt&#34;</span><span class="p">)</span>  <span class="c1"># 变成 .../test.txt</span>
</span></span><span class="line"><span class="cl"><span class="n">data_file</span><span class="o">.</span><span class="n">with_suffix</span><span class="p">(</span><span class="s2">&#34;.pdf&#34;</span><span class="p">)</span>  <span class="c1"># 变成 .../raw_data.pdf</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 当前路径与另一路径 的相对路径</span>
</span></span><span class="line"><span class="cl"><span class="n">data_file</span><span class="o">.</span><span class="n">relative_to</span><span class="p">(</span><span class="n">data_folder</span><span class="p">)</span>  <span class="c1"># PosixPath(&#39;raw_data.txt&#39;)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2-pathlib-常用函数" class="headerLink">
    <a href="#2-pathlib-%e5%b8%b8%e7%94%a8%e5%87%bd%e6%95%b0" class="header-mark"></a>2. pathlib 常用函数</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">if</span> <span class="ow">not</span> <span class="n">data_folder</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_folder</span><span class="o">.</span><span class="n">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  <span class="c1"># 直接创建文件夹，如果父文件夹不存在，也自动创建</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="ow">not</span> <span class="n">filename</span><span class="o">.</span><span class="n">exists</span><span class="p">():</span>  <span class="c1"># 文件是否存在</span>
</span></span><span class="line"><span class="cl">    <span class="n">filename</span><span class="o">.</span><span class="n">touch</span><span class="p">()</span>  <span class="c1"># 直接创建空文件，或者用 filename.open() 直接获取文件句柄</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 路径类型判断</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="n">data_file</span><span class="o">.</span><span class="n">is_file</span><span class="p">():</span>  <span class="c1"># 是文件</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">data_file</span><span class="p">,</span> <span class="s2">&#34;is a file&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">elif</span> <span class="n">data_file</span><span class="o">.</span><span class="n">is_dir</span><span class="p">():</span>  <span class="c1"># 是文件夹</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">p</span><span class="o">.</span><span class="n">iterdir</span><span class="p">():</span>  <span class="c1"># 通过 Path.iterdir() 迭代文件夹中的内容</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 路径解析</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 获取文件的绝对路径（符号链接也会被解析到真正的文件）</span>
</span></span><span class="line"><span class="cl"><span class="n">filename</span><span class="o">.</span><span class="n">resolve</span><span class="p">()</span>  <span class="c1"># 在不区分大小写的系统上（Windows），这个函数也会将大小写转换成实际的形式。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以直接获取 Home 路径或者当前路径</span>
</span></span><span class="line"><span class="cl"><span class="n">Path</span><span class="o">.</span><span class="n">home</span><span class="p">()</span> <span class="o">/</span> <span class="s2">&#34;file.txt&#34;</span> <span class="c1"># 有时需要以 home 为 base path 来构建文件路径</span>
</span></span><span class="line"><span class="cl"><span class="n">Path</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span>  <span class="o">/</span> <span class="s2">&#34;file.txt&#34;</span> <span class="c1"># 或者基于当前路径构建</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>还有很多其它的实用函数，可在使用中慢慢探索。</p>
<h4 id="3-glob-通配符" class="headerLink">
    <a href="#3-glob-%e9%80%9a%e9%85%8d%e7%ac%a6" class="header-mark"></a>3. glob 通配符</h4><p>pathlib 也提供了 glob 支持，也就是广泛用在路径匹配上的一种简化正则表达式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">data_file</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">glob_pattern</span><span class="p">)</span>  <span class="c1"># 返回 True 或 False，表示文件路径与给出的 glob pattern 是否匹配</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">py_file</span> <span class="ow">in</span> <span class="n">data_folder</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&#34;*/*.py&#34;</span><span class="p">):</span>  <span class="c1"># 匹配当前路径下的子文件夹中的 py 文件，会返回一个可迭代对象</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">py_file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 反向匹配，相当于 glob 模式开头添加 &#34;**/&#34;</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">py_file</span> <span class="ow">in</span> <span class="n">data_folder</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s2">&#34;**/*.py&#34;</span><span class="p">):</span>  <span class="c1"># 匹配当前路径下的所有 py 文件（所有子文件夹也会被搜索），返回一个可迭代对象</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">py_file</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>glob 中的 * 表示任意字符，而 ** 则表示任意层目录。（在大型文件树上使用 ** 速度会很慢！）</p>
<h3 id="2-时间日期处理" class="headerLink">
    <a href="#2-%e6%97%b6%e9%97%b4%e6%97%a5%e6%9c%9f%e5%a4%84%e7%90%86" class="header-mark"></a>2. 时间日期处理</h3><p>python3 在时间日期处理方面，有标准库 <code>datetime</code> 跟 <code>calender</code>，也有流行的第三方库 <code>arrow</code> 跟 <code>maya</code>.</p>
<p>标准库 datetime 有时候不太方便，比如没有提供解析 iso 格式的函数。
另外就是用标准库时，经常需要自定义格式化串。
相比之下，<code>maya</code> 和 <code>arrow</code> 这两个第三方库会方便很多。</p>
<p>不过第三方库并不是任何时候都可用，这里只介绍标准库 <code>datetime</code> 的用法，<code>maya</code>/<code>arrow</code> 请自行查找官方文档学习。</p>
<h4 id="1-获取当前时间" class="headerLink">
    <a href="#1-%e8%8e%b7%e5%8f%96%e5%bd%93%e5%89%8d%e6%97%b6%e9%97%b4" class="header-mark"></a>1. 获取当前时间</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">datetime</span> <span class="k">as</span> <span class="nn">dt</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 获取当前时间的时间戳</span>
</span></span><span class="line"><span class="cl"><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>  <span class="c1"># 直接调用 c api，因此速度很快:  1582315203.537061</span>
</span></span><span class="line"><span class="cl"><span class="n">utcnow</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">utcnow</span><span class="p">()</span>  <span class="c1"># 当前的世界标准时间: datetime.datetime(2020, 2, 22, 4, 0, 3, 537061)</span>
</span></span><span class="line"><span class="cl"><span class="n">utcnow</span><span class="o">.</span><span class="n">timestamp</span><span class="p">()</span>   <span class="c1"># 将标准时转换成时间戳：datetime =&gt;  1582315203.537061</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. UTC 世界标准时间</span>
</span></span><span class="line"><span class="cl"><span class="n">time</span><span class="o">.</span><span class="n">gmtime</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="c1">#输出为： time.struct_time(tm_year=2019, tm_mon=6, tm_mday=23, </span>
</span></span><span class="line"><span class="cl"><span class="c1">#                         tm_hour=3, tm_min=49, tm_sec=17,</span>
</span></span><span class="line"><span class="cl"><span class="c1">#                         tm_wday=6, tm_yday=174, tm_isdst=0)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这实际上是一个命名元组</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 构建一个指定的 datetime 实例</span>
</span></span><span class="line"><span class="cl"><span class="n">time_1997</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="mi">1997</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># =&gt; datetime.datetime(1997, 1, 1, 0, 0)</span>
</span></span><span class="line"><span class="cl"><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="n">year</span><span class="o">=</span><span class="mi">1997</span><span class="p">,</span> <span class="n">month</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">day</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">minute</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span>  <span class="c1"># =&gt; datetime.datetime(1997, 1, 1, 0, 11)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2-时间日期的修改与运算" class="headerLink">
    <a href="#2-%e6%97%b6%e9%97%b4%e6%97%a5%e6%9c%9f%e7%9a%84%e4%bf%ae%e6%94%b9%e4%b8%8e%e8%bf%90%e7%ae%97" class="header-mark"></a>2. 时间日期的修改与运算</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="c1"># 0. 日期的修改（修改年月时分秒）</span>
</span></span><span class="line"><span class="cl"><span class="n">utcnow</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">day</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span>  <span class="c1"># =&gt;  datetime.datetime(2020, 2, 11, 4, 0, 3, 537061)  修改 day</span>
</span></span><span class="line"><span class="cl"><span class="n">utcnow</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="n">hour</span><span class="o">=</span><span class="mi">11</span><span class="p">)</span>  <span class="c1"># =&gt; datetime.datetime(2020, 2, 22, 11, 0, 3, 537061)  修改 hour</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 日期与时间</span>
</span></span><span class="line"><span class="cl"><span class="n">date_utcnow</span> <span class="o">=</span> <span class="n">utcnow</span><span class="o">.</span><span class="n">date</span><span class="p">()</span>  <span class="c1"># =&gt; datetime.date(2020, 2, 22)  年月日</span>
</span></span><span class="line"><span class="cl"><span class="n">time_utcnow</span> <span class="o">=</span> <span class="n">utcnow</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>  <span class="c1"># =&gt; datetime.time(4, 0, 3, 537061)  时分秒</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 联结时间和日期（date 和 time 不能用加法联结）</span>
</span></span><span class="line"><span class="cl"><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">combine</span><span class="p">(</span><span class="n">date_utcnow</span><span class="p">,</span> <span class="n">time_utcnow</span><span class="p">)</span>  <span class="c1"># =&gt;  datetime.datetime(2020, 2, 22, 4, 0, 3, 537061)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 日期的运算</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3.1 datetime 之间只能计算时间差（减法），不能进行其他运算</span>
</span></span><span class="line"><span class="cl"><span class="n">utcnow</span> <span class="o">-</span> <span class="n">time_1997</span>  <span class="c1"># =&gt; datetime.timedelta(days=8452, seconds=14403, microseconds=537061)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3.2 使用 timedelta 进行时间的增减</span>
</span></span><span class="line"><span class="cl"><span class="n">days_step</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># 注意参数是复数形式</span>
</span></span><span class="line"><span class="cl"><span class="n">time_1997</span> <span class="o">+</span> <span class="n">days_step</span>  <span class="c1"># =&gt; datetime.datetime(1997, 1, 2, 0, 0)</span>
</span></span><span class="line"><span class="cl"><span class="n">time_1997</span> <span class="o">-</span> <span class="n">days_step</span>  <span class="c1"># =&gt; datetime.datetime(1996, 12, 31, 0, 0)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3.3 timedelta 之间也可以进行加减法</span>
</span></span><span class="line"><span class="cl"><span class="n">hours_step</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># =&gt; datetime.timedelta(seconds=3600)</span>
</span></span><span class="line"><span class="cl"><span class="n">days_step</span> <span class="o">+</span> <span class="n">hours_step</span>  <span class="c1"># =&gt; datetime.timedelta(days=1, seconds=3600)</span>
</span></span><span class="line"><span class="cl"><span class="n">days_step</span> <span class="o">-</span> <span class="n">hours_step</span>  <span class="c1"># =&gt; datetime.timedelta(seconds=82800)</span>
</span></span><span class="line"><span class="cl"><span class="n">hours_step</span> <span class="o">-</span> <span class="n">days_step</span>  <span class="c1"># =&gt; datetime.timedelta(days=-1, seconds=3600)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3.4 timedelta 还可以按比例增减（与数字进行乘除法）</span>
</span></span><span class="line"><span class="cl"><span class="n">hours_step</span> <span class="o">*</span> <span class="mi">2</span>  <span class="c1"># =&gt; datetime.timedelta(seconds=7200)</span>
</span></span><span class="line"><span class="cl"><span class="n">days_step</span> <span class="o">*</span> <span class="o">-</span><span class="mi">2</span>  <span class="c1"># =&gt; datetime.timedelta(days=-2)</span>
</span></span><span class="line"><span class="cl"><span class="n">hours_step</span> <span class="o">*</span> <span class="mf">1.1</span>  <span class="c1"># =&gt;  datetime.timedelta(seconds=3960)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="3-时间日期的格式化与解析" class="headerLink">
    <a href="#3-%e6%97%b6%e9%97%b4%e6%97%a5%e6%9c%9f%e7%9a%84%e6%a0%bc%e5%bc%8f%e5%8c%96%e4%b8%8e%e8%a7%a3%e6%9e%90" class="header-mark"></a>3. 时间日期的格式化与解析</h4><p>先介绍下常用的格式化字符串：</p>
<ol>
<li>普通格式 - &lsquo;%Y-%m-%d %H:%M:%S&rsquo; =&gt; &lsquo;2020-02-22 04:00:03&rsquo;</li>
<li>ISO 格式 - &lsquo;%Y-%m-%dT%H:%M:%S.%fZ&rsquo; =&gt; &lsquo;2020-02-22T04:00:03.537061Z&rsquo;</li>
<li>带时区的格式 - &lsquo;%Y-%m-%dT%H:%M:%S%Z&rsquo; =&gt; 2022-02-10T00:48:52UTC+08:00
<ul>
<li>需要时间对象自身有时区属性才行！否则格式化时会忽略 <code>%Z</code></li>
</ul>
</li>
</ol>
<p>另外再介绍下 Python 两个时间格式化与解析函数的命名：</p>
<ul>
<li><code>strftime</code>: 即 <code>string formate time</code></li>
<li><code>strptime</code>: 即 <code>string parse time</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="c1"># 1. 将时间格式化成字符串</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1.1 将 datetime 格式化为 iso 标准格式</span>
</span></span><span class="line"><span class="cl"><span class="n">utcnow</span><span class="o">.</span><span class="n">isoformat</span><span class="p">()</span>  <span class="c1"># =&gt;  &#39;2020-02-22T04:00:03.537061&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">utcnow</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1">T%H:%M:%S.</span><span class="si">%f</span><span class="s1">Z&#39;</span><span class="p">)</span>   <span class="c1"># =&gt; &#39;2020-02-22T04:00:03.537061Z&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">utcnow</span><span class="o">.</span><span class="n">date</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1">T%H:%M:%S.</span><span class="si">%f</span><span class="s1">Z&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; &#39;2020-02-22T00:00:00.000000Z&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1.2 将 time.struct_time 格式化为日期字符串（貌似不支持 iso，可能是精度不够）</span>
</span></span><span class="line"><span class="cl"><span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1">T%H:%M:%S&#39;</span><span class="p">,</span> <span class="n">gm</span><span class="p">)</span>  <span class="c1"># =&gt; &#39;2020-02-22T04:00:03&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1.3 将 datetime 格式化成指定格式</span>
</span></span><span class="line"><span class="cl"><span class="n">utcnow</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1"> %H:%M:%S&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; &#39;2020-02-22 04:00:03&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 解析时间字符串</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2.1 解析 iso 格式的时间字符串，手动指定格式（注意 %f 只对应六位小数，对9位小数它无能为力。。）</span>
</span></span><span class="line"><span class="cl"><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s1">&#39;2020-02-22T04:00:03.537061Z&#39;</span><span class="p">,</span> <span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1">T%H:%M:%S.</span><span class="si">%f</span><span class="s1">Z&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; datetime.datetime(2020, 2, 22, 4, 0, 3, 537061)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2.2 解析 iso 格式的时间字符串(需要 python 3.7+)</span>
</span></span><span class="line"><span class="cl"><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="s1">&#39;2020-02-22T04:00:03.537061&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; datetime.datetime(2020, 2, 22, 4, 0, 3, 537061)</span>
</span></span><span class="line"><span class="cl"><span class="n">dt</span><span class="o">.</span><span class="n">date</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="s1">&#39;2020-02-22&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; datetime.date(2020, 2, 22)</span>
</span></span><span class="line"><span class="cl"><span class="n">dt</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="s2">&#34;04:00:03.537061&#34;</span><span class="p">)</span>  <span class="c1"># =&gt;  datetime.time(4, 0, 3, 537061)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2.3 解析指定格式的字符串</span>
</span></span><span class="line"><span class="cl"><span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s1">&#39;2020-02-22 04:00:03&#39;</span><span class="p">,</span> <span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1"> %H:%M:%S&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; datetime.datetime(2020, 2, 22, 4, 0, 3)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="4-时区转换与日期格式化" class="headerLink">
    <a href="#4-%e6%97%b6%e5%8c%ba%e8%bd%ac%e6%8d%a2%e4%b8%8e%e6%97%a5%e6%9c%9f%e6%a0%bc%e5%bc%8f%e5%8c%96" class="header-mark"></a>4. 时区转换与日期格式化</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="c1"># 上海时区：东八区 utc+8</span>
</span></span><span class="line"><span class="cl"><span class="n">tz_shanghai</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">timezone</span><span class="p">(</span><span class="n">dt</span><span class="o">.</span><span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">8</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">now_shanghai</span> <span class="o">=</span> <span class="n">dt</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">(</span><span class="n">tz</span><span class="o">=</span><span class="n">tz_shanghai</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">now_shanghai</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1">T%H:%M:%S%Z&#39;</span><span class="p">)</span>  <span class="c1"># =&gt; 2022-02-10T00:48:52UTC+08:00</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-排序常用库---operator" class="headerLink">
    <a href="#3-%e6%8e%92%e5%ba%8f%e5%b8%b8%e7%94%a8%e5%ba%93---operator" class="header-mark"></a>3. 排序常用库 - operator</h3><p>operator 模块包含四种类型的方法：</p>
<h4 id="1-operatoritemgetter" class="headerLink">
    <a href="#1-operatoritemgetter" class="header-mark"></a>1. <strong>operator.itemgetter</strong></h4><p>经常被用于 sorted/max/mix/itertools.groupby 等</p>
<p>使用方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="c1"># itemgetter</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="n">itemgetter</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>  <span class="c1"># return r[2]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 还能一次获取多个值，像 numpy 那样索引</span>
</span></span><span class="line"><span class="cl"><span class="n">f2</span> <span class="o">=</span> <span class="n">itemgetter</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f2</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>  <span class="c1"># return (r[2], r[4], r[5])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或者使用 slice 切片</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">itemgetter</span><span class="p">(</span><span class="nb">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="kc">None</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>  <span class="c1"># return r[2:]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># dict 索引也能用</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span> <span class="o">=</span> <span class="n">itemgetter</span><span class="p">(</span><span class="s1">&#39;rank&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">d</span><span class="p">[</span><span class="n">r</span><span class="p">]</span>  <span class="c1"># return d[&#39;rank&#39;], d[&#39;name&#39;]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>用途：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="c1"># 用于指定用于比较大小的属性</span>
</span></span><span class="line"><span class="cl"><span class="n">key</span> <span class="o">=</span> <span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">sorted</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">)</span>  <span class="c1"># 使用 iterable[1] 对 iterable 进行排序</span>
</span></span><span class="line"><span class="cl"><span class="nb">max</span><span class="p">(</span><span class="n">iterable</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">)</span>  <span class="c1"># 找出最大的元素，使用 iterable[1] 做比较</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 用于高级切片（比如像 numpy 那样的，指定只获取某几列）</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">itemgetter</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="nb">map</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">matrix</span><span class="p">)</span>  <span class="c1"># list 后得到 [(1, 3, 4), (2,4,5)]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2-operatorattrgetter" class="headerLink">
    <a href="#2-operatorattrgetter" class="header-mark"></a>2. <code>operator.attrgetter</code></h4><p>可用于动态获取对象的属性，与直接用 <code>getattr()</code> 不同的是，它可以嵌套访问属性。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Python3" data-lang="Python3"><span class="line"><span class="cl"><span class="c1"># 嵌套访问属性</span>
</span></span><span class="line"><span class="cl"><span class="n">att</span> <span class="o">=</span> <span class="n">attrgetter</span><span class="p">(</span><span class="s2">&#34;a.b.c&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">att</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>  <span class="c1"># return obj.a.b.c</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 和 itemgetter 一样，也可以一次获取多个属性</span>
</span></span><span class="line"><span class="cl"><span class="n">att</span> <span class="o">=</span> <span class="n">attrgetter</span><span class="p">(</span><span class="s2">&#34;a.b.c&#34;</span><span class="p">,</span> <span class="s2">&#34;x.y&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">att</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>  <span class="c1"># return (obj.a.b.c, obj.x.y)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 不嵌套的话，用 getattr 就行</span>
</span></span><span class="line"><span class="cl"><span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="s2">&#34;a&#34;</span><span class="p">)</span>  <span class="c1"># return obj.a</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里可以回顾一下类的两个魔法函数：</p>
<ol>
<li><code>__getattr__</code>: 当被访问的属性不存在时，这个方法会被调用，它的返回值会成为对象的该属性。
<ul>
<li>用于动态生成实例的属性/函数</li>
</ul>
</li>
<li><code>__getattribute__</code>: 与 <code>__getattr__</code> 唯一的差别在于，访问对象的任何属性，都会直接调用这个方法，<strong>不管属性存不存在</strong>。</li>
</ol>
<h4 id="3-operatormethodcaller" class="headerLink">
    <a href="#3-operatormethodcaller" class="header-mark"></a>3. operator.methodcaller</h4><p>可用于调用函数，它和 attrgetter 很像，差别在于 attrgetter 只是返回指定的属性，而 methodcaller 会直接把指定的属性当成函数调用，然后返回结果。</p>
<p>举例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="n">methodcaller</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="n">bar</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">f</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>  <span class="c1"># returns b.name(&#39;foo&#39;, bar=1)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="4-各种操作符对应的函数" class="headerLink">
    <a href="#4-%e5%90%84%e7%a7%8d%e6%93%8d%e4%bd%9c%e7%ac%a6%e5%af%b9%e5%ba%94%e7%9a%84%e5%87%bd%e6%95%b0" class="header-mark"></a>4. 各种操作符对应的函数</h4><p>operator.add、operator.sub、operator.mul、operator.div 等等，函数式编程有时需要用到。</p>
<h3 id="4-itertools" class="headerLink">
    <a href="#4-itertools" class="header-mark"></a>4. itertools</h3><p><a href="https://docs.python.org/3/library/itertools.html" target="_blank" rel="noopener noreffer">itertools</a> 提供了许多针对可迭代对象的实用函数</p>
<p>方法很多，基本不可能一次全记住。还是要用到时多查吧。大致记住有提供哪些功能，需要用到时能想起可以查这个模块就行。</p>
<h4 id="1-无限迭代器" class="headerLink">
    <a href="#1-%e6%97%a0%e9%99%90%e8%bf%ad%e4%bb%a3%e5%99%a8" class="header-mark"></a>1. 无限迭代器</h4><ol>
<li>count(start=0, step=1): 从 start 开始，每次迭代时，返回值都加一个 step
<ul>
<li>默认返回序列为 0 1 2 3&hellip;</li>
</ul>
</li>
<li>cycle(iterable): 不断循环迭代 iterable</li>
<li>repeat(element, times=None): 默认永远返回 element。（如果 times 不为 None，就迭代 times 后结束）</li>
</ol>
<h4 id="2-排列组合迭代器" class="headerLink">
    <a href="#2-%e6%8e%92%e5%88%97%e7%bb%84%e5%90%88%e8%bf%ad%e4%bb%a3%e5%99%a8" class="header-mark"></a>2. 排列组合迭代器</h4><ol>
<li>product(p1, p2, &hellip;, repeat=1)：p1, p2&hellip; 的元素的笛卡尔积，相当于多层 for 循环
<ul>
<li>repeat 指参数重复次数，比如</li>
</ul>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt;&gt;&gt; from itertools import product
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">r</span> <span class="o">=</span> product<span class="o">([</span>1, 2<span class="o">]</span>, <span class="o">[</span>3, 4<span class="o">]</span>, <span class="o">[</span>5, 6<span class="o">])</span>  <span class="c1"># 重复一次，也就是 (p1, p2, p3) 的笛卡尔积</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pprint<span class="o">(</span>list<span class="o">(</span>r<span class="o">))</span>       
</span></span><span class="line"><span class="cl"><span class="o">[(</span>1, 3, 5<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>1, 3, 6<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>1, 4, 5<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>1, 4, 6<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>2, 3, 5<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>2, 3, 6<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>2, 4, 5<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>2, 4, 6<span class="o">)]</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">r2</span> <span class="o">=</span> product<span class="o">([</span>1, 2<span class="o">]</span>, <span class="o">[</span>3, 4<span class="o">]</span>, <span class="o">[</span>5, 6<span class="o">]</span>, <span class="nv">repeat</span><span class="o">=</span>2<span class="o">)</span>  <span class="c1"># 重复两次，即 (p1, p2, p3, p1, p2, p3) 的笛卡尔积</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; pprint<span class="o">(</span>list<span class="o">(</span>r2<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="o">[(</span>1, 3, 5, 1, 3, 5<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>1, 3, 5, 1, 3, 6<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>1, 3, 5, 1, 4, 5<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>1, 3, 5, 1, 4, 6<span class="o">)</span>,
</span></span><span class="line"><span class="cl"> <span class="o">(</span>1, 3, 5, 2, 3, 5<span class="o">)</span>,
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>permutations(p[, r])：p 中元素，长度为 r 的所有可能的排列。相当于 product 去重后的结果。</li>
<li>combinations(p, r)：既然有排列，当然就有组合了。</li>
</ol>
<h4 id="3-其他" class="headerLink">
    <a href="#3-%e5%85%b6%e4%bb%96" class="header-mark"></a>3. 其他</h4><ol>
<li><code>zip_longest(*iterables, fillvalue=None)</code>：和 zip 的差别在于，缺失的元素它会用 fillvalue 补全，而不是直接结束。</li>
<li><code>takewhile()</code></li>
<li><code>dropwhile()</code></li>
<li><code>groupby()</code></li>
</ol>
<p>等等等，用得到的时候再查了。。。</p>
<h3 id="5-collections" class="headerLink">
    <a href="#5-collections" class="header-mark"></a>5. collections</h3><p>提供了一些实用的高级数据结构（容器）</p>
<ol>
<li><strong><code>defaultdict</code></strong>：这个感觉是最常用的，可以给定 key 的默认值</li>
<li><strong><code>Counter</code></strong>：方便、快速的计数器。常用于分类统计</li>
<li><code>deque</code>：一个线程安全的双端队列</li>
<li><code>OrderedDict</code>：有时候会需要有序字典</li>
<li><code>namedtuple</code>：命名元组，有时用于参数传递。与 tuple 的差别是它提供了关键字参数和通过名字访问属性的功能</li>
<li><code>ChainMap</code>：将多个 map 连接（chain）在一起，提供一个统一的视图。因为是视图，所以原来的 map 不会被影响。</li>
</ol>
<h3 id="6-常用函数装饰器-functools" class="headerLink">
    <a href="#6-%e5%b8%b8%e7%94%a8%e5%87%bd%e6%95%b0%e8%a3%85%e9%a5%b0%e5%99%a8-functools" class="header-mark"></a>6. 常用函数装饰器 functools</h3><p>functools 提供了几个有时很有用的函数和装饰器</p>
<h4 id="1-functoolswraps" class="headerLink">
    <a href="#1-functoolswraps" class="header-mark"></a>1. @functools.wraps</h4><p>这个装饰器用于使装饰器 copy 被装饰的对象的 <code>__module__</code>, <code>__name__</code>, <code>__qualname__</code>, <code>__annotations__</code> and <code>__doc__</code> 属性，这样装饰器就显得更加透明。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">wraps</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">my_decorator</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">     <span class="nd">@wraps</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">         <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;Calling decorated function&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">         <span class="k">return</span> <span class="n">f</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="k">return</span> <span class="n">wrapper</span>  <span class="c1"># 用了 wraps，wrapper 会复制 f 的各种文档属性</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@my_decorator</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">xx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34; this is func&#39;s docstring&#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;this is func~&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果不用 wraps 的话，因为实际上返回的是 wrapper，被装饰对象的这些文档属性都会丢失。（比如 docstring）
<strong>因此在使用 wrapper 装饰器时，添加 @wraps() 装饰器是个好习惯。</strong></p>
<h4 id="2-functoolspartial" class="headerLink">
    <a href="#2-functoolspartial" class="header-mark"></a>2. functools.partial</h4><p>这个感觉和高等数学的偏函数很像：比如函数 z = f(x, y) 有 x 和 y 两个变量，现在把 x 看作常数，就可以对 y 进行求导运算。
而 python 的 partial 也差不多，不过它不是把 x 看作常数，而是先给定 x 的值。用法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span></span><span class="line"><span class="cl"><span class="n">basetwo</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">base</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 先给定 int 函数的 base 参数为 2</span>
</span></span><span class="line"><span class="cl"><span class="n">basetwo</span><span class="o">.</span><span class="vm">__doc__</span> <span class="o">=</span> <span class="s1">&#39;Convert base 2 string to an int.&#39;</span>  <span class="c1"># 如果需要文档，可以添加 __doc__ 属性</span>
</span></span><span class="line"><span class="cl"><span class="n">basetwo</span><span class="p">(</span><span class="s1">&#39;10010&#39;</span><span class="p">)</span>  <span class="c1"># return 18</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>此外，还有个 partialmethod 函数，待了解</p>
<h4 id="3-functoolslru_cachemaxsize128-typedfalse" class="headerLink">
    <a href="#3-functoolslru_cachemaxsize128-typedfalse" class="header-mark"></a>3. @functools.lru_cache(maxsize=128, typed=False)</h4><p>如果某方法可能被频繁调用（使用相同的参数），而且它的结果在一定时间内不会改变。可以用 lru_cache 装饰它，减少运算量或 IO 操作。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">lru_cache</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 缓存最近的（least recently used，lru） 64 次参数不同的调用结果。</span>
</span></span><span class="line"><span class="cl"><span class="nd">@lru_cache</span><span class="p">(</span><span class="n">maxsize</span><span class="o">=</span><span class="mi">64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">my_sum</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>  <span class="c1"># 后续的调用中，如果参数能匹配到缓存，就直接返回缓存结果</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>比如用递归计算斐波那契数列，数值较低的参数会被频繁使用，于是可以用 lru_cache 来缓存它们。
或者爬取网页，可能会需要频繁爬取一个变化不快的网页，这时完全可以用 cache 缓存。</p>
<p>但是它不能控制缓存失效时间，因此不能用于 Web 系统的缓存。还是得自己写个简单的装饰器，把缓存存到 redis 里并设置 expires。或者直接用 Flask 或 Django 的 caching 插件。</p>
<h4 id="4-functoolssingledispatch" class="headerLink">
    <a href="#4-functoolssingledispatch" class="header-mark"></a>4. @functools.singledispatch</h4><p>单重派发，即根据函数的第一个参数的类型，来决定调用哪一个同名函数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="nd">@singledispatch</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>  <span class="c1"># 首先定义一个默认函数</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;没有合适的类型被调用&#39;</span><span class="p">)</span>  <span class="c1"># 如果参数类型没有匹配上，就调用这个默认函数</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@parse</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="kc">None</span><span class="p">))</span>  <span class="c1"># 第一个参数为 None</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;出现 None 了&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@parse</span><span class="o">.</span><span class="n">register</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>  <span class="c1"># 第一个参数为整数</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;这次输入的是整数&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@parse</span><span class="o">.</span><span class="n">register</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_</span><span class="p">(</span><span class="n">arg</span><span class="p">:</span> <span class="nb">list</span><span class="p">):</span>  <span class="c1"># python3.7 开始，可以直接用类型注解来标注第一个参数的类型</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;这次输入的是列表&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>画外：有单重派发，自然就有多重派发，Julia 语言就支持多重派发，即根据函数所有参数的类型，来决定调用哪一个同名函数。
Julia 语言根本没有类这个定义，类型的所有方法都是通过多重派发来定义的。</p>
<h4 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h4><ol>
<li>@functools.total_ordering：用于自动生成比较函数。</li>
<li>functools.cmp_to_key(func)：用于将老式的比较函数，转换成新式的 key 函数。</li>
</ol>
<h3 id="7-上下文管理---contextlib" class="headerLink">
    <a href="#7-%e4%b8%8a%e4%b8%8b%e6%96%87%e7%ae%a1%e7%90%86---contextlib" class="header-mark"></a>7. 上下文管理 - contextlib</h3><p>即实现使用 <code>with</code> 语句进行自定义的上下文管理。</p>
<h4 id="1-使用-__enter__-和-__exit__" class="headerLink">
    <a href="#1-%e4%bd%bf%e7%94%a8-__enter__-%e5%92%8c-__exit__" class="header-mark"></a>1. 使用 <code>__enter__</code> 和 <code>__exit__</code></h4><p>Java 使用 try 来自动管理资源，只要实现了 AutoCloseable 接口，就可以部分摆脱手动 colse 的地狱了。</p>
<p>而 Python，则是定义了两个 Protocol：<code>__enter__</code> 和 <code>__exit__</code>. 下面是一个 open 的模拟实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">OpenContext</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="p">):</span>  <span class="c1"># 调用 open(filename, mode) 返回一个实例</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c1"># 用 with 管理 __init__ 返回的实例时，with 会自动调用这个方法</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">fp</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 退出 with 代码块时，会自动调用这个方法。</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">traceback</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 这里先构造了 OpenContext 实例，然后用 with 管理该实例</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">OpenContext</span><span class="p">(</span><span class="s1">&#39;/tmp/a&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里唯一有点复杂的，就是 <code>__exit__</code> 方法。和 Java 一样，<code>__exit__</code> 相当于 <code>try - catch - finally</code> 的 <code>finally</code> 代码块，在发生异常时，它也会被调用。</p>
<p>当没有异常发生时，<code>__exit__</code> 的三个参数 <code>exc_type, exc_value, traceback</code> 都为 None，而当发生异常时，它们就对应异常的详细信息。
发生异常时， <code>__exit__</code> <strong>的返回值将被用于决定是否向外层抛出该异常</strong>，返回 True 则抛出，返回 False 则抑制（swallow it）。</p>
<p>Note 1：Python 3.6 提供了 async with 异步上下文管理器，它的 Protocol 和同步的 with 完全类似，是 <code>__aenter__</code> 和 <code>__aexit__</code> 两个方法。
Note 2：与 Java 相同，with 支持同时管理多个资源，因此可以直接写 <code>with open(x) as a, open(y) as b:</code> 这样的形式。</p>
<h4 id="2-推荐contextlib" class="headerLink">
    <a href="#2-%e6%8e%a8%e8%8d%90contextlib" class="header-mark"></a>2. 推荐：contextlib</h4><h5 id="21-contextlibcontextmanager" class="headerLink">
    <a href="#21-contextlibcontextmanager" class="header-mark"></a>2.1 @contextlib.contextmanager</h5><p>对于简单的 with 资源管理，编写一个类可能会显得比较繁琐，为此 contextlib 提供了一个方便的装饰器 <code>@contextlib.contextmanager</code> 用来简化代码。</p>
<p>使用它，上面的 OpenContext 可以改写成这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">contextmanager</span>
</span></span><span class="line"><span class="cl"><span class="nd">@contextmanager</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">make_open_context</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">fp</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">yield</span> <span class="n">fp</span>  <span class="c1"># 没错，这是一个生成器函数</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">make_open_context</span><span class="p">(</span><span class="s1">&#39;/tmp/a&#39;</span><span class="p">,</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>contextmanager</code> 装饰一个生成器函数，yield 之前的代码对应 <code>__enter__</code>，finally 代码块就对应 <code>__exit__</code>.</p>
<p>Note：同样，也有异步版本的装饰器 <code>@contextlib.asynccontextmanager</code></p>
<h5 id="22-contextlibclosingthing" class="headerLink">
    <a href="#22-contextlibclosingthing" class="header-mark"></a>2.2 contextlib.closing(thing)</h5><p>用于将原本不支持 with 管理的资源，包装成一个 Context 对象。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">closing</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">urllib.request</span> <span class="kn">import</span> <span class="n">urlopen</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">closing</span><span class="p">(</span><span class="n">urlopen</span><span class="p">(</span><span class="s1">&#39;http://www.python.org&#39;</span><span class="p">))</span> <span class="k">as</span> <span class="n">page</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">page</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># closing 等同于</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">contextmanager</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@contextmanager</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">closing</span><span class="p">(</span><span class="n">thing</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">yield</span> <span class="n">thing</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">thing</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>  <span class="c1"># 就是添加了一个自动 close 的功能</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="23-contextlibsuppressexceptions" class="headerLink">
    <a href="#23-contextlibsuppressexceptions" class="header-mark"></a>2.3 contextlib.suppress(*exceptions)</h5><p>使 with 管理器抑制代码块内任何被指定的异常：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">contextlib</span> <span class="kn">import</span> <span class="n">suppress</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">suppress</span><span class="p">(</span><span class="ne">FileNotFoundError</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;somefile.tmp&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 等同于</span>
</span></span><span class="line"><span class="cl"><span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">&#39;somefile.tmp&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">except</span> <span class="ne">FileNotFoundError</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h5 id="24-contextlibredirect_stdoutnew_target" class="headerLink">
    <a href="#24-contextlibredirect_stdoutnew_target" class="header-mark"></a>2.4 contextlib.redirect_stdout(new_target)</h5><p>将 with 代码块内的 stdout 重定向到指定的 target（可用于收集 stdout 的输出）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="n">f</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">StringIO</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">redirect_stdout</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>  <span class="c1"># 将输出直接写入到 StringIO</span>
</span></span><span class="line"><span class="cl">    <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或者直接写入到文件</span>
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s1">&#39;help.txt&#39;</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">redirect_stdout</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">help</span><span class="p">(</span><span class="nb">pow</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>redirect_stdout 函数返回的 Context 是可重入的（ reentrant），可以重复使用。</p>
<h2 id="二实用代码片段" class="headerLink">
    <a href="#%e4%ba%8c%e5%ae%9e%e7%94%a8%e4%bb%a3%e7%a0%81%e7%89%87%e6%ae%b5" class="header-mark"></a>二、实用代码片段</h2><h3 id="group_size" class="headerLink">
    <a href="#group_size" class="header-mark"></a>1. 元素分组/group</h3><p>数据处理中一个常见的操作，是将列表中的元素，依次每 k 个分作一组。</p>
<p>下面的函数使用非常简洁的代码实现了元素分组的功能：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">zip_longest</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">group_each</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">size</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">longest</span><span class="o">=</span><span class="kc">False</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">        将一个可迭代对象 a 内的元素, 每 size 个分为一组
</span></span></span><span class="line"><span class="cl"><span class="s2">        group_each([1,2,3,4], 2) -&gt; [(1,2), (3,4)]
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">iterators</span> <span class="o">=</span> <span class="p">[</span><span class="nb">iter</span><span class="p">(</span><span class="n">a</span><span class="p">)]</span> <span class="o">*</span> <span class="n">size</span>  <span class="c1"># 将新构造的 iterator 复制 size 次（浅复制）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">func_zip</span> <span class="o">=</span> <span class="n">zip_longest</span> <span class="k">if</span> <span class="n">longest</span> <span class="k">else</span> <span class="nb">zip</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">func_zip</span><span class="p">(</span><span class="o">*</span><span class="n">iterators</span><span class="p">)</span>  <span class="c1"># 然后 zip</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;abcdefghijk&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">list</span><span class="p">(</span><span class="n">group_each</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; [(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), (&#39;d&#39;, &#39;e&#39;, &#39;f&#39;), (&#39;g&#39;, &#39;h&#39;, &#39;i&#39;)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">list</span><span class="p">(</span><span class="n">group_each</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">longest</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; [(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;), (&#39;d&#39;, &#39;e&#39;, &#39;f&#39;), (&#39;g&#39;, &#39;h&#39;, &#39;i&#39;), (&#39;j&#39;, &#39;k&#39;, None)]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个函数还可以进一步简化为 <code>zip(*[iter(a)] * 3)</code>，如果没想到浅复制（Shallow Copy）特性的话，会很难理解它的逻辑。</p>
<p>此外，如果某个 size 比较常用（比如 2），还可以用 <code>partial</code> 封装一下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">partial</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"> <span class="c1"># 每两个分一组</span>
</span></span><span class="line"><span class="cl"><span class="n">group_each_2</span> <span class="o">=</span> <span class="n">partial</span><span class="p">(</span><span class="n">group_each</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 等同于 group_each_2 = lambda a: group_each(a, 2)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="s2">&#34;abcde&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">list</span><span class="p">(</span><span class="n">group_each_2</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; [(&#39;a&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;d&#39;)]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">list</span><span class="p">(</span><span class="n">group_each_2</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">longest</span><span class="o">=</span><span class="kc">True</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="c1"># =&gt; [(&#39;a&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;d&#39;), (&#39;e&#39;, None)]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-扁平版本的-map" class="headerLink">
    <a href="#2-%e6%89%81%e5%b9%b3%e7%89%88%e6%9c%ac%e7%9a%84-map" class="header-mark"></a>2. 扁平版本的 map</h3><p>稍微接触过函数式应该都知道 flat_map，可 Python 标准库却没有提供。下面是我在 stackoverflow 上找到的实现，其实很简单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">flat_map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">items</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">items</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>它和 map 的差别在于是不是扁平(flat) 的（废话。。），举个例子</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;&gt;&gt; list(map(list, [&#39;123&#39;, &#39;456&#39;]))
</span></span><span class="line"><span class="cl">[[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;], [&#39;4&#39;, &#39;5&#39;, &#39;6&#39;]]
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; list(flat_map(list, [&#39;123&#39;, &#39;456&#39;]))
</span></span><span class="line"><span class="cl">[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;]
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-轮流迭代多个迭代器" class="headerLink">
    <a href="#3-%e8%bd%ae%e6%b5%81%e8%bf%ad%e4%bb%a3%e5%a4%9a%e4%b8%aa%e8%bf%ad%e4%bb%a3%e5%99%a8" class="header-mark"></a>3. 轮流迭代多个迭代器</h3><p>假设我有多个可迭代对象（迭代器、列表等），现在我需要每次从每个对象中取一个值，直到某个对象为空。如果用循环写会比较繁琐，但是用 itertools 可以这样写：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">iter_one_by_one</span><span class="p">(</span><span class="n">items</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="o">*</span><span class="n">items</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">c</span> <span class="o">=</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">list</span><span class="p">(</span><span class="n">iter_one_by_one</span><span class="p">([</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">]))</span>  <span class="c1"># =&gt;  [1, 4, 7, 2, 5, 8, 3, 6, 9]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-多-dict-的去重" class="headerLink">
    <a href="#4-%e5%a4%9a-dict-%e7%9a%84%e5%8e%bb%e9%87%8d" class="header-mark"></a>4. 多 dict 的去重</h3><p>假设我们有一个 dict 的列表，里面可能有内容一模一样的 dict，我们需要对它做去重。
容易想到的方法就是使用 set，可是 set 中的元素必须是 hashable 的，而 dict 是 unhashable 的，因此不能直接放进 set 里。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt;&gt;&gt; a = [{&#39;a&#39;: 1}, {&#39;a&#39;: 1}, {&#39;b&#39;: 2}]
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; set(a)
</span></span><span class="line"><span class="cl">Traceback (most recent call last):
</span></span><span class="line"><span class="cl">  File &#34;/usr/local/lib/python3.7/site-packages/IPython/core/interactiveshell.py&#34;, line 2961, in run_code
</span></span><span class="line"><span class="cl">    exec(code_obj, self.user_global_ns, self.user_ns)
</span></span><span class="line"><span class="cl">  File &#34;&lt;ipython-input-5-5b4c643a6feb&gt;&#34;, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">    set(a)
</span></span><span class="line"><span class="cl">TypeError: unhashable type: &#39;dict&#39;
</span></span></code></pre></td></tr></table>
</div>
</div><p>难道就必须手写递归了么？未必，我在 stackoverflow 看到这样一个小技巧</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">json</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">unique_dicts</span><span class="p">(</span><span class="n">data_list</span><span class="p">:</span> <span class="nb">list</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;unique a list of dict
</span></span></span><span class="line"><span class="cl"><span class="s2">        dict 是 unhashable 的，不能放入 set 中，所以先转换成 str
</span></span></span><span class="line"><span class="cl"><span class="s2">        
</span></span></span><span class="line"><span class="cl"><span class="s2">        unique_dicts([{&#39;a&#39;: 1}, {&#39;a&#39;: 1}, {&#39;b&#39;: 2}])  -&gt;  [{&#39;a&#39;: 1}, {&#39;b&#39;: 2}]
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">data_json_set</span> <span class="o">=</span> <span class="nb">set</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data_list</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="p">[</span><span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data_json_set</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="5-str-的-startswith-和-endswith-的参数可以是元组" class="headerLink">
    <a href="#5-str-%e7%9a%84-startswith-%e5%92%8c-endswith-%e7%9a%84%e5%8f%82%e6%95%b0%e5%8f%af%e4%bb%a5%e6%98%af%e5%85%83%e7%bb%84" class="header-mark"></a>5. str 的 startswith 和 endswith 的参数可以是元组</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">In[7]: a = &#34;bb.gif&#34;
</span></span><span class="line"><span class="cl">In[8]: b = &#39;a.jpg&#39;
</span></span><span class="line"><span class="cl">In[9]: a.endswith((&#39;.jpg&#39;, &#39;.gif&#39;))
</span></span><span class="line"><span class="cl">Out[9]: True
</span></span><span class="line"><span class="cl">In[10]: b.startswith((&#39;bb&#39;, &#39;a&#39;))
</span></span><span class="line"><span class="cl">Out[10]: True
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="6-判断两个对象的所有属性都相同" class="headerLink">
    <a href="#6-%e5%88%a4%e6%96%ad%e4%b8%a4%e4%b8%aa%e5%af%b9%e8%b1%a1%e7%9a%84%e6%89%80%e6%9c%89%e5%b1%9e%e6%80%a7%e9%83%bd%e7%9b%b8%e5%90%8c" class="header-mark"></a>6. 判断两个对象的所有属性都相同</h3><p>python 和 java 一样，直接用 == 做判断，默认是比较的引用，相当于 is。对自定义的类，你需要重写 <code>__eq__</code> 函数。
判断值相等的方法很简单，一行代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">obj</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="vm">__dict__</span> <span class="o">==</span> <span class="n">obj</span><span class="o">.</span><span class="vm">__dict__</span>  <span class="c1"># 转成 __dict__ 再比较</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="7-案例" class="headerLink">
    <a href="#7-%e6%a1%88%e4%be%8b" class="header-mark"></a>7. 案例</h3><h4 id="71-html-table-元素的处理" class="headerLink">
    <a href="#71-html-table-%e5%85%83%e7%b4%a0%e7%9a%84%e5%a4%84%e7%90%86" class="header-mark"></a>7.1 html table 元素的处理</h4><p>在做爬虫工作时，有时会遇到这样的 table 元素：</p>
<figure><img src="/images/python-tips-and-tricks/html-table.webp"/>
</figure>

<p>对这种 html 元素，我一般会直接把它转换成 list，结果如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="n">table</span> <span class="o">=</span> <span class="p">[[</span><span class="s1">&#39;label1&#39;</span><span class="p">,</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span> <span class="s1">&#39;label2&#39;</span><span class="p">,</span> <span class="s1">&#39;value2&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">         <span class="p">[</span><span class="s1">&#39;label3&#39;</span><span class="p">,</span> <span class="s1">&#39;value3&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">         <span class="p">[</span><span class="s1">&#39;label4&#39;</span><span class="p">,</span> <span class="s1">&#39;value4&#39;</span><span class="p">,</span> <span class="s1">&#39;label5&#39;</span><span class="p">,</span> <span class="s1">&#39;value5&#39;</span><span class="p">],</span>
</span></span><span class="line"><span class="cl">         <span class="o">...</span>
</span></span><span class="line"><span class="cl">         <span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了方便索引，现在我需要把上面的数据转换成下面这个样子的 dict</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;label1&#39;</span><span class="p">:</span> <span class="s1">&#39;value1&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;label2&#39;</span><span class="p">:</span> <span class="s1">&#39;value2&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;label3&#39;</span><span class="p">:</span> <span class="s1">&#39;value3&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;label4&#39;</span><span class="p">:</span> <span class="s1">&#39;value4&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s1">&#39;label5&#39;</span><span class="p">:</span> <span class="s1">&#39;value5&#39;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果是平常，大概需要写循环了。不过如果用刚刚说到的几个函数的话，会变得异常简单</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"> # 1. 分组
</span></span><span class="line"><span class="cl">groups = flat_map(group_each_2, table)
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 1.1 flat_map 返回的是迭代器，list 后内容如下：
</span></span><span class="line"><span class="cl"># [(&#39;label1&#39;, &#39;value1&#39;),
</span></span><span class="line"><span class="cl">#  (&#39;label2&#39;, &#39;value2&#39;),
</span></span><span class="line"><span class="cl">#  (&#39;label3&#39;, &#39;value3&#39;),
</span></span><span class="line"><span class="cl">#  (&#39;label4&#39;, &#39;value4&#39;),
</span></span><span class="line"><span class="cl">#  (&#39;label5&#39;, &#39;value5&#39;)]
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 2. 转换成 dict
</span></span><span class="line"><span class="cl">key_values = dict(groups)   # 得到的 key_values 与上面需要的 dict 别无二致。
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三常见错误" class="headerLink">
    <a href="#%e4%b8%89%e5%b8%b8%e8%a7%81%e9%94%99%e8%af%af" class="header-mark"></a>三、常见错误</h2><h3 id="1-浅复制导致错误" class="headerLink">
    <a href="#1-%e6%b5%85%e5%a4%8d%e5%88%b6%e5%af%bc%e8%87%b4%e9%94%99%e8%af%af" class="header-mark"></a>1. 浅复制导致错误</h3><p>利用好浅复制，可以非常简洁的实现前面提到的<a href="##group_size" rel="">元素分组/group</a>功能，但是如果不注意，也会导致非常隐晦的错误！</p>
<p>比如在使用 * 作为重复运算符时，如果目标是一个嵌套的可变对象，就会产生令人费解的问题：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="n">a</span><span class="p">]</span> <span class="o">*</span> <span class="mi">3</span>  <span class="c1"># nested</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
</span></span><span class="line"><span class="cl"><span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为 * 并不是深拷贝，它只是简单地复制了 [a] 这个列表，里面的 [1,2,3] 都是同一个对象，所以改了一个，所有的都会改变。
<strong>解决方法是不要使用 * 号，改用<code>[a.copy() for i in range(3)]</code> 执行深拷贝。如果不需要修改，请直接使用不可变对象。</strong></p>
<h3 id="2-变量作用域" class="headerLink">
    <a href="#2-%e5%8f%98%e9%87%8f%e4%bd%9c%e7%94%a8%e5%9f%9f" class="header-mark"></a>2. 变量作用域</h3><ol>
<li>Python 中<strong>只有模块，类以及函数才会引入新的作用域</strong>，其它的代码块是不会引入新的作用域的。（而在 C/Java 中，任何一个 <code>{}</code> 块就构成一个局部作用域。另外 Julia 中 for/while/try-catch 都是局部作用域，但 if-else 又不是局部作用域。总之这些小差别要注意。）</li>
<li>局部变量可以与外部变量同名，并且在其作用域中，局部变量会覆盖掉外部变量。
不知是出于实现简单或是性能，还是其他的原因，好像所有的语言都是这样的。其实我更希望变量的作用域覆盖会报错。</li>
<li>如果有函数与其他函数或变量（甚至某些保留字）同名，后定义的会覆盖掉先定义的。（这是因为 Python 中函数也是对象。而在 C/Java 中这是会报错的）</li>
</ol>
<p>此外，还有一个小问题，先看一个例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">():</span>     <span class="c1"># 单纯的从函数作用域访问外部作用域是没问题的</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> 
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再看一个问题举例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>  <span class="c1"># 这里应该是访问外部作用域</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span>     <span class="c1"># 可这里又定义了一个同名局部变量 i</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> 
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">()</span>   <span class="c1"># 于是就出错了</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">2</span><span class="p">,</span> <span class="ow">in</span> <span class="n">f</span>
</span></span><span class="line"><span class="cl"><span class="ne">UnboundLocalError</span><span class="p">:</span> <span class="n">local</span> <span class="n">variable</span> <span class="s1">&#39;i&#39;</span> <span class="n">referenced</span> <span class="n">before</span> <span class="n">assignment</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果在内部作用域先访问外部作用域，再定义一个同名的局部变量，解释器就懵逼了。
如果你其实想做的是改变全局变量 i 的值，就应该在开头声明 <code>global i</code>. 而如果 外部变量 i 不是存在于全局作用域，而是在某个闭合作用域内的话，就该用 <code>nonlocal i</code></p>
<h2 id="四自定义装饰器" class="headerLink">
    <a href="#%e5%9b%9b%e8%87%aa%e5%ae%9a%e4%b9%89%e8%a3%85%e9%a5%b0%e5%99%a8" class="header-mark"></a>四、自定义装饰器</h2><p>装饰器有两种：用函数定义的装饰器，还有用类定义的装饰器。函数装饰器最常用。</p>
<p>装饰器可用于装饰函数，修改函数/类的某些行为，或者将函数注册到别的地方。</p>
<h3 id="1-函数定义装饰器" class="headerLink">
    <a href="#1-%e5%87%bd%e6%95%b0%e5%ae%9a%e4%b9%89%e8%a3%85%e9%a5%b0%e5%99%a8" class="header-mark"></a>1. 函数定义装饰器</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@decc</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">gg</span><span class="p">(</span><span class="n">xx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 等同于</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">gg</span><span class="p">(</span><span class="n">xx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">gg</span> <span class="o">=</span> <span class="n">decc</span><span class="p">(</span><span class="n">gg</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="带参的装饰器" class="headerLink">
    <a href="#%e5%b8%a6%e5%8f%82%e7%9a%84%e8%a3%85%e9%a5%b0%e5%99%a8" class="header-mark"></a>带参的装饰器</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@decorator</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">F</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">F</span><span class="p">(</span><span class="mi">99</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 等同于</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">F</span><span class="p">(</span><span class="n">arg</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">F</span> <span class="o">=</span> <span class="n">decorator</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">)(</span><span class="n">F</span><span class="p">)</span>      <span class="c1"># Rebind F to result of decorator&#39;s return value</span>
</span></span><span class="line"><span class="cl"><span class="n">F</span><span class="p">(</span><span class="mi">99</span><span class="p">)</span>                                <span class="c1"># Essentially calls decorator(A, B)(F)(99)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面演示的是用函数定义的装饰器，也是最常用的装饰器。
装饰器接收的参数可以是各种各样的，下面是一个带参的装饰器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nd">@on_command</span><span class="p">(</span><span class="s2">&#34;info&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_info</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;这就是你需要的 info&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">on_command</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>  <span class="c1"># 调用此函数获得装饰器，这样就实现了带参装饰器</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">deco</span><span class="p">(</span><span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Callable</span><span class="p">:</span>  <span class="c1"># 这个才是真正的装饰器</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 将命令处理器注册到命令列表内</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">func</span>  <span class="c1"># 直接返回原函数，这样的话，多个装饰器就不会相互影响了。</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">deco</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 上面的等同于：</span>
</span></span><span class="line"><span class="cl"><span class="n">get_info</span> <span class="o">=</span> <span class="n">on_command</span><span class="p">(</span><span class="s2">&#34;info&#34;</span><span class="p">)(</span><span class="n">get_info</span><span class="p">)</span>  <span class="c1"># on_command(&#34;info&#34;) 返回真正的装饰器</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你的 <code>on_command</code> 有通用的部分，还可以将通用的部分抽离出来复用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">_deco_maker</span><span class="p">(</span><span class="n">event_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Callable</span><span class="p">:</span>  <span class="c1"># 调用这个，获取 on_xxx 的 deco_deco，</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">deco_deco</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Callable</span><span class="p">:</span>   <span class="c1"># 这个对应 on_xxx</span>
</span></span><span class="line"><span class="cl">        <span class="k">def</span> <span class="nf">deco</span><span class="p">(</span><span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Callable</span><span class="p">:</span> <span class="c1"># 这个才是真正的装饰器</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># do something </span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="n">func</span>  <span class="c1"># 返回原函数</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">deco</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">deco_deco</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>我们知道 Python 的类实际上是可以很方便的修改的，因此函数装饰器也能用于装饰类，修改类的某些行为。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">log_getattribute</span><span class="p">(</span><span class="bp">cls</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># Get the original implementation</span>
</span></span><span class="line"><span class="cl">    <span class="n">orig_getattribute</span> <span class="o">=</span> <span class="bp">cls</span><span class="o">.</span><span class="fm">__getattribute__</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Make a new definition</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">new_getattribute</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;getting:&#39;</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">orig_getattribute</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Attach to the class and return</span>
</span></span><span class="line"><span class="cl">    <span class="bp">cls</span><span class="o">.</span><span class="fm">__getattribute__</span> <span class="o">=</span> <span class="n">new_getattribute</span>  <span class="c1"># 修改了被装饰类 cls 的 __getattribute__</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="bp">cls</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example use</span>
</span></span><span class="line"><span class="cl"><span class="nd">@log_getattribute</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">spam</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">pass</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-类定义装饰器" class="headerLink">
    <a href="#2-%e7%b1%bb%e5%ae%9a%e4%b9%89%e8%a3%85%e9%a5%b0%e5%99%a8" class="header-mark"></a>2. 类定义装饰器</h3><p>类定义装饰器和函数定义装饰器的使用方式完全一致。它也可以用于装饰函数或者类。</p>
<p>那么为啥还需要类定义装饰器呢？它的优势在于类是可以继承的，这样的话，就能用继承的方式定义装饰器，将通用部分定义成超类。</p>
<p>类定义装饰器的定义方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># PythonDecorators/entry_exit_class.py</span>
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">entry_exit</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">f</span> <span class="o">=</span> <span class="n">f</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>  <span class="c1">#关键在于这个函数，它使此类的对象变成 Callable</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Entering&#34;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Exited&#34;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">f</span><span class="o">.</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@entry_exit</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func1</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;inside func1()&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 上面的装饰器相当于</span>
</span></span><span class="line"><span class="cl"><span class="n">func1</span> <span class="o">=</span> <span class="n">entry_exit</span><span class="p">(</span><span class="n">func1</span><span class="p">)</span>  <span class="c1"># 从这里看的话，装饰器的行为完全一致</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 接下来调用该函数（实际上是调用了 entry_exit 对象的 call 函数）</span>
</span></span><span class="line"><span class="cl"><span class="n">func1</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出结果如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Entering func1
</span></span><span class="line"><span class="cl">inside func1()
</span></span><span class="line"><span class="cl">Exited func1
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="五oop" class="headerLink">
    <a href="#%e4%ba%94oop" class="header-mark"></a>五、OOP</h2><ol>
<li>
<p>调用超类方法：</p>
<ul>
<li>直接通过<code>超类名.__init__(self,xx)</code>调用</li>
<li>通过<code>super(__class__, self).__init__()</code>调用。
（Python3 可直接用 <code>super().__init__()</code>
但是要搞清楚，<strong><a href="https://docs.python.org/3/library/functions.html#super" target="_blank" rel="noopener noreffer">super() 方法</a>返回的是一个代理类。另外被代理的类也不一定是其超类。如果不清楚这些差别，最好还是显式用方法一最好。</strong>）</li>
</ul>
</li>
<li>
<p>抽象超类：@abstractmethod</p>
</li>
<li>
<p><code>@staticmethod</code> <code>@classmethod</code> 与 Java 的 static 方法对比
python的类方法、静态方法，与java的静态方法：</p>
<ol>
<li>
<p>java 中 constants、utils 这样的静态类，对应的是python的一个模块（文件），类属性对应模块的全局属性，静态方法对应模块的函数</p>
</li>
<li>
<p>对于 java 中需要访问类属性的静态方法，如果它不属于第一类，应该用 <code>@classmethod</code> 实现它。classmethod最大的特点就是一定有一个 cls 传入。这种方法的主要用途是实现工厂函数。</p>
</li>
<li>
<p>对于不需要访问任何类属性，也不属于第一类的方法，应该用 <code>@staticmathod</code> 实现。这种方法其实完全不需要放到类里面，它就是一个独立的函数。（仍然放里面，是为了把功能类似的函数组织到一起而已。）</p>
</li>
</ol>
</li>
<li>
<p><code>__slots__</code>: 属性导出，不在该列表内的属性，若存在则为只读。不存在的话，就不存在。。
6.<code> __getattr__</code>: 拦截对不存在的属性的访问，可用于实现动态分配属性。</p>
</li>
<li>
<p><code>__getattribute__</code>: 和上面相同，但是它拦截对所有属性的访问，包括对已存在的属性的访问。</p>
</li>
<li>
<p>@property: 提供对属性访问的安全检查</p>
</li>
<li>
<p>descriptor: <strong>get</strong> <strong>set</strong> <strong>delete</strong> 控制对类的访问。（上面的 <strong>getattr</strong> 等是控制对类的属性的访问）</p>
</li>
<li>
<p>类构造器 <code>__new__</code>：在 <code>__init__</code> 之前运行，它接收一个 <code>cls</code> 参数，然后使用它构造并返回类实例 <code>self</code>。</p>
</li>
<li>
<p>类方法的 <code>cls</code> 即是当前类，是 type 的实例，<code>cls.xxx</code> 和 <code>&lt;类名&gt;.xxx</code> 调用结果是一致的。而 self 由 <code>__new__</code> 构造，是 cls 的实例。</p>
</li>
</ol>
<h3 id="元类-metaclasses" class="headerLink">
    <a href="#%e5%85%83%e7%b1%bb-metaclasses" class="header-mark"></a>元类 metaclasses</h3><p>元类，也就是用于创建class 的 class，算是很高级的话题了（If you wonder whether you need metaclasses, you don’t ）
元类的工作流程：</p>
<ol>
<li>拦截类的创建</li>
<li>修改类</li>
<li>返回修改之后的类</li>
</ol>
<p>详细直接看 <a href="http://blog.jobbole.com/21351/" target="_blank" rel="noopener noreffer">http://blog.jobbole.com/21351/</a> 吧。</p>
<h2 id="六查看-python-源码" class="headerLink">
    <a href="#%e5%85%ad%e6%9f%a5%e7%9c%8b-python-%e6%ba%90%e7%a0%81" class="header-mark"></a>六、查看 Python 源码</h2><p>对一般的标准库的模块，要查看其具体的 Python 实现是很简单的：直接通过 <code>__file__</code> 属性就能看到 <code>.py</code> 文件的位置。</p>
<p>但是 Python 很多功能是 C 写的，对于这类函数/类，<code>__file__</code> 就没啥用了。</p>
<p>如果是需要查看 <a href="https://stackoverflow.com/questions/8608587/finding-the-source-code-for-built-in-python-functions" target="_blank" rel="noopener noreffer">builtins 模块</a> 的具体实现，直接查看 <a href="https://github.com/python/cpython/blob/master/Python/bltinmodule.c" target="_blank" rel="noopener noreffer">Python/bltinmodule.c</a> 就行。</p>
<p>其他 C 模块的源码，待补充具体的查看方法。</p>
<h2 id="七参考文档" class="headerLink">
    <a href="#%e4%b8%83%e5%8f%82%e8%80%83%e6%96%87%e6%a1%a3" class="header-mark"></a>七、参考文档</h2><ul>
<li><a href="https://www.jb51.net/article/140443.htm" target="_blank" rel="noopener noreffer">Python中一些不为人知的基础技巧总结</a></li>
<li><a href="https://docs.python.org/3/" target="_blank" rel="noopener noreffer">Python3 官方文档</a></li>
</ul>
]]></content></entry><entry><title type="html">本站统计数据</title><link href="https://thiscute.world/statistics/"/><id>https://thiscute.world/statistics/</id><author><name>ryan4yin</name></author><published>2022-02-07T18:56:35+08:00</published><updated>2022-02-07T18:56:35+08:00</updated><content type="html"><![CDATA[<blockquote>
    <p>更新时间: 2022-08-14T15:20UTC&#43;08:00</p>
</blockquote>
<h2 id="一全站统计" class="headerLink">
    <a href="#%e4%b8%80%e5%85%a8%e7%ab%99%e7%bb%9f%e8%ae%a1" class="header-mark"></a>一、全站统计</h2>























































































































































    <table class="center">
        <thead>
        <tr>
        <th>总字数</th>
        <th>总访客数 UV</th>
        <th>总访问量 PV</th>
        <th>总阅读时长</th>
        <th>人均阅读时长</th>
        </tr>
        </thead>
        <tbody>
        <tr style="text-align:center">
            <td>267929</td>
            <td style="color:tomato;"><strong>31697</strong></td>
            <td>78543</td>
            <td>27 days, 13h 45m 23s</td>
            <td style="color:dodgerblue;"><strong>01m 15s</strong></td>
            </tr>
        </tbody>
    </table>


<h2 id="二90-天阅读排行" class="headerLink">
    <a href="#%e4%ba%8c90-%e5%a4%a9%e9%98%85%e8%af%bb%e6%8e%92%e8%a1%8c" class="header-mark"></a>二、90 天阅读排行</h2>    <table>
        <thead style="white-space: nowrap;">
        <tr>
        <th>序号</th>
        <th>标题</th>
        <th>人均阅读时长</th>
        <th class="users">访客数</th>
        <th>访问量</th>
        </tr>
        </thead>
        <tbody>
        
        
        <tr>
            <td sort_key="1">1</td>
            <td sort_key="/posts/systemd-basics/#%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E"><a href="/posts/systemd-basics/#%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E">通过 systemctl 设置自定义 Service</a></td>
            <td sort_key="212">03m 32s</td>
            <td sort_key="1">1</td>
            <td sort_key="0">0</td>
            </tr>
        
        <tr>
            <td sort_key="2">2</td>
            <td sort_key="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/"><a href="/posts/practical-cryptography-basics-7-asymmetric-key-ciphers/">写给开发人员的实用密码学（七）—— 非对称密钥加密算法 RSA/ECC</a></td>
            <td sort_key="119">01m 59s</td>
            <td sort_key="548">548</td>
            <td sort_key="775">775</td>
            </tr>
        
        <tr>
            <td sort_key="3">3</td>
            <td sort_key="/posts/practical-cryptography-basics-3-key-derivation-function/"><a href="/posts/practical-cryptography-basics-3-key-derivation-function/">写给开发人员的实用密码学（三）—— MAC 与密钥派生函数 KDF</a></td>
            <td sort_key="115">01m 55s</td>
            <td sort_key="356">356</td>
            <td sort_key="446">446</td>
            </tr>
        
        <tr>
            <td sort_key="4">4</td>
            <td sort_key="/posts/practical-cryptography-basics-5-key-exchange/"><a href="/posts/practical-cryptography-basics-5-key-exchange/">写给开发人员的实用密码学（五）—— 密钥交换 DHKE 与完美前向保密 PFS</a></td>
            <td sort_key="114">01m 54s</td>
            <td sort_key="290">290</td>
            <td sort_key="360">360</td>
            </tr>
        
        <tr>
            <td sort_key="5">5</td>
            <td sort_key="/posts/kubernetes-best-practices/"><a href="/posts/kubernetes-best-practices/">Kubernetes 微服务最佳实践</a></td>
            <td sort_key="113">01m 53s</td>
            <td sort_key="278">278</td>
            <td sort_key="438">438</td>
            </tr>
        
        <tr>
            <td sort_key="6">6</td>
            <td sort_key="/posts/practical-cryptography-basics-2-hash/"><a href="/posts/practical-cryptography-basics-2-hash/">写给开发人员的实用密码学（二）—— 哈希函数</a></td>
            <td sort_key="112">01m 52s</td>
            <td sort_key="504">504</td>
            <td sort_key="642">642</td>
            </tr>
        
        <tr>
            <td sort_key="7">7</td>
            <td sort_key="/posts/expirence-of-vault/"><a href="/posts/expirence-of-vault/">secrets 管理工具 Vault 的介绍、安装及使用</a></td>
            <td sort_key="111">01m 51s</td>
            <td sort_key="350">350</td>
            <td sort_key="494">494</td>
            </tr>
        
        <tr>
            <td sort_key="8">8</td>
            <td sort_key="/posts/2021-summary/"><a href="/posts/2021-summary/">2021 年年终总结</a></td>
            <td sort_key="105">01m 45s</td>
            <td sort_key="91">91</td>
            <td sort_key="133">133</td>
            </tr>
        
        <tr>
            <td sort_key="9">9</td>
            <td sort_key="/posts/iptables-and-container-networks/"><a href="/posts/iptables-and-container-networks/">iptables 及 docker 容器网络分析</a></td>
            <td sort_key="96">01m 36s</td>
            <td sort_key="236">236</td>
            <td sort_key="378">378</td>
            </tr>
        
        <tr>
            <td sort_key="10">10</td>
            <td sort_key="/posts/expirence-of-argo-workflow/"><a href="/posts/expirence-of-argo-workflow/">云原生流水线 Argo Workflows 的安装、使用以及个人体验</a></td>
            <td sort_key="92">01m 32s</td>
            <td sort_key="480">480</td>
            <td sort_key="708">708</td>
            </tr>
        
        <tr>
            <td sort_key="11">11</td>
            <td sort_key="/posts/about-tls-cert/"><a href="/posts/about-tls-cert/">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></td>
            <td sort_key="92">01m 32s</td>
            <td sort_key="596">596</td>
            <td sort_key="857">857</td>
            </tr>
        
        <tr>
            <td sort_key="12">12</td>
            <td sort_key="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/"><a href="/posts/practical-cryptography-basics-6-symmetric-key-ciphers/">写给开发人员的实用密码学（六）—— 对称密钥加密算法</a></td>
            <td sort_key="87">01m 27s</td>
            <td sort_key="567">567</td>
            <td sort_key="686">686</td>
            </tr>
        
        <tr>
            <td sort_key="13">13</td>
            <td sort_key="/posts/practical-cryptography-basics-4-secure-random-generators/"><a href="/posts/practical-cryptography-basics-4-secure-random-generators/">写给开发人员的实用密码学（四）—— 安全随机数生成器 CSPRNG</a></td>
            <td sort_key="84">01m 24s</td>
            <td sort_key="311">311</td>
            <td sort_key="345">345</td>
            </tr>
        
        <tr>
            <td sort_key="14">14</td>
            <td sort_key="/posts/linux-virtual-network-interfaces/"><a href="/posts/linux-virtual-network-interfaces/">Linux 中的虚拟网络接口</a></td>
            <td sort_key="77">01m 17s</td>
            <td sort_key="232">232</td>
            <td sort_key="292">292</td>
            </tr>
        
        <tr>
            <td sort_key="15">15</td>
            <td sort_key="/posts/about-nat/"><a href="/posts/about-nat/">NAT 网关、NAT 穿越以及虚拟网络</a></td>
            <td sort_key="70">01m 10s</td>
            <td sort_key="369">369</td>
            <td sort_key="513">513</td>
            </tr>
        
        <tr>
            <td sort_key="16">16</td>
            <td sort_key="/posts/practical-cryptography-basics-1/"><a href="/posts/practical-cryptography-basics-1/">写给开发人员的实用密码学（一）—— 概览</a></td>
            <td sort_key="68">01m 08s</td>
            <td sort_key="524">524</td>
            <td sort_key="810">810</td>
            </tr>
        
        <tr>
            <td sort_key="17">17</td>
            <td sort_key="/posts/about-dns-protocol/"><a href="/posts/about-dns-protocol/">Linux网络学习笔记（二）：域名解析(DNS)——以 CoreDNS 为例</a></td>
            <td sort_key="65">01m 05s</td>
            <td sort_key="173">173</td>
            <td sort_key="204">204</td>
            </tr>
        
        <tr>
            <td sort_key="18">18</td>
            <td sort_key="/posts/consistency-and-consensus-algorithm/"><a href="/posts/consistency-and-consensus-algorithm/">分布式数据库的一致性问题与共识算法</a></td>
            <td sort_key="60">01m 00s</td>
            <td sort_key="62">62</td>
            <td sort_key="77">77</td>
            </tr>
        
        <tr>
            <td sort_key="19">19</td>
            <td sort_key="/posts/the-thoughtful-youth/"><a href="/posts/the-thoughtful-youth/">「转」且看有思想的年轻人</a></td>
            <td sort_key="58">58s</td>
            <td sort_key="68">68</td>
            <td sort_key="74">74</td>
            </tr>
        
        <tr>
            <td sort_key="20">20</td>
            <td sort_key="/en/posts/2021-summary/"><a href="/en/posts/2021-summary/">Summary of My 2021</a></td>
            <td sort_key="51">51s</td>
            <td sort_key="5">5</td>
            <td sort_key="5">5</td>
            </tr>
        
        <tr>
            <td sort_key="21">21</td>
            <td sort_key="/posts/websocket-http2-and-grpc/"><a href="/posts/websocket-http2-and-grpc/">WebSocket、HTTP/2 与 gRPC</a></td>
            <td sort_key="47">47s</td>
            <td sort_key="246">246</td>
            <td sort_key="263">263</td>
            </tr>
        
        <tr>
            <td sort_key="22">22</td>
            <td sort_key="/posts/qemu-kvm-usage/"><a href="/posts/qemu-kvm-usage/">QEMU-KVM 虚拟化环境的搭建与使用</a></td>
            <td sort_key="43">43s</td>
            <td sort_key="674">674</td>
            <td sort_key="817">817</td>
            </tr>
        
        <tr>
            <td sort_key="23">23</td>
            <td sort_key="/posts/expirence-of-pulumi/"><a href="/posts/expirence-of-pulumi/">Pulumi 使用体验 - 基础设施代码化</a></td>
            <td sort_key="41">41s</td>
            <td sort_key="195">195</td>
            <td sort_key="213">213</td>
            </tr>
        
        <tr>
            <td sort_key="24">24</td>
            <td sort_key="/posts/finops-for-kubernetes/"><a href="/posts/finops-for-kubernetes/">FinOps for Kubernetes - 如何拆分 Kubernetes 成本</a></td>
            <td sort_key="39">39s</td>
            <td sort_key="353">353</td>
            <td sort_key="487">487</td>
            </tr>
        
        <tr>
            <td sort_key="25">25</td>
            <td sort_key="/posts/2020-summary/"><a href="/posts/2020-summary/">2020 年年终总结</a></td>
            <td sort_key="36">36s</td>
            <td sort_key="48">48</td>
            <td sort_key="51">51</td>
            </tr>
        
        <tr>
            <td sort_key="26">26</td>
            <td sort_key="/posts/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/"><a href="/posts/likenttt-2021-04-11-xianlin-half-marathon-1_33_12/">「转」仙马赛记——我又 PB 了</a></td>
            <td sort_key="36">36s</td>
            <td sort_key="24">24</td>
            <td sort_key="24">24</td>
            </tr>
        
        <tr>
            <td sort_key="27">27</td>
            <td sort_key="/posts/socat-netcat/"><a href="/posts/socat-netcat/">Linux 网络工具中的瑞士军刀 - socat &amp; netcat</a></td>
            <td sort_key="35">35s</td>
            <td sort_key="388">388</td>
            <td sort_key="429">429</td>
            </tr>
        
        <tr>
            <td sort_key="28">28</td>
            <td sort_key="/posts/opensuse-instruction/"><a href="/posts/opensuse-instruction/">openSUSE 使用指南</a></td>
            <td sort_key="35">35s</td>
            <td sort_key="138">138</td>
            <td sort_key="151">151</td>
            </tr>
        
        <tr>
            <td sort_key="29">29</td>
            <td sort_key="/posts/python-tips-and-tricks/"><a href="/posts/python-tips-and-tricks/">Python 实用技巧与常见错误集锦</a></td>
            <td sort_key="35">35s</td>
            <td sort_key="31">31</td>
            <td sort_key="41">41</td>
            </tr>
        
        <tr>
            <td sort_key="30">30</td>
            <td sort_key="/posts/jwt-algorithm-key-generation/"><a href="/posts/jwt-algorithm-key-generation/">JWT 签名算法 HS256、RS256 及 ES256 及密钥生成</a></td>
            <td sort_key="33">33s</td>
            <td sort_key="390">390</td>
            <td sort_key="458">458</td>
            </tr>
        
        <tr>
            <td sort_key="31">31</td>
            <td sort_key="/posts/2019-summary/"><a href="/posts/2019-summary/">2019 年年终总结</a></td>
            <td sort_key="30">30s</td>
            <td sort_key="32">32</td>
            <td sort_key="34">34</td>
            </tr>
        
        <tr>
            <td sort_key="32">32</td>
            <td sort_key="/posts/tcpdump-and-wireshark/"><a href="/posts/tcpdump-and-wireshark/">使用 tcpdump 和 Wireshark 进行远程实时抓包分析</a></td>
            <td sort_key="27">27s</td>
            <td sort_key="324">324</td>
            <td sort_key="352">352</td>
            </tr>
        
        <tr>
            <td sort_key="33">33</td>
            <td sort_key="/posts/common-commands-for-various-operating-systems/"><a href="/posts/common-commands-for-various-operating-systems/">Linux/Windows/MacOSX 系统常用命令集锦</a></td>
            <td sort_key="27">27s</td>
            <td sort_key="58">58</td>
            <td sort_key="64">64</td>
            </tr>
        
        <tr>
            <td sort_key="34">34</td>
            <td sort_key="/posts/death-is-but-a-dream/"><a href="/posts/death-is-but-a-dream/">Death Is But a Dream</a></td>
            <td sort_key="26">26s</td>
            <td sort_key="234">234</td>
            <td sort_key="335">335</td>
            </tr>
        
        <tr>
            <td sort_key="35">35</td>
            <td sort_key="/posts/use-istio-for-jwt-auth/"><a href="/posts/use-istio-for-jwt-auth/">使用 Istio 进行 JWT 身份验证（充当 API 网关）</a></td>
            <td sort_key="25">25s</td>
            <td sort_key="165">165</td>
            <td sort_key="206">206</td>
            </tr>
        
        <tr>
            <td sort_key="36">36</td>
            <td sort_key="/posts/mathematics-in-euclidean-gcd/"><a href="/posts/mathematics-in-euclidean-gcd/">欧几里得算法求最大公约数(GCD)的数学原理</a></td>
            <td sort_key="23">23s</td>
            <td sort_key="96">96</td>
            <td sort_key="99">99</td>
            </tr>
        
        <tr>
            <td sort_key="37">37</td>
            <td sort_key="/posts/revolution-and-innovation/"><a href="/posts/revolution-and-innovation/">变革与创新</a></td>
            <td sort_key="19">19s</td>
            <td sort_key="165">165</td>
            <td sort_key="233">233</td>
            </tr>
        
        <tr>
            <td sort_key="38">38</td>
            <td sort_key="/posts/manjaro-instruction/"><a href="/posts/manjaro-instruction/">Manjaro 使用指南</a></td>
            <td sort_key="19">19s</td>
            <td sort_key="134">134</td>
            <td sort_key="163">163</td>
            </tr>
        
        <tr>
            <td sort_key="39">39</td>
            <td sort_key="/posts/kubernetes-common-errors-and-solutions/"><a href="/posts/kubernetes-common-errors-and-solutions/">Kubernetes 常见错误、原因及处理方法</a></td>
            <td sort_key="16">16s</td>
            <td sort_key="179">179</td>
            <td sort_key="190">190</td>
            </tr>
        
        <tr>
            <td sort_key="40">40</td>
            <td sort_key="/posts/kubernetes-deployment-using-kubeadm/"><a href="/posts/kubernetes-deployment-using-kubeadm/">部署一个 Kubernetes 集群</a></td>
            <td sort_key="16">16s</td>
            <td sort_key="169">169</td>
            <td sort_key="171">171</td>
            </tr>
        

        </tbody>
    </table>
    <script type="text/javascript">
        const getCellValue = (tr, idx) => {
            const td = tr.children[idx];
            return Number(td.attributes.sort_key.value) || td.attributes.sort_key.value;
        };

        const comparer = (idx, desc) => (a, b) => ((v1, v2) => 
            v1 !== '' && v2 !== '' && !isNaN(v1) && !isNaN(v2) ? v1 - v2 : v1.toString().localeCompare(v2)
            )(getCellValue(desc ? b : a, idx), getCellValue(desc ? a : b, idx));

        
        document.querySelectorAll('th').forEach(th => th.addEventListener('click', (() => {
            const table = th.closest('table');
            const tbody = table.querySelector('tbody');
            Array.from(tbody.querySelectorAll('tr'))
                .sort(comparer(Array.from(th.parentNode.children).indexOf(th), this.desc = !this.desc))
                .forEach(tr => tbody.appendChild(tr));
        })));
    </script>
<h2 id="三说明" class="headerLink">
    <a href="#%e4%b8%89%e8%af%b4%e6%98%8e" class="header-mark"></a>三、说明</h2><blockquote>
<p>此页面受 <a href="https://geektutu.com/post/blog-experience-7.html" target="_blank" rel="noopener noreffer">极客兔兔 - 博客折腾记(七) - Gitalk Plus </a> 的启发而创建，其核心诉求是「<strong>帮助访客发现本站的优质文章</strong>」~</p>
</blockquote>
<blockquote>
<p>此页面的数据由 <a href="https://github.com/ryan4yin/ryan4yin.space/blob/main/.github/workflows/gh-pages.yaml" target="_blank" rel="noopener noreffer">Github Action</a> 自动从 Google Analytics 获取，<del>更新间隔为 6 小时</del>，目前由博主看心情更新。</p>
</blockquote>

<div class="animation-wrapper">
  <div class="particle particle-1"></div>
  <div class="particle particle-2"></div>
  <div class="particle particle-3"></div>
  <div class="particle particle-4"></div>
</div>

<style>
   
   

  .animation-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -100;
  }

  .particle,
  .particle:after {
    background: transparent;
  }

  .particle:after {
    position: absolute;
    content: "";
    top: 2560px;
  }

  .particle-1 {
    -webkit-animation: animParticle 60s linear infinite;
    animation: animParticle 60s linear infinite;
    box-shadow: 0px 0px #fff, 1231px 1530px #fff, 336px 2471px #fff,
      2385px 128px #fff, 2436px 1283px #fff, 549px 681px #fff,
      1775px 1144px #fff, 238px 1396px #fff, 1330px 1558px #fff,
      2060px 342px #fff, 1986px 1672px #fff, 1532px 702px #fff,
      1313px 1459px #fff, 2406px 1616px #fff, 1529px 802px #fff,
      1267px 680px #fff, 2258px 2109px #fff, 1325px 22px #fff,
      1578px 1045px #fff, 945px 2256px #fff, 1400px 1441px #fff,
      1652px 2152px #fff, 2513px 969px #fff, 2192px 1352px #fff,
      793px 334px #fff, 1371px 1086px #fff, 2408px 1898px #fff, 475px 840px #fff,
      539px 1108px #fff, 556px 1499px #fff, 643px 122px #fff, 2370px 1975px #fff,
      1196px 1786px #fff, 308px 1834px #fff, 1957px 1569px #fff,
      875px 339px #fff, 562px 412px #fff, 1187px 2258px #fff, 1406px 1824px #fff,
      1172px 1792px #fff, 235px 1489px #fff, 2081px 878px #fff, 925px 176px #fff,
      953px 1829px #fff, 38px 48px #fff, 1976px 1994px #fff, 1524px 1567px #fff,
      1397px 1141px #fff, 2014px 1773px #fff, 1638px 1832px #fff,
      1150px 465px #fff, 1212px 1854px #fff, 122px 20px #fff, 2493px 2361px #fff,
      2221px 194px #fff, 480px 2020px #fff, 2340px 403px #fff,
      1975px 2507px #fff, 1434px 142px #fff, 963px 871px #fff,
      2379px 1765px #fff, 2346px 100px #fff, 1931px 1308px #fff,
      527px 814px #fff, 549px 1732px #fff, 943px 886px #fff, 1592px 2277px #fff,
      1339px 810px #fff, 871px 2016px #fff, 2121px 763px #fff,
      1962px 1114px #fff, 2498px 550px #fff, 107px 586px #fff, 316px 1033px #fff,
      2104px 2120px #fff, 1933px 1786px #fff, 1377px 2457px #fff,
      2250px 1010px #fff, 1314px 2316px #fff, 1339px 947px #fff,
      122px 1014px #fff, 558px 2354px #fff, 1250px 1790px #fff,
      1185px 2144px #fff, 2432px 158px #fff, 1911px 2148px #fff,
      1177px 804px #fff, 2504px 1254px #fff, 617px 1084px #fff,
      1959px 1325px #fff, 2394px 2081px #fff, 395px 735px #fff,
      221px 1891px #fff, 652px 2245px #fff, 1225px 1023px #fff,
      1542px 2053px #fff, 876px 2178px #fff, 479px 1915px #fff,
      2297px 1799px #fff, 2160px 387px #fff, 160px 358px #fff,
      1122px 2164px #fff, 2056px 1402px #fff, 2133px 1470px #fff,
      1508px 1865px #fff, 250px 2157px #fff, 715px 1452px #fff,
      2095px 1539px #fff, 1860px 1450px #fff, 185px 2013px #fff,
      1855px 1878px #fff, 690px 2520px #fff, 2250px 838px #fff,
      1547px 1752px #fff, 1103px 615px #fff, 151px 262px #fff, 1630px 577px #fff,
      769px 2448px #fff, 1938px 2347px #fff, 700px 1634px #fff,
      2105px 2053px #fff, 1498px 49px #fff, 799px 512px #fff, 1278px 744px #fff,
      2301px 364px #fff, 1059px 2066px #fff, 2116px 2424px #fff,
      1884px 1046px #fff, 699px 1101px #fff, 62px 1893px #fff, 370px 161px #fff,
      298px 1288px #fff, 1972px 2211px #fff, 1834px 2350px #fff,
      1591px 1118px #fff, 1343px 1730px #fff, 706px 850px #fff,
      317px 1171px #fff, 1395px 2529px #fff, 1040px 2523px #fff,
      793px 2535px #fff, 2180px 142px #fff, 2016px 2511px #fff,
      1032px 1204px #fff, 499px 625px #fff, 130px 2064px #fff, 1371px 758px #fff,
      1045px 2018px #fff, 1954px 309px #fff, 1445px 2514px #fff,
      839px 1523px #fff, 920px 238px #fff, 1421px 1105px #fff, 668px 1517px #fff,
      2045px 2344px #fff, 2465px 1619px #fff, 403px 48px #fff,
      1142px 1102px #fff, 2066px 1803px #fff, 658px 1744px #fff,
      721px 2062px #fff, 2180px 827px #fff, 2310px 111px #fff, 935px 808px #fff,
      1121px 1108px #fff, 1424px 1998px #fff, 821px 1317px #fff,
      2425px 1354px #fff, 305px 1422px #fff, 169px 1559px #fff,
      1850px 425px #fff, 719px 1507px #fff, 1650px 1803px #fff, 275px 402px #fff,
      1038px 772px #fff, 404px 105px #fff, 78px 2119px #fff, 133px 110px #fff,
      2559px 944px #fff, 688px 212px #fff, 869px 2266px #fff, 983px 840px #fff,
      1914px 2154px #fff, 1376px 941px #fff, 2064px 739px #fff,
      1979px 1255px #fff, 592px 1175px #fff, 283px 253px #fff, 696px 2501px #fff,
      1561px 1505px #fff, 745px 2233px #fff, 1180px 1104px #fff,
      1046px 1573px #fff, 1842px 2374px #fff, 1199px 2423px #fff,
      1680px 1359px #fff, 2020px 626px #fff, 1226px 1082px #fff,
      1894px 1824px #fff, 451px 2216px #fff, 544px 1263px #fff, 408px 4px #fff,
      1883px 1020px #fff, 1917px 1777px #fff, 1353px 1808px #fff,
      425px 85px #fff, 1165px 1787px #fff, 561px 1978px #fff, 712px 874px #fff,
      231px 2176px #fff, 516px 8px #fff, 199px 742px #fff, 584px 2388px #fff,
      434px 1584px #fff, 813px 2391px #fff, 1427px 2254px #fff,
      1894px 2083px #fff, 521px 2507px #fff, 391px 352px #fff, 664px 245px #fff,
      179px 13px #fff, 1784px 1939px #fff, 438px 1285px #fff, 975px 1780px #fff,
      1285px 1554px #fff, 924px 2301px #fff, 2340px 1621px #fff,
      1844px 2336px #fff, 640px 637px #fff, 1279px 1236px #fff,
      2419px 2546px #fff, 395px 1790px #fff, 959px 2383px #fff,
      1449px 650px #fff, 2378px 747px #fff, 1360px 24px #fff, 1726px 1609px #fff,
      1632px 1945px #fff, 2295px 2515px #fff, 594px 1339px #fff,
      351px 1327px #fff, 1972px 1942px #fff, 2092px 1604px #fff,
      1580px 1123px #fff, 1511px 2062px #fff, 1551px 1208px #fff,
      2014px 144px #fff, 2373px 2160px #fff, 2041px 823px #fff,
      1682px 1919px #fff, 2224px 338px #fff, 1224px 461px #fff,
      2256px 664px #fff, 2505px 1987px #fff, 2308px 2021px #fff,
      71px 2249px #fff, 1510px 944px #fff, 2148px 726px #fff, 535px 2236px #fff,
      793px 739px #fff, 930px 2533px #fff, 1353px 192px #fff, 1691px 998px #fff,
      1675px 504px #fff, 1632px 2410px #fff, 20px 1985px #fff, 701px 1622px #fff,
      2181px 1612px #fff, 184px 722px #fff, 720px 1488px #fff,
      2300px 1201px #fff, 2173px 402px #fff, 262px 560px #fff, 1379px 347px #fff,
      958px 1285px #fff, 958px 46px #fff, 2157px 1926px #fff, 1018px 1302px #fff,
      231px 1934px #fff, 2407px 1365px #fff, 2483px 1370px #fff,
      1038px 1917px #fff, 1218px 2256px #fff, 1702px 64px #fff,
      2141px 2350px #fff, 851px 2437px #fff, 402px 566px #fff, 2px 1430px #fff,
      341px 1849px #fff, 2210px 1148px #fff, 1071px 2370px #fff,
      1476px 306px #fff, 1857px 395px #fff, 1157px 349px #fff, 1916px 689px #fff,
      1800px 1989px #fff, 477px 2268px #fff, 184px 1033px #fff, 597px 720px #fff,
      52px 1638px #fff, 1338px 1170px #fff, 1190px 1946px #fff,
      981px 1481px #fff, 2096px 715px #fff, 1861px 658px #fff,
      1139px 1485px #fff, 1471px 1029px #fff, 1639px 424px #fff,
      558px 2453px #fff, 452px 987px #fff, 630px 1639px #fff, 2353px 2553px #fff,
      1847px 51px #fff, 884px 1805px #fff, 2280px 1759px #fff, 1490px 491px #fff,
      747px 1064px #fff, 2220px 1118px #fff, 2080px 747px #fff,
      1438px 1230px #fff, 295px 1674px #fff, 1294px 291px #fff,
      1148px 1742px #fff, 670px 1968px #fff, 2544px 741px #fff,
      426px 2035px #fff, 2187px 2309px #fff, 178px 2227px #fff,
      768px 2459px #fff, 1580px 1283px #fff, 1740px 200px #fff,
      352px 1310px #fff, 581px 602px #fff, 1439px 274px #fff, 2002px 1410px #fff,
      225px 1490px #fff, 2292px 1251px #fff, 1854px 760px #fff, 704px 221px #fff,
      385px 1883px #fff, 2352px 1092px #fff, 792px 1590px #fff,
      672px 1419px #fff, 1971px 497px #fff, 2505px 1312px #fff,
      102px 2102px #fff, 2204px 1555px #fff, 2000px 1593px #fff,
      2173px 1802px #fff, 1415px 237px #fff, 895px 1877px #fff,
      710px 1154px #fff, 251px 2478px #fff, 1266px 1534px #fff,
      2186px 1466px #fff, 1518px 2448px #fff, 515px 2525px #fff,
      1634px 2324px #fff, 1706px 683px #fff, 292px 1485px #fff,
      872px 2046px #fff, 658px 437px #fff, 2367px 1938px #fff,
      2018px 2543px #fff, 551px 542px #fff, 1711px 2307px #fff,
      2467px 999px #fff, 2046px 630px #fff, 1307px 2344px #fff,
      1893px 1311px #fff, 2536px 2425px #fff, 1777px 19px #fff,
      1845px 2044px #fff, 1261px 454px #fff, 2333px 2299px #fff,
      1019px 2349px #fff, 2074px 1014px #fff, 806px 1290px #fff,
      2152px 637px #fff, 980px 534px #fff, 199px 1781px #fff, 2091px 1219px #fff,
      917px 1990px #fff, 172px 714px #fff, 395px 2339px #fff, 35px 764px #fff,
      2110px 1796px #fff, 62px 996px #fff, 1340px 490px #fff, 1950px 797px #fff,
      2116px 72px #fff, 671px 2088px #fff, 2023px 1819px #fff, 90px 1219px #fff,
      1685px 282px #fff, 1843px 873px #fff, 100px 1446px #fff,
      2118px 1215px #fff, 1973px 1591px #fff, 2185px 1292px #fff,
      1270px 804px #fff, 2171px 1348px #fff, 2268px 6px #fff, 1580px 651px #fff,
      1806px 1438px #fff, 2435px 181px #fff, 437px 578px #fff,
      1924px 1356px #fff, 602px 1111px #fff, 2455px 1226px #fff,
      1887px 392px #fff, 730px 1492px #fff, 697px 2141px #fff, 852px 466px #fff,
      1px 1641px #fff, 788px 514px #fff, 183px 321px #fff, 932px 1224px #fff,
      1102px 692px #fff, 1587px 976px #fff, 1395px 2290px #fff,
      144px 2480px #fff, 623px 2164px #fff, 2098px 2043px #fff,
      336px 1662px #fff, 2191px 2279px #fff, 577px 2027px #fff,
      2215px 2483px #fff, 218px 2083px #fff, 2182px 122px #fff, 659px 791px #fff,
      317px 531px #fff, 980px 1456px #fff, 2533px 578px #fff, 595px 2478px #fff,
      2200px 1766px #fff, 2107px 1970px #fff, 1935px 1295px #fff,
      1822px 1691px #fff, 787px 1129px #fff, 1051px 718px #fff,
      915px 2488px #fff, 2037px 1394px #fff, 341px 319px #fff, 1843px 410px #fff,
      1501px 963px #fff, 404px 297px #fff, 1234px 1644px #fff, 883px 74px #fff,
      491px 2414px #fff, 334px 386px #fff, 951px 1852px #fff, 2194px 274px #fff,
      1424px 330px #fff, 1636px 995px #fff, 1566px 2450px #fff,
      544px 1430px #fff, 630px 1056px #fff, 925px 1203px #fff, 362px 101px #fff,
      1442px 834px #fff, 1786px 2360px #fff, 1611px 276px #fff,
      1715px 2151px #fff, 652px 2192px #fff, 589px 928px #fff,
      2460px 1658px #fff, 2408px 1139px #fff, 967px 1843px #fff,
      379px 720px #fff, 1832px 1057px #fff, 2234px 1836px #fff,
      436px 2526px #fff, 1327px 781px #fff, 1835px 768px #fff, 1037px 95px #fff,
      1422px 405px #fff, 1880px 758px #fff, 2291px 1828px #fff,
      2053px 2261px #fff, 121px 2256px #fff, 1460px 801px #fff, 64px 2344px #fff,
      97px 83px #fff, 2046px 1880px #fff, 866px 1852px #fff, 1317px 2444px #fff,
      1139px 168px #fff, 2413px 2333px #fff, 2289px 1063px #fff,
      2317px 816px #fff, 1773px 1366px #fff, 916px 1909px #fff,
      1303px 2052px #fff, 1406px 1299px #fff, 439px 2455px #fff,
      1113px 188px #fff, 1504px 462px #fff, 1376px 2373px #fff,
      495px 2084px #fff, 2198px 626px #fff, 2119px 1814px #fff, 86px 2541px #fff,
      1107px 854px #fff, 826px 1258px #fff, 2234px 1899px #fff, 88px 807px #fff,
      1982px 2487px #fff, 2035px 196px #fff, 148px 2103px #fff, 36px 2551px #fff,
      1842px 1164px #fff, 1858px 232px #fff, 405px 989px #fff,
      2432px 1061px #fff, 456px 1701px #fff, 427px 11px #fff, 588px 1308px #fff,
      1541px 620px #fff, 1827px 538px #fff, 1511px 1873px #fff,
      1485px 2156px #fff, 1287px 531px #fff, 1139px 1362px #fff,
      1621px 1023px #fff, 2380px 446px #fff, 649px 868px #fff, 596px 1417px #fff,
      1659px 560px #fff, 2340px 920px #fff, 2231px 1604px #fff,
      1726px 2117px #fff, 2048px 2156px #fff, 1505px 1588px #fff,
      1559px 723px #fff, 1130px 1943px #fff, 271px 584px #fff,
      1217px 2093px #fff, 1312px 552px #fff, 2557px 2342px #fff, 652px 73px #fff,
      1501px 2455px #fff, 1286px 1648px #fff, 838px 1551px #fff,
      1652px 1712px #fff, 1224px 160px #fff, 1928px 524px #fff, 899px 292px #fff,
      944px 1720px #fff, 1785px 1255px #fff, 104px 96px #fff, 1964px 546px #fff,
      2195px 1470px #fff, 893px 1423px #fff, 406px 341px #fff, 1px 2175px #fff,
      1044px 2022px #fff, 1336px 990px #fff, 1592px 788px #fff,
      2338px 710px #fff, 2401px 859px #fff, 1095px 137px #fff, 218px 90px #fff,
      2235px 2313px #fff, 1564px 162px #fff, 1900px 1265px #fff,
      199px 346px #fff, 1639px 360px #fff, 1795px 387px #fff, 926px 1493px #fff,
      648px 86px #fff, 802px 691px #fff, 1733px 349px #fff, 86px 91px #fff,
      1357px 183px #fff, 883px 78px #fff, 282px 2276px #fff, 779px 2104px #fff,
      48px 2155px #fff, 1783px 1891px #fff, 1794px 1397px #fff,
      695px 1358px #fff, 290px 1509px #fff, 136px 169px #fff, 2109px 1713px #fff,
      1595px 2295px #fff, 1346px 253px #fff, 2439px 473px #fff,
      700px 2460px #fff, 1594px 1415px #fff, 1842px 834px #fff,
      1645px 553px #fff, 1269px 433px #fff, 1686px 1807px #fff,
      1513px 1884px #fff, 2365px 627px #fff, 828px 2194px #fff,
      1950px 2019px #fff, 1769px 1193px #fff, 498px 1207px #fff,
      355px 2374px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-1:after {
    box-shadow: 0px 0px #fff, 1832px 195px #fff, 885px 2516px #fff,
      1163px 2003px #fff, 2519px 2207px #fff, 436px 774px #fff,
      1807px 1508px #fff, 2511px 1453px #fff, 1976px 2155px #fff,
      1539px 257px #fff, 739px 999px #fff, 2259px 2296px #fff,
      1444px 2057px #fff, 743px 2500px #fff, 1540px 1111px #fff,
      1193px 360px #fff, 1258px 1413px #fff, 1024px 2381px #fff,
      2161px 1319px #fff, 390px 2106px #fff, 340px 1212px #fff,
      1180px 659px #fff, 1373px 718px #fff, 998px 1978px #fff, 2086px 612px #fff,
      2063px 1062px #fff, 1555px 181px #fff, 1947px 1547px #fff,
      613px 1061px #fff, 2126px 2538px #fff, 1701px 1770px #fff,
      822px 174px #fff, 2290px 1563px #fff, 2174px 1490px #fff, 1762px 53px #fff,
      349px 173px #fff, 192px 1364px #fff, 981px 2345px #fff, 997px 369px #fff,
      2247px 1455px #fff, 1815px 398px #fff, 681px 2163px #fff, 754px 817px #fff,
      192px 290px #fff, 1882px 1953px #fff, 2380px 1434px #fff,
      1944px 1921px #fff, 2397px 633px #fff, 753px 2037px #fff,
      1665px 1188px #fff, 1931px 1432px #fff, 284px 1706px #fff,
      971px 680px #fff, 978px 1360px #fff, 456px 504px #fff, 138px 2192px #fff,
      571px 1679px #fff, 2274px 441px #fff, 701px 1195px #fff, 2110px 551px #fff,
      673px 578px #fff, 1164px 1991px #fff, 231px 387px #fff, 280px 18px #fff,
      1135px 2124px #fff, 2534px 1592px #fff, 1870px 1318px #fff,
      224px 1117px #fff, 986px 410px #fff, 1010px 1351px #fff, 1374px 315px #fff,
      575px 950px #fff, 637px 2363px #fff, 1208px 2031px #fff,
      1471px 1134px #fff, 91px 1298px #fff, 1695px 2101px #fff, 48px 664px #fff,
      1413px 2224px #fff, 1602px 2077px #fff, 1109px 85px #fff, 2224px 45px #fff,
      1257px 1958px #fff, 2135px 668px #fff, 1858px 1561px #fff,
      1767px 238px #fff, 1660px 1436px #fff, 2315px 1780px #fff,
      1474px 1121px #fff, 1536px 2393px #fff, 765px 2461px #fff,
      707px 1178px #fff, 1663px 2104px #fff, 750px 836px #fff, 1643px 526px #fff,
      463px 2028px #fff, 1449px 210px #fff, 684px 6px #fff, 534px 2036px #fff,
      1892px 2085px #fff, 2179px 901px #fff, 1963px 1908px #fff,
      44px 1249px #fff, 96px 1978px #fff, 2198px 1331px #fff, 1331px 1335px #fff,
      2057px 1870px #fff, 1255px 1583px #fff, 1702px 1204px #fff,
      744px 1221px #fff, 2496px 2347px #fff, 1861px 568px #fff,
      448px 1679px #fff, 1172px 1721px #fff, 2517px 140px #fff,
      2322px 1594px #fff, 1725px 1716px #fff, 1813px 1794px #fff,
      2026px 2018px #fff, 2415px 1830px #fff, 263px 2390px #fff,
      1795px 740px #fff, 2205px 2544px #fff, 1762px 1633px #fff,
      2415px 2289px #fff, 1723px 1764px #fff, 2114px 1571px #fff,
      1328px 1231px #fff, 268px 2360px #fff, 2513px 2387px #fff,
      2111px 132px #fff, 2192px 932px #fff, 1853px 619px #fff, 181px 1760px #fff,
      1903px 495px #fff, 2023px 2336px #fff, 538px 1041px #fff,
      967px 1588px #fff, 1973px 2189px #fff, 648px 1144px #fff, 305px 504px #fff,
      2215px 1895px #fff, 1325px 2010px #fff, 845px 740px #fff,
      2340px 750px #fff, 2335px 1393px #fff, 1473px 403px #fff,
      1644px 1696px #fff, 2560px 847px #fff, 525px 862px #fff,
      1747px 2148px #fff, 592px 2238px #fff, 52px 208px #fff, 1474px 1637px #fff,
      1860px 371px #fff, 2026px 167px #fff, 412px 981px #fff, 2197px 243px #fff,
      454px 1356px #fff, 1259px 1675px #fff, 1898px 1507px #fff,
      451px 386px #fff, 2267px 1655px #fff, 528px 832px #fff, 2416px 2483px #fff,
      1680px 340px #fff, 169px 86px #fff, 2307px 257px #fff, 2248px 467px #fff,
      1006px 1672px #fff, 859px 462px #fff, 1349px 2466px #fff,
      905px 2003px #fff, 306px 684px #fff, 988px 1694px #fff, 1302px 252px #fff,
      1307px 404px #fff, 1714px 2410px #fff, 2354px 518px #fff,
      158px 1352px #fff, 1925px 1669px #fff, 2382px 2108px #fff,
      823px 422px #fff, 1002px 2491px #fff, 2214px 1488px #fff, 335px 320px #fff,
      787px 2557px #fff, 3px 555px #fff, 2399px 2143px #fff, 1597px 356px #fff,
      331px 136px #fff, 942px 91px #fff, 1191px 1070px #fff, 487px 2430px #fff,
      2041px 913px #fff, 1466px 2429px #fff, 496px 2208px #fff,
      2285px 628px #fff, 482px 688px #fff, 230px 322px #fff, 1619px 1204px #fff,
      2283px 248px #fff, 2331px 914px #fff, 1815px 1363px #fff, 92px 1550px #fff,
      1412px 1998px #fff, 2290px 2331px #fff, 1112px 724px #fff,
      1236px 322px #fff, 1753px 1626px #fff, 1117px 1587px #fff,
      1098px 1079px #fff, 1500px 2443px #fff, 18px 101px #fff, 2219px 605px #fff,
      502px 2539px #fff, 1600px 544px #fff, 737px 737px #fff, 1468px 1262px #fff,
      621px 1866px #fff, 597px 567px #fff, 1025px 1215px #fff, 251px 1782px #fff,
      1207px 44px #fff, 1640px 1395px #fff, 61px 1650px #fff, 2467px 2028px #fff,
      1987px 600px #fff, 577px 156px #fff, 2123px 1365px #fff, 959px 69px #fff,
      412px 2400px #fff, 1470px 1518px #fff, 2450px 134px #fff,
      1032px 889px #fff, 720px 1972px #fff, 1134px 191px #fff,
      2077px 2220px #fff, 676px 1237px #fff, 864px 1511px #fff,
      1484px 990px #fff, 1802px 1444px #fff, 1869px 1738px #fff,
      1052px 332px #fff, 2511px 286px #fff, 1025px 426px #fff,
      1572px 1501px #fff, 563px 2272px #fff, 1297px 436px #fff,
      689px 1373px #fff, 216px 553px #fff, 1092px 755px #fff, 1054px 1883px #fff,
      325px 287px #fff, 1626px 512px #fff, 834px 1144px #fff, 289px 1215px #fff,
      2155px 532px #fff, 1705px 1723px #fff, 1384px 1768px #fff,
      1903px 207px #fff, 155px 1233px #fff, 2059px 374px #fff, 610px 119px #fff,
      1994px 2240px #fff, 2369px 935px #fff, 206px 535px #fff, 1430px 505px #fff,
      2429px 1237px #fff, 1730px 758px #fff, 2391px 489px #fff,
      1431px 869px #fff, 2053px 1181px #fff, 2284px 1737px #fff,
      504px 1994px #fff, 663px 2503px #fff, 1713px 605px #fff, 1743px 549px #fff,
      82px 174px #fff, 801px 449px #fff, 2229px 145px #fff, 2224px 804px #fff,
      914px 2139px #fff, 99px 1141px #fff, 1572px 862px #fff, 540px 1587px #fff,
      2375px 30px #fff, 2037px 2045px #fff, 80px 1802px #fff, 256px 2314px #fff,
      766px 2102px #fff, 1711px 563px #fff, 2402px 507px #fff, 361px 658px #fff,
      565px 670px #fff, 233px 570px #fff, 731px 82px #fff, 161px 2440px #fff,
      2324px 2234px #fff, 653px 1791px #fff, 1084px 2173px #fff,
      1734px 1345px #fff, 431px 752px #fff, 354px 92px #fff, 499px 1362px #fff,
      749px 695px #fff, 1258px 571px #fff, 889px 1845px #fff, 1057px 54px #fff,
      109px 216px #fff, 677px 189px #fff, 1629px 2042px #fff, 166px 895px #fff,
      2216px 1397px #fff, 1767px 479px #fff, 1973px 2292px #fff,
      1098px 2286px #fff, 2236px 2263px #fff, 2426px 780px #fff,
      809px 1969px #fff, 335px 2107px #fff, 1325px 941px #fff,
      1450px 1388px #fff, 1183px 1179px #fff, 296px 1376px #fff,
      1095px 189px #fff, 1586px 994px #fff, 2180px 802px #fff, 308px 1178px #fff,
      298px 343px #fff, 1385px 477px #fff, 2109px 1066px #fff, 918px 1949px #fff,
      1141px 1684px #fff, 1851px 1325px #fff, 1134px 467px #fff,
      1732px 1614px #fff, 1731px 1585px #fff, 321px 1459px #fff,
      839px 224px #fff, 2004px 969px #fff, 1327px 523px #fff, 1086px 509px #fff,
      1900px 724px #fff, 1838px 269px #fff, 2464px 599px #fff, 833px 762px #fff,
      1197px 2258px #fff, 1429px 1408px #fff, 1883px 1106px #fff,
      328px 2307px #fff, 1633px 1465px #fff, 567px 1124px #fff,
      931px 1970px #fff, 1772px 1191px #fff, 2161px 1303px #fff,
      2556px 1710px #fff, 2232px 1049px #fff, 1728px 1197px #fff,
      68px 2508px #fff, 140px 2071px #fff, 1249px 1017px #fff, 1711px 677px #fff,
      788px 1986px #fff, 1752px 1462px #fff, 1207px 2525px #fff,
      2138px 2043px #fff, 856px 1854px #fff, 2331px 2529px #fff,
      1178px 1779px #fff, 2454px 2012px #fff, 898px 1551px #fff,
      304px 1111px #fff, 1133px 78px #fff, 1405px 1535px #fff, 163px 196px #fff,
      1427px 1253px #fff, 1183px 1966px #fff, 2046px 530px #fff,
      1555px 1891px #fff, 659px 1428px #fff, 73px 1971px #fff, 2275px 106px #fff,
      1305px 2244px #fff, 2524px 1192px #fff, 2305px 1248px #fff,
      1960px 842px #fff, 2363px 2403px #fff, 871px 847px #fff, 487px 191px #fff,
      1313px 343px #fff, 121px 136px #fff, 1181px 2319px #fff, 298px 1122px #fff,
      1861px 102px #fff, 1947px 226px #fff, 213px 1521px #fff, 593px 768px #fff,
      1082px 909px #fff, 795px 1357px #fff, 2509px 2376px #fff, 622px 200px #fff,
      1028px 2239px #fff, 364px 7px #fff, 1794px 22px #fff, 1596px 1743px #fff,
      646px 2074px #fff, 2286px 1661px #fff, 2039px 803px #fff,
      595px 1937px #fff, 1401px 473px #fff, 1023px 1083px #fff,
      2209px 1247px #fff, 922px 2060px #fff, 496px 1613px #fff,
      2415px 648px #fff, 1298px 967px #fff, 1358px 1920px #fff,
      1890px 2260px #fff, 716px 558px #fff, 2494px 1184px #fff, 431px 295px #fff,
      987px 1538px #fff, 1470px 2299px #fff, 2038px 357px #fff,
      1110px 2204px #fff, 1656px 384px #fff, 968px 520px #fff, 699px 186px #fff,
      1608px 711px #fff, 2410px 332px #fff, 1319px 1256px #fff,
      2506px 1775px #fff, 2044px 1918px #fff, 49px 1738px #fff, 16px 567px #fff,
      1538px 1553px #fff, 210px 2488px #fff, 1955px 1587px #fff,
      1854px 1360px #fff, 27px 54px #fff, 1117px 1586px #fff, 309px 1301px #fff,
      1637px 2494px #fff, 384px 968px #fff, 1119px 393px #fff,
      2332px 1683px #fff, 624px 334px #fff, 2144px 2271px #fff,
      2113px 1105px #fff, 2360px 776px #fff, 716px 1792px #fff,
      2323px 1043px #fff, 656px 2198px #fff, 2257px 1770px #fff,
      636px 991px #fff, 2178px 1813px #fff, 2435px 2531px #fff, 67px 212px #fff,
      2082px 1411px #fff, 2331px 455px #fff, 963px 141px #fff,
      1847px 2294px #fff, 861px 1743px #fff, 851px 2055px #fff,
      1786px 1663px #fff, 88px 1723px #fff, 700px 368px #fff, 110px 874px #fff,
      1145px 420px #fff, 2522px 1536px #fff, 1306px 1236px #fff,
      2157px 1096px #fff, 832px 386px #fff, 2170px 713px #fff, 743px 2057px #fff,
      587px 2000px #fff, 1896px 1756px #fff, 1138px 389px #fff,
      1364px 1489px #fff, 500px 384px #fff, 1748px 25px #fff, 308px 1438px #fff,
      367px 361px #fff, 859px 1000px #fff, 1876px 916px #fff, 807px 1810px #fff,
      1206px 1035px #fff, 2274px 55px #fff, 1137px 2260px #fff,
      2234px 396px #fff, 1003px 1374px #fff, 2214px 1448px #fff,
      1171px 1313px #fff, 1617px 2193px #fff, 866px 1459px #fff,
      1195px 704px #fff, 1163px 1021px #fff, 773px 660px #fff, 973px 159px #fff,
      2082px 2556px #fff, 30px 509px #fff, 1896px 1931px #fff,
      1548px 2146px #fff, 2168px 2247px #fff, 640px 2362px #fff,
      1002px 482px #fff, 2544px 1388px #fff, 624px 848px #fff, 853px 1708px #fff,
      780px 1393px #fff, 530px 561px #fff, 317px 1772px #fff, 1020px 1097px #fff,
      1657px 2227px #fff, 429px 1622px #fff, 702px 1711px #fff,
      2415px 620px #fff, 85px 2061px #fff, 2441px 1603px #fff, 792px 1476px #fff,
      1713px 14px #fff, 1010px 2290px #fff, 81px 2539px #fff, 2216px 1978px #fff,
      1082px 927px #fff, 1652px 1297px #fff, 1991px 736px #fff,
      1250px 2319px #fff, 1572px 38px #fff, 121px 2467px #fff, 1955px 502px #fff,
      1816px 1409px #fff, 1389px 1453px #fff, 183px 26px #fff, 817px 404px #fff,
      33px 6px #fff, 487px 1676px #fff, 1390px 663px #fff, 697px 1260px #fff,
      1977px 203px #fff, 1529px 1630px #fff, 952px 1467px #fff,
      532px 2268px #fff, 913px 1745px #fff, 1152px 2032px #fff,
      1950px 2459px #fff, 1252px 2213px #fff, 1663px 2006px #fff,
      1325px 2209px #fff, 653px 1055px #fff, 1791px 433px #fff,
      2484px 2302px #fff, 2032px 153px #fff, 438px 723px #fff,
      1960px 1337px #fff, 1159px 1112px #fff, 1549px 622px #fff,
      1749px 728px #fff, 815px 221px #fff, 685px 2392px #fff, 657px 997px #fff,
      1122px 905px #fff, 1979px 644px #fff, 689px 874px #fff, 910px 1242px #fff,
      322px 1760px #fff, 142px 316px #fff, 1927px 1235px #fff,
      2469px 1141px #fff, 2199px 604px #fff, 1369px 1980px #fff,
      1826px 1191px #fff, 2039px 617px #fff, 1561px 1461px #fff,
      788px 1360px #fff, 2537px 1242px #fff, 1892px 2451px #fff,
      136px 1761px #fff, 2px 1251px #fff, 2460px 1964px #fff, 2094px 104px #fff,
      759px 171px #fff, 409px 598px #fff, 796px 1413px #fff, 567px 1943px #fff,
      266px 50px #fff, 998px 875px #fff, 1100px 2174px #fff, 2097px 552px #fff,
      86px 196px #fff, 502px 1202px #fff, 918px 1075px #fff, 273px 2513px #fff,
      2409px 18px #fff, 438px 523px #fff, 1775px 2343px #fff, 2428px 2029px #fff,
      251px 429px #fff, 1103px 637px #fff, 800px 1909px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-2 {
    -webkit-animation: animParticle 120s linear infinite;
    animation: animParticle 120s linear infinite;
    box-shadow: 0px 0px #fff, 2559px 1650px #fff, 1603px 2162px #fff,
      2329px 2066px #fff, 1045px 1875px #fff, 1437px 2222px #fff,
      2027px 2514px #fff, 1503px 1437px #fff, 830px 1376px #fff,
      167px 383px #fff, 1944px 576px #fff, 2367px 1566px #fff, 2374px 487px #fff,
      1925px 2114px #fff, 663px 1463px #fff, 1062px 1643px #fff,
      167px 420px #fff, 2221px 1181px #fff, 43px 1103px #fff, 666px 960px #fff,
      775px 2217px #fff, 1136px 997px #fff, 275px 1494px #fff,
      2265px 1502px #fff, 1454px 598px #fff, 2441px 1477px #fff,
      870px 2000px #fff, 1235px 2113px #fff, 380px 1880px #fff,
      1411px 345px #fff, 2358px 1750px #fff, 1818px 793px #fff, 722px 220px #fff,
      884px 1359px #fff, 1449px 123px #fff, 2474px 2485px #fff,
      2257px 1955px #fff, 836px 662px #fff, 270px 873px #fff, 921px 2392px #fff,
      771px 1604px #fff, 906px 2436px #fff, 970px 2031px #fff, 468px 922px #fff,
      2262px 706px #fff, 471px 467px #fff, 1532px 2332px #fff,
      1318px 1889px #fff, 775px 2303px #fff, 1759px 392px #fff,
      2175px 2474px #fff, 550px 1199px #fff, 191px 377px #fff, 788px 1805px #fff,
      2013px 13px #fff, 1865px 635px #fff, 1236px 766px #fff, 859px 861px #fff,
      338px 1062px #fff, 1036px 2183px #fff, 2428px 1949px #fff,
      420px 751px #fff, 362px 769px #fff, 746px 475px #fff, 721px 2023px #fff,
      391px 852px #fff, 582px 722px #fff, 1970px 2464px #fff, 2219px 1871px #fff,
      1285px 2379px #fff, 430px 2137px #fff, 155px 76px #fff, 1612px 773px #fff,
      1746px 1448px #fff, 1884px 988px #fff, 1706px 1929px #fff,
      1761px 2415px #fff, 2358px 664px #fff, 471px 1636px #fff, 27px 820px #fff,
      406px 1002px #fff, 113px 1493px #fff, 196px 65px #fff, 2547px 14px #fff,
      190px 1498px #fff, 2069px 122px #fff, 321px 75px #fff, 1014px 57px #fff,
      737px 2427px #fff, 1984px 2200px #fff, 1161px 1410px #fff,
      1308px 1792px #fff, 235px 2019px #fff, 1105px 536px #fff, 360px 317px #fff,
      2113px 2188px #fff, 2320px 43px #fff, 2333px 2388px #fff, 864px 383px #fff,
      1766px 1390px #fff, 1340px 786px #fff, 561px 1870px #fff,
      906px 2241px #fff, 591px 613px #fff, 1236px 1031px #fff, 2242px 675px #fff,
      984px 2079px #fff, 1987px 1890px #fff, 2525px 1725px #fff,
      2337px 97px #fff, 1244px 2552px #fff, 1119px 213px #fff,
      1011px 1794px #fff, 2230px 1809px #fff, 1910px 1769px #fff,
      463px 2075px #fff, 650px 578px #fff, 1200px 1363px #fff, 2035px 124px #fff,
      1206px 2325px #fff, 1534px 839px #fff, 690px 2393px #fff,
      182px 1012px #fff, 519px 1283px #fff, 1888px 2195px #fff, 514px 190px #fff,
      2357px 881px #fff, 2335px 1888px #fff, 1819px 1353px #fff,
      2540px 1995px #fff, 2527px 1285px #fff, 1608px 2559px #fff,
      1774px 600px #fff, 918px 2024px #fff, 2550px 916px #fff, 199px 1271px #fff,
      2435px 260px #fff, 121px 1745px #fff, 790px 1382px #fff, 64px 375px #fff,
      1625px 1809px #fff, 767px 696px #fff, 273px 1656px #fff,
      1402px 2066px #fff, 383px 2116px #fff, 838px 1397px #fff,
      1470px 1280px #fff, 679px 344px #fff, 1118px 2525px #fff,
      1828px 969px #fff, 487px 2334px #fff, 2176px 1731px #fff, 1698px 47px #fff,
      589px 205px #fff, 1117px 517px #fff, 662px 2123px #fff, 1164px 2237px #fff,
      133px 1576px #fff, 2208px 2375px #fff, 2271px 2198px #fff,
      1224px 2239px #fff, 2521px 1056px #fff, 486px 1540px #fff,
      2168px 1698px #fff, 2145px 2327px #fff, 2063px 1427px #fff,
      1033px 2329px #fff, 1727px 1834px #fff, 2452px 516px #fff,
      1522px 2488px #fff, 2551px 2312px #fff, 286px 2473px #fff,
      2129px 2406px #fff, 2002px 1551px #fff, 1662px 1562px #fff,
      1006px 742px #fff, 923px 885px #fff, 1749px 1672px #fff, 2181px 428px #fff,
      621px 387px #fff, 678px 2289px #fff, 1672px 2161px #fff,
      2056px 1334px #fff, 199px 570px #fff, 2369px 1094px #fff,
      2045px 1604px #fff, 1037px 485px #fff, 2064px 36px #fff,
      2199px 2444px #fff, 2153px 70px #fff, 563px 2233px #fff,
      1218px 1959px #fff, 1031px 717px #fff, 418px 637px #fff, 1261px 868px #fff,
      364px 544px #fff, 1068px 1203px #fff, 2311px 164px #fff, 2420px 930px #fff,
      47px 546px #fff, 2356px 417px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-2:after {
    box-shadow: 0px 0px #fff, 2351px 271px #fff, 443px 2031px #fff,
      2540px 1007px #fff, 2490px 2027px #fff, 1961px 638px #fff,
      1391px 1464px #fff, 1292px 719px #fff, 666px 1619px #fff,
      818px 1633px #fff, 2491px 1296px #fff, 1403px 268px #fff,
      1158px 878px #fff, 1260px 1481px #fff, 2292px 402px #fff, 408px 549px #fff,
      324px 1455px #fff, 1870px 1144px #fff, 322px 2526px #fff,
      1333px 1397px #fff, 1570px 94px #fff, 133px 58px #fff, 2040px 1450px #fff,
      1742px 861px #fff, 379px 1457px #fff, 2519px 1011px #fff,
      1685px 1485px #fff, 1178px 560px #fff, 2287px 2527px #fff,
      1344px 2058px #fff, 1337px 1477px #fff, 1792px 1996px #fff,
      2219px 1606px #fff, 158px 360px #fff, 804px 1555px #fff, 330px 770px #fff,
      1954px 771px #fff, 265px 1341px #fff, 1856px 2081px #fff,
      926px 1989px #fff, 820px 1724px #fff, 642px 1876px #fff,
      2261px 2074px #fff, 1298px 2248px #fff, 861px 1872px #fff,
      2323px 1712px #fff, 2530px 2018px #fff, 998px 1197px #fff,
      1319px 990px #fff, 2482px 1616px #fff, 1662px 1302px #fff,
      793px 1443px #fff, 496px 1989px #fff, 1543px 222px #fff, 2025px 779px #fff,
      2229px 1357px #fff, 1158px 411px #fff, 1680px 2015px #fff,
      536px 2019px #fff, 393px 2443px #fff, 999px 2247px #fff, 558px 2464px #fff,
      2280px 280px #fff, 354px 41px #fff, 1694px 676px #fff, 940px 1372px #fff,
      297px 882px #fff, 1200px 464px #fff, 1681px 309px #fff, 756px 834px #fff,
      856px 1489px #fff, 638px 2076px #fff, 134px 1960px #fff,
      1850px 1516px #fff, 1828px 2512px #fff, 2076px 1344px #fff,
      1987px 1985px #fff, 2259px 1066px #fff, 595px 737px #fff,
      129px 1150px #fff, 1325px 918px #fff, 1718px 634px #fff, 2267px 526px #fff,
      1095px 219px #fff, 661px 782px #fff, 1423px 1535px #fff,
      1799px 1790px #fff, 1344px 887px #fff, 874px 607px #fff,
      2006px 2503px #fff, 2495px 889px #fff, 684px 2172px #fff,
      787px 1040px #fff, 498px 633px #fff, 2277px 2010px #fff, 230px 1771px #fff,
      421px 1882px #fff, 19px 1238px #fff, 923px 2558px #fff, 1683px 1419px #fff,
      23px 2432px #fff, 2101px 2022px #fff, 2201px 538px #fff, 522px 1134px #fff,
      363px 2204px #fff, 2060px 1435px #fff, 577px 398px #fff, 656px 3px #fff,
      1957px 1854px #fff, 910px 943px #fff, 1108px 847px #fff,
      1741px 1762px #fff, 745px 1119px #fff, 2309px 2519px #fff,
      2363px 782px #fff, 320px 1434px #fff, 916px 2475px #fff, 138px 110px #fff,
      1149px 899px #fff, 239px 1218px #fff, 1314px 1611px #fff,
      1645px 826px #fff, 1277px 1923px #fff, 330px 288px #fff, 1699px 373px #fff,
      1680px 1952px #fff, 1640px 1818px #fff, 2504px 251px #fff,
      1733px 26px #fff, 1504px 2164px #fff, 2283px 362px #fff, 1670px 828px #fff,
      1615px 1146px #fff, 1326px 2152px #fff, 2548px 2124px #fff,
      1893px 857px #fff, 1899px 2510px #fff, 768px 2201px #fff,
      777px 1092px #fff, 265px 975px #fff, 1664px 1308px #fff,
      1215px 1054px #fff, 2382px 1708px #fff, 110px 1873px #fff,
      566px 2515px #fff, 1553px 1337px #fff, 576px 2204px #fff,
      2213px 1828px #fff, 749px 2294px #fff, 1565px 882px #fff,
      1071px 2040px #fff, 1729px 1596px #fff, 749px 801px #fff,
      1645px 2383px #fff, 1325px 606px #fff, 2303px 1329px #fff,
      90px 1196px #fff, 825px 1143px #fff, 292px 39px #fff, 327px 1117px #fff,
      351px 1420px #fff, 1709px 1271px #fff, 1443px 1995px #fff,
      347px 332px #fff, 1658px 901px #fff, 1436px 2101px #fff,
      1261px 1224px #fff, 274px 480px #fff, 492px 2005px #fff, 309px 1113px #fff,
      1870px 496px #fff, 1741px 1681px #fff, 1801px 1036px #fff,
      1550px 2449px #fff, 2236px 2266px #fff, 338px 1582px #fff,
      957px 469px #fff, 1814px 1831px #fff, 886px 971px #fff, 1999px 1857px #fff,
      2454px 578px #fff, 1466px 2435px #fff, 306px 436px #fff,
      1126px 2189px #fff, 1515px 1985px #fff, 43px 62px #fff, 1727px 690px #fff,
      1060px 2210px #fff, 780px 1157px #fff, 2400px 158px #fff,
      286px 2148px #fff, 1451px 2109px #fff, 116px 1819px #fff, 77px 822px #fff,
      885px 412px #fff, 2083px 2318px #fff, 421px 1234px #fff,
      2026px 1865px #fff, 103px 2087px #fff, 385px 1872px #fff, 347px 428px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-3 {
    -webkit-animation: animParticle 180s linear infinite;
    animation: animParticle 180s linear infinite;
    box-shadow: 0px 0px #fff, 2165px 372px #fff, 2255px 615px #fff,
      2127px 2423px #fff, 1382px 2438px #fff, 1414px 2383px #fff,
      1719px 1033px #fff, 1860px 2460px #fff, 1820px 660px #fff,
      2410px 1322px #fff, 1062px 2556px #fff, 603px 2394px #fff,
      588px 1144px #fff, 644px 2454px #fff, 2130px 1575px #fff,
      1054px 956px #fff, 1419px 108px #fff, 961px 542px #fff, 33px 2415px #fff,
      1367px 1979px #fff, 267px 775px #fff, 1366px 367px #fff, 1991px 808px #fff,
      7px 2354px #fff, 153px 1679px #fff, 2258px 46px #fff, 43px 2532px #fff,
      1964px 374px #fff, 360px 513px #fff, 606px 1684px #fff, 1424px 1947px #fff,
      2112px 1748px #fff, 2271px 819px #fff, 2507px 830px #fff,
      2559px 1164px #fff, 2128px 725px #fff, 131px 1346px #fff,
      2499px 841px #fff, 1531px 1604px #fff, 2030px 1534px #fff,
      513px 1068px #fff, 723px 2490px #fff, 1172px 761px #fff,
      1208px 1915px #fff, 900px 1681px #fff, 1819px 2395px #fff,
      892px 2443px #fff, 1064px 2090px #fff, 1643px 1566px #fff,
      1679px 879px #fff, 599px 812px #fff, 1167px 7px #fff, 1330px 2524px #fff,
      1254px 52px #fff, 2119px 1791px #fff, 1066px 1226px #fff,
      1228px 1245px #fff, 2045px 1658px #fff, 588px 1910px #fff,
      2359px 1774px #fff, 777px 2309px #fff, 1742px 1777px #fff,
      2442px 89px #fff, 1886px 636px #fff, 929px 443px #fff, 356px 2074px #fff,
      228px 2545px #fff, 2215px 464px #fff, 327px 834px #fff, 660px 722px #fff,
      1466px 1419px #fff, 89px 1484px #fff, 1785px 774px #fff,
      1161px 1462px #fff, 1012px 793px #fff, 634px 1597px #fff,
      882px 1623px #fff, 982px 1274px #fff, 1498px 2038px #fff,
      1371px 618px #fff, 2092px 877px #fff, 1719px 1776px #fff,
      1154px 2474px #fff, 2036px 2002px #fff, 1511px 160px #fff,
      1582px 2453px #fff, 753px 56px #fff, 2px 1988px #fff, 1606px 327px #fff,
      144px 655px #fff, 852px 2064px #fff, 1733px 674px #fff, 275px 89px #fff,
      2271px 1607px #fff, 2103px 703px #fff, 2184px 1545px #fff,
      1425px 518px #fff, 2006px 664px #fff, 1998px 1512px #fff,
      452px 1616px #fff, 687px 270px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-3:after {
    box-shadow: 0px 0px #fff, 2303px 1872px #fff, 884px 343px #fff,
      603px 2283px #fff, 667px 197px #fff, 1301px 1422px #fff,
      2470px 2464px #fff, 317px 2182px #fff, 1736px 30px #fff, 526px 765px #fff,
      543px 1241px #fff, 484px 82px #fff, 1519px 929px #fff, 16px 1654px #fff,
      451px 149px #fff, 737px 906px #fff, 1252px 1225px #fff, 1796px 2250px #fff,
      1771px 370px #fff, 1306px 274px #fff, 604px 2121px #fff,
      1974px 1451px #fff, 1992px 1021px #fff, 450px 1423px #fff,
      709px 2217px #fff, 1679px 913px #fff, 2151px 1812px #fff,
      1698px 2463px #fff, 742px 1941px #fff, 294px 356px #fff, 71px 169px #fff,
      198px 1141px #fff, 1162px 912px #fff, 639px 691px #fff, 1073px 2311px #fff,
      191px 213px #fff, 1142px 2504px #fff, 667px 164px #fff, 1773px 2411px #fff,
      2274px 1910px #fff, 2322px 1847px #fff, 1046px 238px #fff,
      2540px 2411px #fff, 1510px 347px #fff, 880px 787px #fff,
      1749px 1735px #fff, 1837px 1454px #fff, 2322px 1714px #fff,
      921px 2497px #fff, 1084px 2435px #fff, 457px 1760px #fff,
      1047px 641px #fff, 1564px 2047px #fff, 1900px 1057px #fff, 23px 236px #fff,
      2159px 2131px #fff, 1000px 994px #fff, 1086px 1399px #fff,
      2337px 1524px #fff, 635px 455px #fff, 1624px 705px #fff,
      1272px 1629px #fff, 343px 768px #fff, 2350px 538px #fff,
      1586px 1329px #fff, 1913px 1423px #fff, 2412px 2529px #fff,
      1601px 1665px #fff, 2505px 165px #fff, 2035px 368px #fff,
      1696px 641px #fff, 1685px 1013px #fff, 2097px 1376px #fff, 6px 1758px #fff,
      991px 1208px #fff, 632px 1814px #fff, 97px 912px #fff, 573px 346px #fff,
      999px 2443px #fff, 1935px 1659px #fff, 486px 2485px #fff,
      2531px 2067px #fff, 600px 234px #fff, 1757px 1446px #fff,
      1423px 1842px #fff, 1499px 1784px #fff, 2326px 839px #fff,
      2079px 1314px #fff, 2065px 1431px #fff, 393px 944px #fff,
      1396px 1355px #fff, 1561px 1455px #fff, 510px 2212px #fff,
      1446px 426px #fff, 297px 998px #fff, 700px 717px #fff, 1921px 1666px #fff,
      2405px 1830px #fff, 925px 1935px #fff, 2047px 687px #fff,
      1989px 2161px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-4 {
    -webkit-animation: animParticle 600s linear infinite;
    animation: animParticle 600s linear infinite;
    box-shadow: 0px 0px #fff, 1069px 193px #fff, 607px 1049px #fff,
      361px 662px #fff, 151px 398px #fff, 748px 1321px #fff, 179px 349px #fff,
      188px 498px #fff, 1917px 1404px #fff, 1426px 1024px #fff,
      2527px 990px #fff, 1256px 217px #fff, 1609px 1574px #fff, 411px 472px #fff,
      2067px 1006px #fff, 1895px 2017px #fff, 1169px 2277px #fff,
      1984px 2257px #fff, 816px 1891px #fff, 1375px 357px #fff,
      1567px 568px #fff, 490px 1579px #fff, 572px 761px #fff, 2107px 562px #fff,
      605px 1810px #fff, 2438px 1975px #fff, 1732px 1303px #fff,
      19px 1810px #fff, 2434px 1703px #fff, 2186px 68px #fff, 1768px 1544px #fff,
      2375px 1565px #fff, 876px 1384px #fff, 1841px 2223px #fff,
      23px 1322px #fff, 2178px 1999px #fff, 731px 899px #fff, 1174px 1954px #fff,
      2196px 844px #fff, 2153px 1505px #fff, 1262px 441px #fff,
      540px 1083px #fff, 665px 492px #fff, 1487px 2128px #fff, 597px 1358px #fff,
      1530px 481px #fff, 1744px 829px #fff, 733px 953px #fff, 1720px 1451px #fff,
      1555px 95px #fff, 278px 285px #fff, 1987px 636px #fff, 2268px 1700px #fff,
      1632px 1180px #fff, 2022px 1404px #fff, 166px 846px #fff,
      2218px 1673px #fff, 1698px 1376px #fff, 1500px 2461px #fff,
      1072px 1698px #fff, 626px 2031px #fff, 610px 1649px #fff,
      1728px 637px #fff, 2457px 741px #fff, 2501px 127px #fff, 473px 2557px #fff,
      893px 1995px #fff, 1396px 1124px #fff, 91px 1612px #fff, 2160px 80px #fff,
      1741px 1267px #fff, 2435px 2427px #fff, 2167px 375px #fff,
      1249px 2092px #fff, 646px 708px #fff, 35px 471px #fff, 583px 1383px #fff,
      113px 322px #fff, 1212px 1707px #fff, 219px 129px #fff, 2197px 1274px #fff,
      1183px 1515px #fff, 1269px 532px #fff, 2091px 572px #fff,
      448px 1813px #fff, 1906px 1796px #fff, 1318px 25px #fff,
      2186px 1360px #fff, 315px 869px #fff, 546px 1098px #fff, 62px 319px #fff,
      321px 761px #fff, 1044px 1926px #fff, 185px 1182px #fff,
      1565px 1078px #fff, 2393px 1476px #fff, 1549px 69px #fff,
      1818px 2489px #fff, 1308px 1657px #fff, 1953px 1103px #fff,
      1011px 1390px #fff, 1113px 2283px #fff, 282px 1350px #fff,
      1733px 1195px #fff, 1856px 643px #fff, 1201px 666px #fff,
      1573px 1487px #fff, 2262px 2258px #fff, 2021px 1937px #fff,
      1288px 2557px #fff, 1665px 369px #fff, 768px 1079px #fff, 751px 477px #fff,
      2176px 1059px #fff, 2558px 1637px #fff, 2231px 868px #fff,
      2012px 448px #fff, 685px 1356px #fff, 1024px 2239px #fff,
      492px 2432px #fff, 1636px 707px #fff, 2229px 955px #fff, 2466px 93px #fff,
      560px 841px #fff, 2313px 2524px #fff, 817px 1739px #fff,
      1141px 1879px #fff, 1294px 597px #fff, 2276px 1126px #fff,
      2387px 1523px #fff, 2102px 704px #fff, 385px 1713px #fff,
      1476px 2196px #fff, 2263px 195px #fff, 620px 1160px #fff, 1898px 70px #fff,
      285px 2052px #fff, 2278px 1309px #fff, 202px 1353px #fff,
      1442px 439px #fff, 2493px 363px #fff, 588px 1269px #fff,
      2039px 1293px #fff, 404px 491px #fff, 644px 419px #fff, 680px 1346px #fff,
      290px 1245px #fff, 2191px 1242px #fff, 1601px 1108px #fff,
      701px 2244px #fff, 1753px 2171px #fff, 1784px 39px #fff, 27px 1525px #fff,
      1665px 23px #fff, 1441px 1153px #fff, 2539px 1935px #fff,
      801px 2262px #fff, 716px 2140px #fff, 1705px 2101px #fff, 753px 435px #fff,
      2083px 2289px #fff, 483px 1824px #fff, 2106px 1671px #fff,
      1925px 694px #fff, 1594px 599px #fff, 826px 2516px #fff, 2530px 380px #fff,
      2234px 869px #fff, 1514px 855px #fff, 402px 2416px #fff, 751px 1301px #fff,
      135px 1961px #fff, 1292px 2319px #fff, 65px 1360px #fff,
      2545px 2373px #fff, 2044px 952px #fff, 948px 335px #fff, 484px 1681px #fff,
      1012px 357px #fff, 630px 1825px #fff, 803px 288px #fff, 1148px 221px #fff,
      46px 2304px #fff, 512px 553px #fff, 1058px 659px #fff, 1386px 1352px #fff,
      709px 2262px #fff, 779px 1648px #fff, 1516px 2320px #fff,
      1454px 860px #fff, 295px 354px #fff, 703px 2533px #fff, 1602px 1042px #fff,
      96px 1909px #fff, 928px 1485px #fff, 2209px 318px #fff, 2359px 657px #fff,
      851px 8px #fff, 1565px 1089px #fff, 1792px 1918px #fff, 546px 868px #fff,
      406px 898px #fff, 2482px 41px #fff, 1696px 764px #fff, 952px 779px #fff,
      1588px 1344px #fff, 1919px 1421px #fff, 1582px 539px #fff,
      2504px 1146px #fff, 827px 523px #fff, 2241px 576px #fff, 924px 1299px #fff,
      1472px 167px #fff, 678px 2514px #fff, 1726px 800px #fff,
      2300px 2335px #fff, 64px 1673px #fff, 837px 2475px #fff, 2228px 204px #fff,
      1346px 1838px #fff, 1266px 1100px #fff, 560px 227px #fff,
      398px 1548px #fff, 892px 1944px #fff, 1048px 559px #fff, 889px 2154px #fff,
      2474px 1942px #fff, 18px 1078px #fff, 2025px 977px #fff, 70px 570px #fff,
      1674px 419px #fff, 1709px 691px #fff, 2376px 1649px #fff, 60px 1077px #fff,
      1738px 528px #fff, 1416px 83px #fff, 819px 609px #fff, 2224px 1826px #fff,
      1865px 1015px #fff, 2063px 1430px #fff, 795px 731px #fff,
      1335px 394px #fff, 769px 1569px #fff, 815px 452px #fff, 2075px 210px #fff,
      1569px 327px #fff, 2187px 933px #fff, 796px 2417px #fff, 817px 2381px #fff,
      1555px 2513px #fff, 879px 682px #fff, 1525px 1104px #fff,
      1560px 1693px #fff, 1314px 1573px #fff, 1870px 408px #fff,
      509px 2332px #fff, 27px 387px #fff, 1023px 1766px #fff, 1732px 830px #fff,
      1838px 173px #fff, 782px 2111px #fff, 2199px 200px #fff, 1492px 258px #fff,
      2031px 223px #fff, 481px 1968px #fff, 1443px 2192px #fff,
      2242px 2329px #fff, 398px 832px #fff, 773px 1577px #fff, 1299px 412px #fff,
      2267px 402px #fff, 511px 213px #fff, 1996px 536px #fff, 2533px 2192px #fff,
      1735px 962px #fff, 1294px 684px #fff, 863px 1750px #fff, 938px 1956px #fff,
      1375px 638px #fff, 351px 384px #fff, 2485px 533px #fff, 2269px 596px #fff,
      1594px 2282px #fff, 1614px 251px #fff, 493px 986px #fff, 2365px 349px #fff,
      1998px 2354px #fff, 2220px 1143px #fff, 349px 1456px #fff,
      1458px 710px #fff, 911px 1276px #fff, 401px 2080px #fff, 111px 1412px #fff,
      2271px 832px #fff, 2190px 1992px #fff, 2439px 1371px #fff,
      2478px 1322px #fff, 628px 90px #fff, 1px 2339px #fff, 158px 1164px #fff,
      2187px 2421px #fff, 2516px 360px #fff, 2273px 2515px #fff,
      1854px 971px #fff, 1472px 280px #fff, 318px 2268px #fff, 840px 1078px #fff,
      241px 255px #fff, 52px 1542px #fff, 1641px 861px #fff, 1911px 2267px #fff,
      1667px 1376px #fff, 1400px 339px #fff, 2511px 977px #fff,
      2380px 1920px #fff, 636px 816px #fff, 1465px 2204px #fff,
      788px 2187px #fff, 1106px 813px #fff, 1849px 303px #fff, 2220px 651px #fff,
      1540px 2557px #fff, 230px 652px #fff, 2058px 1415px #fff, 52px 1388px #fff,
      2150px 2423px #fff, 2221px 1324px #fff, 610px 738px #fff,
      2075px 1624px #fff, 2410px 1803px #fff, 240px 735px #fff,
      2477px 654px #fff, 954px 360px #fff, 95px 1031px #fff, 1203px 1945px #fff,
      83px 424px #fff, 236px 816px #fff, 936px 497px #fff, 541px 2081px #fff,
      1832px 554px #fff, 1123px 82px #fff, 1102px 1153px #fff,
      2180px 2320px #fff, 246px 1618px #fff, 792px 2486px #fff,
      352px 1654px #fff, 377px 1406px #fff, 1611px 2234px #fff,
      1700px 558px #fff, 2234px 1977px #fff, 1122px 1155px #fff,
      1969px 2172px #fff, 1027px 285px #fff, 489px 2553px #fff,
      337px 1580px #fff, 1182px 900px #fff, 2199px 880px #fff, 1033px 652px #fff,
      331px 1854px #fff, 2306px 2065px #fff, 2338px 932px #fff,
      1446px 2456px #fff, 1668px 1019px #fff, 838px 896px #fff,
      1996px 711px #fff, 2306px 1345px #fff, 166px 2032px #fff, 752px 231px #fff,
      2172px 2006px #fff, 802px 959px #fff, 183px 738px #fff, 1993px 2233px #fff,
      1576px 183px #fff, 1898px 769px #fff, 2329px 535px #fff, 704px 2187px #fff,
      1564px 1333px #fff, 1653px 2403px #fff, 2408px 2385px #fff,
      2398px 770px #fff, 640px 1094px #fff, 783px 1568px #fff, 177px 1280px #fff,
      313px 2148px #fff, 556px 636px #fff, 1526px 432px #fff, 848px 530px #fff,
      2227px 2077px #fff, 1040px 751px #fff, 346px 1693px #fff, 2512px 52px #fff,
      2506px 423px #fff, 1917px 1705px #fff, 1839px 2354px #fff,
      2307px 447px #fff, 413px 168px #fff, 2100px 1525px #fff,
      1747px 1739px #fff, 1083px 1904px #fff, 1265px 2122px #fff,
      177px 2550px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-4:after {
    box-shadow: 0px 0px #fff, 1497px 767px #fff, 1066px 815px #fff,
      1206px 2108px #fff, 801px 407px #fff, 2206px 1493px #fff,
      1693px 1601px #fff, 1445px 1292px #fff, 2496px 180px #fff,
      1789px 445px #fff, 2309px 1132px #fff, 2119px 1434px #fff,
      565px 1767px #fff, 1631px 707px #fff, 7px 529px #fff, 725px 251px #fff,
      705px 1799px #fff, 2472px 1096px #fff, 2028px 896px #fff,
      1190px 1262px #fff, 1250px 237px #fff, 1167px 2531px #fff,
      1775px 660px #fff, 69px 1810px #fff, 140px 1757px #fff, 719px 265px #fff,
      2210px 2128px #fff, 1529px 1793px #fff, 2056px 301px #fff,
      603px 2046px #fff, 1400px 614px #fff, 1024px 2262px #fff,
      2540px 1360px #fff, 1205px 987px #fff, 18px 2046px #fff,
      2031px 1975px #fff, 521px 1781px #fff, 410px 1033px #fff,
      874px 2400px #fff, 1023px 437px #fff, 1868px 2200px #fff, 772px 342px #fff,
      1657px 2270px #fff, 1048px 616px #fff, 1944px 2152px #fff,
      975px 476px #fff, 1169px 2456px #fff, 1249px 1219px #fff,
      1971px 1655px #fff, 1448px 1411px #fff, 2537px 1609px #fff,
      9px 1765px #fff, 827px 1429px #fff, 2084px 2347px #fff, 1517px 662px #fff,
      1622px 2368px #fff, 327px 422px #fff, 1235px 111px #fff,
      2005px 1645px #fff, 2256px 438px #fff, 1317px 93px #fff, 573px 398px #fff,
      1925px 331px #fff, 83px 1636px #fff, 2161px 379px #fff, 662px 337px #fff,
      339px 2541px #fff, 1414px 1432px #fff, 742px 280px #fff, 300px 256px #fff,
      2396px 442px #fff, 2230px 974px #fff, 2392px 1159px #fff, 801px 18px #fff,
      1366px 1637px #fff, 472px 82px #fff, 718px 666px #fff, 73px 1627px #fff,
      2187px 1639px #fff, 1886px 1369px #fff, 2096px 1223px #fff,
      1248px 1953px #fff, 109px 2175px #fff, 1928px 1020px #fff,
      36px 1772px #fff, 1038px 1938px #fff, 2552px 893px #fff, 544px 2340px #fff,
      591px 1367px #fff, 454px 947px #fff, 1482px 1647px #fff, 344px 2127px #fff,
      1389px 2119px #fff, 629px 1873px #fff, 1433px 2418px #fff,
      212px 1773px #fff, 279px 1936px #fff, 1854px 1304px #fff, 73px 615px #fff,
      761px 125px #fff, 902px 599px #fff, 2140px 944px #fff, 413px 2449px #fff,
      1794px 1180px #fff, 1229px 1866px #fff, 2450px 308px #fff,
      1794px 625px #fff, 1026px 179px #fff, 144px 2293px #fff, 639px 1998px #fff,
      1250px 858px #fff, 1865px 881px #fff, 785px 2200px #fff, 1860px 411px #fff,
      1362px 74px #fff, 595px 2290px #fff, 1586px 1117px #fff, 576px 1923px #fff,
      1975px 94px #fff, 258px 458px #fff, 2122px 1565px #fff, 2147px 70px #fff,
      1664px 206px #fff, 2522px 1115px #fff, 1095px 853px #fff,
      533px 1931px #fff, 559px 2180px #fff, 947px 1821px #fff, 362px 1233px #fff,
      1245px 21px #fff, 867px 1433px #fff, 827px 1671px #fff, 2130px 982px #fff,
      1448px 1990px #fff, 1147px 129px #fff, 1583px 123px #fff,
      1478px 557px #fff, 552px 1324px #fff, 2407px 1194px #fff,
      153px 2417px #fff, 2320px 1619px #fff, 1765px 2471px #fff,
      1179px 412px #fff, 188px 547px #fff, 552px 1321px #fff, 1808px 2143px #fff,
      2255px 1717px #fff, 2327px 2406px #fff, 571px 2449px #fff,
      2142px 779px #fff, 1558px 1365px #fff, 984px 10px #fff, 1209px 1267px #fff,
      1883px 750px #fff, 1536px 426px #fff, 974px 93px #fff, 952px 439px #fff,
      2190px 1513px #fff, 1808px 2311px #fff, 1351px 1967px #fff,
      275px 875px #fff, 1616px 749px #fff, 578px 1603px #fff, 694px 663px #fff,
      1386px 824px #fff, 1662px 606px #fff, 1851px 833px #fff,
      2459px 2209px #fff, 625px 1958px #fff, 2072px 2467px #fff,
      1179px 274px #fff, 647px 5px #fff, 2343px 2255px #fff, 2308px 1600px #fff,
      1156px 2351px #fff, 2160px 364px #fff, 1935px 1167px #fff,
      955px 242px #fff, 856px 2473px #fff, 1887px 942px #fff, 1140px 2163px #fff,
      391px 1191px #fff, 2260px 336px #fff, 785px 1009px #fff, 165px 1899px #fff,
      1129px 2290px #fff, 1333px 384px #fff, 610px 596px #fff,
      1745px 1109px #fff, 1655px 2163px #fff, 989px 1906px #fff,
      1911px 295px #fff, 563px 1360px #fff, 922px 519px #fff, 2393px 1306px #fff,
      1964px 407px #fff, 114px 1254px #fff, 604px 1760px #fff,
      1973px 1835px #fff, 1451px 296px #fff, 949px 1835px #fff,
      273px 1542px #fff, 2319px 980px #fff, 1445px 2474px #fff,
      1147px 223px #fff, 658px 768px #fff, 2051px 66px #fff, 157px 1207px #fff,
      1606px 134px #fff, 1734px 1946px #fff, 2201px 884px #fff,
      2423px 1234px #fff, 1467px 1918px #fff, 2366px 2387px #fff,
      2468px 2058px #fff, 1558px 605px #fff, 340px 1058px #fff,
      2370px 245px #fff, 1742px 341px #fff, 921px 1837px #fff,
      1051px 1153px #fff, 207px 1961px #fff, 1028px 2468px #fff,
      2013px 1413px #fff, 1756px 988px #fff, 1624px 1885px #fff,
      1596px 924px #fff, 699px 2455px #fff, 718px 766px #fff, 1341px 2537px #fff,
      2522px 1167px #fff, 1227px 1503px #fff, 1682px 1927px #fff,
      2410px 1049px #fff, 2435px 1912px #fff, 894px 2436px #fff,
      2451px 1497px #fff, 2246px 1437px #fff, 2224px 1190px #fff,
      1259px 417px #fff, 2283px 187px #fff, 2006px 2001px #fff,
      1283px 144px #fff, 1611px 2448px #fff, 1462px 1767px #fff,
      993px 1837px #fff, 672px 1534px #fff, 1678px 1113px #fff,
      1299px 1398px #fff, 731px 277px #fff, 2152px 2102px #fff,
      1540px 539px #fff, 2394px 985px #fff, 1636px 866px #fff, 1164px 691px #fff,
      1793px 1705px #fff, 2335px 2500px #fff, 757px 610px #fff,
      1999px 1561px #fff, 2073px 1094px #fff, 1270px 396px #fff,
      82px 1863px #fff, 1127px 250px #fff, 767px 2297px #fff, 335px 2206px #fff,
      544px 1595px #fff, 131px 2162px #fff, 2116px 1818px #fff,
      1687px 2293px #fff, 2190px 565px #fff, 2490px 2501px #fff,
      767px 222px #fff, 2264px 1484px #fff, 971px 498px #fff, 170px 1934px #fff,
      1455px 1590px #fff, 1483px 30px #fff, 1275px 37px #fff, 992px 238px #fff,
      2136px 597px #fff, 143px 371px #fff, 769px 2462px #fff, 1737px 1752px #fff,
      2248px 196px #fff, 1103px 482px #fff, 1132px 891px #fff,
      2333px 1648px #fff, 2472px 1496px #fff, 1046px 2458px #fff,
      231px 862px #fff, 334px 24px #fff, 348px 1189px #fff, 1333px 2225px #fff,
      2524px 356px #fff, 17px 1735px #fff, 1294px 2373px #fff, 281px 2346px #fff,
      199px 1436px #fff, 548px 32px #fff, 696px 1975px #fff, 1748px 827px #fff,
      1814px 1292px #fff, 175px 1643px #fff, 556px 2345px #fff, 58px 2422px #fff,
      885px 1220px #fff, 2203px 876px #fff, 2534px 1426px #fff,
      528px 1005px #fff, 2419px 463px #fff, 915px 1556px #fff, 966px 1324px #fff,
      1895px 1206px #fff, 2374px 374px #fff, 2071px 624px #fff,
      1729px 1298px #fff, 2293px 2083px #fff, 2341px 1087px #fff,
      138px 1735px #fff, 799px 1950px #fff, 696px 2477px #fff, 178px 1141px #fff,
      2295px 2045px #fff, 1486px 754px #fff, 411px 1239px #fff,
      991px 1800px #fff, 1274px 381px #fff, 30px 225px #fff, 268px 271px #fff,
      1659px 396px #fff, 2486px 2177px #fff, 1253px 2286px #fff,
      2204px 567px #fff, 329px 16px #fff, 1473px 2002px #fff, 1670px 1581px #fff,
      350px 1851px #fff, 1388px 983px #fff, 1136px 1115px #fff,
      1019px 419px #fff, 1101px 1626px #fff, 613px 894px #fff,
      1428px 2113px #fff, 2290px 1054px #fff, 42px 2256px #fff,
      2318px 1736px #fff, 1657px 1079px #fff, 1058px 1676px #fff,
      723px 2396px #fff, 584px 634px #fff, 1353px 832px #fff, 8px 1270px #fff,
      773px 437px #fff, 706px 2264px #fff, 1421px 1754px #fff, 169px 2446px #fff,
      304px 595px #fff, 341px 1301px #fff, 187px 2384px #fff, 374px 1202px #fff,
      1829px 1294px #fff, 1248px 513px #fff, 1701px 1778px #fff,
      1728px 1249px #fff, 1784px 83px #fff, 531px 2530px #fff, 71px 821px #fff,
      1997px 1664px #fff, 1950px 292px #fff, 2102px 785px #fff,
      1310px 1446px #fff, 343px 1164px #fff, 687px 2338px #fff,
      1461px 2217px #fff, 32px 2545px #fff, 2044px 2481px #fff, 512px 69px #fff,
      484px 771px #fff, 2106px 2443px #fff, 1909px 814px #fff,
      1986px 1494px #fff, 278px 2184px #fff, 2305px 2182px #fff,
      2270px 1013px #fff, 965px 1178px #fff, 2355px 2127px #fff,
      1523px 736px #fff, 794px 144px #fff, 309px 1650px #fff, 1243px 249px #fff,
      140px 2257px #fff, 1071px 529px #fff, 691px 1578px #fff, 1546px 261px #fff,
      1797px 2550px #fff, 9px 121px #fff, 1097px 240px #fff, 1657px 604px #fff,
      533px 2211px #fff, 310px 1156px #fff, 1305px 722px #fff;
    height: 1px;
    width: 1px;
  }

  @-webkit-keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }

  @keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }
</style>

]]></content></entry><entry><title type="html">部署一个 Kubernetes 集群</title><link href="https://thiscute.world/posts/kubernetes-deployment-using-kubeadm/"/><id>https://thiscute.world/posts/kubernetes-deployment-using-kubeadm/</id><author><name>ryan4yin</name></author><published>2022-01-25T01:37:00+08:00</published><updated>2022-01-25T01:37:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文由个人笔记 <a href="https://github.com/ryan4yin/knowledge/tree/master/kubernetes" target="_blank" rel="noopener noreffer">ryan4yin/knowledge</a> 整理而来，不保证正确</p>
</blockquote>
<h2 id="本地-kubernetes-集群安装工具" class="headerLink">
    <a href="#%e6%9c%ac%e5%9c%b0-kubernetes-%e9%9b%86%e7%be%a4%e5%ae%89%e8%a3%85%e5%b7%a5%e5%85%b7" class="header-mark"></a>本地 Kubernetes 集群安装工具</h2><blockquote>
<p>云上的 Kubernetes 集群，基本上各云厂商都支持一键部署。这里主要关注本地部署，或者叫做裸机(baremetal)部署</p>
</blockquote>
<blockquote>
<p>本文介绍的方法适合开发测试使用，安全性、稳定性、长期可用性等方案都可能还有问题。</p>
</blockquote>
<p>kubernetes 是一个组件化的系统，安装过程有很大的灵活性，很多组件都有多种实现，这些实现各有特点，让初学者眼花缭乱。</p>
<p>而且要把这些组件一个个安装配置好并且能协同工作，也是很不容易的。</p>
<p>因此社区出现了各种各样的安装方案，下面介绍下几种支持裸机（Baremetal）部署的工具：</p>
<ol>
<li><a href="https://kuboard.cn/install/install-k8s.html" target="_blank" rel="noopener noreffer">kubeadm</a>: 社区的集群安装工具，目前已经很成熟了。
<ol>
<li>使用难度：简单</li>
</ol>
</li>
<li><a href="https://github.com/k3s-io/k3s" target="_blank" rel="noopener noreffer">k3s</a>: 轻量级 kubernetes，资源需求小，部署非常简单，适合开发测试用或者边缘环境
<ol>
<li>支持 airgap 离线部署</li>
<li>使用难度：超级简单</li>
</ol>
</li>
<li><a href="https://github.com/alibaba/sealer" target="_blank" rel="noopener noreffer">alibaba/sealer</a>: 支持将整个 kubernetes 打包成一个镜像进行交付，而且部署也非常简单。
<ol>
<li>使用难度：超级简单</li>
<li>这个项目目前还在发展中，不过貌似已经有很多 toB 的公司在使用它进行 k8s 应用的交付了。</li>
</ol>
</li>
<li><a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener noreffer">kubespray</a>: 适合自建生产级别的集群，是一个大而全的 kubernetes 安装方案，自动安装容器运行时、k8s、网络插件等组件，而且各组件都有很多方案可选，但是感觉有点复杂。
<ol>
<li>使用难度：中等</li>
<li>支持 airgap 离线部署，但是以前我试用过是有坑，现在不知道咋样了</li>
<li>底层使用了 kubeadm 部署集群</li>
</ol>
</li>
<li><a href="https://github.com/labring/sealos" target="_blank" rel="noopener noreffer">sealos</a>: 也很方便，一行命令部署</li>
<li>其他社区部署方案</li>
<li>自己写脚本，使用各组件的二进制文件进行部署。</li>
</ol>
<p>笔者为了学习 Kubernetes，下面采用官方的 kubeadm 进行部署，容器运行时使用 containerd，网络插件则使用目前最潮的基于 eBPF 的 Cilium.</p>
<p>kubernetes 官方介绍了两种高可用集群的拓扑结构：「堆叠 Etcd 拓扑（Stacked Etcd Topology）」和「外部 Etcd 拓扑（External Etcd Topology）」。
「堆叠 Etcd 拓扑」是指 Etcd 跟 Kubernetes Master 的其他组件部署在同一节点上，而「外部 Etcd 拓扑（External Etcd Topology）」则是指 Etcd 单独部署，与 Kubernetes Master 分开。</p>
<p>简单起见，本文使用「堆叠 Etcd 拓扑」结构，创建一个 3 master 的高可用集群。</p>
<p>参考：</p>
<ul>
<li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/" target="_blank" rel="noopener noreffer">Kubernetes Docs - Installing kubeadm</a></li>
<li><a href="https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/high-availability/" target="_blank" rel="noopener noreffer">Kubernetes Docs - Creating Highly Available clusters with kubeadm</a></li>
</ul>
<h2 id="0-网络环境的准备" class="headerLink">
    <a href="#0-%e7%bd%91%e7%bb%9c%e7%8e%af%e5%a2%83%e7%9a%84%e5%87%86%e5%a4%87" class="header-mark"></a>0. 网络环境的准备</h2><p>本文行文未考虑国内网络环境，但是 Kubernetes 用到的很多镜像都在 gcr.io 上，在国内访问会有困难。</p>
<p>如果对可靠性要求高，最好是自建私有镜像仓库，把镜像推送到私有仓库。可以通过如下命令列出所有 kubeadm 需要用到的镜像地址：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ kubeadm config images list --kubernetes-version v1.22.1
</span></span><span class="line"><span class="cl">k8s.gcr.io/kube-apiserver:v1.22.1
</span></span><span class="line"><span class="cl">k8s.gcr.io/kube-controller-manager:v1.22.1
</span></span><span class="line"><span class="cl">k8s.gcr.io/kube-scheduler:v1.22.1
</span></span><span class="line"><span class="cl">k8s.gcr.io/kube-proxy:v1.22.1
</span></span><span class="line"><span class="cl">k8s.gcr.io/pause:3.5
</span></span><span class="line"><span class="cl">k8s.gcr.io/etcd:3.5.0-0
</span></span><span class="line"><span class="cl">k8s.gcr.io/coredns/coredns:v1.8.4
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里提供三个解决办法：</p>
<ul>
<li>在家庭路由器上整个科学代理，实现全局科学上网。（我就是这么干的）</li>
<li>使用 <a href="https://github.com/liangyuanpeng" target="_blank" rel="noopener noreffer">liangyuanpeng</a> 大佬在评论区提供的 gcr 国内镜像地址，这需要进行如下替换：
<ul>
<li>k8s.gcr.io&mdash;&gt; lank8s.cn</li>
</ul>
</li>
<li>自己维护一个国内镜像仓库（或私有镜像仓库如 harbor），使用 <code>skopeo</code> 等工具或脚本将上述镜像列表拷贝到你的私有仓库</li>
</ul>
<h2 id="1-节点的环境准备" class="headerLink">
    <a href="#1-%e8%8a%82%e7%82%b9%e7%9a%84%e7%8e%af%e5%a2%83%e5%87%86%e5%a4%87" class="header-mark"></a>1. 节点的环境准备</h2><p>首先准备三台 Linux 虚拟机，系统按需选择，然后调整这三台机器的设置：</p>
<ul>
<li>节点配置：
<ul>
<li>master：不低于 2c/3g，硬盘 20G
<ul>
<li>主节点性能也受集群 Pods 个数的影响，上述配置应该可以支撑到每个 Worker 节点跑 100 个 Pod.</li>
</ul>
</li>
<li>worker：看需求，建议不低于 2c/4g，硬盘不小于 20G，资源充分的话建议 40G 以上。</li>
</ul>
</li>
<li>处于同一网络内并可互通（通常是同一局域网）</li>
<li>各主机的 hostname 和 mac/ip 地址以及 <code>/sys/class/dmi/id/product_uuid</code>，都必须唯一
<ul>
<li>这里新手最容易遇到的问题，是 hostname 冲突</li>
</ul>
</li>
<li><strong>必须</strong>关闭 swap 交换内存，kubelet 才能正常工作</li>
</ul>
<p>方便起见，我直接使用 <a href="https://github.com/ryan4yin/pulumi-libvirt#examples" target="_blank" rel="noopener noreffer">ryan4yin/pulumi-libvirt</a> 自动创建了五个 opensuse leap 15.3 虚拟机，并设置好了 ip/hostname.</p>
<h3 id="11-iptables-设置" class="headerLink">
    <a href="#11-iptables-%e8%ae%be%e7%bd%ae" class="header-mark"></a>1.1 iptables 设置</h3><p>目前 kubernetes 的容器网络，默认使用的是 bridge 模式，这种模式下，需要使 <code>iptables</code> 能够接管 bridge 上的流量。</p>
<p>配置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo modprobe br_netfilter
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf
</span></span></span><span class="line"><span class="cl"><span class="s">br_netfilter
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-iptables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">sudo sysctl --system
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="12-开放节点端口" class="headerLink">
    <a href="#12-%e5%bc%80%e6%94%be%e8%8a%82%e7%82%b9%e7%ab%af%e5%8f%a3" class="header-mark"></a>1.2 开放节点端口</h3><blockquote>
<p>局域网环境的话，建议直接关闭防火墙。这样所有端口都可用，方便快捷。</p>
</blockquote>
<blockquote>
<p>通常我们的云上集群，也是关闭防火墙的，只是会通过云服务提供的「安全组」来限制客户端 ip</p>
</blockquote>
<p>Control-plane 节点，也就是 master，需要开放如下端口：</p>
<table>
<thead>
<tr>
<th>Protocol</th>
<th>Direction</th>
<th>Port Range</th>
<th>Purpose</th>
<th>Used By</th>
</tr>
</thead>
<tbody>
<tr>
<td>TCP</td>
<td>Inbound</td>
<td>6443*</td>
<td>Kubernetes API server</td>
<td>All</td>
</tr>
<tr>
<td>TCP</td>
<td>Inbound</td>
<td>2379-2380</td>
<td>etcd server client API</td>
<td>kube-apiserver, etcd</td>
</tr>
<tr>
<td>TCP</td>
<td>Inbound</td>
<td>10250</td>
<td>kubelet API</td>
<td>Self, Control plane</td>
</tr>
<tr>
<td>TCP</td>
<td>Inbound</td>
<td>10251</td>
<td>kube-scheduler</td>
<td>Self</td>
</tr>
<tr>
<td>TCP</td>
<td>Inbound</td>
<td>10252</td>
<td>kube-controller-manager</td>
<td>Self</td>
</tr>
</tbody>
</table>
<p>Worker 节点需要开发如下端口：</p>
<table>
<thead>
<tr>
<th>Protocol</th>
<th>Direction</th>
<th>Port Range</th>
<th>Purpose</th>
<th>Used By</th>
</tr>
</thead>
<tbody>
<tr>
<td>TCP</td>
<td>Inbound</td>
<td>10250</td>
<td>kubelet API</td>
<td>Self, Control plane</td>
</tr>
<tr>
<td>TCP</td>
<td>Inbound</td>
<td>30000-32767</td>
<td>NodePort Services†</td>
<td>All</td>
</tr>
</tbody>
</table>
<p>另外通常我们本地测试的时候，可能更想直接在 <code>80</code> <code>443</code> <code>8080</code> 等端口上使用 <code>NodePort</code>，
就需要修改 kube-apiserver 的 <code>--service-node-port-range</code> 参数来自定义 NodePort 的端口范围，相应的 Worker 节点也得开放这些端口。</p>
<h2 id="2-安装-containerd" class="headerLink">
    <a href="#2-%e5%ae%89%e8%a3%85-containerd" class="header-mark"></a>2. 安装 containerd</h2><p>首先是环境配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/modules-load.d/containerd.conf
</span></span></span><span class="line"><span class="cl"><span class="s">overlay
</span></span></span><span class="line"><span class="cl"><span class="s">br_netfilter
</span></span></span><span class="line"><span class="cl"><span class="s">nf_conntrack
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo modprobe overlay
</span></span><span class="line"><span class="cl">sudo modprobe br_netfilter
</span></span><span class="line"><span class="cl">sudo modprobe nf_conntrack
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Setup required sysctl params, these persist across reboots.</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-iptables  = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.ipv4.ip_forward                 = 1
</span></span></span><span class="line"><span class="cl"><span class="s">net.bridge.bridge-nf-call-ip6tables = 1
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Apply sysctl params without reboot</span>
</span></span><span class="line"><span class="cl">sudo sysctl --system
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装 containerd+nerdctl:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">wget https://github.com/containerd/nerdctl/releases/download/v0.11.1/nerdctl-full-0.11.1-linux-amd64.tar.gz
</span></span><span class="line"><span class="cl">tar -axvf nerdctl-full-0.11.1-linux-amd64.tar.gz
</span></span><span class="line"><span class="cl"><span class="c1"># 这里简单起见，rootless 相关的东西也一起装进去了，测试嘛就无所谓了...</span>
</span></span><span class="line"><span class="cl">mv bin/* /usr/local/bin/
</span></span><span class="line"><span class="cl">mv lib/systemd/system/containerd.service /usr/lib/systemd/system/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> containerd
</span></span><span class="line"><span class="cl">systemctl start containerd
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>nerdctl</code> 是一个 containerd 的命令行工具，但是它的容器、镜像与 Kubernetes 的容器、镜像是完全隔离的，不能互通！</p>
<p>目前只能通过 <code>crictl</code> 来查看、拉取 Kubernetes 的容器、镜像，下一节会介绍 crictl 的安装。</p>
<h2 id="3-安装-kubeletkubeadmkubectl" class="headerLink">
    <a href="#3-%e5%ae%89%e8%a3%85-kubeletkubeadmkubectl" class="header-mark"></a>3. 安装 kubelet/kubeadm/kubectl</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 一些全局都需要用的变量</span>
</span></span><span class="line"><span class="cl"><span class="nv">CNI_VERSION</span><span class="o">=</span><span class="s2">&#34;v0.8.2&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">CRICTL_VERSION</span><span class="o">=</span><span class="s2">&#34;v1.17.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># kubernetes 的版本号</span>
</span></span><span class="line"><span class="cl"><span class="c1"># RELEASE=&#34;$(curl -sSL https://dl.k8s.io/release/stable.txt)&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nv">RELEASE</span><span class="o">=</span><span class="s2">&#34;1.22.1&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># kubelet 配置文件的版本号</span>
</span></span><span class="line"><span class="cl"><span class="nv">RELEASE_VERSION</span><span class="o">=</span><span class="s2">&#34;v0.4.0&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 架构</span>
</span></span><span class="line"><span class="cl"><span class="nv">ARCH</span><span class="o">=</span><span class="s2">&#34;amd64&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#　安装目录</span>
</span></span><span class="line"><span class="cl"><span class="nv">DOWNLOAD_DIR</span><span class="o">=</span>/usr/local/bin
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># CNI 插件</span>
</span></span><span class="line"><span class="cl">sudo mkdir -p /opt/cni/bin
</span></span><span class="line"><span class="cl">curl -L <span class="s2">&#34;https://github.com/containernetworking/plugins/releases/download/</span><span class="si">${</span><span class="nv">CNI_VERSION</span><span class="si">}</span><span class="s2">/cni-plugins-linux-</span><span class="si">${</span><span class="nv">ARCH</span><span class="si">}</span><span class="s2">-</span><span class="si">${</span><span class="nv">CNI_VERSION</span><span class="si">}</span><span class="s2">.tgz&#34;</span> <span class="p">|</span> sudo tar -C /opt/cni/bin -xz
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># crictl 相关工具</span>
</span></span><span class="line"><span class="cl">curl -L <span class="s2">&#34;https://github.com/kubernetes-sigs/cri-tools/releases/download/</span><span class="si">${</span><span class="nv">CRICTL_VERSION</span><span class="si">}</span><span class="s2">/crictl-</span><span class="si">${</span><span class="nv">CRICTL_VERSION</span><span class="si">}</span><span class="s2">-linux-</span><span class="si">${</span><span class="nv">ARCH</span><span class="si">}</span><span class="s2">.tar.gz&#34;</span> <span class="p">|</span> sudo tar -C <span class="nv">$DOWNLOAD_DIR</span> -xz
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># kubelet/kubeadm/kubectl</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> <span class="nv">$DOWNLOAD_DIR</span>
</span></span><span class="line"><span class="cl">sudo curl -L --remote-name-all https://storage.googleapis.com/kubernetes-release/release/<span class="si">${</span><span class="nv">RELEASE</span><span class="si">}</span>/bin/linux/<span class="si">${</span><span class="nv">ARCH</span><span class="si">}</span>/<span class="o">{</span>kubeadm,kubelet,kubectl<span class="o">}</span>
</span></span><span class="line"><span class="cl">sudo chmod +x <span class="o">{</span>kubeadm,kubelet,kubectl<span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># kubelet/kubeadm 配置</span>
</span></span><span class="line"><span class="cl">curl -sSL <span class="s2">&#34;https://raw.githubusercontent.com/kubernetes/release/</span><span class="si">${</span><span class="nv">RELEASE_VERSION</span><span class="si">}</span><span class="s2">/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service&#34;</span> <span class="p">|</span> sed <span class="s2">&#34;s:/usr/bin:</span><span class="si">${</span><span class="nv">DOWNLOAD_DIR</span><span class="si">}</span><span class="s2">:g&#34;</span> <span class="p">|</span> sudo tee /etc/systemd/system/kubelet.service
</span></span><span class="line"><span class="cl">sudo mkdir -p /etc/systemd/system/kubelet.service.d
</span></span><span class="line"><span class="cl">curl -sSL <span class="s2">&#34;https://raw.githubusercontent.com/kubernetes/release/</span><span class="si">${</span><span class="nv">RELEASE_VERSION</span><span class="si">}</span><span class="s2">/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf&#34;</span> <span class="p">|</span> sed <span class="s2">&#34;s:/usr/bin:</span><span class="si">${</span><span class="nv">DOWNLOAD_DIR</span><span class="si">}</span><span class="s2">:g&#34;</span> <span class="p">|</span> sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl <span class="nb">enable</span> --now kubelet
</span></span><span class="line"><span class="cl"><span class="c1"># 验证 kubelet 启动起来了，但是目前还没有初始化配置，过一阵就会重启一次</span>
</span></span><span class="line"><span class="cl">systemctl status kubelet
</span></span></code></pre></td></tr></table>
</div>
</div><p>试用 crictl:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">CONTAINER_RUNTIME_ENDPOINT</span><span class="o">=</span><span class="s1">&#39;unix:///var/run/containerd/containerd.sock&#39;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有 pods，现在应该啥也没</span>
</span></span><span class="line"><span class="cl">crictl  pods
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有镜像</span>
</span></span><span class="line"><span class="cl">crictl images
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="4-为-master-的-kube-apiserver-创建负载均衡实现高可用" class="headerLink">
    <a href="#4-%e4%b8%ba-master-%e7%9a%84-kube-apiserver-%e5%88%9b%e5%bb%ba%e8%b4%9f%e8%bd%bd%e5%9d%87%e8%a1%a1%e5%ae%9e%e7%8e%b0%e9%ab%98%e5%8f%af%e7%94%a8" class="header-mark"></a>4. 为 master 的 kube-apiserver 创建负载均衡实现高可用</h2><p>根据 kubeadm 官方文档 <a href="https://github.com/kubernetes/kubeadm/blob/master/docs/ha-considerations.md#kube-vip" target="_blank" rel="noopener noreffer">Kubeadm Docs - High Availability Considerations</a> 介绍，要实现 kube-apiserver 的高可用，目前最知名的负载均衡方式是 keepalived+haproxy，另外也可以考虑使用 kube-vip 等更简单的工具。</p>
<p>简单起见，我们直接用 kube-vip 吧，参考了 kube-vip 的官方文档：<a href="https://kube-vip.io/install_static/" target="_blank" rel="noopener noreffer">Kube-vip as a Static Pod with Kubelet</a>.</p>
<blockquote>
<p>P.S. 我也见过有的安装工具会直接抛弃 keepalived，直接在每个节点上跑一个 nginx 做负载均衡，配置里写死了所有 master 的地址&hellip;</p>
</blockquote>
<p>首先使用如下命令生成 kube-vip 的配置文件，以 ARP 为例（生产环境建议换成 BGP）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee add-kube-vip.sh
</span></span></span><span class="line"><span class="cl"><span class="s"># 你的虚拟机网卡，opensuse/centos 等都是 eth0，但是 ubuntu 可能是 ens3
</span></span></span><span class="line"><span class="cl"><span class="s">export INTERFACE=eth0
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s"># 用于实现高可用的 vip，需要和前面的网络接口在同一网段内，否则就无法路由了。
</span></span></span><span class="line"><span class="cl"><span class="s">export VIP=192.168.122.200
</span></span></span><span class="line"><span class="cl"><span class="s">
</span></span></span><span class="line"><span class="cl"><span class="s"># 生成 static-pod 的配置文件
</span></span></span><span class="line"><span class="cl"><span class="s">mkdir -p /etc/kubernetes/manifests
</span></span></span><span class="line"><span class="cl"><span class="s">nerdctl run --rm --network=host --entrypoint=/kube-vip ghcr.io/kube-vip/kube-vip:v0.3.8 \
</span></span></span><span class="line"><span class="cl"><span class="s">  manifest pod \
</span></span></span><span class="line"><span class="cl"><span class="s">  --interface $INTERFACE \
</span></span></span><span class="line"><span class="cl"><span class="s">  --vip $VIP \
</span></span></span><span class="line"><span class="cl"><span class="s">  --controlplane \
</span></span></span><span class="line"><span class="cl"><span class="s">  --services \
</span></span></span><span class="line"><span class="cl"><span class="s">  --arp \
</span></span></span><span class="line"><span class="cl"><span class="s">  --leaderElection | tee  /etc/kubernetes/manifests/kube-vip.yaml
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">bash add-kube-vip.sh
</span></span></code></pre></td></tr></table>
</div>
</div><p>三个 master 节点都需要跑下上面的命令（worker 不需要），创建好 kube-vip 的 static-pod 配置文件。
在完成 kubeadm 初始化后，kubelet 会自动把它们拉起为 static pod.</p>
<h2 id="5-使用-kubeadm-创建集群" class="headerLink">
    <a href="#5-%e4%bd%bf%e7%94%a8-kubeadm-%e5%88%9b%e5%bb%ba%e9%9b%86%e7%be%a4" class="header-mark"></a>5. 使用 kubeadm 创建集群</h2><p>其实需要运行的就是这条命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 极简配置：</span>
</span></span><span class="line"><span class="cl">cat <span class="s">&lt;&lt;EOF | sudo tee kubeadm-config.yaml
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: kubeadm.k8s.io/v1beta3
</span></span></span><span class="line"><span class="cl"><span class="s">kind: InitConfiguration
</span></span></span><span class="line"><span class="cl"><span class="s">nodeRegistration:
</span></span></span><span class="line"><span class="cl"><span class="s">  criSocket: &#34;/var/run/containerd/containerd.sock&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">  imagePullPolicy: IfNotPresent
</span></span></span><span class="line"><span class="cl"><span class="s">---
</span></span></span><span class="line"><span class="cl"><span class="s">kind: ClusterConfiguration
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: kubeadm.k8s.io/v1beta3
</span></span></span><span class="line"><span class="cl"><span class="s">kubernetesVersion: v1.22.1
</span></span></span><span class="line"><span class="cl"><span class="s">clusterName: kubernetes
</span></span></span><span class="line"><span class="cl"><span class="s">certificatesDir: /etc/kubernetes/pki
</span></span></span><span class="line"><span class="cl"><span class="s">imageRepository: k8s.gcr.io
</span></span></span><span class="line"><span class="cl"><span class="s">controlPlaneEndpoint: &#34;192.168.122.200:6443&#34;  # 填 apiserver 的 vip 地址，或者整个域名也行，但是就得加 /etc/hosts 或者内网 DNS 解析
</span></span></span><span class="line"><span class="cl"><span class="s">networking:
</span></span></span><span class="line"><span class="cl"><span class="s">  serviceSubnet: &#34;10.96.0.0/16&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">  podSubnet: &#34;10.244.0.0/16&#34;
</span></span></span><span class="line"><span class="cl"><span class="s">etcd:
</span></span></span><span class="line"><span class="cl"><span class="s">  local:
</span></span></span><span class="line"><span class="cl"><span class="s">    dataDir: /var/lib/etcd
</span></span></span><span class="line"><span class="cl"><span class="s">---
</span></span></span><span class="line"><span class="cl"><span class="s">apiVersion: kubelet.config.k8s.io/v1beta1
</span></span></span><span class="line"><span class="cl"><span class="s">kind: KubeletConfiguration
</span></span></span><span class="line"><span class="cl"><span class="s">cgroupDriver: systemd
</span></span></span><span class="line"><span class="cl"><span class="s"># 让 kubelet 从 certificates.k8s.io 申请由集群 CA Root 签名的 tls 证书，而非直接使用自签名证书
</span></span></span><span class="line"><span class="cl"><span class="s"># 如果不启用这个， 安装 metrics-server 时就会遇到证书报错，后面会详细介绍。
</span></span></span><span class="line"><span class="cl"><span class="s">serverTLSBootstrap: true
</span></span></span><span class="line"><span class="cl"><span class="s">EOF</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 kubeadm 默认的完整配置，供参考</span>
</span></span><span class="line"><span class="cl">kubeadm config print init-defaults &gt; init.default.yaml
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 执行集群的初始化，这会直接将当前节点创建为 master</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 成功运行的前提：前面该装的东西都装好了，而且 kubelet 已经在后台运行了</span>
</span></span><span class="line"><span class="cl"><span class="c1"># `--upload-certs` 会将生成的集群证书上传到 kubeadm 服务器，在两小时内加入集群的 master 节点会自动拉证书，主要是方便集群创建。</span>
</span></span><span class="line"><span class="cl">kubeadm init --config kubeadm-config.yaml --upload-certs
</span></span></code></pre></td></tr></table>
</div>
</div><p>kubeadm 应该会报错，提示你有些依赖不存在，下面先安装好依赖项。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo zypper in -y socat ebtables conntrack-tools
</span></span></code></pre></td></tr></table>
</div>
</div><p>再重新运行前面的 kubeadm 命令，应该就能正常执行了，它做的操作有：</p>
<ul>
<li>拉取控制面的容器镜像</li>
<li>生成 ca 根证书</li>
<li>使用根证书为 etcd/apiserver 等一票工具生成 tls 证书</li>
<li>为控制面的各个组件生成 kubeconfig 配置</li>
<li>生成 static pod 配置，kubelet 会根据这些配置自动拉起 kube-proxy 以及其他所有的 k8s master 组件</li>
</ul>
<p>运行完会给出三部分命令：</p>
<ul>
<li>将 <code>kubeconfig</code> 放到 <code>$HOME/.kube/config</code> 下，<code>kubectl</code> 需要使用该配置文件连接 kube-apiserver</li>
<li>control-plane 节点加入集群的命令:
<ul>
<li>这里由于我们提前添加了 kube-vip 的 static-pod 配置，这里的 preflight-check 会报错，需要添加此参数忽略该报错 - <code>--ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests</code></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubeadm join 192.168.122.200:6443 --token &lt;token&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --discovery-token-ca-cert-hash sha256:&lt;hash&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --control-plane --certificate-key &lt;key&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --ignore-preflight-errors<span class="o">=</span>DirAvailable--etc-kubernetes-manifests
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>worker 节点加入集群的命令:
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubeadm join 192.168.122.200:6443 --token &lt;token&gt; <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>      --discovery-token-ca-cert-hash sha256:&lt;hash&gt; 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>跑完第一部分 <code>kubeconfig</code> 的处理命令后，就可以使用 kubectl 查看集群状况了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">k8s-master-0:~/kubeadm <span class="c1"># kubectl get no</span>
</span></span><span class="line"><span class="cl">NAME           STATUS     ROLES                  AGE   VERSION
</span></span><span class="line"><span class="cl">k8s-master-0   NotReady   control-plane,master   79s   v1.22.1
</span></span><span class="line"><span class="cl">k8s-master-0:~/kubeadm <span class="c1"># kubectl get po --all-namespaces</span>
</span></span><span class="line"><span class="cl">NAMESPACE     NAME                                   READY   STATUS    RESTARTS   AGE
</span></span><span class="line"><span class="cl">kube-system   coredns-78fcd69978-6tlnw               0/1     Pending   <span class="m">0</span>          83s
</span></span><span class="line"><span class="cl">kube-system   coredns-78fcd69978-hxtvs               0/1     Pending   <span class="m">0</span>          83s
</span></span><span class="line"><span class="cl">kube-system   etcd-k8s-master-0                      1/1     Running   <span class="m">6</span>          90s
</span></span><span class="line"><span class="cl">kube-system   kube-apiserver-k8s-master-0            1/1     Running   <span class="m">4</span>          90s
</span></span><span class="line"><span class="cl">kube-system   kube-controller-manager-k8s-master-0   1/1     Running   <span class="m">4</span>          90s
</span></span><span class="line"><span class="cl">kube-system   kube-proxy-6w2bx                       1/1     Running   <span class="m">0</span>          83s
</span></span><span class="line"><span class="cl">kube-system   kube-scheduler-k8s-master-0            1/1     Running   <span class="m">7</span>          97s
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在在其他节点运行前面打印出的加入集群的命令，就可以搭建好一个高可用的集群了。</p>
<p>所有节点都加入集群后，通过 kubectl 查看，应该是三个控制面 master，两个 worker：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">k8s-master-0:~/kubeadm <span class="c1"># kubectl get node</span>
</span></span><span class="line"><span class="cl">NAME           STATUS     ROLES                  AGE     VERSION
</span></span><span class="line"><span class="cl">k8s-master-0   NotReady   control-plane,master   26m     v1.22.1
</span></span><span class="line"><span class="cl">k8s-master-1   NotReady   control-plane,master   7m2s    v1.22.1
</span></span><span class="line"><span class="cl">k8s-master-2   NotReady   control-plane,master   2m10s   v1.22.1
</span></span><span class="line"><span class="cl">k8s-worker-0   NotReady   &lt;none&gt;                 97s     v1.22.1
</span></span><span class="line"><span class="cl">k8s-worker-1   NotReady   &lt;none&gt;                 86s     v1.22.1
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在它们都还处于 NotReady 状态，需要等到我们把网络插件安装好，才会 Ready.</p>
<p>现在再看下集群的证书签发状态：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ kubectl get csr --sort-by<span class="o">=</span><span class="s1">&#39;{.spec.username}&#39;</span>
</span></span><span class="line"><span class="cl">NAME        AGE     SIGNERNAME                                    REQUESTOR                  REQUESTEDDURATION   CONDITION
</span></span><span class="line"><span class="cl">csr-95hll   6m58s   kubernetes.io/kube-apiserver-client-kubelet   system:bootstrap:q8ivnz    &lt;none&gt;              Approved,Issued
</span></span><span class="line"><span class="cl">csr-tklnr   7m5s    kubernetes.io/kube-apiserver-client-kubelet   system:bootstrap:q8ivnz    &lt;none&gt;              Approved,Issued
</span></span><span class="line"><span class="cl">csr-w92jv   9m15s   kubernetes.io/kube-apiserver-client-kubelet   system:bootstrap:q8ivnz    &lt;none&gt;              Approved,Issued
</span></span><span class="line"><span class="cl">csr-rv7sj   8m11s   kubernetes.io/kube-apiserver-client-kubelet   system:bootstrap:q8ivnz    &lt;none&gt;              Approved,Issued
</span></span><span class="line"><span class="cl">csr-nxkgx   10m     kubernetes.io/kube-apiserver-client-kubelet   system:node:k8s-master-0   &lt;none&gt;              Approved,Issued
</span></span><span class="line"><span class="cl">csr-cd22c   10m     kubernetes.io/kubelet-serving                 system:node:k8s-master-0   &lt;none&gt;              Pending
</span></span><span class="line"><span class="cl">csr-wjrnr   9m53s   kubernetes.io/kubelet-serving                 system:node:k8s-master-0   &lt;none&gt;              Pending
</span></span><span class="line"><span class="cl">csr-sjq42   9m8s    kubernetes.io/kubelet-serving                 system:node:k8s-master-1   &lt;none&gt;              Pending
</span></span><span class="line"><span class="cl">csr-xtv8f   8m56s   kubernetes.io/kubelet-serving                 system:node:k8s-master-1   &lt;none&gt;              Pending
</span></span><span class="line"><span class="cl">csr-f2dsf   8m3s    kubernetes.io/kubelet-serving                 system:node:k8s-master-2   &lt;none&gt;              Pending
</span></span><span class="line"><span class="cl">csr-xl8dg   6m58s   kubernetes.io/kubelet-serving                 system:node:k8s-worker-0   &lt;none&gt;              Pending
</span></span><span class="line"><span class="cl">csr-p9g24   6m52s   kubernetes.io/kubelet-serving                 system:node:k8s-worker-1   &lt;none&gt;              Pending
</span></span></code></pre></td></tr></table>
</div>
</div><p>能看到有好几个 <code>kubernetes.io/kubelet-serving</code> 的证书还处于 pending 状态，
这是因为我们在 kubeadm 配置文件中，设置了 <code>serverTLSBootstrap: true</code>，让 Kubelet 从集群中申请 CA 签名证书，而不是自签名导致的。</p>
<p>设置这个参数的主要目的，是为了让 metrics-server 等组件能使用 https 协议与 kubelet 通信，避免为 metrics-server 添加参数 <code>--kubelet-insecure-tls</code>.</p>
<p>目前 kubeadm 不支持自动批准 kubelet 申请的证书，需要我们手动批准一下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 批准 Kubelet 申请的所有证书</span>
</span></span><span class="line"><span class="cl">kubectl certificate approve csr-cd22c csr-wjrnr csr-sjq42 csr-xtv8f csr-f2dsf csr-xl8dg csr-p9g24
</span></span></code></pre></td></tr></table>
</div>
</div><p>在未批准这些证书之前，所有需要调用 kubelet api 的功能都将无法使用，比如：</p>
<ul>
<li>查看 pod 日志</li>
<li>获取节点 metrics</li>
<li>等等</li>
</ul>
<h3 id="51-常见问题" class="headerLink">
    <a href="#51-%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" class="header-mark"></a>5.1 常见问题</h3><h4 id="511-重置集群配置" class="headerLink">
    <a href="#511-%e9%87%8d%e7%bd%ae%e9%9b%86%e7%be%a4%e9%85%8d%e7%bd%ae" class="header-mark"></a>5.1.1 重置集群配置</h4><p>创建集群的过程中出现任何问题，都可以通过在所有节点上运行 <code>kubeadm reset</code> 来还原配置，然后重新走 kubeadm 的集群创建流程。</p>
<p>但是要注意几点：</p>
<ul>
<li><code>kubeadm reset</code> 会清除包含 kube-vip 配置在内的所有 static-pod 配置文件，所以 master 节点需要重新跑下前面给的 kube-vip 命令，生成下 kube-vip 配置。</li>
<li><code>kubeadm reset</code> 不会重置网络接口的配置，master 节点需要手动清理下 kube-vip 添加的 vip: <code>ip addr del 192.168.122.200/32 dev eth0</code>.</li>
<li>如果你在安装了网络插件之后希望重装集群，顺序如下：
<ul>
<li>通过 <code>kubectl delete -f xxx.yaml</code>/<code>helm uninstall</code> 删除所有除网络之外的其他应用配置</li>
<li>删除网络插件</li>
<li>先重启一遍所有节点，或者手动重置所有节点的网络配置
<ul>
<li>建议重启，因为我不知道该怎么手动重置&hellip; 试了 <code>systemctl restart network</code> 并不会清理所有虚拟网络接口。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>如此操作后，再重新执行集群安装，应该就没啥毛病了。</p>
<h2 id="6-验证集群的高可用性" class="headerLink">
    <a href="#6-%e9%aa%8c%e8%af%81%e9%9b%86%e7%be%a4%e7%9a%84%e9%ab%98%e5%8f%af%e7%94%a8%e6%80%a7" class="header-mark"></a>6. 验证集群的高可用性</h2><p>虽然网络插件还没装导致集群所有节点都还没 ready，但是我们已经可以通过 kubectl 命令来简单验证集群的高可用性了。</p>
<p>首先，我们将前面放置在 k8s-master-0 的认证文件 <code>$HOME/.kube/config</code> 以及 kunbectl 安装在另一台机器上，比如我直接放我的宿主机。</p>
<p>然后在宿主机上跑 <code>kubectl get node</code> 命令验证集群的高可用性：</p>
<ul>
<li>三个主节点都正常运行时，kubectl 命令也正常</li>
<li>pause 或者 stop 其中一个 master，kubectl 命令仍然能正常运行</li>
<li>再 pause 第二个 master，kubectl 命令应该就会卡住，并且超时，无法使用了</li>
<li>resume 恢复停掉的两个 master 之一，会发现 kubectl 命令又能正常运行了</li>
</ul>
<p>到这里 kubeadm 的工作就完成了，接下来再安装网络插件，集群就可用了。</p>
<h2 id="7-安装网络插件" class="headerLink">
    <a href="#7-%e5%ae%89%e8%a3%85%e7%bd%91%e7%bb%9c%e6%8f%92%e4%bb%b6" class="header-mark"></a>7. 安装网络插件</h2><p>社区有很多种网络插件可选，比较知名且性能也不错的，应该是 Calico 和 Cilium，其中 Cilium 主打基于 eBPF 的高性能与高可观测性。</p>
<p>下面分别介绍这两个插件的安装方法。（注意只能安装其中一个网络插件，不能重复安装。）</p>
<p>需要提前在本机安装好 helm，我这里使用宿主机，因此只需要在宿主机安装:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 一行命令安装，也可以自己手动下载安装包，都行</span>
</span></span><span class="line"><span class="cl">curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 <span class="p">|</span> bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 或者 opensuse 直接用包管理器安装</span>
</span></span><span class="line"><span class="cl">sudo zypper in helm
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="71-安装-cilium" class="headerLink">
    <a href="#71-%e5%ae%89%e8%a3%85-cilium" class="header-mark"></a>7.1 安装 Cilium</h3><blockquote>
<p>官方文档：https://docs.cilium.io/en/v1.10/gettingstarted/k8s-install-kubeadm/</p>
</blockquote>
<p>cilium 通过 eBPF 提供了高性能与高可观测的 k8s 集群网络，
另外 cilium 还提供了比 kube-proxy 更高效的实现，可以完全替代 kube-proxy.</p>
<p>这里我们还是先使用 kube-proxy 模式，先熟悉下 cilium 的使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">helm repo add cilium https://helm.cilium.io/
</span></span><span class="line"><span class="cl">helm search repo cilium/cilium -l <span class="p">|</span> head
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">helm install cilium cilium/cilium --version 1.10.4 --namespace kube-system
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以通过 <code>kubectl get pod -A</code> 查看 cilium 的安装进度，当所有 pod 都 ready 后，集群就 ready 了~</p>
<p>cilium 也提供了专用的客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz<span class="o">{</span>,.sha256sum<span class="o">}</span>
</span></span><span class="line"><span class="cl">sha256sum --check cilium-linux-amd64.tar.gz.sha256sum
</span></span><span class="line"><span class="cl">sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
</span></span><span class="line"><span class="cl">rm cilium-linux-amd64.tar.gz<span class="o">{</span>,.sha256sum<span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后使用 cilium 客户端检查网络插件的状态：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"> $ cilium status --wait
</span></span><span class="line"><span class="cl">    /¯¯<span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span> /¯¯<span class="se">\_</span>_/¯¯<span class="se">\ </span>   Cilium:         OK
</span></span><span class="line"><span class="cl"> <span class="se">\_</span>_/¯¯<span class="se">\_</span>_/    Operator:       OK
</span></span><span class="line"><span class="cl"> /¯¯<span class="se">\_</span>_/¯¯<span class="se">\ </span>   Hubble:         disabled
</span></span><span class="line"><span class="cl"> <span class="se">\_</span>_/¯¯<span class="se">\_</span>_/    ClusterMesh:    disabled
</span></span><span class="line"><span class="cl">    <span class="se">\_</span>_/
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">DaemonSet         cilium             Desired: 5, Ready: 5/5, Available: 5/5
</span></span><span class="line"><span class="cl">Deployment        cilium-operator    Desired: 2, Ready: 2/2, Available: 2/2
</span></span><span class="line"><span class="cl">Containers:       cilium             Running: <span class="m">5</span>
</span></span><span class="line"><span class="cl">                  cilium-operator    Running: <span class="m">2</span>
</span></span><span class="line"><span class="cl">Cluster Pods:     2/2 managed by Cilium
</span></span><span class="line"><span class="cl">Image versions    cilium             quay.io/cilium/cilium:v1.10.4@sha256:7d354052ccf2a7445101d78cebd14444c7c40129ce7889f2f04b89374dbf8a1d: <span class="m">5</span>
</span></span><span class="line"><span class="cl">                  cilium-operator    quay.io/cilium/operator-generic:v1.10.4@sha256:c49a14e34634ff1a494c84b718641f27267fb3a0291ce3d74352b44f8a8d2f93: <span class="m">2</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>cilium 还提供了命令，自动创建 pod 进行集群网络的连接性测试：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ cilium connectivity <span class="nb">test</span>
</span></span><span class="line"><span class="cl">ℹ️  Monitor aggregation detected, will skip some flow validation steps
</span></span><span class="line"><span class="cl">✨ <span class="o">[</span>kubernetes<span class="o">]</span> Creating namespace <span class="k">for</span> connectivity check...
</span></span><span class="line"><span class="cl">✨ <span class="o">[</span>kubernetes<span class="o">]</span> Deploying echo-same-node service...
</span></span><span class="line"><span class="cl">✨ <span class="o">[</span>kubernetes<span class="o">]</span> Deploying same-node deployment...
</span></span><span class="line"><span class="cl">✨ <span class="o">[</span>kubernetes<span class="o">]</span> Deploying client deployment...
</span></span><span class="line"><span class="cl">✨ <span class="o">[</span>kubernetes<span class="o">]</span> Deploying client2 deployment...
</span></span><span class="line"><span class="cl">✨ <span class="o">[</span>kubernetes<span class="o">]</span> Deploying echo-other-node service...
</span></span><span class="line"><span class="cl">✨ <span class="o">[</span>kubernetes<span class="o">]</span> Deploying other-node deployment...
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">ℹ️  Expose Relay locally with:
</span></span><span class="line"><span class="cl">   cilium hubble <span class="nb">enable</span>
</span></span><span class="line"><span class="cl">   cilium status --wait
</span></span><span class="line"><span class="cl">   cilium hubble port-forward<span class="p">&amp;</span>
</span></span><span class="line"><span class="cl">🏃 Running tests...
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">---------------------------------------------------------------------------------------------------------------------
</span></span><span class="line"><span class="cl">✅ All <span class="m">11</span> tests <span class="o">(</span><span class="m">134</span> actions<span class="o">)</span> successful, <span class="m">0</span> tests skipped, <span class="m">0</span> scenarios skipped.
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 <code>kubectl get po -A</code> 能观察到，这个测试命令会自动创建一个 <code>cilium-test</code> 名字空间，并在启动创建若干 pod 进行详细的测试。</p>
<p>整个测试流程大概会持续 5 分多钟，测试完成后，相关 Pod 不会自动删除，使用如下命令手动删除：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl delete namespace cilium-test
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="72-安装-calico" class="headerLink">
    <a href="#72-%e5%ae%89%e8%a3%85-calico" class="header-mark"></a>7.2 安装 Calico</h3><blockquote>
<p>官方文档：https://docs.projectcalico.org/getting-started/kubernetes/self-managed-onprem/onpremises</p>
</blockquote>
<p>也就两三行命令。安装确实特别简单，懒得介绍了，看官方文档吧。</p>
<p>但是实际上 calico 的细节还蛮多的，建议通读下它的官方文档，了解下 calico 的架构。</p>
<h2 id="8-查看集群状态" class="headerLink">
    <a href="#8-%e6%9f%a5%e7%9c%8b%e9%9b%86%e7%be%a4%e7%8a%b6%e6%80%81" class="header-mark"></a>8. 查看集群状态</h2><p>官方的 dashboard 个人感觉不太好用，建议直接在本地装个 k9s 用，特别爽。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo zypper in k9s
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后就可以愉快地玩耍了。</p>
<h2 id="9-安装-metrics-server" class="headerLink">
    <a href="#9-%e5%ae%89%e8%a3%85-metrics-server" class="header-mark"></a>9. 安装 metrics-server</h2><blockquote>
<p>这一步可能遇到的问题：<a href="https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/#kubelet-serving-certs" target="_blank" rel="noopener noreffer">Enabling signed kubelet serving certificates</a></p>
</blockquote>
<p>如果需要使用 HPA 以及简单的集群监控，那么 metrics-server 是必须安装的，现在我们安装一下它。</p>
<p>首先，跑 kubectl 的监控命令应该会报错：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ kubectl top node
</span></span><span class="line"><span class="cl">error: Metrics API not available
</span></span></code></pre></td></tr></table>
</div>
</div><p>k9s 里面应该也看不到任何监控指标。</p>
<p>现在通过 helm 安装它：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
</span></span><span class="line"><span class="cl">helm search repo metrics-server/metrics-server -l <span class="p">|</span> head
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">helm upgrade --install metrics-server metrics-server/metrics-server --version 3.5.0 --namespace kube-system
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>metrics-server 默认只会部署一个实例，如果希望高可用，请参考官方配置：<a href="https://github.com/kubernetes-sigs/metrics-server/tree/master/manifests/high-availability" target="_blank" rel="noopener noreffer">metrics-server - high-availability manifests</a></p>
</blockquote>
<p>等 metrics-server 启动好后，就可以使用 <code>kubectl top</code> 命令啦：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ kubectl top node
</span></span><span class="line"><span class="cl">NAME           CPU<span class="o">(</span>cores<span class="o">)</span>   CPU%   MEMORY<span class="o">(</span>bytes<span class="o">)</span>   MEMORY%   
</span></span><span class="line"><span class="cl">k8s-master-0   327m         16%    1465Mi          50%       
</span></span><span class="line"><span class="cl">k8s-master-1   263m         13%    1279Mi          44%       
</span></span><span class="line"><span class="cl">k8s-master-2   289m         14%    1282Mi          44%       
</span></span><span class="line"><span class="cl">k8s-worker-0   62m          3%     518Mi           13%       
</span></span><span class="line"><span class="cl">k8s-worker-1   115m         2%     659Mi           8%        
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ kubectl top pod
</span></span><span class="line"><span class="cl">No resources found in default namespace.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ kubectl top pod -A
</span></span><span class="line"><span class="cl">NAMESPACE     NAME                                   CPU<span class="o">(</span>cores<span class="o">)</span>   MEMORY<span class="o">(</span>bytes<span class="o">)</span>   
</span></span><span class="line"><span class="cl">kube-system   cilium-45nw4                           9m           135Mi           
</span></span><span class="line"><span class="cl">kube-system   cilium-5x7jf                           6m           154Mi           
</span></span><span class="line"><span class="cl">kube-system   cilium-84sr2                           7m           160Mi           
</span></span><span class="line"><span class="cl">kube-system   cilium-operator-78f45675-dp4b6         2m           30Mi            
</span></span><span class="line"><span class="cl">kube-system   cilium-operator-78f45675-fpm5g         1m           30Mi            
</span></span><span class="line"><span class="cl">kube-system   cilium-tkhl4                           6m           141Mi           
</span></span><span class="line"><span class="cl">kube-system   cilium-zxbvm                           5m           138Mi           
</span></span><span class="line"><span class="cl">kube-system   coredns-78fcd69978-dpxxk               3m           16Mi            
</span></span><span class="line"><span class="cl">kube-system   coredns-78fcd69978-ptd9p               1m           18Mi            
</span></span><span class="line"><span class="cl">kube-system   etcd-k8s-master-0                      61m          88Mi            
</span></span><span class="line"><span class="cl">kube-system   etcd-k8s-master-1                      50m          85Mi            
</span></span><span class="line"><span class="cl">kube-system   etcd-k8s-master-2                      55m          83Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-apiserver-k8s-master-0            98m          462Mi           
</span></span><span class="line"><span class="cl">kube-system   kube-apiserver-k8s-master-1            85m          468Mi           
</span></span><span class="line"><span class="cl">kube-system   kube-apiserver-k8s-master-2            85m          423Mi           
</span></span><span class="line"><span class="cl">kube-system   kube-controller-manager-k8s-master-0   22m          57Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-controller-manager-k8s-master-1   2m           23Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-controller-manager-k8s-master-2   2m           23Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-proxy-j2s76                       1m           24Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-proxy-k6d6z                       1m           18Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-proxy-k85rx                       1m           23Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-proxy-pknsc                       1m           20Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-proxy-xsq4m                       1m           15Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-scheduler-k8s-master-0            3m           25Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-scheduler-k8s-master-1            4m           21Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-scheduler-k8s-master-2            5m           21Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-vip-k8s-master-0                  4m           17Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-vip-k8s-master-1                  2m           16Mi            
</span></span><span class="line"><span class="cl">kube-system   kube-vip-k8s-master-2                  2m           17Mi            
</span></span><span class="line"><span class="cl">kube-system   metrics-server-559f85484-5b6xf         7m           27Mi    
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="10-为-etcd-添加定期备份能力" class="headerLink">
    <a href="#10-%e4%b8%ba-etcd-%e6%b7%bb%e5%8a%a0%e5%ae%9a%e6%9c%9f%e5%a4%87%e4%bb%bd%e8%83%bd%e5%8a%9b" class="header-mark"></a>10. 为 etcd 添加定期备份能力</h2><p>请移步 <a href="https://github.com/ryan4yin/knowledge/blob/master/datastore/etcd/etcd%20%E7%9A%84%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D.md" target="_blank" rel="noopener noreffer">etcd 的备份与恢复</a></p>
<h2 id="11-安装-volume-provisioner" class="headerLink">
    <a href="#11-%e5%ae%89%e8%a3%85-volume-provisioner" class="header-mark"></a>11. 安装 Volume Provisioner</h2><p>在我们学习使用 Prometheus/MinIO/Tekton 等有状态应用时，它们默认情况下会通过 PVC 声明需要的数据卷。</p>
<p>为了支持这个能力，我们需要在集群中部署一个 Volume Provisioner.</p>
<p>对于云上环境，直接接入云服务商提供的 Volume Provisioner 就 OK 了，方便省事而且足够可靠。</p>
<p>而对于 bare-metal 环境，比较有名的应该是 rook-ceph，但是这个玩意部署复杂，维护难度又高，不适合用来测试学习。</p>
<p>对于开发、测试环境，或者个人集群，建议使用：</p>
<ul>
<li>local 数据卷，适合数据可丢失，且不要求分布式的场景，如开发测试环境
<ul>
<li><a href="https://github.com/kubernetes-sigs/sig-storage-local-static-provisioner" target="_blank" rel="noopener noreffer">https://github.com/kubernetes-sigs/sig-storage-local-static-provisioner</a></li>
<li><a href="https://github.com/rancher/local-path-provisioner" target="_blank" rel="noopener noreffer">https://github.com/rancher/local-path-provisioner</a></li>
</ul>
</li>
<li>NFS 数据卷，适合数据可丢失，对性能要求不高，并且要求分布式的场景。比如开发测试环境、或者线上没啥压力的应用
<ul>
<li><a href="https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner" target="_blank" rel="noopener noreffer">https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner</a></li>
<li><a href="https://github.com/kubernetes-csi/csi-driver-nfs" target="_blank" rel="noopener noreffer">https://github.com/kubernetes-csi/csi-driver-nfs</a></li>
<li>NFS 数据的可靠性依赖于外部 NFS 服务器，企业通常使用群晖等 NAS 来做 NFS 服务器</li>
<li>如果外部 NFS 服务器出问题，应用就会崩。</li>
</ul>
</li>
<li>直接使用云上的对象存储，适合希望数据不丢失、对性能要求不高的场景。
<ul>
<li>直接使用 <a href="https://github.com/rclone/rclone" target="_blank" rel="noopener noreffer">https://github.com/rclone/rclone</a> mount 模式来保存数据，或者直接同步文件夹数据到云端（可能会有一定数据丢失）。</li>
</ul>
</li>
</ul>
]]></content></entry><entry><title type="html">Kubernetes 微服务最佳实践</title><link href="https://thiscute.world/posts/kubernetes-best-practices/"/><id>https://thiscute.world/posts/kubernetes-best-practices/</id><author><name>ryan4yin</name></author><published>2022-01-25T00:13:00+08:00</published><updated>2022-01-25T00:13:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文由个人笔记 <a href="https://github.com/ryan4yin/knowledge/tree/master/kubernetes" target="_blank" rel="noopener noreffer">ryan4yin/knowledge</a> 整理而来</p>
</blockquote>
<p>本文主要介绍我个人在使用 Kubernetes 的过程中，总结出的一套「Kubernetes 配置」，是我个人的「最佳实践」。
其中大部分内容都经历过线上环境的考验，但是也有少部分还只在我脑子里模拟过，请谨慎参考。</p>
<p>阅读前的几个注意事项：</p>
<ul>
<li>这份文档比较长，囊括了很多内容，建议当成参考手册使用，先参照目录简单读一读，有需要再细读相关内容。</li>
<li>这份文档需要一定的 Kubernetes 基础才能理解，而且如果没有过实践经验的话，看上去可能会比较枯燥。
<ul>
<li>而有过实践经验的大佬，可能会跟我有不同的见解，欢迎各路大佬评论~</li>
</ul>
</li>
</ul>
<p>我会视情况不定期更新这份文档。</p>
<h2 id="零示例" class="headerLink">
    <a href="#%e9%9b%b6%e7%a4%ba%e4%be%8b" class="header-mark"></a>零、示例</h2><p>首先，这里给出一些本文遵守的前提，这些前提只是契合我遇到的场景，可灵活变通：</p>
<ul>
<li>这里只讨论无状态服务，有状态服务不在讨论范围内</li>
<li>我们不使用 Deployment 的滚动更新能力，而是为每个服务的每个版本，都创建不同的 Deployment + HPA + PodDisruptionBudget，这是为了方便做金丝雀/灰度发布</li>
<li>我们的服务可能会使用 IngressController / Service Mesh 来进行服务的负载均衡、流量切分</li>
</ul>
<p>下面先给出一个 Deployment + HPA + PodDisruptionBudget 的 demo，后面再拆开详细说下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span><span class="lnt">179
</span><span class="lnt">180
</span><span class="lnt">181
</span><span class="lnt">182
</span><span class="lnt">183
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">prod </span><span class="w"> </span><span class="c"># 建议按业务逻辑划分名字空间，prod 仅为示例</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RollingUpdate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 因为服务的每个版本都使用各自的 Deployment，服务更新时其实是用不上这里的滚动更新策略的</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 这个配置应该只在 SRE 手动修改 Deployment 配置时才会生效（通常不应该发生这种事）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">rollingUpdate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">maxSurge</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="l">% </span><span class="w"> </span><span class="c"># 滚动更新时，每次最多更新 10% 的 Pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">maxUnavailable</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">  </span><span class="c"># 滚动更新时，不允许出现不可用的 Pods，也就是说始终要维持 3 个可用副本</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">affinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 注意，podAffinity/podAntiAffinity 可能不是最佳方案，这部分配置待更新</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># topologySpreadConstraints 可能是更好的选择</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">podAffinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">preferredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w"> </span><span class="c"># 非强制性条件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="w">  </span><span class="c"># weight 用于为节点评分，会优先选择评分最高的节点（只有一条规则的情况下，这个值没啥意义）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">podAffinityTerm</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span>- <span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">version</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span>- <span class="l">v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># pod 尽量使用同一种节点类型，也就是尽量保证节点的性能一致</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">node.kubernetes.io/instance-type</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">podAntiAffinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">preferredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w"> </span><span class="c"># 非强制性条件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="w">  </span><span class="c"># weight 用于为节点评分，会优先选择评分最高的节点（只有一条规则的情况下，这个值没啥意义）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">podAffinityTerm</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span>- <span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">version</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span>- <span class="l">v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># 将 pod 尽量打散在多个可用区</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">topology.kubernetes.io/zone</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">requiredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w">  </span><span class="c"># 强制性要求（这个建议按需添加）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 注意这个没有 weights，必须满足列表中的所有条件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">version</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="l">v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># Pod 必须运行在不同的节点上</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes.io/hostname</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># runAsUser: 1000  # 设定用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># runAsGroup: 1000  # 设定用户组</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">runAsNonRoot</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Pod 必须以非 root 用户运行</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">seccompProfile</span><span class="p">:</span><span class="w">  </span><span class="c"># security compute mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RuntimeDefault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">nodeSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">nodegroup</span><span class="p">:</span><span class="w"> </span><span class="l">common </span><span class="w"> </span><span class="c"># 使用专用节点组，如果希望使用多个节点组，可改用节点亲和性</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tmp-dir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">emptyDir</span><span class="p">:</span><span class="w"> </span>{}<span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">my-app:v3 </span><span class="w"> </span><span class="c"># 建议使用私有镜像仓库，规避 docker.io 的镜像拉取限制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">volumeMounts</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="nt">mountPath</span><span class="p">:</span><span class="w"> </span><span class="l">/tmp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">tmp-dir</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">lifecycle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">preStop</span><span class="p">:</span><span class="w">  </span><span class="c"># 在容器被 kill 之前执行</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="l">/bin/sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- -<span class="l">c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="s2">&#34;while [ $(netstat -plunt | grep tcp | wc -l | xargs) -ne 0 ]; do sleep 1; done&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">resources</span><span class="p">:</span><span class="w">  </span><span class="c"># 资源请求与限制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 对于核心服务，建议设置 requests = limits，避免资源竞争</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">requests</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># HPA 会使用 requests 计算资源利用率</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># 建议将 requests 设为服务正常状态下的 CPU 使用率，HPA 的目前指标设为 80%</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># 所有容器的 requests 总量不建议为 2c/4G 4c/8G 等常见值，因为节点通常也是这个配置，这会导致 Pod 只能调度到更大的节点上，适当调小 requests 等扩充可用的节点类型，从而扩充节点池。 </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">1000m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">1Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">limits</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># limits - requests 为允许超卖的资源量，建议为 requests 的 1 到 2 倍，酌情配置。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">cpu</span><span class="p">:</span><span class="w"> </span><span class="l">1000m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">memory</span><span class="p">:</span><span class="w"> </span><span class="l">1Gi</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 将容器层设为只读，防止容器文件被篡改</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c">## 如果需要写入临时文件，建议额外挂载 emptyDir 来提供可读写的数据卷</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">readOnlyRootFilesystem</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 禁止 Pod 做任何权限提升</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">allowPrivilegeEscalation</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">capabilities</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># drop ALL 的权限比较严格，可按需修改</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">drop</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">ALL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">startupProbe</span><span class="p">:</span><span class="w">  </span><span class="c"># 要求 kubernetes 1.18+</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/health </span><span class="w"> </span><span class="c"># 直接使用健康检查接口即可</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">20</span><span class="w">  </span><span class="c"># 最多提供给服务 5s * 20 的启动时间</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/health </span><span class="w"> </span><span class="c"># spring 的通用健康检查路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Readiness probes are very important for a RollingUpdate to work properly,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">readinessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/health </span><span class="w"> </span><span class="c"># 简单起见可直接使用 livenessProbe 相同的接口，当然也可额外定义</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">autoscaling/v2beta2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">HorizontalPodAutoscaler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scaleTargetRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">maxReplicas</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">minReplicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Resource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cpu</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">target</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Utilization</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">averageUtilization</span><span class="p">:</span><span class="w"> </span><span class="m">70</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">policy/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PodDisruptionBudget</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">minAvailable</span><span class="p">:</span><span class="w"> </span><span class="m">75</span><span class="l">%</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="l">v3</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="一优雅停止gracful-shutdown与-502504-报错" class="headerLink">
    <a href="#%e4%b8%80%e4%bc%98%e9%9b%85%e5%81%9c%e6%ad%a2gracful-shutdown%e4%b8%8e-502504-%e6%8a%a5%e9%94%99" class="header-mark"></a>一、优雅停止（Gracful Shutdown）与 502/504 报错</h2><p>如果 Pod 正在处理大量请求（比如 1000 QPS+）时，因为节点故障或「竞价节点」被回收等原因被重新调度，
你可能会观察到在容器被 terminate 的一段时间内出现少量 502/504。</p>
<p>为了搞清楚这个问题，需要先理解清楚 terminate 一个 Pod 的流程：</p>
<ol>
<li>Pod 的状态被设为 <code>Terminating</code>，（几乎）同时该 Pod 被从所有关联的 Service Endpoints 中移除</li>
<li><code>preStop</code> 钩子被执行
<ol>
<li>它的执行阶段很好理解：在容器被 stop 之前执行</li>
<li>它可以是一个命令，或者一个对 Pod 中容器的 http 调用</li>
<li>如果在收到 SIGTERM 信号时，无法优雅退出，要支持优雅退出比较麻烦的话，用 <code>preStop</code> 实现优雅退出是一个非常好的方式</li>
<li>preStop 的定义位置：<a href="https://github.com/kubernetes/api/blob/master/core/v1/types.go#L2515" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/api/blob/master/core/v1/types.go#L2515</a></li>
</ol>
</li>
<li><code>preStop</code> 执行完毕后，SIGTERM 信号被发送给 Pod 中的所有容器</li>
<li>继续等待，直到容器停止，或者超时 <code>spec.terminationGracePeriodSeconds</code>，这个值默认为 30s
<ol>
<li>需要注意的是，这个优雅退出的等待计时是与 <code>preStop</code> 同步开始的！而且它也不会等待 <code>preStop</code> 结束！</li>
</ol>
</li>
<li>如果超过了 <code>spec.terminationGracePeriodSeconds</code> 容器仍然没有停止，k8s 将会发送 SIGKILL 信号给容器</li>
<li>进程全部终止后，整个 Pod 完全被清理掉</li>
</ol>
<p><strong>注意</strong>：1 跟 2 两个工作是异步发生的，所以在未设置 <code>preStop</code> 时，可能会出现「Pod 还在 Service Endpoints 中，但是 <code>SIGTERM</code> 已经被发送给 Pod 导致容器都挂掉」的情况，我们需要考虑到这种状况的发生。</p>
<p>了解了上面的流程后，我们就能分析出两种错误码出现的原因：</p>
<ul>
<li>502：应用程序在收到 SIGTERM 信号后直接终止了运行，导致部分还没有被处理完的请求直接中断，代理层返回 502 表示这种情况</li>
<li>504：Service Endpoints 移除不够及时，在 Pod 已经被终止后，仍然有个别请求被路由到了该 Pod，得不到响应导致 504</li>
</ul>
<p>通常的解决方案是，在 Pod 的 <code>preStop</code> 步骤加一个 15s 的等待时间。
其原理是：在 Pod 处理 terminating 状态的时候，就会被从 Service Endpoints 中移除，也就不会再有新的请求过来了。
在 <code>preStop</code> 等待 15s，基本就能保证所有的请求都在容器死掉之前被处理完成（一般来说，绝大部分请求的处理时间都在 300ms 以内吧）。</p>
<p>一个简单的示例如下，它使 Pod 被 Terminate 时，总是在 stop 前先等待 15s，再发送 SIGTERM 信号给容器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">    </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 添加下面这部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">lifecycle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">preStop</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">/bin/sleep</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="s2">&#34;15&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>更好的解决办法，是直接等待所有 tcp 连接都关闭（需要镜像中有 netstat）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">    </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 添加下面这部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">lifecycle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">preStop</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">/bin/sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- -<span class="l">c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="s2">&#34;while [ $(netstat -plunt | grep tcp | wc -l | xargs) -ne 0 ]; do sleep 1; done&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="k8s-istio-pod-prestop" class="headerLink">
    <a href="#k8s-istio-pod-prestop" class="header-mark"></a>如果我的服务还使用了 Sidecar 代理网络请求，该怎么处理？</h3><p>以服务网格 Istio 为例，在 Envoy 代理了 Pod 流量的情况下，502/504 的问题会变得更复杂一点——还需要考虑 Sidecar 与主容器的关闭顺序：</p>
<ul>
<li>如果在 Envoy 已关闭后，有新的请求再进来，将会导致 504（没人响应这个请求了）
<ul>
<li>所以 Envoy 最好在 Terminating 至少 3s 后才能关，确保 Istio 网格配置已完全更新</li>
</ul>
</li>
<li>如果在 Envoy 还没停止时，主容器先关闭，然后又有新的请求再进来，Envoy 将因为无法连接到 upstream 导致 503
<ul>
<li>所以主容器也最好在 Terminating 至少 3s 后，才能关闭。</li>
</ul>
</li>
<li>如果主容器处理还未处理完遗留请求时，Envoy 或者主容器的其中一个停止了，会因为 tcp 连接直接断开连接导致 502
<ul>
<li>因此 Envoy 必须在主容器处理完遗留请求后（即没有 tcp 连接时），才能关闭</li>
</ul>
</li>
</ul>
<p>所以总结下：Envoy 及主容器的 <code>preStop</code> 都至少得设成 3s，并且在「没有 tcp 连接」时，才能关闭，避免出现 502/503/504.</p>
<p>主容器的修改方法在前文中已经写过了，下面介绍下 Envoy 的修改方法。</p>
<p>和主容器一样，Envoy 也能直接加 <code>preStop</code>，修改 <code>istio-sidecar-injector</code> 这个 <code>configmap</code>，在 sidecar 里添加 preStop sleep 命令:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="w">    </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">istio-proxy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 添加下面这部分</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">lifecycle</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">preStop</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">exec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">/bin/sh</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- -<span class="l">c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="s2">&#34;while [ $(netstat -plunt | grep tcp | grep -v envoy | wc -l | xargs) -ne 0 ]; do sleep 1; done&#34;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h3><ul>
<li><a href="https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-terminating-with-grace" target="_blank" rel="noopener noreffer">Kubernetes best practices: terminating with grace</a></li>
<li><a href="https://medium.com/flant-com/kubernetes-graceful-shutdown-nginx-php-fpm-d5ab266963c2" target="_blank" rel="noopener noreffer">Graceful shutdown in Kubernetes is not always trivial</a></li>
</ul>
<h2 id="k8s-hpa" class="headerLink">
    <a href="#k8s-hpa" class="header-mark"></a>二、服务的伸缩配置 - HPA</h2><p>Kubernetes 官方主要支持基于 Pod CPU 的伸缩，这是应用最为广泛的伸缩指标，需要部署 <a href="https://github.com/kubernetes-sigs/metrics-server" target="_blank" rel="noopener noreffer">metrics-server</a> 才可使用。</p>
<p>先回顾下前面给出的，基于 Pod CPU 使用率进行伸缩的示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">autoscaling/v2beta2 </span><span class="w"> </span><span class="c"># k8s 1.23+ 此 API 已经 GA</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">HorizontalPodAutoscaler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">prod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scaleTargetRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">maxReplicas</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">minReplicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Resource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cpu</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">target</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Utilization</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">averageUtilization</span><span class="p">:</span><span class="w"> </span><span class="m">70</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="1-当前指标值的计算方式" class="headerLink">
    <a href="#1-%e5%bd%93%e5%89%8d%e6%8c%87%e6%a0%87%e5%80%bc%e7%9a%84%e8%ae%a1%e7%ae%97%e6%96%b9%e5%bc%8f" class="header-mark"></a>1. 当前指标值的计算方式</h3><p>提前总结：每个 <strong>Pod 的指标是其中所有容器指标之和</strong>，如果计算百分比，就再除以 Pod 的 requests.</p>
<p>HPA 默认使用 Pod 的当前指标进行计算，以 CPU 使用率为例，其计算公式为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">「Pod 的 CPU 使用率」= 100% * 「所有 Container 的 CPU 用量之和」/「所有 Container 的 CPU requests 之和」
</span></span></code></pre></td></tr></table>
</div>
</div><p>注意分母是总的 requests 量，而不是 limits.</p>
<h4 id="11-存在的问题与解决方法" class="headerLink">
    <a href="#11-%e5%ad%98%e5%9c%a8%e7%9a%84%e9%97%ae%e9%a2%98%e4%b8%8e%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95" class="header-mark"></a>1.1 存在的问题与解决方法</h4><p>在 Pod 只有一个容器时这没啥问题，但是当 Pod 注入了 envoy 等 sidecar 时，这就会有问题了。</p>
<p>因为 Istio 的 Sidecar requests 默认为 <code>100m</code> 也就是 0.1 核。
在未 tuning 的情况下，服务负载一高，sidecar 的实际用量很容易就能涨到 0.2-0.4 核。
把这两个值代入前面的公式，会发现 <strong>对于 QPS 较高的服务，添加 Sidecar 后，「Pod 的 CPU 利用率」可能会高于「应用容器的 CPU 利用率」</strong>，造成不必要的扩容。
主容器的 requests 与 limits 差距越小，这样的扩容造成的资源浪费就越大。</p>
<p>而且还有个问题是，不同应用的 Pod，数据流特征、应用负载特征等都有区别（请求/响应的数据量、处理时长等），这会造成 sidecar 与主容器的 cpu 利用率不一，加大了优化 HPA 机制的困难度。</p>
<p>解决方法：</p>
<ul>
<li>方法一：HPA 改用绝对指标进行扩缩容，即 Pod 的总 CPU 用量。这使 HPA 不受任何容器 requests 设置的影响。
<ul>
<li>但是因为不同服务负载的区别，需要根据实际负载为每个服务调整 HPA 的期望指标。</li>
</ul>
</li>
<li>方法二：HPA 仍然使用 Pod 利用率进行扩缩容，但是针对每个服务的 CPU 使用情况，为每个服务的 sidecar 设置不同的 requests/limits，降低 sidecar 对扩缩容的影响。</li>
<li>方法三：使用 KEDA 等第三方组件，获取到应用容器的 CPU 利用率（排除掉 Sidecar），使用它进行扩缩容</li>
<li>方法四：使用 k8s 1.20 提供的 alpha 特性：<a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#container-resource-metrics" target="_blank" rel="noopener noreffer">Container Resourse Metrics</a>.
<ul>
<li>这种方式可以将 Pod 的不同容器的指标区分看待，算是最佳的处理方法了，但是该特性仍未进入 beta 阶段，慎用。</li>
</ul>
</li>
</ul>
<h3 id="2-hpa-的扩缩容算法" class="headerLink">
    <a href="#2-hpa-%e7%9a%84%e6%89%a9%e7%bc%a9%e5%ae%b9%e7%ae%97%e6%b3%95" class="header-mark"></a>2. HPA 的扩缩容算法</h3><p>HPA 什么时候会扩容，这一点是很好理解的。但是 HPA 的缩容策略，会有些迷惑，下面简单分析下。</p>
<ol>
<li>HPA 的「目标指标」可以使用两种形式：绝对度量指标和资源利用率。
<ul>
<li>绝对度量指标：比如 CPU，就是指 CPU 的使用量</li>
<li>资源利用率（资源使用量/资源请求 * 100%）：在 Pod 设置了资源请求时，可以使用资源利用率进行 Pod 伸缩</li>
</ul>
</li>
<li>HPA 的「当前指标」是一段时间内所有 Pods 的平均值，不是峰值。</li>
</ol>
<p>HPA 的扩缩容算法为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">期望副本数 = ceil[当前副本数 * ( 当前指标 / 目标指标 )]
</span></span></code></pre></td></tr></table>
</div>
</div><p>从上面的参数可以看到：</p>
<ol>
<li>只要「当前指标」超过了目标指标，就一定会发生扩容。</li>
<li><code>当前指标 / 目标指标</code>要小到一定的程度，才会触发缩容。
<ol>
<li>比如双副本的情况下，上述比值要小于等于 1/2，才会缩容到单副本。</li>
<li>三副本的情况下，上述比值的临界点是 2/3。</li>
<li>五副本时临界值是 4/5，100副本时临界值是 99/100，依此类推。</li>
<li>如果 <code>当前指标 / 目标指标</code> 从 1 降到 0.5，副本的数量将会减半。（虽然说副本数越多，发生这么大变化的可能性就越小。）</li>
</ol>
</li>
<li><code>当前副本数 / 目标指标</code>的值越大，「当前指标」的波动对「期望副本数」的影响就越大。</li>
</ol>
<p>为了防止扩缩容过于敏感，HPA 有几个相关参数：</p>
<ol>
<li>Hardcoded 参数
<ol>
<li>HPA Loop 延时：默认 15 秒，每 15 秒钟进行一次 HPA 扫描。</li>
<li>缩容冷却时间：默认 5 分钟。</li>
</ol>
</li>
<li>对于 K8s 1.18+，HPA 通过 <code>spec.behavior</code> 提供了多种控制扩缩容行为的参数，后面会具体介绍。</li>
</ol>
<h3 id="3-hpa-的期望值设成多少合适" class="headerLink">
    <a href="#3-hpa-%e7%9a%84%e6%9c%9f%e6%9c%9b%e5%80%bc%e8%ae%be%e6%88%90%e5%a4%9a%e5%b0%91%e5%90%88%e9%80%82" class="header-mark"></a>3. HPA 的期望值设成多少合适</h3><p>这个需要针对每个服务的具体情况，具体分析。</p>
<p>以最常用的按 CPU 值伸缩为例，</p>
<ul>
<li>核心服务
<ul>
<li>requests/limits 值: 建议设成相等的，保证<a href="https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/" target="_blank" rel="noopener noreffer">服务质量等级</a>为 Guaranteed
<ul>
<li>需要注意 CPU 跟 Memory 的 limits 限制策略是不同的，CPU 是真正地限制了上限，而 Memory 是用超了就干掉容器（OOMKilled）</li>
<li>k8s 一直使用 cgroups v1 (<code>cpu_shares</code>/<code>memory.limit_in_bytes</code>)来限制 cpu/memory，但是对于 <code>Guaranteed</code> 的 Pods 而言，内存并不能完全预留，资源竞争总是有可能发生的。1.22 有 alpha 特性改用 cgroups v2，可以关注下。</li>
</ul>
</li>
<li>HPA: 一般来说，期望值设为 60% 到 70% 可能是比较合适的，最小副本数建议设为 2 - 5. （仅供参考）</li>
<li>PodDisruptionBudget: 建议按服务的健壮性与 HPA 期望值，来设置 PDB，后面会详细介绍，这里就先略过了</li>
</ul>
</li>
<li>非核心服务
<ul>
<li>requests/limits 值: 建议 requests 设为 limits 的 0.6 - 0.9 倍（仅供参考），对应的服务质量等级为 Burstable
<ul>
<li>也就是超卖了资源，这样做主要的考量点是，很多非核心服务负载都很低，根本跑不到 limits 这么高，降低 requests 可以提高集群资源利用率，也不会损害服务稳定性。</li>
</ul>
</li>
<li>HPA: 因为 requests 降低了，而 HPA 是以 requests 为 100% 计算使用率的，我们可以提高 HPA 的期望值（如果使用百分比为期望值的话），比如 80% ~ 90%，最小副本数建议设为 1 - 3. （仅供参考）</li>
<li>PodDisruptionBudget: 非核心服务嘛，保证最少副本数为 1 就行了。</li>
</ul>
</li>
</ul>
<h3 id="4-hpa-的常见问题" class="headerLink">
    <a href="#4-hpa-%e7%9a%84%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" class="header-mark"></a>4. HPA 的常见问题</h3><h4 id="41-pod-扩容---预热陷阱" class="headerLink">
    <a href="#41-pod-%e6%89%a9%e5%ae%b9---%e9%a2%84%e7%83%ad%e9%99%b7%e9%98%b1" class="header-mark"></a>4.1. Pod 扩容 - 预热陷阱</h4><blockquote>
<p>预热：Java/C# 这类运行在虚拟机上的语言，第一次使用到某些功能时，往往需要初始化一些资源，例如「JIT 即时编译」。
如果代码里还应用了动态类加载之类的功能，就很可能导致微服务某些 API 第一次被调用时，响应特别慢（要动态编译 class）。
因此 Pod 在提供服务前，需要提前「预热（slow_start）」一次这些接口，将需要用到的资源提前初始化好。</p>
</blockquote>
<p>在负载很高的情况下，HPA 会自动扩容。
但是如果扩容的 Pod 需要预热，就可能会遇到「预热陷阱」。</p>
<p>在有大量用户访问的时候，不论使用何种负载均衡策略，只要请求被转发到新建的 Pod 上，这个请求就会「卡住」。
如果请求速度太快，Pod 启动的瞬间「卡住」的请求就越多，这将会导致新建 Pod 因为压力过大而垮掉。
然后 Pod 一重启就被压垮，进入 CrashLoopBackoff 循环。</p>
<p>如果是在使用多线程做负载测试时，效果更明显：50 个线程在不间断地请求，
别的 Pod 响应时间是「毫秒级」，而新建的 Pod 的首次响应是「秒级」。几乎是一瞬间，50 个线程就会全部陷在新建的 Pod 这里。
而新建的 Pod 在启动的瞬间可能特别脆弱，瞬间的 50 个并发请求就可以将它压垮。
然后 Pod 一重启就被压垮，进入 CrashLoopBackoff 循环。</p>
<p><strong>解决方法</strong>：</p>
<p>可以在「应用层面」解决：</p>
<ol>
<li>在启动探针 API 的后端控制器里面，依次调用所有需要预热的接口或者其他方式，提前初始化好所有资源。
<ol>
<li>启动探针的控制器中，可以通过 <code>localhost</code> 回环地址调用它自身的接口。</li>
</ol>
</li>
<li>使用「AOT 预编译」技术：预热，通常都是因为「JIT 即时编译」导致的问题，在需要用到时它才编译。而 AOT 是预先编译，在使用前完成编译，因此 AOT 能解决预热的问题。</li>
</ol>
<p>也可以在「基础设施层面」解决：</p>
<ol>
<li>像 AWS ALB TargetGroup 以及其他云服务商的 ALB 服务，通常都可以设置 <code>slow_start</code> 时长，即对新加入的实例，使用一定时间慢慢地把流量切过去，最终达到预期的负载均衡状态。这个可以解决服务预热问题。</li>
<li>Envoy 也已经支持 <code>slow_start</code> 模式，支持在一个设置好的时间窗口内，把流量慢慢负载到新加入的实例上，达成预热效果。</li>
</ol>
<h4 id="42-hpa-扩缩容过于敏感导致-pod-数量震荡" class="headerLink">
    <a href="#42-hpa-%e6%89%a9%e7%bc%a9%e5%ae%b9%e8%bf%87%e4%ba%8e%e6%95%8f%e6%84%9f%e5%af%bc%e8%87%b4-pod-%e6%95%b0%e9%87%8f%e9%9c%87%e8%8d%a1" class="header-mark"></a>4.2. HPA 扩缩容过于敏感，导致 Pod 数量震荡</h4><p>通常来讲，K8s 上绝大部分负载都应该选择使用 CPU 进行扩缩容。因为 CPU 通常能很好的反映服务的负载情况</p>
<p>但是有些服务会存在其他影响 CPU 使用率的因素，导致使用 CPU 扩缩容变得不那么可靠，比如：</p>
<ul>
<li>有些 Java 服务堆内存设得很大，GC pause 也设得比较长，因此内存 GC 会造成 CPU 间歇性飙升，CPU 监控会有大量的尖峰。</li>
<li>有些服务有定时任务，定时任务一运行 CPU 就涨，但是这跟服务的 QPS 是无关的</li>
<li>有些服务可能一运行 CPU 就会立即处于一个高位状态，它可能希望使用别的业务侧指标来进行扩容，而不是 CPU.</li>
</ul>
<p>因为上述问题存在，使用 CPU 扩缩容，就可能会造成服务频繁的扩容然后缩容，或者无限扩容。
而有些服务（如我们的「推荐服务」），对「扩容」和「缩容」都是比较敏感的，每次扩缩都会造成服务可用率抖动。</p>
<p>对这类服务而言，HPA 有这几种调整策略：</p>
<ul>
<li>选择使用 <strong>QPS</strong> 等相对比较平滑，没有 GC 这类干扰的指标来进行扩缩容，这需要借助 KEDA 等社区组件。</li>
<li>对 kubernetes 1.18+，可以直接使用 HPA 的 <code>behavior.scaleDown</code> 和 <code>behavior.scaleUp</code> 两个参数，控制每次扩缩容的最多 pod 数量或者比例。 示例如下：</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">autoscaling/v2beta2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">HorizontalPodAutoscaler</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">podinfo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">scaleTargetRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">podinfo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">minReplicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">maxReplicas</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Resource</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">resource</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">cpu</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">target</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Utilization</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">averageUtilization</span><span class="p">:</span><span class="w"> </span><span class="m">50</span><span class="w">  </span><span class="c"># 期望的 CPU 平均值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">behavior</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">scaleUp</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">stabilizationWindowSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">  </span><span class="c"># 默认为 0，只使用当前值进行扩缩容</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">policies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">180</span><span class="w">  </span><span class="c"># 每 3 分钟最多扩容 5% 的 Pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Percent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">60</span><span class="w">  </span><span class="c"># 每分钟最多扩容 1 个 Pod，扩的慢一点主要是为了一个个地预热，避免一次扩容太多未预热的 Pods 导致服务可用率剧烈抖动</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">selectPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Min </span><span class="w"> </span><span class="c"># 选择最小的策略</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 以下的一切配置，都是为了更平滑地缩容</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">scaleDown</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">stabilizationWindowSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">600</span><span class="w">  </span><span class="c"># 使用过去 10 mins 的最大 cpu 值进行缩容计算，避免过快缩容</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">policies</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Percent </span><span class="w"> </span><span class="c"># 每 3 mins 最多缩容 `ceil[当前副本数 * 5%]` 个 pod（20 个 pod 以内，一次只缩容 1 个 pod）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">180</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">Pods </span><span class="w"> </span><span class="c"># 每 1 mins 最多缩容 1 个 pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">value</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">60</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">selectPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">Min </span><span class="w"> </span><span class="c"># 上面的 policies 列表，只生效其中最小的值作为缩容限制（保证平滑缩容）</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>而对于扩容不够平滑这个问题，可以考虑提供类似 AWS ALB TargetGroup <code>slow_start</code> 的功能，在扩容时缓慢将流量切到新 Pod 上，以实现预热服务（JVM 预热以及本地缓存预热），这样就能达到比较好的平滑扩容效果。</p>
<h3 id="5-hpa-注意事项" class="headerLink">
    <a href="#5-hpa-%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="header-mark"></a>5. HPA 注意事项</h3><p>注意 kubectl 1.23 以下的版本，默认使用 <code>hpa.v1.autoscaling</code> 来查询 HPA 配置，<code>v2beta2</code> 相关的参数会被编码到 <code>metadata.annotations</code> 中。</p>
<p>比如 <code>behavior</code> 就会被编码到 <code>autoscaling.alpha.kubernetes.io/behavior</code> 这个 key 所对应的值中。</p>
<p>因此如果使用了 v2beta2 的 HPA，一定要明确指定使用 <code>v2beta2</code> 版本的 HPA：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl get hpa.v2beta2.autoscaling
</span></span></code></pre></td></tr></table>
</div>
</div><p>否则不小心动到 <code>annotations</code> 中编码的某些参数，可能会产生意料之外的效果，甚至直接把控制面搞崩&hellip;
比如这个 issue: <a href="https://github.com/kubernetes/kubernetes/issues/107038" target="_blank" rel="noopener noreffer">Nil pointer dereference in KCM after v1 HPA patch request</a></p>
<h3 id="6-参考" class="headerLink">
    <a href="#6-%e5%8f%82%e8%80%83" class="header-mark"></a>6. 参考</h3><ul>
<li><a href="https://kubernetes.io/zh/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noopener noreffer">Pod 水平自动伸缩 - Kubernetes Docs</a></li>
<li><a href="https://kubernetes.io/zh/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/" target="_blank" rel="noopener noreffer">Horizontal Pod Autoscaler演练 - Kubernetes Docs</a></li>
</ul>
<h2 id="k8s-PodDistruptionBuget" class="headerLink">
    <a href="#k8s-PodDistruptionBuget" class="header-mark"></a>三、<a href="https://kubernetes.io/zh/docs/tasks/run-application/configure-pdb/" target="_blank" rel="noopener noreffer">节点维护与Pod干扰预算</a></h2><p>在我们通过 <code>kubectl drain</code> 将某个节点上的容器驱逐走的时候，
kubernetes 会依据 Pod 的「PodDistruptionBuget」来进行 Pod 的驱逐。</p>
<p>如果不设置任何明确的 PodDistruptionBuget，Pod 将会被直接杀死，然后在别的节点重新调度，<strong>这可能导致服务中断！</strong></p>
<p>PDB 是一个单独的 CR 自定义资源，示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">policy/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">PodDisruptionBudget</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">podinfo-pdb</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 如果不满足 PDB，Pod 驱逐将会失败！</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">minAvailable</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">      </span><span class="c"># 最少也要维持一个 Pod 可用</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c">#   maxUnavailable: 1  # 最大不可用的 Pod 数，与 minAvailable 不能同时配置！二选一</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">podinfo</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果在进行节点维护时(kubectl drain)，Pod 不满足 PDB，drain 将会失败，示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt; kubectl drain node-205 --ignore-daemonsets --delete-local-data
</span></span><span class="line"><span class="cl">node/node-205 cordoned
</span></span><span class="line"><span class="cl">WARNING: ignoring DaemonSet-managed Pods: kube-system/calico-node-nfhj7, kube-system/kube-proxy-94dz5
</span></span><span class="line"><span class="cl">evicting pod default/podinfo-7c84d8c94d-h9brq
</span></span><span class="line"><span class="cl">evicting pod default/podinfo-7c84d8c94d-gw6qf
</span></span><span class="line"><span class="cl">error when evicting pod <span class="s2">&#34;podinfo-7c84d8c94d-h9brq&#34;</span> <span class="o">(</span>will retry after 5s<span class="o">)</span>: Cannot evict pod as it would violate the pod<span class="s1">&#39;s disruption budget.
</span></span></span><span class="line"><span class="cl"><span class="s1">evicting pod default/podinfo-7c84d8c94d-h9brq
</span></span></span><span class="line"><span class="cl"><span class="s1">error when evicting pod &#34;podinfo-7c84d8c94d-h9brq&#34; (will retry after 5s): Cannot evict pod as it would violate the pod&#39;</span>s disruption budget.
</span></span><span class="line"><span class="cl">evicting pod default/podinfo-7c84d8c94d-h9brq
</span></span><span class="line"><span class="cl">error when evicting pod <span class="s2">&#34;podinfo-7c84d8c94d-h9brq&#34;</span> <span class="o">(</span>will retry after 5s<span class="o">)</span>: Cannot evict pod as it would violate the pod<span class="err">&#39;</span>s disruption budget.
</span></span><span class="line"><span class="cl">evicting pod default/podinfo-7c84d8c94d-h9brq
</span></span><span class="line"><span class="cl">pod/podinfo-7c84d8c94d-gw6qf evicted
</span></span><span class="line"><span class="cl">pod/podinfo-7c84d8c94d-h9brq evicted
</span></span><span class="line"><span class="cl">node/node-205 evicted
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的示例中，podinfo 一共有两个副本，都运行在 node-205 上面。我给它设置了干扰预算 PDB <code>minAvailable: 1</code>。</p>
<p>然后使用 <code>kubectl drain</code> 驱逐 Pod 时，其中一个 Pod 被立即驱逐走了，而另一个 Pod 大概在 15 秒内一直驱逐失败。
因为第一个 Pod 还没有在新的节点上启动完成，它不满足干扰预算 PDB <code>minAvailable: 1</code> 这个条件。</p>
<p>大约 15 秒后，最先被驱逐走的 Pod 在新节点上启动完成了，另一个 Pod 满足了 PDB 所以终于也被驱逐了。这才完成了一个节点的 drain 操作。</p>
<blockquote>
<p>ClusterAutoscaler 等集群节点伸缩组件，在缩容节点时也会考虑 PodDisruptionBudget. 如果你的集群使用了 ClusterAutoscaler 等动态扩缩容节点的组件，强烈建议设置为所有服务设置 PodDisruptionBudget.</p>
</blockquote>
<h4 id="在-pdb-中使用百分比的注意事项" class="headerLink">
    <a href="#%e5%9c%a8-pdb-%e4%b8%ad%e4%bd%bf%e7%94%a8%e7%99%be%e5%88%86%e6%af%94%e7%9a%84%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="header-mark"></a>在 PDB 中使用百分比的注意事项</h4><p>在使用百分比时，计算出的实例数都会被向上取整，这会造成两个现象：</p>
<ul>
<li>如果使用 <code>minAvailable</code>，实例数较少的情况下，可能会导致 ALLOWED DISRUPTIONS 为 0，所有实例都无法被驱逐了。</li>
<li>如果使用 <code>maxUnavailable</code>，因为是向上取整，ALLOWED DISRUPTIONS 的值一定不会低于 1，至少有 1 个实例可以被驱逐。</li>
</ul>
<p>因此从「便于驱逐」的角度看，如果你的服务至少有 2-3 个实例，建议在 PDB 中使用百分比配置 <code>maxUnavailable</code>，而不是 <code>minAvailable</code>.
相对的从「确保服务稳定性」的角度看，我们则应该使用 <code>minAvailable</code>，确保至少有 1 个实例可用。</p>
<h3 id="最佳实践-deployment--hpa--poddisruptionbudget" class="headerLink">
    <a href="#%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5-deployment--hpa--poddisruptionbudget" class="header-mark"></a>最佳实践 Deployment + HPA + PodDisruptionBudget</h3><p>一般而言，一个服务的每个版本，都应该包含如下三个资源：</p>
<ul>
<li>Deployment: 管理服务自身的 Pods 嘛</li>
<li>HPA: 负责 Pods 的扩缩容，通常使用 CPU 指标进行扩缩容</li>
<li>PodDisruptionBudget(PDB): 建议按照 HPA 的目标值，来设置 PDB.
<ul>
<li>比如 HPA CPU 目标值为 60%，就可以考虑设置 PDB <code>minAvailable=65%</code>，保证至少有 65% 的 Pod 可用。这样理论上极限情况下 QPS 均摊到剩下 65% 的 Pods 上也不会造成雪崩（这里假设 QPS 和 CPU 是完全的线性关系）</li>
</ul>
</li>
</ul>
<h2 id="k8s-affinity" class="headerLink">
    <a href="#k8s-affinity" class="header-mark"></a>四、节点亲和性与节点组</h2><p>我们一个集群，通常会使用不同的标签为节点组进行分类，比如 kubernetes 自动生成的一些节点标签：</p>
<ul>
<li><code>kubernetes.io/os</code>: 通常都用 <code>linux</code></li>
<li><code>kubernetes.io/arch</code>: <code>amd64</code>, <code>arm64</code></li>
<li><code>topology.kubernetes.io/region</code> 和 <code>topology.kubernetes.io/zone</code>: 云服务的区域及可用区</li>
</ul>
<p>我们使用得比较多的，是「节点亲和性」以及「Pod 反亲和性」，另外两个策略视情况使用。</p>
<h3 id="1-节点亲和性" class="headerLink">
    <a href="#1-%e8%8a%82%e7%82%b9%e4%ba%b2%e5%92%8c%e6%80%a7" class="header-mark"></a>1. 节点亲和性</h3><p>如果你使用的是 aws，那 aws 有一些自定义的节点标签：</p>
<ul>
<li><code>eks.amazonaws.com/nodegroup</code>: aws eks 节点组的名称，同一个节点组使用同样的 aws ec2 实例模板
<ul>
<li>比如 arm64 节点组、amd64/x64 节点组</li>
<li>内存比例高的节点组如 m 系实例，计算性能高的节点组如 c 系列</li>
<li>竞价实例节点组：这个省钱啊，但是动态性很高，随时可能被回收</li>
<li>按量付费节点组：这类实例贵，但是稳定。</li>
</ul>
</li>
</ul>
<p>假设你希望优先选择竞价实例跑你的 Pod，如果竞价实例暂时跑满了，就选择按量付费实例。
那 <code>nodeSelector</code> 就满足不了你的需求了，你需要使用 <code>nodeAffinity</code>，示例如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">affinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">nodeAffinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 优先选择 spot-group-c 的节点</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">preferredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">preference</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">eks.amazonaws.com/nodegroup</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="l">spot-group-c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">80</span><span class="w">  </span><span class="c"># weight 用于为节点评分，会优先选择评分最高的节点</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">preference</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># 优先选择 aws c6i 的机器</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">node.kubernetes.io/instance-type</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="s2">&#34;c6i.xlarge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="s2">&#34;c6i.2xlarge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="s2">&#34;c6i.4xlarge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="s2">&#34;c6i.8xlarge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">70</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">preference</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># 其次选择 aws c5 的机器</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">node.kubernetes.io/instance-type</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="s2">&#34;c5.xlarge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="s2">&#34;c5.2xlarge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="s2">&#34;c5.4xlarge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="s2">&#34;c5.9xlarge&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">60</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">         </span><span class="c"># 如果没 spot-group-c 可用，也可选择 ondemand-group-c 的节点跑</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">requiredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">nodeSelectorTerms</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">eks.amazonaws.com/nodegroup</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="l">spot-group-c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="l">ondemand-group-c</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># ...</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-pod-反亲和性" class="headerLink">
    <a href="#2-pod-%e5%8f%8d%e4%ba%b2%e5%92%8c%e6%80%a7" class="header-mark"></a>2. Pod 反亲和性</h3><blockquote>
<p>Pod 亲和性与反亲和性可能不是最佳的实现手段，这部分内容待更新</p>
</blockquote>
<blockquote>
<p>相关 Issue: <a href="https://github.com/kubernetes/kubernetes/issues/72479" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/issues/72479</a></p>
</blockquote>
<blockquote>
<p>相关替代方案：<a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/" target="_blank" rel="noopener noreffer">https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/</a></p>
</blockquote>
<p>通常建议为每个 Deployment 的 template 配置 Pod 反亲和性，把 Pods 打散在所有节点上：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">affinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">podAntiAffinity</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">preferredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w"> </span><span class="c"># 非强制性条件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">weight</span><span class="p">:</span><span class="w"> </span><span class="m">100</span><span class="w">  </span><span class="c"># weight 用于为节点评分，会优先选择评分最高的节点</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">podAffinityTerm</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span>- <span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">version</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                  </span>- <span class="l">v12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="c"># 将 pod 尽量打散在多个可用区</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">topology.kubernetes.io/zone</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">requiredDuringSchedulingIgnoredDuringExecution</span><span class="p">:</span><span class="w">  </span><span class="c"># 强制性要求</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="c"># 注意这个没有 weights，必须满足列表中的所有条件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span>- <span class="nt">labelSelector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span><span class="nt">matchExpressions</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">              </span>- <span class="nt">key</span><span class="p">:</span><span class="w"> </span><span class="l">version</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">operator</span><span class="p">:</span><span class="w"> </span><span class="l">In</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span><span class="nt">values</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">                </span>- <span class="l">v12</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="c"># Pod 必须运行在不同的节点上</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">topologyKey</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes.io/hostname</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="k8s-container-probe" class="headerLink">
    <a href="#k8s-container-probe" class="header-mark"></a>五、Pod 的就绪探针、存活探针与启动探针</h2><p>Pod 提供如下三种探针，均支持使用 Command、HTTP API、TCP Socket 这三种手段来进行服务可用性探测。</p>
<ul>
<li><code>startupProbe</code> 启动探针（Kubernetes v1.18 [beta]）: 此探针通过后，「就绪探针」与「存活探针」才会进行存活性与就绪检查
<ul>
<li>用于对慢启动容器进行存活性检测，避免它们在启动运行之前就被杀掉
<ul>
<li>startupProbe 显然比 livenessProbe 的 initialDelaySeconds 参数更灵活。</li>
<li>同时它也能延迟 readinessProbe 的生效时间，这主要是为了避免无意义的探测。容器都还没 startUp，显然是不可能就绪的。</li>
</ul>
</li>
<li>程序将最多有 <code>failureThreshold * periodSeconds</code> 的时间用于启动，比如设置 <code>failureThreshold=20</code>、<code>periodSeconds=5</code>，程序启动时间最长就为 100s，如果超过 100s 仍然未通过「启动探测」，容器会被杀死。</li>
</ul>
</li>
<li><code>readinessProbe</code> 就绪探针:
<ul>
<li>就绪探针失败次数超过 <code>failureThreshold</code> 限制（默认三次），服务将被暂时从 Service 的 Endpoints 中踢出，直到服务再次满足 <code>successThreshold</code>.</li>
</ul>
</li>
<li><code>livenessProbe</code> 存活探针: 检测服务是否存活，它可以捕捉到死锁等情况，及时杀死这种容器。
<ul>
<li>存活探针失败可能的原因：
<ul>
<li>服务发生死锁，对所有请求均无响应</li>
<li>服务线程全部卡在对外部 redis/mysql 等外部依赖的等待中，导致请求无响应</li>
</ul>
</li>
<li>存活探针失败次数超过 <code>failureThreshold</code> 限制（默认三次），容器将被杀死，随后根据重启策略执行重启。
<ul>
<li><code>kubectl describe pod</code> 会显示重启原因为 <code>State.Last State.Reason = Error, Exit Code=137</code>，同时 Events 中会有 <code>Liveness probe failed: ...</code> 这样的描述。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>上述三类探测器的参数都是通用的，五个时间相关的参数列举如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="c"># 下面的值就是 k8s 的默认值</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w">  </span><span class="c"># 默认没有 delay 时间</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#  ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.com/app/my-app:v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># ... 省略若干配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">startupProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/health </span><span class="w"> </span><span class="c"># 直接使用健康检查接口即可</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">20</span><span class="w">  </span><span class="c"># 最多提供给服务 5s * 20 的启动时间</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/health </span><span class="w"> </span><span class="c"># spring 的通用健康检查路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># Readiness probes are very important for a RollingUpdate to work properly,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">readinessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/health </span><span class="w"> </span><span class="c"># 简单起见可直接使用 livenessProbe 相同的接口，当然也可额外定义</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>在 Kubernetes 1.18 之前，通用的手段是为「就绪探针」添加较长的 <code>initialDelaySeconds</code> 来实现类似「启动探针」的功能动，避免容器因为启动太慢，存活探针失败导致容器被重启。示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c">#  ...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">xxx.com/app/my-app:v3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># ... 省略若干配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">livenessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/health </span><span class="w"> </span><span class="c"># spring 的通用健康检查路径</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">120</span><span class="w">  </span><span class="c"># 前两分钟，都假设服务健康，避免 livenessProbe 失败导致服务重启</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 容器一启动，Readiness probes 就会不断进行检测</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">readinessProbe</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">httpGet</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">path</span><span class="p">:</span><span class="w"> </span><span class="l">/actuator/health</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8080</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">initialDelaySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">  </span><span class="c"># readiness probe 不需要设太长时间，使 Pod 尽快加入到 Endpoints.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">periodSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">timeoutSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">failureThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">5</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">          </span><span class="nt">successThreshold</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="k8s-pod-security" class="headerLink">
    <a href="#k8s-pod-security" class="header-mark"></a>六、Pod 安全</h2><p>这里只介绍 Pod 中安全相关的参数，其他诸如集群全局的安全策略，不在这里讨论。</p>
<h3 id="1-pod-securitycontexthttpskubernetesiodocstasksconfigure-pod-containersecurity-context" class="headerLink">
    <a href="#1-pod-securitycontexthttpskubernetesiodocstasksconfigure-pod-containersecurity-context" class="header-mark"></a>1. <a href="https://kubernetes.io/docs/tasks/configure-pod-container/security-context/" target="_blank" rel="noopener noreffer">Pod SecurityContext</a></h3><p>通过设置 Pod 的 SecurityContext，可以为每个 Pod 设置特定的安全策略。</p>
<p>SecurityContext 有两种类型：</p>
<ol>
<li><code>spec.securityContext</code>: 这是一个 <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#podsecuritycontext-v1-core" target="_blank" rel="noopener noreffer">PodSecurityContext</a> 对象
<ul>
<li>顾名思义，它对 Pod 中的所有 contaienrs 都有效。</li>
</ul>
</li>
<li><code>spec.containers[*].securityContext</code>: 这是一个 <a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#securitycontext-v1-core" target="_blank" rel="noopener noreffer">SecurityContext</a> 对象
<ul>
<li>container 私有的 SecurityContext</li>
</ul>
</li>
</ol>
<p>这两个 SecurityContext 的参数只有部分重叠，重叠的部分 <code>spec.containers[*].securityContext</code> 优先级更高。</p>
<p>我们比较常遇到的一些<strong>提升权限</strong>的安全策略：</p>
<ol>
<li>特权容器：<code>spec.containers[*].securityContext.privileged</code></li>
<li>添加（Capabilities）可选的系统级能力: <code>spec.containers[*].securityContext.capabilities.add</code>
<ol>
<li>只有 ntp 同步服务等少数容器，可以开启这项功能。请注意这非常危险。</li>
</ol>
</li>
<li>Sysctls: 系统参数: <code>spec.securityContext.sysctls</code></li>
</ol>
<p><strong>权限限制</strong>相关的安全策略有（<strong>强烈建议在所有 Pod 上按需配置如下安全策略！</strong>）：</p>
<ol>
<li><code>spec.volumes</code>: 所有的数据卷都可以设定读写权限</li>
<li><code>spec.securityContext.runAsNonRoot: true</code> Pod 必须以非 root 用户运行</li>
<li><code>spec.containers[*].securityContext.readOnlyRootFileSystem:true</code> <strong>将容器层设为只读，防止容器文件被篡改。</strong>
<ol>
<li>如果微服务需要读写文件，建议额外挂载 <code>emptydir</code> 类型的数据卷。</li>
</ol>
</li>
<li><code>spec.containers[*].securityContext.allowPrivilegeEscalation: false</code> 不允许 Pod 做任何权限提升！</li>
<li><code>spec.containers[*].securityContext.capabilities.drop</code>: 移除（Capabilities）可选的系统级能力</li>
</ol>
<p>还有其他诸如指定容器的运行用户(user)/用户组(group)等功能未列出，请自行查阅 Kubernetes 相关文档。</p>
<p>一个无状态的微服务 Pod 配置举例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;Pod name&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">- name</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;container name&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;image&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># ......此处省略 500 字</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">readOnlyRootFilesystem</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># 将容器层设为只读，防止容器文件被篡改。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">allowPrivilegeEscalation</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">  </span><span class="c"># 禁止 Pod 做任何权限提升</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">capabilities</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">drop</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 禁止容器使用 raw 套接字，通常只有 hacker 才会用到 raw 套接字。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># raw_socket 可自定义网络层数据，避开 tcp/udp 协议栈，直接操作底层的 ip/icmp 数据包。可实现 ip 伪装、自定义协议等功能。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 去掉 net_raw 会导致 tcpdump 无法使用，无法进行容器内抓包。需要抓包时可临时去除这项配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">NET_RAW</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 更好的选择：直接禁用所有 capabilities</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># - ALL</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># runAsUser: 1000  # 设定用户</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># runAsGroup: 1000  # 设定用户组</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runAsNonRoot</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># Pod 必须以非 root 用户运行</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">seccompProfile</span><span class="p">:</span><span class="w">  </span><span class="c"># security compute mode</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RuntimeDefault</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-seccomp-security-compute-mode" class="headerLink">
    <a href="#2-seccomp-security-compute-mode" class="header-mark"></a>2. seccomp: security compute mode</h3><p>seccomp 和 seccomp-bpf 允许对系统调用进行过滤，可以防止用户的二进制文对主机操作系统件执行通常情况下并不需要的危险操作。它和 Falco 有些类似，不过 Seccomp 没有为容器提供特别的支持。</p>
<p>视频:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=Ro4QRx7VPsY&amp;list=PLj6h78yzYM2Pn8RxfLh2qrXBDftr6Qjut$index=22" target="_blank" rel="noopener noreffer">Seccomp: What Can It Do For You? - Justin Cormack, Docker</a></li>
</ul>
<h2 id="六隔离性" class="headerLink">
    <a href="#%e5%85%ad%e9%9a%94%e7%a6%bb%e6%80%a7" class="header-mark"></a>六、隔离性</h2><ul>
<li>推荐按业务线或者业务团队进行名字空间划分，方便对每个业务线/业务团队分别进行资源限制</li>
<li>推荐使用 network policy 对服务实施强力的网络管控，避免长期发展过程中，业务服务之间出现混乱的跨业务线相互调用关系，也避免服务被黑后，往未知地址发送数据。</li>
</ul>
<h2 id="其他问题" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96%e9%97%ae%e9%a2%98" class="header-mark"></a>其他问题</h2><ul>
<li>不同节点类型的性能有差距，导致 QPS 均衡的情况下，CPU 负载不均衡
<ul>
<li>解决办法（未验证）：
<ul>
<li>尽量使用性能相同的实例类型：通过 <code>podAffinity</code> 及 <code>nodeAffinity</code> 添加节点类型的亲和性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="参考-1" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83-1" class="header-mark"></a>参考</h2><ul>
<li><a href="https://imroc.cc/istio/" target="_blank" rel="noopener noreffer">istio 实践指南 - imroc.cc</a></li>
<li><a href="https://imroc.cc/kubernetes/" target="_blank" rel="noopener noreffer">Kubernetes 实践指南 - imroc.cc</a></li>
</ul>
]]></content></entry><entry><title type="html">2021 年年终总结</title><link href="https://thiscute.world/posts/2021-summary/"/><id>https://thiscute.world/posts/2021-summary/</id><author><name>ryan4yin</name></author><published>2022-01-03T14:50:00+08:00</published><updated>2022-01-03T14:50:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>更新：2022/1/22</p>
</blockquote>
<h2 id="闲言碎语" class="headerLink">
    <a href="#%e9%97%b2%e8%a8%80%e7%a2%8e%e8%af%ad" class="header-mark"></a>闲言碎语</h2><p>一晃一年又是过去了，这个新年，全球疫情再创新高，圣诞节后美国单日新增更是直接突破 <del>50 万直逼 60 万大关❌</del> <strong>100 万✅</strong>，国内也有西安管理不力导致民众忍饥挨饿。</p>
<p>新冠已经两年多了啊。</p>
<p>言归正传，我今年年初从 W 公司离职后，非常幸运地进了现在的公司——大宇无限，在融入大宇的过程中也是五味杂陈。
不过总体结果还是挺满意的，目前工作已经步入正轨，也发现了非常多的机会，大宇的基础设施领域仍然大有可为。</p>
<p>一些重要事情还是没怎么想通，不过毕竟风口上的猪都能飞，今年小小努力了一把，大部分时间仍然随波逐流，却也渐入佳境。</p>
<h2 id="生活" class="headerLink">
    <a href="#%e7%94%9f%e6%b4%bb" class="header-mark"></a>生活</h2><ul>
<li>1 月的时候从博客园迁移到这个独立博客，还认识了 <a href="https://chee5e.space/" target="_blank" rel="noopener noreffer">@芝士</a>，芝士帮我调整好了博客「友链」页面的样式，超级感谢~</li>
<li>2 月的时候从 W 公司离职，然后怎么说呢，瞬间感觉海阔天空，心态 180 度转变，好得不得了，但是其实也很担心自己各方面的不足。总之心里有好多的想法，跟 <a href="https://sanshiliuxiao.top/" target="_blank" rel="noopener noreffer">@是格子啊</a>、<a href="https://chee5e.space/" target="_blank" rel="noopener noreffer">@芝士</a> 以及前同事聊了好多，非常感谢这几位朋友跟同事帮我梳理思路，给我肯定。也是这个时间点，我被 <a href="https://chee5e.space/" target="_blank" rel="noopener noreffer">@芝士</a> 拉进了中文 twitter 的圈子。</li>
<li>过年响应号召没回家（其实是嫌核酸检测麻烦，家里也建议先别回），每天爬爬山看看风景，买了个吊床去公园午睡，练习口琴竹笛，就这样玩了一个月。
<ul>
<li><figure><img src="/images/2021-summary/hammock.webp"/>
</figure>
</li>
</ul>
</li>
<li>到了 3 月份的时候我开始找工作，面了几家公司后，非常幸运地进入了大宇无限，成为了一名 SRE 萌新。在大宇一年的感受，就放在后面的「工作」部分写了，这里先略过。
<ul>
<li>加入大宇后，全年都有定期的团建，跟 SRE 小伙伴公款吃喝，我 2021 年下馆子次数估计是上一年的七八倍</li>
</ul>
</li>
<li>3 月底，看了电影——《寻龙传说》（2021 年看的唯一一部电影），片尾曲超好听。</li>
<li>4 月份，各种巧合下，意外发现初中同学住得离我 1km 不到，在他家吃了顿家乡菜，还有杨梅酒，味道非常棒！还有回甘强烈的城步青钱柳茶，让我念念不忘。</li>
<li>8 月份，堂弟来深圳暑期实习，跟两个堂弟一起穿越深圳东西冲海岸线，风景非常棒，不过路上也是又热又渴</li>
<li>10 月份
<ul>
<li>加入了大宇的冲浪小分队，第一次冲浪、海边烧烤</li>
<li>买了双轮滑鞋，学会了倒滑、压步转向，复习了大学时学过的若干基础技巧</li>
</ul>
</li>
<li>12 月，买了台云米泉先净饮机后，有了随时随地的矿物质热水，就想起了 4 月份在初中同学家喝过的青钱柳，然后就喝茶上瘾了，一桌子的滇红、祁门红茶、安吉白茶、黄山毛峰、青钱柳、莓茶、梅子菁&hellip;目前感觉滇红跟祁门红茶最好喝，安吉白茶跟黄山毛峰都非常清香，青钱柳回甘最强烈，莓茶怎么说呢味道感觉不太好（也可能是泡的手法不对？）
<ul>
<li><figure><a class="lightgallery" href="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp" title="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp" data-thumbnail="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp" data-sub-html="<h2>我的云米净饮机</h2>">
        <img
            class="lazyload"
            data-src="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp"
            data-srcset="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp, /images/2021-summary/yunmi-ro-filterred-water-dispenser.webp 1.5x, /images/2021-summary/yunmi-ro-filterred-water-dispenser.webp 2x"
            data-sizes="auto"
            alt="/images/2021-summary/yunmi-ro-filterred-water-dispenser.webp">
    </a><figcaption class="image-caption">我的云米净饮机</figcaption>
    </figure></li>
<li><figure><a class="lightgallery" href="/images/2021-summary/my-tea.webp" title="/images/2021-summary/my-tea.webp" data-thumbnail="/images/2021-summary/my-tea.webp" data-sub-html="<h2>桌面上的各种茶叶</h2>">
        <img
            class="lazyload"
            data-src="/images/2021-summary/my-tea.webp"
            data-srcset="/images/2021-summary/my-tea.webp, /images/2021-summary/my-tea.webp 1.5x, /images/2021-summary/my-tea.webp 2x"
            data-sizes="auto"
            alt="/images/2021-summary/my-tea.webp">
    </a><figcaption class="image-caption">桌面上的各种茶叶</figcaption>
    </figure></li>
</ul>
</li>
<li>2022 年 1 月，第一次买动漫手办，妆点后感觉房间都增色不少~
<ul>
<li><figure><a class="lightgallery" href="/images/2021-summary/Posts-and-Garage-Kit.webp" title="/images/2021-summary/Posts-and-Garage-Kit.webp" data-thumbnail="/images/2021-summary/Posts-and-Garage-Kit.webp" data-sub-html="<h2>我的房间-挂画-手办</h2>">
        <img
            class="lazyload"
            data-src="/images/2021-summary/Posts-and-Garage-Kit.webp"
            data-srcset="/images/2021-summary/Posts-and-Garage-Kit.webp, /images/2021-summary/Posts-and-Garage-Kit.webp 1.5x, /images/2021-summary/Posts-and-Garage-Kit.webp 2x"
            data-sizes="auto"
            alt="/images/2021-summary/Posts-and-Garage-Kit.webp">
    </a><figcaption class="image-caption">我的房间-挂画-手办</figcaption>
    </figure></li>
</ul>
</li>
</ul>
<h2 id="读书" class="headerLink">
    <a href="#%e8%af%bb%e4%b9%a6" class="header-mark"></a>读书</h2><ul>
<li>年初辞职后游山玩水，心思稍微安定了些，看了大半本《走出荒野》。</li>
<li>6 月份社区组织打新冠疫苗时，在等候室看了本《青春驿站——深圳打工妹写真》，讲述八九十年代打工妹的生活。很真实，感情很细腻。</li>
<li>年末二爷爷去世，参加完葬礼后，心态有些变化，看完了大一时买下的《月宫 Moon Palace》，讲述主角的悲剧人生。</li>
<li>其余大部分业余时间，无聊，又不想学点东西，也不想运动，于是看了非常多的网络小说打发时间。</li>
</ul>
<h2 id="音乐" class="headerLink">
    <a href="#%e9%9f%b3%e4%b9%90" class="header-mark"></a>音乐</h2><p>年初辞职后，练了一段时间的竹笛跟蓝调口琴，但后来找到工作后就基本沉寂了。</p>
<p>总的来说还是原地踏步吧。</p>
<figure><img src="/images/2021-summary/midi-keyboard-flute-harmonica.webp"/>
</figure>

<h2 id="工作---我在大宇无限的这一年" class="headerLink">
    <a href="#%e5%b7%a5%e4%bd%9c---%e6%88%91%e5%9c%a8%e5%a4%a7%e5%ae%87%e6%97%a0%e9%99%90%e7%9a%84%e8%bf%99%e4%b8%80%e5%b9%b4" class="header-mark"></a>工作 - 我在大宇无限的这一年</h2><p>3 月份刚进大宇的我充满好奇，但也小心谨慎，甚至有点不敢相信自己能进到一家这么棒的公司，感觉自己运气爆棚。
毕竟大宇无论是同事水平还是工作氛围，亦或是用户体量，相比我上家公司都是质的差别。</p>
<p><figure><a class="lightgallery" href="/images/2021-summary/workstation-1.webp" title="/images/2021-summary/workstation-1.webp" data-thumbnail="/images/2021-summary/workstation-1.webp" data-sub-html="<h2>我在大宇的第一个工位</h2>">
        <img
            class="lazyload"
            data-src="/images/2021-summary/workstation-1.webp"
            data-srcset="/images/2021-summary/workstation-1.webp, /images/2021-summary/workstation-1.webp 1.5x, /images/2021-summary/workstation-1.webp 2x"
            data-sizes="auto"
            alt="/images/2021-summary/workstation-1.webp">
    </a><figcaption class="image-caption">我在大宇的第一个工位</figcaption>
    </figure></p>
<p>之后慢慢熟悉工作的内容与方法，leader 尽力把最匹配我兴趣的工作安排给我，帮我排疑解难，同时又给我极大的自主性，真的是棒极了。</p>
<p>然而自主性高带来的也是更高的工作难度，遇到困难时也曾手忙脚乱、迷茫、甚至自我怀疑，很担心是不是隔天就得跑路了&hellip;
但好在我终究还是能调节好心态，负起责任，一步步把工作完成。
中间有几次工作有延误时，leader 还陪我加班，事情干完后又带我去吃大餐犒劳自己，真的超级感谢他的帮助与支持。</p>
<p><figure><a class="lightgallery" href="/images/2021-summary/workstation-2.webp" title="/images/2021-summary/workstation-2.webp" data-thumbnail="/images/2021-summary/workstation-2.webp" data-sub-html="<h2>换座位后的新工位，落地窗风景很棒</h2>">
        <img
            class="lazyload"
            data-src="/images/2021-summary/workstation-2.webp"
            data-srcset="/images/2021-summary/workstation-2.webp, /images/2021-summary/workstation-2.webp 1.5x, /images/2021-summary/workstation-2.webp 2x"
            data-sizes="auto"
            alt="/images/2021-summary/workstation-2.webp">
    </a><figcaption class="image-caption">换座位后的新工位，落地窗风景很棒</figcaption>
    </figure></p>
<p>这样经历了几个项目的洗礼后，现在我终于能说自己是脚踏实地了，心态从「明天是不是得提桶跑路」转变成了「哇还有这个可以搞，那个 ROI 也很高，有好多有趣的事可以做啊」，我终于能说自己真正融入了大宇无限这家公司，成为了它的一员。</p>
<p>回看下了 2020 年的总结与展望，今年实际的进步，跟去年期望的差别很大。最初的目标大概只实现了 10%，但是接触到了许多意料之外的东西，总体还是满意的：</p>
<ul>
<li>熟悉了新公司的文化与工作方式，这感觉是个很大的收获，我的工作方式有了很大的改善</li>
<li>接触并且熟悉了新公司的 AWS 线上环境
<ul>
<li>负责维护线上 Kubernetes 管理平台，第一次接触到的线上集群峰值 QPS 就有好几万。从一开始的小心翼翼，到现在也转变成了老手，这算是意义重大吧</li>
<li>使用 python 写了几个 Kubernetes 管理平台的服务，这也是我第一次写线上服务，很有些成就感</li>
<li>下半年在 AWS 成本的分析与管控上花了很多精力，也有了一些不错的成果，受益匪浅</li>
<li>学会了 Nginx 的简单使用，刚好够用于维护公司先有的 Nginx 代理配置</li>
</ul>
</li>
<li>主导完成了「新建 K8s 集群，将服务迁移到新集群」。虽然并不是一件很难的事，但这应该算是我 2021 年最大的成就了。
<ul>
<li>升级过程中也是遇到了各种问题，第一次升级迁移时我准备了好久，慌的不行，结果升级时部分服务还是出了问题，当时脑子真的是个懵的，跟 leader 搞到半夜 1 点多后还是没解决，回退到了旧集群，升级失败。之后通过各种测试分析，确认到是某个服务扩缩容震荡导致可用率无法恢复，尝试通过 HPA 的 behavior 来控制扩缩容速率，又意外触发了 K8s HPA 的 bug 把集群控制面搞崩了&hellip; 再之后把问题都确认了，第二次尝试升级，又是有个别服务可用率抖动，调试了好几天。那几天神经一直紧绷，每天早上都是被服务可用率的告警吵醒的。跨年的那天晚上业务量上涨，我就在观察服务可用率的过程中跨年了。这样才终于完成了 K8s 集群的升级，期间各位同事也有参与帮忙分析排查各种问题，非常感谢他们，还有努力的我自己。</li>
</ul>
</li>
<li>随便写了几个 go 的 demo，基本没啥进步</li>
<li>学了一个星期的 rust 语言，快速看完了 the book，用 rust 重写了个 video2chars</li>
<li>学习了 Linux 容器的底层原理：cgroups/namespace 技术，并且用 go/rust 实现了个 demo</li>
<li>学习了 Linux 的各种网络接口、Iptables</li>
<li>熟悉了 PromQL/Grafana，现在也能拷贝些 PromQL 查各种数据了</li>
</ul>
<p>如果要给自己打分的话，那就是「良好」吧。因为并没有很强的进取心，所以出来的结果也并不能称之为「优秀」。</p>
<p>顺便公司的新办公区真的超赞，详情见我的 twitter：</p>
<blockquote class="twitter-tweet"><p lang="zh" dir="ltr">新办公区真好呐～<br><br>值此良辰美景，好想整个榻榻米坐垫，坐在角落的落地窗边工作🤣<br>那种使用公共设施工（mo）作（yu）的乐趣，以及平常工位见不到的景色交相辉映，是不太好表述的奇妙体验 <a href="https://t.co/FASffzw8N3">pic.twitter.com/FASffzw8N3</a></p>&mdash; ryan4yin | 於清樂 (@ryan4yin) <a href="https://twitter.com/ryan4yin/status/1482891448731070466?ref_src=twsrc%5Etfw">January 17, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
<h2 id="技术方面的感受" class="headerLink">
    <a href="#%e6%8a%80%e6%9c%af%e6%96%b9%e9%9d%a2%e7%9a%84%e6%84%9f%e5%8f%97" class="header-mark"></a>技术方面的感受</h2><ul>
<li>Istio 服务网格：体会到了它有点重，而且它的发展跟我们的需求不一定匹配
<ul>
<li>Sidecar 模式的成本比较高，在未调优的情况下，它会给服务带来 1/3 到 1/4 的成本提升，以及延迟上升</li>
<li>比如切量权重固定为 100（新版本将会放宽限制），不支持 pod 的 warm up（社区已经有 PR，持续观望吧）</li>
<li>而它重点发展的虚拟机支持我们却完全不需要</li>
<li>一直在思考是持续往 Istio 投入，还是换其他的方案</li>
</ul>
</li>
<li>服务网格仍然在快速发展，未来的趋势应该是 eBPF + Envoy + WASM
<ul>
<li>Cilium 推出的基于 eBPF 的 Service Mesh 是一个新趋势（它使用高级特性时会退化成 Per Node Proxy 模式），成本、延迟方面都有望吊打 Sidecar 模式的其他服务网格，是今年服务网格领域的大新闻。</li>
<li>我们曾尝试使用中心化网关来替代 Sidecar 以降低成本。但是跨区流量成本、HTTP/gRPC 多协议共存，这些都是挑战。而且这也并不是社区的最佳实践，现在我觉得维持 Sidecar 其实反而能提升资源利用率，我们的集群资源利用率目前很低。如果能把控好，这部分成本或许是可以接受的。</li>
</ul>
</li>
<li>K8s 集群的日志方面，我们目前是使用自研的基于 gelf 协议的系统，但是问题挺多的
<ul>
<li>从提升系统的可维护性、易用性等角度来说，loki 是值得探索下的</li>
</ul>
</li>
<li>K8s 集群管理方面，觉得集群的升级迭代，可以做得更自动化、更可靠。明年可以在多集群管理这个方向上多探索下。</li>
<li><a href="https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/" target="_blank" rel="noopener noreffer">Pod 服务质量</a>：对非核心服务，可以适当调低 requests 的资源量，而不是完全预留(<code>Guaranteed</code>)，以提升资源利用率。</li>
<li>官方的 HPA 能力是不够用的，业务侧可能会需要基于 QPS/Queue 或者业务侧的其他参数来进行扩缩容
<ul>
<li>推广基于 <a href="https://github.com/kedacore/keda" target="_blank" rel="noopener noreffer">KEDA</a> 的扩缩容能力</li>
<li>关注 <a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#container-resource-metrics" target="_blank" rel="noopener noreffer">Container resource metrics</a> 的进展</li>
</ul>
</li>
<li>成本控制方面，体会到了 <del>ARM 架构</del>以及 Spot 竞价实例的好处
<ul>
<li>2022-02-17 更新：数据库等中间件可以切换到 ARM。EKS 服务目前都是 Spot 实例，它的 ARM 化 ROI 并不高。</li>
</ul>
</li>
<li>跨区流量成本有很大的潜在优化空间
<ul>
<li>跨区流量成本是进出该可用区都会收费，而且不仅涉及 Kubernetes 集群内服务间的调用，还会涉及对 RDS/ES/ElastiCache/EC2 等其他资源的调用。</li>
</ul>
</li>
<li>今年各云厂商故障频发，没有<strong>跨 region 的服务迁移</strong>就会很难受，需要持续关注下 <a href="https://github.com/karmada-io/karmada" target="_blank" rel="noopener noreffer">karmada</a> 这类多集群管理方案。
<ul>
<li>Google 账号系统宕机</li>
<li>Fastly CDN 故障</li>
<li>Facebook 故障</li>
<li>AWS 更是各种可用区故障，12/7 的故障导致 AWS 大部分服务都崩了。因此我们 SRE 今年经常是救各种大火小火&hellip;</li>
</ul>
</li>
<li>Rust/Go/WASM 蓬勃发展，未来可期。</li>
<li>AI 落地到各个领域，影响到了我们日常使用的语音导航、歌声合成、语音合成等多个领域，当然也包括与 SRE 工作相关的场景：AIOps</li>
</ul>
<h2 id="2022-年的展望" class="headerLink">
    <a href="#2022-%e5%b9%b4%e7%9a%84%e5%b1%95%e6%9c%9b" class="header-mark"></a>2022 年的展望</h2><h3 id="技术侧" class="headerLink">
    <a href="#%e6%8a%80%e6%9c%af%e4%be%a7" class="header-mark"></a>技术侧</h3><p>今年的展望写得更聚焦一些，争取能实现 50%，就是很大的突破了。</p>
<p>重点仍然是网络技术与 Kubernetes 技术，Redis/Search/Database 等技术还得靠后排，或许明年吧哈哈。</p>
<ol>
<li>熟练掌握 Go 语言，并分别用于至少两个项目中
<ol>
<li>打铁还需自身硬，编码能力是基础中的基础</li>
</ol>
</li>
<li>Kubernetes 相关
<ol>
<li>以 kubebuilder 为代表的 k8s 开发、拓展技术</li>
<li>阅读 k8s 及相关生态的源码，了解其实现逻辑</li>
</ol>
</li>
<li>网络技术
<ol>
<li>服务网格 Istio</li>
<li>代理工具 Envoy/APISIX</li>
<li>网络插件 Cilium + eBPF</li>
</ol>
</li>
<li>AWS K8s 成本与服务稳定性优化
<ol>
<li>通过拓扑感知的请求转发，节约跨可用区/跨域的流量成本</li>
<li>K8s 新特性：<a href="https://kubernetes.io/docs/concepts/services-networking/topology-aware-hints/" target="_blank" rel="noopener noreffer">Topology Aware Hints</a></li>
<li>Istio: <a href="https://istio.io/latest/docs/tasks/traffic-management/locality-load-balancing/" target="_blank" rel="noopener noreffer">Locality Load Balancing</a></li>
<li>推广 gRPC 协议</li>
<li>通过亲和性与反亲和性 + <a href="https://github.com/kubernetes-sigs/descheduler" target="_blank" rel="noopener noreffer">descheduler</a>，实现合理调度 Pods 减少跨域流量、也提升服务容灾能力</li>
</ol>
</li>
<li>提升本地开发效率：
<ol>
<li><a href="https://github.com/nocalhost/nocalhost" target="_blank" rel="noopener noreffer">nocalhost</a></li>
</ol>
</li>
<li>多集群的应用部署、容灾
<ol>
<li>karmada</li>
</ol>
</li>
<li>探索新技术与可能性（优先级低）
<ol>
<li>基于 Kubernetes 的服务平台，未来的发展方向
<ol>
<li>kubevela</li>
<li>buildpack</li>
<li>是否应该推进 gitops</li>
<li>openkruise</li>
</ol>
</li>
<li>Serverless 平台的进展
<ol>
<li>Knative</li>
<li>OpenFunction</li>
</ol>
</li>
<li>机器学习、深度学习技术：想尝试下将 AI 应用在音乐、语音、SRE 等我感兴趣的领域，即使是调包也行啊，总之想出点成果&hellip;</li>
</ol>
</li>
</ol>
<p>可以预料到明年 SRE 团队有超多的机会，这其中我具体能负责哪些部分，又能做出怎样的成果，真的相当期待~</p>
<h3 id="生活侧" class="headerLink">
    <a href="#%e7%94%9f%e6%b4%bb%e4%be%a7" class="header-mark"></a>生活侧</h3><ul>
<li>运动：
<ul>
<li>把轮滑练好，学会点花样吧，每个月至少两次。</li>
<li>进行三次以上的次短途旅行，东西冲穿越可以再来一次。</li>
</ul>
</li>
<li>音乐：
<ul>
<li>再一次学习乐理&hellip;</li>
<li>midi 键盘买了一直吃灰，多多练习吧</li>
<li>买了个 Synthesizer V  Stduio Pro + 「青溯 AI」，新的一年想学下调教，翻唱些自己喜欢的歌。</li>
</ul>
</li>
<li>阅读：清单如下，一个月至少读完其中一本。
<ul>
<li>文学类：
<ul>
<li><input checked="" disabled="" type="checkbox"> 《人间失格》：久仰大名的一本书，曾经有同学力荐，但是一直没看。</li>
<li><input disabled="" type="checkbox"> 《生命最后的读书会》：或许曾经看过，但是一点印象都没了</li>
<li><input disabled="" type="checkbox"> 《百年孤独》：高中的时候读过一遍，但是都忘差不多了</li>
<li><input disabled="" type="checkbox"> 《霍乱时期的爱情》</li>
<li><input disabled="" type="checkbox"> 《苏菲的世界》：据说是哲学启蒙读物，曾经看过，但是对内容完全没印象了。</li>
<li><input disabled="" type="checkbox"> 《你一生的故事》：我也曾是个科幻迷</li>
<li><input disabled="" type="checkbox"> 《沈从文的后半生》</li>
<li><input disabled="" type="checkbox"> 《我与地坛》</li>
<li><input disabled="" type="checkbox"> 《将饮茶》</li>
<li><input disabled="" type="checkbox"> 《吾国与吾民 - 林语堂》</li>
<li><input disabled="" type="checkbox"> 《房思琪的初恋乐园》</li>
</ul>
</li>
<li>人文社科
<ul>
<li><input disabled="" type="checkbox"> 《在生命的尽头拥抱你-临终关怀医生手记》：今年想更多地了解下「死亡」</li>
<li><input disabled="" type="checkbox"> 《怎样征服美丽少女》：哈哈</li>
<li><input disabled="" type="checkbox"> 《爱的艺术》</li>
<li><input disabled="" type="checkbox"> 《社会心理学》</li>
<li><input disabled="" type="checkbox"> 《被讨厌的勇气》</li>
<li><input disabled="" type="checkbox"> 《人体简史》</li>
<li><input disabled="" type="checkbox"> 《科学革命的结构》</li>
<li><input disabled="" type="checkbox"> 《邓小平时代》</li>
<li><input disabled="" type="checkbox"> 《论中国》</li>
<li><input disabled="" type="checkbox"> 《刘擎西方现代思想讲义》</li>
<li><input disabled="" type="checkbox"> 《时间的秩序》</li>
<li><input disabled="" type="checkbox"> 《极简宇宙史》</li>
<li><input disabled="" type="checkbox"> 《圆圈正义-作为自由前提的信念》</li>
<li><input disabled="" type="checkbox"> 《人生脚本》</li>
</ul>
</li>
<li>技术类
<ul>
<li><input disabled="" type="checkbox"> 《复杂》</li>
<li><input disabled="" type="checkbox"> 《SRE - Google 运维解密》</li>
<li><input disabled="" type="checkbox"> 《凤凰项目：一个 IT 运维的传奇故事》</li>
<li><input disabled="" type="checkbox"> 《人月神话》</li>
<li><input disabled="" type="checkbox"> 《绩效使能：超越 OKR》</li>
<li><input disabled="" type="checkbox"> 《奈飞文化手册》</li>
<li><input disabled="" type="checkbox"> 《幕后产品-打造突破式思维》</li>
<li><input disabled="" type="checkbox"> 《深入 Linux 内核架构》</li>
<li><input disabled="" type="checkbox"> 《Linux/UNIX 系统编程手册》</li>
<li><input disabled="" type="checkbox"> 《重构 - 改善既有代码的设计》</li>
<li><input disabled="" type="checkbox"> 《网络是怎样连接的》：曾经学习过《计算机网络：自顶向下方法》，不过只学到网络层。就从这本书开始重新学习吧。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="结语" class="headerLink">
    <a href="#%e7%bb%93%e8%af%ad" class="header-mark"></a>结语</h2><p>2021 年初朋友与我给自己的期许是「拆破玉笼飞彩凤，顿开金锁走蛟龙」，感觉确实应验了。</p>
<p>今年我希望不论是在生活上还是在工作上，都能「更上一层楼」~</p>
<blockquote>
<p>更多有趣的、有深度的 2021 年度总结：<a href="https://github.com/saveweb/review-2021" target="_blank" rel="noopener noreffer">https://github.com/saveweb/review-2021</a></p>
</blockquote>
]]></content></entry><entry><title type="html">月宫</title><link href="https://thiscute.world/posts/moon-palace/"/><id>https://thiscute.world/posts/moon-palace/</id><author><name>ryan4yin</name></author><published>2021-12-27T17:23:00+08:00</published><updated>2021-12-27T17:23:00+08:00</updated><content type="html"><![CDATA[<p>大雪，沙雪。</p>
<p>到晴岚桥等送葬队伍时，非常冷。</p>
<p>转头一望，发现送葬的几位师傅在渠渡庙门口就地取材生起了火堆取暖。这样寒冷的天气下，很有种惊喜的感觉。</p>
<p>送葬路上又是风又是雪，像是老天也在哀伤。辉辉说这还是他第一次在风雪天里送葬，我也有同感。
到了山上，雨伞上已经结了薄薄一层冰，老爸跟老妈衣服也冻上了冰晶，辉辉更是头发都冻上了。
风雪之中，二爷爷被葬在我家后山。</p>
<p>我们就这样送走了二爷爷。</p>
<p>这次的送葬，对我而言像是一个仪式——多年前的高考备战、以及后来的异乡求学，使我失去了一些一生只有一次的告别机会，我在尝试弥补这些曾经的遗憾。</p>
<p>事情都办完后，我到洞口赶高铁，结果不论是高铁还是火车都晚点，就连只隔一个站的 K809 都晚点 99 分钟。
漫长的等车时间里，我又看起了《月宫》这本小说。这是我刚上大学时买的书，因为看到说主角想把自己逼到极限，这引起了当时苦行僧般的我的共鸣，于是就想买来读一读，但我始终没有看完它，因为越读内心就越压抑。</p>
<p>不知道该如何描述这种心态的变化，我意识到我现在终于能够沉下心去读这本书了。</p>
<p>我边读边回忆多年前读过的故事情节。在记起是 Kitty 救了自我放逐中的 Fogg，并且重新获得希望之后，我发觉自己目前的状态可能有些问题。
业余时间沉迷在自我中心的网络小说中，其他时间只关注技术，人就渐渐变得跟人脱节。</p>
<p>终于上了高铁，在车上我同样用《月宫》打发时间。
在晚点两个半小时后，一点半，到达了深圳北，这时候我刚好看到书中 Kitty 对 Fogg 说：「已经太晚了，我不能再一次冒险。再见，请你好好对自己。」
心里突然就空落落的，我意识到这是一个彻头彻尾的悲剧，我居然想在悲剧中期许一个美好的转折，真的是有些妄想了。
下了车，站在站台上，眼泪就涌了出来。为书中的悲剧哭泣，也再一次意识到，那些记忆中满脸皱纹的身影，是真的永别了。</p>
<p>从 2015 年 11 月到 2021 年 12 月 27 日的凌晨，二爷爷下葬的翌日，我借着火车站路边昏黄的灯光，看完了保罗·奥斯特的《月宫》。</p>
]]></content></entry><entry><title type="html">浮生若梦，为欢几何？</title><link href="https://thiscute.world/posts/life-is-just-like-a-dream/"/><id>https://thiscute.world/posts/life-is-just-like-a-dream/</id><author><name>ryan4yin</name></author><published>2021-11-16T02:07:39+08:00</published><updated>2021-11-16T02:14:37+08:00</updated><content type="html"><![CDATA[<!-- 遥远的歌 -->
<meting-js server="netease" type="song" id="418257688" theme="#448aff"></meting-js>
<p>已过了立冬，却没想象中的那么冷。</p>
<p>忽闻堂弟打算去河南，而且后天就走。</p>
<p>一瞬间感觉生活有点梦幻，惶惶然又脱离了掌控。</p>
<p>又想到今年找到的新工作，梦幻般的待遇，不限量的三餐供应，窗明几净的落地窗工位，这一切都像是在做梦。</p>
<p>即使如此，我一边担心自己工作搞不定要提桶跑路，一边却又还不满足。</p>
<p>浮生若梦，为欢几何？</p>
<p>嘿，又想要喝点酒了，梦里或许有好酒呢。</p>
<p>恍惚间，又回到了那年大二开学，我拖着个旧皮箱，在凌晨薄雾的校园里走着，耳边只有皮箱轮子的滚动声和几声鸟鸣。耳机里放着一首《遥远的歌》。</p>
]]></content></entry><entry><title type="html">此岸弃草，彼岸繁花</title><link href="https://thiscute.world/posts/weeds-on-this-side-flowers-on-the-other/"/><id>https://thiscute.world/posts/weeds-on-this-side-flowers-on-the-other/</id><author><name>ryan4yin</name></author><published>2021-08-28T12:24:20+08:00</published><updated>2021-08-28T12:24:20+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>「此岸弃草，彼岸繁花。」取自前永动机主唱「河津樱/白金」的个人简介</p>
</blockquote>
<p>今天想推几首歌 emmmm</p>
<meting-js server="netease" type="playlist" id="901077788" theme="#448aff"></meting-js>
<p>音乐插件出了点毛病，直接上链接了：</p>
<p><a href="https://music.163.com/#/playlist?id=901077788" target="_blank" rel="noopener noreffer">https://music.163.com/#/playlist?id=901077788</a></p>
]]></content></entry><entry><title type="html">iptables 及 docker 容器网络分析</title><link href="https://thiscute.world/posts/iptables-and-container-networks/"/><id>https://thiscute.world/posts/iptables-and-container-networks/</id><author><name>ryan4yin</name></author><published>2021-08-15T19:11:29+08:00</published><updated>2021-08-15T19:11:29+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文仅针对 ipv4 网络</p>
</blockquote>
<p>本文先介绍 iptables 的基本概念及常用命令，然后分析 docker/podman 是如何利用 iptables 和 Linux 虚拟网络接口实现的单机容器网络。</p>
<h2 id="一iptables" class="headerLink">
    <a href="#%e4%b8%80iptables" class="header-mark"></a>一、iptables</h2><p><a href="https://www.netfilter.org/projects/iptables/index.html" target="_blank" rel="noopener noreffer">iptables</a> 提供了包过滤、NAT 以及其他的包处理能力，iptables 应用最多的两个场景是 firewall 和 NAT</p>
<p>iptables 及新的 nftables 都是基于 netfilter 开发的，是 netfilter 的子项目。</p>
<p>但是 eBPF 社区目前正在开发旨在取代 netfilter 的新项目 bpfilter，他们的目标之一是兼容 iptables/nftables 规则，让我们拭目以待吧。</p>
<h3 id="1-iptables-基础概念---四表五链" class="headerLink">
    <a href="#1-iptables-%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5---%e5%9b%9b%e8%a1%a8%e4%ba%94%e9%93%be" class="header-mark"></a>1. iptables 基础概念 - 四表五链</h3><blockquote>
<p>实际上还有张 SELinux 相关的 security 表（应该是较新的内核新增的，但是不清楚是哪个版本加的），但是我基本没接触过，就略过了。</p>
</blockquote>
<blockquote>
<p>这里只对 iptables 做简短介绍，详细的教程参见 <a href="https://www.zsythink.net/archives/1199" target="_blank" rel="noopener noreffer">iptables详解（1）：iptables概念 - 朱双印</a>，这篇文章写得非常棒！把 iptables 讲清楚了。</p>
</blockquote>
<p>默认情况下，iptables 提供了四张表（不考虑 security 的话）和五条链，数据在这四表五链中的处理流程如下图所示：</p>
<blockquote>
<p>在这里的介绍中，可以先忽略掉图中 link layer 层的链路，它属于 ebtables 的范畴。另外 <code>conntrack</code> 也暂时忽略，在下一小节会详细介绍 conntrack 的功能。</p>
</blockquote>
<p><figure><a class="lightgallery" href="/images/netfilter/netfilter-packet-flow.webp" title="/images/netfilter/netfilter-packet-flow.webp" data-thumbnail="/images/netfilter/netfilter-packet-flow.webp" data-sub-html="<h2>netfilter 数据包处理流程，来自 wikipedia</h2>">
        <img
            class="lazyload"
            data-src="/images/netfilter/netfilter-packet-flow.webp"
            data-srcset="/images/netfilter/netfilter-packet-flow.webp, /images/netfilter/netfilter-packet-flow.webp 1.5x, /images/netfilter/netfilter-packet-flow.webp 2x"
            data-sizes="auto"
            alt="/images/netfilter/netfilter-packet-flow.webp">
    </a><figcaption class="image-caption">netfilter 数据包处理流程，来自 wikipedia</figcaption>
    </figure></p>
<p>对照上图，对于发送到某个用户层程序的数据而言，流量顺序如下：</p>
<ul>
<li>首先进入 PREROUTING 链，依次经过这三个表： raw -&gt; mangle -&gt; nat</li>
<li>然后进入 INPUT 链，这个链上也有三个表，处理顺序是：mangle -&gt; nat -&gt; filter</li>
<li>过了 INPUT 链后，数据才会进入内核协议栈，最终到达用户层程序。</li>
</ul>
<p>用户层程序发出的报文，则依次经过这几个表：OUTPUT -&gt; POSTROUTING</p>
<p>从图中也很容易看出，如果数据 dst ip 不是本机任一接口的 ip，那它通过的几个链依次是：PREROUTEING -&gt; FORWARD -&gt; POSTROUTING</p>
<p>五链的功能和名称完全一致，应该很容易理解。
除了默认的五条链外，用户也可以创建自定义的链，自定义的链需要被默认链引用才能生效，我们后面要介绍的 Docker 实际上就定义了好几条自定义链。</p>
<p>除了「链」外，iptables 还有「表」的概念，四个表的优先级顺序如下：</p>
<ul>
<li>raw: 对收到的数据包在连接跟踪前进行处理。一般用不到，可以忽略
<ul>
<li>一旦用户使用了 raw 表，raw 表处理完后，将跳过 nat 表和 ip_conntrack 处理，即不再做地址转换和数据包的链接跟踪处理了</li>
</ul>
</li>
<li>mangle: 用于修改报文、给报文打标签，用得也较少。</li>
<li>nat: 主要用于做网络地址转换，SNAT 或者 DNAT</li>
<li>filter: 主要用于过滤数据包</li>
</ul>
<p>数据在按优先级经过四个表的处理时，一旦在某个表中匹配到一条规则 A,下一条处理规则就由规则 A 的 target 参数指定，<strong>后续的所有表</strong>都会被忽略。target 有如下几种类型：</p>
<ul>
<li>ACCEPT: 直接允许数据包通过</li>
<li>DROP: 直接丢弃数据包，对程序而言就是 100% 丢包</li>
<li>REJECT: 丢弃数据包，但是会给程序返回  RESET。这个对程序更友好，但是存在安全隐患，通常不使用。</li>
<li>MASQUERADE: （伪装）将 src ip 改写为网卡 ip，和 SNAT 的区别是它会自动读取网卡 ip。路由设备必备。</li>
<li>SNAT/DNAT: 顾名思义，做网络地址转换</li>
<li>REDIRECT: 在本机做端口映射</li>
<li>LOG: 在 <code>/var/log/messages</code> 文件中记录日志信息，然后将数据包传递给下一条规则，也就是说除了记录以外不对数据包做任何其他操作，仍然让下一条规则去匹配。
<ul>
<li>只有这个 target 特殊一些，匹配它的数据仍然可以匹配后续规则，不会直接跳过。</li>
</ul>
</li>
<li>其他自定义链的名称：表示将数据包交给该链进行下一步处理。</li>
<li>RETURN: 如果是在子链（自定义链）遇到 RETURN，则返回父链的下一条规则继续进行条件的比较。如果是在默认链 RETURN 则直接使用默认的动作（ACCEPT/DROP）</li>
<li>其他类型，可以用到的时候再查</li>
</ul>
<p>理解了上面这张图，以及四个表的用途，就很容易理解 iptables 的命令了。</p>
<h3 id="2-常用命令" class="headerLink">
    <a href="#2-%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4" class="header-mark"></a>2. 常用命令</h3><blockquote>
<p><strong>注意</strong>: 下面提供的 iptables 命令做的修改是未持久化的，重启就会丢失！在下一节会简单介绍持久化配置的方法。</p>
</blockquote>
<p>命令格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">iptables <span class="o">[</span>-t table<span class="o">]</span> <span class="o">{</span>-A<span class="p">|</span>-C<span class="p">|</span>-D<span class="o">}</span> chain <span class="o">[</span>-m matchname <span class="o">[</span>per-match-options<span class="o">]]</span> -j targetname <span class="o">[</span>per-target-options<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中 table 默认为 <code>filter</code> 表，其中系统管理员实际使用最多的是 INPUT 链，用于设置防火墙。</p>
<p>以下简单介绍在 INPUT 链上添加、修改规则，来设置防火墙：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># --add 允许 80 端口通过</span>
</span></span><span class="line"><span class="cl">iptables -A INPUT -p tcp --dport <span class="m">80</span> -j ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># --list-rules 查看所有规则</span>
</span></span><span class="line"><span class="cl">iptables -S
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># --list-rules 查看 INPUT 表中的所有规则</span>
</span></span><span class="line"><span class="cl">iptables -S INPUT
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 iptables 中的所有规则（比 -L 更详细）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ---delete 通过编号删除规则</span>
</span></span><span class="line"><span class="cl">iptables -D <span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 或者通过完整的规则参数来删除规则</span>
</span></span><span class="line"><span class="cl">iptables -D INPUT -p tcp --dport <span class="m">80</span> -j ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># --replace 通过编号来替换规则内容</span>
</span></span><span class="line"><span class="cl">iptables -R INPUT <span class="m">1</span> -s 192.168.0.1 -j DROP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># --insert 在指定的位置插入规则，可类比链表的插入</span>
</span></span><span class="line"><span class="cl">iptables -I INPUT <span class="m">1</span> -p tcp --dport <span class="m">80</span> -j ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在匹配条件前面使用感叹号表示取反</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如下规则表示接受所有来自 docker0，但是目标接口不是 docker0 的流量</span>
</span></span><span class="line"><span class="cl">iptables -A FORWARD -i docker0 ! -o docker0 -j ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># --policy 设置某个链的默认规则</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 很多系统管理员会习惯将连接公网的服务器，默认规则设为 DROP，提升安全性，避免错误地开放了端口。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 但是也要注意，默认规则设为 DROP 前，一定要先把允许 ssh 端口的规则加上，否则就尴尬了。</span>
</span></span><span class="line"><span class="cl">iptables -P INPUT DROP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># --flush 清空 INPUT 表上的所有规则</span>
</span></span><span class="line"><span class="cl">iptables -F INPUT
</span></span></code></pre></td></tr></table>
</div>
</div><hr>
<blockquote>
<p>本文后续分析时，假设用户已经清楚 linux bridge、veth 等虚拟网络接口相关知识。
如果你还缺少这些前置知识，请先阅读文章 <a href="https://thiscute.world/posts/linux-virtual-network-interfaces/" target="_blank" rel="noopener noreffer">Linux 中的虚拟网络接口</a>。</p>
</blockquote>
<h3 id="3-conntrack-连接跟踪与-nat" class="headerLink">
    <a href="#3-conntrack-%e8%bf%9e%e6%8e%a5%e8%b7%9f%e8%b8%aa%e4%b8%8e-nat" class="header-mark"></a>3. conntrack 连接跟踪与 NAT</h3><p>在讲 conntrack 之间，我们再回顾下前面给出过的 netfilter 数据处理流程图：</p>
<p><figure><a class="lightgallery" href="/images/netfilter/netfilter-packet-flow.webp" title="/images/netfilter/netfilter-packet-flow.webp" data-thumbnail="/images/netfilter/netfilter-packet-flow.webp" data-sub-html="<h2>netfilter 数据包处理流程，来自 wikipedia</h2>">
        <img
            class="lazyload"
            data-src="/images/netfilter/netfilter-packet-flow.webp"
            data-srcset="/images/netfilter/netfilter-packet-flow.webp, /images/netfilter/netfilter-packet-flow.webp 1.5x, /images/netfilter/netfilter-packet-flow.webp 2x"
            data-sizes="auto"
            alt="/images/netfilter/netfilter-packet-flow.webp">
    </a><figcaption class="image-caption">netfilter 数据包处理流程，来自 wikipedia</figcaption>
    </figure></p>
<p>上一节中我们忽略了图中的 conntrack，它就是本节的主角——netfilter 的连接跟踪（connection tracking）模块。</p>
<p>netfilter/conntrack 是 iptables 实现 SNAT/DNAT/MASQUERADE 的前提条件，上面的流程图显示， conntrack 在 PREROUTEING 和 OUTPUT 链的 raw 表之后生效。</p>
<p>下面以 docker 默认的 bridge 网络为例详细介绍下 conntrack 的功能。</p>
<p>首先，这是我在「Linux 的虚拟网络接口」文中给出过的 docker0 网络架构图:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+-----------------------------------------------+-----------------------------------+-----------------------------------+
</span></span><span class="line"><span class="cl">|                      Host                     |           Container A             |           Container B             |
</span></span><span class="line"><span class="cl">|                                               |                                   |                                   |
</span></span><span class="line"><span class="cl">|   +---------------------------------------+   |    +-------------------------+    |    +-------------------------+    |
</span></span><span class="line"><span class="cl">|   |       Network Protocol Stack          |   |    |  Network Protocol Stack |    |    |  Network Protocol Stack |    |
</span></span><span class="line"><span class="cl">|   +----+-------------+--------------------+   |    +-----------+-------------+    |    +------------+------------+    |
</span></span><span class="line"><span class="cl">|        ^             ^                        |                ^                  |                 ^                 |
</span></span><span class="line"><span class="cl">|........|.............|........................|................|..................|.................|.................|
</span></span><span class="line"><span class="cl">|        v             v  ↓                     |                v                  |                 v                 |
</span></span><span class="line"><span class="cl">|   +----+----+  +-----+------+                 |          +-----+-------+          |           +-----+-------+         |
</span></span><span class="line"><span class="cl">|   | .31.101 |  | 172.17.0.1 |      +------+   |          | 172.17.0.2  |          |           |  172.17.0.3 |         |
</span></span><span class="line"><span class="cl">|   +---------+  +-------------&lt;----&gt;+ veth |   |          +-------------+          |           +-------------+         |
</span></span><span class="line"><span class="cl">|   |  eth0   |  |   docker0  |      +--+---+   |          | eth0(veth)  |          |           | eth0(veth)  |         |
</span></span><span class="line"><span class="cl">|   +----+----+  +-----+------+         ^       |          +-----+-------+          |           +-----+-------+         |
</span></span><span class="line"><span class="cl">|        ^             ^                |       |                ^                  |                 ^                 |
</span></span><span class="line"><span class="cl">|        |             |                +------------------------+                  |                 |                 |
</span></span><span class="line"><span class="cl">|        |             v                        |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |          +--+---+                    |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |          | veth |                    |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |          +--+---+                    |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |             ^                        |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |             +------------------------------------------------------------------------------+                 |
</span></span><span class="line"><span class="cl">|        |                                      |                                   |                                   |
</span></span><span class="line"><span class="cl">|        |                                      |                                   |                                   |
</span></span><span class="line"><span class="cl">+-----------------------------------------------+-----------------------------------+-----------------------------------+
</span></span><span class="line"><span class="cl">         v
</span></span><span class="line"><span class="cl">    Physical Network  (192.168.31.0/24)
</span></span></code></pre></td></tr></table>
</div>
</div><p>docker 会在 iptables 中为 docker0 网桥添加如下规则：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">-t nat -A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-t filter -P DROP
</span></span><span class="line"><span class="cl">-t filter -A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
</span></span></code></pre></td></tr></table>
</div>
</div><p>这几行规则使 docker 容器能正常访问外部网络。<code>MASQUERADE</code> 在请求出网时，会自动做 <code>SNAT</code>，将 src ip 替换成出口网卡的 ip.
这样数据包能正常出网，而且对端返回的数据包现在也能正常回到出口网卡。</p>
<p>现在问题就来了：<strong>出口网卡收到返回的数据包后，还能否将数据包转发到数据的初始来源端——某个 docker 容器</strong>？难道 docker 还额外添加了与 MASQUERADE 对应的 dst ip 反向转换规则？</p>
<p>实际上这一步依赖的是本节的主角——iptables 提供的 conntrack 连接跟踪功能（在「参考」中有一篇文章详细介绍了此功能）。</p>
<p>连接跟踪对 NAT 的贡献是：在做 NAT 转换时，无需手动添加额外的规则来执行<strong>反向转换</strong>以实现数据的双向传输。netfilter/conntrack 系统会记录 NAT 的连接状态，NAT 地址的反向转换是根据这个状态自动完成的。</p>
<p>比如上图中的 <code>Container A</code> 通过 bridge 网络向 baidu.com 发起了 N 个连接，这时数据的处理流程如下：</p>
<ul>
<li>首先 <code>Container A</code> 发出的数据包被 MASQUERADE 规则处理，将 src ip 替换成 eth0 的 ip，然后发送到物理网络 <code>192.168.31.0/24</code>。
<ul>
<li>conntrack 系统记录此连接被 NAT 处理前后的状态信息，并将其状态设置为 NEW，表示这是新发起的一个连接</li>
</ul>
</li>
<li>对端 baidu.com 返回数据包后，会首先到达 eth0 网卡</li>
<li>conntrack 查表，发现返回数据包的连接已经记录在表中并且状态为 NEW，于是它将连接的状态修改为 ESTABLISHED，并且将 dst_ip 改为 <code>172.17.0.2</code> 然后发送出去
<ul>
<li>注意，这个和 tcp 的 ESTABLISHED 没任何关系</li>
</ul>
</li>
<li>经过路由匹配，数据包会进入到 docker0，然后匹配上 iptables 规则：<code>-t filter -A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT</code>，数据直接被放行</li>
<li>数据经过 veth 后，最终进入到 <code>Container A</code> 中，交由容器的内核协议栈处理。</li>
<li>数据被 <code>Container A</code> 的内核协议栈发送到「发起连接的应用程序」。</li>
</ul>
<h4 id="1-支持哪些协议" class="headerLink">
    <a href="#1-%e6%94%af%e6%8c%81%e5%93%aa%e4%ba%9b%e5%8d%8f%e8%ae%ae" class="header-mark"></a>1. 支持哪些协议</h4><p>conntrack 连接跟踪模块目前只支持以下六种协议：<code>TCP</code>、<code>UDP</code>、<code>ICMP</code>、<code>DCCP</code>、<code>SCTP</code>、<code>GRE</code></p>
<p>要注意的一点是，conntrack 跟踪的「连接」，跟「TCP 连接」不是一个层面的概念，可以看到 conntrack 也支持 UDP 这种无连接通讯协议。</p>
<h4 id="2-实际测试-conntrack" class="headerLink">
    <a href="#2-%e5%ae%9e%e9%99%85%e6%b5%8b%e8%af%95-conntrack" class="header-mark"></a>2. 实际测试 conntrack</h4><p>现在我们来实际测试一下，看看是不是这么回事：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 使用 tcpdump 分别在出口网卡 wlp4s0 （相当于 eth0）和 dcoker0 网桥上抓包，后面会用来分析</span>
</span></span><span class="line"><span class="cl">❯ sudo tcpdump -i wlp4s0 -n &gt; wlp4s0.dump   <span class="c1"># 窗口一，抓 wlp4s0 的包</span>
</span></span><span class="line"><span class="cl">❯ sudo tcpdump -i docker0 -n &gt; docker0.dump  <span class="c1"># 窗口二，抓 docker0 的包</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在新建窗口三，启动一个容器，通过 curl 命令低速下载一个视频文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ docker run --rm --name curl -it curlimages/curl &#34;https://media.w3.org/2010/05/sintel/trailer.mp4&#34; -o /tmp/video.mp4 --limit-rate 100k
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后新建窗口四，在宿主机查看 conntrack 状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ sudo zypper in conntrack-tools  <span class="c1"># 这个记得先提前安装好</span>
</span></span><span class="line"><span class="cl">❯ sudo conntrack -L <span class="p">|</span> grep 172.17
</span></span><span class="line"><span class="cl"><span class="c1"># curl 通过 NAT 网络发起了一个 dns 查询请求，DNS 服务器是网关上的 192.168.31.1</span>
</span></span><span class="line"><span class="cl">udp      <span class="m">17</span> <span class="m">22</span> <span class="nv">src</span><span class="o">=</span>172.17.0.4 <span class="nv">dst</span><span class="o">=</span>192.168.31.1 <span class="nv">sport</span><span class="o">=</span><span class="m">59423</span> <span class="nv">dport</span><span class="o">=</span><span class="m">53</span> <span class="nv">src</span><span class="o">=</span>192.168.31.1 <span class="nv">dst</span><span class="o">=</span>192.168.31.228 <span class="nv">sport</span><span class="o">=</span><span class="m">53</span> <span class="nv">dport</span><span class="o">=</span><span class="m">59423</span> <span class="o">[</span>ASSURED<span class="o">]</span> <span class="nv">mark</span><span class="o">=</span><span class="m">0</span> <span class="nv">use</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># curl 通过 NAT 网络向 media.w3.org 发起了 tcp 连接</span>
</span></span><span class="line"><span class="cl">tcp      <span class="m">6</span> <span class="m">298</span> ESTABLISHED <span class="nv">src</span><span class="o">=</span>172.17.0.4 <span class="nv">dst</span><span class="o">=</span>198.18.5.130 <span class="nv">sport</span><span class="o">=</span><span class="m">54636</span> <span class="nv">dport</span><span class="o">=</span><span class="m">443</span> <span class="nv">src</span><span class="o">=</span>198.18.5.130 <span class="nv">dst</span><span class="o">=</span>192.168.31.228 <span class="nv">sport</span><span class="o">=</span><span class="m">443</span> <span class="nv">dport</span><span class="o">=</span><span class="m">54636</span> <span class="o">[</span>ASSURED<span class="o">]</span> <span class="nv">mark</span><span class="o">=</span><span class="m">0</span> <span class="nv">use</span><span class="o">=</span><span class="m">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>等 curl 命令跑个十来秒，然后关闭所有窗口及应用程序，接下来进行数据分析：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 前面查到的，本地发起请求的端口是 54636，下面以此为过滤条件查询数据</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 首先查询 wlp4s0/eth0 进来的数据，可以看到本机的 dst_ip 为 192.168.31.228.54636</span>
</span></span><span class="line"><span class="cl">❯ cat wlp4s0.dump <span class="p">|</span> grep <span class="m">54636</span> <span class="p">|</span> head -n <span class="m">15</span>
</span></span><span class="line"><span class="cl">18:28:28.349321 IP 192.168.31.228.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>S<span class="o">]</span>, seq 750859357, win 64240, options <span class="o">[</span>mss 1460,sackOK,TS val <span class="m">3365688110</span> ecr 0,nop,wscale 7<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.350757 IP 198.18.5.130.443 &gt; 192.168.31.228.54636: Flags <span class="o">[</span>S.<span class="o">]</span>, seq 2381759932, ack 750859358, win 28960, options <span class="o">[</span>mss 1460,sackOK,TS val <span class="m">22099541</span> ecr 3365688110,nop,wscale 5<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.350814 IP 192.168.31.228.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>.<span class="o">]</span>, ack 1, win 502, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688111</span> ecr 22099541<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.357345 IP 192.168.31.228.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 1:518, ack 1, win 502, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688118</span> ecr 22099541<span class="o">]</span>, length <span class="m">517</span>
</span></span><span class="line"><span class="cl">18:28:28.359253 IP 198.18.5.130.443 &gt; 192.168.31.228.54636: Flags <span class="o">[</span>.<span class="o">]</span>, ack 518, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099542</span> ecr 3365688118<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.726544 IP 198.18.5.130.443 &gt; 192.168.31.228.54636: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 1:2622, ack 518, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099579</span> ecr 3365688118<span class="o">]</span>, length <span class="m">2621</span>
</span></span><span class="line"><span class="cl">18:28:28.726616 IP 192.168.31.228.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>.<span class="o">]</span>, ack 2622, win 482, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688487</span> ecr 22099579<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.727652 IP 192.168.31.228.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 518:598, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">80</span>
</span></span><span class="line"><span class="cl">18:28:28.727803 IP 192.168.31.228.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 598:644, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">46</span>
</span></span><span class="line"><span class="cl">18:28:28.727828 IP 192.168.31.228.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 644:693, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">49</span>
</span></span><span class="line"><span class="cl">18:28:28.727850 IP 192.168.31.228.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 693:728, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">35</span>
</span></span><span class="line"><span class="cl">18:28:28.727875 IP 192.168.31.228.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 728:812, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">84</span>
</span></span><span class="line"><span class="cl">18:28:28.729241 IP 198.18.5.130.443 &gt; 192.168.31.228.54636: Flags <span class="o">[</span>.<span class="o">]</span>, ack 598, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099579</span> ecr 3365688488<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.729245 IP 198.18.5.130.443 &gt; 192.168.31.228.54636: Flags <span class="o">[</span>.<span class="o">]</span>, ack 644, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099579</span> ecr 3365688488<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.729247 IP 198.18.5.130.443 &gt; 192.168.31.228.54636: Flags <span class="o">[</span>.<span class="o">]</span>, ack 693, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099579</span> ecr 3365688488<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 然后再查询 docker0 上的数据，能发现本地的地址为 172.17.0.4.54636</span>
</span></span><span class="line"><span class="cl">❯ cat docker0.dump <span class="p">|</span> grep <span class="m">54636</span> <span class="p">|</span> head -n <span class="m">20</span>
</span></span><span class="line"><span class="cl">18:28:28.349299 IP 172.17.0.4.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>S<span class="o">]</span>, seq 750859357, win 64240, options <span class="o">[</span>mss 1460,sackOK,TS val <span class="m">3365688110</span> ecr 0,nop,wscale 7<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.350780 IP 198.18.5.130.443 &gt; 172.17.0.4.54636: Flags <span class="o">[</span>S.<span class="o">]</span>, seq 2381759932, ack 750859358, win 28960, options <span class="o">[</span>mss 1460,sackOK,TS val <span class="m">22099541</span> ecr 3365688110,nop,wscale 5<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.350812 IP 172.17.0.4.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>.<span class="o">]</span>, ack 1, win 502, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688111</span> ecr 22099541<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.357328 IP 172.17.0.4.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 1:518, ack 1, win 502, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688118</span> ecr 22099541<span class="o">]</span>, length <span class="m">517</span>
</span></span><span class="line"><span class="cl">18:28:28.359281 IP 198.18.5.130.443 &gt; 172.17.0.4.54636: Flags <span class="o">[</span>.<span class="o">]</span>, ack 518, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099542</span> ecr 3365688118<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.726578 IP 198.18.5.130.443 &gt; 172.17.0.4.54636: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 1:2622, ack 518, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099579</span> ecr 3365688118<span class="o">]</span>, length <span class="m">2621</span>
</span></span><span class="line"><span class="cl">18:28:28.726610 IP 172.17.0.4.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>.<span class="o">]</span>, ack 2622, win 482, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688487</span> ecr 22099579<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.727633 IP 172.17.0.4.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 518:598, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">80</span>
</span></span><span class="line"><span class="cl">18:28:28.727798 IP 172.17.0.4.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 598:644, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">46</span>
</span></span><span class="line"><span class="cl">18:28:28.727825 IP 172.17.0.4.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 644:693, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">49</span>
</span></span><span class="line"><span class="cl">18:28:28.727847 IP 172.17.0.4.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 693:728, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">35</span>
</span></span><span class="line"><span class="cl">18:28:28.727871 IP 172.17.0.4.54636 &gt; 198.18.5.130.443: Flags <span class="o">[</span>P.<span class="o">]</span>, seq 728:812, ack 2622, win 501, options <span class="o">[</span>nop,nop,TS val <span class="m">3365688488</span> ecr 22099579<span class="o">]</span>, length <span class="m">84</span>
</span></span><span class="line"><span class="cl">18:28:28.729308 IP 198.18.5.130.443 &gt; 172.17.0.4.54636: Flags <span class="o">[</span>.<span class="o">]</span>, ack 598, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099579</span> ecr 3365688488<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.729324 IP 198.18.5.130.443 &gt; 172.17.0.4.54636: Flags <span class="o">[</span>.<span class="o">]</span>, ack 644, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099579</span> ecr 3365688488<span class="o">]</span>, length <span class="m">0</span>
</span></span><span class="line"><span class="cl">18:28:28.729328 IP 198.18.5.130.443 &gt; 172.17.0.4.54636: Flags <span class="o">[</span>.<span class="o">]</span>, ack 693, win 939, options <span class="o">[</span>nop,nop,TS val <span class="m">22099579</span> ecr 3365688488<span class="o">]</span>, length <span class="m">0</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>能看到数据确实在进入 docker0 网桥前，dst_ip 确实被从 <code>192.168.31.228</code>（wlp4s0 的 ip）被修改为了 <code>172.17.0.4</code>（<code>Container A</code> 的 ip）.</p>
<h4 id="3-nat-如何分配端口" class="headerLink">
    <a href="#3-nat-%e5%a6%82%e4%bd%95%e5%88%86%e9%85%8d%e7%ab%af%e5%8f%a3" class="header-mark"></a>3. NAT 如何分配端口？</h4><p>上一节我们实际测试发现，docker 容器的流量在经过 iptables 的 MASQUERADE 规则处理后，只有 src ip 被修改了，而 port 仍然是一致的。</p>
<p>但是如果 NAT 不修改连接的端口，实际上是会有问题的。如果有两个容器同时向 <code>ip: 198.18.5.130, port: 443</code> 发起请求，又恰好使用了同一个 src port，在宿主机上就会出现端口冲突！
因为这两个请求被 SNAT 时，如果只修改 src ip，那它们映射到的将是主机上的同一个连接！</p>
<p>这个问题 NAT 是如何解决的呢？我想如果遇到这种情况，NAT 应该会通过一定的规则选用一个不同的端口。</p>
<p>有空可以翻一波源码看看这个，待续&hellip;</p>
<h3 id="4-如何持久化-iptables-配置" class="headerLink">
    <a href="#4-%e5%a6%82%e4%bd%95%e6%8c%81%e4%b9%85%e5%8c%96-iptables-%e9%85%8d%e7%bd%ae" class="header-mark"></a>4. 如何持久化 iptables 配置</h3><p>首先需要注意的是，centos7/opensuse 15 都已经切换到了 firewalld 作为防火墙配置软件，
而 ubuntu18.04 lts 也换成了 ufw 来配置防火墙。</p>
<p>包括 docker 应该也是在启动的时候动态添加 iptables 配置。</p>
<p>对于上述新系统，还是建议直接使用 firewalld/ufw 配置防火墙吧，或者网上搜下关闭 ufw/firewalld、启用 iptables 持久化的解决方案。</p>
<p>本文主要目的在于理解 docker 容器网络的原理，以及为后面理解 kubernetes 网络插件 calico/flannel 打好基础，因此就不多介绍持久化了。</p>
<h2 id="二容器网络实现原理---iptables--bridge--veth" class="headerLink">
    <a href="#%e4%ba%8c%e5%ae%b9%e5%99%a8%e7%bd%91%e7%bb%9c%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86---iptables--bridge--veth" class="header-mark"></a>二、容器网络实现原理 - iptables + bridge + veth</h2><p>Docker/Podman 默认使用的都是 bridge 网络，它们的底层实现完全类似。下面以 docker 为例进行分析（Podman 的分析流程也基本一样）。</p>
<p>首先，使用 <code>docker run</code> 运行几个容器，检查下网络状况：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 运行一个 debian 容器和一个 nginx</span>
</span></span><span class="line"><span class="cl">❯ docker run -dit --name debian --rm debian:buster sleep <span class="m">1000000</span>
</span></span><span class="line"><span class="cl">❯ docker run -dit --name nginx --rm nginx:1.19-alpine 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#　查看网络接口，有两个 veth 接口（而且都没设 ip 地址），分别连接到两个容器的 eth0（dcoker0 网络架构图前面给过了，可以往前面翻翻对照下）</span>
</span></span><span class="line"><span class="cl">❯ ip addr ls
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">5: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 02:42:42:c7:12:ba brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 fe80::42:42ff:fec7:12ba/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">100: veth16b37ea@if99: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue master docker0 state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 42:af:34:ae:74:ae brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">0</span>
</span></span><span class="line"><span class="cl">    inet6 fe80::40af:34ff:feae:74ae/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">102: veth4b4dada@if101: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue master docker0 state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 9e:f1:58:1a:cf:ae brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">1</span>
</span></span><span class="line"><span class="cl">    inet6 fe80::9cf1:58ff:fe1a:cfae/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 两个 veth 接口都连接到了 docker0 上面，说明两个容器都使用了 docker 默认的 bridge 网络</span>
</span></span><span class="line"><span class="cl">❯ sudo brctl show
</span></span><span class="line"><span class="cl">bridge name     bridge id               STP enabled     interfaces
</span></span><span class="line"><span class="cl">docker0         8000.024242c712ba       no              veth16b37ea
</span></span><span class="line"><span class="cl">                                                        veth4b4dada
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看路由规则</span>
</span></span><span class="line"><span class="cl">❯ ip route ls
</span></span><span class="line"><span class="cl">default via 192.168.31.1 dev wlp4s0 proto dhcp metric <span class="m">600</span>
</span></span><span class="line"><span class="cl"><span class="c1">#下列路由规则将 `172.17.0.0/16` 网段的所有流量转发到 docker0</span>
</span></span><span class="line"><span class="cl">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown 
</span></span><span class="line"><span class="cl">192.168.31.0/24 dev wlp4s0 proto kernel scope link src 192.168.31.228 metric <span class="m">600</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看　iptables 规则</span>
</span></span><span class="line"><span class="cl"><span class="c1"># NAT 表</span>
</span></span><span class="line"><span class="cl">❯ sudo iptables -t nat -S
</span></span><span class="line"><span class="cl">-P PREROUTING ACCEPT
</span></span><span class="line"><span class="cl">-P INPUT ACCEPT
</span></span><span class="line"><span class="cl">-P OUTPUT ACCEPT
</span></span><span class="line"><span class="cl">-P POSTROUTING ACCEPT
</span></span><span class="line"><span class="cl"><span class="c1"># 在 nat 表中新建一条自定义链 DOCKER</span>
</span></span><span class="line"><span class="cl">-N DOCKER
</span></span><span class="line"><span class="cl"><span class="c1"># 所有目的地址在本机的，都先交给 DOCKER 链处理一波</span>
</span></span><span class="line"><span class="cl">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
</span></span><span class="line"><span class="cl">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
</span></span><span class="line"><span class="cl"><span class="c1"># （容器访问外部网络）所有出口不为 docker0 的流量，都做下 SNAT，把 src ip 换成出口接口的 ip 地址</span>
</span></span><span class="line"><span class="cl">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
</span></span><span class="line"><span class="cl"><span class="c1"># DOCKER 链目前没任何内容，单纯直接返回父链进行进一步匹配</span>
</span></span><span class="line"><span class="cl">-A DOCKER -i docker0 -j RETURN
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># filter 表</span>
</span></span><span class="line"><span class="cl">❯ sudo iptables -t filter -S
</span></span><span class="line"><span class="cl">-P INPUT ACCEPT
</span></span><span class="line"><span class="cl">-P FORWARD DROP
</span></span><span class="line"><span class="cl">-P OUTPUT ACCEPT
</span></span><span class="line"><span class="cl"><span class="c1"># 在 filter 表中新建四条自定义链</span>
</span></span><span class="line"><span class="cl">-N DOCKER
</span></span><span class="line"><span class="cl">-N DOCKER-ISOLATION-STAGE-1
</span></span><span class="line"><span class="cl">-N DOCKER-ISOLATION-STAGE-2
</span></span><span class="line"><span class="cl">-N DOCKER-USER
</span></span><span class="line"><span class="cl"><span class="c1"># 所有流量都必须先经过如下两个自定义链的处理，没问题才能继续往下走</span>
</span></span><span class="line"><span class="cl">-A FORWARD -j DOCKER-ISOLATION-STAGE-1
</span></span><span class="line"><span class="cl">-A FORWARD -j DOCKER-USER
</span></span><span class="line"><span class="cl"><span class="c1"># （容器访问外部网络）出去的流量走了 MASQUERADE，回来的流量会被 conntrack 识别并转发回来，这里允许返回的数据包通过。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这里直接 ACCEPT 被 conntrack 识别到的流量</span>
</span></span><span class="line"><span class="cl">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
</span></span><span class="line"><span class="cl"><span class="c1"># 将所有访问 docker0 的流量都转给自定义链 DOCKER 处理</span>
</span></span><span class="line"><span class="cl">-A FORWARD -o docker0 -j DOCKER
</span></span><span class="line"><span class="cl"><span class="c1"># 允许所有来自 docker0 的流量通过，不论下一跳是否是 docker0</span>
</span></span><span class="line"><span class="cl">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
</span></span><span class="line"><span class="cl">-A FORWARD -i docker0 -o docker0 -j ACCEPT
</span></span><span class="line"><span class="cl"><span class="c1"># 下面三个链目前啥规则也没有，就是简单的 RETURN，直接返回父链进行进一步匹配</span>
</span></span><span class="line"><span class="cl">-A DOCKER-ISOLATION-STAGE-1 -j RETURN
</span></span><span class="line"><span class="cl">-A DOCKER-ISOLATION-STAGE-2 -j RETURN
</span></span><span class="line"><span class="cl">-A DOCKER-USER -j RETURN
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来使用如下 docker-compose 配置启动一个 caddy　容器，添加自定义 network 和端口映射，待会就能验证 docker 是如何实现这两种网络的了。</p>
<p><code>docker-compose.yml</code> 内容：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;3.3&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">caddy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;caddy:2.2.1-alpine&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;caddy&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">caddy file-server --browse --root /data/static</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;8081:80&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;/home/ryan/Downloads:/data/static&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="l">caddy-1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">caddy-1</span><span class="p">:</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>现在先用上面的配置启动 caddy 容器，然后再查看网络状况：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 启动 caddy</span>
</span></span><span class="line"><span class="cl">❯ docker-compose up -d
</span></span><span class="line"><span class="cl"><span class="c1"># 查下 caddy 容器的 ip</span>
</span></span><span class="line"><span class="cl">&gt; docker inspect caddy <span class="p">|</span> grep IPAddress
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;IPAddress&#34;</span>: <span class="s2">&#34;172.18.0.2&#34;</span>,
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看网络接口，可以看到多了一个网桥，它就是上一行命令创建的 caddy-1 网络</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 还多了一个 veth，它连接到了 caddy 容器的 eth0(veth) 接口</span>
</span></span><span class="line"><span class="cl">❯ ip addr ls
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">5: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 02:42:42:c7:12:ba brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 fe80::42:42ff:fec7:12ba/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">100: veth16b37ea@if99: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue master docker0 state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 42:af:34:ae:74:ae brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">0</span>
</span></span><span class="line"><span class="cl">    inet6 fe80::40af:34ff:feae:74ae/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">102: veth4b4dada@if101: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue master docker0 state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 9e:f1:58:1a:cf:ae brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">1</span>
</span></span><span class="line"><span class="cl">    inet6 fe80::9cf1:58ff:fe1a:cfae/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">103: br-ac3e0514d837: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 02:42:7d:95:ba:7e brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 172.18.0.1/16 brd 172.18.255.255 scope global br-ac3e0514d837
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 fe80::42:7dff:fe95:ba7e/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">105: veth0c25c6f@if104: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue master br-ac3e0514d837 state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 9a:03:e1:f0:26:ea brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">2</span>
</span></span><span class="line"><span class="cl">    inet6 fe80::9803:e1ff:fef0:26ea/64 scope link 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看网桥，能看到 caddy 容器的 veth 接口连在了 caddy-1 这个网桥上，没有加入到 docker0 网络</span>
</span></span><span class="line"><span class="cl">❯ sudo brctl show
</span></span><span class="line"><span class="cl">bridge name     bridge id               STP enabled     interfaces
</span></span><span class="line"><span class="cl">br-ac3e0514d837         8000.02427d95ba7e       no              veth0c25c6f
</span></span><span class="line"><span class="cl">docker0         8000.024242c712ba       no              veth16b37ea
</span></span><span class="line"><span class="cl">                                                        veth4b4dada
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看路由，能看到新网桥使用的地址段是 172.18.0.0/16，是 docker0 递增上来的 </span>
</span></span><span class="line"><span class="cl">❯ ip route ls
</span></span><span class="line"><span class="cl">default via 192.168.31.1 dev wlp4s0 proto dhcp metric <span class="m">600</span> 
</span></span><span class="line"><span class="cl">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 
</span></span><span class="line"><span class="cl"><span class="c1"># 多了一个网桥的</span>
</span></span><span class="line"><span class="cl">172.18.0.0/16 dev br-ac3e0514d837 proto kernel scope link src 172.18.0.1 
</span></span><span class="line"><span class="cl">192.168.31.0/24 dev wlp4s0 proto kernel scope link src 192.168.31.228 metric <span class="m">600</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># iptables 中也多了 caddy-1 网桥的 MASQUERADE 规则，以及端口映射的规则</span>
</span></span><span class="line"><span class="cl">❯ sudo iptables -t nat -S
</span></span><span class="line"><span class="cl">-P PREROUTING ACCEPT
</span></span><span class="line"><span class="cl">-P INPUT ACCEPT
</span></span><span class="line"><span class="cl">-P OUTPUT ACCEPT
</span></span><span class="line"><span class="cl">-P POSTROUTING ACCEPT
</span></span><span class="line"><span class="cl">-N DOCKER
</span></span><span class="line"><span class="cl">-A PREROUTING -m addrtype --dst-type LOCAL -j DOCKER
</span></span><span class="line"><span class="cl">-A OUTPUT ! -d 127.0.0.0/8 -m addrtype --dst-type LOCAL -j DOCKER
</span></span><span class="line"><span class="cl">-A POSTROUTING -s 172.18.0.0/16 ! -o br-ac3e0514d837 -j MASQUERADE
</span></span><span class="line"><span class="cl">-A POSTROUTING -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
</span></span><span class="line"><span class="cl"><span class="c1"># 端口映射过来的入网流量，都做下 SNAT，把 src ip 换成出口 docker0 的 ip 地址</span>
</span></span><span class="line"><span class="cl">-A POSTROUTING -s 172.18.0.2/32 -d 172.18.0.2/32 -p tcp -m tcp --dport <span class="m">80</span> -j MASQUERADE
</span></span><span class="line"><span class="cl">-A DOCKER -i br-ac3e0514d837 -j RETURN
</span></span><span class="line"><span class="cl">-A DOCKER -i docker0 -j RETURN
</span></span><span class="line"><span class="cl"><span class="c1"># 主机上所有其他接口进来的 tcp 流量，只要目标端口是 8081，就转发到 caddy 容器去（端口映射）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># DOCKER 是被 PREROUTEING 链的 target，因此这会导致流量直接走了 FORWARD 链，直接绕过了通常设置在 INPUT 链的主机防火墙规则！</span>
</span></span><span class="line"><span class="cl">-A DOCKER ! -i br-ac3e0514d837 -p tcp -m tcp --dport <span class="m">8081</span> -j DNAT --to-destination 172.18.0.2:80
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ sudo iptables -t filter -S
</span></span><span class="line"><span class="cl">-P INPUT ACCEPT
</span></span><span class="line"><span class="cl">-P FORWARD DROP
</span></span><span class="line"><span class="cl">-P OUTPUT ACCEPT
</span></span><span class="line"><span class="cl">-N DOCKER
</span></span><span class="line"><span class="cl">-N DOCKER-ISOLATION-STAGE-1
</span></span><span class="line"><span class="cl">-N DOCKER-ISOLATION-STAGE-2
</span></span><span class="line"><span class="cl">-N DOCKER-USER
</span></span><span class="line"><span class="cl">-A FORWARD -j DOCKER-USER
</span></span><span class="line"><span class="cl">-A FORWARD -j DOCKER-ISOLATION-STAGE-1
</span></span><span class="line"><span class="cl"><span class="c1"># 给 caddy-1 bridge 网络添加的转发规则，与 docker0 的规则完全一一对应，就不多介绍了。</span>
</span></span><span class="line"><span class="cl">-A FORWARD -o br-ac3e0514d837 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
</span></span><span class="line"><span class="cl">-A FORWARD -o br-ac3e0514d837 -j DOCKER
</span></span><span class="line"><span class="cl">-A FORWARD -i br-ac3e0514d837 ! -o br-ac3e0514d837 -j ACCEPT
</span></span><span class="line"><span class="cl">-A FORWARD -i br-ac3e0514d837 -o br-ac3e0514d837 -j ACCEPT
</span></span><span class="line"><span class="cl">-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
</span></span><span class="line"><span class="cl">-A FORWARD -o docker0 -j DOCKER
</span></span><span class="line"><span class="cl">-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
</span></span><span class="line"><span class="cl">-A FORWARD -i docker0 -o docker0 -j ACCEPT
</span></span><span class="line"><span class="cl"><span class="c1"># 这一条仍然是端口映射相关的规则，接受所有从其他接口过来的，请求 80 端口且出口是 caddy-1 网桥的流量</span>
</span></span><span class="line"><span class="cl">-A DOCKER -d 172.18.0.2/32 ! -i br-ac3e0514d837 -o br-ac3e0514d837 -p tcp -m tcp --dport <span class="m">80</span> -j ACCEPT
</span></span><span class="line"><span class="cl"><span class="c1"># 当存在多个 bridge 网络的时候，docker 就会在下面两个 STAGE 链中处理将它们隔离开，禁止互相访问</span>
</span></span><span class="line"><span class="cl">-A DOCKER-ISOLATION-STAGE-1 -i br-ac3e0514d837 ! -o br-ac3e0514d837 -j DOCKER-ISOLATION-STAGE-2
</span></span><span class="line"><span class="cl">-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2
</span></span><span class="line"><span class="cl">-A DOCKER-ISOLATION-STAGE-1 -j RETURN
</span></span><span class="line"><span class="cl"><span class="c1"># 这里延续上面 STAGE-1 的处理，彻底隔离两个网桥的流量</span>
</span></span><span class="line"><span class="cl">-A DOCKER-ISOLATION-STAGE-2 -o br-ac3e0514d837 -j DROP
</span></span><span class="line"><span class="cl">-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP
</span></span><span class="line"><span class="cl">-A DOCKER-ISOLATION-STAGE-2 -j RETURN
</span></span><span class="line"><span class="cl">-A DOCKER-USER -j RETURN
</span></span></code></pre></td></tr></table>
</div>
</div><p>到这里，我们简单地分析了下 docker 如何通过 iptables 实现 bridge 网络和端口映射。
有了这个基础，后面就可以尝试深入分析 kubernetes 网络插件 flannel/calico/cilium 了哈哈。</p>
<h2 id="三dockerpodman-的-macvlanipvlan-模式" class="headerLink">
    <a href="#%e4%b8%89dockerpodman-%e7%9a%84-macvlanipvlan-%e6%a8%a1%e5%bc%8f" class="header-mark"></a>三、Docker/Podman 的 macvlan/ipvlan 模式</h2><blockquote>
<p>注意：macvlan 和 wifi 好像不兼容，测试时不要使用无线网络的接口！</p>
</blockquote>
<p>我在前面介绍 Linux 虚拟网络接口的文章中，有介绍过 macvlan 和 ipvlan 两种新的虚拟接口。</p>
<p>目前 Podman/Docker 都支持使用 macvlan 来构建容器网络，这种模式下创建的容器直连外部网络，容器可以拥有独立的外部 IP，不需要端口映射，也不需要借助 iptables.</p>
<p>这和虚拟机的 Bridge 模式就很类似，主要适用于希望容器拥有独立外部 IP 的情况。</p>
<p>下面详细分析下 Docker 的 macvlan 网络（Podman 应该也完全类似）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 首先创建一个 macvlan 网络</span>
</span></span><span class="line"><span class="cl"><span class="c1"># subnet/gateway 的参数需要和物理网络一致</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 通过 -o parent 设定父接口，我本机的以太网口名称为 eno1</span>
</span></span><span class="line"><span class="cl">$ docker network create -d macvlan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --subnet<span class="o">=</span>192.168.31.0/24 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --gateway<span class="o">=</span>192.168.31.1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -o <span class="nv">parent</span><span class="o">=</span>eno1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  macnet0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 现在使用 macvlan 启动一个容器试试</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 建议和我一样，通过 --ip 手动配置静态 ip 地址，当然不配也可以，DHCP 会自动分配 IP</span>
</span></span><span class="line"><span class="cl">$ docker run --network macnet0 --ip<span class="o">=</span>192.168.31.233 --rm -it buildpack-deps:buster-curl /bin/bash
</span></span><span class="line"><span class="cl"><span class="c1"># 在容器中查看网络接口状况，能看到 eth0 是一个 macvlan 接口</span>
</span></span><span class="line"><span class="cl">root@4319488cb5e7:/# ip -d addr ls
</span></span><span class="line"><span class="cl">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 promiscuity <span class="m">0</span> minmtu <span class="m">0</span> maxmtu <span class="m">0</span> numtxqueues <span class="m">1</span> numrxqueues <span class="m">1</span> gso_max_size <span class="m">65536</span> gso_max_segs <span class="m">65535</span> 
</span></span><span class="line"><span class="cl">    inet 127.0.0.1/8 scope host lo
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">8: eth0@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 02:42:c0:a8:1f:e9 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">0</span> promiscuity <span class="m">0</span> minmtu <span class="m">68</span> maxmtu <span class="m">9194</span> 
</span></span><span class="line"><span class="cl">    macvlan mode bridge numtxqueues <span class="m">1</span> numrxqueues <span class="m">1</span> gso_max_size <span class="m">64000</span> gso_max_segs <span class="m">64</span> 
</span></span><span class="line"><span class="cl">    inet 192.168.31.233/24 brd 192.168.31.255 scope global eth0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl"><span class="c1"># 路由表，默认 gateway 被自动配置进来了</span>
</span></span><span class="line"><span class="cl">root@4319488cb5e7:/# ip route ls
</span></span><span class="line"><span class="cl">default via 192.168.31.1 dev eth0 
</span></span><span class="line"><span class="cl">192.168.31.0/24 dev eth0 proto kernel scope link src 192.168.31.233 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以正常访问 baidu</span>
</span></span><span class="line"><span class="cl">root@4319488cb5e7:/# curl baidu.com
</span></span><span class="line"><span class="cl">&lt;html&gt;
</span></span><span class="line"><span class="cl">&lt;meta http-equiv<span class="o">=</span><span class="s2">&#34;refresh&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;0;url=http://www.baidu.com/&#34;</span>&gt;
</span></span><span class="line"><span class="cl">&lt;/html&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>Docker 支持的另一种网络模式是 ipvlan（ipvlan 和 macvlan 的区别我在前一篇文章中已经介绍过，不再赘言），创建命令和 macvlan 几乎一样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 首先创建一个 macvlan 网络</span>
</span></span><span class="line"><span class="cl"><span class="c1"># subnet/gateway 的参数需要和物理网络一致</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 通过 -o parent 设定父接口，我本机的以太网口名称为 eno1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># ipvlan_mode 默认为 l2，表示工作在数据链路层。</span>
</span></span><span class="line"><span class="cl">$ docker network create -d ipvlan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --subnet<span class="o">=</span>192.168.31.0/24 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --gateway<span class="o">=</span>192.168.31.1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -o <span class="nv">parent</span><span class="o">=</span>eno1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  -o <span class="nv">ipvlan_mode</span><span class="o">=</span>l2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  ipvnet0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 现在使用 macvlan 启动一个容器试试</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 建议和我一样，通过 --ip 手动配置静态 ip 地址，当然不配也可以，DHCP 会自动分配 IP</span>
</span></span><span class="line"><span class="cl">$ docker run --network ipvnet0 --ip<span class="o">=</span>192.168.31.234 --rm -it buildpack-deps:buster-curl /bin/bash
</span></span><span class="line"><span class="cl"><span class="c1"># 在容器中查看网络接口状况，能看到 eth0 是一个 ipvlan 接口</span>
</span></span><span class="line"><span class="cl">root@d0764ebbbf42:/# ip -d addr ls
</span></span><span class="line"><span class="cl">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 promiscuity <span class="m">0</span> minmtu <span class="m">0</span> maxmtu <span class="m">0</span> numtxqueues <span class="m">1</span> numrxqueues <span class="m">1</span> gso_max_size <span class="m">65536</span> gso_max_segs <span class="m">65535</span> 
</span></span><span class="line"><span class="cl">    inet 127.0.0.1/8 scope host lo
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">12: eth0@if2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue state UNKNOWN group default 
</span></span><span class="line"><span class="cl">    link/ether 38:f3:ab:a3:e6:71 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">0</span> promiscuity <span class="m">0</span> minmtu <span class="m">68</span> maxmtu <span class="m">65535</span> 
</span></span><span class="line"><span class="cl">    ipvlan  mode l2 bridge numtxqueues <span class="m">1</span> numrxqueues <span class="m">1</span> gso_max_size <span class="m">64000</span> gso_max_segs <span class="m">64</span> 
</span></span><span class="line"><span class="cl">    inet 192.168.31.234/24 brd 192.168.31.255 scope global eth0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl"><span class="c1"># 路由表，默认 gateway 被自动配置进来了</span>
</span></span><span class="line"><span class="cl">root@d0764ebbbf42:/# ip route ls
</span></span><span class="line"><span class="cl">default via 192.168.31.1 dev eth0 
</span></span><span class="line"><span class="cl">192.168.31.0/24 dev eth0 proto kernel scope link src 192.168.31.234 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可以正常访问 baidu</span>
</span></span><span class="line"><span class="cl">root@d0764ebbbf42:/# curl baidu.com
</span></span><span class="line"><span class="cl">&lt;html&gt;
</span></span><span class="line"><span class="cl">&lt;meta http-equiv<span class="o">=</span><span class="s2">&#34;refresh&#34;</span> <span class="nv">content</span><span class="o">=</span><span class="s2">&#34;0;url=http://www.baidu.com/&#34;</span>&gt;
</span></span><span class="line"><span class="cl">&lt;/html&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四rootless-容器的网络实现" class="headerLink">
    <a href="#%e5%9b%9brootless-%e5%ae%b9%e5%99%a8%e7%9a%84%e7%bd%91%e7%bb%9c%e5%ae%9e%e7%8e%b0" class="header-mark"></a>四、Rootless 容器的网络实现</h2><p>如果容器运行时也在 Rootless 模式下运行，那它就没有权限在宿主机添加 bridge/veth 等虚拟网络接口，这种情况下，我们前面描述的容器网络就无法设置了。</p>
<p>那么 podman/containerd(nerdctl) 目前是如何在 Rootless 模式下构建容器网络的呢？</p>
<p>查看文档，发现它们都用到了 rootlesskit 相关的东西，而 rootlesskit 提供了 rootless 网络的几个实现，文档参见 <a href="https://github.com/rootless-containers/rootlesskit/blob/master/docs/network.md" target="_blank" rel="noopener noreffer">rootlesskit/docs/network.md</a></p>
<p>其中目前推荐使用，而且 podman/containerd(nerdctl) 都默认使用的方案，是 <a href="https://github.com/rootless-containers/slirp4netns" target="_blank" rel="noopener noreffer">rootless-containers/slirp4netns</a></p>
<p>以 containerd(nerdctl) 为例，按官方文档安装好后，随便启动几个容器，然后在宿主机查 <code>iptables</code>/<code>ip addr ls</code>，会发现啥也没有。
这显然是因为 rootless 模式下 containerd 改不了宿主机的 iptables 配置和虚拟网络接口。但是可以查看到宿主机 slirp4netns 在后台运行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ ps aux <span class="p">|</span> grep tap
</span></span><span class="line"><span class="cl">ryan     <span class="m">11644</span>  0.0  0.0   <span class="m">5288</span>  <span class="m">3312</span> ?        S    00:01   0:02 slirp4netns --mtu <span class="m">65520</span> -r <span class="m">3</span> --disable-host-loopback --enable-sandbox --enable-seccomp <span class="m">11625</span> tap0
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是我看半天文档，只看到怎么使用 <code>rootlesskit</code>/<code>slirp4netns</code> 创建新的名字空间，没看到有介绍如何进入一个已存在的 <code>slirp4netns</code> 名字空间&hellip;</p>
<p>使用 <code>nsenter -a -t 11644</code> 也一直报错，任何程序都是 <code>no such binary</code>&hellip;</p>
<p>以后有空再重新研究一波&hellip;</p>
<p>总之能确定的是，它通过在虚拟的名字空间中创建了一个 <code>tap</code> 虚拟接口来实现容器网络，性能相比前面介绍的网络多少是要差一点的。</p>
<h2 id="五nftables" class="headerLink">
    <a href="#%e4%ba%94nftables" class="header-mark"></a>五、nftables</h2><p>前面介绍了 iptables 以及其在 docker 和防火墙上的应用。但是实际上目前各大 Linux 发行版都已经不建议使用 iptables 了，甚至把 iptables 重命名为了 <code>iptables-leagacy</code>.</p>
<p>目前 opensuse/debian/opensuse 都已经预装了并且推荐使用 nftables，<strong>而且 firewalld 已经默认使用 nftables 作为它的后端了</strong>。</p>
<p>我在 opensuse tumbleweed 上实测，firewalld 添加的是 nftables 配置，而 docker 仍然在用旧的 iptables，也就是说我现在的机器上有两套 netfilter 工具并存：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 查看 iptables 数据
</span></span><span class="line"><span class="cl">&gt; iptables -S
</span></span><span class="line"><span class="cl">-P INPUT ACCEPT
</span></span><span class="line"><span class="cl">-P FORWARD DROP
</span></span><span class="line"><span class="cl">-P OUTPUT ACCEPT
</span></span><span class="line"><span class="cl">-N DOCKER
</span></span><span class="line"><span class="cl">-N DOCKER-ISOLATION-STAGE-1
</span></span><span class="line"><span class="cl">-N DOCKER-ISOLATION-STAGE-2
</span></span><span class="line"><span class="cl">-N DOCKER-USER
</span></span><span class="line"><span class="cl">-A FORWARD -j DOCKER-ISOLATION-STAGE-1
</span></span><span class="line"><span class="cl">-A FORWARD -o br-e3fbbb7a1b3a -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
</span></span><span class="line"><span class="cl">-A FORWARD -o br-e3fbbb7a1b3a -j DOCKER
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 确认下是否使用了 nftables 的兼容层，结果提示请我使用 iptables-legacy
</span></span><span class="line"><span class="cl">&gt; iptables-nft -S
</span></span><span class="line"><span class="cl"># Warning: iptables-legacy tables present, use iptables-legacy to see them
</span></span><span class="line"><span class="cl">-P INPUT ACCEPT
</span></span><span class="line"><span class="cl">-P FORWARD ACCEPT
</span></span><span class="line"><span class="cl">-P OUTPUT ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 查看 nftables 规则，能看到三张 firewalld 生成的 table
</span></span><span class="line"><span class="cl">&gt; nft list ruleset
</span></span><span class="line"><span class="cl">table inet firewalld {
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">table ip firewalld {
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">table ip6 firewalld {
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是现在 kubernetes/docker 都还是用的 iptables，nftables 我学了用处不大，以后有空再补充。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://www.zsythink.net/archives/1199" target="_blank" rel="noopener noreffer">iptables详解（1）：iptables概念</a></li>
<li><a href="https://arthurchiao.art/blog/conntrack-design-and-implementation-zh/" target="_blank" rel="noopener noreffer">连接跟踪（conntrack）：原理、应用及 Linux 内核实现</a></li>
<li><a href="https://linux.cn/article-13364-1.html" target="_blank" rel="noopener noreffer">网络地址转换（NAT）之报文跟踪</a></li>
<li><a href="https://developer.aliyun.com/article/700923" target="_blank" rel="noopener noreffer">容器安全拾遗 - Rootless Container初探</a></li>
<li><a href="https://en.wikipedia.org/wiki/Netfilter" target="_blank" rel="noopener noreffer">netfilter - wikipedia</a></li>
</ul>
]]></content></entry><entry><title type="html">Linux 中的虚拟网络接口</title><link href="https://thiscute.world/posts/linux-virtual-network-interfaces/"/><id>https://thiscute.world/posts/linux-virtual-network-interfaces/</id><author><name>ryan4yin</name></author><published>2021-08-14T11:13:03+08:00</published><updated>2021-08-14T11:13:03+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文用到的字符画工具：<a href="https://github.com/zenghongtu/vscode-asciiflow2" target="_blank" rel="noopener noreffer">vscode-asciiflow2</a></p>
</blockquote>
<blockquote>
<p>注意: 本文中使用 <code>ip</code> 命令创建或修改的任何网络配置，都是未持久化的，主机重启即消失。</p>
</blockquote>
<p>Linux 具有强大的虚拟网络能力，这也是 openstack 网络、docker 容器网络以及 kubernetes 网络等虚拟网络的基础。</p>
<p>这里介绍 Linux 常用的虚拟网络接口类型：TUN/TAP、bridge、veth、ipvlan/macvlan、vlan 以及 vxlan/geneve.</p>
<h2 id="一tuntap-虚拟网络接口" class="headerLink">
    <a href="#%e4%b8%80tuntap-%e8%99%9a%e6%8b%9f%e7%bd%91%e7%bb%9c%e6%8e%a5%e5%8f%a3" class="header-mark"></a>一、tun/tap 虚拟网络接口</h2><p>tun/tap 是操作系统内核中的虚拟网络设备，他们为用户层程序提供数据的接收与传输。</p>
<p>普通的物理网络接口如 eth0，它的两端分别是内核协议栈和外面的物理网络。</p>
<p>而对于 TUN/TAP 虚拟接口如 tun0，它的一端一定是连接的用户层程序，另一端则视配置方式的不同而变化，可以直连内核协议栈，也可以是某个 bridge（后面会介绍）。
Linux 通过内核模块 TUN 提供 tun/tap 功能，该模块提供了一个设备接口 <code>/dev/net/tun</code> 供用户层程序读写，用户层程序通过 <code>/dev/net/tun</code> 读写主机内核协议栈的数据。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">&gt; modinfo tun
</span></span><span class="line"><span class="cl">filename:       /lib/modules/5.13.6-1-default/kernel/drivers/net/tun.ko.xz
</span></span><span class="line"><span class="cl">alias:          devname:net/tun
</span></span><span class="line"><span class="cl">alias:          char-major-10-200
</span></span><span class="line"><span class="cl">license:        GPL
</span></span><span class="line"><span class="cl">author:         (C) 1999-2004 Max Krasnyansky &lt;maxk@qualcomm.com&gt;
</span></span><span class="line"><span class="cl">description:    Universal TUN/TAP device driver
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">&gt; ls /dev/net/tun
</span></span><span class="line"><span class="cl">/dev/net/tun
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个 TUN 设备的示例图如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">             
</span></span><span class="line"><span class="cl">+----------------------------------------------------------------------+
</span></span><span class="line"><span class="cl">|                                                                      |
</span></span><span class="line"><span class="cl">|  +--------------------+      +--------------------+                  |
</span></span><span class="line"><span class="cl">|  | User Application A |      | User Application B +&lt;-----+           |
</span></span><span class="line"><span class="cl">|  +------------+-------+      +-------+------------+      |           |
</span></span><span class="line"><span class="cl">|               | 1                    | 5                 |           |
</span></span><span class="line"><span class="cl">|...............+......................+...................|...........|
</span></span><span class="line"><span class="cl">|               ↓                      ↓                   |           |
</span></span><span class="line"><span class="cl">|         +----------+           +----------+              |           |
</span></span><span class="line"><span class="cl">|         | socket A |           | socket B |              |           |
</span></span><span class="line"><span class="cl">|         +-------+--+           +--+-------+              |           |
</span></span><span class="line"><span class="cl">|                 | 2               | 6                    |           |
</span></span><span class="line"><span class="cl">|.................+.................+......................|...........|
</span></span><span class="line"><span class="cl">|                 ↓                 ↓                      |           |
</span></span><span class="line"><span class="cl">|             +------------------------+          +--------+-------+   |
</span></span><span class="line"><span class="cl">|             | Network Protocol Stack |          |  /dev/net/tun  |   |
</span></span><span class="line"><span class="cl">|             +--+-------------------+-+          +--------+-------+   |
</span></span><span class="line"><span class="cl">|                | 7                 | 3                   ^           |
</span></span><span class="line"><span class="cl">|................+...................+.....................|...........|
</span></span><span class="line"><span class="cl">|                ↓                   ↓                     |           |
</span></span><span class="line"><span class="cl">|        +----------------+    +----------------+        4 |           |
</span></span><span class="line"><span class="cl">|        |      eth0      |    |      tun0      |          |           |
</span></span><span class="line"><span class="cl">|        +-------+--------+    +-----+----------+          |           |
</span></span><span class="line"><span class="cl">|    10.32.0.11  |                   |   192.168.3.11      |           |
</span></span><span class="line"><span class="cl">|                | 8                 +---------------------+           |
</span></span><span class="line"><span class="cl">|                |                                                     |
</span></span><span class="line"><span class="cl">+----------------+-----------------------------------------------------+
</span></span><span class="line"><span class="cl">                 ↓
</span></span><span class="line"><span class="cl">         Physical Network
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为 TUN/TAP 设备的一端是内核协议栈，显然流入 tun0 的数据包是先经过本地的路由规则匹配的。</p>
<p>路由匹配成功，数据包被发送到 tun0 后，tun0 发现另一端是通过 <code>/dev/net/tun</code> 连接到应用程序 B，就会将数据丢给应用程序 B。</p>
<p>应用程序对数据包进行处理后，可能会构造新的数据包，通过物理网卡发送出去。比如常见的 VPN 程序就是把原来的数据包封装/加密一遍，再发送给 VPN 服务器。</p>
<h3 id="c-语言编程测试-tun-设备" class="headerLink">
    <a href="#c-%e8%af%ad%e8%a8%80%e7%bc%96%e7%a8%8b%e6%b5%8b%e8%af%95-tun-%e8%ae%be%e5%a4%87" class="header-mark"></a>C 语言编程测试 TUN 设备</h3><p>为了使用 tun/tap 设备，用户层程序需要通过系统调用打开 <code>/dev/net/tun</code> 获得一个读写该设备的文件描述符(FD)，并且调用 <code>ioctl()</code> 向内核注册一个 TUN 或 TAP 类型的虚拟网卡(实例化一个 tun/tap 设备)，其名称可能是 <code>tun0/tap0</code> 等。</p>
<p>此后，用户程序可以通过该 TUN/TAP 虚拟网卡与主机内核协议栈（或者其他网络设备）交互。当用户层程序关闭后，其注册的 TUN/TAP 虚拟网卡以及自动生成的路由表相关条目都会被内核释放。</p>
<p>可以把用户层程序看做是网络上另一台主机，他们通过 tun/tap 虚拟网卡相连。</p>
<p>一个简单的 C 程序示例如下，它每次收到数据后，都只单纯地打印一下收到的字节数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;linux/if.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;linux/if_tun.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;sys/ioctl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;string.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp">#include</span><span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">tun_alloc</span><span class="p">(</span><span class="kt">int</span> <span class="n">flags</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">struct</span> <span class="n">ifreq</span> <span class="n">ifr</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">err</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="o">*</span><span class="n">clonedev</span> <span class="o">=</span> <span class="s">&#34;/dev/net/tun&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 打开 tun 文件，获得 fd
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">clonedev</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ifr</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ifr</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">    <span class="n">ifr</span><span class="p">.</span><span class="n">ifr_flags</span> <span class="o">=</span> <span class="n">flags</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 向内核注册一个 TUN 网卡，并与前面拿到的 fd 关联起来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="c1">// 程序关闭时，注册的 tun 网卡及自动生成的相关路由策略，会被自动释放
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="p">((</span><span class="n">err</span> <span class="o">=</span> <span class="n">ioctl</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">TUNSETIFF</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">ifr</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">err</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Open tun/tap device: %s for reading...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">ifr</span><span class="p">.</span><span class="n">ifr_name</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">fd</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="n">tun_fd</span><span class="p">,</span> <span class="n">nread</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">buffer</span><span class="p">[</span><span class="mi">1500</span><span class="p">];</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="cm">/* Flags: IFF_TUN   - TUN device (no Ethernet headers)
</span></span></span><span class="line"><span class="cl"><span class="cm">     *        IFF_TAP   - TAP device
</span></span></span><span class="line"><span class="cl"><span class="cm">     *        IFF_NO_PI - Do not provide packet information
</span></span></span><span class="line"><span class="cl"><span class="cm">     */</span>
</span></span><span class="line"><span class="cl">    <span class="n">tun_fd</span> <span class="o">=</span> <span class="n">tun_alloc</span><span class="p">(</span><span class="n">IFF_TUN</span> <span class="o">|</span> <span class="n">IFF_NO_PI</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="n">tun_fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">perror</span><span class="p">(</span><span class="s">&#34;Allocating interface&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">nread</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">tun_fd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">nread</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">perror</span><span class="p">(</span><span class="s">&#34;Reading from interface&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">close</span><span class="p">(</span><span class="n">tun_fd</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">            <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Read %d bytes from tun/tap device</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">nread</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来开启三个终端窗口来测试上述程序，分别运行上面的 tun 程序、tcpdump 和 iproute2 指令。</p>
<p>首先通过编译运行上述 c 程序，程序会阻塞住，等待数据到达：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 编译，请忽略部分 warning
</span></span><span class="line"><span class="cl">&gt; gcc mytun.c -o mytun
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 创建并监听 tun 设备需要 root 权限
</span></span><span class="line"><span class="cl">&gt; sudo mytun 
</span></span><span class="line"><span class="cl">Open tun/tap device: tun0 for reading...
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在使用 iproute2 查看下链路层设备：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 能发现最后面有列出名为 tun0 的接口，但是状态为 down
</span></span><span class="line"><span class="cl">❯ ip addr ls
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">3: wlp4s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default qlen 1000
</span></span><span class="line"><span class="cl">    link/ether c0:3c:59:36:a4:16 brd ff:ff:ff:ff:ff:ff
</span></span><span class="line"><span class="cl">    inet 192.168.31.228/24 brd 192.168.31.255 scope global dynamic noprefixroute wlp4s0
</span></span><span class="line"><span class="cl">       valid_lft 41010sec preferred_lft 41010sec
</span></span><span class="line"><span class="cl">    inet6 fe80::4ab0:130f:423b:5d37/64 scope link noprefixroute 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">7: tun0: &lt;POINTOPOINT,MULTICAST,NOARP&gt; mtu 1500 qdisc noop state DOWN group default qlen 500
</span></span><span class="line"><span class="cl">    link/none 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 为 tun0 设置 ip 地址，注意不要和其他接口在同一网段，会导致路由冲突
</span></span><span class="line"><span class="cl">&gt; sudo ip addr add 172.21.22.23/24 dev tun0
</span></span><span class="line"><span class="cl"># 启动 tun0 这个接口，这一步会自动向路由表中添加将 172.21.22.23/24 路由到 tun0 的策略
</span></span><span class="line"><span class="cl">&gt; sudo ip link set tun0 up
</span></span><span class="line"><span class="cl">#确认上一步添加的路由策略是否存在
</span></span><span class="line"><span class="cl">❯ ip route ls
</span></span><span class="line"><span class="cl">default via 192.168.31.1 dev wlp4s0 proto dhcp metric 600 
</span></span><span class="line"><span class="cl">172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1 linkdown 
</span></span><span class="line"><span class="cl">172.21.22.0/24 dev tun0 proto kernel scope link src 172.21.22.23 
</span></span><span class="line"><span class="cl">192.168.31.0/24 dev wlp4s0 proto kernel scope link src 192.168.31.228 metric 600 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 此时再查看接口，发现 tun0 状态为 unknown
</span></span><span class="line"><span class="cl">&gt; ip addr ls
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">8: tun0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UNKNOWN group default qlen 500
</span></span><span class="line"><span class="cl">    link/none 
</span></span><span class="line"><span class="cl">    inet 172.21.22.23/24 scope global tun0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">    inet6 fe80::3d52:49b5:1cf3:38fd/64 scope link stable-privacy 
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 使用 tcpdump 尝试抓下 tun0 的数据，会阻塞在这里，等待数据到达
</span></span><span class="line"><span class="cl">&gt; tcpdump -i tun0
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在再启动第三个窗口发点数据给 tun0，持续观察前面 <code>tcpdump</code> 和 <code>mytun</code> 的日志:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 直接 ping tun0 的地址，貌似有问题，数据没进 mytun 程序，而且还有响应
</span></span><span class="line"><span class="cl">❯ ping -c 4 172.21.22.23
</span></span><span class="line"><span class="cl">PING 172.21.22.23 (172.21.22.23) 56(84) bytes of data.
</span></span><span class="line"><span class="cl">64 bytes from 172.21.22.23: icmp_seq=1 ttl=64 time=0.167 ms
</span></span><span class="line"><span class="cl">64 bytes from 172.21.22.23: icmp_seq=2 ttl=64 time=0.180 ms
</span></span><span class="line"><span class="cl">64 bytes from 172.21.22.23: icmp_seq=3 ttl=64 time=0.126 ms
</span></span><span class="line"><span class="cl">64 bytes from 172.21.22.23: icmp_seq=4 ttl=64 time=0.141 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- 172.21.22.23 ping statistics ---
</span></span><span class="line"><span class="cl">4 packets transmitted, 4 received, 0% packet loss, time 3060ms
</span></span><span class="line"><span class="cl">rtt min/avg/max/mdev = 0.126/0.153/0.180/0.021 ms
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 但是 ping 该网段下的其他地址，流量就会被转发给 mytun 程序，因为 mytun 啥数据也没回，自然丢包率 100%
</span></span><span class="line"><span class="cl"># tcpdump 和 mytun 都会打印出相关日志
</span></span><span class="line"><span class="cl">❯ ping -c 4 172.21.22.26
</span></span><span class="line"><span class="cl">PING 172.21.22.26 (172.21.22.26) 56(84) bytes of data.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">--- 172.21.22.26 ping statistics ---
</span></span><span class="line"><span class="cl">4 packets transmitted, 0 received, 100% packet loss, time 3055ms
</span></span></code></pre></td></tr></table>
</div>
</div><p>下面给出 mytun 的输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Read 84 bytes from tun/tap device
</span></span><span class="line"><span class="cl">Read 84 bytes from tun/tap device
</span></span><span class="line"><span class="cl">Read 84 bytes from tun/tap device
</span></span><span class="line"><span class="cl">Read 84 bytes from tun/tap device
</span></span></code></pre></td></tr></table>
</div>
</div><p>以及 tcpdump 的输出：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">00:22:03.622684 IP (tos 0x0, ttl 64, id 37341, offset 0, flags [DF], proto ICMP (1), length 84)
</span></span><span class="line"><span class="cl">    172.21.22.23 &gt; 172.21.22.26: ICMP echo request, id 11, seq 1, length 64
</span></span><span class="line"><span class="cl">00:22:04.633394 IP (tos 0x0, ttl 64, id 37522, offset 0, flags [DF], proto ICMP (1), length 84)
</span></span><span class="line"><span class="cl">    172.21.22.23 &gt; 172.21.22.26: ICMP echo request, id 11, seq 2, length 64
</span></span><span class="line"><span class="cl">00:22:05.653356 IP (tos 0x0, ttl 64, id 37637, offset 0, flags [DF], proto ICMP (1), length 84)
</span></span><span class="line"><span class="cl">    172.21.22.23 &gt; 172.21.22.26: ICMP echo request, id 11, seq 3, length 64
</span></span><span class="line"><span class="cl">00:22:06.677341 IP (tos 0x0, ttl 64, id 37667, offset 0, flags [DF], proto ICMP (1), length 84)
</span></span><span class="line"><span class="cl">    172.21.22.23 &gt; 172.21.22.26: ICMP echo request, id 11, seq 4, length 64
</span></span></code></pre></td></tr></table>
</div>
</div><p>更复杂的 tun 程序，可以参考</p>
<ul>
<li><a href="https://github.com/gregnietsky/simpletun" target="_blank" rel="noopener noreffer">simpletun</a></li>
<li><a href="https://github.com/marywangran/simpletun" target="_blank" rel="noopener noreffer">marywangran/simpletun</a></li>
<li><a href="https://github.com/marywangran/gotun-tunnel/blob/main/tun/tun.go" target="_blank" rel="noopener noreffer">tun go 语言版</a></li>
</ul>
<h3 id="tun-与-tap-的区别" class="headerLink">
    <a href="#tun-%e4%b8%8e-tap-%e7%9a%84%e5%8c%ba%e5%88%ab" class="header-mark"></a>TUN 与 TAP 的区别</h3><p>TUN 和 TAP 的区别在于工作的网络层次不同，用户程序通过 TUN 设备只能读写网络层的 IP 数据包，而 TAP 设备则支持读写链路层的数据包（通常是以太网数据包，带有 Ethernet headers）。</p>
<p>TUN 与 TAP 的关系，就类似于 socket 和 raw socket.</p>
<p>TUN/TAP 应用最多的场景是 VPN 代理，比如:</p>
<ol>
<li><a href="https://github.com/ryan4yin/clash" target="_blank" rel="noopener noreffer">clash</a>: 一个支持各种规则的隧道，也支持 TUN 模式</li>
<li><a href="https://github.com/xjasonlyu/tun2socks/wiki" target="_blank" rel="noopener noreffer">tun2socks</a>: 一个全局透明代理，和 VPN 的工作模式一样，它通过创建虚拟网卡+修改路由表，在第三层网络层代理系统流量。</li>
</ol>
<h2 id="二veth" class="headerLink">
    <a href="#%e4%ba%8cveth" class="header-mark"></a>二、veth</h2><p>veth 接口总是成对出现，一对 veth 接口就类似一根网线，从一端进来的数据会从另一端出去。</p>
<p>同时 veth 又是一个虚拟网络接口，因此它和 TUN/TAP 或者其他物理网络接口一样，也都能配置 mac/ip 地址（但是并不是一定得配 mac/ip 地址）。</p>
<p>其主要作用就是连接不同的网络，比如在容器网络中，用于将容器的 namespace 与 root namespace 的网桥 br0 相连。
容器网络中，容器侧的 veth 自身设置了 ip/mac 地址并被重命名为 eth0，作为容器的网络接口使用，而主机侧的 veth 则直接连接在 docker0/br0 上面。</p>
<p>使用 veth 实现容器网络，需要结合下一小节介绍的 bridge，在下一小节将给出容器网络结构图。</p>
<h2 id="三bridge" class="headerLink">
    <a href="#%e4%b8%89bridge" class="header-mark"></a>三、bridge</h2><p>Linux Bridge 是工作在链路层的网络交换机，由 Linux 内核模块 <code>brige</code> 提供，它负责在所有连接到它的接口之间转发链路层数据包。</p>
<p>添加到 Bridge 上的设备被设置为只接受二层数据帧并且转发所有收到的数据包到 Bridge 中。
在 Bridge 中会进行一个类似物理交换机的查MAC端口映射表、转发、更新MAC端口映射表这样的处理逻辑，从而数据包可以被转发到另一个接口/丢弃/广播/发往上层协议栈，由此 Bridge 实现了数据转发的功能。</p>
<p>如果使用 tcpdump 在 Bridge 接口上抓包，可以抓到网桥上所有接口进出的包，因为这些数据包都要通过网桥进行转发。</p>
<p>与物理交换机不同的是，Bridge 本身可以设置 IP 地址，可以认为当使用 <code>brctl addbr br0</code> 新建一个 br0 网桥时，系统自动创建了一个同名的隐藏 <code>br0</code> 网络接口。<code>br0</code> 一旦设置 IP 地址，就意味着这个隐藏的 br0 接口可以作为路由接口设备，参与 IP 层的路由选择(可以使用 <code>route -n</code> 查看最后一列 <code>Iface</code>)。因此只有当 <code>br0</code> 设置 <code>IP</code> 地址时，Bridge 才有可能将数据包发往上层协议栈。</p>
<p>但被添加到 Bridge 上的网卡是不能配置 IP 地址的，他们工作在数据链路层，对路由系统不可见。</p>
<p>它常被用于在虚拟机、主机上不同的 namepsaces 之间转发数据。</p>
<h3 id="虚拟机场景桥接模式" class="headerLink">
    <a href="#%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%9c%ba%e6%99%af%e6%a1%a5%e6%8e%a5%e6%a8%a1%e5%bc%8f" class="header-mark"></a>虚拟机场景（桥接模式）</h3><p>以 qemu-kvm 为例，在虚拟机的桥接模式下，qemu-kvm 会为每个虚拟机创建一个 tun/tap 虚拟网卡并连接到 br0 网桥。
虚拟机内部的网络接口 <code>eth0</code> 是 qemu-kvm 软件模拟的，实际上虚拟机内网络数据的收发都会被 qemu-kvm 转换成对 <code>/dev/net/tun</code> 的读写。</p>
<p>以发送数据为例，整个流程如下：</p>
<ul>
<li>虚拟机发出去的数据包先到达 qemu-kvm 程序</li>
<li>数据被用户层程序 qemu-kvm 写入到 <code>/dev/net/tun</code>，到达 tap 设备</li>
<li>tap 设备把数据传送到 br0 网桥</li>
<li>br0 把数据交给 eth0 发送出去</li>
</ul>
<p>整个流程跑完，数据包都不需要经过宿主机的协议栈，效率高。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+------------------------------------------------+-----------------------------------+-----------------------------------+
</span></span><span class="line"><span class="cl">|                       Host                     |           VirtualMachine1         |           VirtualMachine2         |
</span></span><span class="line"><span class="cl">|                                                |                                   |                                   |
</span></span><span class="line"><span class="cl">|    +--------------------------------------+    |    +-------------------------+    |    +-------------------------+    |
</span></span><span class="line"><span class="cl">|    |         Network Protocol Stack       |    |    |  Network Protocol Stack |    |    |  Network Protocol Stack |    |
</span></span><span class="line"><span class="cl">|    +--------------------------------------+    |    +-------------------------+    |    +-------------------------+    |
</span></span><span class="line"><span class="cl">|                       ↑                        |                ↑                  |                 ↑                 |
</span></span><span class="line"><span class="cl">|.......................|........................|................|..................|.................|.................|
</span></span><span class="line"><span class="cl">|                       ↓                        |                ↓                  |                 ↓                 |
</span></span><span class="line"><span class="cl">|                  +--------+                    |            +-------+              |             +-------+             |
</span></span><span class="line"><span class="cl">|                  | .3.101 |                    |            | .3.102|              |             | .3.103|             |
</span></span><span class="line"><span class="cl">|     +------+     +--------+     +-------+      |            +-------+              |             +-------+             |
</span></span><span class="line"><span class="cl">|     | eth0 |&lt;---&gt;|   br0  |&lt;---&gt;|tun/tap|      |            | eth0  |              |             | eth0  |             |
</span></span><span class="line"><span class="cl">|     +------+     +--------+     +-------+      |            +-------+              |             +-------+             |
</span></span><span class="line"><span class="cl">|         ↑             ↑             ↑      +--------+           ↑                  |                 ↑                 |
</span></span><span class="line"><span class="cl">|         |             |             +------|qemu-kvm|-----------+                  |                 |                 |
</span></span><span class="line"><span class="cl">|         |             ↓                    +--------+                              |                 |                 |
</span></span><span class="line"><span class="cl">|         |         +-------+                    |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|         |         |tun/tap|                    |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|         |         +-------+                    |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|         |             ↑                        |            +--------+             |                 |                 |
</span></span><span class="line"><span class="cl">|         |             +-------------------------------------|qemu-kvm|-------------|-----------------+                 |
</span></span><span class="line"><span class="cl">|         |                                      |            +--------+             |                                   |
</span></span><span class="line"><span class="cl">|         |                                      |                                   |                                   |
</span></span><span class="line"><span class="cl">+---------|--------------------------------------+-----------------------------------+-----------------------------------+
</span></span><span class="line"><span class="cl">          ↓
</span></span><span class="line"><span class="cl">    Physical Network  (192.168.3.0/24)
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="跨-namespace-通信场景容器网络nat-模式" class="headerLink">
    <a href="#%e8%b7%a8-namespace-%e9%80%9a%e4%bf%a1%e5%9c%ba%e6%99%af%e5%ae%b9%e5%99%a8%e7%bd%91%e7%bb%9cnat-%e6%a8%a1%e5%bc%8f" class="header-mark"></a>跨 namespace 通信场景（容器网络，NAT 模式）</h3><blockquote>
<p>docker/podman 提供的 bridge 网络模式，就是使用 veth+bridge+iptalbes 实现的。我会在下一篇文章详细介绍「容器网络」。</p>
</blockquote>
<p>由于容器运行在自己单独的 network namespace 里面，所以和虚拟机一样，它们也都有自己单独的协议栈。</p>
<p>容器网络的结构和虚拟机差不多，但是它改用了 NAT 网络，并把 tun/tap 换成了 veth，导致 docker0 过来的数据，要先经过宿主机协议栈，然后才进入 veth 接口。</p>
<p>多了一层 NAT，以及多走了一层宿主机协议栈，都会导致性能下降。</p>
<p>示意图如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">+-----------------------------------------------+-----------------------------------+-----------------------------------+
</span></span><span class="line"><span class="cl">|                      Host                     |           Container 1             |           Container 2             |
</span></span><span class="line"><span class="cl">|                                               |                                   |                                   |
</span></span><span class="line"><span class="cl">|   +---------------------------------------+   |    +-------------------------+    |    +-------------------------+    |
</span></span><span class="line"><span class="cl">|   |       Network Protocol Stack          |   |    |  Network Protocol Stack |    |    |  Network Protocol Stack |    |
</span></span><span class="line"><span class="cl">|   +----+-------------+--------------------+   |    +-----------+-------------+    |    +------------+------------+    |
</span></span><span class="line"><span class="cl">|        ^             ^                        |                ^                  |                 ^                 |
</span></span><span class="line"><span class="cl">|........|.............|........................|................|..................|.................|.................|
</span></span><span class="line"><span class="cl">|        v             v  ↓                     |                v                  |                 v                 |
</span></span><span class="line"><span class="cl">|   +----+----+  +-----+------+                 |          +-----+-------+          |           +-----+-------+         |
</span></span><span class="line"><span class="cl">|   | .31.101 |  | 172.17.0.1 |      +------+   |          | 172.17.0.2  |          |           |  172.17.0.3 |         |
</span></span><span class="line"><span class="cl">|   +---------+  +-------------&lt;----&gt;+ veth |   |          +-------------+          |           +-------------+         |
</span></span><span class="line"><span class="cl">|   |  eth0   |  |   docker0  |      +--+---+   |          | eth0(veth)  |          |           | eth0(veth)  |         |
</span></span><span class="line"><span class="cl">|   +----+----+  +-----+------+         ^       |          +-----+-------+          |           +-----+-------+         |
</span></span><span class="line"><span class="cl">|        ^             ^                |       |                ^                  |                 ^                 |
</span></span><span class="line"><span class="cl">|        |             |                +------------------------+                  |                 |                 |
</span></span><span class="line"><span class="cl">|        |             v                        |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |          +--+---+                    |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |          | veth |                    |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |          +--+---+                    |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |             ^                        |                                   |                 |                 |
</span></span><span class="line"><span class="cl">|        |             +------------------------------------------------------------------------------+                 |
</span></span><span class="line"><span class="cl">|        |                                      |                                   |                                   |
</span></span><span class="line"><span class="cl">|        |                                      |                                   |                                   |
</span></span><span class="line"><span class="cl">+-----------------------------------------------+-----------------------------------+-----------------------------------+
</span></span><span class="line"><span class="cl">         v
</span></span><span class="line"><span class="cl">    Physical Network  (192.168.31.0/24)
</span></span></code></pre></td></tr></table>
</div>
</div><p>每创建一个新容器，都会在容器的 namespace 里新建一个 veth 接口并命令为 eth0，同时在主 namespace 创建一个 veth，将容器的 eth0 与 docker0 连接。</p>
<p>可以在容器中通过 iproute2 查看到， eth0 的接口类型为 <code>veth</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ docker run -it --rm debian:buster bash
</span></span><span class="line"><span class="cl">root@5facbe4ddc1e:/# ip --details addr ls
</span></span><span class="line"><span class="cl">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="m">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="m">1000</span>
</span></span><span class="line"><span class="cl">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 promiscuity <span class="m">0</span> minmtu <span class="m">0</span> maxmtu <span class="m">0</span> numtxqueues <span class="m">1</span> numrxqueues <span class="m">1</span> gso_max_size <span class="m">65536</span> gso_max_segs <span class="m">65535</span> 
</span></span><span class="line"><span class="cl">    inet 127.0.0.1/8 scope host lo
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span><span class="line"><span class="cl">20: eth0@if21: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="m">1500</span> qdisc noqueue state UP group default 
</span></span><span class="line"><span class="cl">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="m">0</span> promiscuity <span class="m">0</span> minmtu <span class="m">68</span> maxmtu <span class="m">65535</span> 
</span></span><span class="line"><span class="cl">    veth numtxqueues <span class="m">1</span> numrxqueues <span class="m">1</span> gso_max_size <span class="m">65536</span> gso_max_segs <span class="m">65535</span> 
</span></span><span class="line"><span class="cl">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0
</span></span><span class="line"><span class="cl">       valid_lft forever preferred_lft forever
</span></span></code></pre></td></tr></table>
</div>
</div><p>同时在宿主机中能看到对应的 veth 设备是绑定到了 docker0 网桥的：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">❯ sudo brctl show
</span></span><span class="line"><span class="cl">bridge name     bridge id               STP enabled     interfaces
</span></span><span class="line"><span class="cl">docker0         8000.0242fce99ef5       no              vethea4171a
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四macvlan" class="headerLink">
    <a href="#%e5%9b%9bmacvlan" class="header-mark"></a>四、macvlan</h2><blockquote>
<p>目前 docker/podman 都支持创建基于 macvlan 的 Linux 容器网络。</p>
</blockquote>
<blockquote>
<p>注意 macvlan 和 WiFi 存在兼容问题，如果使用笔记本测试，可能会遇到麻烦。</p>
</blockquote>
<blockquote>
<p>参考文档：<a href="https://cizixs.com/2017/02/14/network-virtualization-macvlan/" target="_blank" rel="noopener noreffer">linux 网络虚拟化： macvlan</a></p>
</blockquote>
<p>macvlan 是比较新的 Linux 特性，需要内核版本 &gt;= 3.9，它被用于在主机的网络接口（父接口）上配置多个虚拟子接口，这些子接口都拥有各自独立的 mac 地址，也可以配上 ip 地址进行通讯。</p>
<p>macvlan 下的虚拟机或者容器网络和主机在同一个网段中，共享同一个广播域。macvlan 和 bridge 比较相似，但因为它省去了 bridge 的存在，所以配置和调试起来比较简单，而且效率也相对高。除此之外，macvlan 自身也完美支持 VLAN。</p>
<p>如果希望容器或者虚拟机放在主机相同的网络中，享受已经存在网络栈的各种优势，可以考虑 macvlan。</p>
<p>我会在下一篇文章对 docker 的 macvlan/ipvlan 做个分析，这里先略过了&hellip;</p>
<h2 id="五ipvlan" class="headerLink">
    <a href="#%e4%ba%94ipvlan" class="header-mark"></a>五、ipvlan</h2><blockquote>
<p><a href="https://cizixs.com/2017/02/17/network-virtualization-ipvlan/" target="_blank" rel="noopener noreffer">linux 网络虚拟化： ipvlan</a></p>
</blockquote>
<blockquote>
<p>cilium 1.9 已经提供了基于 ipvlan 的网络（beta 特性），用于替换传统的 veth+bridge 容器网络。详见 <a href="https://docs.cilium.io/en/v1.9/gettingstarted/ipvlan/" target="_blank" rel="noopener noreffer">IPVLAN based Networking (beta) - Cilium 1.9 Docs</a></p>
</blockquote>
<p>ipvlan 和 macvlan 的功能很类似，也是用于在主机的网络接口（父接口）上配置出多个虚拟的子接口。但不同的是，ipvlan 的各子接口没有独立的 mac 地址，它们和主机的父接口共享 mac 地址。</p>
<blockquote>
<p>因为 mac 地址共享，所以如果使用 DHCP，就要注意不能使用 mac 地址做 DHCP，需要额外配置唯一的 clientID.</p>
</blockquote>
<p>如果你遇到以下的情况，请考虑使用 ipvlan：</p>
<ul>
<li>父接口对 mac 地址数目有限制，或者在 mac 地址过多的情况下会造成严重的性能损失</li>
<li>工作在 802.11(wireless)无线网络中（macvlan 无法和无线网络共同工作）</li>
<li>希望搭建比较复杂的网络拓扑（不是简单的二层网络和 VLAN），比如要和 BGP 网络一起工作</li>
</ul>
<p>基于 ipvlan/macvlan 的容器网络，比 veth+bridge+iptables 的性能要更高。</p>
<p>我会在下一篇文章对 docker 的 macvlan/ipvlan 做个分析，这里先略过了&hellip;</p>
<h2 id="六vlan" class="headerLink">
    <a href="#%e5%85%advlan" class="header-mark"></a>六、vlan</h2><p>vlan 即虚拟局域网，是一个链路层的广播域隔离技术，可以用于切分局域网，解决广播泛滥和安全性问题。被隔离的广播域之间需要上升到第三层才能完成通讯。</p>
<p>常用的企业路由器如 ER-X 基本都可以设置 vlan，Linux 也直接支持了 vlan.</p>
<p>以太网数据包有一个专门的字段提供给 vlan 使用，vlan 数据包会在该位置记录它的 VLAN ID，交换机通过该 ID 来区分不同的 VLAN，只将该以太网报文广播到该 ID 对应的 VLAN 中。</p>
<h2 id="vxlan-geneve" class="headerLink">
    <a href="#vxlan-geneve" class="header-mark"></a>七、vxlan/geneve</h2><blockquote>
<p><a href="https://datatracker.ietf.org/doc/html/rfc8926" target="_blank" rel="noopener noreffer">rfc8926 - Geneve: Generic Network Virtualization Encapsulation</a>
<a href="https://datatracker.ietf.org/doc/html/rfc7348" target="_blank" rel="noopener noreffer">rfc7348 - Virtual eXtensible Local Area Network (VXLAN)</a></p>
</blockquote>
<blockquote>
<p><a href="https://cizixs.com/2017/09/28/linux-vxlan/" target="_blank" rel="noopener noreffer">linux 上实现 vxlan 网络</a></p>
</blockquote>
<p>在介绍 vxlan 前，先说明下两个名词的含义：</p>
<ul>
<li><strong>underlay 网络</strong>：即物理网络</li>
<li><strong>overlay 网络</strong>：指在现有的物理网络之上构建的虚拟网络。其实就是一种隧道技术，将原生态的二层数据帧报文进行封装后通过隧道进行传输。</li>
</ul>
<p>vxlan 与 geneve 都是 overlay 网络协议，它俩都是使用 UDP 包来封装链路层的以太网帧。</p>
<p>vxlan 在 2014 年标准化，而 geneve 在 2020 年底才通过草案阶段，目前尚未形成最终标准。但是目前 linux/cilium 都已经支持了 geneve.</p>
<p>geneve 相对 vxlan 最大的变化，是它更灵活——它的 header 长度是可变的。</p>
<p>目前所有 overlay 的跨主机容器网络方案，几乎都是基于 vxlan 实现的（例外：cilium 也支持 geneve）。</p>
<blockquote>
<p>我们在学习单机的容器网络时，不需要接触到 vxlan，但是在学习跨主机容器网络方案如 flannel/calico/cilium 时，那 vxlan(overlay) 及 BGP(underlay) 就不可避免地要接触了。</p>
</blockquote>
<p>先介绍下 vxlan 的数据包结构：</p>
<figure><img src="/images/linux-virtual-interfaces/vxlan-frame.webp"/><figcaption>
            <h4>VXLAN 栈帧结构</h4>
        </figcaption>
</figure>

<p>在创建 vxlan 的 vtep 虚拟设备时，我们需要手动设置图中的如下属性：</p>
<ul>
<li>VXLAN 目标端口：即接收方 vtep 使用的端口，这里 IANA 定义的端口是 4789，但是只有 calico 的 vxlan 模式默认使用该端口 calico，而 cilium/flannel 的默认端口都是 Linux 默认的 8472.</li>
<li>VNID: 每个 VXLAN 网络接口都会被分配一个独立的 VNID</li>
</ul>
<p>一个点对点的 vxlan 网络架构图如下:</p>
<figure><img src="/images/linux-virtual-interfaces/vxlan-architecture.gif"/><figcaption>
            <h4>VXLAN 点对点网络架构</h4>
        </figcaption>
</figure>

<p>可以看到每台虚拟机 VM 都会被分配一个唯一的 VNID，然后两台物理机之间通过 VTEP 虚拟网络设备建立了 VXLAN 隧道，所有 VXLAN 网络中的虚拟机，都通过 VTEP 来互相通信。</p>
<p>有了上面这些知识，我们就可以通过如下命令在两台 Linux 机器间建立一个<strong>点对点的 VXLAN 隧道</strong>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 在主机 A 上创建 VTEP 设备 vxlan0</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 与另一个 vtep 接口 B（192.168.8.101）建立隧道</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将 vxlan0 自身的 IP 地址设为 192.168.8.100</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用的 VXLAN 目标端口为 4789(IANA 标准)</span>
</span></span><span class="line"><span class="cl">ip link add vxlan0 <span class="nb">type</span> vxlan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    id <span class="m">42</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    dstport <span class="m">4789</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    remote 192.168.8.101 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nb">local</span> 192.168.8.100 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    dev enp0s8
</span></span><span class="line"><span class="cl"><span class="c1"># 为我们的 VXLAN 网络设置虚拟网段，vxlan0 就是默认网关</span>
</span></span><span class="line"><span class="cl">ip addr add 10.20.1.2/24 dev vxlan0
</span></span><span class="line"><span class="cl"><span class="c1"># 启用我们的 vxlan0 设备，这会自动生成路由规则</span>
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> vxlan0 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 现在在主机 B 上运行如下命令，同样创建一个 VTEP 设备 vxlan0，remote 和 local 的 ip 与前面用的命令刚好相反。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 注意 VNID 和 dstport 必须和前面完全一致</span>
</span></span><span class="line"><span class="cl">ip link add vxlan0 <span class="nb">type</span> vxlan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    id <span class="m">42</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    dstport <span class="m">4789</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    remote 192.168.8.100 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nb">local</span> 192.168.8.101 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    dev enp0s8
</span></span><span class="line"><span class="cl"><span class="c1"># 为我们的 VXLAN 网络设置虚拟网段，vxlan0 就是默认网关</span>
</span></span><span class="line"><span class="cl">ip addr add 10.20.1.3/24 dev vxlan0
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> vxlan0 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 到这里，两台机器就完成连接，可以通信了。可以在主机 B 上 ping 10.20.1.2 试试，应该能收到主机 A 的回应。</span>
</span></span><span class="line"><span class="cl">ping 10.20.1.2
</span></span></code></pre></td></tr></table>
</div>
</div><p>点对点的 vxlan 隧道实际用处不大，如果集群中的每个节点都互相建 vxlan 隧道，代价太高了。</p>
<p>一种更好的方式，是使用 <strong>「组播模式」的 vxlan 隧道</strong>，这种模式下一个 vtep 可以一次与组内的所有 vtep 建立隧道。
示例命令如下（这里略过了如何设置组播地址 <code>239.1.1.1</code> 的信息）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ip link add vxlan0 <span class="nb">type</span> vxlan <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    id <span class="m">42</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    dstport <span class="m">4789</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    group 239.1.1.1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    dev enp0s8 
</span></span><span class="line"><span class="cl">ip addr add 10.20.1.2/24 dev vxlan0
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> vxlan0 up
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，只需要简单地把 local_ip/remote_ip 替换成一个组播地址就行。组播功能会将收到的数据包发送给组里的所有 vtep 接口，但是只有 VNID 能对上的 vtep 会处理该报文，其他 vtep 会直接丢弃数据。</p>
<p>接下来，为了能让所有的虚拟机/容器，都通过 vtep 通信，我们再添加一个 bridge 网络，充当 vtep 与容器间的交换机。架构如下：</p>
<figure><img src="/images/linux-virtual-interfaces/linux-vxlan-with-bridge.webp"/><figcaption>
            <h4>VXLAN 多播网络架构</h4>
        </figcaption>
</figure>

<p>使用 ip 命令创建网桥、网络名字空间、veth pairs 组成上图中的容器网络：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 创建 br0 并将 vxlan0 绑定上去</span>
</span></span><span class="line"><span class="cl">ip link add br0 <span class="nb">type</span> bridge
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> vxlan0 master br0
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> vxlan0 up
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> br0 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 模拟将容器加入到网桥中的操作</span>
</span></span><span class="line"><span class="cl">ip netns add container1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 创建 veth pair，并把一端加到网桥上</span>
</span></span><span class="line"><span class="cl">ip link add veth0 <span class="nb">type</span> veth peer name veth1
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> dev veth0 master br0
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> dev veth0 up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">## 配置容器内部的网络和 IP</span>
</span></span><span class="line"><span class="cl">ip link <span class="nb">set</span> dev veth1 netns container1
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> container1 ip link <span class="nb">set</span> lo up
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> container1 ip link <span class="nb">set</span> veth1 name eth0
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> container1 ip addr add 10.20.1.11/24 dev eth0
</span></span><span class="line"><span class="cl">ip netns <span class="nb">exec</span> container1 ip link <span class="nb">set</span> eth0 up
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在另一台机器上做同样的操作，并创建新容器，两个容器就能通过 vxlan 通信啦~</p>
<h3 id="比组播更高效的-vxlan-实现" class="headerLink">
    <a href="#%e6%af%94%e7%bb%84%e6%92%ad%e6%9b%b4%e9%ab%98%e6%95%88%e7%9a%84-vxlan-%e5%ae%9e%e7%8e%b0" class="header-mark"></a>比组播更高效的 vxlan 实现</h3><p>组播最大的问题在于，因为它不知道数据的目的地，所以每个 vtep 都发了一份。如果每次发数据时，如果能够精确到对应的 vtep，就能节约大量资源。</p>
<p>另一个问题是 ARP 查询也会被组播，要知道 vxlan 本身就是个 overlay 网络，ARP 的成本也很高。</p>
<p>上述问题都可以通过一个中心化的注册中心（如 etcd）来解决，所有容器、网络的注册与变更，都写入到这个注册中心，然后由程序自动维护 vtep 之间的隧道、fdb 表及 ARP 表.</p>
<h2 id="八虚拟网络接口的速率" class="headerLink">
    <a href="#%e5%85%ab%e8%99%9a%e6%8b%9f%e7%bd%91%e7%bb%9c%e6%8e%a5%e5%8f%a3%e7%9a%84%e9%80%9f%e7%8e%87" class="header-mark"></a>八、虚拟网络接口的速率</h2><p>Loopback 和本章讲到的其他虚拟网络接口一样，都是一种软件模拟的网络设备。
他们的速率是不是也像物理链路一样，存在链路层（比如以太网）协议的带宽限制呢？</p>
<p>比如目前很多老旧的网络设备，都是只支持到百兆以太网，这就决定了它的带宽上限。
即使是较新的设备，目前基本也都只支持到千兆，也就是 1GbE 以太网标准，那本文提到的虚拟网络接口单纯在本机内部通信，是否也存在这样的制约呢？是否也只能跑到 1GbE?</p>
<p>另外物理网络还存在链路层协议协商机制，将一个千兆接口与一个百兆接口连接，它们会自动协商使用百兆以太网标准进行通讯。虚拟网络接口是否也存在这样的机制呢？</p>
<p>先使用 ethtool 检查看看：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># docker 容器的 veth 接口速率
</span></span><span class="line"><span class="cl">&gt; ethtool vethe899841 | grep Speed
</span></span><span class="line"><span class="cl">        Speed: 10000Mb/s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 网桥看起来没有固定的速率
</span></span><span class="line"><span class="cl">&gt; ethtool docker0 | grep Speed
</span></span><span class="line"><span class="cl">        Speed: Unknown!
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># tun0 设备的默认速率貌似是 10Mb/s ?
</span></span><span class="line"><span class="cl">&gt; ethtool tun0 | grep Speed
</span></span><span class="line"><span class="cl">        Speed: 10Mb/s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 此外 ethtool 无法检查 lo 以及 wifi 的速率，先略过不提
</span></span></code></pre></td></tr></table>
</div>
</div><p>从上面的输出能看到，虚拟接口的 <code>Speed</code> 属性都有点离谱，veth 接口显示 10Gb/s，tun0 更是离谱的 10Mb/s.</p>
<p>那么事实真的如此么？话不多说，先实测一波。</p>
<h3 id="网络性能实测" class="headerLink">
    <a href="#%e7%bd%91%e7%bb%9c%e6%80%a7%e8%83%bd%e5%ae%9e%e6%b5%8b" class="header-mark"></a>网络性能实测</h3><p>接下来实际测试一下，受先给出测试机的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ cat /etc/os-release 
</span></span><span class="line"><span class="cl">NAME=&#34;openSUSE Tumbleweed&#34;
</span></span><span class="line"><span class="cl"># VERSION=&#34;20210810&#34;
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ uname -a
</span></span><span class="line"><span class="cl">Linux legion-book 5.13.8-1-default #1 SMP Thu Aug 5 08:56:22 UTC 2021 (967c6a8) x86_64 x86_64 x86_64 GNU/Linux
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">❯ lscpu
</span></span><span class="line"><span class="cl">Architecture:                    x86_64
</span></span><span class="line"><span class="cl">CPU(s):                          16
</span></span><span class="line"><span class="cl">Model name:                      AMD Ryzen 7 5800H with Radeon Graphics
</span></span><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 内存，单位 MB
</span></span><span class="line"><span class="cl">❯ free -m
</span></span><span class="line"><span class="cl">               total        used        free      shared  buff/cache   available
</span></span><span class="line"><span class="cl">Mem:           27929        4482       17324         249        6122       22797
</span></span><span class="line"><span class="cl">Swap:           2048           0        2048
</span></span></code></pre></td></tr></table>
</div>
</div><p>好了，现在使用 iperf3 测试：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 启动服务端</span>
</span></span><span class="line"><span class="cl">iperf3 -s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">-------------
</span></span><span class="line"><span class="cl"><span class="c1"># 新窗口启动客户端，通过 loopback 接口访问 iperf3-server，大概 49Gb/s</span>
</span></span><span class="line"><span class="cl">❯ iperf3 -c 127.0.0.1
</span></span><span class="line"><span class="cl">Connecting to host 127.0.0.1, port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span> <span class="nb">local</span> 127.0.0.1 port <span class="m">48656</span> connected to 127.0.0.1 port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr  Cwnd
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-1.00   sec  4.46 GBytes  38.3 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   1.00-2.00   sec  4.61 GBytes  39.6 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   2.00-3.00   sec  5.69 GBytes  48.9 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   3.00-4.00   sec  6.11 GBytes  52.5 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   4.00-5.00   sec  6.04 GBytes  51.9 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   5.00-6.00   sec  6.05 GBytes  52.0 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   6.00-7.00   sec  6.01 GBytes  51.6 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   7.00-8.00   sec  6.05 GBytes  52.0 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   8.00-9.00   sec  6.34 GBytes  54.5 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   9.00-10.00  sec  5.91 GBytes  50.8 Gbits/sec    <span class="m">0</span>   1.62 MBytes       
</span></span><span class="line"><span class="cl">- - - - - - - - - - - - - - - - - - - - - - - - -
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  57.3 GBytes  49.2 Gbits/sec    <span class="m">0</span>             sender
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  57.3 GBytes  49.2 Gbits/sec                  receiver
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 客户端通过 wlp4s0 wifi 网卡(192.168.31.228)访问 iperf3-server，实际还是走的本机，但是速度要比 loopback 快一点，可能是默认设置的问题</span>
</span></span><span class="line"><span class="cl">❯ iperf3 -c 192.168.31.228
</span></span><span class="line"><span class="cl">Connecting to host 192.168.31.228, port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span> <span class="nb">local</span> 192.168.31.228 port <span class="m">43430</span> connected to 192.168.31.228 port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr  Cwnd
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-1.00   sec  5.12 GBytes  43.9 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   1.00-2.00   sec  5.29 GBytes  45.5 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   2.00-3.00   sec  5.92 GBytes  50.9 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   3.00-4.00   sec  6.00 GBytes  51.5 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   4.00-5.00   sec  5.98 GBytes  51.4 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   5.00-6.00   sec  6.05 GBytes  52.0 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   6.00-7.00   sec  6.16 GBytes  52.9 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   7.00-8.00   sec  6.08 GBytes  52.2 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   8.00-9.00   sec  6.00 GBytes  51.6 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   9.00-10.00  sec  6.01 GBytes  51.6 Gbits/sec    <span class="m">0</span>   1.25 MBytes       
</span></span><span class="line"><span class="cl">- - - - - - - - - - - - - - - - - - - - - - - - -
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  58.6 GBytes  50.3 Gbits/sec    <span class="m">0</span>             sender
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  58.6 GBytes  50.3 Gbits/sec                  receiver
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 从容器中访问宿主机的 iperf3-server，速度几乎没区别</span>
</span></span><span class="line"><span class="cl">❯ docker run  -it --rm --name<span class="o">=</span>iperf3-server networkstatic/iperf3 -c 192.168.31.228
</span></span><span class="line"><span class="cl">Connecting to host 192.168.31.228, port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span> <span class="nb">local</span> 172.17.0.2 port <span class="m">43436</span> connected to 192.168.31.228 port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr  Cwnd
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-1.00   sec  4.49 GBytes  38.5 Gbits/sec    <span class="m">0</span>    <span class="m">403</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   1.00-2.00   sec  5.31 GBytes  45.6 Gbits/sec    <span class="m">0</span>    <span class="m">544</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   2.00-3.00   sec  6.14 GBytes  52.8 Gbits/sec    <span class="m">0</span>    <span class="m">544</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   3.00-4.00   sec  5.85 GBytes  50.3 Gbits/sec    <span class="m">0</span>    <span class="m">544</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   4.00-5.00   sec  6.14 GBytes  52.7 Gbits/sec    <span class="m">0</span>    <span class="m">544</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   5.00-6.00   sec  5.99 GBytes  51.5 Gbits/sec    <span class="m">0</span>    <span class="m">544</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   6.00-7.00   sec  5.86 GBytes  50.4 Gbits/sec    <span class="m">0</span>    <span class="m">544</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   7.00-8.00   sec  6.05 GBytes  52.0 Gbits/sec    <span class="m">0</span>    <span class="m">544</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   8.00-9.00   sec  5.99 GBytes  51.5 Gbits/sec    <span class="m">0</span>    <span class="m">544</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   9.00-10.00  sec  6.12 GBytes  52.5 Gbits/sec    <span class="m">0</span>    <span class="m">544</span> KBytes       
</span></span><span class="line"><span class="cl">- - - - - - - - - - - - - - - - - - - - - - - - -
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  58.0 GBytes  49.8 Gbits/sec    <span class="m">0</span>             sender
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  58.0 GBytes  49.8 Gbits/sec                  receiver
</span></span></code></pre></td></tr></table>
</div>
</div><p>把 iperf3-server 跑在容器里再测一遍：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 在容器中启动 iperf3-server，并映射到宿主机端口 6201</span>
</span></span><span class="line"><span class="cl">&gt; docker run  -it --rm --name<span class="o">=</span>iperf3-server -p 6201:5201 networkstatic/iperf3 -s
</span></span><span class="line"><span class="cl">&gt; docker inspect --format <span class="s2">&#34;{{ .NetworkSettings.IPAddress }}&#34;</span> iperf3-server
</span></span><span class="line"><span class="cl">172.17.0.2
</span></span><span class="line"><span class="cl">-----------------------------
</span></span><span class="line"><span class="cl"><span class="c1"># 测试容器之间互访的速度，ip 为 iperf3-server 的容器 ip，速度要慢一些。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 毕竟过了 veth -&gt; veth -&gt; docker0 -&gt; veth -&gt; veth 五层虚拟网络接口</span>
</span></span><span class="line"><span class="cl">❯ docker run  -it --rm networkstatic/iperf3 -c 172.17.0.2
</span></span><span class="line"><span class="cl">Connecting to host 172.17.0.2, port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span> <span class="nb">local</span> 172.17.0.3 port <span class="m">40776</span> connected to 172.17.0.2 port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr  Cwnd
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-1.00   sec  4.74 GBytes  40.7 Gbits/sec    <span class="m">0</span>    <span class="m">600</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   1.00-2.00   sec  4.48 GBytes  38.5 Gbits/sec    <span class="m">0</span>    <span class="m">600</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   2.00-3.00   sec  5.38 GBytes  46.2 Gbits/sec    <span class="m">0</span>    <span class="m">600</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   3.00-4.00   sec  5.39 GBytes  46.3 Gbits/sec    <span class="m">0</span>    <span class="m">600</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   4.00-5.00   sec  5.42 GBytes  46.6 Gbits/sec    <span class="m">0</span>    <span class="m">600</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   5.00-6.00   sec  5.39 GBytes  46.3 Gbits/sec    <span class="m">0</span>    <span class="m">600</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   6.00-7.00   sec  5.38 GBytes  46.2 Gbits/sec    <span class="m">0</span>    <span class="m">635</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   7.00-8.00   sec  5.37 GBytes  46.1 Gbits/sec    <span class="m">0</span>    <span class="m">667</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   8.00-9.00   sec  6.01 GBytes  51.7 Gbits/sec    <span class="m">0</span>    <span class="m">735</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   9.00-10.00  sec  5.74 GBytes  49.3 Gbits/sec    <span class="m">0</span>    <span class="m">735</span> KBytes       
</span></span><span class="line"><span class="cl">- - - - - - - - - - - - - - - - - - - - - - - - -
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  53.3 GBytes  45.8 Gbits/sec    <span class="m">0</span>             sender
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  53.3 GBytes  45.8 Gbits/sec                  receiver
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 本机直接访问容器 ip，走的是 docker0 网桥，居然还挺快</span>
</span></span><span class="line"><span class="cl">❯ iperf3 -c 172.17.0.2
</span></span><span class="line"><span class="cl">Connecting to host 172.17.0.2, port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span> <span class="nb">local</span> 172.17.0.1 port <span class="m">56486</span> connected to 172.17.0.2 port <span class="m">5201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr  Cwnd
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-1.00   sec  5.01 GBytes  43.0 Gbits/sec    <span class="m">0</span>    <span class="m">632</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   1.00-2.00   sec  5.19 GBytes  44.6 Gbits/sec    <span class="m">0</span>    <span class="m">703</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   2.00-3.00   sec  6.46 GBytes  55.5 Gbits/sec    <span class="m">0</span>    <span class="m">789</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   3.00-4.00   sec  6.80 GBytes  58.4 Gbits/sec    <span class="m">0</span>    <span class="m">789</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   4.00-5.00   sec  6.82 GBytes  58.6 Gbits/sec    <span class="m">0</span>    <span class="m">913</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   5.00-6.00   sec  6.79 GBytes  58.3 Gbits/sec    <span class="m">0</span>   <span class="m">1007</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   6.00-7.00   sec  6.63 GBytes  56.9 Gbits/sec    <span class="m">0</span>   1.04 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   7.00-8.00   sec  6.75 GBytes  58.0 Gbits/sec    <span class="m">0</span>   1.04 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   8.00-9.00   sec  6.19 GBytes  53.2 Gbits/sec    <span class="m">0</span>   1.04 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   9.00-10.00  sec  6.55 GBytes  56.3 Gbits/sec    <span class="m">0</span>   1.04 MBytes       
</span></span><span class="line"><span class="cl">- - - - - - - - - - - - - - - - - - - - - - - - -
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  63.2 GBytes  54.3 Gbits/sec    <span class="m">0</span>             sender
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  63.2 GBytes  54.3 Gbits/sec                  receiver
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 如果走本机 loopback 地址 + 容器端口映射，速度就慢了好多</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 或许是因为用 iptables 做端口映射导致的？</span>
</span></span><span class="line"><span class="cl">❯ iperf3 -c 127.0.0.1 -p <span class="m">6201</span>
</span></span><span class="line"><span class="cl">Connecting to host 127.0.0.1, port <span class="m">6201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span> <span class="nb">local</span> 127.0.0.1 port <span class="m">48862</span> connected to 127.0.0.1 port <span class="m">6201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr  Cwnd
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-1.00   sec  2.71 GBytes  23.3 Gbits/sec    <span class="m">0</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   1.00-2.00   sec  3.64 GBytes  31.3 Gbits/sec    <span class="m">0</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   2.00-3.00   sec  4.08 GBytes  35.0 Gbits/sec    <span class="m">0</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   3.00-4.00   sec  3.49 GBytes  30.0 Gbits/sec    <span class="m">0</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   4.00-5.00   sec  5.50 GBytes  47.2 Gbits/sec    <span class="m">2</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   5.00-6.00   sec  4.06 GBytes  34.9 Gbits/sec    <span class="m">0</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   6.00-7.00   sec  4.12 GBytes  35.4 Gbits/sec    <span class="m">0</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   7.00-8.00   sec  3.99 GBytes  34.3 Gbits/sec    <span class="m">0</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   8.00-9.00   sec  3.49 GBytes  30.0 Gbits/sec    <span class="m">0</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   9.00-10.00  sec  5.51 GBytes  47.3 Gbits/sec    <span class="m">0</span>   1.37 MBytes       
</span></span><span class="line"><span class="cl">- - - - - - - - - - - - - - - - - - - - - - - - -
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  40.6 GBytes  34.9 Gbits/sec    <span class="m">2</span>             sender
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  40.6 GBytes  34.9 Gbits/sec                  receiver
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 可走 wlp4s0 + 容器端口映射，速度也不慢啊</span>
</span></span><span class="line"><span class="cl">❯ iperf3 -c 192.168.31.228 -p <span class="m">6201</span>
</span></span><span class="line"><span class="cl">Connecting to host 192.168.31.228, port <span class="m">6201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span> <span class="nb">local</span> 192.168.31.228 port <span class="m">54582</span> connected to 192.168.31.228 port <span class="m">6201</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr  Cwnd
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-1.00   sec  4.34 GBytes  37.3 Gbits/sec    <span class="m">0</span>    <span class="m">795</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   1.00-2.00   sec  4.78 GBytes  41.0 Gbits/sec    <span class="m">0</span>    <span class="m">834</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   2.00-3.00   sec  6.26 GBytes  53.7 Gbits/sec    <span class="m">0</span>    <span class="m">834</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   3.00-4.00   sec  6.30 GBytes  54.1 Gbits/sec    <span class="m">0</span>    <span class="m">875</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   4.00-5.00   sec  6.26 GBytes  53.8 Gbits/sec    <span class="m">0</span>    <span class="m">875</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   5.00-6.00   sec  5.75 GBytes  49.4 Gbits/sec    <span class="m">0</span>    <span class="m">875</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   6.00-7.00   sec  5.49 GBytes  47.2 Gbits/sec    <span class="m">0</span>    <span class="m">966</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   7.00-8.00   sec  5.72 GBytes  49.1 Gbits/sec    <span class="m">2</span>    <span class="m">966</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   8.00-9.00   sec  4.81 GBytes  41.3 Gbits/sec    <span class="m">2</span>    <span class="m">966</span> KBytes       
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   9.00-10.00  sec  5.98 GBytes  51.4 Gbits/sec    <span class="m">0</span>    <span class="m">966</span> KBytes       
</span></span><span class="line"><span class="cl">- - - - - - - - - - - - - - - - - - - - - - - - -
</span></span><span class="line"><span class="cl"><span class="o">[</span> ID<span class="o">]</span> Interval           Transfer     Bitrate         Retr
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  55.7 GBytes  47.8 Gbits/sec    <span class="m">4</span>             sender
</span></span><span class="line"><span class="cl"><span class="o">[</span>  5<span class="o">]</span>   0.00-10.00  sec  55.7 GBytes  47.8 Gbits/sec                  receiver
</span></span></code></pre></td></tr></table>
</div>
</div><p>总的来看，loopback、bridge、veth 这几个接口基本上是没被限速的，veth 有查到上限为 10000Mb/s（10Gb/s） 感觉也是个假数字，
实际上测出来的数据基本在 35Gb/s 到 55Gb/s 之间，视情况浮动。</p>
<p>性能的变化和虚拟网络设备的链路和类型有关，或许和默认配置的区别也有关系。</p>
<p>另外 TUN 设备这里没有测，<code>ethtool tun0</code> 查到的值是比较离谱的 10Mb/s.</p>
<p>综上，Linux 虚拟接口应该没有硬性的网络速率限制，欢迎各位懂网络的大佬来给下更确定性的答案。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://segmentfault.com/a/1190000009249039" target="_blank" rel="noopener noreffer">Linux虚拟网络设备之tun/tap</a></li>
<li><a href="https://segmentfault.com/a/1190000009251098" target="_blank" rel="noopener noreffer">Linux虚拟网络设备之veth</a></li>
<li><a href="https://opengers.github.io/openstack/openstack-base-virtual-network-devices-bridge-and-vlan/" target="_blank" rel="noopener noreffer">云计算底层技术-虚拟网络设备(Bridge,VLAN)</a></li>
<li><a href="https://opengers.github.io/openstack/openstack-base-virtual-network-devices-tuntap-veth/" target="_blank" rel="noopener noreffer">云计算底层技术-虚拟网络设备(tun/tap,veth)</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/networking/tuntap.txt" target="_blank" rel="noopener noreffer">Universal TUN/TAP device driver - Kernel Docs</a></li>
<li><a href="https://backreference.org/2010/03/26/tuntap-interface-tutorial/" target="_blank" rel="noopener noreffer">Tun/Tap interface tutorial</a></li>
<li><a href="https://stackoverflow.com/questions/5832308/linux-loopback-performance-with-tcp-nodelay-enabled" target="_blank" rel="noopener noreffer">Linux Loopback performance with TCP_NODELAY enabled</a></li>
</ul>
]]></content></entry><entry><title type="html">Linux 网络工具中的瑞士军刀 - socat &amp;amp; netcat</title><link href="https://thiscute.world/posts/socat-netcat/"/><id>https://thiscute.world/posts/socat-netcat/</id><author><name>ryan4yin</name></author><published>2021-04-11T16:38:13+08:00</published><updated>2021-04-11T16:38:13+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>文中的命令均在 macOS Big Sur 和 Opensuse Tumbleweed 上测试通过</p>
</blockquote>
<h2 id="socat--netcat" class="headerLink">
    <a href="#socat--netcat" class="header-mark"></a>socat &amp; netcat</h2><p>netcat(network cat) 是一个历史悠久的网络工具包，被称作 TCP/IP 的瑞士军刀，各大 Linux 发行版都有默认安装 openbsd 版本的 netcat，它的命令行名称为 <code>nc</code>.</p>
<p>而 socat(socket cat)，官方文档描述它是 <code>&quot;netcat++&quot; (extended design, new implementation)</code>，项目比较活跃，kubernetes-client(kubectl) 底层就是使用的它做各种流量转发。</p>
<p>在不方便安装 socat 的环境中，我们可以使用系统自带的 netcat.
而在其他环境，可以考虑优先使用 socat.</p>
<h2 id="一简介" class="headerLink">
    <a href="#%e4%b8%80%e7%ae%80%e4%bb%8b" class="header-mark"></a>一、简介</h2><p>socat 的基本命令格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">socat <span class="o">[</span>参数<span class="o">]</span> 地址1 地址2
</span></span></code></pre></td></tr></table>
</div>
</div><p>给 socat 提供两个地址，socat 干的活就是把两个地址的流对接起来。左边地址的输出传给右边，同时又把右边地址的输出传给左边，也就是一个<strong>双向的数据管道</strong>。</p>
<p>听起来好像没啥特别的，但是实际上计算机网络干的活也就是数据传输而已，却影响了整个世界，不可小觑它的功能。</p>
<p>socat 支持非常多的地址类型：<code>-</code>/stdio，TCP, TCP-LISTEN, UDP, UDP-LISTEN, OPEN, EXEC, SOCKS, PROXY 等等，可用于端口监听、链接，文件和进程读写，代理桥接等等。</p>
<p>socat 的功能就是这么简单，命令行参数也很简洁，唯一需要花点精力学习的就是它各种地址的定义和搭配写法。</p>
<p>而 netcat 定义貌似没这么严谨，可以简单的理解为网络版的 cat 命令 2333</p>
<h2 id="二安装方法" class="headerLink">
    <a href="#%e4%ba%8c%e5%ae%89%e8%a3%85%e6%96%b9%e6%b3%95" class="header-mark"></a>二、安装方法</h2><p>各发行版都自带 netcat，包名通常为 <code>nc-openbsd</code>，因此这里只介绍 socat 的安装方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># Debian/Ubuntu</span>
</span></span><span class="line"><span class="cl">sudo apt install socat
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># CentOS/RedHat</span>
</span></span><span class="line"><span class="cl">sudo yum install socat
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># macOS</span>
</span></span><span class="line"><span class="cl">brew install socat
</span></span></code></pre></td></tr></table>
</div>
</div><p>其他发行版基本也都可以使用包管理器安装 socat</p>
<h2 id="三常用命令" class="headerLink">
    <a href="#%e4%b8%89%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4" class="header-mark"></a>三、常用命令</h2><h3 id="1-网络调试" class="headerLink">
    <a href="#1-%e7%bd%91%e7%bb%9c%e8%b0%83%e8%af%95" class="header-mark"></a>1. 网络调试</h3><h4 id="11-检测远程端口的可连接性确认防火墙没问题" class="headerLink">
    <a href="#11-%e6%a3%80%e6%b5%8b%e8%bf%9c%e7%a8%8b%e7%ab%af%e5%8f%a3%e7%9a%84%e5%8f%af%e8%bf%9e%e6%8e%a5%e6%80%a7%e7%a1%ae%e8%ae%a4%e9%98%b2%e7%81%ab%e5%a2%99%e6%b2%a1%e9%97%ae%e9%a2%98" class="header-mark"></a>1.1 检测远程端口的可连接性（确认防火墙没问题）</h4><blockquote>
<p>以前你可能学过如何用 telnet 来做这项测试，不过现在很多发行版基本都不自带 telnet 了，还需要额外安装。
telnet 差不多已经快寿终正寝了，还是建议使用更专业的 socat/netcat</p>
</blockquote>
<p>使用 socat/netcat 检测远程端口的可连接性：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># -d[ddd] 增加日志详细程度，-dd  Prints fatal, error, warning, and notice messages.</span>
</span></span><span class="line"><span class="cl">socat -dd - TCP:192.168.1.252:3306
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># -v 显示详细信息</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -z 不发送数据，效果为立即关闭连接，快速得出结果</span>
</span></span><span class="line"><span class="cl">nc -vz 192.168.1.2 <span class="m">8080</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># -vv 显示更详细的内容</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -w2 超时时间设为 2 秒</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 nc 做简单的端口扫描</span>
</span></span><span class="line"><span class="cl">nc -vv -w2 -z 192.168.1.2 20-500
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="12-测试本机端口是否能正常被外部访问检测防火墙路由" class="headerLink">
    <a href="#12-%e6%b5%8b%e8%af%95%e6%9c%ac%e6%9c%ba%e7%ab%af%e5%8f%a3%e6%98%af%e5%90%a6%e8%83%bd%e6%ad%a3%e5%b8%b8%e8%a2%ab%e5%a4%96%e9%83%a8%e8%ae%bf%e9%97%ae%e6%a3%80%e6%b5%8b%e9%98%b2%e7%81%ab%e5%a2%99%e8%b7%af%e7%94%b1" class="header-mark"></a>1.2 测试本机端口是否能正常被外部访问（检测防火墙、路由）</h4><p>在本机监听一个 TCP 端口，接收到的内容传到 stdout，同时将 stdin 的输入传给客户端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 服务端启动命令，socat/nc 二选一</span>
</span></span><span class="line"><span class="cl">socat TCP-LISTEN:7000 -
</span></span><span class="line"><span class="cl"><span class="c1"># -l --listening</span>
</span></span><span class="line"><span class="cl">nc -l <span class="m">7000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 客户端连接命令，socat/nc 二选一</span>
</span></span><span class="line"><span class="cl">socat TCP:192.168.31.123:7000 -
</span></span><span class="line"><span class="cl">nc 192.168.11.123 <span class="m">7000</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>UDP 协议的测试也非常类似，使用 netcat 的示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 服务端，只监听 ipv4</span>
</span></span><span class="line"><span class="cl">nc -u -l <span class="m">8080</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 客户端</span>
</span></span><span class="line"><span class="cl">nc -u 192.168.31.123 <span class="m">8080</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 客户端本机测试，注意 localhost 会被优先解析为 ipv6! 这会导致服务端(ipv4)的 nc 接收不到数据！</span>
</span></span><span class="line"><span class="cl">nc -u localhost <span class="m">8080</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 socat 的 UDP 测试示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">socat UDP-LISTEN:7000 -
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">socat UDP:192.168.31.123:7000 -
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="13-调试-tls-协议" class="headerLink">
    <a href="#13-%e8%b0%83%e8%af%95-tls-%e5%8d%8f%e8%ae%ae" class="header-mark"></a>1.3 调试 TLS 协议</h4><blockquote>
<p>参考 socat 官方文档：<a href="http://www.dest-unreach.org/socat/doc/socat-openssltunnel.html" target="_blank" rel="noopener noreffer">Securing Traffic Between two Socat Instances Using SSL</a></p>
</blockquote>
<blockquote>
<p>测试证书及私钥的生成参见 <a href="https://thiscute.world/posts/about-tls-cert/" rel="">写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议</a></p>
</blockquote>
<p>模拟一个 mTLS 服务器，监听 4433 端口，接收到的数据同样输出到 stdout：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># socat 需要使用同时包含证书和私钥的 pem 文件，生成方法如下</span>
</span></span><span class="line"><span class="cl">cat server.key server.crt &gt; server.pem
</span></span><span class="line"><span class="cl">cat client.key client.crt &gt; client.pem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 服务端启动命令</span>
</span></span><span class="line"><span class="cl">socat openssl-listen:4433,reuseaddr,cert<span class="o">=</span>server.pem,cafile<span class="o">=</span>client.crt -
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 客户端连接命令</span>
</span></span><span class="line"><span class="cl">socat - openssl-connect:192.168.31.123:4433,cert<span class="o">=</span>client.pem,cafile<span class="o">=</span>server.crt
</span></span><span class="line"><span class="cl"><span class="c1"># 或者使用 curl 连接(我们知道 ca.crt 和 server.crt 都能被用做 cacert/cafile)</span>
</span></span><span class="line"><span class="cl">curl -v --cacert ca.crt --cert client.crt --key client.key --tls-max 1.2 https://192.168.31.123:4433
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的命令使用了 mTLS 双向认证的协议，可通过设定 <code>verify=0</code> 来关掉客户端认证，示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># socat 需要使用同时包含证书和私钥的 pem 文件，生成方法如下</span>
</span></span><span class="line"><span class="cl">cat server.key server.crt &gt; server.pem
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 服务端启动命令</span>
</span></span><span class="line"><span class="cl">socat openssl-listen:4433,reuseaddr,cert<span class="o">=</span>server.pem,verify<span class="o">=</span><span class="m">0</span> -
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 客户端连接命令，如果 ip/域名不受证书保护，就也需要添加 verify=0</span>
</span></span><span class="line"><span class="cl">socat - openssl-connect:192.168.31.123:4433,cafile<span class="o">=</span>server.crt
</span></span><span class="line"><span class="cl"><span class="c1"># 或者使用 curl 连接，证书无效请添加 -k 跳过证书验证</span>
</span></span><span class="line"><span class="cl">curl -v --cacert server.crt https://192.168.31.123:4433
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="2-数据传输" class="headerLink">
    <a href="#2-%e6%95%b0%e6%8d%ae%e4%bc%a0%e8%be%93" class="header-mark"></a>2. 数据传输</h2><p>通常传输文件时，我都习惯使用 scp/ssh/rsync，但是 socat 其实也可以传输文件。</p>
<p>以将 demo.tar.gz 从主机 A 发送到主机 B 为例，
首先在数据发送方 A 执行如下命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># -u 表示数据只从左边的地址单向传输给右边（socat 默认是一个双向管道）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -U 和 -u 相反，数据只从右边单向传输给左边</span>
</span></span><span class="line"><span class="cl">socat -u open:demo.tar.gz tcp-listen:2000,reuseaddr
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在数据接收方 B 执行如下命令，就能把文件接收到：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">socat -u tcp:192.168.1.252:2000 open:demo.tar.gz,create
</span></span><span class="line"><span class="cl"><span class="c1"># 如果觉得太繁琐，也可以直接通过 stdout 重定向</span>
</span></span><span class="line"><span class="cl">socat -u tcp:192.168.1.252:2000 - &gt; demo.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 netcat 也可以实现数据传输：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 先在接收方启动服务端</span>
</span></span><span class="line"><span class="cl">nc -l -p <span class="m">8080</span> &gt; demo.tar.gz
</span></span><span class="line"><span class="cl"><span class="c1"># 再在发送方启动客户端发送数据</span>
</span></span><span class="line"><span class="cl">nc 192.168.1.2 <span class="m">8080</span> &lt; demo.tar.gz
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="3-担当临时的-web-服务器" class="headerLink">
    <a href="#3-%e6%8b%85%e5%bd%93%e4%b8%b4%e6%97%b6%e7%9a%84-web-%e6%9c%8d%e5%8a%a1%e5%99%a8" class="header-mark"></a>3. 担当临时的 web 服务器</h2><p>使用 <code>fork</code> <code>reuseaddr</code> <code>SYSTEM</code> 三个命令，再用 <code>systemd</code>/<code>supervisor</code> 管理一下，就可以用几行命令实现一个简单的后台服务器。</p>
<p>下面的命令将监听 8080 端口，并将数据流和 web.py 的 stdio 连接起来，可以直接使用浏览器访问 <code>http://&lt;ip&gt;:8080</code> 来查看效果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">socat TCP-LISTEN:8080,reuseaddr,fork SYSTEM:<span class="s2">&#34;python3 web.py&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>假设 <code>web.py</code> 的内容为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;hello world&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>那 <code>curl localhost:8080</code> 就应该会输出 <code>hello world</code></p>
<h2 id="4-端口转发" class="headerLink">
    <a href="#4-%e7%ab%af%e5%8f%a3%e8%bd%ac%e5%8f%91" class="header-mark"></a>4. 端口转发</h2><p>监听 8080 端口，建立该端口与 <code>baidu.com:80</code> 之间的双向管道:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">socat TCP-LISTEN:8080,fork,reuseaddr  TCP:baidu.com:80
</span></span></code></pre></td></tr></table>
</div>
</div><p>拿 curl 命令测试一下，应该能正常访问到百度：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 注意指定 Host</span>
</span></span><span class="line"><span class="cl">curl -v -H <span class="s1">&#39;Host: baidu.com&#39;</span> localhost:8080
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/347722248" target="_blank" rel="noopener noreffer">新版瑞士军刀：socat - 韦易笑 - 知乎</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/83959309" target="_blank" rel="noopener noreffer">用好你的瑞士军刀/netcat - 韦易笑 - 知乎</a></li>
<li><a href="http://www.dest-unreach.org/socat/" target="_blank" rel="noopener noreffer">socat - Multipurpose relay</a></li>
</ul>
]]></content></entry><entry><title type="html">脚踏实地，仰望星空</title><link href="https://thiscute.world/posts/no-more-dreams/"/><id>https://thiscute.world/posts/no-more-dreams/</id><author><name>ryan4yin</name></author><published>2021-02-13T10:32:56+08:00</published><updated>2021-02-13T10:32:56+08:00</updated><content type="html"><![CDATA[<!-- 每个人的一生都是一次远行 -->
<meting-js server="netease" type="song" id="176048" theme="#448aff"></meting-js>
<blockquote>
<p>本文可能充斥着学生型思维，请谨慎阅读&hellip;</p>
</blockquote>
<h2 id="年轻真好" class="headerLink">
    <a href="#%e5%b9%b4%e8%bd%bb%e7%9c%9f%e5%a5%bd" class="header-mark"></a>年轻真好</h2><p>最近看了些前辈们的博客，很多是在计算机行业工作几十年的前辈，还有许嵩的文章。</p>
<p>我更深刻地认识到了一件事：我当下的很多文章，都能看得出我在很认真的思考、总结，但是总是有很明显的稚嫩的感觉在里面——我自认为这是「学生型思维」。</p>
<p>我总是喜欢讲「且行且寻」、「自己的眼界还太狭窄了，我对世界还很缺乏了解」、「根本看不清好坏，就无法独立做出决策」诸如此类。</p>
<p>我把这样的文章写出来，前辈们给我留言「博主只是沉淀的时间还远远不够。憋着急，年轻就是最大的资本。」、「只想说年轻真好，使劲折腾才知道要什么东西」。</p>
<p>嗯，我理解到了，因为我「<strong>年轻</strong>」，所以写出这样的文章没问题，可以使劲去折腾、去探索、去思考。</p>
<h2 id="三十而立" class="headerLink">
    <a href="#%e4%b8%89%e5%8d%81%e8%80%8c%e7%ab%8b" class="header-mark"></a>三十而立</h2><blockquote>
<p>子曰：吾，十有五，而志于学，三十而立，四十而不惑，五十而知天命，六十而耳顺，七十而从心所欲，不逾矩。</p>
</blockquote>
<p>孔子说：“我十五岁立志学习，三十岁在人生道路上站稳脚跟，四十岁心中不再迷惘，五十岁知道上天给我安排的命运，六十岁听到别人说话就能分辨是非真假，七十岁能随心所欲地说话做事，又不会超越规矩。”</p>
<p>「四十而不惑」对我而言可能还太远，但「三十而立」却是已经能预见到了的，没几年了。</p>
<p><strong>三十而立，人到了三十岁，就应该知道自己如何立身处世，尘世滚滚中能守住自己的一点本真不失</strong>。</p>
<p>三十岁，已不是一个年轻的年纪了。</p>
<p><strong>如果我到了三十岁，还去写些「自己的眼界还太狭窄了，我对世界还很缺乏了解」、「我根本看不清好坏，很多时候无法独立做出决策」，那就贻笑大方了</strong>。</p>
<p>所以即使说「年轻就是最大的资本」，也不是能随意挥霍的。</p>
<p>人生这条道路上我们踽踽独行，道阻且长，眼光要放长远一点、多看一点，不要把自己限制住了，更不应该原地踏步。</p>
<h2 id="许嵩我没有梦想" class="headerLink">
    <a href="#%e8%ae%b8%e5%b5%a9%e6%88%91%e6%b2%a1%e6%9c%89%e6%a2%a6%e6%83%b3" class="header-mark"></a>许嵩——我没有梦想</h2><p>这两天看多了前辈们的博客，就想找点非虚构的书藉看看，补充点阅历。</p>
<p>昨天向朋友们讨书看，@rea.ink 就给我推荐许嵩的《海上灵光》。意外地发现了<a href="http://blog.sina.com.cn/vae" target="_blank" rel="noopener noreffer">许嵩的新浪博客</a>。</p>
<p>博客的内容都很老了，最新的一篇是 2013 年。但是这并不妨碍其中见解的价值</p>
<div class="details admonition reference open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>海上灵光——许嵩<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>以前媒体问我接下来有什么计划或梦想时我总是很愣的回答，我没有梦想。</p>
<p>真的，一个年过半百的人还把梦想这种字眼挂在嘴上是很乏味的。</p>
<p>睁大眼看看眼前的生活，周遭的一切吧。</p>
<p>脚踏实地认真过好每一天的生活吧。</p>
<p>至于心底的信念——是决计不必拿出来高谈阔论的。</p>
</div>
        </div>
    </div>
<div class="details admonition reference open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>出离心——许嵩<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>这几个月，走过了不少地方。</p>
<p>每到一处，采访我的媒体通常会有这么一问：你的音乐理想是什么？</p>
<p>而当答案是“我从来没有理想”时，我迎接那些错愕的眼神。</p>
<p>年轻的时候，拥有一些世俗的念想（比如声名远播？）、一些物质上的期待（比如大房子好车子？）、一些精神上的憧憬（比如寻得佳偶？）、一些相对崇高的目标（比如造福子孙？！），似乎的确能让一些人更有动力的过活每一天。</p>
<p>但如果，岁月在你脸上已然留下不少年轮——你坐船的动机仍然只是到达一座岛，别人把岛上的一切美妙和宝藏说给你听就可以让你划船划的更带劲儿——那我能对你说些什么呢？</p>
</div>
        </div>
    </div>
<h2 id="池建强你老了" class="headerLink">
    <a href="#%e6%b1%a0%e5%bb%ba%e5%bc%ba%e4%bd%a0%e8%80%81%e4%ba%86" class="header-mark"></a>池建强——你老了</h2><p>这两天读到了一篇池建强写的<a href="http://macshuo.com/?p=1491" target="_blank" rel="noopener noreffer">《你老了》</a>，作者是极客时间创始人，真的是年过半百的技术人了。</p>
<div class="details admonition reference open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>你老了 - 池建强的随想录<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>40 以后，不惑是不可能的，恐慌是与日俱增的。四十不惑，说得不是你想明白了，而是你想不明白的，可能就想不明白了，生日变成另一种仪式，它严肃的告诉你，同学，不要有任何幻想了，接受这个现实，你已经不再年轻了。再卖萌也改变不了这个事实。</p>
<p>人们总会长大，成熟，衰老，一如万事万物。今何在说，人从一出生开始，就踏上了自己的西游路，一路向西，到了尽头，就是虚无，人就没了。所有人都不可避免要奔向那个归宿，你没办法选择，没办法回头。</p>
</div>
        </div>
    </div>
<div class="details admonition reference open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>你老了 - 池建强的随想录<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><p>你跳不出这个世界，是因为你不知道这个世界有多大，一旦你知道了，你就超出了它。</p>
<p>年龄也是如此。</p>
</div>
        </div>
    </div>
<h2 id="梦想不要多的想看世界也不是靠说的" class="headerLink">
    <a href="#%e6%a2%a6%e6%83%b3%e4%b8%8d%e8%a6%81%e5%a4%9a%e7%9a%84%e6%83%b3%e7%9c%8b%e4%b8%96%e7%95%8c%e4%b9%9f%e4%b8%8d%e6%98%af%e9%9d%a0%e8%af%b4%e7%9a%84" class="header-mark"></a>梦想不要多的，想看世界也不是靠说的</h2><p>既然说了要多走走看看，那就多看多想。</p>
<p>就像许嵩写的那样，不必去高谈阔论什么理想与信念，实际行动才是最有力的证明。</p>
<blockquote>
<p>Keep eyes on the stars, and feet on the ground.</p>
</blockquote>
]]></content></entry><entry><title type="html">我在创业公司做技术一年多的一点体会</title><link href="https://thiscute.world/posts/end-of-the-first-round/"/><id>https://thiscute.world/posts/end-of-the-first-round/</id><author><name>ryan4yin</name></author><published>2021-02-06T08:46:46+08:00</published><updated>2021-02-06T08:46:46+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>2022-02-09 更新：2022 年再回看这篇文章，明显感觉到我的进步很大很大，不论是工作文化与环境、薪资、吃喝玩乐、还是接触到的线上环境规模都有了质的变化，详情见 <a href="https://thiscute.world/posts/2021-summary/" target="_blank" rel="noopener noreffer">2021 年总结</a>。
目前对自己的认知更清晰了，期待 2022 年我能「更上一层楼」哈哈~</p>
</blockquote>
<blockquote>
<p>2021-09-04 更新：在新公司认识到了自己技术、方法论、思维模式等多方面的不足。
这篇文章的部分内容让我觉得有点羞耻&hellip;不过就这样吧，毕竟这确实是我当时的所思所想&hellip;</p>
</blockquote>
<h2 id="人有悲欢离合月有阴晴圆缺" class="headerLink">
    <a href="#%e4%ba%ba%e6%9c%89%e6%82%b2%e6%ac%a2%e7%a6%bb%e5%90%88%e6%9c%88%e6%9c%89%e9%98%b4%e6%99%b4%e5%9c%86%e7%bc%ba" class="header-mark"></a>人有悲欢离合，月有阴晴圆缺</h2><p>今年年底的时候，自己心思摇摆不定，这影响到了我的工作，顺势就向公司提出了离职。</p>
<p>这两三天和老板、技术经理，还包括公司比较强的同事们，都做了一番沟通。
这一是公司希望我能够认同公司的路线和理念，跟着一条道往前走。二呢我也很想知道，老板、技术经理、还有技术骨干们，为什么能这么坚定不疑？为什么这么拼？</p>
<p>结果是我和公司都发现，我们不是一路人，观念存在冲突。公司的技术骨干们都是创业思维，他们或者乐在其中，或者愿意为了老板描述的未来忍一时痛苦。他们都愿意为了产品付出更多。
但是我发现对公司，我不愿意付出太多。在这里，我一直就是个普通上班族的想法，高点工资，多点个人时间，做着自己喜欢的事情。</p>
<p>于是我火速离职。当天办完交接，签完离职协议，拿着离职协议和离职证明，光速撤退。</p>
<p>这是我毕业后的第一份工作，2019 年 6 月底入职，在公司呆了一年多，学到了很多东西，绝不仅仅只是技术。因此我觉得自己有必要做一个技术以外的总结。</p>
<p><del>任何一家公司都有好有坏，但是按照惯例，这篇文章会避而不谈公司不好的东西</del>。公司的名称呢，这里就用 W 来代替吧。</p>
<p>因为有前辈在博客园评论里为 W 公司感到可惜，在开始正题之前，还是先说下离职原因。
其实说来也简单，基本都能猜到：工资超低、画饼充饥、鼓励无意义加班、技术能力到了瓶颈，以及技术能力提升使我信心膨胀。</p>
<h2 id="自我认识" class="headerLink">
    <a href="#%e8%87%aa%e6%88%91%e8%ae%a4%e8%af%86" class="header-mark"></a>自我认识</h2><p>我刚进 W 公司时，是一个刚毕业的小白，只是兴趣使然喜欢技术。因为专业不同，周围也接触不到多少搞技术的，就比较「独」。</p>
<p>在 W 公司我获得了和一群有上进心的人们互相协作的机会，大家在一步一步往前走的感觉，让我在职期间一直非常快乐。</p>
<p>我们的技术经理也给了 DevOps 团队足够的自由，甚至是鼓励我们去探索、尝试新技术。这是我这一年多 DevOps 这个方向进步这么快的最大原因。</p>
<p>然后在和技术经理、同事们坦诚沟通的时候，我也了解到了<strong>自己的能力，不仅仅在技术。我对公司的价值，也绝不仅仅在技术。</strong>
这是我以前从来没有想过的，我喜欢技术，而且找工作发现职位要求也都是写的技术，我真的就一直以为技术就是一切。</p>
<blockquote>
<p>这里我尤其要感谢技术经理，是他帮我把自己对公司的价值和不足分析得如此透彻。</p>
</blockquote>
<p>下面是我结合经理和同事对我的评价，对我个人能力做个评估（三人行必有我师，仅供参考）：</p>
<ul>
<li><strong>理解能力、洞察能力</strong>：在公司，我这方面的能力是拔尖的。和人交流，我经常能很快地把握住核心。</li>
<li><strong>表达能力</strong>：我的表达能力也是公司里拔尖的。同事跟我讲，听我描述一条鱼，他能清晰地看到鱼的骨头。
<ul>
<li>其实我日常写博客时，经常觉得自己表达地不够好，很多人的文章就比我写得更好。不同的角度看到的东西真的区别很大，感谢我的同事们。</li>
</ul>
</li>
<li><strong>探索能力</strong>：我日常喜欢逛 github，翻 CNCF Landscape，我的兴趣驱动着自己去探索各种新技术，思考它们的优劣。
<ul>
<li>但是我的大部分同事们都不是这样的，很多同事只读中文文档和博客，英文也必须依赖不怎么靠谱的翻译。
另外他们工期紧业务多，也没我们 DevOps 这边这么多的时间去探索试用新技术。</li>
<li>因此，我的探索能力要强于大多数同事。</li>
</ul>
</li>
<li><strong>全局思考能力</strong>: 放眼全局、思考未来，在众多选择中能够并且敢于做出决策。我目前还很缺乏这样的能力。
<ul>
<li>说到底我目前还是个普通人的思路，没有把自己放在决策者的位置上去思考。</li>
<li>其次呢，我的知识面还太窄，导致我根本看不清好坏，很多时候就无法独立做出决策。我需要扩大自己的知识面。</li>
</ul>
</li>
<li><strong>技术能力</strong>：我的技术能力在公司里能评到 80 分吧。我技术不算好，基础薄弱，但是在我们一个小创业公司内部比较，能到 80 分。</li>
<li><strong>管理能力</strong>：DevOps 就两三人，因为我具有上面这些能力，矮个子里拔高的，理所当然地我成了领头的。但是性格使然，我管理能力是公司最差的&hellip;</li>
<li><strong>创业思维</strong>：公司是创业公司，技术骨干们都是创业思维。但是说实话我从来没想过要去创业，不愿意投入太多。这也是我离职的原因。</li>
</ul>
<p>因此，技术经理认为，我可能更适合当讲师哈哈。</p>
<p>在公司也确实给同事们讲过几次课，能够看到同事们高兴地鼓掌，告诉我「讲得可以」，我就很开心。这种心情就和有人在我博客里评论「感谢，很有帮助」是一样的。</p>
<h2 id="我的收获" class="headerLink">
    <a href="#%e6%88%91%e7%9a%84%e6%94%b6%e8%8e%b7" class="header-mark"></a>我的收获</h2><p>首先技术就不用说了，从我这一年多的博客文章就能看到，我的技术进步相当大。</p>
<p>还有就是提升了对自我的认识，这一点前面也已经阐述过了。</p>
<p>那其他方面我收获了啥呢？大概有下面这些：</p>
<ol>
<li>我发现，技术经理几十年的技术经验和生活经历，能让他不了解的技术领域中，也能快速找出真正有价值的东西。——<strong>经验和阅历给了他强大的洞察能力</strong>。</li>
<li>技术产品中最有价值的东西，也最难看透的东西，并不是技术本身，而是理念、抽象。比如 DevOps、基础设施即代码、云计算、开源。
<ul>
<li>这很难，但是能领先所有人，最先发现这些宏观概念的价值，并押注的人，就能获得巨大的先手优势。</li>
<li>但是「世人大都愚昧」，或者说「太过聪明」，导致这类创业团队可能和社会格格不入。不论成功失败，这类永远是少数人。</li>
</ul>
</li>
<li>理性的沟通是好的，但是有时候情绪化的沟通反而更有效果。
<ul>
<li>我们技术经理是一个超级理性的人，但是我和他沟通，他的想法并不能很好的传达给我。反而情绪化的老板跟我沟通，我更能感同身受。</li>
</ul>
</li>
<li>我认识了形形色色的人，公司的同事、领导，很多都有值得我学习的地方。有些感悟
<ul>
<li>富二代不在意钱，没普通人这么斤斤计较，只在意公司氛围，以及自己能做什么。反而更愿意付出更多，能够乐在其中，也更容易成功。创业公司大概很喜欢这类人。</li>
<li>世界上大部分人都是普通人。大众认同的观点，不一定就是正确的观点。大众观点的变化也能体现出社会的变迁。
<ul>
<li>比如当年大跃进全民的狂热，和现在公司倡导 996，社会舆论则积极反抗。公司和民众站在了对立面。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>除了上面这些虚的，还有更实在的：</p>
<ol>
<li><strong>快乐</strong>：经理为人相当好，同事之间合作大都也很愉快，人事小姐姐超级专业，无微不至地照顾我们。在职期间我收获了相当多的快乐。</li>
<li><strong>自信心</strong>：我进公司之前，作为一个跨专业的小白，非常没有底气，而且在学校的时候整个人非常颓废。但是在 W 公司，我学到了技术，工作乐在其中，还收获了同事和领导的肯定。我建立起了自信心。</li>
<li><strong>Money</strong>: 虽然不多，但是我好歹也是个有些闲钱了的人hhh</li>
</ol>
<h2 id="未来" class="headerLink">
    <a href="#%e6%9c%aa%e6%9d%a5" class="header-mark"></a>未来</h2><p>毕业后，第一份工作就这样结束了。有点仓促，因为很出乎意料，但细想下来也是情理之中。</p>
<p>下面就是过年了，过年呢，就照着既有的计划来吧，继续提升下技术能力。<strong>至少对目前的我而言，技术还是我的能力基础和找工作的最大依仗，其他能力目前还是在围绕技术成长</strong>。</p>
<p>年后准备找下一份工作。这一次，我希望能多走一走，看一看，不着急做决定。</p>
<p>我觉得自己的眼界还太狭窄了，我对世界还很缺乏了解。以至于很多东西，我根本无法作出评判。</p>
<p>既然现在跳出了一座我的「围城」，自然要去多看看，外面的世界是个啥样子。</p>
<p>或许也没什么区别？那也得看过才能下结论啊（笑</p>
<h2 id="文末" class="headerLink">
    <a href="#%e6%96%87%e6%9c%ab" class="header-mark"></a>文末</h2><p>文章的最后，祝大家、也祝我自己在 2021 年里——</p>
<blockquote>
<p>拆破玉笼飞彩凤，顿开金锁走蛟龙。</p>
</blockquote>
]]></content></entry><entry><title type="html">曾经的我</title><link href="https://thiscute.world/history/"/><id>https://thiscute.world/history/</id><author><name>ryan4yin</name></author><published>2021-02-01T14:14:35+08:00</published><updated>2021-02-01T14:14:35+08:00</updated><content type="html"><![CDATA[<p>记录下我的学习轨迹。</p>
<h3 id="2022-08-11---2022-08-14" class="headerLink">
    <a href="#2022-08-11---2022-08-14" class="header-mark"></a>2022-08-11 - 2022-08-14</h3><ul>
<li>拿 VISA 信用卡开了个 Azure 云的试用账户，研究了一波。
<ul>
<li>给 <a href="https://thiscute.world" target="_blank" rel="noopener noreffer">https://thiscute.world</a> 加了个 Azure 的 Front Door 作为 vercel 的前置 CDN，发现效果出奇的好！现在站点访问速度跟国内服务器基本没差了，即使缓存不命中，回源速度也特别得快！
<ul>
<li>不过价格也比较感人，也只有试用阶段才舍得用。</li>
</ul>
</li>
<li>据说 Azure CDN (Microsoft Standard) 在国内虽然比 Front Door 差一点，但是速度也要强过 CloudFalre/CloudFront，试用期之后可以试试。
<ul>
<li>算了下 Azure CDN 一个月可能也就 $10 出头，数据即使丢在 Azure Blob Storage 对象存储里，以我不到 1G 的总数据量一个月才不到 $1，完全可以接受。</li>
</ul>
</li>
<li>堪称免备案站点加速方案中的战斗机！</li>
</ul>
</li>
<li>选 Azure 本来只是因为工作天天接触 AWS/GCP，想试用下全球排名第二的 Azure 是个啥感觉，结果意外发现它的国际 CDN 在国内这么快。</li>
<li>当然 Azure 的坑也多，我遇到的有
<ul>
<li>资源的删除操作存在各种延迟。比如列表还显示该资源，点进去又提示 not available，提示删除失败，但是点进页面资源又已经没了&hellip;</li>
<li>Azure CDN 的坑
<ul>
<li>不支持通过 CNAME 绑定根域名，这一点官方没有任何文档说明，但是根据<a href="https://arlanblogs.alvarnet.com/adding-a-root-domain-to-azure-cdn-endpoint/" target="_blank" rel="noopener noreffer">这个博客</a>，实际上可以通过添加值为 <code>cdnverify</code> 的 CNAME 记录到 <code>cdnverify.&lt;endpoint-name&gt;.azureedge.net</code>，就可以解决这个报错&hellip;但是即使这样解决了报错信息，仍然存在一个问题——Azure CDN 现在不再给根域名提供 TLS 证书服务，也就是说 HTTPS 没戏了&hellip;</li>
<li>但是 Azure CDN 的上述这些毛病 Azure Front Door 都没有！Azure Front Door 唯一的缺点就是太贵（这或许是我自己的缺点&hellip;）</li>
</ul>
</li>
<li>目录是用的 Active Directory，原生的多租户设计，但是感觉真的好难用啊，跟 AWS/Alicloud 的设计区别很大。</li>
<li>所有资源都是 uuid 这一点，感觉不太友好。</li>
</ul>
</li>
<li>收费：<a href="https://azure.microsoft.com/en-us/pricing/details/virtual-machines/linux/#pricing" target="_blank" rel="noopener noreffer">Azure 的大部分资源价格</a>跟 <a href="https://aws.amazon.com/cn/ec2/pricing/on-demand/" target="_blank" rel="noopener noreffer">AWS</a> 相差无几，都是「平民止步」的定价策略。
<ul>
<li>而且 AWS/Azure/GCP 的出网流量、跨可用区流量都是额外计费的，不像国内云厂商，云服务器跟网络带宽可以绑在一起买。</li>
</ul>
</li>
</ul>
<h3 id="2022-08-06---2022-08-07" class="headerLink">
    <a href="#2022-08-06---2022-08-07" class="header-mark"></a>2022-08-06 - 2022-08-07</h3><ul>
<li>整理与补充今年 5 月份做的学习笔记《分布式数据库的一致性问题与共识算法》，并发表到博客中</li>
<li>极客时间《OpenResty 从入门到实战》
<ul>
<li>目前市面的网关产品中，性能、可定制性、稳定性三者兼得的仍然只有 openresty</li>
<li>新兴的 envoy 等主推 wasm 插件的网关，性能仍然不如 openresty。另外 envoy 虽然也支持 lua，但是它的 lua 环境没有任何预置的 library，远不如 openresty 这样开箱即用</li>
<li>我目前判断，新兴的 envoy/traefik 等网关的优势在于配置语法简单、支持动态配置。但是如果需要写一些复杂的流量处理逻辑，openresty 仍然是最佳选择。</li>
<li>openresty 仍然是最流行的 CDN/软 WAF/边缘网关，在绝大多数公司的网关/CDN 中，都有 openresty 的身影。</li>
</ul>
</li>
</ul>
<h3 id="2022-07-28" class="headerLink">
    <a href="#2022-07-28" class="header-mark"></a>2022-07-28</h3><ul>
<li>研究了一波 Nginx 的配置调优
<ul>
<li>关键点：<code>reuseport</code> <code>aio</code> <code>http2</code> <code>tls1.3</code></li>
<li>相关文章：
<ul>
<li><a href="https://www.nginx.com/blog/performance-tuning-tips-tricks/" target="_blank" rel="noopener noreffer">https://www.nginx.com/blog/performance-tuning-tips-tricks/</a></li>
<li><a href="https://www.nginx.com/blog/tuning-nginx/" target="_blank" rel="noopener noreffer">https://www.nginx.com/blog/tuning-nginx/</a></li>
<li><a href="https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/" target="_blank" rel="noopener noreffer">https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/</a></li>
<li><a href="https://wfhu.gitbooks.io/life/content/chapter7/nginx-enable-reuseport.html" target="_blank" rel="noopener noreffer">【优化】nginx启用reuseport</a></li>
<li><a href="https://github.com/digitalocean/nginxconfig.io" target="_blank" rel="noopener noreffer">digitalocean/nginxconfig.io</a></li>
<li><a href="https://github.com/kubernetes/ingress-nginx" target="_blank" rel="noopener noreffer">kubernetes/ingress-nginx</a></li>
<li><a href="https://github.com/trimstray/nginx-admins-handbook" target="_blank" rel="noopener noreffer">nginx-admins-handbook</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2022-07-26" class="headerLink">
    <a href="#2022-07-26" class="header-mark"></a>2022-07-26</h3><ul>
<li>Misaka 大佬在 twitter 上回复说，ambassador 可能最后会发现都不如 Istio 一把梭
<ul>
<li>仔细想了下还真挺有道理&hellip;毕竟都是 Envoy，而研究一圈发现 ambassador 好像也没比 Istio 多很多功能。目前就看到个不太用得上的 OpenAPI 支持？</li>
</ul>
</li>
</ul>
<h3 id="2022-07-25" class="headerLink">
    <a href="#2022-07-25" class="header-mark"></a>2022-07-25</h3><ul>
<li>今天研究了下 CNCF 中的 API 网关
<ul>
<li>目前发现 ambassador 的文档是比较不错的，我关心的点（Istio 集成、HTTP/3、Gateway API）都有写到，值得研究一波。</li>
<li>目前就找到这么两个 Istio 网关的潜在替代品：ambassador 跟之前研究过的 APISIX</li>
<li>其他的网关项目有的是功能上不太契合、有的是性能差了点、还有的是不够成熟度或者活跃度不够。</li>
</ul>
</li>
</ul>
<h3 id="2022-07-23---2022-07-24" class="headerLink">
    <a href="#2022-07-23---2022-07-24" class="header-mark"></a>2022-07-23 - 2022-07-24</h3><ul>
<li>Nginx Gateway 进展
<ul>
<li>在 AWS NLB 上添加 TLS 终止，遇到 AWS NLB 的 TLS 流量费用高、而且 Nginx 无法通过 <code>X-Forwarded-Proto</code> 判断客户端协议的问题
<ul>
<li>解决方法：使用 cert-manager 在 Nginx 中进行 TLS 终止，AWS NLB 改为纯 TCP</li>
<li>需要注意在 Nginx 上配置使用 OCSP stapling 等 TLS 性能优化手段，并淘汰掉旧的 TLS 协议与 ciphers.</li>
</ul>
</li>
</ul>
</li>
<li>研究了一波 cert-manager 通过 ACME 申请权威证书，并绑定到 Istio IngressGateeway 或者其他网关上</li>
</ul>
<h3 id="2022-06-29---2022-07-22" class="headerLink">
    <a href="#2022-06-29---2022-07-22" class="header-mark"></a>2022-06-29 - 2022-07-22</h3><ul>
<li>实施网关优化方案，使用 Go 语言写了一个 Nginx Gateway 控制器
<ul>
<li>目标：
<ul>
<li>将目前运行在虚拟机上的 Nginx 搬到 K8s 中运行，通过 Istio Sidecar 接入服务网格，并取代掉当前的 Istio IngressGateway 网关</li>
<li>使用 AWS NLB 作为 Nginx 的前置负载均衡器</li>
</ul>
</li>
<li>功能：包含 Nginx 配置同步与 Reload、AccessLog 日志文件的收集与上传</li>
<li>使用 kubernetes/client-go 监控 configmap/pod 的变动
<ul>
<li>watch 接口不会处理网络问题，失败会直接断开连接，实践中不建议直接使用它！</li>
<li>更建议使用 informer，这是一个带缓存的接口，底层是使用 watch 接口 + 队列实现，而且会自动处理网络问题（自动重连），也提供接口强制更新本地缓存</li>
</ul>
</li>
<li>体验：
<ul>
<li>是第一次用 Go 语言写项目，体验还不错，编译期检查跟语法提示比 Python 强多了</li>
</ul>
</li>
<li>遇到的问题与解决方法
<ul>
<li>Nginx 无法解析 K8s 内部域名
<ul>
<li>解决方法：在 <code>http</code> 配置块中添加 <code>resolver kube-dns.kube-system.svc.cluster.local valid=10s;</code> 即可，另外所有 k8s 域名都得使用 FQDN 形式，因为 Nginx 不会使用搜索域配置！</li>
</ul>
</li>
<li>客户端 Host 透传：改用 <code>X-Forwarded-Host</code>，而原 <code>Host</code> Header 仅供 Istio/Nginx 用于流量管理。同时在流量走到 Istio SIDECAR_OUTBOUND 时，再通过 Envoy 参数 <code>host_rewrite_header: X-Forwarded-Host</code> 将 Host rewrite 回来。</li>
<li>安全组问题：为了获取客户端 IP 需要在 NLB 上启用客户端 IP 透传，但是这样会导致流量被内网安全组拒绝！
<ul>
<li>解决方法：在 Nginx 所在的 EC2 上添加安全组，允许公网 IP 访问其 http/https 端口即可</li>
</ul>
</li>
<li>使用 aws-load-balancer-controller 绑定 IP 模式的 NLB，发现 pod 被重新调度会导致请求超时！
<ul>
<li>相关 issue: <a href="https://github.com/kubernetes-sigs/aws-load-balancer-controller/issues/2366" target="_blank" rel="noopener noreffer">pod termination might cause dropped connections</a></li>
<li>解决方法：在 pod 上设置 350s 的 preStop 以及对应的 terminationGracePeriodSeconds，确保所有请求都能被正常处理！</li>
</ul>
</li>
<li>Nginx 注入 Istio Sidecar 后，响应头里带了些 <code>x-envoy-</code> 开头的不必要 headers
<ul>
<li>解决方法：参见 <a href="https://github.com/ryan4yin/knowledge/blob/master/kubernetes/service_mesh/istio/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md#%E5%85%ADistio-%E5%8E%BB%E9%99%A4%E5%93%8D%E5%BA%94-headers" target="_blank" rel="noopener noreffer">Istio 去除响应 Headers</a></li>
</ul>
</li>
<li>Istio Sidecar 性能很差，Nginx 与 Sidecar 的 CPU 比值接近 1:2.3
<ul>
<li>解决方法：为 pod 添加 annotation <code>traffic.sidecar.istio.io/includeInboundPorts: &quot;&quot;</code>，即可禁用掉 Istio Sidecar 的 inbound 流量拦截。</li>
</ul>
</li>
<li>AWS NLB 跨可用区负载均衡会收跨区流量费
<ul>
<li>解决方法：关闭跨区负载均衡功能，不同可用区的 Nginx 使用不同的 Deployment+HPA+PDB，就是都独立进行扩缩容。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>2022/7/20，Leader 告诉我，我上半年的表现出乎他的意料，综合表现上看，得到的绩效评价是 S，第一次拿 S，还是挺开心的。
<ul>
<li>我的优点：
<ul>
<li>善于观察与思考，真正做到了目标驱动，积极挖掘各种可能性。</li>
<li>善于将优秀前沿技术落地并取得价值，能够不盲从、玩的转、有落地。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2022-06-22" class="headerLink">
    <a href="#2022-06-22" class="header-mark"></a>2022-06-22</h3><ul>
<li>The ANSI C Programming Language - 83/236
<ul>
<li>快速过一遍语法</li>
</ul>
</li>
</ul>
<h3 id="2022-06-16--2022-06-17" class="headerLink">
    <a href="#2022-06-16--2022-06-17" class="header-mark"></a>2022-06-16 ~ 2022-06-17</h3><ul>
<li>研究云上网关及 Kubernetes 集群的网络架构优化方案
<ul>
<li>从之前的「多云+多集群网络方案」，先简化为各集群互相独立的网络方案，之后再往多集群、多云等方向去迭代（迂回策略）。
<ul>
<li>将遗留的 Nginx 网关直接移到 K8s 集群内，并注入 Sidecar 以接入 Istio 服务网格，由 Sidecar 帮助 Nginx 实现集群内的服务发现、流量切分、多集群支持等能力。好处是遗留的一堆 Nginx 配置基本不需要什么改动，改造难度低，收益明显（动态扩缩容的 Nginx、更短的网关链路、更简洁的配置）。后续还可以逐渐切换到新的 API 网关提升可维护性。</li>
<li>Nginx 可以通过云服务商提供的 L4 负载均衡（如 AWS NLB）暴露到公网，也可以自建 keepalived 高可用方案（自己整个 Pod 动态注册控制器，或者搞套静态的节点组都行），不过要注意跨区流量，网关最好是每个可用区单独部署一套，互相隔离。</li>
<li>相当于暂时使用 Nginx+Sidecar 彻底取代掉 Istio 的 IngressGateway。讲道理 Istio 的 IngressGateway 功能还是有点弱</li>
<li>等这个方案实施后，我们可能会考虑使用 APISIX/Traefik 或其他基于 Envoy 的网关来取代掉这个容器化后的 Nginx。目的是提供更简单的网关配置方法，当前写 Nginx 配置的方式还是不太友好。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2022-06-13" class="headerLink">
    <a href="#2022-06-13" class="header-mark"></a>2022-06-13</h3><ul>
<li><a href="https://man7.org/tlpi/" target="_blank" rel="noopener noreffer">Linux/Unix 系统编程手册（上册）</a> - 进度 21/572</li>
<li>感觉最近学东西有点随心所欲，东一榔头西一棒槌，感觉自己还在找方向吧。不过 Linux 跟 Kubernetes 开发这两件事应该能坚持下来。</li>
</ul>
<h3 id="2022-06-11" class="headerLink">
    <a href="#2022-06-11" class="header-mark"></a>2022-06-11</h3><ul>
<li>《语言学的邀请》- 进度 68/288
<ul>
<li>感觉解答了一些我以前的对人类的一些疑惑</li>
</ul>
</li>
<li>《Intimate Relationship》 - 14/449
<ul>
<li>读了文化对亲密关系的影响</li>
</ul>
</li>
<li>跟堂弟大谈如何怀揣理想，平实生活，一点点地进步。
谈我们这一代，我想不必悲观也不必绝望，我们的未来由我们自己创造。
有学术大佬们走在学术前沿，有技术高手们工作在工程一线，我们也完全有能力去做一些有价值的事情，赚更多的钱，也帮助更多的人。</li>
</ul>
<h3 id="2022-06-10" class="headerLink">
    <a href="#2022-06-10" class="header-mark"></a>2022-06-10</h3><ul>
<li>读完了《在生命的尽头拥抱你-临终关怀医生手记》
<ul>
<li>读这本书时，我也在持续回忆我的爷爷奶奶。很难去说明我从这本书中读懂了啥，本质上我只是想从这本书中找到一些慰藉，顺便了解下「死亡」，大概确实部分达成了目标。</li>
</ul>
</li>
</ul>
<h3 id="2022-06-09" class="headerLink">
    <a href="#2022-06-09" class="header-mark"></a>2022-06-09</h3><ul>
<li>买了一千多块钱的书，最近陆续到货了，现在还差一本《我的青春恋爱物语果然有问题——原画集》
<ul>
<li>多买了一本罗翔老师的《圆圈正义》，打算送给堂弟</li>
</ul>
</li>
<li>阅读了《Intimate Relationships》的第一小节
<ul>
<li>了解了人类社会性动物的本质，这可以用进化论解释——越社会性的个体存活率越高，基因也越容易传续。</li>
<li>亲密关系的建立是很容易的，「你是我的唯一」更多的是一种浪漫的说法，只是「因为刚好遇到你」而已。</li>
<li>一旦建立了亲密关系，我们就会抗拒这份亲密关系的解离。当亲密关系遭遇危机时，我们会茶不思饭不想。</li>
<li>在 Youtube 上搜了下 Intimate Relationships，找了几个相关的 TED Talks 看了看。</li>
<li>还找到 UCLA 一个比较老的课程：<a href="https://www.youtube.com/playlist?list=PLexCQI5fHYIdeWyOSJBclmFL8i4bkBT4H" target="_blank" rel="noopener noreffer">Intimate Relationships: Undergraduate Lectures at UCLA</a>，可以跟书一起看看。</li>
</ul>
</li>
</ul>
<h3 id="2022-06-08" class="headerLink">
    <a href="#2022-06-08" class="header-mark"></a>2022-06-08</h3><ul>
<li>折腾一晚上博客的 Hugo 跟 DoIt 主题
<ul>
<li>发现本地生成出的站点，mermaid 跟 music 两个插件的问题莫名其妙修复了，怀疑跟今天跑了一波 <code>brew upgrade</code> 有关</li>
<li>但是云上 github action 跟 vercel 都还有问题，同样的命令同样的 hugo 版本，本地生成的静态文件 mermaid 跟 aplay 正常加载，云上生成的就有问题，也是醉了&hellip;</li>
</ul>
</li>
</ul>
<h3 id="2022-06-05--2022-06-06" class="headerLink">
    <a href="#2022-06-05--2022-06-06" class="header-mark"></a>2022-06-05 ~ 2022-06-06</h3><ul>
<li>观看 <a href="https://www.youtube.com/playlist?list=PLj6h78yzYM2MCEgkd8zH0vJWF7jdQ-GRR" target="_blank" rel="noopener noreffer">KubeCon + CloudNativeCon 2022</a> 中我比较感兴趣的部分
<ul>
<li>主要关注与当前工作相关的点：多云管理、多集群（karmada）管理与应用部署、跨集群网络（Istio）、API 网关</li>
<li>有一些收获，但是都是比较浅的，只能提供个别方向的一些思路，主要还是得靠自己探索。</li>
</ul>
</li>
<li>研究了一波 dapr，理念很先进，但是发现很多功能都还处于 alpha 阶段，不太适合向业务侧推广，继续观望吧。</li>
</ul>
<h3 id="2022-05-30--2022-06-02" class="headerLink">
    <a href="#2022-05-30--2022-06-02" class="header-mark"></a>2022-05-30 ~ 2022-06-02</h3><ul>
<li>研究跨云应用部署方案，如 karmada/kubevela
<ul>
<li>以 karmada 为代表的多集群 Deployment/Service 管理，需要一个控制面集群+多个子集群
<ul>
<li>配置只往控制面集群部署，karmada 负责按配置在子集群中创建或更新对应的资源</li>
</ul>
</li>
</ul>
</li>
<li>研究多云+多集群网络方案
<ul>
<li>以 Istio 为代表的多集群服务网格，部署模型之一也是控制面集群+多个子集群
<ul>
<li>配置只往控制面集群部署，istio 会将配置下发到数据面的 sidecar 与 gateway，完成相应的网络配置</li>
</ul>
</li>
<li>其他的如 karmada 等也集成了一些集群间的网络打通方案，但是感觉都还不太成熟</li>
<li>cilium 的 service mesh 也是一个潜在的多云 k8s 网络方案，但是还处于 beta 状态，有待观望</li>
</ul>
</li>
<li>研究云上 L4/L7 层网关的开源/商业方案
<ul>
<li>如 L4 的 dpvs/katran 与 L7 的 APISIX/Traefik/Contour，以及 AWS Gateway LoadBalancer</li>
<li>暂时认为云上 L4 还是直接使用云服务商的方案最合适，没必要自己搭</li>
<li>L7 为了支持多集群切量，同时尽量缩短链路，目前感觉使用 Istio 最合适</li>
</ul>
</li>
<li>研究各跨云网络方案（L7 负载均衡（ADC）、SD-WAN、WireGuard、服务网格等）：
<ul>
<li>一是多云之间相互隔离，但是长远看不太现实</li>
<li>二是多云使用不冲突的 CIDRs 作为它们的 VPC 网段，然后使用 VPN 把多云网络直接串起来</li>
<li>三是直接在多云上搭建一套 overlay 网络，完全屏蔽掉不同云之间的网络差异
<ul>
<li>仅针对 k8s 的方案主要是 kilo，基于 wireguard 直接通过公网实现 overlay 网络，但是感觉时延很可能难以接受，还是得用 VPN 才行。</li>
<li>整个云通用的方案目前只有部分供应商在做，而且不开源，有 vendor lock-in 的可能，而且不清楚封装出的具体效果如何</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2022-05-29" class="headerLink">
    <a href="#2022-05-29" class="header-mark"></a>2022-05-29</h3><ul>
<li><a href="https://github.com/d2l-ai/d2l-zh" target="_blank" rel="noopener noreffer">动手学深度学习 - Pytorch 版</a> - 14.3%
<ul>
<li>学习第二章：预备知识
<ul>
<li>微积分：复习了单变量函数的微分（导数） =&gt; 多变量函数的偏微分，单变量函数的斜率 =&gt; 多变量函数的梯度（梯度，即函数 $f(x)$ 关于输入向量 $x$ 的所有偏微分组成的一个向量）
<ul>
<li>深度学习模型的训练，即搜索出使损失函数的值最小的模型参数。而梯度下降是应用最广泛的一种损失函数优化方法。</li>
<li>梯度下降，即始终朝着损失函数的梯度值下降的方向进行模型参数的搜索</li>
<li>深度学习中的多元（变量）函数通常是复合的，而链式法则 $\frac{dy}{dx} = \frac{dy}{du} \frac{du}{dx}$ 使我们能够微分复合函数。</li>
</ul>
</li>
<li>自动微分：为了计算梯度我们必须要对函数进行求导，而手工求复杂函数的导数不仅容易出错，而且函数的更新也过于繁琐。深度学习框架通过提供自动微分能力解决这个问题。
<ul>
<li>实际上，深度学习框架会构建一个计算图（computational graph）用于跟踪所有数值是由哪些操作生成的，有了这个计算图后，我们还可以通过数值反向去更新每个参数的偏导数，这被称为反向传播（backpropagate）。</li>
<li>自动微分的另一个好处是，即使输入函数是一个由代码定义的黑箱，根本不清楚它的具体表达式，仍然可以通过反向传播自动计算出它的微分。</li>
</ul>
</li>
<li>概率论：
<ul>
<li>采样</li>
<li>随机变量的分析方法：联合分布、条件分布、Bayes 定理、边缘化、独立性假设</li>
<li>概率分布的关键特征度量方式：期望、平方差/标准差</li>
</ul>
</li>
</ul>
</li>
<li>学习第三章：线性神经网络
<ul>
<li>线性回归模型是一个简单的单层神经网络，只有输入与输出两层</li>
<li>学习了「从零开始实现线性回归」的一小部分</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2022-05-28" class="headerLink">
    <a href="#2022-05-28" class="header-mark"></a>2022-05-28</h3><ul>
<li><a href="https://github.com/d2l-ai/d2l-zh" target="_blank" rel="noopener noreffer">动手学深度学习 - Pytorch 版</a> - 10.6%
<ul>
<li>学习第二章：预备知识
<ul>
<li>通过搜索 cheat sheet + 《Python for Data Analysis》学了下 Numpy/Pandas/Matplotlib 的使用方法</li>
<li>复习线性代数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2022-05-24" class="headerLink">
    <a href="#2022-05-24" class="header-mark"></a>2022-05-24</h3><ul>
<li><a href="https://github.com/d2l-ai/d2l-zh" target="_blank" rel="noopener noreffer">动手学深度学习 - Pytorch 版</a> - 7.8%
<ul>
<li>完成第一章前言，了解了深度学习是机器学习的一个分支，机器学习的用途、分类，深度学习的简单原理及优势，近十年此领域的爆炸式发展</li>
<li>监督学习、无监督学习、强化学习</li>
<li>音视频数据生成领域的重要方法：GAN</li>
</ul>
</li>
</ul>
<h3 id="2022-05-24-1" class="headerLink">
    <a href="#2022-05-24-1" class="header-mark"></a>2022-05-24</h3><ul>
<li>分布式系统与区块链
<ul>
<li>极客时间《分布式协议与算法实战》 - 40%</li>
</ul>
</li>
<li>AI
<ul>
<li>被 ACE 深度学习歌声合成激励到了，花了近两个小时简单学了点吴恩达的机器学习课程、微软的 ML for beginners，李沐的《动手深度学习》</li>
<li>明确了目标是「快速学习，暂时只是为了玩一玩」，确定我应该通过《动手深度学习 - Pytorch》入门。</li>
</ul>
</li>
</ul>
<h3 id="2022-05-24-2" class="headerLink">
    <a href="#2022-05-24-2" class="header-mark"></a>2022-05-24</h3><ul>
<li>极客时间《分布式协议与算法实战》 - 36%</li>
</ul>
<h3 id="2022-05-22---2022-05-23" class="headerLink">
    <a href="#2022-05-22---2022-05-23" class="header-mark"></a>2022-05-22 ~  2022-05-23</h3><ul>
<li>学习<a href="https://github.com/ryan4yin/knowledge/blob/master/blockchain/%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E4%B8%8E%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95.md" target="_blank" rel="noopener noreffer">分布式系统的一致性问题与共识算法</a> 并记录笔记
<ul>
<li>极客时间《分布式协议与算法实战》 - 22%</li>
</ul>
</li>
</ul>
<h3 id="2022-05-20" class="headerLink">
    <a href="#2022-05-20" class="header-mark"></a>2022-05-20</h3><ul>
<li>学习极客时间的《深入剖析 Kuberntes》 - 100%
<ul>
<li>学完后第一次做测验，拿了 50 分，陷入自我怀疑 emmmm</li>
<li>容器运行时
<ul>
<li>Kubelet 控制循环 <code>SyncLoop</code> 绝对不会阻塞，任何长时间任务都会创建新的 goroutine 来异步执行</li>
<li>CRI 的接口非常简单宽松，给予了底层容器运行时足够大的自定义空间</li>
</ul>
</li>
<li>云原生的发展方向
<ul>
<li>Kubernetes 的强大之处：<strong>声明式 API</strong> 和以此为基础的<strong>控制器模式</strong>、<strong>将「政治」与「技术」拆分开的社区运作模式</strong></li>
<li>Kubernetes 生态与传统 PaaS 的区别：Kubernetes 提供了基础设施层能力（编排、调度、资源管理等），使得其上的 PaaS 可以专注于应用服务和发布流程管理这两个最核心的功能，开始向更轻、更薄、更以应用为中心的方向进行演进。从而 Serverless 开始蓬勃发展</li>
<li>Serverless 的本质：高可扩展性、工作流驱动、按用量计费</li>
<li>「云原生」是一个使用户能低心智负担的、敏捷的，以可扩展、可复制的方式，最大化利用“云”的能力、发挥“云”的价值的一条最佳路径。</li>
</ul>
</li>
</ul>
</li>
<li>学习<a href="https://github.com/ryan4yin/knowledge/blob/master/blockchain/%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E4%B8%8E%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95.md" target="_blank" rel="noopener noreffer">分布式系统的一致性问题与共识算法</a> 并记录笔记
<ul>
<li>一致性问题的核心是「ACID 理论中的事务一致性」，与「CAP 理论中的数据一致性」
<ul>
<li>数据一致性又分为强一致性与弱一致性，而弱一致性的最低限度就是最终一致性：数据最终会一致（再低就永远不会一致了）</li>
<li>最终一致性太模糊，具体实现上往往会最加上一些限定，得到许多一致性模型：读自己写一致性/写后读一致性、单调读一致性、前缀一致性、线性一致性、因果一致性</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2022-05-19" class="headerLink">
    <a href="#2022-05-19" class="header-mark"></a>2022-05-19</h3><ul>
<li>学习极客时间的《深入剖析 Kuberntes》 - 87%
<ul>
<li>简单学习了 CRD + Controller 的编写，包含 Informer 机制等。不过内容太老了，还是之后看 Programming Kubernetes 再详细学吧。</li>
<li>K8s API 资源的组织方式为 <code>api/&lt;apiGroup&gt;/&lt;GroupVersion&gt;/&lt;Resource&gt;</code>，yaml 中的 <code>apiVersion</code> 为 <code>&lt;apiGroup&gt;/&lt;GroupVersion&gt;</code>，而 <code>Kind</code> 的值就是 <code>&lt;Resouce&gt;</code>
<ul>
<li>Pod/Node/configmap 等几个核心资源的 <code>&lt;apiGroup&gt;</code> 为空，因此可以直接省略掉</li>
<li>其他核心资源都是以功能分类的，都有 <code>&lt;apiGroup&gt;</code> 属性</li>
</ul>
</li>
<li>RBAC 是以 Role 为授权的基本单位，<code>Role</code> 的规则会指定用户对不同 apiGroups/Resources/resourceNames 可以执行哪些动作 <code>verbs</code>
<ul>
<li>apiGroups/Resources 属性跟前面介绍的 API 资源的组织方式是完全对应的，但是 Resources 需要使用复数形式，如 <code>pods</code>/<code>configmaps</code>/<code>nodes</code></li>
<li>如果是核心资源如 Pod/Node，则 <code>apiGroups</code> 应该设为空字符串 <code>apiGroups: [&quot;&quot;]</code></li>
</ul>
</li>
<li>RoleBinding/ClusterRoleBinding 有两个部分：<code>subjects</code> 被作用者，以及 <code>roleRef</code>，用于声明这两者之间的绑定关系
<ul>
<li><code>subjects</code> 被作用者可以是集群内的 ServiceAccount，也可以是外部定义的对象如 <code>User</code></li>
<li><code>User</code> 在集群中是一个不存在的对象，它的认证需要一台外部系统</li>
</ul>
</li>
<li>RBAC 中还存在 <code>Groups</code> 用户组的概念
<ul>
<li>比如任意名字空间中所有 serviceaccount 的用户组，名称为 <code>system:serviceaccounts:&lt;Namespace名字&gt;</code></li>
<li>每个 serviceAccount 的全名为 <code>system:serviceaccount:&lt;Namespace名字&gt;:&lt;ServiceAccount名字&gt;</code></li>
<li>我们可以在 subjects 中填写一个用户组，为整个用户组内所有的 ServiceAccount 授权</li>
</ul>
</li>
<li>Kubernetes 中默认已经内置了多个 clusterrole，可通过 <code>kubectl get clusterroles</code> 查看
<ul>
<li>开发测试时，我们可能会经常用的一个 clusterrole 就是 <code>cluster-admin</code>，这个 role 拥有整个集群的最高权限，相当于 root，非开发测试环境一定要谨慎使用它。</li>
<li><code>view</code>/<code>edit</code> 这两个 clusterrole 分别拥有整个集群的查看/编辑权限</li>
</ul>
</li>
<li>Kubernetes 存储
<ul>
<li>存储的两个绑定阶段：
<ul>
<li>第一阶段（AttachDetachController，运行在 kube-controller-manager 中），K8s 将 nodeName 传递给存储插件，插件将数据卷 attach 到该节点上</li>
<li>第二阶段（VolumeManagerReconciler，运行在 kubelet 中），K8s 将 dir 传递给存储插件，插件将数据卷挂载到该目录下（如果是新数据卷还会提前格式化该卷）。</li>
</ul>
</li>
<li>云上 K8s 存储的一个缺陷：无法跨可用区调度。如果你通过 affinity 强制把一个 p8s 调度到别的可用区，因为它的数据卷不在目标可用区，这会导致它无法被调度，卡在 Pending 状态。</li>
<li>学习了已被废弃的 FlexVolume 的实现方式，以及它的替代者 CSI</li>
<li>以 <a href="https://github.com/digitalocean/csi-digitalocean" target="_blank" rel="noopener noreffer">csi-digitalocean</a> 为例，学习了一个 CSI 插件的实现原理</li>
</ul>
</li>
<li>Kubernetes 调度
<ul>
<li>根据容器的 requests/limits 参数，k8s 将 Pod 分为三种类型：BestEffort Burstable Guaranteed</li>
<li>在因为资源不足而触发驱逐 Evection 时，会按 BestEffort =&gt; Burstable =&gt; Guaranteed 的顺序进行驱逐</li>
<li>当 Pod 中所有容器的 requests/limits 都相等的时候，Pod 的 QoS 等级为 Guaranteed
<ul>
<li><strong>如果这时容器的 cpu requests 为整数值，K8s 会自动为容器进行绑核操作，这可以大幅提升容器性能，常用在在线应用场景下</strong></li>
<li>疑问：如果 istio sidecar requests/limits 不相等，但是应用容器是设的相等的，这种情况下是否会执行绑核操作呢？</li>
</ul>
</li>
<li>Pod 的优先级与抢占机制
<ul>
<li>首先创建不同优先级的 PriorityClass，然后为 Pod 指定 priorityClassName</li>
<li>调度失败的 Pod 会被放到 unschedulableQ 中，这会触发调度器为这些调度失败的 Pod 寻找牺牲者的逻辑</li>
<li>基于优先级与抢占机制，创建一些优先级为 -1 的占位 Pod，可以实现为整个集群预留一部分资源。这种方法被称为<a href="https://aws.amazon.com/cn/blogs/china/improve-eks-elastic-scaling-efficiency-through-overprovisioning/" target="_blank" rel="noopener noreffer">「Pod 空泡」资源预留法</a>。</li>
</ul>
</li>
<li>Device Plugin: 负责管理集群中的所有硬件加速设备如 GPU/FPGA 等
<ul>
<li>Device Plugin 只能基于「数量」进行调度，无法进行更复杂的异构调度策略，比如「运行在算力最强的节点上」</li>
</ul>
</li>
<li>日志与监控：对我来讲，没什么新东西</li>
<li>容器运行时
<ul>
<li>gVisor - 在用户态重新实现了一遍 Linux ABI 接口、网络协议栈，启动速度跟资源占用小。但是工程量大，维护难度大，对于系统调用密集的应用，性能会急剧下降。</li>
<li>kata containers: 据说是性能比较差，运行了一个真正的 Linux 内核与 QEMU 虚拟设备实现强隔离</li>
<li>aws firecrackers: 跟 kata containers 的思路一致，但是使用 rust 实现了自己的 vmm，性能更高</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2022-05-15" class="headerLink">
    <a href="#2022-05-15" class="header-mark"></a>2022-05-15</h3><ul>
<li>了解到 2021 年是区块链投资大涨的一年，总投资涨了 7 倍多到了 252 亿美元，NFT 更离谱直接从 2020 年的 37m 涨到 4802m 美元，感觉确实非常有前景
<ul>
<li>数据来源 <a href="https://www.cbinsights.com/research/report/blockchain-trends-2021/" target="_blank" rel="noopener noreffer">State Of Blockchain 2021 Report - CB Insights Research</a></li>
</ul>
</li>
<li>分两次从币安转了 0.01 ETH + 0.05 ETH 到 Ethereum，币安收了固定手续费 0.0016 ETH * 2
<ul>
<li>购买 ENS 域名 thiscute.eth 10 年并设为我的主域名，花了约 0.027 ETH，算上 gas 费一共花了 0.0321 ETH 也就是 67 刀</li>
</ul>
</li>
<li>给自己再次整了一个 mirror.xyz 账号，有了 ENS 就是爽。</li>
<li>但是发现我现有的几个域名如 thiscute.world，其实可以直接通过 DNSSEC 导入到 ENS，感觉血亏 0.027 ETH&hellip;</li>
<li>阅读郭宇最近写的<a href="https://guoyu.mirror.xyz/RD-xkpoxasAU7x5MIJmiCX4gll3Cs0pAd5iM258S1Ek" target="_blank" rel="noopener noreffer">《Web3 DApp 最佳编程实践指南》</a>
<ul>
<li>晚上去测核酸的路上还参与了他开的一个 twitter space 聊 web3 开发，发言的很多大佬，很多干货。</li>
<li>也明确了，目前区块链还处于战国时代，百家争鸣</li>
</ul>
</li>
<li>再次确认今年学习路线，精简与调整之前年度的计划（之前的计划太多了搞不定，而且当时没排区块链）
<ul>
<li>先学好分布式原理与算法这块</li>
<li>然后是 Kubernetes 编程，同时结合极客兔兔的几个教程深入学习 Go</li>
<li>深入学下 Go 语言底层</li>
<li>搞一搞区块链</li>
<li>学习 C 语言</li>
<li>通过 TLPR 学习 Linux 系统</li>
<li>通过 CS144 系统学习计算机网络</li>
</ul>
</li>
</ul>
<h3 id="2022-05-14" class="headerLink">
    <a href="#2022-05-14" class="header-mark"></a>2022-05-14</h3><ul>
<li>阅读 <a href="https://www.zhihu.com/special/1452635344142909440" target="_blank" rel="noopener noreffer">Web 3.0：穿越十年的讨论 - 知乎</a> 系列内容，了解 Web 3.0</li>
<li>阅读 <a href="https://github.com/dcbuild3r/blockchain-development-guide" target="_blank" rel="noopener noreffer">dcbuild3r/blockchain-development-guide</a>，了解如何进行区块链开发
<ul>
<li>我把这个 guide 完整过了一遍（后面关于自我提升、社会影响力啥的仅走马观花看了看），真的好长的一篇文章啊。</li>
<li>很多干货，现在我对搞区块链开发要学的东西，认知更清晰了。</li>
</ul>
</li>
</ul>
<h3 id="2022-05-12" class="headerLink">
    <a href="#2022-05-12" class="header-mark"></a>2022-05-12</h3><ul>
<li>迭代博客内容《关于 NAT 网关、NAT 穿越以及虚拟网络》- 90%
<ul>
<li>真的低估了 NAT 网关与 NAT 穿越技术的知识量，又折腾了一个晚上，文章还没完成&hellip;</li>
<li>5/9 的时候我就觉得文章已经完成了 90%，结果今天又折腾了一晚上迭代了大量内容，现在感觉文章的进度还不到 90%&hellip;越学发现自己懂得越少</li>
</ul>
</li>
</ul>
<h3 id="2022-05-11" class="headerLink">
    <a href="#2022-05-11" class="header-mark"></a>2022-05-11</h3><ul>
<li>学习极客时间的《深入剖析 Kuberntes》 - 53%
<ul>
<li>学习了 NetoworkPolicy、kube-proxy 的实现原理，其实都是用 iptables 实现的，原理挺简单的。</li>
<li>不过 kube-proxy 很早就支持了 ipvs 模式，它在大规模场景下比 iptables 性能更好一些。但是 AWS EKS 目前官方仍然并不支持 ipvs 模式，打开可能会有坑。</li>
</ul>
</li>
<li>极客时间《分布式协议与算法实战》 - 4%
<ul>
<li>过了一遍常见共识算法的名字：两阶段提交、Try-Confirm-Cancel、Paxos、ZAB、Raft、Gossip、PBFT、PoW、PoS、dPoS</li>
<li>过了一遍上述共识算法的特性：是否支持拜占庭容错、支持哪种程度的一致性、性能、高可用性</li>
</ul>
</li>
<li>了解了一些区块链相关公司的方向，区块链开发岗位的要求</li>
<li>还研究了一波性能测试工具：grafana/k6</li>
</ul>
<h3 id="2022-05-09" class="headerLink">
    <a href="#2022-05-09" class="header-mark"></a>2022-05-09</h3><ul>
<li>学习极客时间的《深入剖析 Kuberntes》 - 48%
<ul>
<li>复习了 Linux 虚拟网络接口以及容器网络原理、学习了 CNI 网络插件的原理</li>
<li>学习了两个 underlay 网络实现：flannel 的 host-gw 模式实现原理、calico 基于 BGP 的实现原理</li>
<li>calico 在跨 vlan 时需要使用 IPIP，学习了相关原理</li>
</ul>
</li>
<li>完成博客《关于 NAT 网关、NAT 类型提升、NAT 穿透以及虚拟网络》- 90%
<ul>
<li>简单研究了 Go 的 STUN/TURN/ICE 库，以及 coturn server</li>
</ul>
</li>
<li>简单学习了零知识证明的应用，zk-SNARKs，区块链混币服务，以及拜占庭将军问题</li>
</ul>
<h3 id="2022-05-08" class="headerLink">
    <a href="#2022-05-08" class="header-mark"></a>2022-05-08</h3><ul>
<li>完成博客《关于 NAT 网关、NAT 类型提升、NAT 穿透以及虚拟网络》
<ul>
<li>已发布，但是还有些细节需要填充，另外还需要补些示意图</li>
</ul>
</li>
</ul>
<h3 id="2022-05-06" class="headerLink">
    <a href="#2022-05-06" class="header-mark"></a>2022-05-06</h3><ul>
<li>学习极客时间专栏《深入浅出 Kubernetes》 - 37%
<ul>
<li>主要学了下 Pod 的结构、名字空间共享等细节信息，这部分我以前只了解个大概</li>
<li>集群安装、Deployment、StatefulSet、Service 这几个部分我都已经比较熟了，走马观花看了看。</li>
<li>粗略过了下目录，其中对我而言最有价值的，应该就是容器网络、调度器、容器运行时</li>
</ul>
</li>
</ul>
<h3 id="2022-05-05" class="headerLink">
    <a href="#2022-05-05" class="header-mark"></a>2022-05-05</h3><ul>
<li>学习极客时间专栏《深入浅出 Kubernetes》 - 20%
<ul>
<li>Kubernetes 与其他败北的编排工具比，最大的优势在于它的设计思想：
<ul>
<li>从更宏观的角度，以统一的方式来定义任务之间的各种关系（最底层是 Pod 与 PV，之上是各种控制器、亲和反亲和、拓扑扩散、自定义控制器，网络侧有 service，底层网络插件等等），并为将来支持更多种类的关系留有余地（开放、强大的自定义能力催生出了丰富的生态）</li>
<li>基于状态的声明式配置，由控制器负责自动达成期望的状态</li>
</ul>
</li>
</ul>
</li>
<li>研究 FinOps 与 kubecost，总结工作上的经验，完成一篇 Kubernetes 成本分析的文章 - 100%</li>
</ul>
<h3 id="2022-05-02" class="headerLink">
    <a href="#2022-05-02" class="header-mark"></a>2022-05-02</h3><ul>
<li>学习<a href="https://geektutu.com/post/gee.html" target="_blank" rel="noopener noreffer">Go语言动手写Web框架</a> - 进度 20%</li>
</ul>
<h3 id="2022-05-01" class="headerLink">
    <a href="#2022-05-01" class="header-mark"></a>2022-05-01</h3><ul>
<li>研究 FinOps 与 kubecost，完成一篇 Kubernetes 成本分析的文章 - 50%</li>
</ul>
<h3 id="2022-04-26---2022-04-28" class="headerLink">
    <a href="#2022-04-26---2022-04-28" class="header-mark"></a>2022-04-26 - 2022-04-28</h3><ul>
<li>学习极客时间专栏《深入浅出 Kubernetes》，复习容器技术（Namespace/Cgroups/rootfs）
<ul>
<li>Docker 最核心的创新：
<ul>
<li>将 rootfs 打包到镜像中，使镜像的运行环境一致（仅与宿主机共享内核）</li>
<li>使用 Dockerfile 描述镜像的打包流程，使构建出的镜像可预期、可重新生成</li>
</ul>
</li>
</ul>
</li>
<li>2022-04-28 调薪结果出来了，突然觉得身心都有点累了，有点惆怅。总之还是继续努力吧，技术才是我的核心竞争力，少管他什么妖风邪雨。</li>
</ul>
<h3 id="2022-04-25" class="headerLink">
    <a href="#2022-04-25" class="header-mark"></a>2022-04-25</h3><ul>
<li>完成了 19 年创建的 go 项目：https://github.com/ryan4yin/video2ascii</li>
<li>失眠，半夜随便翻了翻，把《Go 程序设计语言（英文版）》走马观花过了一遍</li>
<li>阅读 <a href="https://programming-kubernetes.info/" target="_blank" rel="noopener noreffer">Programming Kubernetes - Developing Cloud Native Applications</a> - 进度 7%
<ul>
<li>主要是通过案例讲解 CRD Operator Controller 等 Kubernetes 编程技术</li>
</ul>
</li>
</ul>
<h3 id="2022-04-24" class="headerLink">
    <a href="#2022-04-24" class="header-mark"></a>2022-04-24</h3><ul>
<li>阅读《Go 程序设计语言（英文版）》 - 进度 90%
<ul>
<li>目前还剩两章未读：反射 reflection 与底层编程 unsafe/uintptr</li>
</ul>
</li>
</ul>
<h3 id="2022-04-22---2022-04-23" class="headerLink">
    <a href="#2022-04-22---2022-04-23" class="header-mark"></a>2022-04-22 - 2022-04-23</h3><ul>
<li>阅读《Go 程序设计语言（英文版）》 - 进度 72%
<ul>
<li>主要完成了 goroutines/channels 以及「并发与变量共享 sync」两个章节</li>
</ul>
</li>
</ul>
<h3 id="2022-04-21" class="headerLink">
    <a href="#2022-04-21" class="header-mark"></a>2022-04-21</h3><ul>
<li>多抓鱼买的一批新书到手了，大致读了下几本书的前几页。
<ul>
<li>目前比较感兴趣的有：《复杂》、《陈行甲人生笔记》、《原则 - 应对变化中的世界秩序》、《这才是心理学》</li>
<li>打算首先读《复杂》</li>
</ul>
</li>
<li>使用 <a href="https://github.com/kubernetes/autoscaler" target="_blank" rel="noopener noreffer">kubernetes/autoscaler</a> 实现集群弹性扩缩容
<ul>
<li>发现社区的这个工具（简称 CA），确实没 aws 出品的 karpenter 好用。</li>
<li>CA 自身的实现很简单，主要是依靠 AWS ASG 实现扩缩容。</li>
<li>而 EKS 的 NodeGroup 说实话做得太垃圾了，底层 ASG 的很多功能它都不支持，一旦创建很多参数（VPC 参数、实例类型、等等）就无法通过 EKS NodeGroup 变更了。如果越过 EKS NodeGroup 直接修改底层的 ASG 配置，它还会提示「Degraded」说配置不一致，真的是无力吐槽。</li>
</ul>
</li>
</ul>
<h3 id="2022-04-20" class="headerLink">
    <a href="#2022-04-20" class="header-mark"></a>2022-04-20</h3><ul>
<li>《在生命的尽头拥抱你-临终关怀医生手记》 - 进度 73%</li>
<li>使用 <a href="https://github.com/aws/karpenter" target="_blank" rel="noopener noreffer">aws/karpenter</a> 实现集群弹性扩缩容
<ul>
<li>已上线 prod 环境，目前给 EMR on EKS 集群专用。</li>
</ul>
</li>
<li>更新 /now 页面以及 knowledge 的内容</li>
</ul>
<h3 id="2022-04-18" class="headerLink">
    <a href="#2022-04-18" class="header-mark"></a>2022-04-18</h3><ul>
<li>研究使用 <a href="https://github.com/aws/karpenter" target="_blank" rel="noopener noreffer">aws/karpenter</a> 实现集群弹性扩缩容</li>
<li>阅读《Go 程序设计语言（英文版）》 - 进度 53%
<ul>
<li>第 7 章「接口」读了一半，大概 22 pages，预计明天能完成</li>
</ul>
</li>
<li><input disabled="" type="checkbox"> 《<a href="https://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener noreffer">Operating Systems - Three Easy Pieces</a>》
<ul>
<li>读到 Introduction 一章，行文真的很有趣，看 projects 也有深度，决定了要把这本书看完，把习题做好。</li>
<li>OSTEP 后面的部分会涉及 vx6 源码，这要求比较深的 C 语言知识以及 x86 汇编知识，不过这些可以在学到的时候，再做补充。</li>
<li>在需要用到的时候，学习 CSAPP 的 x86 汇编部分会是一个比较好的补充。</li>
</ul>
</li>
</ul>
<h3 id="2022-04-17" class="headerLink">
    <a href="#2022-04-17" class="header-mark"></a>2022-04-17</h3><ul>
<li>阅读《Go 程序设计语言（英文版）》 - 进度 7/13</li>
<li>《在生命的尽头拥抱你-临终关怀医生手记》 - 进度 61%</li>
<li>重新整理书单，放到 /now 页面中</li>
<li>学习 NAT 原理知识</li>
</ul>
<h3 id="2022-04-15--2022-04-16" class="headerLink">
    <a href="#2022-04-15--2022-04-16" class="header-mark"></a>2022-04-15 ~ 2022-04-16</h3><ul>
<li>阅读《Go 程序设计语言（英文版）》 - 进度 5/13</li>
</ul>
<h3 id="2022-04-14" class="headerLink">
    <a href="#2022-04-14" class="header-mark"></a>2022-04-14</h3><ul>
<li>阅读《Go 程序设计语言（英文版）》 - 进度 4/13</li>
</ul>
<h3 id="2022-04-13" class="headerLink">
    <a href="#2022-04-13" class="header-mark"></a>2022-04-13</h3><ul>
<li>阅读《Go 程序设计语言（英文版）》 - 进度 3/13</li>
</ul>
<h3 id="2022-04-10" class="headerLink">
    <a href="#2022-04-10" class="header-mark"></a>2022-04-10</h3><ul>
<li>学习 3D 引擎的使用，简单试用了 unity3d 与 unreal engine 5.
<ul>
<li>确定学习方向：先学学 UE5 蓝图入个门，然后试试把 MMD 模型导入到 UE5 做做动画，中间也会简单接触下 Blender.</li>
<li>感受：UE5 挺不错的，尤其是它还提供 VR 编辑模式，手上的 Quest 2 又能派上用场了</li>
<li>输出文档：<a href="https://github.com/ryan4yin/knowledge/tree/master/graphics" target="_blank" rel="noopener noreffer">3D 图形相关</a></li>
</ul>
</li>
<li>阅读《Go 程序设计语言（英文版）》 - 进度 2/13
<ul>
<li>第一章「导览」大概过了下 Go 的关键特性：完善的工具链，丰富的标准库，goroutine, channel</li>
<li>第二章主要讲程序结构，包含变量、类型声明、指针、结构体、作用域、包与文件结构等等</li>
</ul>
</li>
</ul>
<h3 id="2021-04-08---2021-04-09" class="headerLink">
    <a href="#2021-04-08---2021-04-09" class="header-mark"></a>2021-04-08 - 2021-04-09</h3><ul>
<li>学习区块链技术 Web3.0
<ul>
<li><a href="https://github.com/ethereumbook/ethereumbook" target="_blank" rel="noopener noreffer">Mastering Ethereum</a> - 以太坊入门
<ul>
<li>进度：100%</li>
<li>跳过了智能合约代码相关的内容，因为代码比较老了，新版本的 solidity 有了许多新变化。</li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=M576WGiDBdQ" target="_blank" rel="noopener noreffer">Youtube - Solidity, Blockchain, and Smart Contract Course – Beginner to Expert Python Tutorial</a>
<ul>
<li>这个视频及相关的 Github 仓库，包含一些区块链可视化以及相关的介绍，更适合学习完理论后，实战合约编写</li>
</ul>
</li>
<li><a href="https://github.com/yeasy/blockchain_guide" target="_blank" rel="noopener noreffer">区块链技术指南</a>: 《Docker - 从入门到实践》作者的新书，内容同样简洁易懂，侧重介绍原理及知识面，非常棒。</li>
</ul>
</li>
</ul>
<h3 id="2021-03-26---2021-04-01" class="headerLink">
    <a href="#2021-03-26---2021-04-01" class="header-mark"></a>2021-03-26 - 2021-04-01</h3><ul>
<li>学习区块链技术 Web3.0
<ul>
<li><a href="https://github.com/ethereumbook/ethereumbook" target="_blank" rel="noopener noreffer">Mastering Ethereum</a> - 以太坊入门
<ul>
<li>进度：7/14</li>
<li>这书适合用于学习理论，solidity 开发相关的内容可以跳过，即 7/8 两章</li>
</ul>
</li>
<li><a href="https://www.youtube.com/watch?v=M576WGiDBdQ" target="_blank" rel="noopener noreffer">Youtube - Solidity, Blockchain, and Smart Contract Course – Beginner to Expert Python Tutorial</a>
<ul>
<li>这个视频及相关的 Github 仓库，包含一些区块链可视化以及相关的介绍，更适合学习完理论后，实战合约编写</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2021-03-23---2021-3-25" class="headerLink">
    <a href="#2021-03-23---2021-3-25" class="header-mark"></a>2021-03-23 - 2021-3-25</h3><ul>
<li>阅读《在生命的尽头拥抱你-临终关怀医生手记》</li>
<li>在 Manager 的帮助下申请职级晋升（初级 =&gt; 中级 SRE）
<ul>
<li>再一次认识到我自己写的文字有多么随意&hellip; Manager 帮我提炼补充后，文字变得言简意赅，精确客观，瞬间高大上档次了。</li>
</ul>
</li>
</ul>
<h3 id="2021-03-22" class="headerLink">
    <a href="#2021-03-22" class="header-mark"></a>2021-03-22</h3><ul>
<li>注册<a href="https://www.aplaybox.com" target="_blank" rel="noopener noreffer">模之屋</a>，简单学了下 MMD 跟 <a href="https://www.blender.org/" target="_blank" rel="noopener noreffer">Blender</a></li>
</ul>
<h3 id="2021-03-15---2021-03-19" class="headerLink">
    <a href="#2021-03-15---2021-03-19" class="header-mark"></a>2021-03-15 - 2021-03-19</h3><ul>
<li>学习 Envoy，完成 <a href="https://github.com/ryan4yin/knowledge/tree/master/network/proxy%26server/envoy" target="_blank" rel="noopener noreffer">Envoy 笔记</a></li>
</ul>
<h3 id="2021-03-11---2021-03-14" class="headerLink">
    <a href="#2021-03-11---2021-03-14" class="header-mark"></a>2021-03-11 - 2021-03-14</h3><ul>
<li>《写给开发人员的实用密码学》
<ul>
<li>完成第七篇「非对称加密算法」的 ECC 部分，并为 RSA 部分补充了部分 Python 代码</li>
<li>将去年写的文章《TLS 协议、TLS 证书、TLS 证书的配置方法、TLS 加密的破解手段》改写并补充内容，改名为《写给开发人员的实用密码学（八）—— 数字证书与 TLS 协议》</li>
<li>为第五篇「密钥交换」补充了 DHKE/ECDH 的代码示例，另外还补充了 DHE/ECDHE 一节</li>
<li>此系列文章的其他小修改与润色</li>
</ul>
</li>
<li>业务大佬在 gRPC 的基础上再添加了 gzip 压缩，TX 流量再次下降 80%+
<ul>
<li>侧面说明以前业务侧对 HTTP 的用法是多么豪放 emmmm</li>
<li>周末上 gzip 压缩功能，业务大佬太肝了啊&hellip;</li>
</ul>
</li>
</ul>
<h3 id="2022-03-09" class="headerLink">
    <a href="#2022-03-09" class="header-mark"></a>2022-03-09</h3><ul>
<li>发布《写给开发人员的实用密码学》系列第七篇：非对称加密算法，但是暂时只完成了 RSA 部分</li>
</ul>
<h3 id="2022-03-07---2022-03-08" class="headerLink">
    <a href="#2022-03-07---2022-03-08" class="header-mark"></a>2022-03-07 - 2022-03-08</h3><ul>
<li>跟推荐系统大佬一起将服务从 HTTP 切换到 gRPC，效果立竿见影，服务流量下降 50% ~ 60%，延迟下降 30% ~ 50%
<ul>
<li>提升了服务性能，降低了 AWS 跨区流量成本</li>
</ul>
</li>
</ul>
<h3 id="2022-03-05---2022-03-06" class="headerLink">
    <a href="#2022-03-05---2022-03-06" class="header-mark"></a>2022-03-05 - 2022-03-06</h3><ul>
<li>发布《写给开发人员的实用密码学》系列的第六篇：对称加密算法</li>
</ul>
<h3 id="2022-03-01" class="headerLink">
    <a href="#2022-03-01" class="header-mark"></a>2022-03-01</h3><ul>
<li>深圳疫情形式严峻，开始居家办公</li>
<li>整理润色后，发布《写给开发人员的实用密码学》前五篇的内容</li>
</ul>
<h3 id="2022-02-19---2022-02-25" class="headerLink">
    <a href="#2022-02-19---2022-02-25" class="header-mark"></a>2022-02-19 - 2022-02-25</h3><ul>
<li>阅读 <a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical Cryptography for Developers</a>，同时完成我的密码学笔记
<ul>
<li>起因是想学下区块链技术，结果发现课程一开始就讲加密哈希函数的基本性质，就决定先搞一波密码学。</li>
</ul>
</li>
<li>完成了《写给开发人员的实用密码学》前五篇的草稿。</li>
<li><a href="https://github.com/ryan4yin/knowledge/blob/master/kubernetes/service_mesh/istio/Istio%20%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87.md" target="_blank" rel="noopener noreffer">研究 istio 的 gRPC 支持与监控指标</a></li>
</ul>
<h3 id="2022-02-17" class="headerLink">
    <a href="#2022-02-17" class="header-mark"></a>2022-02-17</h3><ul>
<li>发现我们的 EKS 集群主使用的是 AWS Spot 实例，这类实例的 c6i/c6g 性能与价格差距并不高，做 ARM 化的 ROI 貌似并不高</li>
<li>发现对 aws 的 RDS/EC2-Volume/Redis 等资源进行全面评估，删掉闲置资源、缩小实例/集群规格，可以轻易节省大量成本（说明以前申请资源时风格比较豪放 2333）</li>
<li>继续迭代个人博客</li>
</ul>
<h3 id="2022-02-07---2022-02-16" class="headerLink">
    <a href="#2022-02-07---2022-02-16" class="header-mark"></a>2022-02-07 - 2022-02-16</h3><ul>
<li>迭代我的独立博客 <a href="https://thiscute.world" target="_blank" rel="noopener noreffer">https://thiscute.world</a>
<ul>
<li>添加「阅读排行」页，定期从 Google Analytics 同步数据</li>
<li>从博客园迁移部分有价值的文章到独立博客</li>
</ul>
</li>
</ul>
<h3 id="2022-01-08---2022-01-16" class="headerLink">
    <a href="#2022-01-08---2022-01-16" class="header-mark"></a>2022-01-08 - 2022-01-16</h3><ul>
<li>购入 Synthesizer V + 青溯 AI 声库，简单调了几首歌试试，效果非常棒。</li>
<li>也调研了下<a href="https://github.com/ryan4yin/knowledge/tree/master/music/vocal%20synthesizer" target="_blank" rel="noopener noreffer">歌声合成领域目前的进展</a>，试用了免费的移动端软件 <a href="https://www.taptap.com/app/189147?hreflang=zh_CN" target="_blank" rel="noopener noreffer">ACE 虚拟歌姬</a>，渲染效果真的媲美 CNY 999 的 SynthV AI 套装，不得不感叹 AI 的效果真的强啊。</li>
</ul>
<h3 id="2022-01-01" class="headerLink">
    <a href="#2022-01-01" class="header-mark"></a>2022-01-01</h3><ul>
<li>了解 APISIX/Nginx/Envoy 中的各种负载均衡算法，及其适用场景、局限性。</li>
</ul>
<h3 id="2021-12-12" class="headerLink">
    <a href="#2021-12-12" class="header-mark"></a>2021-12-12</h3><ul>
<li>练习二个半小时轮滑，学会了压步转弯技术</li>
<li>无聊，但是又啥都不想干，耽于网络小说&hellip;</li>
<li>感觉有点现充了，感觉需要找个更明确的、能给人动力的目标
<ul>
<li>做个三年的职业规划以及生活规划？</li>
</ul>
</li>
</ul>
<h3 id="2021-11-21" class="headerLink">
    <a href="#2021-11-21" class="header-mark"></a>2021-11-21</h3><ul>
<li>轮滑：复习前双鱼、前剪、前蛇，尝试侧压步、倒滑</li>
</ul>
<h3 id="2021-11-08---2021-11-12" class="headerLink">
    <a href="#2021-11-08---2021-11-12" class="header-mark"></a>2021-11-08 - 2021-11-12</h3><ul>
<li>将上次 EKS 升级过程中，有问题的服务迁移到 1.21 的 EKS 集群，直接切线上流量测试。
<ul>
<li>复现了问题，通过 JFR + pods 数量监控，确认到是服务链路上的个别服务频繁扩缩容导致的，这些服务比较重，对扩缩容比较敏感。</li>
<li>测试在 HPA 中添加 behavior 降低缩容速率，同时添加上 PodDisruptionBudget 以避免节点回收导致大量 Pod 被回收，经测试问题基本解决。</li>
</ul>
</li>
<li>遭遇 AWS EKS 托管的控制平面故障，controller-manager 挂了一整天。现象非常奇怪，又是第一次遇到，导致长时间未排查到问题。
<ul>
<li>确认问题来自 HPA behavior 的 Bug
<ol>
<li>储存于 etcd 中的 object 仅会有一个版本，透过 apiserver 读取时会转换成请求的 autoscaling API 版本。</li>
<li>autoscaling/v2beta2 scaleUp 及 scaleDown 对象不能为 null，并在<a href="https://github.com/kubernetes/kubernetes/blob/6ac2d8edc8606ab387924b8b865b4a69630080e0/pkg/apis/autoscaling/v2/defaults.go#L104" target="_blank" rel="noopener noreffer">其 Kubernetse 代码</a>可以查看到相应的检查机制。</li>
<li>当使用 autoscaling/v1 时，v2beta2 版本中的相关对象字段将作为 annotation 保留，apiserver 不会检查 ScaleUp/ScaleDown 的 annotation是否为 non-null，而导致 kube-controller-manager panic 问题。</li>
<li>我们可以使用 v1 或 v2beta2 创建一个 HPA 对象，然后使用 v1 或 v2beta2 读取、更新或删除该对象。 etcd 中存储的对象只有一个版本，每当您使用 v1 或 v2beta2 获取 HPA 对象时，apiserver 从 etcd 读取它，然后将其转换为您请求的版本。</li>
<li>在使用 kubectl 时，客户端将默认使用 v1(<code>kubectl get hpa</code>)，因此我们必须明确请求 v2beta2 才能使用这些功能(<code>kubectl get hpa.v2beta2.autoscaling</code>)</li>
<li>如果在更新 v1 版本的 HPA 时（kubectl 默认用 v1），手动修改了 v2beta2 功能相关的 annotation 将 scaleUp/scaleDown 设为 null，会导致 controller-manager 挂掉.</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="2021-10-23" class="headerLink">
    <a href="#2021-10-23" class="header-mark"></a>2021-10-23</h3><ul>
<li>跟公司冲浪小分队，第一次玩冲浪，最佳成绩是在板上站了大概 6s&hellip;</li>
</ul>
<h3 id="2021-1011---2021-10-19" class="headerLink">
    <a href="#2021-1011---2021-10-19" class="header-mark"></a>2021-10/11 - 2021-10-19</h3><ul>
<li>将 EKS 集群从 1.17 升级到 1.21（新建集群切量的方式），但是遇到部分服务迁移后可用率抖动。
<ul>
<li>未定位到原因，升级失败，回滚了流量。</li>
</ul>
</li>
</ul>
<h3 id="2021-09-13---2021-09-17" class="headerLink">
    <a href="#2021-09-13---2021-09-17" class="header-mark"></a>2021-09-13 - 2021-09-17</h3><ul>
<li>学习极客时间《10X程序员工作法》
<ul>
<li>以终推始</li>
<li>识别关键问题</li>
<li>ownership</li>
</ul>
</li>
</ul>
<h3 id="2021-09-02---2021-09-11" class="headerLink">
    <a href="#2021-09-02---2021-09-11" class="header-mark"></a>2021-09-02 - 2021-09-11</h3><ul>
<li>EKS 集群升级
<ul>
<li>了解 EKS 集群的原地升级的细节</li>
<li>输出 EKS 集群原地升级的测试方案，以及生产环境的 EKS 集群升级方案</li>
</ul>
</li>
<li>学习使用 kubeadm+containerd 部署 k8s 测试集群
<ul>
<li>涉及到的组件：Kuberntes 控制面、网络插件 Cilium、kube-proxy、coredns、containerd</li>
</ul>
</li>
</ul>
<h3 id="2021-08-31---2021-09-01" class="headerLink">
    <a href="#2021-08-31---2021-09-01" class="header-mark"></a>2021-08-31 - 2021-09-01</h3><ul>
<li>思考我在工作中遇到的一些非技术问题，寻找解法
<ul>
<li>效率：如何在没人 push 的情况下（没有外部压力），维持住高效率的工作状态（早早干完活下班它不香么？）。
<ul>
<li>建立有效的「自检」与「纠错」机制
<ul>
<li>自检：
<ul>
<li>列出目前已知的「异常」和「健康」两类工作状态，每日做一个对比。</li>
<li>每日都列一下详细的工作计划，精确到小时（预留 1 小时 buffer 应对临时需求）。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>沟通：遇到问题（各种意义上的问题）时，及时沟通清楚再继续推进，是一件 ROI 非常高的事。否则几乎肯定会在后面的某个节点，被这个问题坑一把。</li>
<li>目前的关键目标是啥？存在哪些关键问题（实现关键目标最大的阻碍）？我最近做的主要工作，是不是在为关键目标服务？</li>
<li>如何把安排到手上的事情做好？
<ul>
<li>思考这件事情真正的目标的什么？
<ul>
<li>比如任务是排查下某服务状态码有无问题，真正的目的应该是想知道服务有没有异常</li>
</ul>
</li>
<li>达成真正的目标，需要做哪些事？
<ul>
<li>不仅仅状态码需要排查，还有服务负载、内存、延迟的分位值，或许都可以看看。</li>
</ul>
</li>
<li>跟需求方沟通，询问是否真正需要做的，是前面分析得出的事情。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这些问题都是有解法的，关键是思路的转换。</p>
<hr>
<h3 id="2021-08-28--2021-08-29" class="headerLink">
    <a href="#2021-08-28--2021-08-29" class="header-mark"></a>2021-08-28 =&gt; 2021-08-29</h3><ul>
<li>容器底层原理：
<ul>
<li>linux namespace 与 cgroups</li>
<li>linux 虚拟网络接口 macvlan/ipvlan、vlan、vxlan</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2021-08-19--2021-08-23" class="headerLink">
    <a href="#2021-08-19--2021-08-23" class="header-mark"></a>2021-08-19 =&gt; 2021-08-23</h3><ul>
<li>阅读 rust 语言的官方文档：the book</li>
<li>边读文档边做 rustlings 的小习题
<ul>
<li>目前完成了除 macros 之外的所有题</li>
<li>遇到的最难的题：conversions/{try_from_into, from_str}</li>
</ul>
</li>
<li>使用 rust 重写了一版 video2chars</li>
</ul>
<hr>
<h3 id="2021-08-12--2021-08-16" class="headerLink">
    <a href="#2021-08-12--2021-08-16" class="header-mark"></a>2021-08-12 =&gt; 2021-08-16</h3><ul>
<li>Linux 的虚拟网络接口</li>
<li>Linux 的 netfilter 网络处理框架，以及其子项目 iptables/conntrack</li>
</ul>
<hr>
<h3 id="2021-03-11--2021-08-09" class="headerLink">
    <a href="#2021-03-11--2021-08-09" class="header-mark"></a>2021-03-11 =&gt; 2021-08-09</h3><ul>
<li>学习 nginx - openresty - apisix</li>
<li>工作中，在自己负责的领域，建立起 ownership</li>
<li>学习新公司的工作模式：OKR 工作法</li>
<li>学习新公司的思维模式（识别关键问题）
<ul>
<li>如何从公司的角度去思考问题，找到我们目前最应该做的事情</li>
<li>从以下角度去评价一件事情的重要性
<ul>
<li>这件事情对我们目前的目标有多大帮助？</li>
<li>需要投入多少资源和人力？</li>
<li>在推进过程中，有哪些阶段性成果或者 check point？</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>

<div class="animation-wrapper">
  <div class="particle particle-1"></div>
  <div class="particle particle-2"></div>
  <div class="particle particle-3"></div>
  <div class="particle particle-4"></div>
</div>

<style>
   
   

  .animation-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -100;
  }

  .particle,
  .particle:after {
    background: transparent;
  }

  .particle:after {
    position: absolute;
    content: "";
    top: 2560px;
  }

  .particle-1 {
    -webkit-animation: animParticle 60s linear infinite;
    animation: animParticle 60s linear infinite;
    box-shadow: 0px 0px #fff, 1231px 1530px #fff, 336px 2471px #fff,
      2385px 128px #fff, 2436px 1283px #fff, 549px 681px #fff,
      1775px 1144px #fff, 238px 1396px #fff, 1330px 1558px #fff,
      2060px 342px #fff, 1986px 1672px #fff, 1532px 702px #fff,
      1313px 1459px #fff, 2406px 1616px #fff, 1529px 802px #fff,
      1267px 680px #fff, 2258px 2109px #fff, 1325px 22px #fff,
      1578px 1045px #fff, 945px 2256px #fff, 1400px 1441px #fff,
      1652px 2152px #fff, 2513px 969px #fff, 2192px 1352px #fff,
      793px 334px #fff, 1371px 1086px #fff, 2408px 1898px #fff, 475px 840px #fff,
      539px 1108px #fff, 556px 1499px #fff, 643px 122px #fff, 2370px 1975px #fff,
      1196px 1786px #fff, 308px 1834px #fff, 1957px 1569px #fff,
      875px 339px #fff, 562px 412px #fff, 1187px 2258px #fff, 1406px 1824px #fff,
      1172px 1792px #fff, 235px 1489px #fff, 2081px 878px #fff, 925px 176px #fff,
      953px 1829px #fff, 38px 48px #fff, 1976px 1994px #fff, 1524px 1567px #fff,
      1397px 1141px #fff, 2014px 1773px #fff, 1638px 1832px #fff,
      1150px 465px #fff, 1212px 1854px #fff, 122px 20px #fff, 2493px 2361px #fff,
      2221px 194px #fff, 480px 2020px #fff, 2340px 403px #fff,
      1975px 2507px #fff, 1434px 142px #fff, 963px 871px #fff,
      2379px 1765px #fff, 2346px 100px #fff, 1931px 1308px #fff,
      527px 814px #fff, 549px 1732px #fff, 943px 886px #fff, 1592px 2277px #fff,
      1339px 810px #fff, 871px 2016px #fff, 2121px 763px #fff,
      1962px 1114px #fff, 2498px 550px #fff, 107px 586px #fff, 316px 1033px #fff,
      2104px 2120px #fff, 1933px 1786px #fff, 1377px 2457px #fff,
      2250px 1010px #fff, 1314px 2316px #fff, 1339px 947px #fff,
      122px 1014px #fff, 558px 2354px #fff, 1250px 1790px #fff,
      1185px 2144px #fff, 2432px 158px #fff, 1911px 2148px #fff,
      1177px 804px #fff, 2504px 1254px #fff, 617px 1084px #fff,
      1959px 1325px #fff, 2394px 2081px #fff, 395px 735px #fff,
      221px 1891px #fff, 652px 2245px #fff, 1225px 1023px #fff,
      1542px 2053px #fff, 876px 2178px #fff, 479px 1915px #fff,
      2297px 1799px #fff, 2160px 387px #fff, 160px 358px #fff,
      1122px 2164px #fff, 2056px 1402px #fff, 2133px 1470px #fff,
      1508px 1865px #fff, 250px 2157px #fff, 715px 1452px #fff,
      2095px 1539px #fff, 1860px 1450px #fff, 185px 2013px #fff,
      1855px 1878px #fff, 690px 2520px #fff, 2250px 838px #fff,
      1547px 1752px #fff, 1103px 615px #fff, 151px 262px #fff, 1630px 577px #fff,
      769px 2448px #fff, 1938px 2347px #fff, 700px 1634px #fff,
      2105px 2053px #fff, 1498px 49px #fff, 799px 512px #fff, 1278px 744px #fff,
      2301px 364px #fff, 1059px 2066px #fff, 2116px 2424px #fff,
      1884px 1046px #fff, 699px 1101px #fff, 62px 1893px #fff, 370px 161px #fff,
      298px 1288px #fff, 1972px 2211px #fff, 1834px 2350px #fff,
      1591px 1118px #fff, 1343px 1730px #fff, 706px 850px #fff,
      317px 1171px #fff, 1395px 2529px #fff, 1040px 2523px #fff,
      793px 2535px #fff, 2180px 142px #fff, 2016px 2511px #fff,
      1032px 1204px #fff, 499px 625px #fff, 130px 2064px #fff, 1371px 758px #fff,
      1045px 2018px #fff, 1954px 309px #fff, 1445px 2514px #fff,
      839px 1523px #fff, 920px 238px #fff, 1421px 1105px #fff, 668px 1517px #fff,
      2045px 2344px #fff, 2465px 1619px #fff, 403px 48px #fff,
      1142px 1102px #fff, 2066px 1803px #fff, 658px 1744px #fff,
      721px 2062px #fff, 2180px 827px #fff, 2310px 111px #fff, 935px 808px #fff,
      1121px 1108px #fff, 1424px 1998px #fff, 821px 1317px #fff,
      2425px 1354px #fff, 305px 1422px #fff, 169px 1559px #fff,
      1850px 425px #fff, 719px 1507px #fff, 1650px 1803px #fff, 275px 402px #fff,
      1038px 772px #fff, 404px 105px #fff, 78px 2119px #fff, 133px 110px #fff,
      2559px 944px #fff, 688px 212px #fff, 869px 2266px #fff, 983px 840px #fff,
      1914px 2154px #fff, 1376px 941px #fff, 2064px 739px #fff,
      1979px 1255px #fff, 592px 1175px #fff, 283px 253px #fff, 696px 2501px #fff,
      1561px 1505px #fff, 745px 2233px #fff, 1180px 1104px #fff,
      1046px 1573px #fff, 1842px 2374px #fff, 1199px 2423px #fff,
      1680px 1359px #fff, 2020px 626px #fff, 1226px 1082px #fff,
      1894px 1824px #fff, 451px 2216px #fff, 544px 1263px #fff, 408px 4px #fff,
      1883px 1020px #fff, 1917px 1777px #fff, 1353px 1808px #fff,
      425px 85px #fff, 1165px 1787px #fff, 561px 1978px #fff, 712px 874px #fff,
      231px 2176px #fff, 516px 8px #fff, 199px 742px #fff, 584px 2388px #fff,
      434px 1584px #fff, 813px 2391px #fff, 1427px 2254px #fff,
      1894px 2083px #fff, 521px 2507px #fff, 391px 352px #fff, 664px 245px #fff,
      179px 13px #fff, 1784px 1939px #fff, 438px 1285px #fff, 975px 1780px #fff,
      1285px 1554px #fff, 924px 2301px #fff, 2340px 1621px #fff,
      1844px 2336px #fff, 640px 637px #fff, 1279px 1236px #fff,
      2419px 2546px #fff, 395px 1790px #fff, 959px 2383px #fff,
      1449px 650px #fff, 2378px 747px #fff, 1360px 24px #fff, 1726px 1609px #fff,
      1632px 1945px #fff, 2295px 2515px #fff, 594px 1339px #fff,
      351px 1327px #fff, 1972px 1942px #fff, 2092px 1604px #fff,
      1580px 1123px #fff, 1511px 2062px #fff, 1551px 1208px #fff,
      2014px 144px #fff, 2373px 2160px #fff, 2041px 823px #fff,
      1682px 1919px #fff, 2224px 338px #fff, 1224px 461px #fff,
      2256px 664px #fff, 2505px 1987px #fff, 2308px 2021px #fff,
      71px 2249px #fff, 1510px 944px #fff, 2148px 726px #fff, 535px 2236px #fff,
      793px 739px #fff, 930px 2533px #fff, 1353px 192px #fff, 1691px 998px #fff,
      1675px 504px #fff, 1632px 2410px #fff, 20px 1985px #fff, 701px 1622px #fff,
      2181px 1612px #fff, 184px 722px #fff, 720px 1488px #fff,
      2300px 1201px #fff, 2173px 402px #fff, 262px 560px #fff, 1379px 347px #fff,
      958px 1285px #fff, 958px 46px #fff, 2157px 1926px #fff, 1018px 1302px #fff,
      231px 1934px #fff, 2407px 1365px #fff, 2483px 1370px #fff,
      1038px 1917px #fff, 1218px 2256px #fff, 1702px 64px #fff,
      2141px 2350px #fff, 851px 2437px #fff, 402px 566px #fff, 2px 1430px #fff,
      341px 1849px #fff, 2210px 1148px #fff, 1071px 2370px #fff,
      1476px 306px #fff, 1857px 395px #fff, 1157px 349px #fff, 1916px 689px #fff,
      1800px 1989px #fff, 477px 2268px #fff, 184px 1033px #fff, 597px 720px #fff,
      52px 1638px #fff, 1338px 1170px #fff, 1190px 1946px #fff,
      981px 1481px #fff, 2096px 715px #fff, 1861px 658px #fff,
      1139px 1485px #fff, 1471px 1029px #fff, 1639px 424px #fff,
      558px 2453px #fff, 452px 987px #fff, 630px 1639px #fff, 2353px 2553px #fff,
      1847px 51px #fff, 884px 1805px #fff, 2280px 1759px #fff, 1490px 491px #fff,
      747px 1064px #fff, 2220px 1118px #fff, 2080px 747px #fff,
      1438px 1230px #fff, 295px 1674px #fff, 1294px 291px #fff,
      1148px 1742px #fff, 670px 1968px #fff, 2544px 741px #fff,
      426px 2035px #fff, 2187px 2309px #fff, 178px 2227px #fff,
      768px 2459px #fff, 1580px 1283px #fff, 1740px 200px #fff,
      352px 1310px #fff, 581px 602px #fff, 1439px 274px #fff, 2002px 1410px #fff,
      225px 1490px #fff, 2292px 1251px #fff, 1854px 760px #fff, 704px 221px #fff,
      385px 1883px #fff, 2352px 1092px #fff, 792px 1590px #fff,
      672px 1419px #fff, 1971px 497px #fff, 2505px 1312px #fff,
      102px 2102px #fff, 2204px 1555px #fff, 2000px 1593px #fff,
      2173px 1802px #fff, 1415px 237px #fff, 895px 1877px #fff,
      710px 1154px #fff, 251px 2478px #fff, 1266px 1534px #fff,
      2186px 1466px #fff, 1518px 2448px #fff, 515px 2525px #fff,
      1634px 2324px #fff, 1706px 683px #fff, 292px 1485px #fff,
      872px 2046px #fff, 658px 437px #fff, 2367px 1938px #fff,
      2018px 2543px #fff, 551px 542px #fff, 1711px 2307px #fff,
      2467px 999px #fff, 2046px 630px #fff, 1307px 2344px #fff,
      1893px 1311px #fff, 2536px 2425px #fff, 1777px 19px #fff,
      1845px 2044px #fff, 1261px 454px #fff, 2333px 2299px #fff,
      1019px 2349px #fff, 2074px 1014px #fff, 806px 1290px #fff,
      2152px 637px #fff, 980px 534px #fff, 199px 1781px #fff, 2091px 1219px #fff,
      917px 1990px #fff, 172px 714px #fff, 395px 2339px #fff, 35px 764px #fff,
      2110px 1796px #fff, 62px 996px #fff, 1340px 490px #fff, 1950px 797px #fff,
      2116px 72px #fff, 671px 2088px #fff, 2023px 1819px #fff, 90px 1219px #fff,
      1685px 282px #fff, 1843px 873px #fff, 100px 1446px #fff,
      2118px 1215px #fff, 1973px 1591px #fff, 2185px 1292px #fff,
      1270px 804px #fff, 2171px 1348px #fff, 2268px 6px #fff, 1580px 651px #fff,
      1806px 1438px #fff, 2435px 181px #fff, 437px 578px #fff,
      1924px 1356px #fff, 602px 1111px #fff, 2455px 1226px #fff,
      1887px 392px #fff, 730px 1492px #fff, 697px 2141px #fff, 852px 466px #fff,
      1px 1641px #fff, 788px 514px #fff, 183px 321px #fff, 932px 1224px #fff,
      1102px 692px #fff, 1587px 976px #fff, 1395px 2290px #fff,
      144px 2480px #fff, 623px 2164px #fff, 2098px 2043px #fff,
      336px 1662px #fff, 2191px 2279px #fff, 577px 2027px #fff,
      2215px 2483px #fff, 218px 2083px #fff, 2182px 122px #fff, 659px 791px #fff,
      317px 531px #fff, 980px 1456px #fff, 2533px 578px #fff, 595px 2478px #fff,
      2200px 1766px #fff, 2107px 1970px #fff, 1935px 1295px #fff,
      1822px 1691px #fff, 787px 1129px #fff, 1051px 718px #fff,
      915px 2488px #fff, 2037px 1394px #fff, 341px 319px #fff, 1843px 410px #fff,
      1501px 963px #fff, 404px 297px #fff, 1234px 1644px #fff, 883px 74px #fff,
      491px 2414px #fff, 334px 386px #fff, 951px 1852px #fff, 2194px 274px #fff,
      1424px 330px #fff, 1636px 995px #fff, 1566px 2450px #fff,
      544px 1430px #fff, 630px 1056px #fff, 925px 1203px #fff, 362px 101px #fff,
      1442px 834px #fff, 1786px 2360px #fff, 1611px 276px #fff,
      1715px 2151px #fff, 652px 2192px #fff, 589px 928px #fff,
      2460px 1658px #fff, 2408px 1139px #fff, 967px 1843px #fff,
      379px 720px #fff, 1832px 1057px #fff, 2234px 1836px #fff,
      436px 2526px #fff, 1327px 781px #fff, 1835px 768px #fff, 1037px 95px #fff,
      1422px 405px #fff, 1880px 758px #fff, 2291px 1828px #fff,
      2053px 2261px #fff, 121px 2256px #fff, 1460px 801px #fff, 64px 2344px #fff,
      97px 83px #fff, 2046px 1880px #fff, 866px 1852px #fff, 1317px 2444px #fff,
      1139px 168px #fff, 2413px 2333px #fff, 2289px 1063px #fff,
      2317px 816px #fff, 1773px 1366px #fff, 916px 1909px #fff,
      1303px 2052px #fff, 1406px 1299px #fff, 439px 2455px #fff,
      1113px 188px #fff, 1504px 462px #fff, 1376px 2373px #fff,
      495px 2084px #fff, 2198px 626px #fff, 2119px 1814px #fff, 86px 2541px #fff,
      1107px 854px #fff, 826px 1258px #fff, 2234px 1899px #fff, 88px 807px #fff,
      1982px 2487px #fff, 2035px 196px #fff, 148px 2103px #fff, 36px 2551px #fff,
      1842px 1164px #fff, 1858px 232px #fff, 405px 989px #fff,
      2432px 1061px #fff, 456px 1701px #fff, 427px 11px #fff, 588px 1308px #fff,
      1541px 620px #fff, 1827px 538px #fff, 1511px 1873px #fff,
      1485px 2156px #fff, 1287px 531px #fff, 1139px 1362px #fff,
      1621px 1023px #fff, 2380px 446px #fff, 649px 868px #fff, 596px 1417px #fff,
      1659px 560px #fff, 2340px 920px #fff, 2231px 1604px #fff,
      1726px 2117px #fff, 2048px 2156px #fff, 1505px 1588px #fff,
      1559px 723px #fff, 1130px 1943px #fff, 271px 584px #fff,
      1217px 2093px #fff, 1312px 552px #fff, 2557px 2342px #fff, 652px 73px #fff,
      1501px 2455px #fff, 1286px 1648px #fff, 838px 1551px #fff,
      1652px 1712px #fff, 1224px 160px #fff, 1928px 524px #fff, 899px 292px #fff,
      944px 1720px #fff, 1785px 1255px #fff, 104px 96px #fff, 1964px 546px #fff,
      2195px 1470px #fff, 893px 1423px #fff, 406px 341px #fff, 1px 2175px #fff,
      1044px 2022px #fff, 1336px 990px #fff, 1592px 788px #fff,
      2338px 710px #fff, 2401px 859px #fff, 1095px 137px #fff, 218px 90px #fff,
      2235px 2313px #fff, 1564px 162px #fff, 1900px 1265px #fff,
      199px 346px #fff, 1639px 360px #fff, 1795px 387px #fff, 926px 1493px #fff,
      648px 86px #fff, 802px 691px #fff, 1733px 349px #fff, 86px 91px #fff,
      1357px 183px #fff, 883px 78px #fff, 282px 2276px #fff, 779px 2104px #fff,
      48px 2155px #fff, 1783px 1891px #fff, 1794px 1397px #fff,
      695px 1358px #fff, 290px 1509px #fff, 136px 169px #fff, 2109px 1713px #fff,
      1595px 2295px #fff, 1346px 253px #fff, 2439px 473px #fff,
      700px 2460px #fff, 1594px 1415px #fff, 1842px 834px #fff,
      1645px 553px #fff, 1269px 433px #fff, 1686px 1807px #fff,
      1513px 1884px #fff, 2365px 627px #fff, 828px 2194px #fff,
      1950px 2019px #fff, 1769px 1193px #fff, 498px 1207px #fff,
      355px 2374px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-1:after {
    box-shadow: 0px 0px #fff, 1832px 195px #fff, 885px 2516px #fff,
      1163px 2003px #fff, 2519px 2207px #fff, 436px 774px #fff,
      1807px 1508px #fff, 2511px 1453px #fff, 1976px 2155px #fff,
      1539px 257px #fff, 739px 999px #fff, 2259px 2296px #fff,
      1444px 2057px #fff, 743px 2500px #fff, 1540px 1111px #fff,
      1193px 360px #fff, 1258px 1413px #fff, 1024px 2381px #fff,
      2161px 1319px #fff, 390px 2106px #fff, 340px 1212px #fff,
      1180px 659px #fff, 1373px 718px #fff, 998px 1978px #fff, 2086px 612px #fff,
      2063px 1062px #fff, 1555px 181px #fff, 1947px 1547px #fff,
      613px 1061px #fff, 2126px 2538px #fff, 1701px 1770px #fff,
      822px 174px #fff, 2290px 1563px #fff, 2174px 1490px #fff, 1762px 53px #fff,
      349px 173px #fff, 192px 1364px #fff, 981px 2345px #fff, 997px 369px #fff,
      2247px 1455px #fff, 1815px 398px #fff, 681px 2163px #fff, 754px 817px #fff,
      192px 290px #fff, 1882px 1953px #fff, 2380px 1434px #fff,
      1944px 1921px #fff, 2397px 633px #fff, 753px 2037px #fff,
      1665px 1188px #fff, 1931px 1432px #fff, 284px 1706px #fff,
      971px 680px #fff, 978px 1360px #fff, 456px 504px #fff, 138px 2192px #fff,
      571px 1679px #fff, 2274px 441px #fff, 701px 1195px #fff, 2110px 551px #fff,
      673px 578px #fff, 1164px 1991px #fff, 231px 387px #fff, 280px 18px #fff,
      1135px 2124px #fff, 2534px 1592px #fff, 1870px 1318px #fff,
      224px 1117px #fff, 986px 410px #fff, 1010px 1351px #fff, 1374px 315px #fff,
      575px 950px #fff, 637px 2363px #fff, 1208px 2031px #fff,
      1471px 1134px #fff, 91px 1298px #fff, 1695px 2101px #fff, 48px 664px #fff,
      1413px 2224px #fff, 1602px 2077px #fff, 1109px 85px #fff, 2224px 45px #fff,
      1257px 1958px #fff, 2135px 668px #fff, 1858px 1561px #fff,
      1767px 238px #fff, 1660px 1436px #fff, 2315px 1780px #fff,
      1474px 1121px #fff, 1536px 2393px #fff, 765px 2461px #fff,
      707px 1178px #fff, 1663px 2104px #fff, 750px 836px #fff, 1643px 526px #fff,
      463px 2028px #fff, 1449px 210px #fff, 684px 6px #fff, 534px 2036px #fff,
      1892px 2085px #fff, 2179px 901px #fff, 1963px 1908px #fff,
      44px 1249px #fff, 96px 1978px #fff, 2198px 1331px #fff, 1331px 1335px #fff,
      2057px 1870px #fff, 1255px 1583px #fff, 1702px 1204px #fff,
      744px 1221px #fff, 2496px 2347px #fff, 1861px 568px #fff,
      448px 1679px #fff, 1172px 1721px #fff, 2517px 140px #fff,
      2322px 1594px #fff, 1725px 1716px #fff, 1813px 1794px #fff,
      2026px 2018px #fff, 2415px 1830px #fff, 263px 2390px #fff,
      1795px 740px #fff, 2205px 2544px #fff, 1762px 1633px #fff,
      2415px 2289px #fff, 1723px 1764px #fff, 2114px 1571px #fff,
      1328px 1231px #fff, 268px 2360px #fff, 2513px 2387px #fff,
      2111px 132px #fff, 2192px 932px #fff, 1853px 619px #fff, 181px 1760px #fff,
      1903px 495px #fff, 2023px 2336px #fff, 538px 1041px #fff,
      967px 1588px #fff, 1973px 2189px #fff, 648px 1144px #fff, 305px 504px #fff,
      2215px 1895px #fff, 1325px 2010px #fff, 845px 740px #fff,
      2340px 750px #fff, 2335px 1393px #fff, 1473px 403px #fff,
      1644px 1696px #fff, 2560px 847px #fff, 525px 862px #fff,
      1747px 2148px #fff, 592px 2238px #fff, 52px 208px #fff, 1474px 1637px #fff,
      1860px 371px #fff, 2026px 167px #fff, 412px 981px #fff, 2197px 243px #fff,
      454px 1356px #fff, 1259px 1675px #fff, 1898px 1507px #fff,
      451px 386px #fff, 2267px 1655px #fff, 528px 832px #fff, 2416px 2483px #fff,
      1680px 340px #fff, 169px 86px #fff, 2307px 257px #fff, 2248px 467px #fff,
      1006px 1672px #fff, 859px 462px #fff, 1349px 2466px #fff,
      905px 2003px #fff, 306px 684px #fff, 988px 1694px #fff, 1302px 252px #fff,
      1307px 404px #fff, 1714px 2410px #fff, 2354px 518px #fff,
      158px 1352px #fff, 1925px 1669px #fff, 2382px 2108px #fff,
      823px 422px #fff, 1002px 2491px #fff, 2214px 1488px #fff, 335px 320px #fff,
      787px 2557px #fff, 3px 555px #fff, 2399px 2143px #fff, 1597px 356px #fff,
      331px 136px #fff, 942px 91px #fff, 1191px 1070px #fff, 487px 2430px #fff,
      2041px 913px #fff, 1466px 2429px #fff, 496px 2208px #fff,
      2285px 628px #fff, 482px 688px #fff, 230px 322px #fff, 1619px 1204px #fff,
      2283px 248px #fff, 2331px 914px #fff, 1815px 1363px #fff, 92px 1550px #fff,
      1412px 1998px #fff, 2290px 2331px #fff, 1112px 724px #fff,
      1236px 322px #fff, 1753px 1626px #fff, 1117px 1587px #fff,
      1098px 1079px #fff, 1500px 2443px #fff, 18px 101px #fff, 2219px 605px #fff,
      502px 2539px #fff, 1600px 544px #fff, 737px 737px #fff, 1468px 1262px #fff,
      621px 1866px #fff, 597px 567px #fff, 1025px 1215px #fff, 251px 1782px #fff,
      1207px 44px #fff, 1640px 1395px #fff, 61px 1650px #fff, 2467px 2028px #fff,
      1987px 600px #fff, 577px 156px #fff, 2123px 1365px #fff, 959px 69px #fff,
      412px 2400px #fff, 1470px 1518px #fff, 2450px 134px #fff,
      1032px 889px #fff, 720px 1972px #fff, 1134px 191px #fff,
      2077px 2220px #fff, 676px 1237px #fff, 864px 1511px #fff,
      1484px 990px #fff, 1802px 1444px #fff, 1869px 1738px #fff,
      1052px 332px #fff, 2511px 286px #fff, 1025px 426px #fff,
      1572px 1501px #fff, 563px 2272px #fff, 1297px 436px #fff,
      689px 1373px #fff, 216px 553px #fff, 1092px 755px #fff, 1054px 1883px #fff,
      325px 287px #fff, 1626px 512px #fff, 834px 1144px #fff, 289px 1215px #fff,
      2155px 532px #fff, 1705px 1723px #fff, 1384px 1768px #fff,
      1903px 207px #fff, 155px 1233px #fff, 2059px 374px #fff, 610px 119px #fff,
      1994px 2240px #fff, 2369px 935px #fff, 206px 535px #fff, 1430px 505px #fff,
      2429px 1237px #fff, 1730px 758px #fff, 2391px 489px #fff,
      1431px 869px #fff, 2053px 1181px #fff, 2284px 1737px #fff,
      504px 1994px #fff, 663px 2503px #fff, 1713px 605px #fff, 1743px 549px #fff,
      82px 174px #fff, 801px 449px #fff, 2229px 145px #fff, 2224px 804px #fff,
      914px 2139px #fff, 99px 1141px #fff, 1572px 862px #fff, 540px 1587px #fff,
      2375px 30px #fff, 2037px 2045px #fff, 80px 1802px #fff, 256px 2314px #fff,
      766px 2102px #fff, 1711px 563px #fff, 2402px 507px #fff, 361px 658px #fff,
      565px 670px #fff, 233px 570px #fff, 731px 82px #fff, 161px 2440px #fff,
      2324px 2234px #fff, 653px 1791px #fff, 1084px 2173px #fff,
      1734px 1345px #fff, 431px 752px #fff, 354px 92px #fff, 499px 1362px #fff,
      749px 695px #fff, 1258px 571px #fff, 889px 1845px #fff, 1057px 54px #fff,
      109px 216px #fff, 677px 189px #fff, 1629px 2042px #fff, 166px 895px #fff,
      2216px 1397px #fff, 1767px 479px #fff, 1973px 2292px #fff,
      1098px 2286px #fff, 2236px 2263px #fff, 2426px 780px #fff,
      809px 1969px #fff, 335px 2107px #fff, 1325px 941px #fff,
      1450px 1388px #fff, 1183px 1179px #fff, 296px 1376px #fff,
      1095px 189px #fff, 1586px 994px #fff, 2180px 802px #fff, 308px 1178px #fff,
      298px 343px #fff, 1385px 477px #fff, 2109px 1066px #fff, 918px 1949px #fff,
      1141px 1684px #fff, 1851px 1325px #fff, 1134px 467px #fff,
      1732px 1614px #fff, 1731px 1585px #fff, 321px 1459px #fff,
      839px 224px #fff, 2004px 969px #fff, 1327px 523px #fff, 1086px 509px #fff,
      1900px 724px #fff, 1838px 269px #fff, 2464px 599px #fff, 833px 762px #fff,
      1197px 2258px #fff, 1429px 1408px #fff, 1883px 1106px #fff,
      328px 2307px #fff, 1633px 1465px #fff, 567px 1124px #fff,
      931px 1970px #fff, 1772px 1191px #fff, 2161px 1303px #fff,
      2556px 1710px #fff, 2232px 1049px #fff, 1728px 1197px #fff,
      68px 2508px #fff, 140px 2071px #fff, 1249px 1017px #fff, 1711px 677px #fff,
      788px 1986px #fff, 1752px 1462px #fff, 1207px 2525px #fff,
      2138px 2043px #fff, 856px 1854px #fff, 2331px 2529px #fff,
      1178px 1779px #fff, 2454px 2012px #fff, 898px 1551px #fff,
      304px 1111px #fff, 1133px 78px #fff, 1405px 1535px #fff, 163px 196px #fff,
      1427px 1253px #fff, 1183px 1966px #fff, 2046px 530px #fff,
      1555px 1891px #fff, 659px 1428px #fff, 73px 1971px #fff, 2275px 106px #fff,
      1305px 2244px #fff, 2524px 1192px #fff, 2305px 1248px #fff,
      1960px 842px #fff, 2363px 2403px #fff, 871px 847px #fff, 487px 191px #fff,
      1313px 343px #fff, 121px 136px #fff, 1181px 2319px #fff, 298px 1122px #fff,
      1861px 102px #fff, 1947px 226px #fff, 213px 1521px #fff, 593px 768px #fff,
      1082px 909px #fff, 795px 1357px #fff, 2509px 2376px #fff, 622px 200px #fff,
      1028px 2239px #fff, 364px 7px #fff, 1794px 22px #fff, 1596px 1743px #fff,
      646px 2074px #fff, 2286px 1661px #fff, 2039px 803px #fff,
      595px 1937px #fff, 1401px 473px #fff, 1023px 1083px #fff,
      2209px 1247px #fff, 922px 2060px #fff, 496px 1613px #fff,
      2415px 648px #fff, 1298px 967px #fff, 1358px 1920px #fff,
      1890px 2260px #fff, 716px 558px #fff, 2494px 1184px #fff, 431px 295px #fff,
      987px 1538px #fff, 1470px 2299px #fff, 2038px 357px #fff,
      1110px 2204px #fff, 1656px 384px #fff, 968px 520px #fff, 699px 186px #fff,
      1608px 711px #fff, 2410px 332px #fff, 1319px 1256px #fff,
      2506px 1775px #fff, 2044px 1918px #fff, 49px 1738px #fff, 16px 567px #fff,
      1538px 1553px #fff, 210px 2488px #fff, 1955px 1587px #fff,
      1854px 1360px #fff, 27px 54px #fff, 1117px 1586px #fff, 309px 1301px #fff,
      1637px 2494px #fff, 384px 968px #fff, 1119px 393px #fff,
      2332px 1683px #fff, 624px 334px #fff, 2144px 2271px #fff,
      2113px 1105px #fff, 2360px 776px #fff, 716px 1792px #fff,
      2323px 1043px #fff, 656px 2198px #fff, 2257px 1770px #fff,
      636px 991px #fff, 2178px 1813px #fff, 2435px 2531px #fff, 67px 212px #fff,
      2082px 1411px #fff, 2331px 455px #fff, 963px 141px #fff,
      1847px 2294px #fff, 861px 1743px #fff, 851px 2055px #fff,
      1786px 1663px #fff, 88px 1723px #fff, 700px 368px #fff, 110px 874px #fff,
      1145px 420px #fff, 2522px 1536px #fff, 1306px 1236px #fff,
      2157px 1096px #fff, 832px 386px #fff, 2170px 713px #fff, 743px 2057px #fff,
      587px 2000px #fff, 1896px 1756px #fff, 1138px 389px #fff,
      1364px 1489px #fff, 500px 384px #fff, 1748px 25px #fff, 308px 1438px #fff,
      367px 361px #fff, 859px 1000px #fff, 1876px 916px #fff, 807px 1810px #fff,
      1206px 1035px #fff, 2274px 55px #fff, 1137px 2260px #fff,
      2234px 396px #fff, 1003px 1374px #fff, 2214px 1448px #fff,
      1171px 1313px #fff, 1617px 2193px #fff, 866px 1459px #fff,
      1195px 704px #fff, 1163px 1021px #fff, 773px 660px #fff, 973px 159px #fff,
      2082px 2556px #fff, 30px 509px #fff, 1896px 1931px #fff,
      1548px 2146px #fff, 2168px 2247px #fff, 640px 2362px #fff,
      1002px 482px #fff, 2544px 1388px #fff, 624px 848px #fff, 853px 1708px #fff,
      780px 1393px #fff, 530px 561px #fff, 317px 1772px #fff, 1020px 1097px #fff,
      1657px 2227px #fff, 429px 1622px #fff, 702px 1711px #fff,
      2415px 620px #fff, 85px 2061px #fff, 2441px 1603px #fff, 792px 1476px #fff,
      1713px 14px #fff, 1010px 2290px #fff, 81px 2539px #fff, 2216px 1978px #fff,
      1082px 927px #fff, 1652px 1297px #fff, 1991px 736px #fff,
      1250px 2319px #fff, 1572px 38px #fff, 121px 2467px #fff, 1955px 502px #fff,
      1816px 1409px #fff, 1389px 1453px #fff, 183px 26px #fff, 817px 404px #fff,
      33px 6px #fff, 487px 1676px #fff, 1390px 663px #fff, 697px 1260px #fff,
      1977px 203px #fff, 1529px 1630px #fff, 952px 1467px #fff,
      532px 2268px #fff, 913px 1745px #fff, 1152px 2032px #fff,
      1950px 2459px #fff, 1252px 2213px #fff, 1663px 2006px #fff,
      1325px 2209px #fff, 653px 1055px #fff, 1791px 433px #fff,
      2484px 2302px #fff, 2032px 153px #fff, 438px 723px #fff,
      1960px 1337px #fff, 1159px 1112px #fff, 1549px 622px #fff,
      1749px 728px #fff, 815px 221px #fff, 685px 2392px #fff, 657px 997px #fff,
      1122px 905px #fff, 1979px 644px #fff, 689px 874px #fff, 910px 1242px #fff,
      322px 1760px #fff, 142px 316px #fff, 1927px 1235px #fff,
      2469px 1141px #fff, 2199px 604px #fff, 1369px 1980px #fff,
      1826px 1191px #fff, 2039px 617px #fff, 1561px 1461px #fff,
      788px 1360px #fff, 2537px 1242px #fff, 1892px 2451px #fff,
      136px 1761px #fff, 2px 1251px #fff, 2460px 1964px #fff, 2094px 104px #fff,
      759px 171px #fff, 409px 598px #fff, 796px 1413px #fff, 567px 1943px #fff,
      266px 50px #fff, 998px 875px #fff, 1100px 2174px #fff, 2097px 552px #fff,
      86px 196px #fff, 502px 1202px #fff, 918px 1075px #fff, 273px 2513px #fff,
      2409px 18px #fff, 438px 523px #fff, 1775px 2343px #fff, 2428px 2029px #fff,
      251px 429px #fff, 1103px 637px #fff, 800px 1909px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-2 {
    -webkit-animation: animParticle 120s linear infinite;
    animation: animParticle 120s linear infinite;
    box-shadow: 0px 0px #fff, 2559px 1650px #fff, 1603px 2162px #fff,
      2329px 2066px #fff, 1045px 1875px #fff, 1437px 2222px #fff,
      2027px 2514px #fff, 1503px 1437px #fff, 830px 1376px #fff,
      167px 383px #fff, 1944px 576px #fff, 2367px 1566px #fff, 2374px 487px #fff,
      1925px 2114px #fff, 663px 1463px #fff, 1062px 1643px #fff,
      167px 420px #fff, 2221px 1181px #fff, 43px 1103px #fff, 666px 960px #fff,
      775px 2217px #fff, 1136px 997px #fff, 275px 1494px #fff,
      2265px 1502px #fff, 1454px 598px #fff, 2441px 1477px #fff,
      870px 2000px #fff, 1235px 2113px #fff, 380px 1880px #fff,
      1411px 345px #fff, 2358px 1750px #fff, 1818px 793px #fff, 722px 220px #fff,
      884px 1359px #fff, 1449px 123px #fff, 2474px 2485px #fff,
      2257px 1955px #fff, 836px 662px #fff, 270px 873px #fff, 921px 2392px #fff,
      771px 1604px #fff, 906px 2436px #fff, 970px 2031px #fff, 468px 922px #fff,
      2262px 706px #fff, 471px 467px #fff, 1532px 2332px #fff,
      1318px 1889px #fff, 775px 2303px #fff, 1759px 392px #fff,
      2175px 2474px #fff, 550px 1199px #fff, 191px 377px #fff, 788px 1805px #fff,
      2013px 13px #fff, 1865px 635px #fff, 1236px 766px #fff, 859px 861px #fff,
      338px 1062px #fff, 1036px 2183px #fff, 2428px 1949px #fff,
      420px 751px #fff, 362px 769px #fff, 746px 475px #fff, 721px 2023px #fff,
      391px 852px #fff, 582px 722px #fff, 1970px 2464px #fff, 2219px 1871px #fff,
      1285px 2379px #fff, 430px 2137px #fff, 155px 76px #fff, 1612px 773px #fff,
      1746px 1448px #fff, 1884px 988px #fff, 1706px 1929px #fff,
      1761px 2415px #fff, 2358px 664px #fff, 471px 1636px #fff, 27px 820px #fff,
      406px 1002px #fff, 113px 1493px #fff, 196px 65px #fff, 2547px 14px #fff,
      190px 1498px #fff, 2069px 122px #fff, 321px 75px #fff, 1014px 57px #fff,
      737px 2427px #fff, 1984px 2200px #fff, 1161px 1410px #fff,
      1308px 1792px #fff, 235px 2019px #fff, 1105px 536px #fff, 360px 317px #fff,
      2113px 2188px #fff, 2320px 43px #fff, 2333px 2388px #fff, 864px 383px #fff,
      1766px 1390px #fff, 1340px 786px #fff, 561px 1870px #fff,
      906px 2241px #fff, 591px 613px #fff, 1236px 1031px #fff, 2242px 675px #fff,
      984px 2079px #fff, 1987px 1890px #fff, 2525px 1725px #fff,
      2337px 97px #fff, 1244px 2552px #fff, 1119px 213px #fff,
      1011px 1794px #fff, 2230px 1809px #fff, 1910px 1769px #fff,
      463px 2075px #fff, 650px 578px #fff, 1200px 1363px #fff, 2035px 124px #fff,
      1206px 2325px #fff, 1534px 839px #fff, 690px 2393px #fff,
      182px 1012px #fff, 519px 1283px #fff, 1888px 2195px #fff, 514px 190px #fff,
      2357px 881px #fff, 2335px 1888px #fff, 1819px 1353px #fff,
      2540px 1995px #fff, 2527px 1285px #fff, 1608px 2559px #fff,
      1774px 600px #fff, 918px 2024px #fff, 2550px 916px #fff, 199px 1271px #fff,
      2435px 260px #fff, 121px 1745px #fff, 790px 1382px #fff, 64px 375px #fff,
      1625px 1809px #fff, 767px 696px #fff, 273px 1656px #fff,
      1402px 2066px #fff, 383px 2116px #fff, 838px 1397px #fff,
      1470px 1280px #fff, 679px 344px #fff, 1118px 2525px #fff,
      1828px 969px #fff, 487px 2334px #fff, 2176px 1731px #fff, 1698px 47px #fff,
      589px 205px #fff, 1117px 517px #fff, 662px 2123px #fff, 1164px 2237px #fff,
      133px 1576px #fff, 2208px 2375px #fff, 2271px 2198px #fff,
      1224px 2239px #fff, 2521px 1056px #fff, 486px 1540px #fff,
      2168px 1698px #fff, 2145px 2327px #fff, 2063px 1427px #fff,
      1033px 2329px #fff, 1727px 1834px #fff, 2452px 516px #fff,
      1522px 2488px #fff, 2551px 2312px #fff, 286px 2473px #fff,
      2129px 2406px #fff, 2002px 1551px #fff, 1662px 1562px #fff,
      1006px 742px #fff, 923px 885px #fff, 1749px 1672px #fff, 2181px 428px #fff,
      621px 387px #fff, 678px 2289px #fff, 1672px 2161px #fff,
      2056px 1334px #fff, 199px 570px #fff, 2369px 1094px #fff,
      2045px 1604px #fff, 1037px 485px #fff, 2064px 36px #fff,
      2199px 2444px #fff, 2153px 70px #fff, 563px 2233px #fff,
      1218px 1959px #fff, 1031px 717px #fff, 418px 637px #fff, 1261px 868px #fff,
      364px 544px #fff, 1068px 1203px #fff, 2311px 164px #fff, 2420px 930px #fff,
      47px 546px #fff, 2356px 417px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-2:after {
    box-shadow: 0px 0px #fff, 2351px 271px #fff, 443px 2031px #fff,
      2540px 1007px #fff, 2490px 2027px #fff, 1961px 638px #fff,
      1391px 1464px #fff, 1292px 719px #fff, 666px 1619px #fff,
      818px 1633px #fff, 2491px 1296px #fff, 1403px 268px #fff,
      1158px 878px #fff, 1260px 1481px #fff, 2292px 402px #fff, 408px 549px #fff,
      324px 1455px #fff, 1870px 1144px #fff, 322px 2526px #fff,
      1333px 1397px #fff, 1570px 94px #fff, 133px 58px #fff, 2040px 1450px #fff,
      1742px 861px #fff, 379px 1457px #fff, 2519px 1011px #fff,
      1685px 1485px #fff, 1178px 560px #fff, 2287px 2527px #fff,
      1344px 2058px #fff, 1337px 1477px #fff, 1792px 1996px #fff,
      2219px 1606px #fff, 158px 360px #fff, 804px 1555px #fff, 330px 770px #fff,
      1954px 771px #fff, 265px 1341px #fff, 1856px 2081px #fff,
      926px 1989px #fff, 820px 1724px #fff, 642px 1876px #fff,
      2261px 2074px #fff, 1298px 2248px #fff, 861px 1872px #fff,
      2323px 1712px #fff, 2530px 2018px #fff, 998px 1197px #fff,
      1319px 990px #fff, 2482px 1616px #fff, 1662px 1302px #fff,
      793px 1443px #fff, 496px 1989px #fff, 1543px 222px #fff, 2025px 779px #fff,
      2229px 1357px #fff, 1158px 411px #fff, 1680px 2015px #fff,
      536px 2019px #fff, 393px 2443px #fff, 999px 2247px #fff, 558px 2464px #fff,
      2280px 280px #fff, 354px 41px #fff, 1694px 676px #fff, 940px 1372px #fff,
      297px 882px #fff, 1200px 464px #fff, 1681px 309px #fff, 756px 834px #fff,
      856px 1489px #fff, 638px 2076px #fff, 134px 1960px #fff,
      1850px 1516px #fff, 1828px 2512px #fff, 2076px 1344px #fff,
      1987px 1985px #fff, 2259px 1066px #fff, 595px 737px #fff,
      129px 1150px #fff, 1325px 918px #fff, 1718px 634px #fff, 2267px 526px #fff,
      1095px 219px #fff, 661px 782px #fff, 1423px 1535px #fff,
      1799px 1790px #fff, 1344px 887px #fff, 874px 607px #fff,
      2006px 2503px #fff, 2495px 889px #fff, 684px 2172px #fff,
      787px 1040px #fff, 498px 633px #fff, 2277px 2010px #fff, 230px 1771px #fff,
      421px 1882px #fff, 19px 1238px #fff, 923px 2558px #fff, 1683px 1419px #fff,
      23px 2432px #fff, 2101px 2022px #fff, 2201px 538px #fff, 522px 1134px #fff,
      363px 2204px #fff, 2060px 1435px #fff, 577px 398px #fff, 656px 3px #fff,
      1957px 1854px #fff, 910px 943px #fff, 1108px 847px #fff,
      1741px 1762px #fff, 745px 1119px #fff, 2309px 2519px #fff,
      2363px 782px #fff, 320px 1434px #fff, 916px 2475px #fff, 138px 110px #fff,
      1149px 899px #fff, 239px 1218px #fff, 1314px 1611px #fff,
      1645px 826px #fff, 1277px 1923px #fff, 330px 288px #fff, 1699px 373px #fff,
      1680px 1952px #fff, 1640px 1818px #fff, 2504px 251px #fff,
      1733px 26px #fff, 1504px 2164px #fff, 2283px 362px #fff, 1670px 828px #fff,
      1615px 1146px #fff, 1326px 2152px #fff, 2548px 2124px #fff,
      1893px 857px #fff, 1899px 2510px #fff, 768px 2201px #fff,
      777px 1092px #fff, 265px 975px #fff, 1664px 1308px #fff,
      1215px 1054px #fff, 2382px 1708px #fff, 110px 1873px #fff,
      566px 2515px #fff, 1553px 1337px #fff, 576px 2204px #fff,
      2213px 1828px #fff, 749px 2294px #fff, 1565px 882px #fff,
      1071px 2040px #fff, 1729px 1596px #fff, 749px 801px #fff,
      1645px 2383px #fff, 1325px 606px #fff, 2303px 1329px #fff,
      90px 1196px #fff, 825px 1143px #fff, 292px 39px #fff, 327px 1117px #fff,
      351px 1420px #fff, 1709px 1271px #fff, 1443px 1995px #fff,
      347px 332px #fff, 1658px 901px #fff, 1436px 2101px #fff,
      1261px 1224px #fff, 274px 480px #fff, 492px 2005px #fff, 309px 1113px #fff,
      1870px 496px #fff, 1741px 1681px #fff, 1801px 1036px #fff,
      1550px 2449px #fff, 2236px 2266px #fff, 338px 1582px #fff,
      957px 469px #fff, 1814px 1831px #fff, 886px 971px #fff, 1999px 1857px #fff,
      2454px 578px #fff, 1466px 2435px #fff, 306px 436px #fff,
      1126px 2189px #fff, 1515px 1985px #fff, 43px 62px #fff, 1727px 690px #fff,
      1060px 2210px #fff, 780px 1157px #fff, 2400px 158px #fff,
      286px 2148px #fff, 1451px 2109px #fff, 116px 1819px #fff, 77px 822px #fff,
      885px 412px #fff, 2083px 2318px #fff, 421px 1234px #fff,
      2026px 1865px #fff, 103px 2087px #fff, 385px 1872px #fff, 347px 428px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-3 {
    -webkit-animation: animParticle 180s linear infinite;
    animation: animParticle 180s linear infinite;
    box-shadow: 0px 0px #fff, 2165px 372px #fff, 2255px 615px #fff,
      2127px 2423px #fff, 1382px 2438px #fff, 1414px 2383px #fff,
      1719px 1033px #fff, 1860px 2460px #fff, 1820px 660px #fff,
      2410px 1322px #fff, 1062px 2556px #fff, 603px 2394px #fff,
      588px 1144px #fff, 644px 2454px #fff, 2130px 1575px #fff,
      1054px 956px #fff, 1419px 108px #fff, 961px 542px #fff, 33px 2415px #fff,
      1367px 1979px #fff, 267px 775px #fff, 1366px 367px #fff, 1991px 808px #fff,
      7px 2354px #fff, 153px 1679px #fff, 2258px 46px #fff, 43px 2532px #fff,
      1964px 374px #fff, 360px 513px #fff, 606px 1684px #fff, 1424px 1947px #fff,
      2112px 1748px #fff, 2271px 819px #fff, 2507px 830px #fff,
      2559px 1164px #fff, 2128px 725px #fff, 131px 1346px #fff,
      2499px 841px #fff, 1531px 1604px #fff, 2030px 1534px #fff,
      513px 1068px #fff, 723px 2490px #fff, 1172px 761px #fff,
      1208px 1915px #fff, 900px 1681px #fff, 1819px 2395px #fff,
      892px 2443px #fff, 1064px 2090px #fff, 1643px 1566px #fff,
      1679px 879px #fff, 599px 812px #fff, 1167px 7px #fff, 1330px 2524px #fff,
      1254px 52px #fff, 2119px 1791px #fff, 1066px 1226px #fff,
      1228px 1245px #fff, 2045px 1658px #fff, 588px 1910px #fff,
      2359px 1774px #fff, 777px 2309px #fff, 1742px 1777px #fff,
      2442px 89px #fff, 1886px 636px #fff, 929px 443px #fff, 356px 2074px #fff,
      228px 2545px #fff, 2215px 464px #fff, 327px 834px #fff, 660px 722px #fff,
      1466px 1419px #fff, 89px 1484px #fff, 1785px 774px #fff,
      1161px 1462px #fff, 1012px 793px #fff, 634px 1597px #fff,
      882px 1623px #fff, 982px 1274px #fff, 1498px 2038px #fff,
      1371px 618px #fff, 2092px 877px #fff, 1719px 1776px #fff,
      1154px 2474px #fff, 2036px 2002px #fff, 1511px 160px #fff,
      1582px 2453px #fff, 753px 56px #fff, 2px 1988px #fff, 1606px 327px #fff,
      144px 655px #fff, 852px 2064px #fff, 1733px 674px #fff, 275px 89px #fff,
      2271px 1607px #fff, 2103px 703px #fff, 2184px 1545px #fff,
      1425px 518px #fff, 2006px 664px #fff, 1998px 1512px #fff,
      452px 1616px #fff, 687px 270px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-3:after {
    box-shadow: 0px 0px #fff, 2303px 1872px #fff, 884px 343px #fff,
      603px 2283px #fff, 667px 197px #fff, 1301px 1422px #fff,
      2470px 2464px #fff, 317px 2182px #fff, 1736px 30px #fff, 526px 765px #fff,
      543px 1241px #fff, 484px 82px #fff, 1519px 929px #fff, 16px 1654px #fff,
      451px 149px #fff, 737px 906px #fff, 1252px 1225px #fff, 1796px 2250px #fff,
      1771px 370px #fff, 1306px 274px #fff, 604px 2121px #fff,
      1974px 1451px #fff, 1992px 1021px #fff, 450px 1423px #fff,
      709px 2217px #fff, 1679px 913px #fff, 2151px 1812px #fff,
      1698px 2463px #fff, 742px 1941px #fff, 294px 356px #fff, 71px 169px #fff,
      198px 1141px #fff, 1162px 912px #fff, 639px 691px #fff, 1073px 2311px #fff,
      191px 213px #fff, 1142px 2504px #fff, 667px 164px #fff, 1773px 2411px #fff,
      2274px 1910px #fff, 2322px 1847px #fff, 1046px 238px #fff,
      2540px 2411px #fff, 1510px 347px #fff, 880px 787px #fff,
      1749px 1735px #fff, 1837px 1454px #fff, 2322px 1714px #fff,
      921px 2497px #fff, 1084px 2435px #fff, 457px 1760px #fff,
      1047px 641px #fff, 1564px 2047px #fff, 1900px 1057px #fff, 23px 236px #fff,
      2159px 2131px #fff, 1000px 994px #fff, 1086px 1399px #fff,
      2337px 1524px #fff, 635px 455px #fff, 1624px 705px #fff,
      1272px 1629px #fff, 343px 768px #fff, 2350px 538px #fff,
      1586px 1329px #fff, 1913px 1423px #fff, 2412px 2529px #fff,
      1601px 1665px #fff, 2505px 165px #fff, 2035px 368px #fff,
      1696px 641px #fff, 1685px 1013px #fff, 2097px 1376px #fff, 6px 1758px #fff,
      991px 1208px #fff, 632px 1814px #fff, 97px 912px #fff, 573px 346px #fff,
      999px 2443px #fff, 1935px 1659px #fff, 486px 2485px #fff,
      2531px 2067px #fff, 600px 234px #fff, 1757px 1446px #fff,
      1423px 1842px #fff, 1499px 1784px #fff, 2326px 839px #fff,
      2079px 1314px #fff, 2065px 1431px #fff, 393px 944px #fff,
      1396px 1355px #fff, 1561px 1455px #fff, 510px 2212px #fff,
      1446px 426px #fff, 297px 998px #fff, 700px 717px #fff, 1921px 1666px #fff,
      2405px 1830px #fff, 925px 1935px #fff, 2047px 687px #fff,
      1989px 2161px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-4 {
    -webkit-animation: animParticle 600s linear infinite;
    animation: animParticle 600s linear infinite;
    box-shadow: 0px 0px #fff, 1069px 193px #fff, 607px 1049px #fff,
      361px 662px #fff, 151px 398px #fff, 748px 1321px #fff, 179px 349px #fff,
      188px 498px #fff, 1917px 1404px #fff, 1426px 1024px #fff,
      2527px 990px #fff, 1256px 217px #fff, 1609px 1574px #fff, 411px 472px #fff,
      2067px 1006px #fff, 1895px 2017px #fff, 1169px 2277px #fff,
      1984px 2257px #fff, 816px 1891px #fff, 1375px 357px #fff,
      1567px 568px #fff, 490px 1579px #fff, 572px 761px #fff, 2107px 562px #fff,
      605px 1810px #fff, 2438px 1975px #fff, 1732px 1303px #fff,
      19px 1810px #fff, 2434px 1703px #fff, 2186px 68px #fff, 1768px 1544px #fff,
      2375px 1565px #fff, 876px 1384px #fff, 1841px 2223px #fff,
      23px 1322px #fff, 2178px 1999px #fff, 731px 899px #fff, 1174px 1954px #fff,
      2196px 844px #fff, 2153px 1505px #fff, 1262px 441px #fff,
      540px 1083px #fff, 665px 492px #fff, 1487px 2128px #fff, 597px 1358px #fff,
      1530px 481px #fff, 1744px 829px #fff, 733px 953px #fff, 1720px 1451px #fff,
      1555px 95px #fff, 278px 285px #fff, 1987px 636px #fff, 2268px 1700px #fff,
      1632px 1180px #fff, 2022px 1404px #fff, 166px 846px #fff,
      2218px 1673px #fff, 1698px 1376px #fff, 1500px 2461px #fff,
      1072px 1698px #fff, 626px 2031px #fff, 610px 1649px #fff,
      1728px 637px #fff, 2457px 741px #fff, 2501px 127px #fff, 473px 2557px #fff,
      893px 1995px #fff, 1396px 1124px #fff, 91px 1612px #fff, 2160px 80px #fff,
      1741px 1267px #fff, 2435px 2427px #fff, 2167px 375px #fff,
      1249px 2092px #fff, 646px 708px #fff, 35px 471px #fff, 583px 1383px #fff,
      113px 322px #fff, 1212px 1707px #fff, 219px 129px #fff, 2197px 1274px #fff,
      1183px 1515px #fff, 1269px 532px #fff, 2091px 572px #fff,
      448px 1813px #fff, 1906px 1796px #fff, 1318px 25px #fff,
      2186px 1360px #fff, 315px 869px #fff, 546px 1098px #fff, 62px 319px #fff,
      321px 761px #fff, 1044px 1926px #fff, 185px 1182px #fff,
      1565px 1078px #fff, 2393px 1476px #fff, 1549px 69px #fff,
      1818px 2489px #fff, 1308px 1657px #fff, 1953px 1103px #fff,
      1011px 1390px #fff, 1113px 2283px #fff, 282px 1350px #fff,
      1733px 1195px #fff, 1856px 643px #fff, 1201px 666px #fff,
      1573px 1487px #fff, 2262px 2258px #fff, 2021px 1937px #fff,
      1288px 2557px #fff, 1665px 369px #fff, 768px 1079px #fff, 751px 477px #fff,
      2176px 1059px #fff, 2558px 1637px #fff, 2231px 868px #fff,
      2012px 448px #fff, 685px 1356px #fff, 1024px 2239px #fff,
      492px 2432px #fff, 1636px 707px #fff, 2229px 955px #fff, 2466px 93px #fff,
      560px 841px #fff, 2313px 2524px #fff, 817px 1739px #fff,
      1141px 1879px #fff, 1294px 597px #fff, 2276px 1126px #fff,
      2387px 1523px #fff, 2102px 704px #fff, 385px 1713px #fff,
      1476px 2196px #fff, 2263px 195px #fff, 620px 1160px #fff, 1898px 70px #fff,
      285px 2052px #fff, 2278px 1309px #fff, 202px 1353px #fff,
      1442px 439px #fff, 2493px 363px #fff, 588px 1269px #fff,
      2039px 1293px #fff, 404px 491px #fff, 644px 419px #fff, 680px 1346px #fff,
      290px 1245px #fff, 2191px 1242px #fff, 1601px 1108px #fff,
      701px 2244px #fff, 1753px 2171px #fff, 1784px 39px #fff, 27px 1525px #fff,
      1665px 23px #fff, 1441px 1153px #fff, 2539px 1935px #fff,
      801px 2262px #fff, 716px 2140px #fff, 1705px 2101px #fff, 753px 435px #fff,
      2083px 2289px #fff, 483px 1824px #fff, 2106px 1671px #fff,
      1925px 694px #fff, 1594px 599px #fff, 826px 2516px #fff, 2530px 380px #fff,
      2234px 869px #fff, 1514px 855px #fff, 402px 2416px #fff, 751px 1301px #fff,
      135px 1961px #fff, 1292px 2319px #fff, 65px 1360px #fff,
      2545px 2373px #fff, 2044px 952px #fff, 948px 335px #fff, 484px 1681px #fff,
      1012px 357px #fff, 630px 1825px #fff, 803px 288px #fff, 1148px 221px #fff,
      46px 2304px #fff, 512px 553px #fff, 1058px 659px #fff, 1386px 1352px #fff,
      709px 2262px #fff, 779px 1648px #fff, 1516px 2320px #fff,
      1454px 860px #fff, 295px 354px #fff, 703px 2533px #fff, 1602px 1042px #fff,
      96px 1909px #fff, 928px 1485px #fff, 2209px 318px #fff, 2359px 657px #fff,
      851px 8px #fff, 1565px 1089px #fff, 1792px 1918px #fff, 546px 868px #fff,
      406px 898px #fff, 2482px 41px #fff, 1696px 764px #fff, 952px 779px #fff,
      1588px 1344px #fff, 1919px 1421px #fff, 1582px 539px #fff,
      2504px 1146px #fff, 827px 523px #fff, 2241px 576px #fff, 924px 1299px #fff,
      1472px 167px #fff, 678px 2514px #fff, 1726px 800px #fff,
      2300px 2335px #fff, 64px 1673px #fff, 837px 2475px #fff, 2228px 204px #fff,
      1346px 1838px #fff, 1266px 1100px #fff, 560px 227px #fff,
      398px 1548px #fff, 892px 1944px #fff, 1048px 559px #fff, 889px 2154px #fff,
      2474px 1942px #fff, 18px 1078px #fff, 2025px 977px #fff, 70px 570px #fff,
      1674px 419px #fff, 1709px 691px #fff, 2376px 1649px #fff, 60px 1077px #fff,
      1738px 528px #fff, 1416px 83px #fff, 819px 609px #fff, 2224px 1826px #fff,
      1865px 1015px #fff, 2063px 1430px #fff, 795px 731px #fff,
      1335px 394px #fff, 769px 1569px #fff, 815px 452px #fff, 2075px 210px #fff,
      1569px 327px #fff, 2187px 933px #fff, 796px 2417px #fff, 817px 2381px #fff,
      1555px 2513px #fff, 879px 682px #fff, 1525px 1104px #fff,
      1560px 1693px #fff, 1314px 1573px #fff, 1870px 408px #fff,
      509px 2332px #fff, 27px 387px #fff, 1023px 1766px #fff, 1732px 830px #fff,
      1838px 173px #fff, 782px 2111px #fff, 2199px 200px #fff, 1492px 258px #fff,
      2031px 223px #fff, 481px 1968px #fff, 1443px 2192px #fff,
      2242px 2329px #fff, 398px 832px #fff, 773px 1577px #fff, 1299px 412px #fff,
      2267px 402px #fff, 511px 213px #fff, 1996px 536px #fff, 2533px 2192px #fff,
      1735px 962px #fff, 1294px 684px #fff, 863px 1750px #fff, 938px 1956px #fff,
      1375px 638px #fff, 351px 384px #fff, 2485px 533px #fff, 2269px 596px #fff,
      1594px 2282px #fff, 1614px 251px #fff, 493px 986px #fff, 2365px 349px #fff,
      1998px 2354px #fff, 2220px 1143px #fff, 349px 1456px #fff,
      1458px 710px #fff, 911px 1276px #fff, 401px 2080px #fff, 111px 1412px #fff,
      2271px 832px #fff, 2190px 1992px #fff, 2439px 1371px #fff,
      2478px 1322px #fff, 628px 90px #fff, 1px 2339px #fff, 158px 1164px #fff,
      2187px 2421px #fff, 2516px 360px #fff, 2273px 2515px #fff,
      1854px 971px #fff, 1472px 280px #fff, 318px 2268px #fff, 840px 1078px #fff,
      241px 255px #fff, 52px 1542px #fff, 1641px 861px #fff, 1911px 2267px #fff,
      1667px 1376px #fff, 1400px 339px #fff, 2511px 977px #fff,
      2380px 1920px #fff, 636px 816px #fff, 1465px 2204px #fff,
      788px 2187px #fff, 1106px 813px #fff, 1849px 303px #fff, 2220px 651px #fff,
      1540px 2557px #fff, 230px 652px #fff, 2058px 1415px #fff, 52px 1388px #fff,
      2150px 2423px #fff, 2221px 1324px #fff, 610px 738px #fff,
      2075px 1624px #fff, 2410px 1803px #fff, 240px 735px #fff,
      2477px 654px #fff, 954px 360px #fff, 95px 1031px #fff, 1203px 1945px #fff,
      83px 424px #fff, 236px 816px #fff, 936px 497px #fff, 541px 2081px #fff,
      1832px 554px #fff, 1123px 82px #fff, 1102px 1153px #fff,
      2180px 2320px #fff, 246px 1618px #fff, 792px 2486px #fff,
      352px 1654px #fff, 377px 1406px #fff, 1611px 2234px #fff,
      1700px 558px #fff, 2234px 1977px #fff, 1122px 1155px #fff,
      1969px 2172px #fff, 1027px 285px #fff, 489px 2553px #fff,
      337px 1580px #fff, 1182px 900px #fff, 2199px 880px #fff, 1033px 652px #fff,
      331px 1854px #fff, 2306px 2065px #fff, 2338px 932px #fff,
      1446px 2456px #fff, 1668px 1019px #fff, 838px 896px #fff,
      1996px 711px #fff, 2306px 1345px #fff, 166px 2032px #fff, 752px 231px #fff,
      2172px 2006px #fff, 802px 959px #fff, 183px 738px #fff, 1993px 2233px #fff,
      1576px 183px #fff, 1898px 769px #fff, 2329px 535px #fff, 704px 2187px #fff,
      1564px 1333px #fff, 1653px 2403px #fff, 2408px 2385px #fff,
      2398px 770px #fff, 640px 1094px #fff, 783px 1568px #fff, 177px 1280px #fff,
      313px 2148px #fff, 556px 636px #fff, 1526px 432px #fff, 848px 530px #fff,
      2227px 2077px #fff, 1040px 751px #fff, 346px 1693px #fff, 2512px 52px #fff,
      2506px 423px #fff, 1917px 1705px #fff, 1839px 2354px #fff,
      2307px 447px #fff, 413px 168px #fff, 2100px 1525px #fff,
      1747px 1739px #fff, 1083px 1904px #fff, 1265px 2122px #fff,
      177px 2550px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-4:after {
    box-shadow: 0px 0px #fff, 1497px 767px #fff, 1066px 815px #fff,
      1206px 2108px #fff, 801px 407px #fff, 2206px 1493px #fff,
      1693px 1601px #fff, 1445px 1292px #fff, 2496px 180px #fff,
      1789px 445px #fff, 2309px 1132px #fff, 2119px 1434px #fff,
      565px 1767px #fff, 1631px 707px #fff, 7px 529px #fff, 725px 251px #fff,
      705px 1799px #fff, 2472px 1096px #fff, 2028px 896px #fff,
      1190px 1262px #fff, 1250px 237px #fff, 1167px 2531px #fff,
      1775px 660px #fff, 69px 1810px #fff, 140px 1757px #fff, 719px 265px #fff,
      2210px 2128px #fff, 1529px 1793px #fff, 2056px 301px #fff,
      603px 2046px #fff, 1400px 614px #fff, 1024px 2262px #fff,
      2540px 1360px #fff, 1205px 987px #fff, 18px 2046px #fff,
      2031px 1975px #fff, 521px 1781px #fff, 410px 1033px #fff,
      874px 2400px #fff, 1023px 437px #fff, 1868px 2200px #fff, 772px 342px #fff,
      1657px 2270px #fff, 1048px 616px #fff, 1944px 2152px #fff,
      975px 476px #fff, 1169px 2456px #fff, 1249px 1219px #fff,
      1971px 1655px #fff, 1448px 1411px #fff, 2537px 1609px #fff,
      9px 1765px #fff, 827px 1429px #fff, 2084px 2347px #fff, 1517px 662px #fff,
      1622px 2368px #fff, 327px 422px #fff, 1235px 111px #fff,
      2005px 1645px #fff, 2256px 438px #fff, 1317px 93px #fff, 573px 398px #fff,
      1925px 331px #fff, 83px 1636px #fff, 2161px 379px #fff, 662px 337px #fff,
      339px 2541px #fff, 1414px 1432px #fff, 742px 280px #fff, 300px 256px #fff,
      2396px 442px #fff, 2230px 974px #fff, 2392px 1159px #fff, 801px 18px #fff,
      1366px 1637px #fff, 472px 82px #fff, 718px 666px #fff, 73px 1627px #fff,
      2187px 1639px #fff, 1886px 1369px #fff, 2096px 1223px #fff,
      1248px 1953px #fff, 109px 2175px #fff, 1928px 1020px #fff,
      36px 1772px #fff, 1038px 1938px #fff, 2552px 893px #fff, 544px 2340px #fff,
      591px 1367px #fff, 454px 947px #fff, 1482px 1647px #fff, 344px 2127px #fff,
      1389px 2119px #fff, 629px 1873px #fff, 1433px 2418px #fff,
      212px 1773px #fff, 279px 1936px #fff, 1854px 1304px #fff, 73px 615px #fff,
      761px 125px #fff, 902px 599px #fff, 2140px 944px #fff, 413px 2449px #fff,
      1794px 1180px #fff, 1229px 1866px #fff, 2450px 308px #fff,
      1794px 625px #fff, 1026px 179px #fff, 144px 2293px #fff, 639px 1998px #fff,
      1250px 858px #fff, 1865px 881px #fff, 785px 2200px #fff, 1860px 411px #fff,
      1362px 74px #fff, 595px 2290px #fff, 1586px 1117px #fff, 576px 1923px #fff,
      1975px 94px #fff, 258px 458px #fff, 2122px 1565px #fff, 2147px 70px #fff,
      1664px 206px #fff, 2522px 1115px #fff, 1095px 853px #fff,
      533px 1931px #fff, 559px 2180px #fff, 947px 1821px #fff, 362px 1233px #fff,
      1245px 21px #fff, 867px 1433px #fff, 827px 1671px #fff, 2130px 982px #fff,
      1448px 1990px #fff, 1147px 129px #fff, 1583px 123px #fff,
      1478px 557px #fff, 552px 1324px #fff, 2407px 1194px #fff,
      153px 2417px #fff, 2320px 1619px #fff, 1765px 2471px #fff,
      1179px 412px #fff, 188px 547px #fff, 552px 1321px #fff, 1808px 2143px #fff,
      2255px 1717px #fff, 2327px 2406px #fff, 571px 2449px #fff,
      2142px 779px #fff, 1558px 1365px #fff, 984px 10px #fff, 1209px 1267px #fff,
      1883px 750px #fff, 1536px 426px #fff, 974px 93px #fff, 952px 439px #fff,
      2190px 1513px #fff, 1808px 2311px #fff, 1351px 1967px #fff,
      275px 875px #fff, 1616px 749px #fff, 578px 1603px #fff, 694px 663px #fff,
      1386px 824px #fff, 1662px 606px #fff, 1851px 833px #fff,
      2459px 2209px #fff, 625px 1958px #fff, 2072px 2467px #fff,
      1179px 274px #fff, 647px 5px #fff, 2343px 2255px #fff, 2308px 1600px #fff,
      1156px 2351px #fff, 2160px 364px #fff, 1935px 1167px #fff,
      955px 242px #fff, 856px 2473px #fff, 1887px 942px #fff, 1140px 2163px #fff,
      391px 1191px #fff, 2260px 336px #fff, 785px 1009px #fff, 165px 1899px #fff,
      1129px 2290px #fff, 1333px 384px #fff, 610px 596px #fff,
      1745px 1109px #fff, 1655px 2163px #fff, 989px 1906px #fff,
      1911px 295px #fff, 563px 1360px #fff, 922px 519px #fff, 2393px 1306px #fff,
      1964px 407px #fff, 114px 1254px #fff, 604px 1760px #fff,
      1973px 1835px #fff, 1451px 296px #fff, 949px 1835px #fff,
      273px 1542px #fff, 2319px 980px #fff, 1445px 2474px #fff,
      1147px 223px #fff, 658px 768px #fff, 2051px 66px #fff, 157px 1207px #fff,
      1606px 134px #fff, 1734px 1946px #fff, 2201px 884px #fff,
      2423px 1234px #fff, 1467px 1918px #fff, 2366px 2387px #fff,
      2468px 2058px #fff, 1558px 605px #fff, 340px 1058px #fff,
      2370px 245px #fff, 1742px 341px #fff, 921px 1837px #fff,
      1051px 1153px #fff, 207px 1961px #fff, 1028px 2468px #fff,
      2013px 1413px #fff, 1756px 988px #fff, 1624px 1885px #fff,
      1596px 924px #fff, 699px 2455px #fff, 718px 766px #fff, 1341px 2537px #fff,
      2522px 1167px #fff, 1227px 1503px #fff, 1682px 1927px #fff,
      2410px 1049px #fff, 2435px 1912px #fff, 894px 2436px #fff,
      2451px 1497px #fff, 2246px 1437px #fff, 2224px 1190px #fff,
      1259px 417px #fff, 2283px 187px #fff, 2006px 2001px #fff,
      1283px 144px #fff, 1611px 2448px #fff, 1462px 1767px #fff,
      993px 1837px #fff, 672px 1534px #fff, 1678px 1113px #fff,
      1299px 1398px #fff, 731px 277px #fff, 2152px 2102px #fff,
      1540px 539px #fff, 2394px 985px #fff, 1636px 866px #fff, 1164px 691px #fff,
      1793px 1705px #fff, 2335px 2500px #fff, 757px 610px #fff,
      1999px 1561px #fff, 2073px 1094px #fff, 1270px 396px #fff,
      82px 1863px #fff, 1127px 250px #fff, 767px 2297px #fff, 335px 2206px #fff,
      544px 1595px #fff, 131px 2162px #fff, 2116px 1818px #fff,
      1687px 2293px #fff, 2190px 565px #fff, 2490px 2501px #fff,
      767px 222px #fff, 2264px 1484px #fff, 971px 498px #fff, 170px 1934px #fff,
      1455px 1590px #fff, 1483px 30px #fff, 1275px 37px #fff, 992px 238px #fff,
      2136px 597px #fff, 143px 371px #fff, 769px 2462px #fff, 1737px 1752px #fff,
      2248px 196px #fff, 1103px 482px #fff, 1132px 891px #fff,
      2333px 1648px #fff, 2472px 1496px #fff, 1046px 2458px #fff,
      231px 862px #fff, 334px 24px #fff, 348px 1189px #fff, 1333px 2225px #fff,
      2524px 356px #fff, 17px 1735px #fff, 1294px 2373px #fff, 281px 2346px #fff,
      199px 1436px #fff, 548px 32px #fff, 696px 1975px #fff, 1748px 827px #fff,
      1814px 1292px #fff, 175px 1643px #fff, 556px 2345px #fff, 58px 2422px #fff,
      885px 1220px #fff, 2203px 876px #fff, 2534px 1426px #fff,
      528px 1005px #fff, 2419px 463px #fff, 915px 1556px #fff, 966px 1324px #fff,
      1895px 1206px #fff, 2374px 374px #fff, 2071px 624px #fff,
      1729px 1298px #fff, 2293px 2083px #fff, 2341px 1087px #fff,
      138px 1735px #fff, 799px 1950px #fff, 696px 2477px #fff, 178px 1141px #fff,
      2295px 2045px #fff, 1486px 754px #fff, 411px 1239px #fff,
      991px 1800px #fff, 1274px 381px #fff, 30px 225px #fff, 268px 271px #fff,
      1659px 396px #fff, 2486px 2177px #fff, 1253px 2286px #fff,
      2204px 567px #fff, 329px 16px #fff, 1473px 2002px #fff, 1670px 1581px #fff,
      350px 1851px #fff, 1388px 983px #fff, 1136px 1115px #fff,
      1019px 419px #fff, 1101px 1626px #fff, 613px 894px #fff,
      1428px 2113px #fff, 2290px 1054px #fff, 42px 2256px #fff,
      2318px 1736px #fff, 1657px 1079px #fff, 1058px 1676px #fff,
      723px 2396px #fff, 584px 634px #fff, 1353px 832px #fff, 8px 1270px #fff,
      773px 437px #fff, 706px 2264px #fff, 1421px 1754px #fff, 169px 2446px #fff,
      304px 595px #fff, 341px 1301px #fff, 187px 2384px #fff, 374px 1202px #fff,
      1829px 1294px #fff, 1248px 513px #fff, 1701px 1778px #fff,
      1728px 1249px #fff, 1784px 83px #fff, 531px 2530px #fff, 71px 821px #fff,
      1997px 1664px #fff, 1950px 292px #fff, 2102px 785px #fff,
      1310px 1446px #fff, 343px 1164px #fff, 687px 2338px #fff,
      1461px 2217px #fff, 32px 2545px #fff, 2044px 2481px #fff, 512px 69px #fff,
      484px 771px #fff, 2106px 2443px #fff, 1909px 814px #fff,
      1986px 1494px #fff, 278px 2184px #fff, 2305px 2182px #fff,
      2270px 1013px #fff, 965px 1178px #fff, 2355px 2127px #fff,
      1523px 736px #fff, 794px 144px #fff, 309px 1650px #fff, 1243px 249px #fff,
      140px 2257px #fff, 1071px 529px #fff, 691px 1578px #fff, 1546px 261px #fff,
      1797px 2550px #fff, 9px 121px #fff, 1097px 240px #fff, 1657px 604px #fff,
      533px 2211px #fff, 310px 1156px #fff, 1305px 722px #fff;
    height: 1px;
    width: 1px;
  }

  @-webkit-keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }

  @keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }
</style>

]]></content></entry><entry><title type="html">此时此刻的我</title><link href="https://thiscute.world/now/"/><id>https://thiscute.world/now/</id><author><name>ryan4yin</name></author><published>2021-02-01T14:14:35+08:00</published><updated>2021-02-01T14:14:35+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>在这个信息爆炸的时代，更需要能够放慢脚步，沉下心，系统性的学习。</p>
</blockquote>
<blockquote>
<p>过去的我：<a href="/history" rel="">学习轨迹记录</a></p>
</blockquote>
<h2 id="一我正在研究这些" class="headerLink">
    <a href="#%e4%b8%80%e6%88%91%e6%ad%a3%e5%9c%a8%e7%a0%94%e7%a9%b6%e8%bf%99%e4%ba%9b" class="header-mark"></a>一、我正在研究这些</h2><blockquote>
<p>按优先级排序</p>
</blockquote>
<ul>
<li>极客时间《OpenResty 从入门到实战》</li>
<li>The ANSI C Programming Language - 83/236
<ul>
<li>快速过一遍语法</li>
</ul>
</li>
<li><a href="https://geektutu.com/post/gee.html" target="_blank" rel="noopener noreffer">Go语言动手写Web框架</a> - 进度 20%</li>
<li>阅读 <a href="https://programming-kubernetes.info/" target="_blank" rel="noopener noreffer">Programming Kubernetes - Developing Cloud Native Applications</a> - 进度 7%</li>
</ul>
<h2 id="二我今年还想搞搞这些" class="headerLink">
    <a href="#%e4%ba%8c%e6%88%91%e4%bb%8a%e5%b9%b4%e8%bf%98%e6%83%b3%e6%90%9e%e6%90%9e%e8%bf%99%e4%ba%9b" class="header-mark"></a>二、我今年还想搞搞这些</h2><p>今年的学习进展：</p>
<ul>
<li>Go 语言 Web 编程
<ul>
<li>已完成
<ul>
<li>阅读了《Go 程序设计语言》，学会了 Go 语言基础</li>
<li>使用 Go+Gin 完成了一个 Nginx 网关控制器项目并上线，实现了一些简单的接口</li>
</ul>
</li>
<li>待完成
<ul>
<li><a href="https://github.com/geektutu/high-performance-go" target="_blank" rel="noopener noreffer">Go 语言高性能编程</a></li>
<li><a href="https://geektutu.com/post/geecache.html" target="_blank" rel="noopener noreffer">7天用Go从零实现分布式缓存GeeCache</a></li>
<li><a href="https://geektutu.com/post/geeorm.html" target="_blank" rel="noopener noreffer">7天用Go从零实现ORM框架GeeORM</a></li>
<li><a href="https://geektutu.com/post/geerpc.html" target="_blank" rel="noopener noreffer">7天用Go从零实现RPC框架GeeRPC</a></li>
<li><a href="https://github.com/zehuamama/balancer" target="_blank" rel="noopener noreffer">balancer</a>: 源码阅读，如何使用 go 实现常见 balancer 算法</li>
</ul>
</li>
</ul>
</li>
<li>Kubernetes 原理、Kubernetes APIServer/Operator 编程
<ul>
<li>已完成
<ul>
<li>学习了极客时间《深入理解 Kubernetes》专栏</li>
<li>完成了一个 Nginx 网关项目，熟悉并应用了 client-go 的 informer</li>
</ul>
</li>
<li>待完成
<ul>
<li><a href="https://programming-kubernetes.info/" target="_blank" rel="noopener noreffer">Programming Kubernetes - Developing Cloud Native Applications</a></li>
</ul>
</li>
</ul>
</li>
<li>Linux 性能调优与 Linux 网络技术
<ul>
<li>待完成
<ul>
<li>C 语言基础复习
<ul>
<li>The ANSI C Programming Language - 用来快速复习下 C 的语法</li>
<li>通过其他资料补充学习 make gdb ld objdump objcopy 等命令</li>
</ul>
</li>
<li><a href="https://man7.org/tlpi/" target="_blank" rel="noopener noreffer">Linux/Unix 系统编程手册（上册）</a> - 进度 21/572
<ul>
<li>学习 Linux 的顶级书藉，据说内容组织比 APUE 对新手更友好些。</li>
</ul>
</li>
<li>《深入理解 Linux 网络 - 张彦飞》 - 14/320</li>
<li>极客时间《网络排查案例课》</li>
<li>极客时间 《Linux 性能优化实战》</li>
</ul>
</li>
</ul>
</li>
<li>区块链与分布式系统
<ul>
<li>已完成
<ul>
<li>《<a href="https://github.com/ethereumbook/ethereumbook" target="_blank" rel="noopener noreffer">Mastering Ethereum</a>》 - 100%</li>
</ul>
</li>
<li>待完成
<ul>
<li>极客时间《分布式协议与算法实战》 - 40%</li>
</ul>
</li>
</ul>
</li>
<li>机器学习与深度学习
<ul>
<li>待完成
<ul>
<li><a href="https://github.com/d2l-ai/d2l-zh" target="_blank" rel="noopener noreffer">动手学深度学习 - Pytorch 版</a> - 14.3%</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三今年的阅读进展" class="headerLink">
    <a href="#%e4%b8%89%e4%bb%8a%e5%b9%b4%e7%9a%84%e9%98%85%e8%af%bb%e8%bf%9b%e5%b1%95" class="header-mark"></a>三、今年的阅读进展</h2><blockquote>
<p>电子版都可以在 z-library 上很方便地下载到，实体书的话可以在多抓鱼等二手书平台碰碰运气。</p>
</blockquote>
<p>已读：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 《人间失格》</li>
<li><input checked="" disabled="" type="checkbox"> 《月宫》</li>
<li><input checked="" disabled="" type="checkbox"> 《<a href="https://github.com/nakov/Practical-Cryptography-for-Developers-Book" target="_blank" rel="noopener noreffer">Practical Cryptography for Developers</a>》</li>
<li><input checked="" disabled="" type="checkbox"> 《<a href="https://github.com/ethereumbook/ethereumbook" target="_blank" rel="noopener noreffer">Mastering Ethereum</a>》</li>
<li><input checked="" disabled="" type="checkbox"> 《Go 程序设计语言（英文版）》</li>
<li><input checked="" disabled="" type="checkbox"> 《深入浅出 Kubernetes - 张磊》</li>
<li><input checked="" disabled="" type="checkbox"> 《在生命的尽头拥抱你-临终关怀医生手记》</li>
</ul>
<p>正在读：</p>
<ul>
<li>《The ANSI C Programming Language》：上大学时看过中文版。为了学操作系统，有必要再看一遍，这次就读原著英文版吧。</li>
<li><a href="https://programming-kubernetes.info/" target="_blank" rel="noopener noreffer">Programming Kubernetes - Developing Cloud Native Applications</a>: Kubernetes 进阶</li>
<li>《Principles Of Economics, 9e, N. Gregory Mankiw》</li>
<li>《Intimate Relationships》 - 进度 14/449</li>
<li>《语言学的邀请》- 进度 68/288
<ul>
<li>对语言学有点兴趣，同时听说这本书对表达（沟通、写作）也大有帮助~</li>
</ul>
</li>
</ul>
<p>想读，但是没啥计划：</p>
<ul>
<li>《云原生服务网格 Istio：原理、实践、架构与源码解析》
<ul>
<li>比较老的书了，不过用来学下 Istio 的底层架构跟源码，感觉还是有价值的。</li>
</ul>
</li>
<li>《在峡江的转弯处 - 陈行甲人生笔记》</li>
<li>《手把手教你读财报》</li>
<li>《原则 - 应对变化中的世界秩序》</li>
<li>《生命最后的读书会》</li>
<li>《凤凰项目：一个 IT 运维的传奇故事》</li>
<li>《复杂 - 梅拉尼 米歇尔》</li>
<li>《性能之巅（第二版）：企业与云可观测性》</li>
<li>《BPF Performance Tools（英文版）》</li>
<li>《语言学的邀请》：对语言学有点兴趣，同时听说这本书对表达（沟通、写作）也大有帮助~</li>
<li>《Intimate Relationships》</li>
<li>《Social Psychology, 13e, David Myers》</li>
</ul>
<h2 id="四我的知识清单" class="headerLink">
    <a href="#%e5%9b%9b%e6%88%91%e7%9a%84%e7%9f%a5%e8%af%86%e6%b8%85%e5%8d%95" class="header-mark"></a>四、我的知识清单</h2><h3 id="1-高优先级" class="headerLink">
    <a href="#1-%e9%ab%98%e4%bc%98%e5%85%88%e7%ba%a7" class="header-mark"></a>1. 高优先级</h3><ul>
<li>
<p>写几个小项目（使用 rust/go）</p>
<ul>
<li>实现一个文本编辑器
<ul>
<li><a href="https://viewsourcecode.org/snaptoken/kilo/" target="_blank" rel="noopener noreffer">https://viewsourcecode.org/snaptoken/kilo/</a></li>
</ul>
</li>
<li>实现一个简单的 Linux 容器
<ul>
<li><a href="https://blog.lizzie.io/linux-containers-in-500-loc.html" target="_blank" rel="noopener noreffer">https://blog.lizzie.io/linux-containers-in-500-loc.html</a></li>
</ul>
</li>
<li>网络代理（不到 2000 行的 TUN 库）
<ul>
<li><a href="https://github.com/songgao/water" target="_blank" rel="noopener noreffer">https://github.com/songgao/water</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p>Go 语言进阶</p>
<ul>
<li>《Go 学习笔记（第六版下卷）》
<ul>
<li>基于 go 1.10，详细分析 go 的实现机制：内存分配、垃圾回收、并发调度等等</li>
</ul>
</li>
</ul>
</li>
<li>
<p>Linux 系统</p>
<ul>
<li>极客时间 《Linux 内核技术实战课》</li>
<li><a href="https://github.com/sunym1993/flash-linux0.11-talk" target="_blank" rel="noopener noreffer">flash-linux0.11-talk</a></li>
<li>极客时间《容器实战高手课》</li>
<li>极客时间《eBPF 核心技术与实战》</li>
</ul>
</li>
<li>
<p>C 语言进阶</p>
<ul>
<li>极客时间《深入 C 语言和程序运行原理》</li>
</ul>
</li>
<li>
<p>Openresty 技术栈：（暂时感觉兴趣不大）</p>
<ul>
<li>阅读《Lua 程序设计》</li>
<li>阅读《自己动手实现 Lua》</li>
<li>阅读 APISIX 源码 + Openresty</li>
<li>深入学习 Nginx 及 epoll</li>
</ul>
</li>
<li>
<p>容器底层原理</p>
<ul>
<li>容器镜像的文件系统：overlayfs</li>
<li>镜像的构建流程：研究 buildkit/buildah 的实现</li>
</ul>
</li>
<li>
<p><a href="https://sudo.pagerduty.com/for_engineers/" target="_blank" rel="noopener noreffer">Security Training for Engineers - PagerDuty</a>: 花几个小时，快速学习开发人员需要了解的安全知识</p>
</li>
</ul>
<p>生活：</p>
<ul>
<li>娱乐+运动：
<ul>
<li>轮滑：倒滑后压步</li>
<li>游泳：学会蛙泳并且提升速度</li>
</ul>
</li>
</ul>
<h3 id="2-中优先级" class="headerLink">
    <a href="#2-%e4%b8%ad%e4%bc%98%e5%85%88%e7%ba%a7" class="header-mark"></a>2. 中优先级</h3><blockquote>
<p>附一份屌炸天的 CS 自学指南：https://github.com/pkuflyingpig/cs-self-learning/</p>
</blockquote>
<ul>
<li>
<p>学习英语，目标是能流利地读写交流。</p>
<ul>
<li>主要是可以扩宽工作的选择面，外企很多职位会要求英文读写流利。</li>
</ul>
</li>
<li>
<p>分布式协议与区块链</p>
<ol>
<li>《区块链核心算法解析》</li>
<li>《Design Data-Intensive Applications》</li>
<li>《Blockchain in Action》</li>
<li>《Distributed Systems, 3rd Edition, 2017》</li>
<li>《Distributed Algorithms, 2nd Edition, 2018》</li>
</ol>
</li>
<li>
<p>Rust 语言</p>
<ul>
<li>极客时间《Rust 编程第一课》</li>
</ul>
</li>
<li>
<p>[进阶]操作系统（大概是以 OSTEP 为核心，学习时缺啥补啥吧）：</p>
<ul>
<li>核心课程：<a href="https://pages.cs.wisc.edu/~remzi/OSTEP/" target="_blank" rel="noopener noreffer">Operating Systems - Three Easy Pieces</a>: 建议结合 <a href="https://pdos.csail.mit.edu/6.828/2020/schedule.html" target="_blank" rel="noopener noreffer">6.S081</a> 课程一起学习</li>
<li>OSTEP 学习指南：https://github.com/ryan4yin/computer-science/blob/master/coursepages/coresystems/ostep/OSTEP.md</li>
<li>学到 xv6 时可结合这份资料啃源码：<a href="https://github.com/palladian1/xv6-annotated" target="_blank" rel="noopener noreffer">xv6-annotated</a></li>
<li>Advanced Programming in the UNIX Environment, 3rd Edition: 同样是 Linux/Unix 系统的神书。学 OSTEP 遇到瓶颈时或可阅读。</li>
<li><a href="http://www.brendangregg.com/systems-performance-2nd-edition-book.html" target="_blank" rel="noopener noreffer">Systems Performance: Enterprise and the Cloud, 2nd Edition (2020)</a>: 进阶读物，搞系统性能优化的</li>
</ul>
</li>
<li>
<p>计算机网络</p>
<ul>
<li>《Computer Networking - A Top-Down Approach, 7e》：这本书我以前学过一次，但是主要只学了应用层到传输层的内容。
<ul>
<li>可以结合 <a href="https://www.youtube.com/watch?v=1CP6aF09OjI&amp;list=PLEAYkSg4uSQ2dr0XO_Nwa5OcdEcaaELSG&amp;index=1&amp;t=14s" target="_blank" rel="noopener noreffer">CS 144: Introduction to Computer Networking</a> 课程一起学习，不过我 C++ 全忘了，或许可以考虑用 rust/go 实现下协议栈？</li>
</ul>
</li>
<li>TCP/IP 协议栈的实现：如果用 rust 的话，可以参考 <a href="https://github.com/google/gvisor" target="_blank" rel="noopener noreffer">google/gvisor</a></li>
</ul>
</li>
<li>
<p>[进阶]数据库、数据结构与算法（暂时感觉兴趣不大）</p>
<ul>
<li>kv 数据库
<ul>
<li>kv 数据库的简单实现: <a href="https://github.com/tidb-incubator/tinykv" target="_blank" rel="noopener noreffer">https://github.com/tidb-incubator/tinykv</a></li>
<li>redis 原理</li>
</ul>
</li>
<li>关系数据库
<ul>
<li>mysql/postgresql 底层原理</li>
<li>实现简单的关系数据库: <a href="https://github.com/tidb-incubator/tinysql" target="_blank" rel="noopener noreffer">https://github.com/tidb-incubator/tinysql</a></li>
</ul>
</li>
<li>搜索技术
<ul>
<li><a href="https://book.douban.com/subject/7006719/" target="_blank" rel="noopener noreffer">这就是搜索引擎</a></li>
<li><a href="https://github.com/huichen/wukong" target="_blank" rel="noopener noreffer">https://github.com/huichen/wukong</a></li>
<li>极客时间《检索技术 25 讲》</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="五我的备选书单" class="headerLink">
    <a href="#%e4%ba%94%e6%88%91%e7%9a%84%e5%a4%87%e9%80%89%e4%b9%a6%e5%8d%95" class="header-mark"></a>五、我的备选书单</h2><p>如下是我目前想读的书单，如果决定读，就把对应的书移到「计划读」中。</p>
<ul>
<li>文学类：
<ul>
<li>《百年孤独》：高中的时候读过一遍，但是都忘差不多了</li>
<li>《霍乱时期的爱情》</li>
<li>《苏菲的世界》：据说是哲学启蒙读物，曾经看过，但是对内容完全没印象了。</li>
<li>《你一生的故事》：我也曾是个科幻迷</li>
<li>《沈从文的后半生》</li>
<li>《房思琪的初恋乐园》</li>
<li>《月光落在左手上》</li>
<li>《了不起的盖茨比》</li>
<li>《The Windup Girl》：高中时读过中文版，刷新我三观，现在想再读一遍英文原版。</li>
</ul>
</li>
<li>人文社科
<ul>
<li>《被讨厌的勇气》</li>
<li>《这才是心理学 - 看穿伪科学的批判性思维 第 11 版》</li>
<li>《江城》</li>
<li>《探路之役 - 1978-1922 年的中国经济改革》</li>
<li>《筚路维艰 - 中国社会主义路径的五次选择》</li>
<li>《刘擎西方现代思想讲义》</li>
<li>《圆圈正义-作为自由前提的信念》</li>
<li>《科学革命的结构》</li>
<li>《人体简史》</li>
<li>《邓小平时代》</li>
<li>《论中国》</li>
<li>《时间的秩序》</li>
<li>《极简宇宙史》</li>
<li>《人生脚本》</li>
<li>《投资中最简单的事》</li>
<li>《债务危机 - 我的应对原则》</li>
</ul>
</li>
<li>技术类
<ul>
<li>《凤凰项目——一个 IT 运维的传奇故事》</li>
<li>《人月神话》</li>
<li>《绩效使能：超越 OKR》</li>
<li>《奈飞文化手册》</li>
<li>《幕后产品-打造突破式思维》</li>
<li>《分析与思考 - 黄奇帆的复旦经济课》：这本书会需要一定的经济学基础知识，打算在入门经济学后再看</li>
<li>《重构 - 改善既有代码的设计》</li>
<li><a href="https://doc.rust-lang.org/book/" target="_blank" rel="noopener noreffer">The Rust Programming Language</a>: 2021 年 8 月读过，2022 可以再搞一搞，主要用来写写网络、操作系统。</li>
<li><a href="https://book.douban.com/subject/27194738/" target="_blank" rel="noopener noreffer">SQL进阶教程</a></li>
<li>分布式系统：<a href="https://dataintensive.net/" target="_blank" rel="noopener noreffer">Designing Data-Intensive Applications</a> - 可结合 <a href="https://pdos.csail.mit.edu/6.824/schedule.html" target="_blank" rel="noopener noreffer">MIT 6.824</a> 课程视频学习</li>
<li>数据库系统：建议直接学习课程 <a href="https://15445.courses.cs.cmu.edu/fall2019/schedule.html" target="_blank" rel="noopener noreffer">CMU 15-445</a></li>
<li>《WebAssembly 核心原理》</li>
<li>用 Go 语言讲编程语言理论
<ul>
<li>《自己动手实现 Lua》</li>
<li>《自己动手实现 Java 虚拟机》</li>
</ul>
</li>
<li>编程语言理论（如何设计一个编程语言）
<ul>
<li>《<a href="http://craftinginterpreters.com" target="_blank" rel="noopener noreffer">Crafting Interpreters</a>》：亚马逊销量第一的编译器设计书籍，好评如潮。
<ul>
<li>之前挑战《编程语言实现模式》，很遗憾失败了，这次我决定拿此书再战。</li>
</ul>
</li>
<li><a href="https://book.douban.com/subject/3136252/" target="_blank" rel="noopener noreffer">Essentials of Programming Languages, 3rd Edition</a></li>
<li><a href="https://book.douban.com/subject/1632977/" target="_blank" rel="noopener noreffer">The Little Schemer - 4th Edition </a></li>
</ul>
</li>
<li>Kubernetes 与容器
<ul>
<li><a href="https://hacking-kubernetes.info/" target="_blank" rel="noopener noreffer">Hacking Kubernetes: Threat-Driven Analysis and Defense</a>: Kubernetes 安全，威胁模型以及如何防护。</li>
<li><a href="https://containersecurity.tech/" target="_blank" rel="noopener noreffer">Container Security: Fundamental Technology Concepts that Protect Containerized Applications</a>: 容器安全，这书在亚马逊上评价很好。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="其他-ideas" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96-ideas" class="header-mark"></a>其他 ideas</h2><ul>
<li>我看到 github 上 <a href="https://github.com/gopala-kr/10-weeks" target="_blank" rel="noopener noreffer">gopala-kr/10-weeks</a> 这个项目，作者进行了一项挑战——每周学习一个新技术栈，目标是在一周内理解该技术栈各项热词的含义并列出大纲，使用该技术构建一个简单的程序，并写一篇博客。我觉得我也可以试试，不过可以把难度降低一些——<strong>利用业余时间，每两个月学习一门新技术，并达成与 gopala-kr 类似的目标</strong>。</li>
<li>其他感兴趣的
<ul>
<li>前端：Preact+Css</li>
<li>3D 建模与渲染：Blender、Unreal Engine 5、C++、taichi</li>
<li>音乐：乐理、Synthesizer V、Reaper、midi 键盘</li>
<li>其他：利用深度学习进行歌声合成、图片分辨率修复（超分辨率）、以及其他好玩的玩法</li>
</ul>
</li>
</ul>

<div class="animation-wrapper">
  <div class="particle particle-1"></div>
  <div class="particle particle-2"></div>
  <div class="particle particle-3"></div>
  <div class="particle particle-4"></div>
</div>

<style>
   
   

  .animation-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -100;
  }

  .particle,
  .particle:after {
    background: transparent;
  }

  .particle:after {
    position: absolute;
    content: "";
    top: 2560px;
  }

  .particle-1 {
    -webkit-animation: animParticle 60s linear infinite;
    animation: animParticle 60s linear infinite;
    box-shadow: 0px 0px #fff, 1231px 1530px #fff, 336px 2471px #fff,
      2385px 128px #fff, 2436px 1283px #fff, 549px 681px #fff,
      1775px 1144px #fff, 238px 1396px #fff, 1330px 1558px #fff,
      2060px 342px #fff, 1986px 1672px #fff, 1532px 702px #fff,
      1313px 1459px #fff, 2406px 1616px #fff, 1529px 802px #fff,
      1267px 680px #fff, 2258px 2109px #fff, 1325px 22px #fff,
      1578px 1045px #fff, 945px 2256px #fff, 1400px 1441px #fff,
      1652px 2152px #fff, 2513px 969px #fff, 2192px 1352px #fff,
      793px 334px #fff, 1371px 1086px #fff, 2408px 1898px #fff, 475px 840px #fff,
      539px 1108px #fff, 556px 1499px #fff, 643px 122px #fff, 2370px 1975px #fff,
      1196px 1786px #fff, 308px 1834px #fff, 1957px 1569px #fff,
      875px 339px #fff, 562px 412px #fff, 1187px 2258px #fff, 1406px 1824px #fff,
      1172px 1792px #fff, 235px 1489px #fff, 2081px 878px #fff, 925px 176px #fff,
      953px 1829px #fff, 38px 48px #fff, 1976px 1994px #fff, 1524px 1567px #fff,
      1397px 1141px #fff, 2014px 1773px #fff, 1638px 1832px #fff,
      1150px 465px #fff, 1212px 1854px #fff, 122px 20px #fff, 2493px 2361px #fff,
      2221px 194px #fff, 480px 2020px #fff, 2340px 403px #fff,
      1975px 2507px #fff, 1434px 142px #fff, 963px 871px #fff,
      2379px 1765px #fff, 2346px 100px #fff, 1931px 1308px #fff,
      527px 814px #fff, 549px 1732px #fff, 943px 886px #fff, 1592px 2277px #fff,
      1339px 810px #fff, 871px 2016px #fff, 2121px 763px #fff,
      1962px 1114px #fff, 2498px 550px #fff, 107px 586px #fff, 316px 1033px #fff,
      2104px 2120px #fff, 1933px 1786px #fff, 1377px 2457px #fff,
      2250px 1010px #fff, 1314px 2316px #fff, 1339px 947px #fff,
      122px 1014px #fff, 558px 2354px #fff, 1250px 1790px #fff,
      1185px 2144px #fff, 2432px 158px #fff, 1911px 2148px #fff,
      1177px 804px #fff, 2504px 1254px #fff, 617px 1084px #fff,
      1959px 1325px #fff, 2394px 2081px #fff, 395px 735px #fff,
      221px 1891px #fff, 652px 2245px #fff, 1225px 1023px #fff,
      1542px 2053px #fff, 876px 2178px #fff, 479px 1915px #fff,
      2297px 1799px #fff, 2160px 387px #fff, 160px 358px #fff,
      1122px 2164px #fff, 2056px 1402px #fff, 2133px 1470px #fff,
      1508px 1865px #fff, 250px 2157px #fff, 715px 1452px #fff,
      2095px 1539px #fff, 1860px 1450px #fff, 185px 2013px #fff,
      1855px 1878px #fff, 690px 2520px #fff, 2250px 838px #fff,
      1547px 1752px #fff, 1103px 615px #fff, 151px 262px #fff, 1630px 577px #fff,
      769px 2448px #fff, 1938px 2347px #fff, 700px 1634px #fff,
      2105px 2053px #fff, 1498px 49px #fff, 799px 512px #fff, 1278px 744px #fff,
      2301px 364px #fff, 1059px 2066px #fff, 2116px 2424px #fff,
      1884px 1046px #fff, 699px 1101px #fff, 62px 1893px #fff, 370px 161px #fff,
      298px 1288px #fff, 1972px 2211px #fff, 1834px 2350px #fff,
      1591px 1118px #fff, 1343px 1730px #fff, 706px 850px #fff,
      317px 1171px #fff, 1395px 2529px #fff, 1040px 2523px #fff,
      793px 2535px #fff, 2180px 142px #fff, 2016px 2511px #fff,
      1032px 1204px #fff, 499px 625px #fff, 130px 2064px #fff, 1371px 758px #fff,
      1045px 2018px #fff, 1954px 309px #fff, 1445px 2514px #fff,
      839px 1523px #fff, 920px 238px #fff, 1421px 1105px #fff, 668px 1517px #fff,
      2045px 2344px #fff, 2465px 1619px #fff, 403px 48px #fff,
      1142px 1102px #fff, 2066px 1803px #fff, 658px 1744px #fff,
      721px 2062px #fff, 2180px 827px #fff, 2310px 111px #fff, 935px 808px #fff,
      1121px 1108px #fff, 1424px 1998px #fff, 821px 1317px #fff,
      2425px 1354px #fff, 305px 1422px #fff, 169px 1559px #fff,
      1850px 425px #fff, 719px 1507px #fff, 1650px 1803px #fff, 275px 402px #fff,
      1038px 772px #fff, 404px 105px #fff, 78px 2119px #fff, 133px 110px #fff,
      2559px 944px #fff, 688px 212px #fff, 869px 2266px #fff, 983px 840px #fff,
      1914px 2154px #fff, 1376px 941px #fff, 2064px 739px #fff,
      1979px 1255px #fff, 592px 1175px #fff, 283px 253px #fff, 696px 2501px #fff,
      1561px 1505px #fff, 745px 2233px #fff, 1180px 1104px #fff,
      1046px 1573px #fff, 1842px 2374px #fff, 1199px 2423px #fff,
      1680px 1359px #fff, 2020px 626px #fff, 1226px 1082px #fff,
      1894px 1824px #fff, 451px 2216px #fff, 544px 1263px #fff, 408px 4px #fff,
      1883px 1020px #fff, 1917px 1777px #fff, 1353px 1808px #fff,
      425px 85px #fff, 1165px 1787px #fff, 561px 1978px #fff, 712px 874px #fff,
      231px 2176px #fff, 516px 8px #fff, 199px 742px #fff, 584px 2388px #fff,
      434px 1584px #fff, 813px 2391px #fff, 1427px 2254px #fff,
      1894px 2083px #fff, 521px 2507px #fff, 391px 352px #fff, 664px 245px #fff,
      179px 13px #fff, 1784px 1939px #fff, 438px 1285px #fff, 975px 1780px #fff,
      1285px 1554px #fff, 924px 2301px #fff, 2340px 1621px #fff,
      1844px 2336px #fff, 640px 637px #fff, 1279px 1236px #fff,
      2419px 2546px #fff, 395px 1790px #fff, 959px 2383px #fff,
      1449px 650px #fff, 2378px 747px #fff, 1360px 24px #fff, 1726px 1609px #fff,
      1632px 1945px #fff, 2295px 2515px #fff, 594px 1339px #fff,
      351px 1327px #fff, 1972px 1942px #fff, 2092px 1604px #fff,
      1580px 1123px #fff, 1511px 2062px #fff, 1551px 1208px #fff,
      2014px 144px #fff, 2373px 2160px #fff, 2041px 823px #fff,
      1682px 1919px #fff, 2224px 338px #fff, 1224px 461px #fff,
      2256px 664px #fff, 2505px 1987px #fff, 2308px 2021px #fff,
      71px 2249px #fff, 1510px 944px #fff, 2148px 726px #fff, 535px 2236px #fff,
      793px 739px #fff, 930px 2533px #fff, 1353px 192px #fff, 1691px 998px #fff,
      1675px 504px #fff, 1632px 2410px #fff, 20px 1985px #fff, 701px 1622px #fff,
      2181px 1612px #fff, 184px 722px #fff, 720px 1488px #fff,
      2300px 1201px #fff, 2173px 402px #fff, 262px 560px #fff, 1379px 347px #fff,
      958px 1285px #fff, 958px 46px #fff, 2157px 1926px #fff, 1018px 1302px #fff,
      231px 1934px #fff, 2407px 1365px #fff, 2483px 1370px #fff,
      1038px 1917px #fff, 1218px 2256px #fff, 1702px 64px #fff,
      2141px 2350px #fff, 851px 2437px #fff, 402px 566px #fff, 2px 1430px #fff,
      341px 1849px #fff, 2210px 1148px #fff, 1071px 2370px #fff,
      1476px 306px #fff, 1857px 395px #fff, 1157px 349px #fff, 1916px 689px #fff,
      1800px 1989px #fff, 477px 2268px #fff, 184px 1033px #fff, 597px 720px #fff,
      52px 1638px #fff, 1338px 1170px #fff, 1190px 1946px #fff,
      981px 1481px #fff, 2096px 715px #fff, 1861px 658px #fff,
      1139px 1485px #fff, 1471px 1029px #fff, 1639px 424px #fff,
      558px 2453px #fff, 452px 987px #fff, 630px 1639px #fff, 2353px 2553px #fff,
      1847px 51px #fff, 884px 1805px #fff, 2280px 1759px #fff, 1490px 491px #fff,
      747px 1064px #fff, 2220px 1118px #fff, 2080px 747px #fff,
      1438px 1230px #fff, 295px 1674px #fff, 1294px 291px #fff,
      1148px 1742px #fff, 670px 1968px #fff, 2544px 741px #fff,
      426px 2035px #fff, 2187px 2309px #fff, 178px 2227px #fff,
      768px 2459px #fff, 1580px 1283px #fff, 1740px 200px #fff,
      352px 1310px #fff, 581px 602px #fff, 1439px 274px #fff, 2002px 1410px #fff,
      225px 1490px #fff, 2292px 1251px #fff, 1854px 760px #fff, 704px 221px #fff,
      385px 1883px #fff, 2352px 1092px #fff, 792px 1590px #fff,
      672px 1419px #fff, 1971px 497px #fff, 2505px 1312px #fff,
      102px 2102px #fff, 2204px 1555px #fff, 2000px 1593px #fff,
      2173px 1802px #fff, 1415px 237px #fff, 895px 1877px #fff,
      710px 1154px #fff, 251px 2478px #fff, 1266px 1534px #fff,
      2186px 1466px #fff, 1518px 2448px #fff, 515px 2525px #fff,
      1634px 2324px #fff, 1706px 683px #fff, 292px 1485px #fff,
      872px 2046px #fff, 658px 437px #fff, 2367px 1938px #fff,
      2018px 2543px #fff, 551px 542px #fff, 1711px 2307px #fff,
      2467px 999px #fff, 2046px 630px #fff, 1307px 2344px #fff,
      1893px 1311px #fff, 2536px 2425px #fff, 1777px 19px #fff,
      1845px 2044px #fff, 1261px 454px #fff, 2333px 2299px #fff,
      1019px 2349px #fff, 2074px 1014px #fff, 806px 1290px #fff,
      2152px 637px #fff, 980px 534px #fff, 199px 1781px #fff, 2091px 1219px #fff,
      917px 1990px #fff, 172px 714px #fff, 395px 2339px #fff, 35px 764px #fff,
      2110px 1796px #fff, 62px 996px #fff, 1340px 490px #fff, 1950px 797px #fff,
      2116px 72px #fff, 671px 2088px #fff, 2023px 1819px #fff, 90px 1219px #fff,
      1685px 282px #fff, 1843px 873px #fff, 100px 1446px #fff,
      2118px 1215px #fff, 1973px 1591px #fff, 2185px 1292px #fff,
      1270px 804px #fff, 2171px 1348px #fff, 2268px 6px #fff, 1580px 651px #fff,
      1806px 1438px #fff, 2435px 181px #fff, 437px 578px #fff,
      1924px 1356px #fff, 602px 1111px #fff, 2455px 1226px #fff,
      1887px 392px #fff, 730px 1492px #fff, 697px 2141px #fff, 852px 466px #fff,
      1px 1641px #fff, 788px 514px #fff, 183px 321px #fff, 932px 1224px #fff,
      1102px 692px #fff, 1587px 976px #fff, 1395px 2290px #fff,
      144px 2480px #fff, 623px 2164px #fff, 2098px 2043px #fff,
      336px 1662px #fff, 2191px 2279px #fff, 577px 2027px #fff,
      2215px 2483px #fff, 218px 2083px #fff, 2182px 122px #fff, 659px 791px #fff,
      317px 531px #fff, 980px 1456px #fff, 2533px 578px #fff, 595px 2478px #fff,
      2200px 1766px #fff, 2107px 1970px #fff, 1935px 1295px #fff,
      1822px 1691px #fff, 787px 1129px #fff, 1051px 718px #fff,
      915px 2488px #fff, 2037px 1394px #fff, 341px 319px #fff, 1843px 410px #fff,
      1501px 963px #fff, 404px 297px #fff, 1234px 1644px #fff, 883px 74px #fff,
      491px 2414px #fff, 334px 386px #fff, 951px 1852px #fff, 2194px 274px #fff,
      1424px 330px #fff, 1636px 995px #fff, 1566px 2450px #fff,
      544px 1430px #fff, 630px 1056px #fff, 925px 1203px #fff, 362px 101px #fff,
      1442px 834px #fff, 1786px 2360px #fff, 1611px 276px #fff,
      1715px 2151px #fff, 652px 2192px #fff, 589px 928px #fff,
      2460px 1658px #fff, 2408px 1139px #fff, 967px 1843px #fff,
      379px 720px #fff, 1832px 1057px #fff, 2234px 1836px #fff,
      436px 2526px #fff, 1327px 781px #fff, 1835px 768px #fff, 1037px 95px #fff,
      1422px 405px #fff, 1880px 758px #fff, 2291px 1828px #fff,
      2053px 2261px #fff, 121px 2256px #fff, 1460px 801px #fff, 64px 2344px #fff,
      97px 83px #fff, 2046px 1880px #fff, 866px 1852px #fff, 1317px 2444px #fff,
      1139px 168px #fff, 2413px 2333px #fff, 2289px 1063px #fff,
      2317px 816px #fff, 1773px 1366px #fff, 916px 1909px #fff,
      1303px 2052px #fff, 1406px 1299px #fff, 439px 2455px #fff,
      1113px 188px #fff, 1504px 462px #fff, 1376px 2373px #fff,
      495px 2084px #fff, 2198px 626px #fff, 2119px 1814px #fff, 86px 2541px #fff,
      1107px 854px #fff, 826px 1258px #fff, 2234px 1899px #fff, 88px 807px #fff,
      1982px 2487px #fff, 2035px 196px #fff, 148px 2103px #fff, 36px 2551px #fff,
      1842px 1164px #fff, 1858px 232px #fff, 405px 989px #fff,
      2432px 1061px #fff, 456px 1701px #fff, 427px 11px #fff, 588px 1308px #fff,
      1541px 620px #fff, 1827px 538px #fff, 1511px 1873px #fff,
      1485px 2156px #fff, 1287px 531px #fff, 1139px 1362px #fff,
      1621px 1023px #fff, 2380px 446px #fff, 649px 868px #fff, 596px 1417px #fff,
      1659px 560px #fff, 2340px 920px #fff, 2231px 1604px #fff,
      1726px 2117px #fff, 2048px 2156px #fff, 1505px 1588px #fff,
      1559px 723px #fff, 1130px 1943px #fff, 271px 584px #fff,
      1217px 2093px #fff, 1312px 552px #fff, 2557px 2342px #fff, 652px 73px #fff,
      1501px 2455px #fff, 1286px 1648px #fff, 838px 1551px #fff,
      1652px 1712px #fff, 1224px 160px #fff, 1928px 524px #fff, 899px 292px #fff,
      944px 1720px #fff, 1785px 1255px #fff, 104px 96px #fff, 1964px 546px #fff,
      2195px 1470px #fff, 893px 1423px #fff, 406px 341px #fff, 1px 2175px #fff,
      1044px 2022px #fff, 1336px 990px #fff, 1592px 788px #fff,
      2338px 710px #fff, 2401px 859px #fff, 1095px 137px #fff, 218px 90px #fff,
      2235px 2313px #fff, 1564px 162px #fff, 1900px 1265px #fff,
      199px 346px #fff, 1639px 360px #fff, 1795px 387px #fff, 926px 1493px #fff,
      648px 86px #fff, 802px 691px #fff, 1733px 349px #fff, 86px 91px #fff,
      1357px 183px #fff, 883px 78px #fff, 282px 2276px #fff, 779px 2104px #fff,
      48px 2155px #fff, 1783px 1891px #fff, 1794px 1397px #fff,
      695px 1358px #fff, 290px 1509px #fff, 136px 169px #fff, 2109px 1713px #fff,
      1595px 2295px #fff, 1346px 253px #fff, 2439px 473px #fff,
      700px 2460px #fff, 1594px 1415px #fff, 1842px 834px #fff,
      1645px 553px #fff, 1269px 433px #fff, 1686px 1807px #fff,
      1513px 1884px #fff, 2365px 627px #fff, 828px 2194px #fff,
      1950px 2019px #fff, 1769px 1193px #fff, 498px 1207px #fff,
      355px 2374px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-1:after {
    box-shadow: 0px 0px #fff, 1832px 195px #fff, 885px 2516px #fff,
      1163px 2003px #fff, 2519px 2207px #fff, 436px 774px #fff,
      1807px 1508px #fff, 2511px 1453px #fff, 1976px 2155px #fff,
      1539px 257px #fff, 739px 999px #fff, 2259px 2296px #fff,
      1444px 2057px #fff, 743px 2500px #fff, 1540px 1111px #fff,
      1193px 360px #fff, 1258px 1413px #fff, 1024px 2381px #fff,
      2161px 1319px #fff, 390px 2106px #fff, 340px 1212px #fff,
      1180px 659px #fff, 1373px 718px #fff, 998px 1978px #fff, 2086px 612px #fff,
      2063px 1062px #fff, 1555px 181px #fff, 1947px 1547px #fff,
      613px 1061px #fff, 2126px 2538px #fff, 1701px 1770px #fff,
      822px 174px #fff, 2290px 1563px #fff, 2174px 1490px #fff, 1762px 53px #fff,
      349px 173px #fff, 192px 1364px #fff, 981px 2345px #fff, 997px 369px #fff,
      2247px 1455px #fff, 1815px 398px #fff, 681px 2163px #fff, 754px 817px #fff,
      192px 290px #fff, 1882px 1953px #fff, 2380px 1434px #fff,
      1944px 1921px #fff, 2397px 633px #fff, 753px 2037px #fff,
      1665px 1188px #fff, 1931px 1432px #fff, 284px 1706px #fff,
      971px 680px #fff, 978px 1360px #fff, 456px 504px #fff, 138px 2192px #fff,
      571px 1679px #fff, 2274px 441px #fff, 701px 1195px #fff, 2110px 551px #fff,
      673px 578px #fff, 1164px 1991px #fff, 231px 387px #fff, 280px 18px #fff,
      1135px 2124px #fff, 2534px 1592px #fff, 1870px 1318px #fff,
      224px 1117px #fff, 986px 410px #fff, 1010px 1351px #fff, 1374px 315px #fff,
      575px 950px #fff, 637px 2363px #fff, 1208px 2031px #fff,
      1471px 1134px #fff, 91px 1298px #fff, 1695px 2101px #fff, 48px 664px #fff,
      1413px 2224px #fff, 1602px 2077px #fff, 1109px 85px #fff, 2224px 45px #fff,
      1257px 1958px #fff, 2135px 668px #fff, 1858px 1561px #fff,
      1767px 238px #fff, 1660px 1436px #fff, 2315px 1780px #fff,
      1474px 1121px #fff, 1536px 2393px #fff, 765px 2461px #fff,
      707px 1178px #fff, 1663px 2104px #fff, 750px 836px #fff, 1643px 526px #fff,
      463px 2028px #fff, 1449px 210px #fff, 684px 6px #fff, 534px 2036px #fff,
      1892px 2085px #fff, 2179px 901px #fff, 1963px 1908px #fff,
      44px 1249px #fff, 96px 1978px #fff, 2198px 1331px #fff, 1331px 1335px #fff,
      2057px 1870px #fff, 1255px 1583px #fff, 1702px 1204px #fff,
      744px 1221px #fff, 2496px 2347px #fff, 1861px 568px #fff,
      448px 1679px #fff, 1172px 1721px #fff, 2517px 140px #fff,
      2322px 1594px #fff, 1725px 1716px #fff, 1813px 1794px #fff,
      2026px 2018px #fff, 2415px 1830px #fff, 263px 2390px #fff,
      1795px 740px #fff, 2205px 2544px #fff, 1762px 1633px #fff,
      2415px 2289px #fff, 1723px 1764px #fff, 2114px 1571px #fff,
      1328px 1231px #fff, 268px 2360px #fff, 2513px 2387px #fff,
      2111px 132px #fff, 2192px 932px #fff, 1853px 619px #fff, 181px 1760px #fff,
      1903px 495px #fff, 2023px 2336px #fff, 538px 1041px #fff,
      967px 1588px #fff, 1973px 2189px #fff, 648px 1144px #fff, 305px 504px #fff,
      2215px 1895px #fff, 1325px 2010px #fff, 845px 740px #fff,
      2340px 750px #fff, 2335px 1393px #fff, 1473px 403px #fff,
      1644px 1696px #fff, 2560px 847px #fff, 525px 862px #fff,
      1747px 2148px #fff, 592px 2238px #fff, 52px 208px #fff, 1474px 1637px #fff,
      1860px 371px #fff, 2026px 167px #fff, 412px 981px #fff, 2197px 243px #fff,
      454px 1356px #fff, 1259px 1675px #fff, 1898px 1507px #fff,
      451px 386px #fff, 2267px 1655px #fff, 528px 832px #fff, 2416px 2483px #fff,
      1680px 340px #fff, 169px 86px #fff, 2307px 257px #fff, 2248px 467px #fff,
      1006px 1672px #fff, 859px 462px #fff, 1349px 2466px #fff,
      905px 2003px #fff, 306px 684px #fff, 988px 1694px #fff, 1302px 252px #fff,
      1307px 404px #fff, 1714px 2410px #fff, 2354px 518px #fff,
      158px 1352px #fff, 1925px 1669px #fff, 2382px 2108px #fff,
      823px 422px #fff, 1002px 2491px #fff, 2214px 1488px #fff, 335px 320px #fff,
      787px 2557px #fff, 3px 555px #fff, 2399px 2143px #fff, 1597px 356px #fff,
      331px 136px #fff, 942px 91px #fff, 1191px 1070px #fff, 487px 2430px #fff,
      2041px 913px #fff, 1466px 2429px #fff, 496px 2208px #fff,
      2285px 628px #fff, 482px 688px #fff, 230px 322px #fff, 1619px 1204px #fff,
      2283px 248px #fff, 2331px 914px #fff, 1815px 1363px #fff, 92px 1550px #fff,
      1412px 1998px #fff, 2290px 2331px #fff, 1112px 724px #fff,
      1236px 322px #fff, 1753px 1626px #fff, 1117px 1587px #fff,
      1098px 1079px #fff, 1500px 2443px #fff, 18px 101px #fff, 2219px 605px #fff,
      502px 2539px #fff, 1600px 544px #fff, 737px 737px #fff, 1468px 1262px #fff,
      621px 1866px #fff, 597px 567px #fff, 1025px 1215px #fff, 251px 1782px #fff,
      1207px 44px #fff, 1640px 1395px #fff, 61px 1650px #fff, 2467px 2028px #fff,
      1987px 600px #fff, 577px 156px #fff, 2123px 1365px #fff, 959px 69px #fff,
      412px 2400px #fff, 1470px 1518px #fff, 2450px 134px #fff,
      1032px 889px #fff, 720px 1972px #fff, 1134px 191px #fff,
      2077px 2220px #fff, 676px 1237px #fff, 864px 1511px #fff,
      1484px 990px #fff, 1802px 1444px #fff, 1869px 1738px #fff,
      1052px 332px #fff, 2511px 286px #fff, 1025px 426px #fff,
      1572px 1501px #fff, 563px 2272px #fff, 1297px 436px #fff,
      689px 1373px #fff, 216px 553px #fff, 1092px 755px #fff, 1054px 1883px #fff,
      325px 287px #fff, 1626px 512px #fff, 834px 1144px #fff, 289px 1215px #fff,
      2155px 532px #fff, 1705px 1723px #fff, 1384px 1768px #fff,
      1903px 207px #fff, 155px 1233px #fff, 2059px 374px #fff, 610px 119px #fff,
      1994px 2240px #fff, 2369px 935px #fff, 206px 535px #fff, 1430px 505px #fff,
      2429px 1237px #fff, 1730px 758px #fff, 2391px 489px #fff,
      1431px 869px #fff, 2053px 1181px #fff, 2284px 1737px #fff,
      504px 1994px #fff, 663px 2503px #fff, 1713px 605px #fff, 1743px 549px #fff,
      82px 174px #fff, 801px 449px #fff, 2229px 145px #fff, 2224px 804px #fff,
      914px 2139px #fff, 99px 1141px #fff, 1572px 862px #fff, 540px 1587px #fff,
      2375px 30px #fff, 2037px 2045px #fff, 80px 1802px #fff, 256px 2314px #fff,
      766px 2102px #fff, 1711px 563px #fff, 2402px 507px #fff, 361px 658px #fff,
      565px 670px #fff, 233px 570px #fff, 731px 82px #fff, 161px 2440px #fff,
      2324px 2234px #fff, 653px 1791px #fff, 1084px 2173px #fff,
      1734px 1345px #fff, 431px 752px #fff, 354px 92px #fff, 499px 1362px #fff,
      749px 695px #fff, 1258px 571px #fff, 889px 1845px #fff, 1057px 54px #fff,
      109px 216px #fff, 677px 189px #fff, 1629px 2042px #fff, 166px 895px #fff,
      2216px 1397px #fff, 1767px 479px #fff, 1973px 2292px #fff,
      1098px 2286px #fff, 2236px 2263px #fff, 2426px 780px #fff,
      809px 1969px #fff, 335px 2107px #fff, 1325px 941px #fff,
      1450px 1388px #fff, 1183px 1179px #fff, 296px 1376px #fff,
      1095px 189px #fff, 1586px 994px #fff, 2180px 802px #fff, 308px 1178px #fff,
      298px 343px #fff, 1385px 477px #fff, 2109px 1066px #fff, 918px 1949px #fff,
      1141px 1684px #fff, 1851px 1325px #fff, 1134px 467px #fff,
      1732px 1614px #fff, 1731px 1585px #fff, 321px 1459px #fff,
      839px 224px #fff, 2004px 969px #fff, 1327px 523px #fff, 1086px 509px #fff,
      1900px 724px #fff, 1838px 269px #fff, 2464px 599px #fff, 833px 762px #fff,
      1197px 2258px #fff, 1429px 1408px #fff, 1883px 1106px #fff,
      328px 2307px #fff, 1633px 1465px #fff, 567px 1124px #fff,
      931px 1970px #fff, 1772px 1191px #fff, 2161px 1303px #fff,
      2556px 1710px #fff, 2232px 1049px #fff, 1728px 1197px #fff,
      68px 2508px #fff, 140px 2071px #fff, 1249px 1017px #fff, 1711px 677px #fff,
      788px 1986px #fff, 1752px 1462px #fff, 1207px 2525px #fff,
      2138px 2043px #fff, 856px 1854px #fff, 2331px 2529px #fff,
      1178px 1779px #fff, 2454px 2012px #fff, 898px 1551px #fff,
      304px 1111px #fff, 1133px 78px #fff, 1405px 1535px #fff, 163px 196px #fff,
      1427px 1253px #fff, 1183px 1966px #fff, 2046px 530px #fff,
      1555px 1891px #fff, 659px 1428px #fff, 73px 1971px #fff, 2275px 106px #fff,
      1305px 2244px #fff, 2524px 1192px #fff, 2305px 1248px #fff,
      1960px 842px #fff, 2363px 2403px #fff, 871px 847px #fff, 487px 191px #fff,
      1313px 343px #fff, 121px 136px #fff, 1181px 2319px #fff, 298px 1122px #fff,
      1861px 102px #fff, 1947px 226px #fff, 213px 1521px #fff, 593px 768px #fff,
      1082px 909px #fff, 795px 1357px #fff, 2509px 2376px #fff, 622px 200px #fff,
      1028px 2239px #fff, 364px 7px #fff, 1794px 22px #fff, 1596px 1743px #fff,
      646px 2074px #fff, 2286px 1661px #fff, 2039px 803px #fff,
      595px 1937px #fff, 1401px 473px #fff, 1023px 1083px #fff,
      2209px 1247px #fff, 922px 2060px #fff, 496px 1613px #fff,
      2415px 648px #fff, 1298px 967px #fff, 1358px 1920px #fff,
      1890px 2260px #fff, 716px 558px #fff, 2494px 1184px #fff, 431px 295px #fff,
      987px 1538px #fff, 1470px 2299px #fff, 2038px 357px #fff,
      1110px 2204px #fff, 1656px 384px #fff, 968px 520px #fff, 699px 186px #fff,
      1608px 711px #fff, 2410px 332px #fff, 1319px 1256px #fff,
      2506px 1775px #fff, 2044px 1918px #fff, 49px 1738px #fff, 16px 567px #fff,
      1538px 1553px #fff, 210px 2488px #fff, 1955px 1587px #fff,
      1854px 1360px #fff, 27px 54px #fff, 1117px 1586px #fff, 309px 1301px #fff,
      1637px 2494px #fff, 384px 968px #fff, 1119px 393px #fff,
      2332px 1683px #fff, 624px 334px #fff, 2144px 2271px #fff,
      2113px 1105px #fff, 2360px 776px #fff, 716px 1792px #fff,
      2323px 1043px #fff, 656px 2198px #fff, 2257px 1770px #fff,
      636px 991px #fff, 2178px 1813px #fff, 2435px 2531px #fff, 67px 212px #fff,
      2082px 1411px #fff, 2331px 455px #fff, 963px 141px #fff,
      1847px 2294px #fff, 861px 1743px #fff, 851px 2055px #fff,
      1786px 1663px #fff, 88px 1723px #fff, 700px 368px #fff, 110px 874px #fff,
      1145px 420px #fff, 2522px 1536px #fff, 1306px 1236px #fff,
      2157px 1096px #fff, 832px 386px #fff, 2170px 713px #fff, 743px 2057px #fff,
      587px 2000px #fff, 1896px 1756px #fff, 1138px 389px #fff,
      1364px 1489px #fff, 500px 384px #fff, 1748px 25px #fff, 308px 1438px #fff,
      367px 361px #fff, 859px 1000px #fff, 1876px 916px #fff, 807px 1810px #fff,
      1206px 1035px #fff, 2274px 55px #fff, 1137px 2260px #fff,
      2234px 396px #fff, 1003px 1374px #fff, 2214px 1448px #fff,
      1171px 1313px #fff, 1617px 2193px #fff, 866px 1459px #fff,
      1195px 704px #fff, 1163px 1021px #fff, 773px 660px #fff, 973px 159px #fff,
      2082px 2556px #fff, 30px 509px #fff, 1896px 1931px #fff,
      1548px 2146px #fff, 2168px 2247px #fff, 640px 2362px #fff,
      1002px 482px #fff, 2544px 1388px #fff, 624px 848px #fff, 853px 1708px #fff,
      780px 1393px #fff, 530px 561px #fff, 317px 1772px #fff, 1020px 1097px #fff,
      1657px 2227px #fff, 429px 1622px #fff, 702px 1711px #fff,
      2415px 620px #fff, 85px 2061px #fff, 2441px 1603px #fff, 792px 1476px #fff,
      1713px 14px #fff, 1010px 2290px #fff, 81px 2539px #fff, 2216px 1978px #fff,
      1082px 927px #fff, 1652px 1297px #fff, 1991px 736px #fff,
      1250px 2319px #fff, 1572px 38px #fff, 121px 2467px #fff, 1955px 502px #fff,
      1816px 1409px #fff, 1389px 1453px #fff, 183px 26px #fff, 817px 404px #fff,
      33px 6px #fff, 487px 1676px #fff, 1390px 663px #fff, 697px 1260px #fff,
      1977px 203px #fff, 1529px 1630px #fff, 952px 1467px #fff,
      532px 2268px #fff, 913px 1745px #fff, 1152px 2032px #fff,
      1950px 2459px #fff, 1252px 2213px #fff, 1663px 2006px #fff,
      1325px 2209px #fff, 653px 1055px #fff, 1791px 433px #fff,
      2484px 2302px #fff, 2032px 153px #fff, 438px 723px #fff,
      1960px 1337px #fff, 1159px 1112px #fff, 1549px 622px #fff,
      1749px 728px #fff, 815px 221px #fff, 685px 2392px #fff, 657px 997px #fff,
      1122px 905px #fff, 1979px 644px #fff, 689px 874px #fff, 910px 1242px #fff,
      322px 1760px #fff, 142px 316px #fff, 1927px 1235px #fff,
      2469px 1141px #fff, 2199px 604px #fff, 1369px 1980px #fff,
      1826px 1191px #fff, 2039px 617px #fff, 1561px 1461px #fff,
      788px 1360px #fff, 2537px 1242px #fff, 1892px 2451px #fff,
      136px 1761px #fff, 2px 1251px #fff, 2460px 1964px #fff, 2094px 104px #fff,
      759px 171px #fff, 409px 598px #fff, 796px 1413px #fff, 567px 1943px #fff,
      266px 50px #fff, 998px 875px #fff, 1100px 2174px #fff, 2097px 552px #fff,
      86px 196px #fff, 502px 1202px #fff, 918px 1075px #fff, 273px 2513px #fff,
      2409px 18px #fff, 438px 523px #fff, 1775px 2343px #fff, 2428px 2029px #fff,
      251px 429px #fff, 1103px 637px #fff, 800px 1909px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-2 {
    -webkit-animation: animParticle 120s linear infinite;
    animation: animParticle 120s linear infinite;
    box-shadow: 0px 0px #fff, 2559px 1650px #fff, 1603px 2162px #fff,
      2329px 2066px #fff, 1045px 1875px #fff, 1437px 2222px #fff,
      2027px 2514px #fff, 1503px 1437px #fff, 830px 1376px #fff,
      167px 383px #fff, 1944px 576px #fff, 2367px 1566px #fff, 2374px 487px #fff,
      1925px 2114px #fff, 663px 1463px #fff, 1062px 1643px #fff,
      167px 420px #fff, 2221px 1181px #fff, 43px 1103px #fff, 666px 960px #fff,
      775px 2217px #fff, 1136px 997px #fff, 275px 1494px #fff,
      2265px 1502px #fff, 1454px 598px #fff, 2441px 1477px #fff,
      870px 2000px #fff, 1235px 2113px #fff, 380px 1880px #fff,
      1411px 345px #fff, 2358px 1750px #fff, 1818px 793px #fff, 722px 220px #fff,
      884px 1359px #fff, 1449px 123px #fff, 2474px 2485px #fff,
      2257px 1955px #fff, 836px 662px #fff, 270px 873px #fff, 921px 2392px #fff,
      771px 1604px #fff, 906px 2436px #fff, 970px 2031px #fff, 468px 922px #fff,
      2262px 706px #fff, 471px 467px #fff, 1532px 2332px #fff,
      1318px 1889px #fff, 775px 2303px #fff, 1759px 392px #fff,
      2175px 2474px #fff, 550px 1199px #fff, 191px 377px #fff, 788px 1805px #fff,
      2013px 13px #fff, 1865px 635px #fff, 1236px 766px #fff, 859px 861px #fff,
      338px 1062px #fff, 1036px 2183px #fff, 2428px 1949px #fff,
      420px 751px #fff, 362px 769px #fff, 746px 475px #fff, 721px 2023px #fff,
      391px 852px #fff, 582px 722px #fff, 1970px 2464px #fff, 2219px 1871px #fff,
      1285px 2379px #fff, 430px 2137px #fff, 155px 76px #fff, 1612px 773px #fff,
      1746px 1448px #fff, 1884px 988px #fff, 1706px 1929px #fff,
      1761px 2415px #fff, 2358px 664px #fff, 471px 1636px #fff, 27px 820px #fff,
      406px 1002px #fff, 113px 1493px #fff, 196px 65px #fff, 2547px 14px #fff,
      190px 1498px #fff, 2069px 122px #fff, 321px 75px #fff, 1014px 57px #fff,
      737px 2427px #fff, 1984px 2200px #fff, 1161px 1410px #fff,
      1308px 1792px #fff, 235px 2019px #fff, 1105px 536px #fff, 360px 317px #fff,
      2113px 2188px #fff, 2320px 43px #fff, 2333px 2388px #fff, 864px 383px #fff,
      1766px 1390px #fff, 1340px 786px #fff, 561px 1870px #fff,
      906px 2241px #fff, 591px 613px #fff, 1236px 1031px #fff, 2242px 675px #fff,
      984px 2079px #fff, 1987px 1890px #fff, 2525px 1725px #fff,
      2337px 97px #fff, 1244px 2552px #fff, 1119px 213px #fff,
      1011px 1794px #fff, 2230px 1809px #fff, 1910px 1769px #fff,
      463px 2075px #fff, 650px 578px #fff, 1200px 1363px #fff, 2035px 124px #fff,
      1206px 2325px #fff, 1534px 839px #fff, 690px 2393px #fff,
      182px 1012px #fff, 519px 1283px #fff, 1888px 2195px #fff, 514px 190px #fff,
      2357px 881px #fff, 2335px 1888px #fff, 1819px 1353px #fff,
      2540px 1995px #fff, 2527px 1285px #fff, 1608px 2559px #fff,
      1774px 600px #fff, 918px 2024px #fff, 2550px 916px #fff, 199px 1271px #fff,
      2435px 260px #fff, 121px 1745px #fff, 790px 1382px #fff, 64px 375px #fff,
      1625px 1809px #fff, 767px 696px #fff, 273px 1656px #fff,
      1402px 2066px #fff, 383px 2116px #fff, 838px 1397px #fff,
      1470px 1280px #fff, 679px 344px #fff, 1118px 2525px #fff,
      1828px 969px #fff, 487px 2334px #fff, 2176px 1731px #fff, 1698px 47px #fff,
      589px 205px #fff, 1117px 517px #fff, 662px 2123px #fff, 1164px 2237px #fff,
      133px 1576px #fff, 2208px 2375px #fff, 2271px 2198px #fff,
      1224px 2239px #fff, 2521px 1056px #fff, 486px 1540px #fff,
      2168px 1698px #fff, 2145px 2327px #fff, 2063px 1427px #fff,
      1033px 2329px #fff, 1727px 1834px #fff, 2452px 516px #fff,
      1522px 2488px #fff, 2551px 2312px #fff, 286px 2473px #fff,
      2129px 2406px #fff, 2002px 1551px #fff, 1662px 1562px #fff,
      1006px 742px #fff, 923px 885px #fff, 1749px 1672px #fff, 2181px 428px #fff,
      621px 387px #fff, 678px 2289px #fff, 1672px 2161px #fff,
      2056px 1334px #fff, 199px 570px #fff, 2369px 1094px #fff,
      2045px 1604px #fff, 1037px 485px #fff, 2064px 36px #fff,
      2199px 2444px #fff, 2153px 70px #fff, 563px 2233px #fff,
      1218px 1959px #fff, 1031px 717px #fff, 418px 637px #fff, 1261px 868px #fff,
      364px 544px #fff, 1068px 1203px #fff, 2311px 164px #fff, 2420px 930px #fff,
      47px 546px #fff, 2356px 417px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-2:after {
    box-shadow: 0px 0px #fff, 2351px 271px #fff, 443px 2031px #fff,
      2540px 1007px #fff, 2490px 2027px #fff, 1961px 638px #fff,
      1391px 1464px #fff, 1292px 719px #fff, 666px 1619px #fff,
      818px 1633px #fff, 2491px 1296px #fff, 1403px 268px #fff,
      1158px 878px #fff, 1260px 1481px #fff, 2292px 402px #fff, 408px 549px #fff,
      324px 1455px #fff, 1870px 1144px #fff, 322px 2526px #fff,
      1333px 1397px #fff, 1570px 94px #fff, 133px 58px #fff, 2040px 1450px #fff,
      1742px 861px #fff, 379px 1457px #fff, 2519px 1011px #fff,
      1685px 1485px #fff, 1178px 560px #fff, 2287px 2527px #fff,
      1344px 2058px #fff, 1337px 1477px #fff, 1792px 1996px #fff,
      2219px 1606px #fff, 158px 360px #fff, 804px 1555px #fff, 330px 770px #fff,
      1954px 771px #fff, 265px 1341px #fff, 1856px 2081px #fff,
      926px 1989px #fff, 820px 1724px #fff, 642px 1876px #fff,
      2261px 2074px #fff, 1298px 2248px #fff, 861px 1872px #fff,
      2323px 1712px #fff, 2530px 2018px #fff, 998px 1197px #fff,
      1319px 990px #fff, 2482px 1616px #fff, 1662px 1302px #fff,
      793px 1443px #fff, 496px 1989px #fff, 1543px 222px #fff, 2025px 779px #fff,
      2229px 1357px #fff, 1158px 411px #fff, 1680px 2015px #fff,
      536px 2019px #fff, 393px 2443px #fff, 999px 2247px #fff, 558px 2464px #fff,
      2280px 280px #fff, 354px 41px #fff, 1694px 676px #fff, 940px 1372px #fff,
      297px 882px #fff, 1200px 464px #fff, 1681px 309px #fff, 756px 834px #fff,
      856px 1489px #fff, 638px 2076px #fff, 134px 1960px #fff,
      1850px 1516px #fff, 1828px 2512px #fff, 2076px 1344px #fff,
      1987px 1985px #fff, 2259px 1066px #fff, 595px 737px #fff,
      129px 1150px #fff, 1325px 918px #fff, 1718px 634px #fff, 2267px 526px #fff,
      1095px 219px #fff, 661px 782px #fff, 1423px 1535px #fff,
      1799px 1790px #fff, 1344px 887px #fff, 874px 607px #fff,
      2006px 2503px #fff, 2495px 889px #fff, 684px 2172px #fff,
      787px 1040px #fff, 498px 633px #fff, 2277px 2010px #fff, 230px 1771px #fff,
      421px 1882px #fff, 19px 1238px #fff, 923px 2558px #fff, 1683px 1419px #fff,
      23px 2432px #fff, 2101px 2022px #fff, 2201px 538px #fff, 522px 1134px #fff,
      363px 2204px #fff, 2060px 1435px #fff, 577px 398px #fff, 656px 3px #fff,
      1957px 1854px #fff, 910px 943px #fff, 1108px 847px #fff,
      1741px 1762px #fff, 745px 1119px #fff, 2309px 2519px #fff,
      2363px 782px #fff, 320px 1434px #fff, 916px 2475px #fff, 138px 110px #fff,
      1149px 899px #fff, 239px 1218px #fff, 1314px 1611px #fff,
      1645px 826px #fff, 1277px 1923px #fff, 330px 288px #fff, 1699px 373px #fff,
      1680px 1952px #fff, 1640px 1818px #fff, 2504px 251px #fff,
      1733px 26px #fff, 1504px 2164px #fff, 2283px 362px #fff, 1670px 828px #fff,
      1615px 1146px #fff, 1326px 2152px #fff, 2548px 2124px #fff,
      1893px 857px #fff, 1899px 2510px #fff, 768px 2201px #fff,
      777px 1092px #fff, 265px 975px #fff, 1664px 1308px #fff,
      1215px 1054px #fff, 2382px 1708px #fff, 110px 1873px #fff,
      566px 2515px #fff, 1553px 1337px #fff, 576px 2204px #fff,
      2213px 1828px #fff, 749px 2294px #fff, 1565px 882px #fff,
      1071px 2040px #fff, 1729px 1596px #fff, 749px 801px #fff,
      1645px 2383px #fff, 1325px 606px #fff, 2303px 1329px #fff,
      90px 1196px #fff, 825px 1143px #fff, 292px 39px #fff, 327px 1117px #fff,
      351px 1420px #fff, 1709px 1271px #fff, 1443px 1995px #fff,
      347px 332px #fff, 1658px 901px #fff, 1436px 2101px #fff,
      1261px 1224px #fff, 274px 480px #fff, 492px 2005px #fff, 309px 1113px #fff,
      1870px 496px #fff, 1741px 1681px #fff, 1801px 1036px #fff,
      1550px 2449px #fff, 2236px 2266px #fff, 338px 1582px #fff,
      957px 469px #fff, 1814px 1831px #fff, 886px 971px #fff, 1999px 1857px #fff,
      2454px 578px #fff, 1466px 2435px #fff, 306px 436px #fff,
      1126px 2189px #fff, 1515px 1985px #fff, 43px 62px #fff, 1727px 690px #fff,
      1060px 2210px #fff, 780px 1157px #fff, 2400px 158px #fff,
      286px 2148px #fff, 1451px 2109px #fff, 116px 1819px #fff, 77px 822px #fff,
      885px 412px #fff, 2083px 2318px #fff, 421px 1234px #fff,
      2026px 1865px #fff, 103px 2087px #fff, 385px 1872px #fff, 347px 428px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-3 {
    -webkit-animation: animParticle 180s linear infinite;
    animation: animParticle 180s linear infinite;
    box-shadow: 0px 0px #fff, 2165px 372px #fff, 2255px 615px #fff,
      2127px 2423px #fff, 1382px 2438px #fff, 1414px 2383px #fff,
      1719px 1033px #fff, 1860px 2460px #fff, 1820px 660px #fff,
      2410px 1322px #fff, 1062px 2556px #fff, 603px 2394px #fff,
      588px 1144px #fff, 644px 2454px #fff, 2130px 1575px #fff,
      1054px 956px #fff, 1419px 108px #fff, 961px 542px #fff, 33px 2415px #fff,
      1367px 1979px #fff, 267px 775px #fff, 1366px 367px #fff, 1991px 808px #fff,
      7px 2354px #fff, 153px 1679px #fff, 2258px 46px #fff, 43px 2532px #fff,
      1964px 374px #fff, 360px 513px #fff, 606px 1684px #fff, 1424px 1947px #fff,
      2112px 1748px #fff, 2271px 819px #fff, 2507px 830px #fff,
      2559px 1164px #fff, 2128px 725px #fff, 131px 1346px #fff,
      2499px 841px #fff, 1531px 1604px #fff, 2030px 1534px #fff,
      513px 1068px #fff, 723px 2490px #fff, 1172px 761px #fff,
      1208px 1915px #fff, 900px 1681px #fff, 1819px 2395px #fff,
      892px 2443px #fff, 1064px 2090px #fff, 1643px 1566px #fff,
      1679px 879px #fff, 599px 812px #fff, 1167px 7px #fff, 1330px 2524px #fff,
      1254px 52px #fff, 2119px 1791px #fff, 1066px 1226px #fff,
      1228px 1245px #fff, 2045px 1658px #fff, 588px 1910px #fff,
      2359px 1774px #fff, 777px 2309px #fff, 1742px 1777px #fff,
      2442px 89px #fff, 1886px 636px #fff, 929px 443px #fff, 356px 2074px #fff,
      228px 2545px #fff, 2215px 464px #fff, 327px 834px #fff, 660px 722px #fff,
      1466px 1419px #fff, 89px 1484px #fff, 1785px 774px #fff,
      1161px 1462px #fff, 1012px 793px #fff, 634px 1597px #fff,
      882px 1623px #fff, 982px 1274px #fff, 1498px 2038px #fff,
      1371px 618px #fff, 2092px 877px #fff, 1719px 1776px #fff,
      1154px 2474px #fff, 2036px 2002px #fff, 1511px 160px #fff,
      1582px 2453px #fff, 753px 56px #fff, 2px 1988px #fff, 1606px 327px #fff,
      144px 655px #fff, 852px 2064px #fff, 1733px 674px #fff, 275px 89px #fff,
      2271px 1607px #fff, 2103px 703px #fff, 2184px 1545px #fff,
      1425px 518px #fff, 2006px 664px #fff, 1998px 1512px #fff,
      452px 1616px #fff, 687px 270px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-3:after {
    box-shadow: 0px 0px #fff, 2303px 1872px #fff, 884px 343px #fff,
      603px 2283px #fff, 667px 197px #fff, 1301px 1422px #fff,
      2470px 2464px #fff, 317px 2182px #fff, 1736px 30px #fff, 526px 765px #fff,
      543px 1241px #fff, 484px 82px #fff, 1519px 929px #fff, 16px 1654px #fff,
      451px 149px #fff, 737px 906px #fff, 1252px 1225px #fff, 1796px 2250px #fff,
      1771px 370px #fff, 1306px 274px #fff, 604px 2121px #fff,
      1974px 1451px #fff, 1992px 1021px #fff, 450px 1423px #fff,
      709px 2217px #fff, 1679px 913px #fff, 2151px 1812px #fff,
      1698px 2463px #fff, 742px 1941px #fff, 294px 356px #fff, 71px 169px #fff,
      198px 1141px #fff, 1162px 912px #fff, 639px 691px #fff, 1073px 2311px #fff,
      191px 213px #fff, 1142px 2504px #fff, 667px 164px #fff, 1773px 2411px #fff,
      2274px 1910px #fff, 2322px 1847px #fff, 1046px 238px #fff,
      2540px 2411px #fff, 1510px 347px #fff, 880px 787px #fff,
      1749px 1735px #fff, 1837px 1454px #fff, 2322px 1714px #fff,
      921px 2497px #fff, 1084px 2435px #fff, 457px 1760px #fff,
      1047px 641px #fff, 1564px 2047px #fff, 1900px 1057px #fff, 23px 236px #fff,
      2159px 2131px #fff, 1000px 994px #fff, 1086px 1399px #fff,
      2337px 1524px #fff, 635px 455px #fff, 1624px 705px #fff,
      1272px 1629px #fff, 343px 768px #fff, 2350px 538px #fff,
      1586px 1329px #fff, 1913px 1423px #fff, 2412px 2529px #fff,
      1601px 1665px #fff, 2505px 165px #fff, 2035px 368px #fff,
      1696px 641px #fff, 1685px 1013px #fff, 2097px 1376px #fff, 6px 1758px #fff,
      991px 1208px #fff, 632px 1814px #fff, 97px 912px #fff, 573px 346px #fff,
      999px 2443px #fff, 1935px 1659px #fff, 486px 2485px #fff,
      2531px 2067px #fff, 600px 234px #fff, 1757px 1446px #fff,
      1423px 1842px #fff, 1499px 1784px #fff, 2326px 839px #fff,
      2079px 1314px #fff, 2065px 1431px #fff, 393px 944px #fff,
      1396px 1355px #fff, 1561px 1455px #fff, 510px 2212px #fff,
      1446px 426px #fff, 297px 998px #fff, 700px 717px #fff, 1921px 1666px #fff,
      2405px 1830px #fff, 925px 1935px #fff, 2047px 687px #fff,
      1989px 2161px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-4 {
    -webkit-animation: animParticle 600s linear infinite;
    animation: animParticle 600s linear infinite;
    box-shadow: 0px 0px #fff, 1069px 193px #fff, 607px 1049px #fff,
      361px 662px #fff, 151px 398px #fff, 748px 1321px #fff, 179px 349px #fff,
      188px 498px #fff, 1917px 1404px #fff, 1426px 1024px #fff,
      2527px 990px #fff, 1256px 217px #fff, 1609px 1574px #fff, 411px 472px #fff,
      2067px 1006px #fff, 1895px 2017px #fff, 1169px 2277px #fff,
      1984px 2257px #fff, 816px 1891px #fff, 1375px 357px #fff,
      1567px 568px #fff, 490px 1579px #fff, 572px 761px #fff, 2107px 562px #fff,
      605px 1810px #fff, 2438px 1975px #fff, 1732px 1303px #fff,
      19px 1810px #fff, 2434px 1703px #fff, 2186px 68px #fff, 1768px 1544px #fff,
      2375px 1565px #fff, 876px 1384px #fff, 1841px 2223px #fff,
      23px 1322px #fff, 2178px 1999px #fff, 731px 899px #fff, 1174px 1954px #fff,
      2196px 844px #fff, 2153px 1505px #fff, 1262px 441px #fff,
      540px 1083px #fff, 665px 492px #fff, 1487px 2128px #fff, 597px 1358px #fff,
      1530px 481px #fff, 1744px 829px #fff, 733px 953px #fff, 1720px 1451px #fff,
      1555px 95px #fff, 278px 285px #fff, 1987px 636px #fff, 2268px 1700px #fff,
      1632px 1180px #fff, 2022px 1404px #fff, 166px 846px #fff,
      2218px 1673px #fff, 1698px 1376px #fff, 1500px 2461px #fff,
      1072px 1698px #fff, 626px 2031px #fff, 610px 1649px #fff,
      1728px 637px #fff, 2457px 741px #fff, 2501px 127px #fff, 473px 2557px #fff,
      893px 1995px #fff, 1396px 1124px #fff, 91px 1612px #fff, 2160px 80px #fff,
      1741px 1267px #fff, 2435px 2427px #fff, 2167px 375px #fff,
      1249px 2092px #fff, 646px 708px #fff, 35px 471px #fff, 583px 1383px #fff,
      113px 322px #fff, 1212px 1707px #fff, 219px 129px #fff, 2197px 1274px #fff,
      1183px 1515px #fff, 1269px 532px #fff, 2091px 572px #fff,
      448px 1813px #fff, 1906px 1796px #fff, 1318px 25px #fff,
      2186px 1360px #fff, 315px 869px #fff, 546px 1098px #fff, 62px 319px #fff,
      321px 761px #fff, 1044px 1926px #fff, 185px 1182px #fff,
      1565px 1078px #fff, 2393px 1476px #fff, 1549px 69px #fff,
      1818px 2489px #fff, 1308px 1657px #fff, 1953px 1103px #fff,
      1011px 1390px #fff, 1113px 2283px #fff, 282px 1350px #fff,
      1733px 1195px #fff, 1856px 643px #fff, 1201px 666px #fff,
      1573px 1487px #fff, 2262px 2258px #fff, 2021px 1937px #fff,
      1288px 2557px #fff, 1665px 369px #fff, 768px 1079px #fff, 751px 477px #fff,
      2176px 1059px #fff, 2558px 1637px #fff, 2231px 868px #fff,
      2012px 448px #fff, 685px 1356px #fff, 1024px 2239px #fff,
      492px 2432px #fff, 1636px 707px #fff, 2229px 955px #fff, 2466px 93px #fff,
      560px 841px #fff, 2313px 2524px #fff, 817px 1739px #fff,
      1141px 1879px #fff, 1294px 597px #fff, 2276px 1126px #fff,
      2387px 1523px #fff, 2102px 704px #fff, 385px 1713px #fff,
      1476px 2196px #fff, 2263px 195px #fff, 620px 1160px #fff, 1898px 70px #fff,
      285px 2052px #fff, 2278px 1309px #fff, 202px 1353px #fff,
      1442px 439px #fff, 2493px 363px #fff, 588px 1269px #fff,
      2039px 1293px #fff, 404px 491px #fff, 644px 419px #fff, 680px 1346px #fff,
      290px 1245px #fff, 2191px 1242px #fff, 1601px 1108px #fff,
      701px 2244px #fff, 1753px 2171px #fff, 1784px 39px #fff, 27px 1525px #fff,
      1665px 23px #fff, 1441px 1153px #fff, 2539px 1935px #fff,
      801px 2262px #fff, 716px 2140px #fff, 1705px 2101px #fff, 753px 435px #fff,
      2083px 2289px #fff, 483px 1824px #fff, 2106px 1671px #fff,
      1925px 694px #fff, 1594px 599px #fff, 826px 2516px #fff, 2530px 380px #fff,
      2234px 869px #fff, 1514px 855px #fff, 402px 2416px #fff, 751px 1301px #fff,
      135px 1961px #fff, 1292px 2319px #fff, 65px 1360px #fff,
      2545px 2373px #fff, 2044px 952px #fff, 948px 335px #fff, 484px 1681px #fff,
      1012px 357px #fff, 630px 1825px #fff, 803px 288px #fff, 1148px 221px #fff,
      46px 2304px #fff, 512px 553px #fff, 1058px 659px #fff, 1386px 1352px #fff,
      709px 2262px #fff, 779px 1648px #fff, 1516px 2320px #fff,
      1454px 860px #fff, 295px 354px #fff, 703px 2533px #fff, 1602px 1042px #fff,
      96px 1909px #fff, 928px 1485px #fff, 2209px 318px #fff, 2359px 657px #fff,
      851px 8px #fff, 1565px 1089px #fff, 1792px 1918px #fff, 546px 868px #fff,
      406px 898px #fff, 2482px 41px #fff, 1696px 764px #fff, 952px 779px #fff,
      1588px 1344px #fff, 1919px 1421px #fff, 1582px 539px #fff,
      2504px 1146px #fff, 827px 523px #fff, 2241px 576px #fff, 924px 1299px #fff,
      1472px 167px #fff, 678px 2514px #fff, 1726px 800px #fff,
      2300px 2335px #fff, 64px 1673px #fff, 837px 2475px #fff, 2228px 204px #fff,
      1346px 1838px #fff, 1266px 1100px #fff, 560px 227px #fff,
      398px 1548px #fff, 892px 1944px #fff, 1048px 559px #fff, 889px 2154px #fff,
      2474px 1942px #fff, 18px 1078px #fff, 2025px 977px #fff, 70px 570px #fff,
      1674px 419px #fff, 1709px 691px #fff, 2376px 1649px #fff, 60px 1077px #fff,
      1738px 528px #fff, 1416px 83px #fff, 819px 609px #fff, 2224px 1826px #fff,
      1865px 1015px #fff, 2063px 1430px #fff, 795px 731px #fff,
      1335px 394px #fff, 769px 1569px #fff, 815px 452px #fff, 2075px 210px #fff,
      1569px 327px #fff, 2187px 933px #fff, 796px 2417px #fff, 817px 2381px #fff,
      1555px 2513px #fff, 879px 682px #fff, 1525px 1104px #fff,
      1560px 1693px #fff, 1314px 1573px #fff, 1870px 408px #fff,
      509px 2332px #fff, 27px 387px #fff, 1023px 1766px #fff, 1732px 830px #fff,
      1838px 173px #fff, 782px 2111px #fff, 2199px 200px #fff, 1492px 258px #fff,
      2031px 223px #fff, 481px 1968px #fff, 1443px 2192px #fff,
      2242px 2329px #fff, 398px 832px #fff, 773px 1577px #fff, 1299px 412px #fff,
      2267px 402px #fff, 511px 213px #fff, 1996px 536px #fff, 2533px 2192px #fff,
      1735px 962px #fff, 1294px 684px #fff, 863px 1750px #fff, 938px 1956px #fff,
      1375px 638px #fff, 351px 384px #fff, 2485px 533px #fff, 2269px 596px #fff,
      1594px 2282px #fff, 1614px 251px #fff, 493px 986px #fff, 2365px 349px #fff,
      1998px 2354px #fff, 2220px 1143px #fff, 349px 1456px #fff,
      1458px 710px #fff, 911px 1276px #fff, 401px 2080px #fff, 111px 1412px #fff,
      2271px 832px #fff, 2190px 1992px #fff, 2439px 1371px #fff,
      2478px 1322px #fff, 628px 90px #fff, 1px 2339px #fff, 158px 1164px #fff,
      2187px 2421px #fff, 2516px 360px #fff, 2273px 2515px #fff,
      1854px 971px #fff, 1472px 280px #fff, 318px 2268px #fff, 840px 1078px #fff,
      241px 255px #fff, 52px 1542px #fff, 1641px 861px #fff, 1911px 2267px #fff,
      1667px 1376px #fff, 1400px 339px #fff, 2511px 977px #fff,
      2380px 1920px #fff, 636px 816px #fff, 1465px 2204px #fff,
      788px 2187px #fff, 1106px 813px #fff, 1849px 303px #fff, 2220px 651px #fff,
      1540px 2557px #fff, 230px 652px #fff, 2058px 1415px #fff, 52px 1388px #fff,
      2150px 2423px #fff, 2221px 1324px #fff, 610px 738px #fff,
      2075px 1624px #fff, 2410px 1803px #fff, 240px 735px #fff,
      2477px 654px #fff, 954px 360px #fff, 95px 1031px #fff, 1203px 1945px #fff,
      83px 424px #fff, 236px 816px #fff, 936px 497px #fff, 541px 2081px #fff,
      1832px 554px #fff, 1123px 82px #fff, 1102px 1153px #fff,
      2180px 2320px #fff, 246px 1618px #fff, 792px 2486px #fff,
      352px 1654px #fff, 377px 1406px #fff, 1611px 2234px #fff,
      1700px 558px #fff, 2234px 1977px #fff, 1122px 1155px #fff,
      1969px 2172px #fff, 1027px 285px #fff, 489px 2553px #fff,
      337px 1580px #fff, 1182px 900px #fff, 2199px 880px #fff, 1033px 652px #fff,
      331px 1854px #fff, 2306px 2065px #fff, 2338px 932px #fff,
      1446px 2456px #fff, 1668px 1019px #fff, 838px 896px #fff,
      1996px 711px #fff, 2306px 1345px #fff, 166px 2032px #fff, 752px 231px #fff,
      2172px 2006px #fff, 802px 959px #fff, 183px 738px #fff, 1993px 2233px #fff,
      1576px 183px #fff, 1898px 769px #fff, 2329px 535px #fff, 704px 2187px #fff,
      1564px 1333px #fff, 1653px 2403px #fff, 2408px 2385px #fff,
      2398px 770px #fff, 640px 1094px #fff, 783px 1568px #fff, 177px 1280px #fff,
      313px 2148px #fff, 556px 636px #fff, 1526px 432px #fff, 848px 530px #fff,
      2227px 2077px #fff, 1040px 751px #fff, 346px 1693px #fff, 2512px 52px #fff,
      2506px 423px #fff, 1917px 1705px #fff, 1839px 2354px #fff,
      2307px 447px #fff, 413px 168px #fff, 2100px 1525px #fff,
      1747px 1739px #fff, 1083px 1904px #fff, 1265px 2122px #fff,
      177px 2550px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-4:after {
    box-shadow: 0px 0px #fff, 1497px 767px #fff, 1066px 815px #fff,
      1206px 2108px #fff, 801px 407px #fff, 2206px 1493px #fff,
      1693px 1601px #fff, 1445px 1292px #fff, 2496px 180px #fff,
      1789px 445px #fff, 2309px 1132px #fff, 2119px 1434px #fff,
      565px 1767px #fff, 1631px 707px #fff, 7px 529px #fff, 725px 251px #fff,
      705px 1799px #fff, 2472px 1096px #fff, 2028px 896px #fff,
      1190px 1262px #fff, 1250px 237px #fff, 1167px 2531px #fff,
      1775px 660px #fff, 69px 1810px #fff, 140px 1757px #fff, 719px 265px #fff,
      2210px 2128px #fff, 1529px 1793px #fff, 2056px 301px #fff,
      603px 2046px #fff, 1400px 614px #fff, 1024px 2262px #fff,
      2540px 1360px #fff, 1205px 987px #fff, 18px 2046px #fff,
      2031px 1975px #fff, 521px 1781px #fff, 410px 1033px #fff,
      874px 2400px #fff, 1023px 437px #fff, 1868px 2200px #fff, 772px 342px #fff,
      1657px 2270px #fff, 1048px 616px #fff, 1944px 2152px #fff,
      975px 476px #fff, 1169px 2456px #fff, 1249px 1219px #fff,
      1971px 1655px #fff, 1448px 1411px #fff, 2537px 1609px #fff,
      9px 1765px #fff, 827px 1429px #fff, 2084px 2347px #fff, 1517px 662px #fff,
      1622px 2368px #fff, 327px 422px #fff, 1235px 111px #fff,
      2005px 1645px #fff, 2256px 438px #fff, 1317px 93px #fff, 573px 398px #fff,
      1925px 331px #fff, 83px 1636px #fff, 2161px 379px #fff, 662px 337px #fff,
      339px 2541px #fff, 1414px 1432px #fff, 742px 280px #fff, 300px 256px #fff,
      2396px 442px #fff, 2230px 974px #fff, 2392px 1159px #fff, 801px 18px #fff,
      1366px 1637px #fff, 472px 82px #fff, 718px 666px #fff, 73px 1627px #fff,
      2187px 1639px #fff, 1886px 1369px #fff, 2096px 1223px #fff,
      1248px 1953px #fff, 109px 2175px #fff, 1928px 1020px #fff,
      36px 1772px #fff, 1038px 1938px #fff, 2552px 893px #fff, 544px 2340px #fff,
      591px 1367px #fff, 454px 947px #fff, 1482px 1647px #fff, 344px 2127px #fff,
      1389px 2119px #fff, 629px 1873px #fff, 1433px 2418px #fff,
      212px 1773px #fff, 279px 1936px #fff, 1854px 1304px #fff, 73px 615px #fff,
      761px 125px #fff, 902px 599px #fff, 2140px 944px #fff, 413px 2449px #fff,
      1794px 1180px #fff, 1229px 1866px #fff, 2450px 308px #fff,
      1794px 625px #fff, 1026px 179px #fff, 144px 2293px #fff, 639px 1998px #fff,
      1250px 858px #fff, 1865px 881px #fff, 785px 2200px #fff, 1860px 411px #fff,
      1362px 74px #fff, 595px 2290px #fff, 1586px 1117px #fff, 576px 1923px #fff,
      1975px 94px #fff, 258px 458px #fff, 2122px 1565px #fff, 2147px 70px #fff,
      1664px 206px #fff, 2522px 1115px #fff, 1095px 853px #fff,
      533px 1931px #fff, 559px 2180px #fff, 947px 1821px #fff, 362px 1233px #fff,
      1245px 21px #fff, 867px 1433px #fff, 827px 1671px #fff, 2130px 982px #fff,
      1448px 1990px #fff, 1147px 129px #fff, 1583px 123px #fff,
      1478px 557px #fff, 552px 1324px #fff, 2407px 1194px #fff,
      153px 2417px #fff, 2320px 1619px #fff, 1765px 2471px #fff,
      1179px 412px #fff, 188px 547px #fff, 552px 1321px #fff, 1808px 2143px #fff,
      2255px 1717px #fff, 2327px 2406px #fff, 571px 2449px #fff,
      2142px 779px #fff, 1558px 1365px #fff, 984px 10px #fff, 1209px 1267px #fff,
      1883px 750px #fff, 1536px 426px #fff, 974px 93px #fff, 952px 439px #fff,
      2190px 1513px #fff, 1808px 2311px #fff, 1351px 1967px #fff,
      275px 875px #fff, 1616px 749px #fff, 578px 1603px #fff, 694px 663px #fff,
      1386px 824px #fff, 1662px 606px #fff, 1851px 833px #fff,
      2459px 2209px #fff, 625px 1958px #fff, 2072px 2467px #fff,
      1179px 274px #fff, 647px 5px #fff, 2343px 2255px #fff, 2308px 1600px #fff,
      1156px 2351px #fff, 2160px 364px #fff, 1935px 1167px #fff,
      955px 242px #fff, 856px 2473px #fff, 1887px 942px #fff, 1140px 2163px #fff,
      391px 1191px #fff, 2260px 336px #fff, 785px 1009px #fff, 165px 1899px #fff,
      1129px 2290px #fff, 1333px 384px #fff, 610px 596px #fff,
      1745px 1109px #fff, 1655px 2163px #fff, 989px 1906px #fff,
      1911px 295px #fff, 563px 1360px #fff, 922px 519px #fff, 2393px 1306px #fff,
      1964px 407px #fff, 114px 1254px #fff, 604px 1760px #fff,
      1973px 1835px #fff, 1451px 296px #fff, 949px 1835px #fff,
      273px 1542px #fff, 2319px 980px #fff, 1445px 2474px #fff,
      1147px 223px #fff, 658px 768px #fff, 2051px 66px #fff, 157px 1207px #fff,
      1606px 134px #fff, 1734px 1946px #fff, 2201px 884px #fff,
      2423px 1234px #fff, 1467px 1918px #fff, 2366px 2387px #fff,
      2468px 2058px #fff, 1558px 605px #fff, 340px 1058px #fff,
      2370px 245px #fff, 1742px 341px #fff, 921px 1837px #fff,
      1051px 1153px #fff, 207px 1961px #fff, 1028px 2468px #fff,
      2013px 1413px #fff, 1756px 988px #fff, 1624px 1885px #fff,
      1596px 924px #fff, 699px 2455px #fff, 718px 766px #fff, 1341px 2537px #fff,
      2522px 1167px #fff, 1227px 1503px #fff, 1682px 1927px #fff,
      2410px 1049px #fff, 2435px 1912px #fff, 894px 2436px #fff,
      2451px 1497px #fff, 2246px 1437px #fff, 2224px 1190px #fff,
      1259px 417px #fff, 2283px 187px #fff, 2006px 2001px #fff,
      1283px 144px #fff, 1611px 2448px #fff, 1462px 1767px #fff,
      993px 1837px #fff, 672px 1534px #fff, 1678px 1113px #fff,
      1299px 1398px #fff, 731px 277px #fff, 2152px 2102px #fff,
      1540px 539px #fff, 2394px 985px #fff, 1636px 866px #fff, 1164px 691px #fff,
      1793px 1705px #fff, 2335px 2500px #fff, 757px 610px #fff,
      1999px 1561px #fff, 2073px 1094px #fff, 1270px 396px #fff,
      82px 1863px #fff, 1127px 250px #fff, 767px 2297px #fff, 335px 2206px #fff,
      544px 1595px #fff, 131px 2162px #fff, 2116px 1818px #fff,
      1687px 2293px #fff, 2190px 565px #fff, 2490px 2501px #fff,
      767px 222px #fff, 2264px 1484px #fff, 971px 498px #fff, 170px 1934px #fff,
      1455px 1590px #fff, 1483px 30px #fff, 1275px 37px #fff, 992px 238px #fff,
      2136px 597px #fff, 143px 371px #fff, 769px 2462px #fff, 1737px 1752px #fff,
      2248px 196px #fff, 1103px 482px #fff, 1132px 891px #fff,
      2333px 1648px #fff, 2472px 1496px #fff, 1046px 2458px #fff,
      231px 862px #fff, 334px 24px #fff, 348px 1189px #fff, 1333px 2225px #fff,
      2524px 356px #fff, 17px 1735px #fff, 1294px 2373px #fff, 281px 2346px #fff,
      199px 1436px #fff, 548px 32px #fff, 696px 1975px #fff, 1748px 827px #fff,
      1814px 1292px #fff, 175px 1643px #fff, 556px 2345px #fff, 58px 2422px #fff,
      885px 1220px #fff, 2203px 876px #fff, 2534px 1426px #fff,
      528px 1005px #fff, 2419px 463px #fff, 915px 1556px #fff, 966px 1324px #fff,
      1895px 1206px #fff, 2374px 374px #fff, 2071px 624px #fff,
      1729px 1298px #fff, 2293px 2083px #fff, 2341px 1087px #fff,
      138px 1735px #fff, 799px 1950px #fff, 696px 2477px #fff, 178px 1141px #fff,
      2295px 2045px #fff, 1486px 754px #fff, 411px 1239px #fff,
      991px 1800px #fff, 1274px 381px #fff, 30px 225px #fff, 268px 271px #fff,
      1659px 396px #fff, 2486px 2177px #fff, 1253px 2286px #fff,
      2204px 567px #fff, 329px 16px #fff, 1473px 2002px #fff, 1670px 1581px #fff,
      350px 1851px #fff, 1388px 983px #fff, 1136px 1115px #fff,
      1019px 419px #fff, 1101px 1626px #fff, 613px 894px #fff,
      1428px 2113px #fff, 2290px 1054px #fff, 42px 2256px #fff,
      2318px 1736px #fff, 1657px 1079px #fff, 1058px 1676px #fff,
      723px 2396px #fff, 584px 634px #fff, 1353px 832px #fff, 8px 1270px #fff,
      773px 437px #fff, 706px 2264px #fff, 1421px 1754px #fff, 169px 2446px #fff,
      304px 595px #fff, 341px 1301px #fff, 187px 2384px #fff, 374px 1202px #fff,
      1829px 1294px #fff, 1248px 513px #fff, 1701px 1778px #fff,
      1728px 1249px #fff, 1784px 83px #fff, 531px 2530px #fff, 71px 821px #fff,
      1997px 1664px #fff, 1950px 292px #fff, 2102px 785px #fff,
      1310px 1446px #fff, 343px 1164px #fff, 687px 2338px #fff,
      1461px 2217px #fff, 32px 2545px #fff, 2044px 2481px #fff, 512px 69px #fff,
      484px 771px #fff, 2106px 2443px #fff, 1909px 814px #fff,
      1986px 1494px #fff, 278px 2184px #fff, 2305px 2182px #fff,
      2270px 1013px #fff, 965px 1178px #fff, 2355px 2127px #fff,
      1523px 736px #fff, 794px 144px #fff, 309px 1650px #fff, 1243px 249px #fff,
      140px 2257px #fff, 1071px 529px #fff, 691px 1578px #fff, 1546px 261px #fff,
      1797px 2550px #fff, 9px 121px #fff, 1097px 240px #fff, 1657px 604px #fff,
      533px 2211px #fff, 310px 1156px #fff, 1305px 722px #fff;
    height: 1px;
    width: 1px;
  }

  @-webkit-keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }

  @keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }
</style>

]]></content></entry><entry><title type="html">云原生流水线 Argo Workflows 的安装、使用以及个人体验</title><link href="https://thiscute.world/posts/expirence-of-argo-workflow/"/><id>https://thiscute.world/posts/expirence-of-argo-workflow/</id><author><name>ryan4yin</name></author><published>2021-01-27T15:37:27+08:00</published><updated>2021-01-27T15:37:27+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>注意：这篇文章并不是一篇入门教程，学习 Argo Workflows 请移步官方文档 <a href="https://argoproj.github.io/argo-workflows/" target="_blank" rel="noopener noreffer">Argo Documentation</a></p>
</blockquote>
<p><a href="https://github.com/argoproj/argo-workflows/" target="_blank" rel="noopener noreffer">Argo Workflows</a> 是一个云原生工作流引擎，专注于<strong>编排并行任务</strong>。它的特点如下：</p>
<ol>
<li>使用 Kubernetes 自定义资源(CR)定义工作流，其中工作流中的每个步骤都是一个容器。</li>
<li>将多步骤工作流建模为一系列任务，或者使用有向无环图（DAG）描述任务之间的依赖关系。</li>
<li>可以在短时间内轻松运行用于机器学习或数据处理的计算密集型作业。</li>
<li>Argo Workflows 可以看作 Tekton 的加强版，因此显然也可以通过 Argo Workflows 运行 CI/CD 流水线(Pipielines)。</li>
</ol>
<p>阿里云是 Argo Workflows 的深度使用者和贡献者，另外 Kubeflow 底层的工作流引擎也是 Argo Workflows.</p>
<h2 id="一argo-workflows-对比-jenkins" class="headerLink">
    <a href="#%e4%b8%80argo-workflows-%e5%af%b9%e6%af%94-jenkins" class="header-mark"></a>一、Argo Workflows 对比 Jenkins</h2><p>我们在切换到 Argo Workflows 之前，使用的 CI/CD 工具是 Jenkins，下面对 Argo Workflows 和 Jenkins 做一个比较详细的对比，
以了解 Argo Workflows 的优缺点。</p>
<h3 id="1-workflow-的定义" class="headerLink">
    <a href="#1-workflow-%e7%9a%84%e5%ae%9a%e4%b9%89" class="header-mark"></a>1. Workflow 的定义</h3><p><code>Workflow</code> 使用 kubernetes CR 进行定义，因此显然是一份 yaml 配置。</p>
<p>一个 Workflow，就是一个运行在 Kubernetes 上的流水线，对应 Jenkins 的一次 Build.</p>
<p>而 WorkflowTemplate 则是一个可重用的 Workflow 模板，对应 Jenkins 的一个 Job.</p>
<p><code>WorkflowTemplate</code> 的 yaml 定义和 <code>Workflow</code> 完全一致，只有 <code>Kind</code> 不同！</p>
<p>WorkflowTemplate 可以被其他 Workflow 引用并触发，也可以手动传参以生成一个 Workflow 工作流。</p>
<h3 id="2-workflow-的编排" class="headerLink">
    <a href="#2-workflow-%e7%9a%84%e7%bc%96%e6%8e%92" class="header-mark"></a>2. Workflow 的编排</h3><p>Argo Workflows 相比其他流水线项目(Jenkins/Tekton/Drone/Gitlab-CI)而言，最大的特点，就是它强大的流水线编排能力。</p>
<p>其他流水线项目，对流水线之间的关联性考虑得很少，基本都假设流水线都是互相独立的。</p>
<p>而 Argo Workflows 则假设「任务」之间是有依赖关系的，针对这个依赖关系，它提供了两种协调编排「任务」的方法：Steps 和 DAG</p>
<p>再借助 <a href="https://argoproj.github.io/argo-workflows/workflow-templates/#referencing-other-workflowtemplates" target="_blank" rel="noopener noreffer">templateRef</a> 或者 <a href="https://argoproj.github.io/argo-workflows/workflow-of-workflows/" target="_blank" rel="noopener noreffer">Workflow of Workflows</a>，就能实现 Workflows 的编排了。</p>
<p><strong>我们之所以选择 Argo Workflows 而不是 Tekton，主要就是因为 Argo 的流水线编排能力比 Tekton 强大得多。</strong>（也许是因为我们的后端中台结构比较特殊，导致我们的 CI 流水线需要具备复杂的编排能力）</p>
<p>一个复杂工作流的示例如下：</p>
<p><figure><a class="lightgallery" href="/images/expirence-of-argo-workflow/complex-workflows.webp" title="/images/expirence-of-argo-workflow/complex-workflows.webp" data-thumbnail="/images/expirence-of-argo-workflow/complex-workflows.webp" data-sub-html="<h2>https://github.com/argoproj/argo/issues/1088#issuecomment-445884543</h2>">
        <img
            class="lazyload"
            data-src="/images/expirence-of-argo-workflow/complex-workflows.webp"
            data-srcset="/images/expirence-of-argo-workflow/complex-workflows.webp, /images/expirence-of-argo-workflow/complex-workflows.webp 1.5x, /images/expirence-of-argo-workflow/complex-workflows.webp 2x"
            data-sizes="auto"
            alt="/images/expirence-of-argo-workflow/complex-workflows.webp">
    </a><figcaption class="image-caption">https://github.com/argoproj/argo/issues/1088#issuecomment-445884543</figcaption>
    </figure></p>
<h3 id="3-workflow-的声明式配置" class="headerLink">
    <a href="#3-workflow-%e7%9a%84%e5%a3%b0%e6%98%8e%e5%bc%8f%e9%85%8d%e7%bd%ae" class="header-mark"></a>3. Workflow 的声明式配置</h3><p>Argo 使用 Kubernetes 自定义资源(CR)来定义 Workflow，熟悉 Kubernetes Yaml 的同学上手应该都很快。</p>
<p>下面对 Workflow 定义文件和 Jenkinsfile 做个对比：</p>
<ol>
<li>argo 完全使用 yaml 来定义流水线，学习成本比 Jenkinsfile 的 groovy 低。对熟悉 Kubernetes 的同学尤其如此。</li>
<li>将 jenkinsfile 用 argo 重写后，代码量出现了明显的膨胀。一个 20 行的 Jenkinsfile，用 Argo 重写可能就变成了 60 行。</li>
</ol>
<p>配置出现了膨胀是个问题，但是考虑到它的可读性还算不错，
而且 Argo 的 Workflow 编排功能，能替代掉我们目前维护的部分 Python 构建代码，以及一些其他优点，配置膨胀这个问题也就可以接受了。</p>
<h3 id="4-web-ui" class="headerLink">
    <a href="#4-web-ui" class="header-mark"></a>4. Web UI</h3><p>Argo Workflows 的 Web UI 感觉还很原始。确实该支持的功能都有，但是它貌似不是面向「用户」的，功能比较底层。</p>
<p>它不像 Jenkins 一样，有很友好的使用界面(虽然说 Jenkins 的 UI 也很显老&hellip;)</p>
<p>另外它所有的 Workflow 都是相互独立的，没办法直观地找到一个 WorkflowTemplate 的所有构建记录，只能通过 label/namespace 进行分类，通过任务名称进行搜索。</p>
<p>而 Jenkins 可以很方便地看到同一个 Job 的所有构建历史。</p>
<h3 id="5-workflow-的分类" class="headerLink">
    <a href="#5-workflow-%e7%9a%84%e5%88%86%e7%b1%bb" class="header-mark"></a>5. Workflow 的分类</h3><h4 id="为何需要对-workflow-做细致的分类" class="headerLink">
    <a href="#%e4%b8%ba%e4%bd%95%e9%9c%80%e8%a6%81%e5%af%b9-workflow-%e5%81%9a%e7%bb%86%e8%87%b4%e7%9a%84%e5%88%86%e7%b1%bb" class="header-mark"></a>为何需要对 Workflow 做细致的分类</h4><p>常见的微服务项目，往往会拆分成众多 Git 仓库（微服务）进行开发，众多的 Git 仓库会使我们创建众多的 CI/CD 流水线。
如果没有任何的分类，这一大堆的流水线如何管理，就成了一个难题。</p>
<p>最显见的需求：前端和后端的流水线最好能区分一下，往下细分，前端的 Web 端和客户端最好也能区分，后端的业务层和中台最好也区分开来。</p>
<p>另外我们还希望将运维、自动化测试相关的任务也集成到这个系统中来（目前我们就是使用 Jenkins 完成运维、自动化测试任务的），
如果没有任何分类，这一大堆流水线将混乱无比。</p>
<h4 id="argo-workflows-的分类能力" class="headerLink">
    <a href="#argo-workflows-%e7%9a%84%e5%88%86%e7%b1%bb%e8%83%bd%e5%8a%9b" class="header-mark"></a>Argo Workflows 的分类能力</h4><p>当 Workflow 越来越多的时候，如果不做分类，一堆 WorkflowTemplate 堆在一起就会显得特别混乱。（没错，我觉得 Drone 就有这个问题&hellip;）</p>
<p>Argo 是完全基于 Kubernetes 的，因此目前它也只能通过 namespace/labels 进行分类。</p>
<p>这样的分类结构和 Jenkins 的视图-文件夹体系大相径庭，目前感觉不是很好用（也可能纯粹是 Web UI 的锅）。</p>
<h3 id="6-触发构建的方式" class="headerLink">
    <a href="#6-%e8%a7%a6%e5%8f%91%e6%9e%84%e5%bb%ba%e7%9a%84%e6%96%b9%e5%bc%8f" class="header-mark"></a>6. 触发构建的方式</h3><p>Argo Workflows 的流水线有多种触发方式：</p>
<ul>
<li>手动触发：手动提交一个 Workflow，就能触发一次构建。可以通过 <a href="https://argoproj.github.io/argo-workflows/workflow-templates/#create-workflow-from-workflowtemplate-spec" target="_blank" rel="noopener noreffer">workflowTemplateRef</a> 直接引用一个现成的流水线模板。</li>
<li>定时触发：<a href="https://argoproj.github.io/argo-workflows/cron-workflows/" target="_blank" rel="noopener noreffer">CronWorkflow</a></li>
<li>通过 Git 仓库变更触发：借助 <a href="https://github.com/argoproj/argo-events" target="_blank" rel="noopener noreffer">argo-events</a> 可以实现此功能，详见其文档。
<ul>
<li>另外目前也不清楚 WebHook 的可靠程度如何，会不会因为宕机、断网等故障，导致 Git 仓库变更了，而 Workflow 却没触发，而且还没有任何显眼的错误通知？如果这个错误就这样藏起来了，就可能会导致很严重的问题！</li>
</ul>
</li>
</ul>
<h3 id="7-secrets-管理" class="headerLink">
    <a href="#7-secrets-%e7%ae%a1%e7%90%86" class="header-mark"></a>7. secrets 管理</h3><p>Argo Workflows 的流水线，可以从 kubernetes secrets/configmap 中获取信息，将信息注入到环境变量中、或者以文件形式挂载到 Pod 中。</p>
<p>Git 私钥、Harbor 仓库凭据、CD 需要的 kubeconfig，都可以直接从 secrets/configmap 中获取到。</p>
<p>另外因为 Vault 很流行，也可以将 secrets 保存在 Vault 中，再通过 vault agent 将配置注入进 Pod。</p>
<h3 id="8-artifacts" class="headerLink">
    <a href="#8-artifacts" class="header-mark"></a>8. Artifacts</h3><p>Argo 支持接入对象存储，做全局的 Artifact 仓库，本地可以使用 MinIO.</p>
<p>使用对象存储存储 Artifact，最大的好处就是可以在 Pod 之间随意传数据，Pod 可以完全分布式地运行在 Kubernetes 集群的任何节点上。</p>
<p>另外也可以考虑借助 Artifact 仓库实现跨流水线的缓存复用（未测试），提升构建速度。</p>
<h3 id="9-容器镜像的构建" class="headerLink">
    <a href="#9-%e5%ae%b9%e5%99%a8%e9%95%9c%e5%83%8f%e7%9a%84%e6%9e%84%e5%bb%ba" class="header-mark"></a>9. 容器镜像的构建</h3><p>借助 Buildkit 等容器镜像构建工具，可以实现容器镜像的分布式构建。</p>
<p>Buildkit 对构建缓存的支持也很好，可以直接将缓存存储在容器镜像仓库中。</p>
<blockquote>
<p>不建议使用 Google 的 Kaniko，它对缓存复用的支持不咋地，社区也不活跃。</p>
</blockquote>
<h3 id="10-客户端sdk" class="headerLink">
    <a href="#10-%e5%ae%a2%e6%88%b7%e7%ab%afsdk" class="header-mark"></a>10. 客户端/SDK</h3><p>Argo 有提供一个命令行客户端，也有 HTTP API 可供使用。</p>
<p>如下项目值得试用：</p>
<ul>
<li><a href="https://github.com/argoproj-labs/argo-client-python" target="_blank" rel="noopener noreffer">argo-client-python</a>: Argo Workflows 的 Python 客户端
<ul>
<li>说实话，感觉和 kubernetes-client/python 一样难用，毕竟都是 openapi-generator 生成出来的&hellip;</li>
</ul>
</li>
<li><a href="https://github.com/argoproj-labs/argo-python-dsl" target="_blank" rel="noopener noreffer">argo-python-dsl</a>: 使用 Python DSL 编写 Argo Workflows
<ul>
<li>感觉使用难度比 yaml 高，也不太好用。</li>
</ul>
</li>
<li><a href="https://github.com/couler-proj/couler" target="_blank" rel="noopener noreffer">couler</a>: 为  Argo/Tekton/Airflow 提供统一的构建与管理接口
<ul>
<li>理念倒是很好，待研究</li>
</ul>
</li>
</ul>
<p>感觉 couler 挺不错的，可以直接用 Python 写 WorkflowTemplate，这样就一步到位，所有 CI/CD 代码全部是 Python 了。</p>
<p>此外，因为 Argo Workflows 是 kubernetes 自定义资源 CR，也可以使用 helm/kustomize 来做 workflow 的生成。</p>
<p>目前我们一些步骤非常多，但是重复度也很高的 Argo 流水线配置，就是使用 helm 生成的——关键数据抽取到 values.yaml 中，使用 helm 模板 + <code>range</code> 循环来生成 workflow 配置。</p>
<h2 id="二安装-argo-workflows" class="headerLink">
    <a href="#%e4%ba%8c%e5%ae%89%e8%a3%85-argo-workflows" class="header-mark"></a>二、安装 Argo Workflows</h2><blockquote>
<p>参考官方文档：https://argoproj.github.io/argo-workflows/installation/</p>
</blockquote>
<p>安装一个集群版(cluster wide)的 Argo Workflows，使用 MinIO 做 artifacts 存储：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl apply -f https://raw.githubusercontent.com/argoproj/argo/stable/manifests/install.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>部署 MinIO:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">helm repo add minio https://helm.min.io/ <span class="c1"># official minio Helm charts</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 查看历史版本</span>
</span></span><span class="line"><span class="cl">helm search repo minio/minio -l <span class="p">|</span> head
</span></span><span class="line"><span class="cl"><span class="c1"># 下载并解压 chart</span>
</span></span><span class="line"><span class="cl">helm pull minio/minio --untar --version 8.0.9
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 编写 custom-values.yaml，然后部署 minio</span>
</span></span><span class="line"><span class="cl">kubectl create namespace minio
</span></span><span class="line"><span class="cl">helm install minio ./minio -n argo -f custom-values.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><p>minio 部署好后，它会将默认的 <code>accesskey</code> 和 <code>secretkey</code> 保存在名为 <code>minio</code> 的 secret 中。
我们需要修改 argo 的配置，将 minio 作为它的默认 artifact 仓库。</p>
<p>在 configmap <code>workflow-controller-configmap</code> 的 data 中添加如下字段：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">  artifactRepository: <span class="p">|</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 是否将 main 容器的日志保存为 artifact，这样 pod 被删除后，仍然可以在 artifact 中找到日志</span>
</span></span><span class="line"><span class="cl">    archiveLogs: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">    s3:
</span></span><span class="line"><span class="cl">      bucket: argo-bucket   <span class="c1"># bucket 名称，这个 bucket 需要先手动创建好！</span>
</span></span><span class="line"><span class="cl">      endpoint: minio:9000  <span class="c1"># minio 地址</span>
</span></span><span class="line"><span class="cl">      insecure: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">      <span class="c1"># 从 minio 这个 secret 中获取 key/secret</span>
</span></span><span class="line"><span class="cl">      accessKeySecret:
</span></span><span class="line"><span class="cl">        name: minio
</span></span><span class="line"><span class="cl">        key: accesskey
</span></span><span class="line"><span class="cl">      secretKeySecret:
</span></span><span class="line"><span class="cl">        name: minio
</span></span><span class="line"><span class="cl">        key: secretkey
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在还差最后一步：手动进入 minio 的 Web UI，创建好 <code>argo-bucket</code> 这个 bucket.
直接访问 minio 的 9000 端口（需要使用 nodeport/ingress 等方式暴露此端口）就能进入 Web UI，使用前面提到的 secret <code>minio</code> 中的 key/secret 登录，就能创建 bucket.</p>
<h3 id="serviceaccount-配置" class="headerLink">
    <a href="#serviceaccount-%e9%85%8d%e7%bd%ae" class="header-mark"></a>ServiceAccount 配置</h3><blockquote>
<p><a href="https://argoproj.github.io/argo-workflows/service-accounts/" target="_blank" rel="noopener noreffer">https://argoproj.github.io/argo-workflows/service-accounts/</a></p>
</blockquote>
<p>Argo Workflows 依赖于 ServiceAccount 进行验证与授权，而且默认情况下，它使用所在 namespace 的 <code>default</code> ServiceAccount 运行 workflow.</p>
<p>可 <code>default</code> 这个 ServiceAccount 默认根本没有任何权限！所以 Argo 的 artifacts, outputs, access to secrets 等功能全都会因为权限不足而无法使用！</p>
<p>为此，Argo 的官方文档提供了两个解决方法。</p>
<p>方法一，直接给 default 绑定 <code>cluster-admin</code> ClusterRole，给它集群管理员的权限，只要一行命令（但是显然安全性堪忧）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl create rolebinding default-admin --clusterrole<span class="o">=</span>admin --serviceaccount<span class="o">=</span>&lt;namespace&gt;:default -n &lt;namespace&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>方法二，官方给出了<a href="https://argoproj.github.io/argo-workflows/workflow-rbac/" target="_blank" rel="noopener noreffer">Argo Workflows 需要的最小权限的 Role 定义</a>，方便起见我将它改成一个 ClusterRole:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">argo-workflow-role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># pod get/watch is used to identify the container IDs of the current pod</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># pod patch is used to annotate the step&#39;s outputs back to controller (e.g. artifact location)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">pods</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">get</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">watch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">patch</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># logs get/watch are used to get the pods logs for script outputs, and for log archival</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span>- <span class="nt">apiGroups</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">pods/log</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">verbs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">get</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="l">watch</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>创建好上面这个最小的 ClusterRole，然后为每个名字空间，跑一下如下命令，给 default 账号绑定这个 clusterrole:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl create rolebinding default-argo-workflow --clusterrole<span class="o">=</span>argo-workflow-role  --serviceaccount<span class="o">=</span>&lt;namespace&gt;:default -n &lt;namespace&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样就能给 default 账号提供最小的 workflow 运行权限。</p>
<p>或者如果你希望使用别的 ServiceAccount 来运行 workflow，也可以自行创建 ServiceAccount，然后再走上面方法二的流程，但是最后，要记得在 workflow 的 <code>spec.serviceAccountName</code> 中设定好 ServiceAccount 名称。</p>
<h3 id="workflow-executors" class="headerLink">
    <a href="#workflow-executors" class="header-mark"></a>Workflow Executors</h3><blockquote>
<p><a href="https://argoproj.github.io/argo-workflows/workflow-executors/" target="_blank" rel="noopener noreffer">https://argoproj.github.io/argo-workflows/workflow-executors/</a></p>
</blockquote>
<p>Workflow Executor 是符合特定接口的一个进程(Process)，Argo 可以通过它执行一些动作，如监控 Pod 日志、收集 Artifacts、管理容器生命周期等等&hellip;</p>
<p>Workflow Executor 有多种实现，可以通过前面提到的 configmap <code>workflow-controller-configmap</code> 来选择。</p>
<p>可选项如下：</p>
<ol>
<li>docker(默认): 目前使用范围最广，但是安全性最差。它要求一定要挂载访问 <code>docker.sock</code>，因此一定要 root 权限！</li>
<li>kubelet: 应用非常少，目前功能也有些欠缺，目前也必须提供 root 权限</li>
<li>Kubernetes API (k8sapi): 直接通过调用 k8sapi 实现日志监控、Artifacts 手机等功能，非常安全，但是性能欠佳。</li>
<li>Process Namespace Sharing (pns): 安全性比 k8sapi 差一点，因为 Process 对其他所有容器都可见了。但是相对的性能好很多。</li>
</ol>
<p>在 docker 被 kubernetes 抛弃的当下，如果你已经改用 containerd 做为 kubernetes 运行时，那 argo 将会无法工作，因为它默认使用 docker 作为运行时！</p>
<p>我们建议将 workflow executore 改为 <code>pns</code>，兼顾安全性与性能，<code>workflow-controller-configmap</code> 按照如下方式修改：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">workflow-controller-configmap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    # ...省略若干配置...
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    # Specifies the container runtime interface to use (default: docker)
</span></span></span><span class="line"><span class="cl"><span class="sd">    # must be one of: docker, kubelet, k8sapi, pns
</span></span></span><span class="line"><span class="cl"><span class="sd">    containerRuntimeExecutor: pns
</span></span></span><span class="line"><span class="cl"><span class="sd">    # ...</span><span class="w">    
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三使用-argo-workflows-做-ci-工具" class="headerLink">
    <a href="#%e4%b8%89%e4%bd%bf%e7%94%a8-argo-workflows-%e5%81%9a-ci-%e5%b7%a5%e5%85%b7" class="header-mark"></a>三、使用 Argo Workflows 做 CI 工具</h2><p>官方的 Reference 还算详细，也有提供非常多的 examples 供我们参考，这里提供我们几个常用的 workflow 定义。</p>
<ol>
<li>使用 buildkit 构建镜像：https://github.com/argoproj/argo-workflows/blob/master/examples/buildkit-template.yaml
<ol>
<li>buildkit 支持缓存，可以在这个 example 的基础上自定义参数</li>
<li>注意使用 PVC 来跨 step 共享存储空间这种手段，速度会比通过 artifacts 高很多。</li>
</ol>
</li>
</ol>
<h2 id="四常见问题" class="headerLink">
    <a href="#%e5%9b%9b%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" class="header-mark"></a>四、常见问题</h2><h3 id="1-workflow-默认使用-root-账号" class="headerLink">
    <a href="#1-workflow-%e9%bb%98%e8%ae%a4%e4%bd%bf%e7%94%a8-root-%e8%b4%a6%e5%8f%b7" class="header-mark"></a>1. workflow 默认使用 root 账号？</h3><p>workflow 的流程默认使用 root 账号，如果你的镜像默认使用非 root 账号，而且要修改文件，就很可能遇到 Permission Denined 的问题。</p>
<p>解决方法：通过 Pod Security Context 手动设定容器的 user/group:</p>
<ul>
<li><a href="https://argoproj.github.io/argo-workflows/workflow-pod-security-context/" target="_blank" rel="noopener noreffer">Workflow Pod Security Context</a></li>
</ul>
<p>安全起见，我建议所有的 workflow 都手动设定 <code>securityContext</code>，示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">argoproj.io/v1alpha1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">WorkflowTemplate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">xxx</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">securityContext</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runAsNonRoot</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">runAsUser</span><span class="p">:</span><span class="w"> </span><span class="m">1000</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>或者也可以通过 <code>workflow-controller-configmap</code> 的 <code>workflowDefaults</code> 设定默认的 workflow 配置。</p>
<h3 id="2-如何从-hashicorp-vault-中读取-secrets" class="headerLink">
    <a href="#2-%e5%a6%82%e4%bd%95%e4%bb%8e-hashicorp-vault-%e4%b8%ad%e8%af%bb%e5%8f%96-secrets" class="header-mark"></a>2. 如何从 hashicorp vault 中读取 secrets?</h3><blockquote>
<p>参考 <a href="https://github.com/argoproj/argo-workflows/issues/3267#issuecomment-650119636" target="_blank" rel="noopener noreffer">Support to get secrets from Vault</a></p>
</blockquote>
<p>hashicorp vault 目前可以说是云原生领域最受欢迎的 secrets 管理工具。
我们在生产环境用它做为分布式配置中心，同时在本地 CI/CD 中，也使用它存储相关的敏感信息。</p>
<p>现在迁移到 argo，我们当然希望能够有一个好的方法从 vault 中读取配置。</p>
<p>目前最推荐的方法，是使用 vault 的 vault-agent，将 secrets 以文件的形式注入到 pod 中。</p>
<p>通过 valut-policy - vault-role - k8s-serviceaccount 一系列认证授权配置，可以制定非常细粒度的 secrets 权限规则，而且配置信息阅后即焚，安全性很高。</p>
<h3 id="3-如何在多个名字空间中使用同一个-secrets" class="headerLink">
    <a href="#3-%e5%a6%82%e4%bd%95%e5%9c%a8%e5%a4%9a%e4%b8%aa%e5%90%8d%e5%ad%97%e7%a9%ba%e9%97%b4%e4%b8%ad%e4%bd%bf%e7%94%a8%e5%90%8c%e4%b8%80%e4%b8%aa-secrets" class="header-mark"></a>3. 如何在多个名字空间中使用同一个 secrets?</h3><p>使用 Namespace 对 workflow 进行分类时，遇到的一个常见问题就是，如何在多个名字空间使用 <code>private-git-creds</code>/<code>docker-config</code>/<code>minio</code>/<code>vault</code> 等 workflow 必要的 secrets.</p>
<p>常见的方法是把 secrets 在所有名字空间 create 一次。</p>
<p>但是也有更方便的 secrets 同步工具：</p>
<p>比如，使用 <a href="https://github.com/kyverno/kyverno" target="_blank" rel="noopener noreffer">kyverno</a> 进行 secrets 同步的配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">kyverno.io/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterPolicy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sync-secrets</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">background</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 将 secret vault 从 argo Namespace 同步到其他所有 Namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">sync-vault-secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">match</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">resources</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">kinds</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span>- <span class="l">Namespace</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">generate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">regcred</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;{{request.object.metadata.name}}&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">synchronize</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">clone</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">argo</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># 可以配置多个 rules，每个 rules 同步一个 secret</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上面提供的 kyverno 配置，会实时地监控所有 Namespace 变更，一但有新 Namespace 被创建，它就会立即将 <code>vault</code> secret 同步到该 Namespace.</p>
<p>或者，使用专门的 secrets/configmap 复制工具：<a href="https://github.com/mittwald/kubernetes-replicator" target="_blank" rel="noopener noreffer">kubernetes-replicator</a></p>
<h3 id="4-argo-对-cr-资源的验证不够严谨写错了-key-都不报错" class="headerLink">
    <a href="#4-argo-%e5%af%b9-cr-%e8%b5%84%e6%ba%90%e7%9a%84%e9%aa%8c%e8%af%81%e4%b8%8d%e5%a4%9f%e4%b8%a5%e8%b0%a8%e5%86%99%e9%94%99%e4%ba%86-key-%e9%83%bd%e4%b8%8d%e6%8a%a5%e9%94%99" class="header-mark"></a>4. Argo 对 CR 资源的验证不够严谨，写错了 key 都不报错</h3><p>待研究</p>
<h3 id="5-如何归档历史数据" class="headerLink">
    <a href="#5-%e5%a6%82%e4%bd%95%e5%bd%92%e6%a1%a3%e5%8e%86%e5%8f%b2%e6%95%b0%e6%8d%ae" class="header-mark"></a>5. 如何归档历史数据？</h3><p>Argo 用的时间长了，跑过的 Workflows/Pods 全都保存在 Kubernetes/Argo Server 中，导致 Argo 越用越慢。</p>
<p>为了解决这个问题，Argo 提供了一些配置来限制 Workflows 和 Pods 的数量，详见：<a href="https://argoproj.github.io/argo-workflows/cost-optimisation/#limit-the-total-number-of-workflows-and-pods" target="_blank" rel="noopener noreffer">Limit The Total Number Of Workflows And Pods</a></p>
<p>这些限制都是 Workflow 的参数，如果希望设置一个全局默认的限制，可以按照如下示例修改 argo 的 <code>workflow-controller-configmap</code> 这个 configmap:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ConfigMap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">workflow-controller-configmap</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">data</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">config</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    # Default values that will apply to all Workflows from this controller, unless overridden on the Workflow-level
</span></span></span><span class="line"><span class="cl"><span class="sd">    # See more: docs/default-workflow-specs.md
</span></span></span><span class="line"><span class="cl"><span class="sd">    workflowDefaults:
</span></span></span><span class="line"><span class="cl"><span class="sd">      spec:
</span></span></span><span class="line"><span class="cl"><span class="sd">        # must complete in 8h (28,800 seconds)
</span></span></span><span class="line"><span class="cl"><span class="sd">        activeDeadlineSeconds: 28800
</span></span></span><span class="line"><span class="cl"><span class="sd">        # keep workflows for 1d (86,400 seconds)
</span></span></span><span class="line"><span class="cl"><span class="sd">        ttlStrategy:
</span></span></span><span class="line"><span class="cl"><span class="sd">          secondsAfterCompletion: 86400
</span></span></span><span class="line"><span class="cl"><span class="sd">          # secondsAfterSuccess: 5
</span></span></span><span class="line"><span class="cl"><span class="sd">          # secondsAfterFailure: 500
</span></span></span><span class="line"><span class="cl"><span class="sd">        # delete all pods as soon as they complete
</span></span></span><span class="line"><span class="cl"><span class="sd">        podGC:
</span></span></span><span class="line"><span class="cl"><span class="sd">          # 可选项：&#34;OnPodCompletion&#34;, &#34;OnPodSuccess&#34;, &#34;OnWorkflowCompletion&#34;, &#34;OnWorkflowSuccess&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">          strategy: OnPodCompletion</span><span class="w">    
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="6-argo-的其他进阶配置" class="headerLink">
    <a href="#6-argo-%e7%9a%84%e5%85%b6%e4%bb%96%e8%bf%9b%e9%98%b6%e9%85%8d%e7%bd%ae" class="header-mark"></a>6. Argo 的其他进阶配置</h3><p>Argo Workflows 的配置，都保存在 <code>workflow-controller-configmap</code> 这个 configmap 中，我们前面已经接触到了它的部分内容。</p>
<p>这里给出此配置文件的完整 examples: <a href="https://github.com/argoproj/argo-workflows/blob/master/docs/workflow-controller-configmap.yaml" target="_blank" rel="noopener noreffer">https://github.com/argoproj/argo-workflows/blob/master/docs/workflow-controller-configmap.yaml</a></p>
<p>其中一些可能需要自定义的参数如下：</p>
<ul>
<li><code>parallelism</code>: workflow 的最大并行数量</li>
<li><code>persistence</code>: 将完成的 workflows 保存到 postgresql/mysql 中，这样即使 k8s 中的 workflow 被删除了，还能查看 workflow 记录
<ul>
<li>也支持配置过期时间</li>
</ul>
</li>
<li><code>sso</code>: 启用单点登录</li>
</ul>
<h3 id="7-是否应该尽量使用-cicd-工具提供的功能" class="headerLink">
    <a href="#7-%e6%98%af%e5%90%a6%e5%ba%94%e8%af%a5%e5%b0%bd%e9%87%8f%e4%bd%bf%e7%94%a8-cicd-%e5%b7%a5%e5%85%b7%e6%8f%90%e4%be%9b%e7%9a%84%e5%8a%9f%e8%83%bd" class="header-mark"></a>7. 是否应该尽量使用 CI/CD 工具提供的功能？</h3><p>我从同事以及网络上，了解到部分 DevOps 人员主张尽量自己使用 Python/Go 来实现 CI/CD 流水线，CI/CD 工具提供的功能能不使用就不要使用。</p>
<p>因此有此一问。下面做下详细的分析：</p>
<p>尽量使用 CI/CD 工具提供的插件/功能，好处是不需要自己去实现，可以降低维护成本。
但是相对的运维人员就需要深入学习这个 CI/CD 工具的使用，另外还会和 CI/CD 工具绑定，会增加迁移难度。</p>
<p>而尽量自己用 Python 等代码去实现流水线，让 CI/CD 工具只负责调度与运行这些 Python 代码，
那 CI/CD 就可以很方便地随便换，运维人员也不需要去深入学习 CI/CD 工具的使用。
缺点是可能会增加 CI/CD 代码的复杂性。</p>
<p>我观察到 argo/drone 的一些 examples，发现它们的特征是：</p>
<ol>
<li>所有 CI/CD 相关的逻辑，全都实现在流水线中，不需要其他构建代码</li>
<li>每一个 step 都使用专用镜像：golang/nodejs/python
<ol>
<li>比如先使用 golang 镜像进行测试、构建，再使用 kaniko 将打包成容器镜像</li>
</ol>
</li>
</ol>
<p>那是否应该尽量使用 CI/CD 工具提供的功能呢？
<strong>其实这就是有多种方法实现同一件事，该用哪种方法的问题。这个问题在各个领域都很常见。</strong></p>
<p>以我目前的经验来看，需要具体问题具体分析，以 Argo Workflows 为例：</p>
<ol>
<li>流水线本身非常简单，那完全可以直接使用 argo 来实现，没必要自己再搞个 python 脚本
<ol>
<li>简单的流水线，迁移起来往往也非常简单。没必要为了可迁移性，非要用 argo 去调用 python 脚本。</li>
</ol>
</li>
<li>流水线的步骤之间包含很多逻辑判断/数据传递，那很可能是你的流水线设计有问题！
<ol>
<li><strong>流水线的步骤之间传递的数据应该尽可能少！复杂的逻辑判断应该尽量封装在其中一个步骤中！</strong></li>
<li>这种情况下，就应该使用 python 脚本来封装复杂的逻辑，而不应该将这些逻辑暴露到 Argo Workflows 中！</li>
</ol>
</li>
<li>我需要批量运行很多的流水线，而且它们之间还有复杂的依赖关系：那显然应该利用上 argo wrokflow 的高级特性。
<ol>
<li>argo 的 dag/steps 和 workflow of workflows 这两个功能结合，可以简单地实现上述功能。</li>
</ol>
</li>
</ol>
<h2 id="8-如何提升-argo-workflows-的创建和销毁速度" class="headerLink">
    <a href="#8-%e5%a6%82%e4%bd%95%e6%8f%90%e5%8d%87-argo-workflows-%e7%9a%84%e5%88%9b%e5%bb%ba%e5%92%8c%e9%94%80%e6%af%81%e9%80%9f%e5%ba%a6" class="header-mark"></a>8. 如何提升 Argo Workflows 的创建和销毁速度？</h2><p>我们发现 workflow 的 pod，创建和销毁消耗了大量时间，尤其是销毁。
这导致我们单个流水线在 argo 上跑，还没在 jenkins 上跑更快。</p>
<h2 id="使用体验" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e4%bd%93%e9%aa%8c" class="header-mark"></a>使用体验</h2><p>目前已经使用 Argo Workflows 一个月多了，总的来说，最难用的就是 Web UI。</p>
<p>其他的都是小问题，只有 Web UI 是真的超难用，感觉根本就没有好好做过设计&hellip;</p>
<p>急需一个第三方 Web UI&hellip;</p>
<h2 id="画外---如何处理其他-kubernetes-资源之间的依赖关系" class="headerLink">
    <a href="#%e7%94%bb%e5%a4%96---%e5%a6%82%e4%bd%95%e5%a4%84%e7%90%86%e5%85%b6%e4%bb%96-kubernetes-%e8%b5%84%e6%ba%90%e4%b9%8b%e9%97%b4%e7%9a%84%e4%be%9d%e8%b5%96%e5%85%b3%e7%b3%bb" class="header-mark"></a>画外 - 如何处理其他 Kubernetes 资源之间的依赖关系</h2><p>Argo 相比其他 CI 工具，最大的特点，是它假设「任务」之间是有依赖关系的，因此它提供了多种协调编排「任务」的方法。</p>
<p>但是貌似 Argo CD 并没有继承这个理念，Argo CD 部署时，并不能在 kubernetes 资源之间，通过 DAG 等方法定义依赖关系。</p>
<p>微服务之间存在依赖关系，希望能按依赖关系进行部署，而 ArgoCD/FluxCD 部署 kubernetes yaml 时都是不考虑任何依赖关系的。这里就存在一些矛盾。</p>
<p>解决这个矛盾的方法有很多，我查阅了很多资料，也自己做了一些思考，得到的最佳实践来自<a href="https://developer.aliyun.com/article/573791" target="_blank" rel="noopener noreffer">解决服务依赖 - 阿里云 ACK 容器服务</a>，它给出了两种方案：</p>
<ol>
<li><strong>应用端服务依赖检查</strong>: 即在微服务的入口添加依赖检查逻辑，确保所有依赖的微服务/数据库都可访问了，就续探针才能返回 200. 如果超时就直接 Crash</li>
<li><strong>独立的服务依赖检查逻辑</strong>: 部分遗留代码使用方法一改造起来或许会很困难，这时可以考虑使用 <strong>pod initContainer</strong> 或者容器的启动脚本中，加入依赖检查逻辑。</li>
</ol>
<p>但是这两个方案也还是存在一些问题，在说明问题前，我先说明一下我们「<strong>按序部署</strong>」的应用场景。</p>
<p>我们是一个很小的团队，后端做 RPC 接口升级时，通常是直接在开发环境做全量升级+测试。
因此运维这边也是，每次都是做全量升级。</p>
<p>因为没有协议协商机制，新的微服务的「RPC 服务端」将兼容 v1 v2 新旧两种协议，而新的「RPC 客户端」将直接使用 v2 协议去请求其他微服务。
这就导致我们<strong>必须先升级「RPC 服务端」，然后才能升级「RPC 客户端」</strong>。</p>
<p>为此，在进行微服务的全量升级时，就需要沿着 RPC 调用链路按序升级，这里就涉及到了 Kubernetes 资源之间的依赖关系。</p>
<blockquote>
<p>我目前获知的关键问题在于：我们使用的并不是真正的微服务开发模式，而是在把整个微服务系统当成一个「单体服务」在看待，所以引申出了这样的依赖关键的问题。
我进入的新公司完全没有这样的问题，所有的服务之间在 CI/CD 这个阶段都是解耦的，CI/CD 不需要考虑服务之间的依赖关系，也没有自动按照依赖关系进行微服务批量发布的功能，这些都由开发人员自行维护。
或许这才是正确的使用姿势，如果动不动就要批量更新一大批服务，那微服务体系的设计、拆分肯定是有问题了，生产环境也不会允许这么轻率的更新。</p>
</blockquote>
<p>前面讲了，阿里云提供的「应用端服务依赖检查」和「独立的服务依赖检查逻辑」是最佳实践。它们的优点有：</p>
<ol>
<li>简化部署逻辑，每次直接做全量部署就 OK。</li>
<li>提升部署速度，具体体现在：GitOps 部署流程只需要走一次（按序部署要很多次）、所有镜像都提前拉取好了、所有 Pod 也都提前启动了。</li>
</ol>
<p>但是这里有个问题是「灰度发布」或者「滚动更新」，这两种情况下都存在<strong>新旧版本共存</strong>的问题。</p>
<p>如果出现了 RPC 接口升级，那就必须先完成「RPC 服务端」的「灰度发布」或者「滚动更新」，再去更新「RPC 客户端」。</p>
<p>否则如果直接对所有微服务做灰度更新，只依靠「服务依赖检查」，就会出现这样的问题——「RPC 服务端」处于「薛定谔」状态，你调用到的服务端版本是新还是旧，取决于负载均衡的策略和概率。</p>
<p>**因此在做 RPC 接口的全量升级时，只依靠「服务依赖检查」是行不通的。**我目前想到的方案，有如下几种：</p>
<ul>
<li>我们当前的使用方案：<strong>直接在 yaml 部署这一步实现按序部署</strong>，每次部署后就轮询 kube-apiserver，确认全部灰度完成，再进行下一阶段的 yaml 部署。</li>
<li><strong>让后端加个参数来控制客户端使用的 RPC 协议版本，或者搞一个协议协商</strong>。这样就不需要控制微服务发布顺序了。</li>
<li>社区很多有状态应用的部署都涉及到部署顺序等复杂操作，目前流行的解决方案是<strong>使用 Operator+CRD 来实现这类应用的部署</strong>。Operator 会自行处理好各个组件的部署顺序。</li>
</ul>
<h2 id="参考文档" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83%e6%96%87%e6%a1%a3" class="header-mark"></a>参考文档</h2><ul>
<li><a href="https://www.infoq.cn/article/fFZPvrKtbykg53x03IaH" target="_blank" rel="noopener noreffer">Argo加入CNCF孵化器，一文解析Kubernetes原生工作流</a></li>
</ul>
<p>视频:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=fKiU7txd4RI&amp;list=PLj6h78yzYM2Pn8RxfLh2qrXBDftr6Qjut&amp;index=149" target="_blank" rel="noopener noreffer">How to Multiply the Power of Argo Projects By Using Them Together - Hong Wang</a></li>
</ul>]]></content></entry><entry><title type="html">secrets 管理工具 Vault 的介绍、安装及使用</title><link href="https://thiscute.world/posts/expirence-of-vault/"/><id>https://thiscute.world/posts/expirence-of-vault/</id><author><name>ryan4yin</name></author><published>2021-01-24T09:31:41+08:00</published><updated>2021-01-24T09:31:41+08:00</updated><content type="html"><![CDATA[<p><a href="https://github.com/hashicorp/vault" target="_blank" rel="noopener noreffer">Vault</a> 是 hashicorp 推出的 secrets 管理、加密即服务与权限管理工具。它的功能简介如下：</p>
<ol>
<li>secrets 管理：支持保存各种自定义信息、自动生成各类密钥，vault 自动生成的密钥还能自动轮转(rotate)</li>
<li>认证方式：支持接入各大云厂商的账号体系（比如阿里云RAM子账号体系）或者 LDAP 等进行身份验证，不需要创建额外的账号体系。</li>
<li>权限管理：通过 policy，可以设定非常细致的 ACL 权限。</li>
<li>密钥引擎：也支持接管各大云厂商的账号体系（比如阿里云RAM子账号体系），实现 API Key 的自动轮转。</li>
<li>支持接入 kubernetes rbac 认证体系，通过 serviceaccount+role 为每个 Pod 单独配置认证角色。</li>
</ol>
<ul>
<li>支持通过 sidecar/init-container 将 secrets 注入到 pod 中，或者通过 k8s operator 将 vault 数据同步到 k8s secrets 中</li>
</ul>
<p>在使用 Vault 之前，我们是以携程开源的 <a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener noreffer">Apollo</a> 作为微服务的分布式配置中心。</p>
<p>Apollo 在国内非常流行。它功能强大，支持配置的继承，也有提供 HTTP API 方便自动化。
缺点是权限管理和 secrets 管理比较弱，也不支持信息加密，不适合直接存储敏感信息。因此我们现在切换到了 Vault.</p>
<p>目前我们本地的 CI/CD 流水线和云上的微服务体系，都是使用的 Vault 做 secrets 管理.</p>
<h2 id="一vault-基础概念" class="headerLink">
    <a href="#%e4%b8%80vault-%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5" class="header-mark"></a>一、Vault 基础概念</h2><blockquote>
<p>「基本概念」这一节，基本都翻译自官方文档: <a href="https://www.vaultproject.io/docs/internals/architecture" target="_blank" rel="noopener noreffer">https://www.vaultproject.io/docs/internals/architecture</a></p>
</blockquote>
<p>首先看一下 Vault 的架构图：</p>
<p><figure><a class="lightgallery" href="/images/expirence-of-vault/vault-layers.webp" title="/images/expirence-of-vault/vault-layers.webp" data-thumbnail="/images/expirence-of-vault/vault-layers.webp" data-sub-html="<h2>vault layers</h2>">
        <img
            class="lazyload"
            data-src="/images/expirence-of-vault/vault-layers.webp"
            data-srcset="/images/expirence-of-vault/vault-layers.webp, /images/expirence-of-vault/vault-layers.webp 1.5x, /images/expirence-of-vault/vault-layers.webp 2x"
            data-sizes="auto"
            alt="/images/expirence-of-vault/vault-layers.webp">
    </a><figcaption class="image-caption">vault layers</figcaption>
    </figure></p>
<p>可以看到，几乎所有的 Vault 组件都被统称为「<strong>屏障</strong>（Barrier）」。</p>
<p>Vault 可以简单地被划分为<strong>存储后端</strong>（Storage Backend）、<strong>屏障</strong>（Barrier）和 <strong>HTTP/S API</strong> 三个部分。</p>
<p>Vault，翻译成中文就是<strong>金库</strong>。类比银行金库，「屏障」就是用于保护金库的<strong>合金大门</strong>和<strong>钢筋混凝土</strong>，存储后端和客户端之间的<strong>所有数据流动都需要经过它</strong>。</p>
<p>「屏障」确保只有加密数据会被写入存储后端，加密数据在经过「屏障」被读出的过程中被验证与解密。</p>
<p>和银行金库的大门非常类似，「屏障」也必须先<strong>解封</strong>，才能解密存储后端中的数据。</p>
<h3 id="1-数据存储及加密解密" class="headerLink">
    <a href="#1-%e6%95%b0%e6%8d%ae%e5%ad%98%e5%82%a8%e5%8f%8a%e5%8a%a0%e5%af%86%e8%a7%a3%e5%af%86" class="header-mark"></a>1. 数据存储及加密解密</h3><p><strong>存储后端</strong>（Storage Backend）: Vault 自身不存储数据，因此需要为它配置一个存储后端。
存储后端是不受信任的，只用于存储加密数据。</p>
<p><strong>初始化</strong>（Initialization）: Vault 在首次启动时需要初始化，这一步生成一个<strong>加密密钥</strong>（Encryption Key）用于加密数据，加密完成的数据才能被保存到<strong>存储后端</strong>。</p>
<p><strong>解封</strong>（Unseal）: Vault 启动后，因为不知道<strong>加密密钥</strong>所以无法解密数据，这种状态被形象得称作<strong>已封印</strong>（Sealed）。在<strong>解封</strong>前 Vault 无法进行任何操作。</p>
<p><strong>加密密钥</strong>被<strong>主密钥</strong>（Master Key）保护，我们必须提供<strong>主密钥</strong>才能解密出 Vault 的<strong>加密密钥</strong>，从而完成<strong>解封</strong>操作。</p>
<p>默认情况下，Vault 使用<a href="https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing" target="_blank" rel="noopener noreffer">沙米尔密钥分割算法</a>
将<strong>主密钥</strong>分割成五个<strong>分割密钥</strong>（Key Shares），必须要提供其中任意三个<strong>分割密钥</strong>才能重建出主密钥，完成<strong>解封</strong>操作。</p>
<p><figure><a class="lightgallery" href="/images/expirence-of-vault/vault-shamir-secret-sharing.svg" title="/images/expirence-of-vault/vault-shamir-secret-sharing.svg" data-thumbnail="/images/expirence-of-vault/vault-shamir-secret-sharing.svg" data-sub-html="<h2>vault-shamir-secret-sharing</h2>">
        <img
            class="lazyload"
            data-src="/images/expirence-of-vault/vault-shamir-secret-sharing.svg"
            data-srcset="/images/expirence-of-vault/vault-shamir-secret-sharing.svg, /images/expirence-of-vault/vault-shamir-secret-sharing.svg 1.5x, /images/expirence-of-vault/vault-shamir-secret-sharing.svg 2x"
            data-sizes="auto"
            alt="/images/expirence-of-vault/vault-shamir-secret-sharing.svg">
    </a><figcaption class="image-caption">vault-shamir-secret-sharing</figcaption>
    </figure></p>
<blockquote>
<p><strong>分割密钥</strong>的总数，以及重建主密钥最少需要的<strong>分割密钥</strong>数量，都是可以调整的。
沙米尔密钥分割算法也可以关闭，这样主密钥将被直接提供给管理员，管理员可直接使用它进行解封操作。</p>
</blockquote>
<h3 id="2-认证系统及权限系统" class="headerLink">
    <a href="#2-%e8%ae%a4%e8%af%81%e7%b3%bb%e7%bb%9f%e5%8f%8a%e6%9d%83%e9%99%90%e7%b3%bb%e7%bb%9f" class="header-mark"></a>2. 认证系统及权限系统</h3><p>在解封完成后，Vault 就可以开始处理请求了。</p>
<p>HTTP 请求进入后的整个处理流程都由 vault core 管理，<strong>core</strong> 会强制进行 ACL 检查，并确保审计日志(audit logging)完成记录。</p>
<p>客户端首次连接 vault 时，需要先完成身份认证，vault 的 <strong>auth methods</strong> 模块有很多身份认证方法可选：</p>
<ol>
<li>用户友好的认证方法，适合管理员使用：<strong>username/password</strong>、云服务商、<strong>ldap</strong>
<ol>
<li>在创建 user 的时候，需要为 user 绑定 policy，给予合适的权限。</li>
</ol>
</li>
<li>应用友好的方法，适合应用程序使用：<strong>public/private keys、tokens、kubernetes、jwt</strong></li>
</ol>
<p>身份验证请求流经 <strong>core</strong> 并进入 <strong>auth methods</strong>，<strong>auth methods</strong> 确定请求是否有效并返回「<strong>关联策略</strong>(policies)」的列表。</p>
<p><strong>ACL 策略</strong>由 <strong>policy store</strong> 负责管理与存储，由 <strong>core</strong> 进行 ACL 检查。
ACL 的默认行为是拒绝，这意味着除非明确配置 <strong>policy</strong> 允许某项操作，否则该操作将被拒绝。</p>
<p>在通过 <strong>auth methods</strong> 完成了身份认证，并且返回的<strong>关联策略</strong>也没毛病之后，<strong>token store</strong> 将会生成并管理一个新的<strong>凭证</strong>（token），
这个 token 会被返回给客户端，用于进行后续请求。</p>
<p>类似 web 网站的 cookie，token 也都存在一个<strong>租期</strong>（lease）或者说有效期，这加强了安全性。</p>
<p>token 关联了相关的策略 policies，这些策略将被用于验证请求的权限。</p>
<p>请求经过验证后，将被路由到 <strong>secret engine</strong>。如果 <strong>secret engine</strong> 返回了一个 <strong>secret</strong>（由 vault 自动生成的 secret），
core 会将其注册到 <strong>expiration manager</strong>，并给它附加一个 lease ID。lease ID 被客户端用于<strong>更新</strong>(renew)或<strong>吊销</strong>(revoke)它得到的 secret.</p>
<p>如果客户端允许租约(lease)到期，<strong>expiration manager</strong> 将自动吊销这个 <strong>secret</strong>.</p>
<p>core 还负责处理<strong>审核代理 audit broker</strong>的请求及响应日志，将请求发送到所有已配置的<strong>审核设备 audit devices</strong>. 不过默认情况下这个功能貌似是关闭的。</p>
<h3 id="3-secret-engine" class="headerLink">
    <a href="#3-secret-engine" class="header-mark"></a>3. Secret Engine</h3><p><strong>Secret Engine</strong> 是保存、生成或者加密数据的组件，它非常灵活。</p>
<p>有的 Secret Engines 只是单纯地存储与读取数据，比如 kv 就可以看作一个加密的 Redis。
而其他的 Secret Engines 则连接到其他的服务并按需生成动态凭证。</p>
<p>还有些 Secret Engines 提供「<strong>加密即服务</strong>(encryption as a service)」的能力，如 transit、证书管理等。</p>
<p>常用的 engine 举例：</p>
<ol>
<li><strong>AliCloud Secrets Engine</strong>: 基于 RAM 策略动态生成 AliCloud Access Token，或基于 RAM 角色动态生成 AliCloud STS 凭据
<ul>
<li>Access Token 会自动更新(Renew)，而 STS 凭据是临时使用的，过期后就失效了。</li>
</ul>
</li>
<li><strong>kv</strong>: 键值存储，可用于存储一些静态的配置。它一定程度上能替代掉携程的 Apollo 配置中心。</li>
<li><strong>Transit Secrets Engine</strong>: 提供加密即服务的功能，它只负责加密和解密，不负责存储。主要应用场景是帮 app 加解密数据，但是数据仍旧存储在 MySQL 等数据库中。</li>
</ol>
<h2 id="二部署-vault" class="headerLink">
    <a href="#%e4%ba%8c%e9%83%a8%e7%bd%b2-vault" class="header-mark"></a>二、部署 Vault</h2><p>官方建议<a href="https://www.vaultproject.io/docs/platform/k8s/helm/run" target="_blank" rel="noopener noreffer">通过 Helm 部署 vault</a>，大概流程：</p>
<ol>
<li>使用 helm/docker 部署运行 vault.</li>
<li>初始化/解封 vault: vault 安全措施，每次重启必须解封(可设置自动解封).</li>
</ol>
<h3 id="0-如何选择存储后端" class="headerLink">
    <a href="#0-%e5%a6%82%e4%bd%95%e9%80%89%e6%8b%a9%e5%ad%98%e5%82%a8%e5%90%8e%e7%ab%af" class="header-mark"></a>0. 如何选择存储后端？</h3><p>首先，我们肯定需要高可用 HA，至少要保留能升级到 HA 的能力，所以不建议选择不支持 HA 的后端。</p>
<p>而具体的选择，就因团队经验而异了，人们往往倾向于使用自己熟悉的、知根知底的后端，或者选用云服务。</p>
<p>比如我们对 MySQL/PostgreSQL 比较熟悉，而且使用云服务提供的数据库不需要考虑太多的维护问题，MySQL/PostgreSQL 作为一个通用协议也不会被云厂商绑架，那我们就倾向于使用这两者之一。</p>
<p>而如果你们是本地自建，那你可能更倾向于使用 Etcd/Consul/Raft 做后端存储。</p>
<h3 id="1-docker-compose-部署非-ha" class="headerLink">
    <a href="#1-docker-compose-%e9%83%a8%e7%bd%b2%e9%9d%9e-ha" class="header-mark"></a>1. docker-compose 部署（非 HA）</h3><blockquote>
<p>推荐用于本地开发测试环境，或者其他不需要高可用的环境。</p>
</blockquote>
<p><code>docker-compose.yml</code> 示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;3.3&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">vault</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 文档：https://hub.docker.com/_/vault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">vault:1.6.0</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">vault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># rootless 容器，内部不能使用标准端口 443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;443:8200&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">always</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 审计日志存储目录（`file` audit backend）</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./logs:/vault/logs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 当使用 file data storage 插件时，数据被存储在这里。默认不往这写任何数据。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./file:/vault/file</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># vault 配置</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./config.hcl:/vault/config/config.hcl</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># TLS 证书</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./certs:/certs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># vault 需要锁定内存以防止敏感值信息被交换(swapped)到磁盘中</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 为此需要添加如下 capability</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cap_add</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">IPC_LOCK</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 必须设定 entrypoint，否则 vault 容器默认以 development 模式运行</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">entrypoint</span><span class="p">:</span><span class="w"> </span><span class="l">vault server -config /vault/config/config.hcl</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>config.hcl</code> 内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="n">ui</span> <span class="o">=</span> <span class="kt">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">//</span> <span class="k">使用文件做数据存储</span><span class="err">（</span><span class="k">单节点</span><span class="err">）</span>
</span></span><span class="line"><span class="cl"><span class="k">storage</span> <span class="s2">&#34;file&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  path</span>    <span class="o">=</span> <span class="s2">&#34;/vault/file&#34;</span>
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">listener</span> <span class="s2">&#34;tcp&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  address</span> <span class="o">=</span> <span class="s2">&#34;[::]:8200&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">  tls_disable</span> <span class="o">=</span> <span class="kt">false</span>
</span></span><span class="line"><span class="cl"><span class="n">  tls_cert_file</span> <span class="o">=</span> <span class="s2">&#34;/certs/server.crt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">  tls_key_file</span>  <span class="o">=</span> <span class="s2">&#34;/certs/server.key&#34;</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>将如上两份配置保存在同一文件夹内，同时在 <code>./certs</code> 中提供 TLS 证书 <code>server.crt</code> 和私钥 <code>server.key</code>。</p>
<p>然后 <code>docker-compose up -d</code> 就能启动运行一个 vault 实例。</p>
<h3 id="install-by-helm" class="headerLink">
    <a href="#install-by-helm" class="header-mark"></a>2. 通过 helm 部署高可用的 vault</h3><blockquote>
<p>推荐用于生产环境</p>
</blockquote>
<p>通过 helm 部署：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 添加 valut 仓库</span>
</span></span><span class="line"><span class="cl">helm repo add hashicorp https://helm.releases.hashicorp.com
</span></span><span class="line"><span class="cl"><span class="c1"># 查看 vault 版本号</span>
</span></span><span class="line"><span class="cl">helm search repo hashicorp/vault -l <span class="p">|</span> head
</span></span><span class="line"><span class="cl"><span class="c1"># 下载某个版本号的 vault</span>
</span></span><span class="line"><span class="cl">helm pull hashicorp/vault --version  0.11.0 --untar
</span></span></code></pre></td></tr></table>
</div>
</div><p>参照下载下来的 <code>./vault/values.yaml</code> 编写 <code>custom-values.yaml</code>，
部署一个以 <code>mysql</code> 为后端存储的 HA vault，配置示例如下:</p>
<blockquote>
<p>配置内容虽然多，但是大都是直接拷贝自 <code>./vault/values.yaml</code>，改动很少。
测试 Vault 时可以忽略掉其中大多数的配置项。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">global</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># enabled is the master enabled switch. Setting this to true or false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># will enable or disable all the components within this chart by default.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># TLS for end-to-end encrypted transport</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tlsDisable</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">injector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># True if you want to enable vault agent injection.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># If true, will enable a node exporter metrics endpoint at /metrics.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Mount Path of the Vault Kubernetes Auth Method.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">authPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;auth/kubernetes&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">certs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># secretName is the name of the secret that has the TLS certificate and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># private key to serve the injector webhook. If this is null, then the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># injector will default to its automatic management mode that will assign</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># a service account to the injector to generate its own certificates.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># caBundle is a base64-encoded PEM-encoded certificate bundle for the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># CA that signed the TLS certificate that the webhook serves. This must</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># be set if secretName is non-null.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">caBundle</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># certName and keyName are the names of the files within the secret for</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># the TLS cert and private key, respectively. These have reasonable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># defaults but can be customized if necessary.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">certName</span><span class="p">:</span><span class="w"> </span><span class="l">tls.crt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">keyName</span><span class="p">:</span><span class="w"> </span><span class="l">tls.key</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Resource requests, limits, etc. for the server cluster placement. This</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># should map directly to the value of the resources field for a PodSpec.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># By default no direct resource request is made.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Enables a headless service to be used by the Vault Statefulset</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">service</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Port on which Vault server is listening</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">port</span><span class="p">:</span><span class="w"> </span><span class="m">8200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Target port to which the service should be mapped to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">targetPort</span><span class="p">:</span><span class="w"> </span><span class="m">8200</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># This configures the Vault Statefulset to create a PVC for audit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># logs.  Once Vault is deployed, initialized and unseal, Vault must</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># be configured to use this for audit logs.  This will be mounted to</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># /vault/audit</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># See https://www.vaultproject.io/docs/audit/index.html to know more</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">auditStorage</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Run Vault in &#34;HA&#34; mode. There are no storage requirements unless audit log</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># persistence is required.  In HA mode Vault will configure itself to use Consul</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># for its storage backend.  The default configuration provided will work the Consul</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Helm project by default.  It is possible to manually configure Vault to use a</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># different HA backend.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">ha</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Set the api_addr configuration for Vault HA</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># See https://www.vaultproject.io/docs/configuration#api_addr</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># If set to null, this will be set to the Pod IP Address</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">apiAddr</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># config is a raw string of default configuration when using a Stateful</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># deployment. Default is to use a Consul for its HA storage backend.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># This should be HCL.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># Note: Configuration files are stored in ConfigMaps so sensitive data </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># such as passwords should be either mounted through extraSecretEnvironmentVars</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># or through a Kube secret.  For more information see: </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># https://www.vaultproject.io/docs/platform/k8s/helm/run#protecting-sensitive-vault-configurations</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">config</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      ui = true
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      listener &#34;tcp&#34; {
</span></span></span><span class="line"><span class="cl"><span class="sd">        address = &#34;[::]:8200&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        cluster_address = &#34;[::]:8201&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">        # 注意，这个值要和 helm 的参数 global.tlsDisable 一致
</span></span></span><span class="line"><span class="cl"><span class="sd">        tls_disable = false
</span></span></span><span class="line"><span class="cl"><span class="sd">        tls_cert_file = &#34;/etc/certs/vault.crt&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">        tls_key_file  = &#34;/etc/certs/vault.key&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">      }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      # storage &#34;postgresql&#34; {
</span></span></span><span class="line"><span class="cl"><span class="sd">      #   connection_url = &#34;postgres://username:password@&lt;host&gt;:5432/vault?sslmode=disable&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">      #   ha_enabled = true
</span></span></span><span class="line"><span class="cl"><span class="sd">      # }
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      service_registration &#34;kubernetes&#34; {}
</span></span></span><span class="line"><span class="cl"><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">      # Example configuration for using auto-unseal, using AWS KMS. 
</span></span></span><span class="line"><span class="cl"><span class="sd">      # the cluster must have a service account that is authorized to access AWS KMS, throught an IAM Role.
</span></span></span><span class="line"><span class="cl"><span class="sd">      # seal &#34;awskms&#34; {
</span></span></span><span class="line"><span class="cl"><span class="sd">      #   region     = &#34;us-east-1&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">      #   kms_key_id = &#34;&lt;some-key-id&gt;&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">      #   默认情况下插件会使用 awskms 的公网 enpoint，但是也可以使用如下参数，改用自行创建的 vpc 内网 endpoint
</span></span></span><span class="line"><span class="cl"><span class="sd">      #   endpoint   = &#34;https://&lt;vpc-endpoint-id&gt;.kms.us-east-1.vpce.amazonaws.com&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">      # }</span><span class="w">      
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Definition of the serviceAccount used to run Vault.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># These options are also used when using an external Vault server to validate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Kubernetes tokens.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">serviceAccount</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">create</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;vault&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="c"># 如果要使用 auto unseal 的话，这个填写拥有 awskms 权限的 AWS IAM Role</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">eks.amazonaws.com/role-arn</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;role-arn&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># Vault UI</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">ui</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">publishNotReadyAddresses</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">serviceType</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterIP</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">activeVaultPodOnly</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">externalPort</span><span class="p">:</span><span class="w"> </span><span class="m">8200</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>现在使用自定义的 <code>custom-values.yaml</code> 部署 vautl:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl create namespace vault
</span></span><span class="line"><span class="cl"><span class="c1"># 安装/升级 valut</span>
</span></span><span class="line"><span class="cl">helm upgrade --install vault ./vault --namespace vault -f custom-values.yaml
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-初始化并解封-vault" class="headerLink">
    <a href="#3-%e5%88%9d%e5%a7%8b%e5%8c%96%e5%b9%b6%e8%a7%a3%e5%b0%81-vault" class="header-mark"></a>3. 初始化并解封 vault</h3><blockquote>
<p>官方文档：<a href="https://learn.hashicorp.com/tutorials/vault/kubernetes-raft-deployment-guide?in=vault/kubernetes#install-vault" target="_blank" rel="noopener noreffer">Initialize and unseal Vault - Vault on Kubernetes Deployment Guide</a></p>
</blockquote>
<p>通过 helm 部署 vault，默认会部署一个三副本的 StatefulSet，但是这三个副本都会处于 NotReady 状态（docker 方式部署的也一样）。
接下来还需要手动初始化并解封 vault，才能 <code>Ready</code>:</p>
<ol>
<li>第一步：从三个副本中随便选择一个，运行 vault 的初始化命令：<code>kubectl exec -ti vault-0 -- vault operator init</code>
<ol>
<li>初始化操作会返回 5 个 unseal keys，以及一个 Initial Root Token，这些数据非常敏感非常重要，一定要保存到安全的地方！</li>
</ol>
</li>
<li>第二步：在每个副本上，使用任意三个 unseal keys 进行解封操作。
<ol>
<li>一共有三个副本，也就是说要解封 3*3 次，才能完成 vault 的完整解封！</li>
</ol>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 每个实例都需要解封三次！</span>
</span></span><span class="line"><span class="cl"><span class="c1">## Unseal the first vault server until it reaches the key threshold</span>
</span></span><span class="line"><span class="cl">$ kubectl <span class="nb">exec</span> -ti vault-0 -- vault operator unseal <span class="c1"># ... Unseal Key 1</span>
</span></span><span class="line"><span class="cl">$ kubectl <span class="nb">exec</span> -ti vault-0 -- vault operator unseal <span class="c1"># ... Unseal Key 2</span>
</span></span><span class="line"><span class="cl">$ kubectl <span class="nb">exec</span> -ti vault-0 -- vault operator unseal <span class="c1"># ... Unseal Key 3</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样就完成了部署，但是要注意，<strong>vault 实例每次重启后，都需要重新解封！也就是重新进行第二步操作！</strong></p>
<h3 id="4-初始化并设置自动解封" class="headerLink">
    <a href="#4-%e5%88%9d%e5%a7%8b%e5%8c%96%e5%b9%b6%e8%ae%be%e7%bd%ae%e8%87%aa%e5%8a%a8%e8%a7%a3%e5%b0%81" class="header-mark"></a>4. 初始化并设置自动解封</h3><p>在未设置 auto unseal 的情况下，vault 每次重启都要手动解封所有 vault 实例，实在是很麻烦，在云上自动扩缩容的情况下，vault 实例会被自动调度，这种情况就更麻烦了。</p>
<p>为了简化这个流程，可以考虑配置 auto unseal 让 vault 自动解封。</p>
<p>自动解封目前有两种方法：</p>
<ol>
<li>使用阿里云/AWS/Azure 等云服务提供的密钥库来管理 encryption key
<ol>
<li>AWS: <a href="https://www.vaultproject.io/docs/configuration/seal/awskms" target="_blank" rel="noopener noreffer">awskms Seal</a>
<ol>
<li>如果是 k8s 集群，vault 使用的 ServiceAccount 需要有权限使用 AWS KMS，它可替代掉 config.hcl 中的 access_key/secret_key 两个属性</li>
</ol>
</li>
<li>阿里云：<a href="https://www.vaultproject.io/docs/configuration/seal/alicloudkms" target="_blank" rel="noopener noreffer">alicloudkms Seal</a></li>
</ol>
</li>
<li>如果你不想用云服务，那可以考虑 <a href="https://learn.hashicorp.com/tutorials/vault/autounseal-transit" target="_blank" rel="noopener noreffer">autounseal-transit</a>，这种方法使用另一个 vault 实例提供的 transit 引擎来实现 auto-unseal.</li>
<li>简单粗暴：直接写个 crontab 或者在 CI 平台上加个定时任务去执行解封命令，以实现自动解封。不过这样安全性就不好说了。</li>
</ol>
<p>以使用 awskms 为例，首先创建 aws IAM 的 policy 内容如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Version&#34;</span><span class="p">:</span> <span class="s2">&#34;2012-10-17&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;Statement&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Sid&#34;</span><span class="p">:</span> <span class="s2">&#34;VaultKMSUnseal&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Effect&#34;</span><span class="p">:</span> <span class="s2">&#34;Allow&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Action&#34;</span><span class="p">:</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;kms:Decrypt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;kms:Encrypt&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                <span class="s2">&#34;kms:DescribeKey&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="p">],</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&#34;Resource&#34;</span><span class="p">:</span> <span class="s2">&#34;*&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后创建 IAM Role 绑定上面的 policy，并为 vault 的 k8s serviceaccount 创建一个 IAM Role，绑定上这个 policy.</p>
<p>这样 vault 使用的 serviceaccount 自身就拥有了访问 awskms 的权限，也就不需要额外通过 access_key/secret_key 来访问 awskms.</p>
<p>关于 IAM Role 和 k8s serviceaccount 如何绑定，参见官方文档：<a href="https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html" target="_blank" rel="noopener noreffer">IAM roles for EKS service accounts</a></p>
<p>完事后再修改好前面提供的 helm 配置，部署它，最后使用如下命令初始化一下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 初始化命令和普通模式并无不同</span>
</span></span><span class="line"><span class="cl">kubectl <span class="nb">exec</span> -ti vault-0 -- vault operator init
</span></span><span class="line"><span class="cl"><span class="c1"># 会打印出一个 root token，以及五个 Recovery Key（而不是 Unseal Key）</span>
</span></span><span class="line"><span class="cl"><span class="c1"># Recover Key 不再用于解封，但是重新生成 root token 等操作仍然会需要用到它.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后就大功告成了，可以尝试下删除 vault 的 pod，新建的 Pod 应该会自动解封。</p>
<h2 id="三vault-自身的配置管理" class="headerLink">
    <a href="#%e4%b8%89vault-%e8%87%aa%e8%ba%ab%e7%9a%84%e9%85%8d%e7%bd%ae%e7%ae%a1%e7%90%86" class="header-mark"></a>三、Vault 自身的配置管理</h2><p>Vault 本身是一个复杂的 secrets 工具，它提供了 <strong>Web UI</strong> 和 <strong>CLI</strong> 用于手动管理与查看 Vault 的内容。</p>
<p>但是作为一名 DevOps，我们当然更喜欢更自治的方法，这有两种选择:</p>
<ul>
<li>使用 vault 的 sdk: python-<a href="https://github.com/hvac/hvac" target="_blank" rel="noopener noreffer">hvac</a></li>
<li>使用 <a href="https://github.com/hashicorp/terraform-provider-vault" target="_blank" rel="noopener noreffer">terraform-provider-vault</a> 或者 <a href="https://github.com/pulumi/pulumi-vault" target="_blank" rel="noopener noreffer">pulumi-vault</a> 实现 vault 配置的自动化管理。</li>
</ul>
<p>Web UI 适合手工操作，而 sdk/<code>terraform-provider-vault</code> 则适合用于自动化管理 vault.</p>
<p>我们的测试环境就是使用 <code>pulumi-vault</code> 完成的自动化配置 vault policy 和 kubernetes role，然后自动化注入所有测试用的 secrets.</p>
<h3 id="1-使用-pulumi-自动化配置-vault" class="headerLink">
    <a href="#1-%e4%bd%bf%e7%94%a8-pulumi-%e8%87%aa%e5%8a%a8%e5%8c%96%e9%85%8d%e7%bd%ae-vault" class="header-mark"></a>1. 使用 pulumi 自动化配置 vault</h3><p>使用 pulumi 管理 vault 配置的优势是很大的，因为云上资源的敏感信息（数据库账号密码、资源 ID、RAM子账号）都是 pulumi 创建的。</p>
<p>再结合使用 pulumi_valut，就能实现敏感信息自动生成后，立即保存到 vault 中，实现完全自动化。</p>
<p>后续微服务就可以通过 kubernetes 认证，直接从 vault 读取敏感信息。</p>
<p>或者是写入到本地的 vault 中留做备份，在需要的时候，管理员能登入进去查看相关敏感信息。</p>
<h4 id="11-token-的生成" class="headerLink">
    <a href="#11-token-%e7%9a%84%e7%94%9f%e6%88%90" class="header-mark"></a>1.1 Token 的生成</h4><p>pulumi_vault 本身挺简单的，声明式的配置嘛，直接用就是了。</p>
<p>但是它一定要求提供 <code>VAULT_TOKEN</code> 作为身份认证的凭证（实测 userpass/approle 都不能直接使用，会报错 <code>no vault token found</code>），而且 pulumi 还会先生成临时用的 child token，然后用这个 child token
进行后续的操作。</p>
<p>首先安全起见，肯定不应该直接提供 root token！root token 应该封存，除了紧急情况不应该启用。</p>
<p>那么应该如何生成一个权限有限的 token 给 vault 使用呢？
我的方法是创建一个 userpass 账号，通过 policy 给予它有限的权限。
然后先手动(或者自动)登录获取到 token，再将 token 提供给 pulumi_vault 使用。</p>
<p>这里面有个坑，就是必须给 userpass 账号创建 child token 的权限：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="k">path</span> <span class="s2">&#34;local/*&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  capabilities</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;read&#34;, &#34;list&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">//</span> <span class="k">允许创建</span> <span class="k">child</span> <span class="k">token</span>
</span></span><span class="line"><span class="cl"><span class="k">path</span> <span class="s2">&#34;auth/token/create&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">  capabilities</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;create&#34;, &#34;read&#34;, &#34;update&#34;, &#34;delete&#34;, &#34;list&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>不给这个权限，pulumi_vault 就会一直报错。。</p>
<p>然后还得给它「自动化配置」需要的权限，比如自动创建/更新 policy/secrets/kubernetes 等等，示例如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="c1"># To list policies - Step 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">path</span> <span class="s2">&#34;sys/policy&#34;</span>
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl"><span class="n">  capabilities</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;read&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">}<span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1"># Create and manage ACL policies broadly across Vault
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">path</span> <span class="s2">&#34;sys/policy/*&#34;</span>
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl"><span class="n">  capabilities</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;create&#34;, &#34;read&#34;, &#34;update&#34;, &#34;delete&#34;, &#34;list&#34;, &#34;sudo&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">}<span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1">
</span></span></span><span class="line"><span class="cl"><span class="c1"># List, create, update, and delete key/value secrets
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">path</span> <span class="s2">&#34;secret/*&#34;</span>
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl"><span class="n">  capabilities</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;create&#34;, &#34;read&#34;, &#34;update&#34;, &#34;delete&#34;, &#34;list&#34;, &#34;sudo&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">path</span> <span class="s2">&#34;auth/kubernetes/role/*&#34;</span>
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl"><span class="n">  capabilities</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;create&#34;, &#34;read&#34;, &#34;update&#34;, &#34;list&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="四在-kubernetes-中使用-vault-注入-secrets" class="headerLink">
    <a href="#%e5%9b%9b%e5%9c%a8-kubernetes-%e4%b8%ad%e4%bd%bf%e7%94%a8-vault-%e6%b3%a8%e5%85%a5-secrets" class="header-mark"></a>四、在 Kubernetes 中使用 vault 注入 secrets</h2><p><figure><a class="lightgallery" href="/images/expirence-of-vault/vault-k8s-auth-workflow.webp" title="/images/expirence-of-vault/vault-k8s-auth-workflow.webp" data-thumbnail="/images/expirence-of-vault/vault-k8s-auth-workflow.webp" data-sub-html="<h2>vault-k8s-auth-workflow</h2>">
        <img
            class="lazyload"
            data-src="/images/expirence-of-vault/vault-k8s-auth-workflow.webp"
            data-srcset="/images/expirence-of-vault/vault-k8s-auth-workflow.webp, /images/expirence-of-vault/vault-k8s-auth-workflow.webp 1.5x, /images/expirence-of-vault/vault-k8s-auth-workflow.webp 2x"
            data-sizes="auto"
            alt="/images/expirence-of-vault/vault-k8s-auth-workflow.webp">
    </a><figcaption class="image-caption">vault-k8s-auth-workflow</figcaption>
    </figure></p>
<p>前面提到过 vault 支持通过 Kubernetes 的 ServiceAccount 为每个 Pod 单独分配权限。</p>
<p>应用程序有两种方式去读取 vault 中的配置：</p>
<ol>
<li>借助 Vault Sidecar，将 secrets 以文件的形式自动注入到 Pod 中，比如 <code>/vault/secrets/config.json</code>
<ul>
<li>vault sidecar 在常驻模式下每 15 秒更新一次配置，应用程序可以使用 <code>watchdog</code> 实时监控 secrets 文件的变更。</li>
</ul>
</li>
<li>应用程序自己使用 SDK 直接访问 vault api 获取 secrets</li>
</ol>
<p>上述两种方式，都可以借助 Kubernetes ServiceAccount 进行身份验证和权限分配。</p>
<p>下面以 Sidecar 模式为例，介绍如何将 secrets 以文件形式注入到 Pod 中。</p>
<h3 id="1-部署并配置-vault-agent" class="headerLink">
    <a href="#1-%e9%83%a8%e7%bd%b2%e5%b9%b6%e9%85%8d%e7%bd%ae-vault-agent" class="header-mark"></a>1. 部署并配置 vault agent</h3><p>首先启用 Vault 的 Kubernetes 身份验证:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 配置身份认证需要在 vault pod 中执行，启动 vault-0 的交互式会话</span>
</span></span><span class="line"><span class="cl">kubectl <span class="nb">exec</span> -n vault -it vault-0 -- /bin/sh
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">VAULT_TOKEN</span><span class="o">=</span><span class="s1">&#39;&lt;your-root-token&gt;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">VAULT_ADDR</span><span class="o">=</span><span class="s1">&#39;http://localhost:8200&#39;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 启用 Kubernetes 身份验证</span>
</span></span><span class="line"><span class="cl">vault auth <span class="nb">enable</span> kubernetes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># kube-apiserver API 配置，vault 需要通过 kube-apiserver 完成对 serviceAccount 的身份验证</span>
</span></span><span class="line"><span class="cl">vault write auth/kubernetes/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nv">token_reviewer_jwt</span><span class="o">=</span><span class="s2">&#34;</span><span class="k">$(</span>cat /var/run/secrets/kubernetes.io/serviceaccount/token<span class="k">)</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nv">kubernetes_host</span><span class="o">=</span><span class="s2">&#34;https://</span><span class="nv">$KUBERNETES_PORT_443_TCP_ADDR</span><span class="s2">:443&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>    <span class="nv">kubernetes_ca_cert</span><span class="o">=</span>@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="11-使用集群外部的-valut-实例" class="headerLink">
    <a href="#11-%e4%bd%bf%e7%94%a8%e9%9b%86%e7%be%a4%e5%a4%96%e9%83%a8%e7%9a%84-valut-%e5%ae%9e%e4%be%8b" class="header-mark"></a>1.1 使用集群外部的 valut 实例</h4><blockquote>
<p>如果你没这个需求，请跳过这一节。</p>
</blockquote>
<blockquote>
<p>详见 <a href="https://learn.hashicorp.com/tutorials/vault/kubernetes-external-vault?in=vault/kubernetes#install-the-vault-helm-chart-configured-to-address-an-external-vault" target="_blank" rel="noopener noreffer">Install the Vault Helm chart configured to address an external Vault</a></p>
</blockquote>
<p>kubernetes 也可以和外部的 vault 实例集成，集群中只部署 vault-agent.</p>
<p>这适用于多个 kubernetes 集群以及其他 APP 共用一个 vault 实例的情况，比如我们本地的多个开发测试集群，就都共用着同一个 vault 实例，方便统一管理应用的 secrets.</p>
<p>首先，使用 helm chart 部署 vault-agent，接入外部的 vault 实例。使用的 <code>custom-values.yaml</code> 示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">global</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># enabled is the master enabled switch. Setting this to true or false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># will enable or disable all the components within this chart by default.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># TLS for end-to-end encrypted transport</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">tlsDisable</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">injector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># True if you want to enable vault agent injection.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">replicas</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># If multiple replicas are specified, by default a leader-elector side-car</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># will be created so that only one injector attempts to create TLS certificates.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">leaderElector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">repository</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;gcr.io/google_containers/leader-elector&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">tag</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;0.4&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ttl</span><span class="p">:</span><span class="w"> </span><span class="l">60s</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># If true, will enable a node exporter metrics endpoint at /metrics.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">metrics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">enabled</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># External vault server address for the injector to use. Setting this will</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># disable deployment of a  vault server along with the injector.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># TODO 这里的 https ca.crt 要怎么设置？mTLS 又该如何配置？</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">externalVaultAddr</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;https://&lt;external-vault-url&gt;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># Mount Path of the Vault Kubernetes Auth Method.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">authPath</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;auth/kubernetes&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">certs</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># secretName is the name of the secret that has the TLS certificate and</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># private key to serve the injector webhook. If this is null, then the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># injector will default to its automatic management mode that will assign</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># a service account to the injector to generate its own certificates.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">secretName</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># caBundle is a base64-encoded PEM-encoded certificate bundle for the</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># CA that signed the TLS certificate that the webhook serves. This must</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># be set if secretName is non-null.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">caBundle</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># certName and keyName are the names of the files within the secret for</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># the TLS cert and private key, respectively. These have reasonable</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># defaults but can be customized if necessary.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">certName</span><span class="p">:</span><span class="w"> </span><span class="l">tls.crt</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">keyName</span><span class="p">:</span><span class="w"> </span><span class="l">tls.key</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>部署命令和 <a href="#install-by-helm" rel="">通过 helm 部署 vault</a> 一致，只要更换 <code>custom-values.yaml</code> 就行。</p>
<p>vault-agent 部署完成后，第二步是为 vault 创建 serviceAccount、secret 和 ClusterRoleBinding，以允许 vault 审查 kubernetes 的 token, 完成对 pod 的身份验证. yaml 配置如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vault-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">vault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Secret</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vault-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">vault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">kubernetes.io/service-account.name</span><span class="p">:</span><span class="w"> </span><span class="l">vault-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">kubernetes.io/service-account-token</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRoleBinding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">role-tokenreview-binding</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">roleRef</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">apiGroup</span><span class="p">:</span><span class="w"> </span><span class="l">rbac.authorization.k8s.io</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ClusterRole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">system:auth-delegator</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">subjects</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">ServiceAccount</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">vault-auth</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">vault</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>现在在 vault 实例这边，启用 kubernetes 身份验证，在 vault 实例内，执行如下命令：</p>
<blockquote>
<p>vault 实例内显然没有 kubectl 和 kubeconfig，简便起见，下列的 vault 命令也可以通过 Web UI 完成。</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">VAULT_TOKEN</span><span class="o">=</span><span class="s1">&#39;&lt;your-root-token&gt;&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">VAULT_ADDR</span><span class="o">=</span><span class="s1">&#39;http://localhost:8200&#39;</span>
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># 启用 Kubernetes 身份验证</span>
</span></span><span class="line"><span class="cl">vault auth <span class="nb">enable</span> kubernetes
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1"># kube-apiserver API 配置，vault 需要通过 kube-apiserver 完成对 serviceAccount 的身份验证</span>
</span></span><span class="line"><span class="cl"><span class="c1"># TOKEN_REVIEW_JWT: 就是我们前面创建的 secret `vault-auth`</span>
</span></span><span class="line"><span class="cl"><span class="nv">TOKEN_REVIEW_JWT</span><span class="o">=</span><span class="k">$(</span>kubectl -n vault get secret vault-auth -o go-template<span class="o">=</span><span class="s1">&#39;{{ .data.token }}&#39;</span> <span class="p">|</span> base64 --decode<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># kube-apiserver 的 ca 证书</span>
</span></span><span class="line"><span class="cl"><span class="nv">KUBE_CA_CERT</span><span class="o">=</span><span class="k">$(</span>kubectl -n vault config view --raw --minify --flatten -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.clusters[].cluster.certificate-authority-data}&#39;</span> <span class="p">|</span> base64 --decode<span class="k">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># kube-apiserver 的 url</span>
</span></span><span class="line"><span class="cl"><span class="nv">KUBE_HOST</span><span class="o">=</span><span class="k">$(</span>kubectl config view --raw --minify --flatten -o <span class="nv">jsonpath</span><span class="o">=</span><span class="s1">&#39;{.clusters[].cluster.server}&#39;</span><span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">vault write auth/kubernetes/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="nv">token_reviewer_jwt</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$TOKEN_REVIEW_JWT</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="nv">kubernetes_host</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$KUBE_HOST</span><span class="s2">&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>        <span class="nv">kubernetes_ca_cert</span><span class="o">=</span><span class="s2">&#34;</span><span class="nv">$KUBE_CA_CERT</span><span class="s2">&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样，就完成了 kubernetes 与外部 vault 的集成！</p>
<h3 id="2-关联-k8s-rbac-权限系统和-vault" class="headerLink">
    <a href="#2-%e5%85%b3%e8%81%94-k8s-rbac-%e6%9d%83%e9%99%90%e7%b3%bb%e7%bb%9f%e5%92%8c-vault" class="header-mark"></a>2. 关联 k8s rbac 权限系统和 vault</h3><p>接下来需要做的事：</p>
<ol start="2">
<li>通过 vault policy 定义好每个 role（微服务）能访问哪些资源。</li>
<li>为每个微服务生成一个 role，这个 role 需要绑定对应的 vault policy 及 kubernetes serviceaccount
<ol>
<li>这个 role 是 vault 的 kubernetes 插件自身的属性，它和 kubernetes role 没有半毛钱关系。</li>
</ol>
</li>
<li>创建一个 ServiceAccount，并使用这个 使用这个 ServiceAccount 部署微服务</li>
</ol>
<p>其中第一步和第二步都可以通过 vault api 自动化完成.
第三步可以通过 kubectl 部署时完成。</p>
<p>方便起见，vault policy / role / k8s serviceaccount 这三个配置，都建议和微服务使用相同的名称。</p>
<blockquote>
<p>上述配置中，role 起到一个承上启下的作用，它关联了 k8s serviceaccount 和 vault policy 两个配置。</p>
</blockquote>
<p>比如创建一个名为 <code>my-app-policy</code> 的 vault policy，内容为:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-hcl" data-lang="hcl"><span class="line"><span class="cl"><span class="c1"># 允许读取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">path</span> <span class="s2">&#34;my-app/data/*&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">   capabilities</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;read&#34;, &#34;list&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl"><span class="err">//</span> <span class="k">允许列出</span> <span class="k">myapp</span> <span class="k">中的所有数据</span><span class="p">(</span><span class="k">kv</span> <span class="k">v2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">path</span> <span class="s2">&#34;myapp/metadata/*&#34;</span> {
</span></span><span class="line"><span class="cl"><span class="n">    capabilities</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&#34;read&#34;, &#34;list&#34;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在 vault 的 kuberntes 插件配置中，创建 role <code>my-app-role</code>，配置如下:</p>
<ol>
<li>关联 k8s default 名字空间中的 serviceaccount <code>my-app-account</code>，并创建好这个 serviceaccount.</li>
<li>关联 vault token policy，这就是前面创建的 <code>my-app-policy</code></li>
<li>设置 token period（有效期）</li>
</ol>
<p>这之后，每个微服务就能通过 serviceaccount 从 vault 中读取 <code>my-app</code> 中的所有信息了。</p>
<h3 id="3-部署-pod" class="headerLink">
    <a href="#3-%e9%83%a8%e7%bd%b2-pod" class="header-mark"></a>3. 部署 Pod</h3><blockquote>
<p>参考文档：<a href="https://www.vaultproject.io/docs/platform/k8s/injector" target="_blank" rel="noopener noreffer">https://www.vaultproject.io/docs/platform/k8s/injector</a></p>
</blockquote>
<p>下一步就是将配置注入到微服务容器中，这需要使用到 Agent Sidecar Injector。
vault 通过 sidecar 实现配置的自动注入与动态更新。</p>
<p>具体而言就是在 Pod 上加上一堆 Agent Sidecar Injector 的注解，如果配置比较多，也可以使用 configmap 保存，在注解中引用。</p>
<p>需要注意的是 vault-inject-agent 有两种运行模式：</p>
<ol>
<li>init 模式: 仅在 Pod 启动前初始化一次，跑完就退出（Completed）</li>
<li>常驻模式: 容器不退出，持续监控 vault 的配置更新，维持 Pod 配置和 vualt 配置的同步。</li>
</ol>
<p>示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">apps/v1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">Deployment</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">default</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">minReadySeconds</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">progressDeadlineSeconds</span><span class="p">:</span><span class="w"> </span><span class="m">60</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">revisionHistoryLimit</span><span class="p">:</span><span class="w"> </span><span class="m">3</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">strategy</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">rollingUpdate</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">maxUnavailable</span><span class="p">:</span><span class="w"> </span><span class="m">1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">type</span><span class="p">:</span><span class="w"> </span><span class="l">RollingUpdate</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">template</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">annotations</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">vault.hashicorp.com/agent-init-first</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">  </span><span class="c"># 是否使用 initContainer 提前初始化配置文件</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">vault.hashicorp.com/agent-inject</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;true&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">vault.hashicorp.com/secret-volume-path</span><span class="p">:</span><span class="w"> </span><span class="l">vault</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">vault.hashicorp.com/role</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;my-app-role&#34;</span><span class="w">  </span><span class="c"># vault kubernetes 插件的 role 名称</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">vault.hashicorp.com/agent-inject-template-config.json</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">          </span><span class="w">          </span><span class="c"># 渲染模板的语法在后面介绍</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">vault.hashicorp.com/agent-limits-cpu</span><span class="p">:</span><span class="w"> </span><span class="l">250m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">vault.hashicorp.com/agent-requests-cpu</span><span class="p">:</span><span class="w"> </span><span class="l">100m</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 包含 vault 配置的 configmap，可以做更精细的控制</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># vault.hashicorp.com/agent-configmap: my-app-vault-config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">labels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">app</span><span class="p">:</span><span class="w"> </span><span class="l">my-app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">containers</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">registry.svc.local/xx/my-app:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">imagePullPolicy</span><span class="p">:</span><span class="w"> </span><span class="l">IfNotPresent</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="c"># 此处省略若干配置...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">serviceAccountName</span><span class="p">:</span><span class="w"> </span><span class="l">my-app-account</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>常见错误：</p>
<ul>
<li>vault-agent(sidecar) 报错: <code>namespace not authorized</code>
<ul>
<li><code>auth/kubernetes/config</code> 中的 role 没有绑定 Pod 的 namespace</li>
</ul>
</li>
<li>vault-agent(sidecar) 报错: <code>permission denied</code>
<ul>
<li>检查 <code>vault</code> 实例的日志，应该有对应的错误日志，很可能是 <code>auth/kubernetes/config</code> 没配对，vault 无法验证 kube-apiserver 的 tls 证书，或者使用的 kubernetes token 没有权限。</li>
</ul>
</li>
<li>vault-agent(sidecar) 报错: <code>service account not authorized</code>
<ul>
<li><code>auth/kubernetes/config</code> 中的 role 没有绑定 Pod 使用的 serviceAccount</li>
</ul>
</li>
</ul>
<h3 id="4-vault-agent-配置" class="headerLink">
    <a href="#4-vault-agent-%e9%85%8d%e7%bd%ae" class="header-mark"></a>4. vault agent 配置</h3><p>vault-agent 的配置，需要注意的有：</p>
<ol>
<li>如果使用 configmap 提供完整的 <code>config.hcl</code> 配置，注意 <code>agent-init</code></li>
</ol>
<p>vautl-agent 的 template 说明：</p>
<p>目前来说最流行的配置文件格式应该是 json/yaml，以 json 为例，
对每个微服务的 kv 数据，可以考虑将它所有的个性化配置都保存在 <code>&lt;engine-name&gt;/&lt;service-name&gt;/</code> 下面，然后使用如下 template 注入配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">    {{ range secrets &#34;&lt;engine-name&gt;/metadata/&lt;service-name&gt;/&#34; }}
</span></span><span class="line"><span class="cl">        &#34;{{ printf &#34;%s&#34; . }}&#34;: 
</span></span><span class="line"><span class="cl">        {{ with secret (printf &#34;&lt;engine-name&gt;/&lt;service-name&gt;/%s&#34; .) }}
</span></span><span class="line"><span class="cl">        {{ .Data.data | toJSONPretty }},
</span></span><span class="line"><span class="cl">        {{ end }}
</span></span><span class="line"><span class="cl">    {{ end }}
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>template 的详细语法参见: <a href="https://github.com/hashicorp/consul-template#secret" target="_blank" rel="noopener noreffer">https://github.com/hashicorp/consul-template#secret</a></p>
</blockquote>
<blockquote>
<p>注意：v2 版本的 kv secrets，它的 list 接口有变更，因此在遍历 v2 kv secrets 时，
必须要写成 <code>range secrets &quot;&lt;engine-name&gt;/metadata/&lt;service-name&gt;/&quot;</code>，也就是中间要插入 <code>metadata</code>，而且 policy 中必须开放 <code>&lt;engine-name&gt;/metadata/&lt;service-name&gt;/</code> 的 read/list 权限！
官方文档完全没提到这一点，我通过 wireshark 抓包调试，对照官方的 <a href="https://www.vaultproject.io/api-docs/secret/kv/kv-v2" target="_blank" rel="noopener noreffer">KV Secrets Engine - Version 2 (API)</a> 才搞明白这个。</p>
</blockquote>
<p>这样生成出来的内容将是 json 格式，不过有个不兼容的地方：最后一个 secrets 的末尾有逗号 <code>,</code>
渲染出的效果示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-json" data-lang="json"><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;secret-a&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;a&#34;</span><span class="p">:</span> <span class="s2">&#34;b&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;c&#34;</span><span class="p">:</span> <span class="s2">&#34;d&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&#34;secret-b&#34;</span><span class="p">:</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;v&#34;</span><span class="p">:</span> <span class="s2">&#34;g&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="nt">&#34;r&#34;</span><span class="p">:</span> <span class="s2">&#34;c&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为存在尾部逗号(trailing comma)，直接使用 json 标准库解析它会报错。
那该如何去解析它呢？我在万能的 stackoverflow 上找到了解决方案：<strong>yaml 完全兼容 json 语法，并且支持尾部逗号！</strong></p>
<p>以 python 为例，直接 <code>yaml.safe_load()</code> 就能完美解析 vault 生成出的 json 内容。</p>
<h3 id="5-拓展在-kubernetes-中使用-vault-的其他姿势" class="headerLink">
    <a href="#5-%e6%8b%93%e5%b1%95%e5%9c%a8-kubernetes-%e4%b8%ad%e4%bd%bf%e7%94%a8-vault-%e7%9a%84%e5%85%b6%e4%bb%96%e5%a7%bf%e5%8a%bf" class="header-mark"></a>5. 拓展：在 kubernetes 中使用 vault 的其他姿势</h3><p>除了使用官方提供的 sidecar 模式进行 secrets 注入，社区也提供了一些别的方案，可以参考：</p>
<ul>
<li><a href="https://github.com/hashicorp/vault-csi-provider" target="_blank" rel="noopener noreffer">hashicorp/vault-csi-provider</a>: 官方的 Beta 项目，通过 Secrets Store CSI 驱动将 vault secrets 以数据卷的形式挂载到 pod 中</li>
<li><a href="https://github.com/external-secrets/kubernetes-external-secrets" target="_blank" rel="noopener noreffer">kubernetes-external-secrets</a>: 提供 CRD 定义，根据定义将 secret 从 vault 中同步到 kubernetes secrets</li>
</ul>
<p>官方的 sidecar/init-container 模式仍然是最推荐使用的。</p>
<h2 id="五使用-vault-实现-aws-iam-credentials-的自动轮转" class="headerLink">
    <a href="#%e4%ba%94%e4%bd%bf%e7%94%a8-vault-%e5%ae%9e%e7%8e%b0-aws-iam-credentials-%e7%9a%84%e8%87%aa%e5%8a%a8%e8%bd%ae%e8%bd%ac" class="header-mark"></a>五、使用 vault 实现 AWS IAM Credentials 的自动轮转</h2><p>待续。。。</p>
]]></content></entry><entry><title type="html">QEMU-KVM 虚拟化环境的搭建与使用</title><link href="https://thiscute.world/posts/qemu-kvm-usage/"/><id>https://thiscute.world/posts/qemu-kvm-usage/</id><author><name>ryan4yin</name></author><published>2021-01-17T21:34:04+08:00</published><updated>2021-01-17T21:34:04+08:00</updated><content type="html"><![CDATA[<h2 id="qemukvm-虚拟化" class="headerLink">
    <a href="#qemukvm-%e8%99%9a%e6%8b%9f%e5%8c%96" class="header-mark"></a>QEMU/KVM 虚拟化</h2><p>QEMU/KVM 是目前最流行的虚拟化技术，它基于 Linux 内核提供的 kvm 模块，结构精简，性能损失小，而且开源免费（对比收费的 vmware），因此成了大部分企业的首选虚拟化方案。</p>
<p>目前各大云厂商的虚拟化方案，新的服务器实例基本都是用的 KVM 技术。即使是起步最早，一直重度使用 Xen 的 AWS，从 EC2 C5 开始就改用了基于 KVM 定制的 Nitro 虚拟化技术。</p>
<p>但是 KVM 作为一个企业级的底层虚拟化技术，却没有对桌面使用做深入的优化，因此如果想把它当成桌面虚拟化软件来使用，替代掉 VirtualBox/VMware，有一定难度。</p>
<p>本文是我个人学习 KVM 的一个总结性文档，其目标是使用 KVM 作为桌面虚拟化软件。</p>
<h2 id="一安装-queukvm" class="headerLink">
    <a href="#%e4%b8%80%e5%ae%89%e8%a3%85-queukvm" class="header-mark"></a>一、安装 QUEU/KVM</h2><p>QEMU/KVM 环境需要安装很多的组件，它们各司其职：</p>
<ol>
<li>qemu: 模拟各类输入输出设备（网卡、磁盘、USB端口等）
<ul>
<li>qemu 底层使用 kvm 模拟 CPU 和 RAM，比软件模拟的方式快很多。</li>
</ul>
</li>
<li>libvirt: 提供简单且统一的工具和 API，用于管理虚拟机，屏蔽了底层的复杂结构。（支持 qemu-kvm/virtualbox/vmware）</li>
<li>ovmf: 为虚拟机启用 UEFI 支持</li>
<li>virt-manager: 用于管理虚拟机的 GUI 界面（可以管理远程 kvm 主机）。</li>
<li>virt-viewer: 通过 GUI 界面直接与虚拟机交互（可以管理远程 kvm 主机）。</li>
<li>dnsmasq vde2 bridge-utils openbsd-netcat: 网络相关组件，提供了以太网虚拟化、网络桥接、NAT网络等虚拟网络功能。
<ul>
<li>dnsmasq 提供了 NAT 虚拟网络的 DHCP 及 DNS 解析功能。</li>
<li>vde2: 以太网虚拟化</li>
<li>bridge-utils: 顾名思义，提供网络桥接相关的工具。</li>
<li>openbsd-netcat: TCP/IP 的瑞士军刀，详见 <a href="https://thiscute.world/posts/socat-netcat/" rel="">socat &amp; netcat</a>，这里不清楚是哪个网络组件会用到它。</li>
</ul>
</li>
</ol>
<p>安装命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># archlinux/manjaro</span>
</span></span><span class="line"><span class="cl">sudo pacman -S qemu virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ubuntu,参考了官方文档，但未测试</span>
</span></span><span class="line"><span class="cl">sudo apt install qemu-kvm libvirt-daemon-system virt-manager virt-viewer virtinst bridge-utils
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># centos,参考了官方文档，但未测试</span>
</span></span><span class="line"><span class="cl">sudo yum groupinstall <span class="s2">&#34;Virtualization Host&#34;</span>
</span></span><span class="line"><span class="cl">sudo yum install virt-manager virt-viewer virt-install
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># opensuse</span>
</span></span><span class="line"><span class="cl"><span class="c1"># see: https://doc.opensuse.org/documentation/leap/virtualization/html/book-virt/cha-vt-installation.html</span>
</span></span><span class="line"><span class="cl">sudo yast2 virtualization
</span></span><span class="line"><span class="cl"><span class="c1"># enter to terminal ui, select kvm + kvm tools, and then install it.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>安装完成后，还不能直接使用，需要做些额外的工作。请继续往下走。</p>
<h3 id="1-libguestfs---虚拟机磁盘映像处理工具" class="headerLink">
    <a href="#1-libguestfs---%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%a3%81%e7%9b%98%e6%98%a0%e5%83%8f%e5%a4%84%e7%90%86%e5%b7%a5%e5%85%b7" class="header-mark"></a>1. libguestfs - 虚拟机磁盘映像处理工具</h3><p><a href="https://libguestfs.org/" target="_blank" rel="noopener noreffer">libguestfs</a> 是一个虚拟机磁盘映像处理工具，可用于直接修改/查看/虚拟机映像、转换映像格式等。</p>
<p>它提供的命令列表如下：</p>
<ol>
<li><code>virt-df centos.img</code>: 查看硬盘使用情况</li>
<li><code>virt-ls centos.img /</code>: 列出目录文件</li>
<li><code>virt-copy-out -d domain /etc/passwd /tmp</code>：在虚拟映像中执行文件复制</li>
<li><code>virt-list-filesystems /file/xx.img</code>：查看文件系统信息</li>
<li><code>virt-list-partitions /file/xx.img</code>：查看分区信息</li>
<li><code>guestmount -a /file/xx.qcow2(raw/qcow2都支持) -m /dev/VolGroup/lv_root --rw /mnt</code>：直接将分区挂载到宿主机</li>
<li><code>guestfish</code>: 交互式 shell，可运行上述所有命令。</li>
<li><code>virt-v2v</code>: 将其他格式的虚拟机(比如 ova) 转换成 kvm 虚拟机。</li>
<li><code>virt-p2v</code>: 将一台物理机转换成虚拟机。</li>
</ol>
<p>学习过程中可能会使用到上述命令，提前安装好总不会有错，安装命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># opensuse</span>
</span></span><span class="line"><span class="cl">sudo zypper install libguestfs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># archlinux/manjaro，目前缺少 virt-v2v/virt-p2v 组件</span>
</span></span><span class="line"><span class="cl">sudo pacman -S libguestfs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># ubuntu</span>
</span></span><span class="line"><span class="cl">sudo apt install libguestfs-tools
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># centos</span>
</span></span><span class="line"><span class="cl">sudo yum install libguestfs-tools
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-启动-qemukvm" class="headerLink">
    <a href="#2-%e5%90%af%e5%8a%a8-qemukvm" class="header-mark"></a>2. 启动 QEMU/KVM</h3><p>通过 systemd 启动 libvirtd 后台服务：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> libvirtd.service
</span></span><span class="line"><span class="cl">sudo systemctl start libvirtd.service
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-让非-root-用户能正常使用-kvm" class="headerLink">
    <a href="#3-%e8%ae%a9%e9%9d%9e-root-%e7%94%a8%e6%88%b7%e8%83%bd%e6%ad%a3%e5%b8%b8%e4%bd%bf%e7%94%a8-kvm" class="header-mark"></a>3. 让非 root 用户能正常使用 kvm</h3><p>qumu/kvm 装好后，默认情况下需要 root 权限才能正常使用它。
为了方便使用，首先编辑文件 <code>/etc/libvirt/libvirtd.conf</code>:</p>
<ol>
<li><code>unix_sock_group = &quot;libvirt&quot;</code>，取消这一行的注释，使 <code>libvirt</code> 用户组能使用 unix 套接字。</li>
<li><code>unix_sock_rw_perms = &quot;0770&quot;</code>，取消这一行的注释，使用户能读写 unix 套接字。</li>
</ol>
<p>然后新建 libvirt 用户组，将当前用户加入该组：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">newgrp libvirt
</span></span><span class="line"><span class="cl">sudo usermod -aG libvirt <span class="nv">$USER</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>最后重启 libvirtd 服务，应该就能正常使用了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo systemctl restart libvirtd.service
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-启用嵌套虚拟化" class="headerLink">
    <a href="#3-%e5%90%af%e7%94%a8%e5%b5%8c%e5%a5%97%e8%99%9a%e6%8b%9f%e5%8c%96" class="header-mark"></a>3. 启用嵌套虚拟化</h3><p>如果你需要<strong>在虚拟机中运行虚拟机</strong>（比如在虚拟机里测试 katacontainers 等安全容器技术），那就需要启用内核模块 kvm_intel 实现嵌套虚拟化。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 临时启用 kvm_intel 嵌套虚拟化</span>
</span></span><span class="line"><span class="cl">sudo modprobe -r kvm_intel
</span></span><span class="line"><span class="cl">sudo modprobe kvm_intel <span class="nv">nested</span><span class="o">=</span><span class="m">1</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 修改配置，永久启用嵌套虚拟化</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;options kvm-intel nested=1&#34;</span> <span class="p">|</span> sudo tee /etc/modprobe.d/kvm-intel.conf
</span></span></code></pre></td></tr></table>
</div>
</div><p>验证嵌套虚拟化已经启用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ cat /sys/module/kvm_intel/parameters/nested 
</span></span><span class="line"><span class="cl">Y
</span></span></code></pre></td></tr></table>
</div>
</div><p>至此，KVM 的安装就大功告成啦，现在应该可以在系统中找到 virt-manager 的图标，进去就可以使用了。
virt-manager 的使用方法和 virtualbox/vmware workstation 大同小异，这里就不详细介绍了，自己摸索摸索应该就会了。</p>
<hr>
<blockquote>
<p>如下内容是进阶篇，主要介绍如何通过命令行来管理虚拟机磁盘，以及 KVM。
如果你还是 kvm 新手，建议先通过图形界面 virt-manager 熟悉熟悉，再往下继续读。</p>
</blockquote>
<h2 id="二虚拟机磁盘映像管理" class="headerLink">
    <a href="#%e4%ba%8c%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%a3%81%e7%9b%98%e6%98%a0%e5%83%8f%e7%ae%a1%e7%90%86" class="header-mark"></a>二、虚拟机磁盘映像管理</h2><p>这需要用到两个工具：</p>
<ol>
<li>libguestfs: 虚拟机磁盘映像管理工具，前面介绍过了</li>
<li>qemu-img: qemu 的磁盘映像管理工具，用于创建磁盘、扩缩容磁盘、生成磁盘快照、查看磁盘信息、转换磁盘格式等等。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 创建磁盘</span>
</span></span><span class="line"><span class="cl">qemu-img create -f qcow2 -o <span class="nv">cluster_size</span><span class="o">=</span>128K virt_disk.qcow2 20G
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 扩容磁盘</span>
</span></span><span class="line"><span class="cl">qemu-img resize ubuntu-server-cloudimg-amd64.img 30G
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看磁盘信息</span>
</span></span><span class="line"><span class="cl">qemu-img info ubuntu-server-cloudimg-amd64.img
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 转换磁盘格式</span>
</span></span><span class="line"><span class="cl">qemu-img convert -f raw -O qcow2 vm01.img vm01.qcow2  <span class="c1"># raw =&gt; qcow2</span>
</span></span><span class="line"><span class="cl">qemu-img convert -f qcow2 -O raw vm01.qcow2 vm01.img  <span class="c1"># qcow2 =&gt; raw</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="1-导入-vmware-镜像" class="headerLink">
    <a href="#1-%e5%af%bc%e5%85%a5-vmware-%e9%95%9c%e5%83%8f" class="header-mark"></a>1. 导入 vmware 镜像</h3><p>直接从 vmware ova 文件导入 kvm，这种方式转换得到的镜像应该能直接用（网卡需要重新配置）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">virt-v2v -i ova centos7-test01.ova -o <span class="nb">local</span> -os /vmhost/centos7-01  -of qcow2
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以先从 ova 中解压出 vmdk 磁盘映像，将 vmware 的  vmdk 文件转换成 qcow2 格式，然后再导入 kvm（网卡需要重新配置）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 转换映像格式</span>
</span></span><span class="line"><span class="cl">qemu-img convert -p -f vmdk -O qcow2 centos7-test01-disk1.vmdk centos7-test01.qcow2
</span></span><span class="line"><span class="cl"><span class="c1"># 查看转换后的映像信息</span>
</span></span><span class="line"><span class="cl">qemu-img info centos7-test01.qcow2
</span></span></code></pre></td></tr></table>
</div>
</div><p>直接转换 vmdk 文件得到的 qcow2 镜像，启会报错，比如「磁盘无法挂载」。
根据 <a href="https://pve.proxmox.com/pve-docs/chapter-qm.html#_importing_virtual_machines_and_disk_images" target="_blank" rel="noopener noreffer">Importing Virtual Machines and disk images - ProxmoxVE Docs</a> 文档所言，需要在网上下载安装 MergeIDE.zip 组件，
另外启动虚拟机前，需要将硬盘类型改为 IDE，才能解决这个问题。</p>
<h3 id="2-导入-img-镜像" class="headerLink">
    <a href="#2-%e5%af%bc%e5%85%a5-img-%e9%95%9c%e5%83%8f" class="header-mark"></a>2. 导入 img 镜像</h3><p>img 镜像文件，就是所谓的 raw 格式镜像，也被称为裸镜像，IO 速度比 qcow2 快，但是体积大，而且不支持快照等高级特性。
如果不追求 IO 性能的话，建议将它转换成 qcow2 再使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">qemu-img convert -f raw -O qcow2 vm01.img vm01.qcow2
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三虚拟机管理" class="headerLink">
    <a href="#%e4%b8%89%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%ae%a1%e7%90%86" class="header-mark"></a>三、虚拟机管理</h2><p>虚拟机管理可以使用命令行工具 <code>virsh</code>/<code>virt-install</code>，也可以使用 GUI 工具 <code>virt-manager</code>.</p>
<p>GUI 很傻瓜式，就不介绍了，这里主要介绍命令行工具 <code>virsh</code>/<code>virt-install</code></p>
<p>先介绍下 libvirt 中的几个概念：</p>
<ol>
<li>Domain: 指代运行在虚拟机器上的操作系统的实例 - 一个虚拟机，或者用于启动虚拟机的配置。</li>
<li>Guest OS: 运行在 domain 中的虚拟操作系统。</li>
</ol>
<p>大部分情况下，你都可以把下面命令中涉及到的 <code>domain</code> 理解成虚拟机。</p>
<h3 id="0-设置默认-uri" class="headerLink">
    <a href="#0-%e8%ae%be%e7%bd%ae%e9%bb%98%e8%ae%a4-uri" class="header-mark"></a>0. 设置默认 URI</h3><p><code>virsh</code>/<code>virt-install</code>/<code>virt-viewer</code> 等一系列 libvirt 命令，sudo virsh net-list &ndash;all
默认情况下会使用 <code>qemu:///session</code> 作为 URI 去连接 QEMU/KVM，只有 root 账号才会默认使用 <code>qemu:///system</code>.</p>
<p>另一方面 <code>virt-manager</code> 这个 GUI 工具，默认也会使用 <code>qemu:///system</code> 去连接 QEMU/KVM（和 root 账号一致）</p>
<p><code>qemu:///system</code> 是系统全局的 qemu 环境，而 <code>qemu:///session</code> 的环境是按用户隔离的。
另外 <code>qemu:///session</code> 没有默认的 <code>network</code>，创建虚拟机时会出毛病。。。</p>
<p>因此，你需要将默认的 URI 改为 <code>qemu:///system</code>，否则绝对会被坑:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;export LIBVIRT_DEFAULT_URI=&#34;qemu:///system&#34;&#39;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="1-虚拟机网络" class="headerLink">
    <a href="#1-%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%bd%91%e7%bb%9c" class="header-mark"></a>1. 虚拟机网络</h3><p>qemu-kvm 安装完成后，<code>qemu:///system</code> 环境中默认会创建一个 <code>default</code> 网络，而 <code>qemu:///session</code> 不提供默认的网络，需要手动创建。</p>
<p>我们通常使用 <code>qemu:///system</code> 环境就好，可以使用如下方法查看并启动 default 网络，这样后面创建虚拟机时才有网络可用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 列出所有虚拟机网络</span>
</span></span><span class="line"><span class="cl">$ sudo virsh net-list --all
</span></span><span class="line"><span class="cl"> Name      State      Autostart   Persistent
</span></span><span class="line"><span class="cl">----------------------------------------------
</span></span><span class="line"><span class="cl"> default   inactive   no          yes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启动默认网络</span>
</span></span><span class="line"><span class="cl">$ virsh net-start default
</span></span><span class="line"><span class="cl">Network default started
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 将 default 网络设为自启动</span>
</span></span><span class="line"><span class="cl">$ virsh net-autostart --network default
</span></span><span class="line"><span class="cl">Network default marked as autostarted
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 再次检查网络状况，已经是 active 了</span>
</span></span><span class="line"><span class="cl">$ sudo virsh net-list --all
</span></span><span class="line"><span class="cl"> Name      State    Autostart   Persistent
</span></span><span class="line"><span class="cl">--------------------------------------------
</span></span><span class="line"><span class="cl"> default   active   yes         yes
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以创建新的虚拟机网络，这需要手动编写网络的 xml 配置，然后通过 <code>virsh net-define --file my-network.xml</code> 创建，这里就不详细介绍了，因为暂时用不到&hellip;</p>
<h3 id="2-创建虚拟机---virt-intall" class="headerLink">
    <a href="#2-%e5%88%9b%e5%bb%ba%e8%99%9a%e6%8b%9f%e6%9c%ba---virt-intall" class="header-mark"></a>2. 创建虚拟机 - virt-intall</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 使用 iso 镜像创建全新的 proxmox 虚拟机，自动创建一个 60G 的磁盘。</span>
</span></span><span class="line"><span class="cl">virt-install --virt-type kvm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--name pve-1 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--vcpus <span class="m">4</span> --memory <span class="m">8096</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--disk <span class="nv">size</span><span class="o">=</span><span class="m">60</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--network <span class="nv">network</span><span class="o">=</span>default,model<span class="o">=</span>virtio <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--os-type linux <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--os-variant generic <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--graphics vnc <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--cdrom proxmox-ve_6.3-1.iso
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用已存在的 opensuse cloud 磁盘创建虚拟机</span>
</span></span><span class="line"><span class="cl">virt-install --virt-type kvm <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --name opensuse15-2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --vcpus <span class="m">2</span> --memory <span class="m">2048</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --disk opensuse15.2-openstack.qcow2,device<span class="o">=</span>disk,bus<span class="o">=</span>virtio <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --disk seed.iso,device<span class="o">=</span>cdrom <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --os-type linux <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --os-variant opensuse15.2 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --network <span class="nv">network</span><span class="o">=</span>default,model<span class="o">=</span>virtio <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --graphics vnc <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>  --import
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中的 <code>--os-variant</code> 用于设定 OS 相关的优化配置，官方文档<strong>强烈推荐</strong>设定，其可选参数可以通过 <code>osinfo-query os</code> 查看。</p>
<h3 id="3-虚拟机管理---virsh" class="headerLink">
    <a href="#3-%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%ae%a1%e7%90%86---virsh" class="header-mark"></a>3. 虚拟机管理 - virsh</h3><p>虚拟机创建好后，可使用 virsh 管理虚拟机：</p>
<p>查看虚拟机列表：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 查看正在运行的虚拟机
</span></span><span class="line"><span class="cl">virsh list
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 查看所有虚拟机，包括 inactive 的虚拟机
</span></span><span class="line"><span class="cl">virsh list --all
</span></span></code></pre></td></tr></table>
</div>
</div><p>使用 <code>virt-viewer</code> 以 vnc 协议登入虚拟机终端：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 使用虚拟机 ID 连接</span>
</span></span><span class="line"><span class="cl">virt-viewer <span class="m">8</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 使用虚拟机名称连接，并且等待虚拟机启动</span>
</span></span><span class="line"><span class="cl">virt-viewer --wait opensuse15
</span></span></code></pre></td></tr></table>
</div>
</div><p>启动、关闭、暂停(休眠)、重启虚拟机：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">virsh start opensuse15
</span></span><span class="line"><span class="cl">virsh suuspend opensuse15
</span></span><span class="line"><span class="cl">virsh resume opensuse15
</span></span><span class="line"><span class="cl">virsh reboot opensuse15
</span></span><span class="line"><span class="cl"><span class="c1"># 优雅关机</span>
</span></span><span class="line"><span class="cl">virsh shutdown opensuse15
</span></span><span class="line"><span class="cl"><span class="c1"># 强制关机</span>
</span></span><span class="line"><span class="cl">virsh destroy opensuse15
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 启用自动开机</span>
</span></span><span class="line"><span class="cl">virsh autostart opensuse15
</span></span><span class="line"><span class="cl"><span class="c1"># 禁用自动开机</span>
</span></span><span class="line"><span class="cl">virsh autostart --disable opensuse15
</span></span></code></pre></td></tr></table>
</div>
</div><p>虚拟机快照管理：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 列出一个虚拟机的所有快照</span>
</span></span><span class="line"><span class="cl">virsh snapshot-list --domain opensuse15
</span></span><span class="line"><span class="cl"><span class="c1"># 给某个虚拟机生成一个新快照</span>
</span></span><span class="line"><span class="cl">virsh snapshot-create &lt;domain&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 使用快照将虚拟机还原</span>
</span></span><span class="line"><span class="cl">virsh snapshot-restore &lt;domain&gt; &lt;snapshotname&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 删除快照</span>
</span></span><span class="line"><span class="cl">virsh snapshot-delete &lt;domain&gt; &lt;snapshotname&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>删除虚拟机：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">virsh undefine opensuse15
</span></span></code></pre></td></tr></table>
</div>
</div><p>迁移虚拟机：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 使用默认参数进行离线迁移，将已关机的服务器迁移到另一个 qemu 实例</span>
</span></span><span class="line"><span class="cl">virsh migrate <span class="m">37</span> qemu+ssh://tux@jupiter.example.com/system
</span></span><span class="line"><span class="cl"><span class="c1"># 还支持在线实时迁移，待续</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>cpu/内存修改：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 改成 4 核</span>
</span></span><span class="line"><span class="cl">virsh setvcpus opensuse15 <span class="m">4</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 改成 4G</span>
</span></span><span class="line"><span class="cl">virsh setmem opensuse15 <span class="m">4096</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>虚拟机监控：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 待续</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>修改磁盘、网络及其他设备：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 添加新设备</span>
</span></span><span class="line"><span class="cl">virsh attach-device
</span></span><span class="line"><span class="cl">virsh attach-disk
</span></span><span class="line"><span class="cl">virsh attach-interface
</span></span><span class="line"><span class="cl"><span class="c1"># 删除设备</span>
</span></span><span class="line"><span class="cl">virsh detach-disk
</span></span><span class="line"><span class="cl">virsh detach-device
</span></span><span class="line"><span class="cl">virsh detach-interface
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://doc.opensuse.org/documentation/leap/virtualization/html/book-virt/index.html" target="_blank" rel="noopener noreffer">Virtualization Guide - OpenSUSE</a></li>
<li><a href="https://computingforgeeks.com/complete-installation-of-kvmqemu-and-virt-manager-on-arch-linux-and-manjaro/" target="_blank" rel="noopener noreffer">Complete Installation of KVM, QEMU and Virt Manager on Arch Linux and Manjaro</a></li>
<li><a href="https://ubuntu.com/server/docs/virtualization-libvirt" target="_blank" rel="noopener noreffer">virtualization-libvirt - ubuntu docs</a></li>
<li><a href="https://developers.redhat.com/products/rhel/hello-world#fndtn-kvm" target="_blank" rel="noopener noreffer">RedHat Docs - KVM</a></li>
</ul>]]></content></entry><entry><title type="html">关于</title><link href="https://thiscute.world/about/"/><id>https://thiscute.world/about/</id><author><name>ryan4yin</name></author><published>2021-01-16T00:24:31+08:00</published><updated>2021-01-16T00:24:31+08:00</updated><content type="html"><![CDATA[<p><img
        class="lazyload"
        data-src="harmonica.webp"
        data-srcset="/about/harmonica.webp, harmonica.webp 1.5x, /about/harmonica.webp 2x"
        data-sizes="auto"
        alt="/about/harmonica.webp"
        title="口琴"></p>
<blockquote>
<p>本站的文章可能以<a href="https://thiscute.world/zh-cn/" target="_blank" rel="noopener noreffer">中文</a>或<a href="https://thiscute.world/en/" target="_blank" rel="noopener noreffer">英文</a>两种语言书写，其中部分文章可能是双语，也有部分文章只有<a href="https://thiscute.world/zh-cn/" target="_blank" rel="noopener noreffer">中文</a>或者<a href="https://thiscute.world/en/" target="_blank" rel="noopener noreffer">英文</a>版本，请读者按需阅读。</p>
</blockquote>
<blockquote>
<p>The articles on this site may be written in <a href="https://thiscute.world/zh-cn/" target="_blank" rel="noopener noreffer">Chinese</a> or <a href="https://thiscute.world/en/" target="_blank" rel="noopener noreffer">English</a>, some of them may be bilingual, and some of them are only available in <a href="https://thiscute.world/zh-cn/" target="_blank" rel="noopener noreffer">Chinese</a> or <a href="https://thiscute.world/en/" target="_blank" rel="noopener noreffer">English</a>. Please read them as needed.</p>
</blockquote>
<h2 id="关于我" class="headerLink">
    <a href="#%e5%85%b3%e4%ba%8e%e6%88%91" class="header-mark"></a>关于我</h2><blockquote>
<p>有很多的绝望，但也有美的时刻，只不过在美的时刻，时间是不同于以往的。 ──《刺猬的优雅》</p>
</blockquote>
<ul>
<li><strong>昵称</strong>：中文昵称「<strong>於清樂</strong>」「<strong>二花</strong>」，英文 ID「<strong>ryan4yin</strong>」「<strong>ryan_yin</strong>」</li>
<li><strong>性别</strong>：He/Him/他，异性恋</li>
<li><strong>工作与学习经历</strong>
<ul>
<li><strong>2012-6 ~ 2015-6</strong>：在（湖南邵阳）武冈一中读高中</li>
<li><strong>2015-6 ~ 2019-6</strong>：在安徽建筑大学读声学专业，没错就是初中物理课上敲音叉的那个声学（不是音乐&hellip;）。本人专业知识战五渣，学位证都没拿到 emmm</li>
<li><strong>2019-6 ~ 2021-2</strong>：在某不知名创业公司做全能运维（全干工程师），上至搭建阿里云生产环境、搞 Kubernetes 集群、Istio 服务网格、CICD、性能测试，下至搞洋垃圾戴尔服务器与 vSphere、装水管、修门禁、扫地拖地、当苦力搬运货物，反正没人干的就运维干呗</li>
<li><strong>2021-3 ~ 至今</strong>：在 Mobiuspace 担任 SRE 工程师，主要负责维护与优化 K8s 服务平台及流量链路，分析与管控 AWS/GCP/Tencent 云计算成本</li>
</ul>
</li>
<li><strong>音乐</strong>：
<ul>
<li>喜欢听后摇、蓝草、民谣、器乐</li>
<li>最喜欢的歌手是虚拟歌手洛天依</li>
<li>有在断断续续地学习竹笛跟口琴（复音、蓝调都有在学），另外也有在学习使用 <a href="https://dreamtonics.com/en/synthesizerv/" target="_blank" rel="noopener noreffer">Synthesizer V</a>/<a href="https://space.bilibili.com/418030" target="_blank" rel="noopener noreffer">ACE</a> 跟 <a href="https://www.reaper.fm" target="_blank" rel="noopener noreffer">Reaper</a></li>
</ul>
</li>
<li><strong>运动</strong>：喜欢轮滑以及游泳，哦还有 VR 游戏《Beat Saber》《Pistol Whip》，但是目前都是半吊子哈哈~</li>
<li><strong>茶</strong>：2021 年在朋友家喝过一次<strong>青钱柳</strong>后就一直念念不忘，年底就入坑了凤牌滇红、天之红祁门红茶、极白安吉白茶，目前比较喜欢喝红茶</li>
<li><strong>书籍</strong>：读得最多的正经书是 IT 技术书籍，另外也喜欢看科幻，以及戒不掉的网文/轻小说</li>
<li><strong>影视</strong>：看得最多的是动漫，另外就是欧美科幻片、温情片</li>
<li><strong>中文输入方案</strong>：<a href="https://flypy.com/" target="_blank" rel="noopener noreffer">小鹤音形</a></li>
<li><strong>自然语言</strong>
<ul>
<li><strong>English</strong>: Good at reading technical articles, but weak in writing, listening and speaking</li>
<li><strong>中文</strong>：母语，高中语文中等水准。希望能学会用中文写小说，就先从短篇开始吧</li>
</ul>
</li>
<li><strong>编程语言</strong>
<ul>
<li><strong>Python</strong>: 目前的主力，也是我最熟悉的语言</li>
<li><strong>Go</strong>: 学习中，云原生圈子里最流行的语言</li>
<li><strong>Rust</strong>: 学习中，大量函数式的语法糖，贴心的编译器提示，感觉很好用</li>
<li><strong>C</strong>: 勉强能看懂代码，荒废比较久了。在学习 Nginx/Linux 的过程中慢慢补吧&hellip;</li>
<li>曾经使用过但已经荒废的语言：Java/Julia/Mathematica/Lua</li>
</ul>
</li>
<li><strong>熟悉的技术</strong>：
<ul>
<li>Kubernetes</li>
<li>Istio</li>
<li>Linux</li>
</ul>
</li>
<li><strong>想学的技术（按感兴趣程度降序排列，想学的太多，学会的太少）</strong>
<ul>
<li>Linux 内核技术、eBPF</li>
<li>Kubernetes/Istio/Nginx 源码</li>
<li>机器学习、深度学习</li>
<li>区块链</li>
<li>3D 建模与渲染</li>
<li>Reaper 编曲、ACE/SynthV 调教</li>
<li>蓝调口琴、竹笛、键盘</li>
</ul>
</li>
<li><strong>联系方式</strong>
<ul>
<li>邮件：<code>eWVzIG15IGVtYWlsIGlzIHhpYW95aW5fY0BxcS5jb20K</code></li>
<li><a href="https://www.douban.com/people/kirito_c" target="_blank" rel="noopener noreffer">豆瓣</a>：本人是豆瓣书影音标记的重度使用者，从 2015 年以来一直使用豆瓣标记读过的书看过的电影。</li>
<li><a href="https://twitter.com/ryan4yin" target="_blank" rel="noopener noreffer">Twitter</a>: 自 2021 年起在 Twitter 上发布一些生活动态与技术内容，同时也很喜欢看 Twitter 上各位画手大触的作品。是我日常消遣与接触碎片化信息的重要渠道之一。</li>
<li><a href="https://space.bilibili.com/12278805" target="_blank" rel="noopener noreffer">Bilibili</a>: 日常用 Bilibili 消遣，日常喜欢看 MMD 舞蹈、虚拟歌姬、硬核技术相关内容。</li>
<li><a href="https://github.com/ryan4yin/thiscute.world/issues" target="_blank" rel="noopener noreffer">Github Issues</a>: 也可以考虑直接在此仓库的 Issue 区联系我，我在 Github 上还挺活跃的，一般不会漏消息。</li>
</ul>
</li>
</ul>
<h2 id="关于此博客" class="headerLink">
    <a href="#%e5%85%b3%e4%ba%8e%e6%ad%a4%e5%8d%9a%e5%ae%a2" class="header-mark"></a>关于此博客</h2><blockquote>
<p>“对我来说，博客首先是一种知识管理工具，其次才是传播工具。我的技术文章，主要用来整理我还不懂的知识。我只写那些我还没有完全掌握的东西，那些我精通的东西，往往没有动力写。炫耀从来不是我的动机，好奇才是。&quot;   ──阮一峰</p>
</blockquote>
<h3 id="博客内容" class="headerLink">
    <a href="#%e5%8d%9a%e5%ae%a2%e5%86%85%e5%ae%b9" class="header-mark"></a>博客内容</h3><p>2020 年及之前的技术文章，都搬运自我的博客园 <a href="https://www.cnblogs.com/kirito-c/" target="_blank" rel="noopener noreffer">https://www.cnblogs.com/kirito-c/</a>。</p>
<p>2021 年开始的技术内容，大都来自我的个人笔记 <a href="https://github.com/ryan4yin/knowledge" target="_blank" rel="noopener noreffer">ryan4yin/knowledge</a>，我会不定期从这个笔记中找些有意思的内容，整理润色后，拿出来和大家分享，同时查漏补缺。</p>
<p>而另一部分生活类的随笔，则是我的闲言碎语，许多都来自我的印象笔记。</p>
<h3 id="我曾用过的箴言" class="headerLink">
    <a href="#%e6%88%91%e6%9b%be%e7%94%a8%e8%bf%87%e7%9a%84%e7%ae%b4%e8%a8%80" class="header-mark"></a>我曾用过的箴言</h3><p>这些箴言曾经陪伴我与这个博客度过了许多春夏秋冬，它们都曾在某个时期给过我力量，每每看到都令人怀念。
在这里也将它们送给各位读者，希望它们也能给你以力量！</p>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>2021-02-06 ~ 2022-01-03<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">拆破玉笼飞彩凤，顿开金锁走蛟龙。</div>
        </div>
    </div>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>2021-01-16 - 2022-04-04<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">双手合十 闭上眼睛 心里什么也不去想 嘴角就高高扬起 笑出声来 赞美快乐~</div>
        </div>
    </div>
<div class="details admonition note open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-pencil-alt fa-fw"></i>2022-04-04 ~ now<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">我错过花，却看见海。</div>
        </div>
    </div>
<h3 id="博客时间线" class="headerLink">
    <a href="#%e5%8d%9a%e5%ae%a2%e6%97%b6%e9%97%b4%e7%ba%bf" class="header-mark"></a>博客时间线</h3><div class="details admonition tip open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>博客时间线<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><ul>
<li>2016-06-17：大一下学期，在博客园创建博客 <a href="https://www.cnblogs.com/kirito-c/" target="_blank" rel="noopener noreffer">https://www.cnblogs.com/kirito-c/</a>
<ul>
<li>第一篇博文是<a href="https://www.cnblogs.com/kirito-c/p/5595355.html" target="_blank" rel="noopener noreffer">贪吃蛇—C—基于easyx图形库</a>，现在还能回忆起收到第一条评论时的兴奋之情。</li>
</ul>
</li>
<li>2021-01-16：工作一年多后，申请域名并开设独立博客 <a href="https://ryan4yin.space/" target="_blank" rel="noopener noreffer">https://ryan4yin.space/</a></li>
<li>2022-01-28：站点从 Cloudflare + Github Gages 迁移到 Vercel，速度有一定提升。</li>
<li>2022-02-07：第一份工作结束后赋闲，将博客主域名切换为 <a href="https://thiscute.world/" target="_blank" rel="noopener noreffer">https://thiscute.world/</a>，另外新增备用域名 <a href="https://writefor.fun" target="_blank" rel="noopener noreffer">https://writefor.fun</a></li>
<li>2022-02-07：本站添加「阅读排行」页，展示从 Google Analytics 拉取的站点统计数据。</li>
<li>2022-02-16：本站通过十年之约审核，正式加入<a href="https://foreverblog.cn/" target="_blank" rel="noopener noreffer">十年之约</a></li>
<li>2022-08-12：本站架构升级为 Azure Front Door + Vercel，发现 Azure Front Door 的加速效果确实对得起它的价格（免费试用一个月，后面考虑换成更便宜的 Azure CDN + Azure Blob Storage）。</li>
</ul>
</div>
        </div>
    </div>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>博客快照-2020-01-21<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><figure><a class="lightgallery" href="/images/about/cnblog-2020-01-21.webp" title="/images/about/cnblog-2020-01-21.webp" data-thumbnail="/images/about/cnblog-2020-01-21.webp" data-sub-html="<h2>博客园快照</h2>">
        <img
            class="lazyload"
            data-src="/images/about/cnblog-2020-01-21.webp"
            data-srcset="/images/about/cnblog-2020-01-21.webp, /images/about/cnblog-2020-01-21.webp 1.5x, /images/about/cnblog-2020-01-21.webp 2x"
            data-sizes="auto"
            alt="/images/about/cnblog-2020-01-21.webp">
    </a><figcaption class="image-caption">博客园快照</figcaption>
    </figure></div>
        </div>
    </div>
<div class="details admonition info open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-info-circle fa-fw"></i>博客快照-2022-07-31<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content"><figure><a class="lightgallery" href="/images/about/thiscute.world-2022-07-31.webp" title="/images/about/thiscute.world-2022-07-31.webp" data-thumbnail="/images/about/thiscute.world-2022-07-31.webp" data-sub-html="<h2>ThisCute.World 快照</h2>">
        <img
            class="lazyload"
            data-src="/images/about/thiscute.world-2022-07-31.webp"
            data-srcset="/images/about/thiscute.world-2022-07-31.webp, /images/about/thiscute.world-2022-07-31.webp 1.5x, /images/about/thiscute.world-2022-07-31.webp 2x"
            data-sizes="auto"
            alt="/images/about/thiscute.world-2022-07-31.webp">
    </a><figcaption class="image-caption">ThisCute.World 快照</figcaption>
    </figure></div>
        </div>
    </div>
<h2 id="注意事项" class="headerLink">
    <a href="#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="header-mark"></a>注意事项</h2><p>本站所有技术内容均为个人观点，不保证正确，另外随着时间变化部分技术内容也可能会失效，请读者自行甄别。</p>
<p>另外本站使用的许多配图都来源于网络，如有侵权，请联系我删除。</p>
<h2 id="画外" class="headerLink">
    <a href="#%e7%94%bb%e5%a4%96" class="header-mark"></a>画外</h2><p>互联网浩如烟海，这个小站偏安一隅，如果它有幸被你发现，而且其中文字对你还有些帮助，那可真是太棒了！感谢有你~</p>

<div class="animation-wrapper">
  <div class="particle particle-1"></div>
  <div class="particle particle-2"></div>
  <div class="particle particle-3"></div>
  <div class="particle particle-4"></div>
</div>

<style>
   
   

  .animation-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -100;
  }

  .particle,
  .particle:after {
    background: transparent;
  }

  .particle:after {
    position: absolute;
    content: "";
    top: 2560px;
  }

  .particle-1 {
    -webkit-animation: animParticle 60s linear infinite;
    animation: animParticle 60s linear infinite;
    box-shadow: 0px 0px #fff, 1231px 1530px #fff, 336px 2471px #fff,
      2385px 128px #fff, 2436px 1283px #fff, 549px 681px #fff,
      1775px 1144px #fff, 238px 1396px #fff, 1330px 1558px #fff,
      2060px 342px #fff, 1986px 1672px #fff, 1532px 702px #fff,
      1313px 1459px #fff, 2406px 1616px #fff, 1529px 802px #fff,
      1267px 680px #fff, 2258px 2109px #fff, 1325px 22px #fff,
      1578px 1045px #fff, 945px 2256px #fff, 1400px 1441px #fff,
      1652px 2152px #fff, 2513px 969px #fff, 2192px 1352px #fff,
      793px 334px #fff, 1371px 1086px #fff, 2408px 1898px #fff, 475px 840px #fff,
      539px 1108px #fff, 556px 1499px #fff, 643px 122px #fff, 2370px 1975px #fff,
      1196px 1786px #fff, 308px 1834px #fff, 1957px 1569px #fff,
      875px 339px #fff, 562px 412px #fff, 1187px 2258px #fff, 1406px 1824px #fff,
      1172px 1792px #fff, 235px 1489px #fff, 2081px 878px #fff, 925px 176px #fff,
      953px 1829px #fff, 38px 48px #fff, 1976px 1994px #fff, 1524px 1567px #fff,
      1397px 1141px #fff, 2014px 1773px #fff, 1638px 1832px #fff,
      1150px 465px #fff, 1212px 1854px #fff, 122px 20px #fff, 2493px 2361px #fff,
      2221px 194px #fff, 480px 2020px #fff, 2340px 403px #fff,
      1975px 2507px #fff, 1434px 142px #fff, 963px 871px #fff,
      2379px 1765px #fff, 2346px 100px #fff, 1931px 1308px #fff,
      527px 814px #fff, 549px 1732px #fff, 943px 886px #fff, 1592px 2277px #fff,
      1339px 810px #fff, 871px 2016px #fff, 2121px 763px #fff,
      1962px 1114px #fff, 2498px 550px #fff, 107px 586px #fff, 316px 1033px #fff,
      2104px 2120px #fff, 1933px 1786px #fff, 1377px 2457px #fff,
      2250px 1010px #fff, 1314px 2316px #fff, 1339px 947px #fff,
      122px 1014px #fff, 558px 2354px #fff, 1250px 1790px #fff,
      1185px 2144px #fff, 2432px 158px #fff, 1911px 2148px #fff,
      1177px 804px #fff, 2504px 1254px #fff, 617px 1084px #fff,
      1959px 1325px #fff, 2394px 2081px #fff, 395px 735px #fff,
      221px 1891px #fff, 652px 2245px #fff, 1225px 1023px #fff,
      1542px 2053px #fff, 876px 2178px #fff, 479px 1915px #fff,
      2297px 1799px #fff, 2160px 387px #fff, 160px 358px #fff,
      1122px 2164px #fff, 2056px 1402px #fff, 2133px 1470px #fff,
      1508px 1865px #fff, 250px 2157px #fff, 715px 1452px #fff,
      2095px 1539px #fff, 1860px 1450px #fff, 185px 2013px #fff,
      1855px 1878px #fff, 690px 2520px #fff, 2250px 838px #fff,
      1547px 1752px #fff, 1103px 615px #fff, 151px 262px #fff, 1630px 577px #fff,
      769px 2448px #fff, 1938px 2347px #fff, 700px 1634px #fff,
      2105px 2053px #fff, 1498px 49px #fff, 799px 512px #fff, 1278px 744px #fff,
      2301px 364px #fff, 1059px 2066px #fff, 2116px 2424px #fff,
      1884px 1046px #fff, 699px 1101px #fff, 62px 1893px #fff, 370px 161px #fff,
      298px 1288px #fff, 1972px 2211px #fff, 1834px 2350px #fff,
      1591px 1118px #fff, 1343px 1730px #fff, 706px 850px #fff,
      317px 1171px #fff, 1395px 2529px #fff, 1040px 2523px #fff,
      793px 2535px #fff, 2180px 142px #fff, 2016px 2511px #fff,
      1032px 1204px #fff, 499px 625px #fff, 130px 2064px #fff, 1371px 758px #fff,
      1045px 2018px #fff, 1954px 309px #fff, 1445px 2514px #fff,
      839px 1523px #fff, 920px 238px #fff, 1421px 1105px #fff, 668px 1517px #fff,
      2045px 2344px #fff, 2465px 1619px #fff, 403px 48px #fff,
      1142px 1102px #fff, 2066px 1803px #fff, 658px 1744px #fff,
      721px 2062px #fff, 2180px 827px #fff, 2310px 111px #fff, 935px 808px #fff,
      1121px 1108px #fff, 1424px 1998px #fff, 821px 1317px #fff,
      2425px 1354px #fff, 305px 1422px #fff, 169px 1559px #fff,
      1850px 425px #fff, 719px 1507px #fff, 1650px 1803px #fff, 275px 402px #fff,
      1038px 772px #fff, 404px 105px #fff, 78px 2119px #fff, 133px 110px #fff,
      2559px 944px #fff, 688px 212px #fff, 869px 2266px #fff, 983px 840px #fff,
      1914px 2154px #fff, 1376px 941px #fff, 2064px 739px #fff,
      1979px 1255px #fff, 592px 1175px #fff, 283px 253px #fff, 696px 2501px #fff,
      1561px 1505px #fff, 745px 2233px #fff, 1180px 1104px #fff,
      1046px 1573px #fff, 1842px 2374px #fff, 1199px 2423px #fff,
      1680px 1359px #fff, 2020px 626px #fff, 1226px 1082px #fff,
      1894px 1824px #fff, 451px 2216px #fff, 544px 1263px #fff, 408px 4px #fff,
      1883px 1020px #fff, 1917px 1777px #fff, 1353px 1808px #fff,
      425px 85px #fff, 1165px 1787px #fff, 561px 1978px #fff, 712px 874px #fff,
      231px 2176px #fff, 516px 8px #fff, 199px 742px #fff, 584px 2388px #fff,
      434px 1584px #fff, 813px 2391px #fff, 1427px 2254px #fff,
      1894px 2083px #fff, 521px 2507px #fff, 391px 352px #fff, 664px 245px #fff,
      179px 13px #fff, 1784px 1939px #fff, 438px 1285px #fff, 975px 1780px #fff,
      1285px 1554px #fff, 924px 2301px #fff, 2340px 1621px #fff,
      1844px 2336px #fff, 640px 637px #fff, 1279px 1236px #fff,
      2419px 2546px #fff, 395px 1790px #fff, 959px 2383px #fff,
      1449px 650px #fff, 2378px 747px #fff, 1360px 24px #fff, 1726px 1609px #fff,
      1632px 1945px #fff, 2295px 2515px #fff, 594px 1339px #fff,
      351px 1327px #fff, 1972px 1942px #fff, 2092px 1604px #fff,
      1580px 1123px #fff, 1511px 2062px #fff, 1551px 1208px #fff,
      2014px 144px #fff, 2373px 2160px #fff, 2041px 823px #fff,
      1682px 1919px #fff, 2224px 338px #fff, 1224px 461px #fff,
      2256px 664px #fff, 2505px 1987px #fff, 2308px 2021px #fff,
      71px 2249px #fff, 1510px 944px #fff, 2148px 726px #fff, 535px 2236px #fff,
      793px 739px #fff, 930px 2533px #fff, 1353px 192px #fff, 1691px 998px #fff,
      1675px 504px #fff, 1632px 2410px #fff, 20px 1985px #fff, 701px 1622px #fff,
      2181px 1612px #fff, 184px 722px #fff, 720px 1488px #fff,
      2300px 1201px #fff, 2173px 402px #fff, 262px 560px #fff, 1379px 347px #fff,
      958px 1285px #fff, 958px 46px #fff, 2157px 1926px #fff, 1018px 1302px #fff,
      231px 1934px #fff, 2407px 1365px #fff, 2483px 1370px #fff,
      1038px 1917px #fff, 1218px 2256px #fff, 1702px 64px #fff,
      2141px 2350px #fff, 851px 2437px #fff, 402px 566px #fff, 2px 1430px #fff,
      341px 1849px #fff, 2210px 1148px #fff, 1071px 2370px #fff,
      1476px 306px #fff, 1857px 395px #fff, 1157px 349px #fff, 1916px 689px #fff,
      1800px 1989px #fff, 477px 2268px #fff, 184px 1033px #fff, 597px 720px #fff,
      52px 1638px #fff, 1338px 1170px #fff, 1190px 1946px #fff,
      981px 1481px #fff, 2096px 715px #fff, 1861px 658px #fff,
      1139px 1485px #fff, 1471px 1029px #fff, 1639px 424px #fff,
      558px 2453px #fff, 452px 987px #fff, 630px 1639px #fff, 2353px 2553px #fff,
      1847px 51px #fff, 884px 1805px #fff, 2280px 1759px #fff, 1490px 491px #fff,
      747px 1064px #fff, 2220px 1118px #fff, 2080px 747px #fff,
      1438px 1230px #fff, 295px 1674px #fff, 1294px 291px #fff,
      1148px 1742px #fff, 670px 1968px #fff, 2544px 741px #fff,
      426px 2035px #fff, 2187px 2309px #fff, 178px 2227px #fff,
      768px 2459px #fff, 1580px 1283px #fff, 1740px 200px #fff,
      352px 1310px #fff, 581px 602px #fff, 1439px 274px #fff, 2002px 1410px #fff,
      225px 1490px #fff, 2292px 1251px #fff, 1854px 760px #fff, 704px 221px #fff,
      385px 1883px #fff, 2352px 1092px #fff, 792px 1590px #fff,
      672px 1419px #fff, 1971px 497px #fff, 2505px 1312px #fff,
      102px 2102px #fff, 2204px 1555px #fff, 2000px 1593px #fff,
      2173px 1802px #fff, 1415px 237px #fff, 895px 1877px #fff,
      710px 1154px #fff, 251px 2478px #fff, 1266px 1534px #fff,
      2186px 1466px #fff, 1518px 2448px #fff, 515px 2525px #fff,
      1634px 2324px #fff, 1706px 683px #fff, 292px 1485px #fff,
      872px 2046px #fff, 658px 437px #fff, 2367px 1938px #fff,
      2018px 2543px #fff, 551px 542px #fff, 1711px 2307px #fff,
      2467px 999px #fff, 2046px 630px #fff, 1307px 2344px #fff,
      1893px 1311px #fff, 2536px 2425px #fff, 1777px 19px #fff,
      1845px 2044px #fff, 1261px 454px #fff, 2333px 2299px #fff,
      1019px 2349px #fff, 2074px 1014px #fff, 806px 1290px #fff,
      2152px 637px #fff, 980px 534px #fff, 199px 1781px #fff, 2091px 1219px #fff,
      917px 1990px #fff, 172px 714px #fff, 395px 2339px #fff, 35px 764px #fff,
      2110px 1796px #fff, 62px 996px #fff, 1340px 490px #fff, 1950px 797px #fff,
      2116px 72px #fff, 671px 2088px #fff, 2023px 1819px #fff, 90px 1219px #fff,
      1685px 282px #fff, 1843px 873px #fff, 100px 1446px #fff,
      2118px 1215px #fff, 1973px 1591px #fff, 2185px 1292px #fff,
      1270px 804px #fff, 2171px 1348px #fff, 2268px 6px #fff, 1580px 651px #fff,
      1806px 1438px #fff, 2435px 181px #fff, 437px 578px #fff,
      1924px 1356px #fff, 602px 1111px #fff, 2455px 1226px #fff,
      1887px 392px #fff, 730px 1492px #fff, 697px 2141px #fff, 852px 466px #fff,
      1px 1641px #fff, 788px 514px #fff, 183px 321px #fff, 932px 1224px #fff,
      1102px 692px #fff, 1587px 976px #fff, 1395px 2290px #fff,
      144px 2480px #fff, 623px 2164px #fff, 2098px 2043px #fff,
      336px 1662px #fff, 2191px 2279px #fff, 577px 2027px #fff,
      2215px 2483px #fff, 218px 2083px #fff, 2182px 122px #fff, 659px 791px #fff,
      317px 531px #fff, 980px 1456px #fff, 2533px 578px #fff, 595px 2478px #fff,
      2200px 1766px #fff, 2107px 1970px #fff, 1935px 1295px #fff,
      1822px 1691px #fff, 787px 1129px #fff, 1051px 718px #fff,
      915px 2488px #fff, 2037px 1394px #fff, 341px 319px #fff, 1843px 410px #fff,
      1501px 963px #fff, 404px 297px #fff, 1234px 1644px #fff, 883px 74px #fff,
      491px 2414px #fff, 334px 386px #fff, 951px 1852px #fff, 2194px 274px #fff,
      1424px 330px #fff, 1636px 995px #fff, 1566px 2450px #fff,
      544px 1430px #fff, 630px 1056px #fff, 925px 1203px #fff, 362px 101px #fff,
      1442px 834px #fff, 1786px 2360px #fff, 1611px 276px #fff,
      1715px 2151px #fff, 652px 2192px #fff, 589px 928px #fff,
      2460px 1658px #fff, 2408px 1139px #fff, 967px 1843px #fff,
      379px 720px #fff, 1832px 1057px #fff, 2234px 1836px #fff,
      436px 2526px #fff, 1327px 781px #fff, 1835px 768px #fff, 1037px 95px #fff,
      1422px 405px #fff, 1880px 758px #fff, 2291px 1828px #fff,
      2053px 2261px #fff, 121px 2256px #fff, 1460px 801px #fff, 64px 2344px #fff,
      97px 83px #fff, 2046px 1880px #fff, 866px 1852px #fff, 1317px 2444px #fff,
      1139px 168px #fff, 2413px 2333px #fff, 2289px 1063px #fff,
      2317px 816px #fff, 1773px 1366px #fff, 916px 1909px #fff,
      1303px 2052px #fff, 1406px 1299px #fff, 439px 2455px #fff,
      1113px 188px #fff, 1504px 462px #fff, 1376px 2373px #fff,
      495px 2084px #fff, 2198px 626px #fff, 2119px 1814px #fff, 86px 2541px #fff,
      1107px 854px #fff, 826px 1258px #fff, 2234px 1899px #fff, 88px 807px #fff,
      1982px 2487px #fff, 2035px 196px #fff, 148px 2103px #fff, 36px 2551px #fff,
      1842px 1164px #fff, 1858px 232px #fff, 405px 989px #fff,
      2432px 1061px #fff, 456px 1701px #fff, 427px 11px #fff, 588px 1308px #fff,
      1541px 620px #fff, 1827px 538px #fff, 1511px 1873px #fff,
      1485px 2156px #fff, 1287px 531px #fff, 1139px 1362px #fff,
      1621px 1023px #fff, 2380px 446px #fff, 649px 868px #fff, 596px 1417px #fff,
      1659px 560px #fff, 2340px 920px #fff, 2231px 1604px #fff,
      1726px 2117px #fff, 2048px 2156px #fff, 1505px 1588px #fff,
      1559px 723px #fff, 1130px 1943px #fff, 271px 584px #fff,
      1217px 2093px #fff, 1312px 552px #fff, 2557px 2342px #fff, 652px 73px #fff,
      1501px 2455px #fff, 1286px 1648px #fff, 838px 1551px #fff,
      1652px 1712px #fff, 1224px 160px #fff, 1928px 524px #fff, 899px 292px #fff,
      944px 1720px #fff, 1785px 1255px #fff, 104px 96px #fff, 1964px 546px #fff,
      2195px 1470px #fff, 893px 1423px #fff, 406px 341px #fff, 1px 2175px #fff,
      1044px 2022px #fff, 1336px 990px #fff, 1592px 788px #fff,
      2338px 710px #fff, 2401px 859px #fff, 1095px 137px #fff, 218px 90px #fff,
      2235px 2313px #fff, 1564px 162px #fff, 1900px 1265px #fff,
      199px 346px #fff, 1639px 360px #fff, 1795px 387px #fff, 926px 1493px #fff,
      648px 86px #fff, 802px 691px #fff, 1733px 349px #fff, 86px 91px #fff,
      1357px 183px #fff, 883px 78px #fff, 282px 2276px #fff, 779px 2104px #fff,
      48px 2155px #fff, 1783px 1891px #fff, 1794px 1397px #fff,
      695px 1358px #fff, 290px 1509px #fff, 136px 169px #fff, 2109px 1713px #fff,
      1595px 2295px #fff, 1346px 253px #fff, 2439px 473px #fff,
      700px 2460px #fff, 1594px 1415px #fff, 1842px 834px #fff,
      1645px 553px #fff, 1269px 433px #fff, 1686px 1807px #fff,
      1513px 1884px #fff, 2365px 627px #fff, 828px 2194px #fff,
      1950px 2019px #fff, 1769px 1193px #fff, 498px 1207px #fff,
      355px 2374px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-1:after {
    box-shadow: 0px 0px #fff, 1832px 195px #fff, 885px 2516px #fff,
      1163px 2003px #fff, 2519px 2207px #fff, 436px 774px #fff,
      1807px 1508px #fff, 2511px 1453px #fff, 1976px 2155px #fff,
      1539px 257px #fff, 739px 999px #fff, 2259px 2296px #fff,
      1444px 2057px #fff, 743px 2500px #fff, 1540px 1111px #fff,
      1193px 360px #fff, 1258px 1413px #fff, 1024px 2381px #fff,
      2161px 1319px #fff, 390px 2106px #fff, 340px 1212px #fff,
      1180px 659px #fff, 1373px 718px #fff, 998px 1978px #fff, 2086px 612px #fff,
      2063px 1062px #fff, 1555px 181px #fff, 1947px 1547px #fff,
      613px 1061px #fff, 2126px 2538px #fff, 1701px 1770px #fff,
      822px 174px #fff, 2290px 1563px #fff, 2174px 1490px #fff, 1762px 53px #fff,
      349px 173px #fff, 192px 1364px #fff, 981px 2345px #fff, 997px 369px #fff,
      2247px 1455px #fff, 1815px 398px #fff, 681px 2163px #fff, 754px 817px #fff,
      192px 290px #fff, 1882px 1953px #fff, 2380px 1434px #fff,
      1944px 1921px #fff, 2397px 633px #fff, 753px 2037px #fff,
      1665px 1188px #fff, 1931px 1432px #fff, 284px 1706px #fff,
      971px 680px #fff, 978px 1360px #fff, 456px 504px #fff, 138px 2192px #fff,
      571px 1679px #fff, 2274px 441px #fff, 701px 1195px #fff, 2110px 551px #fff,
      673px 578px #fff, 1164px 1991px #fff, 231px 387px #fff, 280px 18px #fff,
      1135px 2124px #fff, 2534px 1592px #fff, 1870px 1318px #fff,
      224px 1117px #fff, 986px 410px #fff, 1010px 1351px #fff, 1374px 315px #fff,
      575px 950px #fff, 637px 2363px #fff, 1208px 2031px #fff,
      1471px 1134px #fff, 91px 1298px #fff, 1695px 2101px #fff, 48px 664px #fff,
      1413px 2224px #fff, 1602px 2077px #fff, 1109px 85px #fff, 2224px 45px #fff,
      1257px 1958px #fff, 2135px 668px #fff, 1858px 1561px #fff,
      1767px 238px #fff, 1660px 1436px #fff, 2315px 1780px #fff,
      1474px 1121px #fff, 1536px 2393px #fff, 765px 2461px #fff,
      707px 1178px #fff, 1663px 2104px #fff, 750px 836px #fff, 1643px 526px #fff,
      463px 2028px #fff, 1449px 210px #fff, 684px 6px #fff, 534px 2036px #fff,
      1892px 2085px #fff, 2179px 901px #fff, 1963px 1908px #fff,
      44px 1249px #fff, 96px 1978px #fff, 2198px 1331px #fff, 1331px 1335px #fff,
      2057px 1870px #fff, 1255px 1583px #fff, 1702px 1204px #fff,
      744px 1221px #fff, 2496px 2347px #fff, 1861px 568px #fff,
      448px 1679px #fff, 1172px 1721px #fff, 2517px 140px #fff,
      2322px 1594px #fff, 1725px 1716px #fff, 1813px 1794px #fff,
      2026px 2018px #fff, 2415px 1830px #fff, 263px 2390px #fff,
      1795px 740px #fff, 2205px 2544px #fff, 1762px 1633px #fff,
      2415px 2289px #fff, 1723px 1764px #fff, 2114px 1571px #fff,
      1328px 1231px #fff, 268px 2360px #fff, 2513px 2387px #fff,
      2111px 132px #fff, 2192px 932px #fff, 1853px 619px #fff, 181px 1760px #fff,
      1903px 495px #fff, 2023px 2336px #fff, 538px 1041px #fff,
      967px 1588px #fff, 1973px 2189px #fff, 648px 1144px #fff, 305px 504px #fff,
      2215px 1895px #fff, 1325px 2010px #fff, 845px 740px #fff,
      2340px 750px #fff, 2335px 1393px #fff, 1473px 403px #fff,
      1644px 1696px #fff, 2560px 847px #fff, 525px 862px #fff,
      1747px 2148px #fff, 592px 2238px #fff, 52px 208px #fff, 1474px 1637px #fff,
      1860px 371px #fff, 2026px 167px #fff, 412px 981px #fff, 2197px 243px #fff,
      454px 1356px #fff, 1259px 1675px #fff, 1898px 1507px #fff,
      451px 386px #fff, 2267px 1655px #fff, 528px 832px #fff, 2416px 2483px #fff,
      1680px 340px #fff, 169px 86px #fff, 2307px 257px #fff, 2248px 467px #fff,
      1006px 1672px #fff, 859px 462px #fff, 1349px 2466px #fff,
      905px 2003px #fff, 306px 684px #fff, 988px 1694px #fff, 1302px 252px #fff,
      1307px 404px #fff, 1714px 2410px #fff, 2354px 518px #fff,
      158px 1352px #fff, 1925px 1669px #fff, 2382px 2108px #fff,
      823px 422px #fff, 1002px 2491px #fff, 2214px 1488px #fff, 335px 320px #fff,
      787px 2557px #fff, 3px 555px #fff, 2399px 2143px #fff, 1597px 356px #fff,
      331px 136px #fff, 942px 91px #fff, 1191px 1070px #fff, 487px 2430px #fff,
      2041px 913px #fff, 1466px 2429px #fff, 496px 2208px #fff,
      2285px 628px #fff, 482px 688px #fff, 230px 322px #fff, 1619px 1204px #fff,
      2283px 248px #fff, 2331px 914px #fff, 1815px 1363px #fff, 92px 1550px #fff,
      1412px 1998px #fff, 2290px 2331px #fff, 1112px 724px #fff,
      1236px 322px #fff, 1753px 1626px #fff, 1117px 1587px #fff,
      1098px 1079px #fff, 1500px 2443px #fff, 18px 101px #fff, 2219px 605px #fff,
      502px 2539px #fff, 1600px 544px #fff, 737px 737px #fff, 1468px 1262px #fff,
      621px 1866px #fff, 597px 567px #fff, 1025px 1215px #fff, 251px 1782px #fff,
      1207px 44px #fff, 1640px 1395px #fff, 61px 1650px #fff, 2467px 2028px #fff,
      1987px 600px #fff, 577px 156px #fff, 2123px 1365px #fff, 959px 69px #fff,
      412px 2400px #fff, 1470px 1518px #fff, 2450px 134px #fff,
      1032px 889px #fff, 720px 1972px #fff, 1134px 191px #fff,
      2077px 2220px #fff, 676px 1237px #fff, 864px 1511px #fff,
      1484px 990px #fff, 1802px 1444px #fff, 1869px 1738px #fff,
      1052px 332px #fff, 2511px 286px #fff, 1025px 426px #fff,
      1572px 1501px #fff, 563px 2272px #fff, 1297px 436px #fff,
      689px 1373px #fff, 216px 553px #fff, 1092px 755px #fff, 1054px 1883px #fff,
      325px 287px #fff, 1626px 512px #fff, 834px 1144px #fff, 289px 1215px #fff,
      2155px 532px #fff, 1705px 1723px #fff, 1384px 1768px #fff,
      1903px 207px #fff, 155px 1233px #fff, 2059px 374px #fff, 610px 119px #fff,
      1994px 2240px #fff, 2369px 935px #fff, 206px 535px #fff, 1430px 505px #fff,
      2429px 1237px #fff, 1730px 758px #fff, 2391px 489px #fff,
      1431px 869px #fff, 2053px 1181px #fff, 2284px 1737px #fff,
      504px 1994px #fff, 663px 2503px #fff, 1713px 605px #fff, 1743px 549px #fff,
      82px 174px #fff, 801px 449px #fff, 2229px 145px #fff, 2224px 804px #fff,
      914px 2139px #fff, 99px 1141px #fff, 1572px 862px #fff, 540px 1587px #fff,
      2375px 30px #fff, 2037px 2045px #fff, 80px 1802px #fff, 256px 2314px #fff,
      766px 2102px #fff, 1711px 563px #fff, 2402px 507px #fff, 361px 658px #fff,
      565px 670px #fff, 233px 570px #fff, 731px 82px #fff, 161px 2440px #fff,
      2324px 2234px #fff, 653px 1791px #fff, 1084px 2173px #fff,
      1734px 1345px #fff, 431px 752px #fff, 354px 92px #fff, 499px 1362px #fff,
      749px 695px #fff, 1258px 571px #fff, 889px 1845px #fff, 1057px 54px #fff,
      109px 216px #fff, 677px 189px #fff, 1629px 2042px #fff, 166px 895px #fff,
      2216px 1397px #fff, 1767px 479px #fff, 1973px 2292px #fff,
      1098px 2286px #fff, 2236px 2263px #fff, 2426px 780px #fff,
      809px 1969px #fff, 335px 2107px #fff, 1325px 941px #fff,
      1450px 1388px #fff, 1183px 1179px #fff, 296px 1376px #fff,
      1095px 189px #fff, 1586px 994px #fff, 2180px 802px #fff, 308px 1178px #fff,
      298px 343px #fff, 1385px 477px #fff, 2109px 1066px #fff, 918px 1949px #fff,
      1141px 1684px #fff, 1851px 1325px #fff, 1134px 467px #fff,
      1732px 1614px #fff, 1731px 1585px #fff, 321px 1459px #fff,
      839px 224px #fff, 2004px 969px #fff, 1327px 523px #fff, 1086px 509px #fff,
      1900px 724px #fff, 1838px 269px #fff, 2464px 599px #fff, 833px 762px #fff,
      1197px 2258px #fff, 1429px 1408px #fff, 1883px 1106px #fff,
      328px 2307px #fff, 1633px 1465px #fff, 567px 1124px #fff,
      931px 1970px #fff, 1772px 1191px #fff, 2161px 1303px #fff,
      2556px 1710px #fff, 2232px 1049px #fff, 1728px 1197px #fff,
      68px 2508px #fff, 140px 2071px #fff, 1249px 1017px #fff, 1711px 677px #fff,
      788px 1986px #fff, 1752px 1462px #fff, 1207px 2525px #fff,
      2138px 2043px #fff, 856px 1854px #fff, 2331px 2529px #fff,
      1178px 1779px #fff, 2454px 2012px #fff, 898px 1551px #fff,
      304px 1111px #fff, 1133px 78px #fff, 1405px 1535px #fff, 163px 196px #fff,
      1427px 1253px #fff, 1183px 1966px #fff, 2046px 530px #fff,
      1555px 1891px #fff, 659px 1428px #fff, 73px 1971px #fff, 2275px 106px #fff,
      1305px 2244px #fff, 2524px 1192px #fff, 2305px 1248px #fff,
      1960px 842px #fff, 2363px 2403px #fff, 871px 847px #fff, 487px 191px #fff,
      1313px 343px #fff, 121px 136px #fff, 1181px 2319px #fff, 298px 1122px #fff,
      1861px 102px #fff, 1947px 226px #fff, 213px 1521px #fff, 593px 768px #fff,
      1082px 909px #fff, 795px 1357px #fff, 2509px 2376px #fff, 622px 200px #fff,
      1028px 2239px #fff, 364px 7px #fff, 1794px 22px #fff, 1596px 1743px #fff,
      646px 2074px #fff, 2286px 1661px #fff, 2039px 803px #fff,
      595px 1937px #fff, 1401px 473px #fff, 1023px 1083px #fff,
      2209px 1247px #fff, 922px 2060px #fff, 496px 1613px #fff,
      2415px 648px #fff, 1298px 967px #fff, 1358px 1920px #fff,
      1890px 2260px #fff, 716px 558px #fff, 2494px 1184px #fff, 431px 295px #fff,
      987px 1538px #fff, 1470px 2299px #fff, 2038px 357px #fff,
      1110px 2204px #fff, 1656px 384px #fff, 968px 520px #fff, 699px 186px #fff,
      1608px 711px #fff, 2410px 332px #fff, 1319px 1256px #fff,
      2506px 1775px #fff, 2044px 1918px #fff, 49px 1738px #fff, 16px 567px #fff,
      1538px 1553px #fff, 210px 2488px #fff, 1955px 1587px #fff,
      1854px 1360px #fff, 27px 54px #fff, 1117px 1586px #fff, 309px 1301px #fff,
      1637px 2494px #fff, 384px 968px #fff, 1119px 393px #fff,
      2332px 1683px #fff, 624px 334px #fff, 2144px 2271px #fff,
      2113px 1105px #fff, 2360px 776px #fff, 716px 1792px #fff,
      2323px 1043px #fff, 656px 2198px #fff, 2257px 1770px #fff,
      636px 991px #fff, 2178px 1813px #fff, 2435px 2531px #fff, 67px 212px #fff,
      2082px 1411px #fff, 2331px 455px #fff, 963px 141px #fff,
      1847px 2294px #fff, 861px 1743px #fff, 851px 2055px #fff,
      1786px 1663px #fff, 88px 1723px #fff, 700px 368px #fff, 110px 874px #fff,
      1145px 420px #fff, 2522px 1536px #fff, 1306px 1236px #fff,
      2157px 1096px #fff, 832px 386px #fff, 2170px 713px #fff, 743px 2057px #fff,
      587px 2000px #fff, 1896px 1756px #fff, 1138px 389px #fff,
      1364px 1489px #fff, 500px 384px #fff, 1748px 25px #fff, 308px 1438px #fff,
      367px 361px #fff, 859px 1000px #fff, 1876px 916px #fff, 807px 1810px #fff,
      1206px 1035px #fff, 2274px 55px #fff, 1137px 2260px #fff,
      2234px 396px #fff, 1003px 1374px #fff, 2214px 1448px #fff,
      1171px 1313px #fff, 1617px 2193px #fff, 866px 1459px #fff,
      1195px 704px #fff, 1163px 1021px #fff, 773px 660px #fff, 973px 159px #fff,
      2082px 2556px #fff, 30px 509px #fff, 1896px 1931px #fff,
      1548px 2146px #fff, 2168px 2247px #fff, 640px 2362px #fff,
      1002px 482px #fff, 2544px 1388px #fff, 624px 848px #fff, 853px 1708px #fff,
      780px 1393px #fff, 530px 561px #fff, 317px 1772px #fff, 1020px 1097px #fff,
      1657px 2227px #fff, 429px 1622px #fff, 702px 1711px #fff,
      2415px 620px #fff, 85px 2061px #fff, 2441px 1603px #fff, 792px 1476px #fff,
      1713px 14px #fff, 1010px 2290px #fff, 81px 2539px #fff, 2216px 1978px #fff,
      1082px 927px #fff, 1652px 1297px #fff, 1991px 736px #fff,
      1250px 2319px #fff, 1572px 38px #fff, 121px 2467px #fff, 1955px 502px #fff,
      1816px 1409px #fff, 1389px 1453px #fff, 183px 26px #fff, 817px 404px #fff,
      33px 6px #fff, 487px 1676px #fff, 1390px 663px #fff, 697px 1260px #fff,
      1977px 203px #fff, 1529px 1630px #fff, 952px 1467px #fff,
      532px 2268px #fff, 913px 1745px #fff, 1152px 2032px #fff,
      1950px 2459px #fff, 1252px 2213px #fff, 1663px 2006px #fff,
      1325px 2209px #fff, 653px 1055px #fff, 1791px 433px #fff,
      2484px 2302px #fff, 2032px 153px #fff, 438px 723px #fff,
      1960px 1337px #fff, 1159px 1112px #fff, 1549px 622px #fff,
      1749px 728px #fff, 815px 221px #fff, 685px 2392px #fff, 657px 997px #fff,
      1122px 905px #fff, 1979px 644px #fff, 689px 874px #fff, 910px 1242px #fff,
      322px 1760px #fff, 142px 316px #fff, 1927px 1235px #fff,
      2469px 1141px #fff, 2199px 604px #fff, 1369px 1980px #fff,
      1826px 1191px #fff, 2039px 617px #fff, 1561px 1461px #fff,
      788px 1360px #fff, 2537px 1242px #fff, 1892px 2451px #fff,
      136px 1761px #fff, 2px 1251px #fff, 2460px 1964px #fff, 2094px 104px #fff,
      759px 171px #fff, 409px 598px #fff, 796px 1413px #fff, 567px 1943px #fff,
      266px 50px #fff, 998px 875px #fff, 1100px 2174px #fff, 2097px 552px #fff,
      86px 196px #fff, 502px 1202px #fff, 918px 1075px #fff, 273px 2513px #fff,
      2409px 18px #fff, 438px 523px #fff, 1775px 2343px #fff, 2428px 2029px #fff,
      251px 429px #fff, 1103px 637px #fff, 800px 1909px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-2 {
    -webkit-animation: animParticle 120s linear infinite;
    animation: animParticle 120s linear infinite;
    box-shadow: 0px 0px #fff, 2559px 1650px #fff, 1603px 2162px #fff,
      2329px 2066px #fff, 1045px 1875px #fff, 1437px 2222px #fff,
      2027px 2514px #fff, 1503px 1437px #fff, 830px 1376px #fff,
      167px 383px #fff, 1944px 576px #fff, 2367px 1566px #fff, 2374px 487px #fff,
      1925px 2114px #fff, 663px 1463px #fff, 1062px 1643px #fff,
      167px 420px #fff, 2221px 1181px #fff, 43px 1103px #fff, 666px 960px #fff,
      775px 2217px #fff, 1136px 997px #fff, 275px 1494px #fff,
      2265px 1502px #fff, 1454px 598px #fff, 2441px 1477px #fff,
      870px 2000px #fff, 1235px 2113px #fff, 380px 1880px #fff,
      1411px 345px #fff, 2358px 1750px #fff, 1818px 793px #fff, 722px 220px #fff,
      884px 1359px #fff, 1449px 123px #fff, 2474px 2485px #fff,
      2257px 1955px #fff, 836px 662px #fff, 270px 873px #fff, 921px 2392px #fff,
      771px 1604px #fff, 906px 2436px #fff, 970px 2031px #fff, 468px 922px #fff,
      2262px 706px #fff, 471px 467px #fff, 1532px 2332px #fff,
      1318px 1889px #fff, 775px 2303px #fff, 1759px 392px #fff,
      2175px 2474px #fff, 550px 1199px #fff, 191px 377px #fff, 788px 1805px #fff,
      2013px 13px #fff, 1865px 635px #fff, 1236px 766px #fff, 859px 861px #fff,
      338px 1062px #fff, 1036px 2183px #fff, 2428px 1949px #fff,
      420px 751px #fff, 362px 769px #fff, 746px 475px #fff, 721px 2023px #fff,
      391px 852px #fff, 582px 722px #fff, 1970px 2464px #fff, 2219px 1871px #fff,
      1285px 2379px #fff, 430px 2137px #fff, 155px 76px #fff, 1612px 773px #fff,
      1746px 1448px #fff, 1884px 988px #fff, 1706px 1929px #fff,
      1761px 2415px #fff, 2358px 664px #fff, 471px 1636px #fff, 27px 820px #fff,
      406px 1002px #fff, 113px 1493px #fff, 196px 65px #fff, 2547px 14px #fff,
      190px 1498px #fff, 2069px 122px #fff, 321px 75px #fff, 1014px 57px #fff,
      737px 2427px #fff, 1984px 2200px #fff, 1161px 1410px #fff,
      1308px 1792px #fff, 235px 2019px #fff, 1105px 536px #fff, 360px 317px #fff,
      2113px 2188px #fff, 2320px 43px #fff, 2333px 2388px #fff, 864px 383px #fff,
      1766px 1390px #fff, 1340px 786px #fff, 561px 1870px #fff,
      906px 2241px #fff, 591px 613px #fff, 1236px 1031px #fff, 2242px 675px #fff,
      984px 2079px #fff, 1987px 1890px #fff, 2525px 1725px #fff,
      2337px 97px #fff, 1244px 2552px #fff, 1119px 213px #fff,
      1011px 1794px #fff, 2230px 1809px #fff, 1910px 1769px #fff,
      463px 2075px #fff, 650px 578px #fff, 1200px 1363px #fff, 2035px 124px #fff,
      1206px 2325px #fff, 1534px 839px #fff, 690px 2393px #fff,
      182px 1012px #fff, 519px 1283px #fff, 1888px 2195px #fff, 514px 190px #fff,
      2357px 881px #fff, 2335px 1888px #fff, 1819px 1353px #fff,
      2540px 1995px #fff, 2527px 1285px #fff, 1608px 2559px #fff,
      1774px 600px #fff, 918px 2024px #fff, 2550px 916px #fff, 199px 1271px #fff,
      2435px 260px #fff, 121px 1745px #fff, 790px 1382px #fff, 64px 375px #fff,
      1625px 1809px #fff, 767px 696px #fff, 273px 1656px #fff,
      1402px 2066px #fff, 383px 2116px #fff, 838px 1397px #fff,
      1470px 1280px #fff, 679px 344px #fff, 1118px 2525px #fff,
      1828px 969px #fff, 487px 2334px #fff, 2176px 1731px #fff, 1698px 47px #fff,
      589px 205px #fff, 1117px 517px #fff, 662px 2123px #fff, 1164px 2237px #fff,
      133px 1576px #fff, 2208px 2375px #fff, 2271px 2198px #fff,
      1224px 2239px #fff, 2521px 1056px #fff, 486px 1540px #fff,
      2168px 1698px #fff, 2145px 2327px #fff, 2063px 1427px #fff,
      1033px 2329px #fff, 1727px 1834px #fff, 2452px 516px #fff,
      1522px 2488px #fff, 2551px 2312px #fff, 286px 2473px #fff,
      2129px 2406px #fff, 2002px 1551px #fff, 1662px 1562px #fff,
      1006px 742px #fff, 923px 885px #fff, 1749px 1672px #fff, 2181px 428px #fff,
      621px 387px #fff, 678px 2289px #fff, 1672px 2161px #fff,
      2056px 1334px #fff, 199px 570px #fff, 2369px 1094px #fff,
      2045px 1604px #fff, 1037px 485px #fff, 2064px 36px #fff,
      2199px 2444px #fff, 2153px 70px #fff, 563px 2233px #fff,
      1218px 1959px #fff, 1031px 717px #fff, 418px 637px #fff, 1261px 868px #fff,
      364px 544px #fff, 1068px 1203px #fff, 2311px 164px #fff, 2420px 930px #fff,
      47px 546px #fff, 2356px 417px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-2:after {
    box-shadow: 0px 0px #fff, 2351px 271px #fff, 443px 2031px #fff,
      2540px 1007px #fff, 2490px 2027px #fff, 1961px 638px #fff,
      1391px 1464px #fff, 1292px 719px #fff, 666px 1619px #fff,
      818px 1633px #fff, 2491px 1296px #fff, 1403px 268px #fff,
      1158px 878px #fff, 1260px 1481px #fff, 2292px 402px #fff, 408px 549px #fff,
      324px 1455px #fff, 1870px 1144px #fff, 322px 2526px #fff,
      1333px 1397px #fff, 1570px 94px #fff, 133px 58px #fff, 2040px 1450px #fff,
      1742px 861px #fff, 379px 1457px #fff, 2519px 1011px #fff,
      1685px 1485px #fff, 1178px 560px #fff, 2287px 2527px #fff,
      1344px 2058px #fff, 1337px 1477px #fff, 1792px 1996px #fff,
      2219px 1606px #fff, 158px 360px #fff, 804px 1555px #fff, 330px 770px #fff,
      1954px 771px #fff, 265px 1341px #fff, 1856px 2081px #fff,
      926px 1989px #fff, 820px 1724px #fff, 642px 1876px #fff,
      2261px 2074px #fff, 1298px 2248px #fff, 861px 1872px #fff,
      2323px 1712px #fff, 2530px 2018px #fff, 998px 1197px #fff,
      1319px 990px #fff, 2482px 1616px #fff, 1662px 1302px #fff,
      793px 1443px #fff, 496px 1989px #fff, 1543px 222px #fff, 2025px 779px #fff,
      2229px 1357px #fff, 1158px 411px #fff, 1680px 2015px #fff,
      536px 2019px #fff, 393px 2443px #fff, 999px 2247px #fff, 558px 2464px #fff,
      2280px 280px #fff, 354px 41px #fff, 1694px 676px #fff, 940px 1372px #fff,
      297px 882px #fff, 1200px 464px #fff, 1681px 309px #fff, 756px 834px #fff,
      856px 1489px #fff, 638px 2076px #fff, 134px 1960px #fff,
      1850px 1516px #fff, 1828px 2512px #fff, 2076px 1344px #fff,
      1987px 1985px #fff, 2259px 1066px #fff, 595px 737px #fff,
      129px 1150px #fff, 1325px 918px #fff, 1718px 634px #fff, 2267px 526px #fff,
      1095px 219px #fff, 661px 782px #fff, 1423px 1535px #fff,
      1799px 1790px #fff, 1344px 887px #fff, 874px 607px #fff,
      2006px 2503px #fff, 2495px 889px #fff, 684px 2172px #fff,
      787px 1040px #fff, 498px 633px #fff, 2277px 2010px #fff, 230px 1771px #fff,
      421px 1882px #fff, 19px 1238px #fff, 923px 2558px #fff, 1683px 1419px #fff,
      23px 2432px #fff, 2101px 2022px #fff, 2201px 538px #fff, 522px 1134px #fff,
      363px 2204px #fff, 2060px 1435px #fff, 577px 398px #fff, 656px 3px #fff,
      1957px 1854px #fff, 910px 943px #fff, 1108px 847px #fff,
      1741px 1762px #fff, 745px 1119px #fff, 2309px 2519px #fff,
      2363px 782px #fff, 320px 1434px #fff, 916px 2475px #fff, 138px 110px #fff,
      1149px 899px #fff, 239px 1218px #fff, 1314px 1611px #fff,
      1645px 826px #fff, 1277px 1923px #fff, 330px 288px #fff, 1699px 373px #fff,
      1680px 1952px #fff, 1640px 1818px #fff, 2504px 251px #fff,
      1733px 26px #fff, 1504px 2164px #fff, 2283px 362px #fff, 1670px 828px #fff,
      1615px 1146px #fff, 1326px 2152px #fff, 2548px 2124px #fff,
      1893px 857px #fff, 1899px 2510px #fff, 768px 2201px #fff,
      777px 1092px #fff, 265px 975px #fff, 1664px 1308px #fff,
      1215px 1054px #fff, 2382px 1708px #fff, 110px 1873px #fff,
      566px 2515px #fff, 1553px 1337px #fff, 576px 2204px #fff,
      2213px 1828px #fff, 749px 2294px #fff, 1565px 882px #fff,
      1071px 2040px #fff, 1729px 1596px #fff, 749px 801px #fff,
      1645px 2383px #fff, 1325px 606px #fff, 2303px 1329px #fff,
      90px 1196px #fff, 825px 1143px #fff, 292px 39px #fff, 327px 1117px #fff,
      351px 1420px #fff, 1709px 1271px #fff, 1443px 1995px #fff,
      347px 332px #fff, 1658px 901px #fff, 1436px 2101px #fff,
      1261px 1224px #fff, 274px 480px #fff, 492px 2005px #fff, 309px 1113px #fff,
      1870px 496px #fff, 1741px 1681px #fff, 1801px 1036px #fff,
      1550px 2449px #fff, 2236px 2266px #fff, 338px 1582px #fff,
      957px 469px #fff, 1814px 1831px #fff, 886px 971px #fff, 1999px 1857px #fff,
      2454px 578px #fff, 1466px 2435px #fff, 306px 436px #fff,
      1126px 2189px #fff, 1515px 1985px #fff, 43px 62px #fff, 1727px 690px #fff,
      1060px 2210px #fff, 780px 1157px #fff, 2400px 158px #fff,
      286px 2148px #fff, 1451px 2109px #fff, 116px 1819px #fff, 77px 822px #fff,
      885px 412px #fff, 2083px 2318px #fff, 421px 1234px #fff,
      2026px 1865px #fff, 103px 2087px #fff, 385px 1872px #fff, 347px 428px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-3 {
    -webkit-animation: animParticle 180s linear infinite;
    animation: animParticle 180s linear infinite;
    box-shadow: 0px 0px #fff, 2165px 372px #fff, 2255px 615px #fff,
      2127px 2423px #fff, 1382px 2438px #fff, 1414px 2383px #fff,
      1719px 1033px #fff, 1860px 2460px #fff, 1820px 660px #fff,
      2410px 1322px #fff, 1062px 2556px #fff, 603px 2394px #fff,
      588px 1144px #fff, 644px 2454px #fff, 2130px 1575px #fff,
      1054px 956px #fff, 1419px 108px #fff, 961px 542px #fff, 33px 2415px #fff,
      1367px 1979px #fff, 267px 775px #fff, 1366px 367px #fff, 1991px 808px #fff,
      7px 2354px #fff, 153px 1679px #fff, 2258px 46px #fff, 43px 2532px #fff,
      1964px 374px #fff, 360px 513px #fff, 606px 1684px #fff, 1424px 1947px #fff,
      2112px 1748px #fff, 2271px 819px #fff, 2507px 830px #fff,
      2559px 1164px #fff, 2128px 725px #fff, 131px 1346px #fff,
      2499px 841px #fff, 1531px 1604px #fff, 2030px 1534px #fff,
      513px 1068px #fff, 723px 2490px #fff, 1172px 761px #fff,
      1208px 1915px #fff, 900px 1681px #fff, 1819px 2395px #fff,
      892px 2443px #fff, 1064px 2090px #fff, 1643px 1566px #fff,
      1679px 879px #fff, 599px 812px #fff, 1167px 7px #fff, 1330px 2524px #fff,
      1254px 52px #fff, 2119px 1791px #fff, 1066px 1226px #fff,
      1228px 1245px #fff, 2045px 1658px #fff, 588px 1910px #fff,
      2359px 1774px #fff, 777px 2309px #fff, 1742px 1777px #fff,
      2442px 89px #fff, 1886px 636px #fff, 929px 443px #fff, 356px 2074px #fff,
      228px 2545px #fff, 2215px 464px #fff, 327px 834px #fff, 660px 722px #fff,
      1466px 1419px #fff, 89px 1484px #fff, 1785px 774px #fff,
      1161px 1462px #fff, 1012px 793px #fff, 634px 1597px #fff,
      882px 1623px #fff, 982px 1274px #fff, 1498px 2038px #fff,
      1371px 618px #fff, 2092px 877px #fff, 1719px 1776px #fff,
      1154px 2474px #fff, 2036px 2002px #fff, 1511px 160px #fff,
      1582px 2453px #fff, 753px 56px #fff, 2px 1988px #fff, 1606px 327px #fff,
      144px 655px #fff, 852px 2064px #fff, 1733px 674px #fff, 275px 89px #fff,
      2271px 1607px #fff, 2103px 703px #fff, 2184px 1545px #fff,
      1425px 518px #fff, 2006px 664px #fff, 1998px 1512px #fff,
      452px 1616px #fff, 687px 270px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-3:after {
    box-shadow: 0px 0px #fff, 2303px 1872px #fff, 884px 343px #fff,
      603px 2283px #fff, 667px 197px #fff, 1301px 1422px #fff,
      2470px 2464px #fff, 317px 2182px #fff, 1736px 30px #fff, 526px 765px #fff,
      543px 1241px #fff, 484px 82px #fff, 1519px 929px #fff, 16px 1654px #fff,
      451px 149px #fff, 737px 906px #fff, 1252px 1225px #fff, 1796px 2250px #fff,
      1771px 370px #fff, 1306px 274px #fff, 604px 2121px #fff,
      1974px 1451px #fff, 1992px 1021px #fff, 450px 1423px #fff,
      709px 2217px #fff, 1679px 913px #fff, 2151px 1812px #fff,
      1698px 2463px #fff, 742px 1941px #fff, 294px 356px #fff, 71px 169px #fff,
      198px 1141px #fff, 1162px 912px #fff, 639px 691px #fff, 1073px 2311px #fff,
      191px 213px #fff, 1142px 2504px #fff, 667px 164px #fff, 1773px 2411px #fff,
      2274px 1910px #fff, 2322px 1847px #fff, 1046px 238px #fff,
      2540px 2411px #fff, 1510px 347px #fff, 880px 787px #fff,
      1749px 1735px #fff, 1837px 1454px #fff, 2322px 1714px #fff,
      921px 2497px #fff, 1084px 2435px #fff, 457px 1760px #fff,
      1047px 641px #fff, 1564px 2047px #fff, 1900px 1057px #fff, 23px 236px #fff,
      2159px 2131px #fff, 1000px 994px #fff, 1086px 1399px #fff,
      2337px 1524px #fff, 635px 455px #fff, 1624px 705px #fff,
      1272px 1629px #fff, 343px 768px #fff, 2350px 538px #fff,
      1586px 1329px #fff, 1913px 1423px #fff, 2412px 2529px #fff,
      1601px 1665px #fff, 2505px 165px #fff, 2035px 368px #fff,
      1696px 641px #fff, 1685px 1013px #fff, 2097px 1376px #fff, 6px 1758px #fff,
      991px 1208px #fff, 632px 1814px #fff, 97px 912px #fff, 573px 346px #fff,
      999px 2443px #fff, 1935px 1659px #fff, 486px 2485px #fff,
      2531px 2067px #fff, 600px 234px #fff, 1757px 1446px #fff,
      1423px 1842px #fff, 1499px 1784px #fff, 2326px 839px #fff,
      2079px 1314px #fff, 2065px 1431px #fff, 393px 944px #fff,
      1396px 1355px #fff, 1561px 1455px #fff, 510px 2212px #fff,
      1446px 426px #fff, 297px 998px #fff, 700px 717px #fff, 1921px 1666px #fff,
      2405px 1830px #fff, 925px 1935px #fff, 2047px 687px #fff,
      1989px 2161px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-4 {
    -webkit-animation: animParticle 600s linear infinite;
    animation: animParticle 600s linear infinite;
    box-shadow: 0px 0px #fff, 1069px 193px #fff, 607px 1049px #fff,
      361px 662px #fff, 151px 398px #fff, 748px 1321px #fff, 179px 349px #fff,
      188px 498px #fff, 1917px 1404px #fff, 1426px 1024px #fff,
      2527px 990px #fff, 1256px 217px #fff, 1609px 1574px #fff, 411px 472px #fff,
      2067px 1006px #fff, 1895px 2017px #fff, 1169px 2277px #fff,
      1984px 2257px #fff, 816px 1891px #fff, 1375px 357px #fff,
      1567px 568px #fff, 490px 1579px #fff, 572px 761px #fff, 2107px 562px #fff,
      605px 1810px #fff, 2438px 1975px #fff, 1732px 1303px #fff,
      19px 1810px #fff, 2434px 1703px #fff, 2186px 68px #fff, 1768px 1544px #fff,
      2375px 1565px #fff, 876px 1384px #fff, 1841px 2223px #fff,
      23px 1322px #fff, 2178px 1999px #fff, 731px 899px #fff, 1174px 1954px #fff,
      2196px 844px #fff, 2153px 1505px #fff, 1262px 441px #fff,
      540px 1083px #fff, 665px 492px #fff, 1487px 2128px #fff, 597px 1358px #fff,
      1530px 481px #fff, 1744px 829px #fff, 733px 953px #fff, 1720px 1451px #fff,
      1555px 95px #fff, 278px 285px #fff, 1987px 636px #fff, 2268px 1700px #fff,
      1632px 1180px #fff, 2022px 1404px #fff, 166px 846px #fff,
      2218px 1673px #fff, 1698px 1376px #fff, 1500px 2461px #fff,
      1072px 1698px #fff, 626px 2031px #fff, 610px 1649px #fff,
      1728px 637px #fff, 2457px 741px #fff, 2501px 127px #fff, 473px 2557px #fff,
      893px 1995px #fff, 1396px 1124px #fff, 91px 1612px #fff, 2160px 80px #fff,
      1741px 1267px #fff, 2435px 2427px #fff, 2167px 375px #fff,
      1249px 2092px #fff, 646px 708px #fff, 35px 471px #fff, 583px 1383px #fff,
      113px 322px #fff, 1212px 1707px #fff, 219px 129px #fff, 2197px 1274px #fff,
      1183px 1515px #fff, 1269px 532px #fff, 2091px 572px #fff,
      448px 1813px #fff, 1906px 1796px #fff, 1318px 25px #fff,
      2186px 1360px #fff, 315px 869px #fff, 546px 1098px #fff, 62px 319px #fff,
      321px 761px #fff, 1044px 1926px #fff, 185px 1182px #fff,
      1565px 1078px #fff, 2393px 1476px #fff, 1549px 69px #fff,
      1818px 2489px #fff, 1308px 1657px #fff, 1953px 1103px #fff,
      1011px 1390px #fff, 1113px 2283px #fff, 282px 1350px #fff,
      1733px 1195px #fff, 1856px 643px #fff, 1201px 666px #fff,
      1573px 1487px #fff, 2262px 2258px #fff, 2021px 1937px #fff,
      1288px 2557px #fff, 1665px 369px #fff, 768px 1079px #fff, 751px 477px #fff,
      2176px 1059px #fff, 2558px 1637px #fff, 2231px 868px #fff,
      2012px 448px #fff, 685px 1356px #fff, 1024px 2239px #fff,
      492px 2432px #fff, 1636px 707px #fff, 2229px 955px #fff, 2466px 93px #fff,
      560px 841px #fff, 2313px 2524px #fff, 817px 1739px #fff,
      1141px 1879px #fff, 1294px 597px #fff, 2276px 1126px #fff,
      2387px 1523px #fff, 2102px 704px #fff, 385px 1713px #fff,
      1476px 2196px #fff, 2263px 195px #fff, 620px 1160px #fff, 1898px 70px #fff,
      285px 2052px #fff, 2278px 1309px #fff, 202px 1353px #fff,
      1442px 439px #fff, 2493px 363px #fff, 588px 1269px #fff,
      2039px 1293px #fff, 404px 491px #fff, 644px 419px #fff, 680px 1346px #fff,
      290px 1245px #fff, 2191px 1242px #fff, 1601px 1108px #fff,
      701px 2244px #fff, 1753px 2171px #fff, 1784px 39px #fff, 27px 1525px #fff,
      1665px 23px #fff, 1441px 1153px #fff, 2539px 1935px #fff,
      801px 2262px #fff, 716px 2140px #fff, 1705px 2101px #fff, 753px 435px #fff,
      2083px 2289px #fff, 483px 1824px #fff, 2106px 1671px #fff,
      1925px 694px #fff, 1594px 599px #fff, 826px 2516px #fff, 2530px 380px #fff,
      2234px 869px #fff, 1514px 855px #fff, 402px 2416px #fff, 751px 1301px #fff,
      135px 1961px #fff, 1292px 2319px #fff, 65px 1360px #fff,
      2545px 2373px #fff, 2044px 952px #fff, 948px 335px #fff, 484px 1681px #fff,
      1012px 357px #fff, 630px 1825px #fff, 803px 288px #fff, 1148px 221px #fff,
      46px 2304px #fff, 512px 553px #fff, 1058px 659px #fff, 1386px 1352px #fff,
      709px 2262px #fff, 779px 1648px #fff, 1516px 2320px #fff,
      1454px 860px #fff, 295px 354px #fff, 703px 2533px #fff, 1602px 1042px #fff,
      96px 1909px #fff, 928px 1485px #fff, 2209px 318px #fff, 2359px 657px #fff,
      851px 8px #fff, 1565px 1089px #fff, 1792px 1918px #fff, 546px 868px #fff,
      406px 898px #fff, 2482px 41px #fff, 1696px 764px #fff, 952px 779px #fff,
      1588px 1344px #fff, 1919px 1421px #fff, 1582px 539px #fff,
      2504px 1146px #fff, 827px 523px #fff, 2241px 576px #fff, 924px 1299px #fff,
      1472px 167px #fff, 678px 2514px #fff, 1726px 800px #fff,
      2300px 2335px #fff, 64px 1673px #fff, 837px 2475px #fff, 2228px 204px #fff,
      1346px 1838px #fff, 1266px 1100px #fff, 560px 227px #fff,
      398px 1548px #fff, 892px 1944px #fff, 1048px 559px #fff, 889px 2154px #fff,
      2474px 1942px #fff, 18px 1078px #fff, 2025px 977px #fff, 70px 570px #fff,
      1674px 419px #fff, 1709px 691px #fff, 2376px 1649px #fff, 60px 1077px #fff,
      1738px 528px #fff, 1416px 83px #fff, 819px 609px #fff, 2224px 1826px #fff,
      1865px 1015px #fff, 2063px 1430px #fff, 795px 731px #fff,
      1335px 394px #fff, 769px 1569px #fff, 815px 452px #fff, 2075px 210px #fff,
      1569px 327px #fff, 2187px 933px #fff, 796px 2417px #fff, 817px 2381px #fff,
      1555px 2513px #fff, 879px 682px #fff, 1525px 1104px #fff,
      1560px 1693px #fff, 1314px 1573px #fff, 1870px 408px #fff,
      509px 2332px #fff, 27px 387px #fff, 1023px 1766px #fff, 1732px 830px #fff,
      1838px 173px #fff, 782px 2111px #fff, 2199px 200px #fff, 1492px 258px #fff,
      2031px 223px #fff, 481px 1968px #fff, 1443px 2192px #fff,
      2242px 2329px #fff, 398px 832px #fff, 773px 1577px #fff, 1299px 412px #fff,
      2267px 402px #fff, 511px 213px #fff, 1996px 536px #fff, 2533px 2192px #fff,
      1735px 962px #fff, 1294px 684px #fff, 863px 1750px #fff, 938px 1956px #fff,
      1375px 638px #fff, 351px 384px #fff, 2485px 533px #fff, 2269px 596px #fff,
      1594px 2282px #fff, 1614px 251px #fff, 493px 986px #fff, 2365px 349px #fff,
      1998px 2354px #fff, 2220px 1143px #fff, 349px 1456px #fff,
      1458px 710px #fff, 911px 1276px #fff, 401px 2080px #fff, 111px 1412px #fff,
      2271px 832px #fff, 2190px 1992px #fff, 2439px 1371px #fff,
      2478px 1322px #fff, 628px 90px #fff, 1px 2339px #fff, 158px 1164px #fff,
      2187px 2421px #fff, 2516px 360px #fff, 2273px 2515px #fff,
      1854px 971px #fff, 1472px 280px #fff, 318px 2268px #fff, 840px 1078px #fff,
      241px 255px #fff, 52px 1542px #fff, 1641px 861px #fff, 1911px 2267px #fff,
      1667px 1376px #fff, 1400px 339px #fff, 2511px 977px #fff,
      2380px 1920px #fff, 636px 816px #fff, 1465px 2204px #fff,
      788px 2187px #fff, 1106px 813px #fff, 1849px 303px #fff, 2220px 651px #fff,
      1540px 2557px #fff, 230px 652px #fff, 2058px 1415px #fff, 52px 1388px #fff,
      2150px 2423px #fff, 2221px 1324px #fff, 610px 738px #fff,
      2075px 1624px #fff, 2410px 1803px #fff, 240px 735px #fff,
      2477px 654px #fff, 954px 360px #fff, 95px 1031px #fff, 1203px 1945px #fff,
      83px 424px #fff, 236px 816px #fff, 936px 497px #fff, 541px 2081px #fff,
      1832px 554px #fff, 1123px 82px #fff, 1102px 1153px #fff,
      2180px 2320px #fff, 246px 1618px #fff, 792px 2486px #fff,
      352px 1654px #fff, 377px 1406px #fff, 1611px 2234px #fff,
      1700px 558px #fff, 2234px 1977px #fff, 1122px 1155px #fff,
      1969px 2172px #fff, 1027px 285px #fff, 489px 2553px #fff,
      337px 1580px #fff, 1182px 900px #fff, 2199px 880px #fff, 1033px 652px #fff,
      331px 1854px #fff, 2306px 2065px #fff, 2338px 932px #fff,
      1446px 2456px #fff, 1668px 1019px #fff, 838px 896px #fff,
      1996px 711px #fff, 2306px 1345px #fff, 166px 2032px #fff, 752px 231px #fff,
      2172px 2006px #fff, 802px 959px #fff, 183px 738px #fff, 1993px 2233px #fff,
      1576px 183px #fff, 1898px 769px #fff, 2329px 535px #fff, 704px 2187px #fff,
      1564px 1333px #fff, 1653px 2403px #fff, 2408px 2385px #fff,
      2398px 770px #fff, 640px 1094px #fff, 783px 1568px #fff, 177px 1280px #fff,
      313px 2148px #fff, 556px 636px #fff, 1526px 432px #fff, 848px 530px #fff,
      2227px 2077px #fff, 1040px 751px #fff, 346px 1693px #fff, 2512px 52px #fff,
      2506px 423px #fff, 1917px 1705px #fff, 1839px 2354px #fff,
      2307px 447px #fff, 413px 168px #fff, 2100px 1525px #fff,
      1747px 1739px #fff, 1083px 1904px #fff, 1265px 2122px #fff,
      177px 2550px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-4:after {
    box-shadow: 0px 0px #fff, 1497px 767px #fff, 1066px 815px #fff,
      1206px 2108px #fff, 801px 407px #fff, 2206px 1493px #fff,
      1693px 1601px #fff, 1445px 1292px #fff, 2496px 180px #fff,
      1789px 445px #fff, 2309px 1132px #fff, 2119px 1434px #fff,
      565px 1767px #fff, 1631px 707px #fff, 7px 529px #fff, 725px 251px #fff,
      705px 1799px #fff, 2472px 1096px #fff, 2028px 896px #fff,
      1190px 1262px #fff, 1250px 237px #fff, 1167px 2531px #fff,
      1775px 660px #fff, 69px 1810px #fff, 140px 1757px #fff, 719px 265px #fff,
      2210px 2128px #fff, 1529px 1793px #fff, 2056px 301px #fff,
      603px 2046px #fff, 1400px 614px #fff, 1024px 2262px #fff,
      2540px 1360px #fff, 1205px 987px #fff, 18px 2046px #fff,
      2031px 1975px #fff, 521px 1781px #fff, 410px 1033px #fff,
      874px 2400px #fff, 1023px 437px #fff, 1868px 2200px #fff, 772px 342px #fff,
      1657px 2270px #fff, 1048px 616px #fff, 1944px 2152px #fff,
      975px 476px #fff, 1169px 2456px #fff, 1249px 1219px #fff,
      1971px 1655px #fff, 1448px 1411px #fff, 2537px 1609px #fff,
      9px 1765px #fff, 827px 1429px #fff, 2084px 2347px #fff, 1517px 662px #fff,
      1622px 2368px #fff, 327px 422px #fff, 1235px 111px #fff,
      2005px 1645px #fff, 2256px 438px #fff, 1317px 93px #fff, 573px 398px #fff,
      1925px 331px #fff, 83px 1636px #fff, 2161px 379px #fff, 662px 337px #fff,
      339px 2541px #fff, 1414px 1432px #fff, 742px 280px #fff, 300px 256px #fff,
      2396px 442px #fff, 2230px 974px #fff, 2392px 1159px #fff, 801px 18px #fff,
      1366px 1637px #fff, 472px 82px #fff, 718px 666px #fff, 73px 1627px #fff,
      2187px 1639px #fff, 1886px 1369px #fff, 2096px 1223px #fff,
      1248px 1953px #fff, 109px 2175px #fff, 1928px 1020px #fff,
      36px 1772px #fff, 1038px 1938px #fff, 2552px 893px #fff, 544px 2340px #fff,
      591px 1367px #fff, 454px 947px #fff, 1482px 1647px #fff, 344px 2127px #fff,
      1389px 2119px #fff, 629px 1873px #fff, 1433px 2418px #fff,
      212px 1773px #fff, 279px 1936px #fff, 1854px 1304px #fff, 73px 615px #fff,
      761px 125px #fff, 902px 599px #fff, 2140px 944px #fff, 413px 2449px #fff,
      1794px 1180px #fff, 1229px 1866px #fff, 2450px 308px #fff,
      1794px 625px #fff, 1026px 179px #fff, 144px 2293px #fff, 639px 1998px #fff,
      1250px 858px #fff, 1865px 881px #fff, 785px 2200px #fff, 1860px 411px #fff,
      1362px 74px #fff, 595px 2290px #fff, 1586px 1117px #fff, 576px 1923px #fff,
      1975px 94px #fff, 258px 458px #fff, 2122px 1565px #fff, 2147px 70px #fff,
      1664px 206px #fff, 2522px 1115px #fff, 1095px 853px #fff,
      533px 1931px #fff, 559px 2180px #fff, 947px 1821px #fff, 362px 1233px #fff,
      1245px 21px #fff, 867px 1433px #fff, 827px 1671px #fff, 2130px 982px #fff,
      1448px 1990px #fff, 1147px 129px #fff, 1583px 123px #fff,
      1478px 557px #fff, 552px 1324px #fff, 2407px 1194px #fff,
      153px 2417px #fff, 2320px 1619px #fff, 1765px 2471px #fff,
      1179px 412px #fff, 188px 547px #fff, 552px 1321px #fff, 1808px 2143px #fff,
      2255px 1717px #fff, 2327px 2406px #fff, 571px 2449px #fff,
      2142px 779px #fff, 1558px 1365px #fff, 984px 10px #fff, 1209px 1267px #fff,
      1883px 750px #fff, 1536px 426px #fff, 974px 93px #fff, 952px 439px #fff,
      2190px 1513px #fff, 1808px 2311px #fff, 1351px 1967px #fff,
      275px 875px #fff, 1616px 749px #fff, 578px 1603px #fff, 694px 663px #fff,
      1386px 824px #fff, 1662px 606px #fff, 1851px 833px #fff,
      2459px 2209px #fff, 625px 1958px #fff, 2072px 2467px #fff,
      1179px 274px #fff, 647px 5px #fff, 2343px 2255px #fff, 2308px 1600px #fff,
      1156px 2351px #fff, 2160px 364px #fff, 1935px 1167px #fff,
      955px 242px #fff, 856px 2473px #fff, 1887px 942px #fff, 1140px 2163px #fff,
      391px 1191px #fff, 2260px 336px #fff, 785px 1009px #fff, 165px 1899px #fff,
      1129px 2290px #fff, 1333px 384px #fff, 610px 596px #fff,
      1745px 1109px #fff, 1655px 2163px #fff, 989px 1906px #fff,
      1911px 295px #fff, 563px 1360px #fff, 922px 519px #fff, 2393px 1306px #fff,
      1964px 407px #fff, 114px 1254px #fff, 604px 1760px #fff,
      1973px 1835px #fff, 1451px 296px #fff, 949px 1835px #fff,
      273px 1542px #fff, 2319px 980px #fff, 1445px 2474px #fff,
      1147px 223px #fff, 658px 768px #fff, 2051px 66px #fff, 157px 1207px #fff,
      1606px 134px #fff, 1734px 1946px #fff, 2201px 884px #fff,
      2423px 1234px #fff, 1467px 1918px #fff, 2366px 2387px #fff,
      2468px 2058px #fff, 1558px 605px #fff, 340px 1058px #fff,
      2370px 245px #fff, 1742px 341px #fff, 921px 1837px #fff,
      1051px 1153px #fff, 207px 1961px #fff, 1028px 2468px #fff,
      2013px 1413px #fff, 1756px 988px #fff, 1624px 1885px #fff,
      1596px 924px #fff, 699px 2455px #fff, 718px 766px #fff, 1341px 2537px #fff,
      2522px 1167px #fff, 1227px 1503px #fff, 1682px 1927px #fff,
      2410px 1049px #fff, 2435px 1912px #fff, 894px 2436px #fff,
      2451px 1497px #fff, 2246px 1437px #fff, 2224px 1190px #fff,
      1259px 417px #fff, 2283px 187px #fff, 2006px 2001px #fff,
      1283px 144px #fff, 1611px 2448px #fff, 1462px 1767px #fff,
      993px 1837px #fff, 672px 1534px #fff, 1678px 1113px #fff,
      1299px 1398px #fff, 731px 277px #fff, 2152px 2102px #fff,
      1540px 539px #fff, 2394px 985px #fff, 1636px 866px #fff, 1164px 691px #fff,
      1793px 1705px #fff, 2335px 2500px #fff, 757px 610px #fff,
      1999px 1561px #fff, 2073px 1094px #fff, 1270px 396px #fff,
      82px 1863px #fff, 1127px 250px #fff, 767px 2297px #fff, 335px 2206px #fff,
      544px 1595px #fff, 131px 2162px #fff, 2116px 1818px #fff,
      1687px 2293px #fff, 2190px 565px #fff, 2490px 2501px #fff,
      767px 222px #fff, 2264px 1484px #fff, 971px 498px #fff, 170px 1934px #fff,
      1455px 1590px #fff, 1483px 30px #fff, 1275px 37px #fff, 992px 238px #fff,
      2136px 597px #fff, 143px 371px #fff, 769px 2462px #fff, 1737px 1752px #fff,
      2248px 196px #fff, 1103px 482px #fff, 1132px 891px #fff,
      2333px 1648px #fff, 2472px 1496px #fff, 1046px 2458px #fff,
      231px 862px #fff, 334px 24px #fff, 348px 1189px #fff, 1333px 2225px #fff,
      2524px 356px #fff, 17px 1735px #fff, 1294px 2373px #fff, 281px 2346px #fff,
      199px 1436px #fff, 548px 32px #fff, 696px 1975px #fff, 1748px 827px #fff,
      1814px 1292px #fff, 175px 1643px #fff, 556px 2345px #fff, 58px 2422px #fff,
      885px 1220px #fff, 2203px 876px #fff, 2534px 1426px #fff,
      528px 1005px #fff, 2419px 463px #fff, 915px 1556px #fff, 966px 1324px #fff,
      1895px 1206px #fff, 2374px 374px #fff, 2071px 624px #fff,
      1729px 1298px #fff, 2293px 2083px #fff, 2341px 1087px #fff,
      138px 1735px #fff, 799px 1950px #fff, 696px 2477px #fff, 178px 1141px #fff,
      2295px 2045px #fff, 1486px 754px #fff, 411px 1239px #fff,
      991px 1800px #fff, 1274px 381px #fff, 30px 225px #fff, 268px 271px #fff,
      1659px 396px #fff, 2486px 2177px #fff, 1253px 2286px #fff,
      2204px 567px #fff, 329px 16px #fff, 1473px 2002px #fff, 1670px 1581px #fff,
      350px 1851px #fff, 1388px 983px #fff, 1136px 1115px #fff,
      1019px 419px #fff, 1101px 1626px #fff, 613px 894px #fff,
      1428px 2113px #fff, 2290px 1054px #fff, 42px 2256px #fff,
      2318px 1736px #fff, 1657px 1079px #fff, 1058px 1676px #fff,
      723px 2396px #fff, 584px 634px #fff, 1353px 832px #fff, 8px 1270px #fff,
      773px 437px #fff, 706px 2264px #fff, 1421px 1754px #fff, 169px 2446px #fff,
      304px 595px #fff, 341px 1301px #fff, 187px 2384px #fff, 374px 1202px #fff,
      1829px 1294px #fff, 1248px 513px #fff, 1701px 1778px #fff,
      1728px 1249px #fff, 1784px 83px #fff, 531px 2530px #fff, 71px 821px #fff,
      1997px 1664px #fff, 1950px 292px #fff, 2102px 785px #fff,
      1310px 1446px #fff, 343px 1164px #fff, 687px 2338px #fff,
      1461px 2217px #fff, 32px 2545px #fff, 2044px 2481px #fff, 512px 69px #fff,
      484px 771px #fff, 2106px 2443px #fff, 1909px 814px #fff,
      1986px 1494px #fff, 278px 2184px #fff, 2305px 2182px #fff,
      2270px 1013px #fff, 965px 1178px #fff, 2355px 2127px #fff,
      1523px 736px #fff, 794px 144px #fff, 309px 1650px #fff, 1243px 249px #fff,
      140px 2257px #fff, 1071px 529px #fff, 691px 1578px #fff, 1546px 261px #fff,
      1797px 2550px #fff, 9px 121px #fff, 1097px 240px #fff, 1657px 604px #fff,
      533px 2211px #fff, 310px 1156px #fff, 1305px 722px #fff;
    height: 1px;
    width: 1px;
  }

  @-webkit-keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }

  @keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }
</style>

]]></content></entry><entry><title type="html">我的小伙伴们</title><link href="https://thiscute.world/friends/"/><id>https://thiscute.world/friends/</id><author><name>ryan4yin</name></author><published>2021-01-16T00:24:31+08:00</published><updated>2021-01-16T00:24:31+08:00</updated><content type="html"><![CDATA[<p><img
        class="lazyload"
        data-src="letter-from-friend.webp"
        data-srcset="/friends/letter-from-friend.webp, letter-from-friend.webp 1.5x, /friends/letter-from-friend.webp 2x"
        data-sizes="auto"
        alt="/friends/letter-from-friend.webp"
        title="一封纸笺"></p>

<div class="animation-wrapper">
  <div class="particle particle-1"></div>
  <div class="particle particle-2"></div>
  <div class="particle particle-3"></div>
  <div class="particle particle-4"></div>
</div>

<style>
   
   

  .animation-wrapper {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -100;
  }

  .particle,
  .particle:after {
    background: transparent;
  }

  .particle:after {
    position: absolute;
    content: "";
    top: 2560px;
  }

  .particle-1 {
    -webkit-animation: animParticle 60s linear infinite;
    animation: animParticle 60s linear infinite;
    box-shadow: 0px 0px #fff, 1231px 1530px #fff, 336px 2471px #fff,
      2385px 128px #fff, 2436px 1283px #fff, 549px 681px #fff,
      1775px 1144px #fff, 238px 1396px #fff, 1330px 1558px #fff,
      2060px 342px #fff, 1986px 1672px #fff, 1532px 702px #fff,
      1313px 1459px #fff, 2406px 1616px #fff, 1529px 802px #fff,
      1267px 680px #fff, 2258px 2109px #fff, 1325px 22px #fff,
      1578px 1045px #fff, 945px 2256px #fff, 1400px 1441px #fff,
      1652px 2152px #fff, 2513px 969px #fff, 2192px 1352px #fff,
      793px 334px #fff, 1371px 1086px #fff, 2408px 1898px #fff, 475px 840px #fff,
      539px 1108px #fff, 556px 1499px #fff, 643px 122px #fff, 2370px 1975px #fff,
      1196px 1786px #fff, 308px 1834px #fff, 1957px 1569px #fff,
      875px 339px #fff, 562px 412px #fff, 1187px 2258px #fff, 1406px 1824px #fff,
      1172px 1792px #fff, 235px 1489px #fff, 2081px 878px #fff, 925px 176px #fff,
      953px 1829px #fff, 38px 48px #fff, 1976px 1994px #fff, 1524px 1567px #fff,
      1397px 1141px #fff, 2014px 1773px #fff, 1638px 1832px #fff,
      1150px 465px #fff, 1212px 1854px #fff, 122px 20px #fff, 2493px 2361px #fff,
      2221px 194px #fff, 480px 2020px #fff, 2340px 403px #fff,
      1975px 2507px #fff, 1434px 142px #fff, 963px 871px #fff,
      2379px 1765px #fff, 2346px 100px #fff, 1931px 1308px #fff,
      527px 814px #fff, 549px 1732px #fff, 943px 886px #fff, 1592px 2277px #fff,
      1339px 810px #fff, 871px 2016px #fff, 2121px 763px #fff,
      1962px 1114px #fff, 2498px 550px #fff, 107px 586px #fff, 316px 1033px #fff,
      2104px 2120px #fff, 1933px 1786px #fff, 1377px 2457px #fff,
      2250px 1010px #fff, 1314px 2316px #fff, 1339px 947px #fff,
      122px 1014px #fff, 558px 2354px #fff, 1250px 1790px #fff,
      1185px 2144px #fff, 2432px 158px #fff, 1911px 2148px #fff,
      1177px 804px #fff, 2504px 1254px #fff, 617px 1084px #fff,
      1959px 1325px #fff, 2394px 2081px #fff, 395px 735px #fff,
      221px 1891px #fff, 652px 2245px #fff, 1225px 1023px #fff,
      1542px 2053px #fff, 876px 2178px #fff, 479px 1915px #fff,
      2297px 1799px #fff, 2160px 387px #fff, 160px 358px #fff,
      1122px 2164px #fff, 2056px 1402px #fff, 2133px 1470px #fff,
      1508px 1865px #fff, 250px 2157px #fff, 715px 1452px #fff,
      2095px 1539px #fff, 1860px 1450px #fff, 185px 2013px #fff,
      1855px 1878px #fff, 690px 2520px #fff, 2250px 838px #fff,
      1547px 1752px #fff, 1103px 615px #fff, 151px 262px #fff, 1630px 577px #fff,
      769px 2448px #fff, 1938px 2347px #fff, 700px 1634px #fff,
      2105px 2053px #fff, 1498px 49px #fff, 799px 512px #fff, 1278px 744px #fff,
      2301px 364px #fff, 1059px 2066px #fff, 2116px 2424px #fff,
      1884px 1046px #fff, 699px 1101px #fff, 62px 1893px #fff, 370px 161px #fff,
      298px 1288px #fff, 1972px 2211px #fff, 1834px 2350px #fff,
      1591px 1118px #fff, 1343px 1730px #fff, 706px 850px #fff,
      317px 1171px #fff, 1395px 2529px #fff, 1040px 2523px #fff,
      793px 2535px #fff, 2180px 142px #fff, 2016px 2511px #fff,
      1032px 1204px #fff, 499px 625px #fff, 130px 2064px #fff, 1371px 758px #fff,
      1045px 2018px #fff, 1954px 309px #fff, 1445px 2514px #fff,
      839px 1523px #fff, 920px 238px #fff, 1421px 1105px #fff, 668px 1517px #fff,
      2045px 2344px #fff, 2465px 1619px #fff, 403px 48px #fff,
      1142px 1102px #fff, 2066px 1803px #fff, 658px 1744px #fff,
      721px 2062px #fff, 2180px 827px #fff, 2310px 111px #fff, 935px 808px #fff,
      1121px 1108px #fff, 1424px 1998px #fff, 821px 1317px #fff,
      2425px 1354px #fff, 305px 1422px #fff, 169px 1559px #fff,
      1850px 425px #fff, 719px 1507px #fff, 1650px 1803px #fff, 275px 402px #fff,
      1038px 772px #fff, 404px 105px #fff, 78px 2119px #fff, 133px 110px #fff,
      2559px 944px #fff, 688px 212px #fff, 869px 2266px #fff, 983px 840px #fff,
      1914px 2154px #fff, 1376px 941px #fff, 2064px 739px #fff,
      1979px 1255px #fff, 592px 1175px #fff, 283px 253px #fff, 696px 2501px #fff,
      1561px 1505px #fff, 745px 2233px #fff, 1180px 1104px #fff,
      1046px 1573px #fff, 1842px 2374px #fff, 1199px 2423px #fff,
      1680px 1359px #fff, 2020px 626px #fff, 1226px 1082px #fff,
      1894px 1824px #fff, 451px 2216px #fff, 544px 1263px #fff, 408px 4px #fff,
      1883px 1020px #fff, 1917px 1777px #fff, 1353px 1808px #fff,
      425px 85px #fff, 1165px 1787px #fff, 561px 1978px #fff, 712px 874px #fff,
      231px 2176px #fff, 516px 8px #fff, 199px 742px #fff, 584px 2388px #fff,
      434px 1584px #fff, 813px 2391px #fff, 1427px 2254px #fff,
      1894px 2083px #fff, 521px 2507px #fff, 391px 352px #fff, 664px 245px #fff,
      179px 13px #fff, 1784px 1939px #fff, 438px 1285px #fff, 975px 1780px #fff,
      1285px 1554px #fff, 924px 2301px #fff, 2340px 1621px #fff,
      1844px 2336px #fff, 640px 637px #fff, 1279px 1236px #fff,
      2419px 2546px #fff, 395px 1790px #fff, 959px 2383px #fff,
      1449px 650px #fff, 2378px 747px #fff, 1360px 24px #fff, 1726px 1609px #fff,
      1632px 1945px #fff, 2295px 2515px #fff, 594px 1339px #fff,
      351px 1327px #fff, 1972px 1942px #fff, 2092px 1604px #fff,
      1580px 1123px #fff, 1511px 2062px #fff, 1551px 1208px #fff,
      2014px 144px #fff, 2373px 2160px #fff, 2041px 823px #fff,
      1682px 1919px #fff, 2224px 338px #fff, 1224px 461px #fff,
      2256px 664px #fff, 2505px 1987px #fff, 2308px 2021px #fff,
      71px 2249px #fff, 1510px 944px #fff, 2148px 726px #fff, 535px 2236px #fff,
      793px 739px #fff, 930px 2533px #fff, 1353px 192px #fff, 1691px 998px #fff,
      1675px 504px #fff, 1632px 2410px #fff, 20px 1985px #fff, 701px 1622px #fff,
      2181px 1612px #fff, 184px 722px #fff, 720px 1488px #fff,
      2300px 1201px #fff, 2173px 402px #fff, 262px 560px #fff, 1379px 347px #fff,
      958px 1285px #fff, 958px 46px #fff, 2157px 1926px #fff, 1018px 1302px #fff,
      231px 1934px #fff, 2407px 1365px #fff, 2483px 1370px #fff,
      1038px 1917px #fff, 1218px 2256px #fff, 1702px 64px #fff,
      2141px 2350px #fff, 851px 2437px #fff, 402px 566px #fff, 2px 1430px #fff,
      341px 1849px #fff, 2210px 1148px #fff, 1071px 2370px #fff,
      1476px 306px #fff, 1857px 395px #fff, 1157px 349px #fff, 1916px 689px #fff,
      1800px 1989px #fff, 477px 2268px #fff, 184px 1033px #fff, 597px 720px #fff,
      52px 1638px #fff, 1338px 1170px #fff, 1190px 1946px #fff,
      981px 1481px #fff, 2096px 715px #fff, 1861px 658px #fff,
      1139px 1485px #fff, 1471px 1029px #fff, 1639px 424px #fff,
      558px 2453px #fff, 452px 987px #fff, 630px 1639px #fff, 2353px 2553px #fff,
      1847px 51px #fff, 884px 1805px #fff, 2280px 1759px #fff, 1490px 491px #fff,
      747px 1064px #fff, 2220px 1118px #fff, 2080px 747px #fff,
      1438px 1230px #fff, 295px 1674px #fff, 1294px 291px #fff,
      1148px 1742px #fff, 670px 1968px #fff, 2544px 741px #fff,
      426px 2035px #fff, 2187px 2309px #fff, 178px 2227px #fff,
      768px 2459px #fff, 1580px 1283px #fff, 1740px 200px #fff,
      352px 1310px #fff, 581px 602px #fff, 1439px 274px #fff, 2002px 1410px #fff,
      225px 1490px #fff, 2292px 1251px #fff, 1854px 760px #fff, 704px 221px #fff,
      385px 1883px #fff, 2352px 1092px #fff, 792px 1590px #fff,
      672px 1419px #fff, 1971px 497px #fff, 2505px 1312px #fff,
      102px 2102px #fff, 2204px 1555px #fff, 2000px 1593px #fff,
      2173px 1802px #fff, 1415px 237px #fff, 895px 1877px #fff,
      710px 1154px #fff, 251px 2478px #fff, 1266px 1534px #fff,
      2186px 1466px #fff, 1518px 2448px #fff, 515px 2525px #fff,
      1634px 2324px #fff, 1706px 683px #fff, 292px 1485px #fff,
      872px 2046px #fff, 658px 437px #fff, 2367px 1938px #fff,
      2018px 2543px #fff, 551px 542px #fff, 1711px 2307px #fff,
      2467px 999px #fff, 2046px 630px #fff, 1307px 2344px #fff,
      1893px 1311px #fff, 2536px 2425px #fff, 1777px 19px #fff,
      1845px 2044px #fff, 1261px 454px #fff, 2333px 2299px #fff,
      1019px 2349px #fff, 2074px 1014px #fff, 806px 1290px #fff,
      2152px 637px #fff, 980px 534px #fff, 199px 1781px #fff, 2091px 1219px #fff,
      917px 1990px #fff, 172px 714px #fff, 395px 2339px #fff, 35px 764px #fff,
      2110px 1796px #fff, 62px 996px #fff, 1340px 490px #fff, 1950px 797px #fff,
      2116px 72px #fff, 671px 2088px #fff, 2023px 1819px #fff, 90px 1219px #fff,
      1685px 282px #fff, 1843px 873px #fff, 100px 1446px #fff,
      2118px 1215px #fff, 1973px 1591px #fff, 2185px 1292px #fff,
      1270px 804px #fff, 2171px 1348px #fff, 2268px 6px #fff, 1580px 651px #fff,
      1806px 1438px #fff, 2435px 181px #fff, 437px 578px #fff,
      1924px 1356px #fff, 602px 1111px #fff, 2455px 1226px #fff,
      1887px 392px #fff, 730px 1492px #fff, 697px 2141px #fff, 852px 466px #fff,
      1px 1641px #fff, 788px 514px #fff, 183px 321px #fff, 932px 1224px #fff,
      1102px 692px #fff, 1587px 976px #fff, 1395px 2290px #fff,
      144px 2480px #fff, 623px 2164px #fff, 2098px 2043px #fff,
      336px 1662px #fff, 2191px 2279px #fff, 577px 2027px #fff,
      2215px 2483px #fff, 218px 2083px #fff, 2182px 122px #fff, 659px 791px #fff,
      317px 531px #fff, 980px 1456px #fff, 2533px 578px #fff, 595px 2478px #fff,
      2200px 1766px #fff, 2107px 1970px #fff, 1935px 1295px #fff,
      1822px 1691px #fff, 787px 1129px #fff, 1051px 718px #fff,
      915px 2488px #fff, 2037px 1394px #fff, 341px 319px #fff, 1843px 410px #fff,
      1501px 963px #fff, 404px 297px #fff, 1234px 1644px #fff, 883px 74px #fff,
      491px 2414px #fff, 334px 386px #fff, 951px 1852px #fff, 2194px 274px #fff,
      1424px 330px #fff, 1636px 995px #fff, 1566px 2450px #fff,
      544px 1430px #fff, 630px 1056px #fff, 925px 1203px #fff, 362px 101px #fff,
      1442px 834px #fff, 1786px 2360px #fff, 1611px 276px #fff,
      1715px 2151px #fff, 652px 2192px #fff, 589px 928px #fff,
      2460px 1658px #fff, 2408px 1139px #fff, 967px 1843px #fff,
      379px 720px #fff, 1832px 1057px #fff, 2234px 1836px #fff,
      436px 2526px #fff, 1327px 781px #fff, 1835px 768px #fff, 1037px 95px #fff,
      1422px 405px #fff, 1880px 758px #fff, 2291px 1828px #fff,
      2053px 2261px #fff, 121px 2256px #fff, 1460px 801px #fff, 64px 2344px #fff,
      97px 83px #fff, 2046px 1880px #fff, 866px 1852px #fff, 1317px 2444px #fff,
      1139px 168px #fff, 2413px 2333px #fff, 2289px 1063px #fff,
      2317px 816px #fff, 1773px 1366px #fff, 916px 1909px #fff,
      1303px 2052px #fff, 1406px 1299px #fff, 439px 2455px #fff,
      1113px 188px #fff, 1504px 462px #fff, 1376px 2373px #fff,
      495px 2084px #fff, 2198px 626px #fff, 2119px 1814px #fff, 86px 2541px #fff,
      1107px 854px #fff, 826px 1258px #fff, 2234px 1899px #fff, 88px 807px #fff,
      1982px 2487px #fff, 2035px 196px #fff, 148px 2103px #fff, 36px 2551px #fff,
      1842px 1164px #fff, 1858px 232px #fff, 405px 989px #fff,
      2432px 1061px #fff, 456px 1701px #fff, 427px 11px #fff, 588px 1308px #fff,
      1541px 620px #fff, 1827px 538px #fff, 1511px 1873px #fff,
      1485px 2156px #fff, 1287px 531px #fff, 1139px 1362px #fff,
      1621px 1023px #fff, 2380px 446px #fff, 649px 868px #fff, 596px 1417px #fff,
      1659px 560px #fff, 2340px 920px #fff, 2231px 1604px #fff,
      1726px 2117px #fff, 2048px 2156px #fff, 1505px 1588px #fff,
      1559px 723px #fff, 1130px 1943px #fff, 271px 584px #fff,
      1217px 2093px #fff, 1312px 552px #fff, 2557px 2342px #fff, 652px 73px #fff,
      1501px 2455px #fff, 1286px 1648px #fff, 838px 1551px #fff,
      1652px 1712px #fff, 1224px 160px #fff, 1928px 524px #fff, 899px 292px #fff,
      944px 1720px #fff, 1785px 1255px #fff, 104px 96px #fff, 1964px 546px #fff,
      2195px 1470px #fff, 893px 1423px #fff, 406px 341px #fff, 1px 2175px #fff,
      1044px 2022px #fff, 1336px 990px #fff, 1592px 788px #fff,
      2338px 710px #fff, 2401px 859px #fff, 1095px 137px #fff, 218px 90px #fff,
      2235px 2313px #fff, 1564px 162px #fff, 1900px 1265px #fff,
      199px 346px #fff, 1639px 360px #fff, 1795px 387px #fff, 926px 1493px #fff,
      648px 86px #fff, 802px 691px #fff, 1733px 349px #fff, 86px 91px #fff,
      1357px 183px #fff, 883px 78px #fff, 282px 2276px #fff, 779px 2104px #fff,
      48px 2155px #fff, 1783px 1891px #fff, 1794px 1397px #fff,
      695px 1358px #fff, 290px 1509px #fff, 136px 169px #fff, 2109px 1713px #fff,
      1595px 2295px #fff, 1346px 253px #fff, 2439px 473px #fff,
      700px 2460px #fff, 1594px 1415px #fff, 1842px 834px #fff,
      1645px 553px #fff, 1269px 433px #fff, 1686px 1807px #fff,
      1513px 1884px #fff, 2365px 627px #fff, 828px 2194px #fff,
      1950px 2019px #fff, 1769px 1193px #fff, 498px 1207px #fff,
      355px 2374px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-1:after {
    box-shadow: 0px 0px #fff, 1832px 195px #fff, 885px 2516px #fff,
      1163px 2003px #fff, 2519px 2207px #fff, 436px 774px #fff,
      1807px 1508px #fff, 2511px 1453px #fff, 1976px 2155px #fff,
      1539px 257px #fff, 739px 999px #fff, 2259px 2296px #fff,
      1444px 2057px #fff, 743px 2500px #fff, 1540px 1111px #fff,
      1193px 360px #fff, 1258px 1413px #fff, 1024px 2381px #fff,
      2161px 1319px #fff, 390px 2106px #fff, 340px 1212px #fff,
      1180px 659px #fff, 1373px 718px #fff, 998px 1978px #fff, 2086px 612px #fff,
      2063px 1062px #fff, 1555px 181px #fff, 1947px 1547px #fff,
      613px 1061px #fff, 2126px 2538px #fff, 1701px 1770px #fff,
      822px 174px #fff, 2290px 1563px #fff, 2174px 1490px #fff, 1762px 53px #fff,
      349px 173px #fff, 192px 1364px #fff, 981px 2345px #fff, 997px 369px #fff,
      2247px 1455px #fff, 1815px 398px #fff, 681px 2163px #fff, 754px 817px #fff,
      192px 290px #fff, 1882px 1953px #fff, 2380px 1434px #fff,
      1944px 1921px #fff, 2397px 633px #fff, 753px 2037px #fff,
      1665px 1188px #fff, 1931px 1432px #fff, 284px 1706px #fff,
      971px 680px #fff, 978px 1360px #fff, 456px 504px #fff, 138px 2192px #fff,
      571px 1679px #fff, 2274px 441px #fff, 701px 1195px #fff, 2110px 551px #fff,
      673px 578px #fff, 1164px 1991px #fff, 231px 387px #fff, 280px 18px #fff,
      1135px 2124px #fff, 2534px 1592px #fff, 1870px 1318px #fff,
      224px 1117px #fff, 986px 410px #fff, 1010px 1351px #fff, 1374px 315px #fff,
      575px 950px #fff, 637px 2363px #fff, 1208px 2031px #fff,
      1471px 1134px #fff, 91px 1298px #fff, 1695px 2101px #fff, 48px 664px #fff,
      1413px 2224px #fff, 1602px 2077px #fff, 1109px 85px #fff, 2224px 45px #fff,
      1257px 1958px #fff, 2135px 668px #fff, 1858px 1561px #fff,
      1767px 238px #fff, 1660px 1436px #fff, 2315px 1780px #fff,
      1474px 1121px #fff, 1536px 2393px #fff, 765px 2461px #fff,
      707px 1178px #fff, 1663px 2104px #fff, 750px 836px #fff, 1643px 526px #fff,
      463px 2028px #fff, 1449px 210px #fff, 684px 6px #fff, 534px 2036px #fff,
      1892px 2085px #fff, 2179px 901px #fff, 1963px 1908px #fff,
      44px 1249px #fff, 96px 1978px #fff, 2198px 1331px #fff, 1331px 1335px #fff,
      2057px 1870px #fff, 1255px 1583px #fff, 1702px 1204px #fff,
      744px 1221px #fff, 2496px 2347px #fff, 1861px 568px #fff,
      448px 1679px #fff, 1172px 1721px #fff, 2517px 140px #fff,
      2322px 1594px #fff, 1725px 1716px #fff, 1813px 1794px #fff,
      2026px 2018px #fff, 2415px 1830px #fff, 263px 2390px #fff,
      1795px 740px #fff, 2205px 2544px #fff, 1762px 1633px #fff,
      2415px 2289px #fff, 1723px 1764px #fff, 2114px 1571px #fff,
      1328px 1231px #fff, 268px 2360px #fff, 2513px 2387px #fff,
      2111px 132px #fff, 2192px 932px #fff, 1853px 619px #fff, 181px 1760px #fff,
      1903px 495px #fff, 2023px 2336px #fff, 538px 1041px #fff,
      967px 1588px #fff, 1973px 2189px #fff, 648px 1144px #fff, 305px 504px #fff,
      2215px 1895px #fff, 1325px 2010px #fff, 845px 740px #fff,
      2340px 750px #fff, 2335px 1393px #fff, 1473px 403px #fff,
      1644px 1696px #fff, 2560px 847px #fff, 525px 862px #fff,
      1747px 2148px #fff, 592px 2238px #fff, 52px 208px #fff, 1474px 1637px #fff,
      1860px 371px #fff, 2026px 167px #fff, 412px 981px #fff, 2197px 243px #fff,
      454px 1356px #fff, 1259px 1675px #fff, 1898px 1507px #fff,
      451px 386px #fff, 2267px 1655px #fff, 528px 832px #fff, 2416px 2483px #fff,
      1680px 340px #fff, 169px 86px #fff, 2307px 257px #fff, 2248px 467px #fff,
      1006px 1672px #fff, 859px 462px #fff, 1349px 2466px #fff,
      905px 2003px #fff, 306px 684px #fff, 988px 1694px #fff, 1302px 252px #fff,
      1307px 404px #fff, 1714px 2410px #fff, 2354px 518px #fff,
      158px 1352px #fff, 1925px 1669px #fff, 2382px 2108px #fff,
      823px 422px #fff, 1002px 2491px #fff, 2214px 1488px #fff, 335px 320px #fff,
      787px 2557px #fff, 3px 555px #fff, 2399px 2143px #fff, 1597px 356px #fff,
      331px 136px #fff, 942px 91px #fff, 1191px 1070px #fff, 487px 2430px #fff,
      2041px 913px #fff, 1466px 2429px #fff, 496px 2208px #fff,
      2285px 628px #fff, 482px 688px #fff, 230px 322px #fff, 1619px 1204px #fff,
      2283px 248px #fff, 2331px 914px #fff, 1815px 1363px #fff, 92px 1550px #fff,
      1412px 1998px #fff, 2290px 2331px #fff, 1112px 724px #fff,
      1236px 322px #fff, 1753px 1626px #fff, 1117px 1587px #fff,
      1098px 1079px #fff, 1500px 2443px #fff, 18px 101px #fff, 2219px 605px #fff,
      502px 2539px #fff, 1600px 544px #fff, 737px 737px #fff, 1468px 1262px #fff,
      621px 1866px #fff, 597px 567px #fff, 1025px 1215px #fff, 251px 1782px #fff,
      1207px 44px #fff, 1640px 1395px #fff, 61px 1650px #fff, 2467px 2028px #fff,
      1987px 600px #fff, 577px 156px #fff, 2123px 1365px #fff, 959px 69px #fff,
      412px 2400px #fff, 1470px 1518px #fff, 2450px 134px #fff,
      1032px 889px #fff, 720px 1972px #fff, 1134px 191px #fff,
      2077px 2220px #fff, 676px 1237px #fff, 864px 1511px #fff,
      1484px 990px #fff, 1802px 1444px #fff, 1869px 1738px #fff,
      1052px 332px #fff, 2511px 286px #fff, 1025px 426px #fff,
      1572px 1501px #fff, 563px 2272px #fff, 1297px 436px #fff,
      689px 1373px #fff, 216px 553px #fff, 1092px 755px #fff, 1054px 1883px #fff,
      325px 287px #fff, 1626px 512px #fff, 834px 1144px #fff, 289px 1215px #fff,
      2155px 532px #fff, 1705px 1723px #fff, 1384px 1768px #fff,
      1903px 207px #fff, 155px 1233px #fff, 2059px 374px #fff, 610px 119px #fff,
      1994px 2240px #fff, 2369px 935px #fff, 206px 535px #fff, 1430px 505px #fff,
      2429px 1237px #fff, 1730px 758px #fff, 2391px 489px #fff,
      1431px 869px #fff, 2053px 1181px #fff, 2284px 1737px #fff,
      504px 1994px #fff, 663px 2503px #fff, 1713px 605px #fff, 1743px 549px #fff,
      82px 174px #fff, 801px 449px #fff, 2229px 145px #fff, 2224px 804px #fff,
      914px 2139px #fff, 99px 1141px #fff, 1572px 862px #fff, 540px 1587px #fff,
      2375px 30px #fff, 2037px 2045px #fff, 80px 1802px #fff, 256px 2314px #fff,
      766px 2102px #fff, 1711px 563px #fff, 2402px 507px #fff, 361px 658px #fff,
      565px 670px #fff, 233px 570px #fff, 731px 82px #fff, 161px 2440px #fff,
      2324px 2234px #fff, 653px 1791px #fff, 1084px 2173px #fff,
      1734px 1345px #fff, 431px 752px #fff, 354px 92px #fff, 499px 1362px #fff,
      749px 695px #fff, 1258px 571px #fff, 889px 1845px #fff, 1057px 54px #fff,
      109px 216px #fff, 677px 189px #fff, 1629px 2042px #fff, 166px 895px #fff,
      2216px 1397px #fff, 1767px 479px #fff, 1973px 2292px #fff,
      1098px 2286px #fff, 2236px 2263px #fff, 2426px 780px #fff,
      809px 1969px #fff, 335px 2107px #fff, 1325px 941px #fff,
      1450px 1388px #fff, 1183px 1179px #fff, 296px 1376px #fff,
      1095px 189px #fff, 1586px 994px #fff, 2180px 802px #fff, 308px 1178px #fff,
      298px 343px #fff, 1385px 477px #fff, 2109px 1066px #fff, 918px 1949px #fff,
      1141px 1684px #fff, 1851px 1325px #fff, 1134px 467px #fff,
      1732px 1614px #fff, 1731px 1585px #fff, 321px 1459px #fff,
      839px 224px #fff, 2004px 969px #fff, 1327px 523px #fff, 1086px 509px #fff,
      1900px 724px #fff, 1838px 269px #fff, 2464px 599px #fff, 833px 762px #fff,
      1197px 2258px #fff, 1429px 1408px #fff, 1883px 1106px #fff,
      328px 2307px #fff, 1633px 1465px #fff, 567px 1124px #fff,
      931px 1970px #fff, 1772px 1191px #fff, 2161px 1303px #fff,
      2556px 1710px #fff, 2232px 1049px #fff, 1728px 1197px #fff,
      68px 2508px #fff, 140px 2071px #fff, 1249px 1017px #fff, 1711px 677px #fff,
      788px 1986px #fff, 1752px 1462px #fff, 1207px 2525px #fff,
      2138px 2043px #fff, 856px 1854px #fff, 2331px 2529px #fff,
      1178px 1779px #fff, 2454px 2012px #fff, 898px 1551px #fff,
      304px 1111px #fff, 1133px 78px #fff, 1405px 1535px #fff, 163px 196px #fff,
      1427px 1253px #fff, 1183px 1966px #fff, 2046px 530px #fff,
      1555px 1891px #fff, 659px 1428px #fff, 73px 1971px #fff, 2275px 106px #fff,
      1305px 2244px #fff, 2524px 1192px #fff, 2305px 1248px #fff,
      1960px 842px #fff, 2363px 2403px #fff, 871px 847px #fff, 487px 191px #fff,
      1313px 343px #fff, 121px 136px #fff, 1181px 2319px #fff, 298px 1122px #fff,
      1861px 102px #fff, 1947px 226px #fff, 213px 1521px #fff, 593px 768px #fff,
      1082px 909px #fff, 795px 1357px #fff, 2509px 2376px #fff, 622px 200px #fff,
      1028px 2239px #fff, 364px 7px #fff, 1794px 22px #fff, 1596px 1743px #fff,
      646px 2074px #fff, 2286px 1661px #fff, 2039px 803px #fff,
      595px 1937px #fff, 1401px 473px #fff, 1023px 1083px #fff,
      2209px 1247px #fff, 922px 2060px #fff, 496px 1613px #fff,
      2415px 648px #fff, 1298px 967px #fff, 1358px 1920px #fff,
      1890px 2260px #fff, 716px 558px #fff, 2494px 1184px #fff, 431px 295px #fff,
      987px 1538px #fff, 1470px 2299px #fff, 2038px 357px #fff,
      1110px 2204px #fff, 1656px 384px #fff, 968px 520px #fff, 699px 186px #fff,
      1608px 711px #fff, 2410px 332px #fff, 1319px 1256px #fff,
      2506px 1775px #fff, 2044px 1918px #fff, 49px 1738px #fff, 16px 567px #fff,
      1538px 1553px #fff, 210px 2488px #fff, 1955px 1587px #fff,
      1854px 1360px #fff, 27px 54px #fff, 1117px 1586px #fff, 309px 1301px #fff,
      1637px 2494px #fff, 384px 968px #fff, 1119px 393px #fff,
      2332px 1683px #fff, 624px 334px #fff, 2144px 2271px #fff,
      2113px 1105px #fff, 2360px 776px #fff, 716px 1792px #fff,
      2323px 1043px #fff, 656px 2198px #fff, 2257px 1770px #fff,
      636px 991px #fff, 2178px 1813px #fff, 2435px 2531px #fff, 67px 212px #fff,
      2082px 1411px #fff, 2331px 455px #fff, 963px 141px #fff,
      1847px 2294px #fff, 861px 1743px #fff, 851px 2055px #fff,
      1786px 1663px #fff, 88px 1723px #fff, 700px 368px #fff, 110px 874px #fff,
      1145px 420px #fff, 2522px 1536px #fff, 1306px 1236px #fff,
      2157px 1096px #fff, 832px 386px #fff, 2170px 713px #fff, 743px 2057px #fff,
      587px 2000px #fff, 1896px 1756px #fff, 1138px 389px #fff,
      1364px 1489px #fff, 500px 384px #fff, 1748px 25px #fff, 308px 1438px #fff,
      367px 361px #fff, 859px 1000px #fff, 1876px 916px #fff, 807px 1810px #fff,
      1206px 1035px #fff, 2274px 55px #fff, 1137px 2260px #fff,
      2234px 396px #fff, 1003px 1374px #fff, 2214px 1448px #fff,
      1171px 1313px #fff, 1617px 2193px #fff, 866px 1459px #fff,
      1195px 704px #fff, 1163px 1021px #fff, 773px 660px #fff, 973px 159px #fff,
      2082px 2556px #fff, 30px 509px #fff, 1896px 1931px #fff,
      1548px 2146px #fff, 2168px 2247px #fff, 640px 2362px #fff,
      1002px 482px #fff, 2544px 1388px #fff, 624px 848px #fff, 853px 1708px #fff,
      780px 1393px #fff, 530px 561px #fff, 317px 1772px #fff, 1020px 1097px #fff,
      1657px 2227px #fff, 429px 1622px #fff, 702px 1711px #fff,
      2415px 620px #fff, 85px 2061px #fff, 2441px 1603px #fff, 792px 1476px #fff,
      1713px 14px #fff, 1010px 2290px #fff, 81px 2539px #fff, 2216px 1978px #fff,
      1082px 927px #fff, 1652px 1297px #fff, 1991px 736px #fff,
      1250px 2319px #fff, 1572px 38px #fff, 121px 2467px #fff, 1955px 502px #fff,
      1816px 1409px #fff, 1389px 1453px #fff, 183px 26px #fff, 817px 404px #fff,
      33px 6px #fff, 487px 1676px #fff, 1390px 663px #fff, 697px 1260px #fff,
      1977px 203px #fff, 1529px 1630px #fff, 952px 1467px #fff,
      532px 2268px #fff, 913px 1745px #fff, 1152px 2032px #fff,
      1950px 2459px #fff, 1252px 2213px #fff, 1663px 2006px #fff,
      1325px 2209px #fff, 653px 1055px #fff, 1791px 433px #fff,
      2484px 2302px #fff, 2032px 153px #fff, 438px 723px #fff,
      1960px 1337px #fff, 1159px 1112px #fff, 1549px 622px #fff,
      1749px 728px #fff, 815px 221px #fff, 685px 2392px #fff, 657px 997px #fff,
      1122px 905px #fff, 1979px 644px #fff, 689px 874px #fff, 910px 1242px #fff,
      322px 1760px #fff, 142px 316px #fff, 1927px 1235px #fff,
      2469px 1141px #fff, 2199px 604px #fff, 1369px 1980px #fff,
      1826px 1191px #fff, 2039px 617px #fff, 1561px 1461px #fff,
      788px 1360px #fff, 2537px 1242px #fff, 1892px 2451px #fff,
      136px 1761px #fff, 2px 1251px #fff, 2460px 1964px #fff, 2094px 104px #fff,
      759px 171px #fff, 409px 598px #fff, 796px 1413px #fff, 567px 1943px #fff,
      266px 50px #fff, 998px 875px #fff, 1100px 2174px #fff, 2097px 552px #fff,
      86px 196px #fff, 502px 1202px #fff, 918px 1075px #fff, 273px 2513px #fff,
      2409px 18px #fff, 438px 523px #fff, 1775px 2343px #fff, 2428px 2029px #fff,
      251px 429px #fff, 1103px 637px #fff, 800px 1909px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-2 {
    -webkit-animation: animParticle 120s linear infinite;
    animation: animParticle 120s linear infinite;
    box-shadow: 0px 0px #fff, 2559px 1650px #fff, 1603px 2162px #fff,
      2329px 2066px #fff, 1045px 1875px #fff, 1437px 2222px #fff,
      2027px 2514px #fff, 1503px 1437px #fff, 830px 1376px #fff,
      167px 383px #fff, 1944px 576px #fff, 2367px 1566px #fff, 2374px 487px #fff,
      1925px 2114px #fff, 663px 1463px #fff, 1062px 1643px #fff,
      167px 420px #fff, 2221px 1181px #fff, 43px 1103px #fff, 666px 960px #fff,
      775px 2217px #fff, 1136px 997px #fff, 275px 1494px #fff,
      2265px 1502px #fff, 1454px 598px #fff, 2441px 1477px #fff,
      870px 2000px #fff, 1235px 2113px #fff, 380px 1880px #fff,
      1411px 345px #fff, 2358px 1750px #fff, 1818px 793px #fff, 722px 220px #fff,
      884px 1359px #fff, 1449px 123px #fff, 2474px 2485px #fff,
      2257px 1955px #fff, 836px 662px #fff, 270px 873px #fff, 921px 2392px #fff,
      771px 1604px #fff, 906px 2436px #fff, 970px 2031px #fff, 468px 922px #fff,
      2262px 706px #fff, 471px 467px #fff, 1532px 2332px #fff,
      1318px 1889px #fff, 775px 2303px #fff, 1759px 392px #fff,
      2175px 2474px #fff, 550px 1199px #fff, 191px 377px #fff, 788px 1805px #fff,
      2013px 13px #fff, 1865px 635px #fff, 1236px 766px #fff, 859px 861px #fff,
      338px 1062px #fff, 1036px 2183px #fff, 2428px 1949px #fff,
      420px 751px #fff, 362px 769px #fff, 746px 475px #fff, 721px 2023px #fff,
      391px 852px #fff, 582px 722px #fff, 1970px 2464px #fff, 2219px 1871px #fff,
      1285px 2379px #fff, 430px 2137px #fff, 155px 76px #fff, 1612px 773px #fff,
      1746px 1448px #fff, 1884px 988px #fff, 1706px 1929px #fff,
      1761px 2415px #fff, 2358px 664px #fff, 471px 1636px #fff, 27px 820px #fff,
      406px 1002px #fff, 113px 1493px #fff, 196px 65px #fff, 2547px 14px #fff,
      190px 1498px #fff, 2069px 122px #fff, 321px 75px #fff, 1014px 57px #fff,
      737px 2427px #fff, 1984px 2200px #fff, 1161px 1410px #fff,
      1308px 1792px #fff, 235px 2019px #fff, 1105px 536px #fff, 360px 317px #fff,
      2113px 2188px #fff, 2320px 43px #fff, 2333px 2388px #fff, 864px 383px #fff,
      1766px 1390px #fff, 1340px 786px #fff, 561px 1870px #fff,
      906px 2241px #fff, 591px 613px #fff, 1236px 1031px #fff, 2242px 675px #fff,
      984px 2079px #fff, 1987px 1890px #fff, 2525px 1725px #fff,
      2337px 97px #fff, 1244px 2552px #fff, 1119px 213px #fff,
      1011px 1794px #fff, 2230px 1809px #fff, 1910px 1769px #fff,
      463px 2075px #fff, 650px 578px #fff, 1200px 1363px #fff, 2035px 124px #fff,
      1206px 2325px #fff, 1534px 839px #fff, 690px 2393px #fff,
      182px 1012px #fff, 519px 1283px #fff, 1888px 2195px #fff, 514px 190px #fff,
      2357px 881px #fff, 2335px 1888px #fff, 1819px 1353px #fff,
      2540px 1995px #fff, 2527px 1285px #fff, 1608px 2559px #fff,
      1774px 600px #fff, 918px 2024px #fff, 2550px 916px #fff, 199px 1271px #fff,
      2435px 260px #fff, 121px 1745px #fff, 790px 1382px #fff, 64px 375px #fff,
      1625px 1809px #fff, 767px 696px #fff, 273px 1656px #fff,
      1402px 2066px #fff, 383px 2116px #fff, 838px 1397px #fff,
      1470px 1280px #fff, 679px 344px #fff, 1118px 2525px #fff,
      1828px 969px #fff, 487px 2334px #fff, 2176px 1731px #fff, 1698px 47px #fff,
      589px 205px #fff, 1117px 517px #fff, 662px 2123px #fff, 1164px 2237px #fff,
      133px 1576px #fff, 2208px 2375px #fff, 2271px 2198px #fff,
      1224px 2239px #fff, 2521px 1056px #fff, 486px 1540px #fff,
      2168px 1698px #fff, 2145px 2327px #fff, 2063px 1427px #fff,
      1033px 2329px #fff, 1727px 1834px #fff, 2452px 516px #fff,
      1522px 2488px #fff, 2551px 2312px #fff, 286px 2473px #fff,
      2129px 2406px #fff, 2002px 1551px #fff, 1662px 1562px #fff,
      1006px 742px #fff, 923px 885px #fff, 1749px 1672px #fff, 2181px 428px #fff,
      621px 387px #fff, 678px 2289px #fff, 1672px 2161px #fff,
      2056px 1334px #fff, 199px 570px #fff, 2369px 1094px #fff,
      2045px 1604px #fff, 1037px 485px #fff, 2064px 36px #fff,
      2199px 2444px #fff, 2153px 70px #fff, 563px 2233px #fff,
      1218px 1959px #fff, 1031px 717px #fff, 418px 637px #fff, 1261px 868px #fff,
      364px 544px #fff, 1068px 1203px #fff, 2311px 164px #fff, 2420px 930px #fff,
      47px 546px #fff, 2356px 417px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-2:after {
    box-shadow: 0px 0px #fff, 2351px 271px #fff, 443px 2031px #fff,
      2540px 1007px #fff, 2490px 2027px #fff, 1961px 638px #fff,
      1391px 1464px #fff, 1292px 719px #fff, 666px 1619px #fff,
      818px 1633px #fff, 2491px 1296px #fff, 1403px 268px #fff,
      1158px 878px #fff, 1260px 1481px #fff, 2292px 402px #fff, 408px 549px #fff,
      324px 1455px #fff, 1870px 1144px #fff, 322px 2526px #fff,
      1333px 1397px #fff, 1570px 94px #fff, 133px 58px #fff, 2040px 1450px #fff,
      1742px 861px #fff, 379px 1457px #fff, 2519px 1011px #fff,
      1685px 1485px #fff, 1178px 560px #fff, 2287px 2527px #fff,
      1344px 2058px #fff, 1337px 1477px #fff, 1792px 1996px #fff,
      2219px 1606px #fff, 158px 360px #fff, 804px 1555px #fff, 330px 770px #fff,
      1954px 771px #fff, 265px 1341px #fff, 1856px 2081px #fff,
      926px 1989px #fff, 820px 1724px #fff, 642px 1876px #fff,
      2261px 2074px #fff, 1298px 2248px #fff, 861px 1872px #fff,
      2323px 1712px #fff, 2530px 2018px #fff, 998px 1197px #fff,
      1319px 990px #fff, 2482px 1616px #fff, 1662px 1302px #fff,
      793px 1443px #fff, 496px 1989px #fff, 1543px 222px #fff, 2025px 779px #fff,
      2229px 1357px #fff, 1158px 411px #fff, 1680px 2015px #fff,
      536px 2019px #fff, 393px 2443px #fff, 999px 2247px #fff, 558px 2464px #fff,
      2280px 280px #fff, 354px 41px #fff, 1694px 676px #fff, 940px 1372px #fff,
      297px 882px #fff, 1200px 464px #fff, 1681px 309px #fff, 756px 834px #fff,
      856px 1489px #fff, 638px 2076px #fff, 134px 1960px #fff,
      1850px 1516px #fff, 1828px 2512px #fff, 2076px 1344px #fff,
      1987px 1985px #fff, 2259px 1066px #fff, 595px 737px #fff,
      129px 1150px #fff, 1325px 918px #fff, 1718px 634px #fff, 2267px 526px #fff,
      1095px 219px #fff, 661px 782px #fff, 1423px 1535px #fff,
      1799px 1790px #fff, 1344px 887px #fff, 874px 607px #fff,
      2006px 2503px #fff, 2495px 889px #fff, 684px 2172px #fff,
      787px 1040px #fff, 498px 633px #fff, 2277px 2010px #fff, 230px 1771px #fff,
      421px 1882px #fff, 19px 1238px #fff, 923px 2558px #fff, 1683px 1419px #fff,
      23px 2432px #fff, 2101px 2022px #fff, 2201px 538px #fff, 522px 1134px #fff,
      363px 2204px #fff, 2060px 1435px #fff, 577px 398px #fff, 656px 3px #fff,
      1957px 1854px #fff, 910px 943px #fff, 1108px 847px #fff,
      1741px 1762px #fff, 745px 1119px #fff, 2309px 2519px #fff,
      2363px 782px #fff, 320px 1434px #fff, 916px 2475px #fff, 138px 110px #fff,
      1149px 899px #fff, 239px 1218px #fff, 1314px 1611px #fff,
      1645px 826px #fff, 1277px 1923px #fff, 330px 288px #fff, 1699px 373px #fff,
      1680px 1952px #fff, 1640px 1818px #fff, 2504px 251px #fff,
      1733px 26px #fff, 1504px 2164px #fff, 2283px 362px #fff, 1670px 828px #fff,
      1615px 1146px #fff, 1326px 2152px #fff, 2548px 2124px #fff,
      1893px 857px #fff, 1899px 2510px #fff, 768px 2201px #fff,
      777px 1092px #fff, 265px 975px #fff, 1664px 1308px #fff,
      1215px 1054px #fff, 2382px 1708px #fff, 110px 1873px #fff,
      566px 2515px #fff, 1553px 1337px #fff, 576px 2204px #fff,
      2213px 1828px #fff, 749px 2294px #fff, 1565px 882px #fff,
      1071px 2040px #fff, 1729px 1596px #fff, 749px 801px #fff,
      1645px 2383px #fff, 1325px 606px #fff, 2303px 1329px #fff,
      90px 1196px #fff, 825px 1143px #fff, 292px 39px #fff, 327px 1117px #fff,
      351px 1420px #fff, 1709px 1271px #fff, 1443px 1995px #fff,
      347px 332px #fff, 1658px 901px #fff, 1436px 2101px #fff,
      1261px 1224px #fff, 274px 480px #fff, 492px 2005px #fff, 309px 1113px #fff,
      1870px 496px #fff, 1741px 1681px #fff, 1801px 1036px #fff,
      1550px 2449px #fff, 2236px 2266px #fff, 338px 1582px #fff,
      957px 469px #fff, 1814px 1831px #fff, 886px 971px #fff, 1999px 1857px #fff,
      2454px 578px #fff, 1466px 2435px #fff, 306px 436px #fff,
      1126px 2189px #fff, 1515px 1985px #fff, 43px 62px #fff, 1727px 690px #fff,
      1060px 2210px #fff, 780px 1157px #fff, 2400px 158px #fff,
      286px 2148px #fff, 1451px 2109px #fff, 116px 1819px #fff, 77px 822px #fff,
      885px 412px #fff, 2083px 2318px #fff, 421px 1234px #fff,
      2026px 1865px #fff, 103px 2087px #fff, 385px 1872px #fff, 347px 428px #fff;
    height: 2px;
    width: 2px;
  }

  .particle-3 {
    -webkit-animation: animParticle 180s linear infinite;
    animation: animParticle 180s linear infinite;
    box-shadow: 0px 0px #fff, 2165px 372px #fff, 2255px 615px #fff,
      2127px 2423px #fff, 1382px 2438px #fff, 1414px 2383px #fff,
      1719px 1033px #fff, 1860px 2460px #fff, 1820px 660px #fff,
      2410px 1322px #fff, 1062px 2556px #fff, 603px 2394px #fff,
      588px 1144px #fff, 644px 2454px #fff, 2130px 1575px #fff,
      1054px 956px #fff, 1419px 108px #fff, 961px 542px #fff, 33px 2415px #fff,
      1367px 1979px #fff, 267px 775px #fff, 1366px 367px #fff, 1991px 808px #fff,
      7px 2354px #fff, 153px 1679px #fff, 2258px 46px #fff, 43px 2532px #fff,
      1964px 374px #fff, 360px 513px #fff, 606px 1684px #fff, 1424px 1947px #fff,
      2112px 1748px #fff, 2271px 819px #fff, 2507px 830px #fff,
      2559px 1164px #fff, 2128px 725px #fff, 131px 1346px #fff,
      2499px 841px #fff, 1531px 1604px #fff, 2030px 1534px #fff,
      513px 1068px #fff, 723px 2490px #fff, 1172px 761px #fff,
      1208px 1915px #fff, 900px 1681px #fff, 1819px 2395px #fff,
      892px 2443px #fff, 1064px 2090px #fff, 1643px 1566px #fff,
      1679px 879px #fff, 599px 812px #fff, 1167px 7px #fff, 1330px 2524px #fff,
      1254px 52px #fff, 2119px 1791px #fff, 1066px 1226px #fff,
      1228px 1245px #fff, 2045px 1658px #fff, 588px 1910px #fff,
      2359px 1774px #fff, 777px 2309px #fff, 1742px 1777px #fff,
      2442px 89px #fff, 1886px 636px #fff, 929px 443px #fff, 356px 2074px #fff,
      228px 2545px #fff, 2215px 464px #fff, 327px 834px #fff, 660px 722px #fff,
      1466px 1419px #fff, 89px 1484px #fff, 1785px 774px #fff,
      1161px 1462px #fff, 1012px 793px #fff, 634px 1597px #fff,
      882px 1623px #fff, 982px 1274px #fff, 1498px 2038px #fff,
      1371px 618px #fff, 2092px 877px #fff, 1719px 1776px #fff,
      1154px 2474px #fff, 2036px 2002px #fff, 1511px 160px #fff,
      1582px 2453px #fff, 753px 56px #fff, 2px 1988px #fff, 1606px 327px #fff,
      144px 655px #fff, 852px 2064px #fff, 1733px 674px #fff, 275px 89px #fff,
      2271px 1607px #fff, 2103px 703px #fff, 2184px 1545px #fff,
      1425px 518px #fff, 2006px 664px #fff, 1998px 1512px #fff,
      452px 1616px #fff, 687px 270px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-3:after {
    box-shadow: 0px 0px #fff, 2303px 1872px #fff, 884px 343px #fff,
      603px 2283px #fff, 667px 197px #fff, 1301px 1422px #fff,
      2470px 2464px #fff, 317px 2182px #fff, 1736px 30px #fff, 526px 765px #fff,
      543px 1241px #fff, 484px 82px #fff, 1519px 929px #fff, 16px 1654px #fff,
      451px 149px #fff, 737px 906px #fff, 1252px 1225px #fff, 1796px 2250px #fff,
      1771px 370px #fff, 1306px 274px #fff, 604px 2121px #fff,
      1974px 1451px #fff, 1992px 1021px #fff, 450px 1423px #fff,
      709px 2217px #fff, 1679px 913px #fff, 2151px 1812px #fff,
      1698px 2463px #fff, 742px 1941px #fff, 294px 356px #fff, 71px 169px #fff,
      198px 1141px #fff, 1162px 912px #fff, 639px 691px #fff, 1073px 2311px #fff,
      191px 213px #fff, 1142px 2504px #fff, 667px 164px #fff, 1773px 2411px #fff,
      2274px 1910px #fff, 2322px 1847px #fff, 1046px 238px #fff,
      2540px 2411px #fff, 1510px 347px #fff, 880px 787px #fff,
      1749px 1735px #fff, 1837px 1454px #fff, 2322px 1714px #fff,
      921px 2497px #fff, 1084px 2435px #fff, 457px 1760px #fff,
      1047px 641px #fff, 1564px 2047px #fff, 1900px 1057px #fff, 23px 236px #fff,
      2159px 2131px #fff, 1000px 994px #fff, 1086px 1399px #fff,
      2337px 1524px #fff, 635px 455px #fff, 1624px 705px #fff,
      1272px 1629px #fff, 343px 768px #fff, 2350px 538px #fff,
      1586px 1329px #fff, 1913px 1423px #fff, 2412px 2529px #fff,
      1601px 1665px #fff, 2505px 165px #fff, 2035px 368px #fff,
      1696px 641px #fff, 1685px 1013px #fff, 2097px 1376px #fff, 6px 1758px #fff,
      991px 1208px #fff, 632px 1814px #fff, 97px 912px #fff, 573px 346px #fff,
      999px 2443px #fff, 1935px 1659px #fff, 486px 2485px #fff,
      2531px 2067px #fff, 600px 234px #fff, 1757px 1446px #fff,
      1423px 1842px #fff, 1499px 1784px #fff, 2326px 839px #fff,
      2079px 1314px #fff, 2065px 1431px #fff, 393px 944px #fff,
      1396px 1355px #fff, 1561px 1455px #fff, 510px 2212px #fff,
      1446px 426px #fff, 297px 998px #fff, 700px 717px #fff, 1921px 1666px #fff,
      2405px 1830px #fff, 925px 1935px #fff, 2047px 687px #fff,
      1989px 2161px #fff;
    height: 3px;
    width: 3px;
  }

  .particle-4 {
    -webkit-animation: animParticle 600s linear infinite;
    animation: animParticle 600s linear infinite;
    box-shadow: 0px 0px #fff, 1069px 193px #fff, 607px 1049px #fff,
      361px 662px #fff, 151px 398px #fff, 748px 1321px #fff, 179px 349px #fff,
      188px 498px #fff, 1917px 1404px #fff, 1426px 1024px #fff,
      2527px 990px #fff, 1256px 217px #fff, 1609px 1574px #fff, 411px 472px #fff,
      2067px 1006px #fff, 1895px 2017px #fff, 1169px 2277px #fff,
      1984px 2257px #fff, 816px 1891px #fff, 1375px 357px #fff,
      1567px 568px #fff, 490px 1579px #fff, 572px 761px #fff, 2107px 562px #fff,
      605px 1810px #fff, 2438px 1975px #fff, 1732px 1303px #fff,
      19px 1810px #fff, 2434px 1703px #fff, 2186px 68px #fff, 1768px 1544px #fff,
      2375px 1565px #fff, 876px 1384px #fff, 1841px 2223px #fff,
      23px 1322px #fff, 2178px 1999px #fff, 731px 899px #fff, 1174px 1954px #fff,
      2196px 844px #fff, 2153px 1505px #fff, 1262px 441px #fff,
      540px 1083px #fff, 665px 492px #fff, 1487px 2128px #fff, 597px 1358px #fff,
      1530px 481px #fff, 1744px 829px #fff, 733px 953px #fff, 1720px 1451px #fff,
      1555px 95px #fff, 278px 285px #fff, 1987px 636px #fff, 2268px 1700px #fff,
      1632px 1180px #fff, 2022px 1404px #fff, 166px 846px #fff,
      2218px 1673px #fff, 1698px 1376px #fff, 1500px 2461px #fff,
      1072px 1698px #fff, 626px 2031px #fff, 610px 1649px #fff,
      1728px 637px #fff, 2457px 741px #fff, 2501px 127px #fff, 473px 2557px #fff,
      893px 1995px #fff, 1396px 1124px #fff, 91px 1612px #fff, 2160px 80px #fff,
      1741px 1267px #fff, 2435px 2427px #fff, 2167px 375px #fff,
      1249px 2092px #fff, 646px 708px #fff, 35px 471px #fff, 583px 1383px #fff,
      113px 322px #fff, 1212px 1707px #fff, 219px 129px #fff, 2197px 1274px #fff,
      1183px 1515px #fff, 1269px 532px #fff, 2091px 572px #fff,
      448px 1813px #fff, 1906px 1796px #fff, 1318px 25px #fff,
      2186px 1360px #fff, 315px 869px #fff, 546px 1098px #fff, 62px 319px #fff,
      321px 761px #fff, 1044px 1926px #fff, 185px 1182px #fff,
      1565px 1078px #fff, 2393px 1476px #fff, 1549px 69px #fff,
      1818px 2489px #fff, 1308px 1657px #fff, 1953px 1103px #fff,
      1011px 1390px #fff, 1113px 2283px #fff, 282px 1350px #fff,
      1733px 1195px #fff, 1856px 643px #fff, 1201px 666px #fff,
      1573px 1487px #fff, 2262px 2258px #fff, 2021px 1937px #fff,
      1288px 2557px #fff, 1665px 369px #fff, 768px 1079px #fff, 751px 477px #fff,
      2176px 1059px #fff, 2558px 1637px #fff, 2231px 868px #fff,
      2012px 448px #fff, 685px 1356px #fff, 1024px 2239px #fff,
      492px 2432px #fff, 1636px 707px #fff, 2229px 955px #fff, 2466px 93px #fff,
      560px 841px #fff, 2313px 2524px #fff, 817px 1739px #fff,
      1141px 1879px #fff, 1294px 597px #fff, 2276px 1126px #fff,
      2387px 1523px #fff, 2102px 704px #fff, 385px 1713px #fff,
      1476px 2196px #fff, 2263px 195px #fff, 620px 1160px #fff, 1898px 70px #fff,
      285px 2052px #fff, 2278px 1309px #fff, 202px 1353px #fff,
      1442px 439px #fff, 2493px 363px #fff, 588px 1269px #fff,
      2039px 1293px #fff, 404px 491px #fff, 644px 419px #fff, 680px 1346px #fff,
      290px 1245px #fff, 2191px 1242px #fff, 1601px 1108px #fff,
      701px 2244px #fff, 1753px 2171px #fff, 1784px 39px #fff, 27px 1525px #fff,
      1665px 23px #fff, 1441px 1153px #fff, 2539px 1935px #fff,
      801px 2262px #fff, 716px 2140px #fff, 1705px 2101px #fff, 753px 435px #fff,
      2083px 2289px #fff, 483px 1824px #fff, 2106px 1671px #fff,
      1925px 694px #fff, 1594px 599px #fff, 826px 2516px #fff, 2530px 380px #fff,
      2234px 869px #fff, 1514px 855px #fff, 402px 2416px #fff, 751px 1301px #fff,
      135px 1961px #fff, 1292px 2319px #fff, 65px 1360px #fff,
      2545px 2373px #fff, 2044px 952px #fff, 948px 335px #fff, 484px 1681px #fff,
      1012px 357px #fff, 630px 1825px #fff, 803px 288px #fff, 1148px 221px #fff,
      46px 2304px #fff, 512px 553px #fff, 1058px 659px #fff, 1386px 1352px #fff,
      709px 2262px #fff, 779px 1648px #fff, 1516px 2320px #fff,
      1454px 860px #fff, 295px 354px #fff, 703px 2533px #fff, 1602px 1042px #fff,
      96px 1909px #fff, 928px 1485px #fff, 2209px 318px #fff, 2359px 657px #fff,
      851px 8px #fff, 1565px 1089px #fff, 1792px 1918px #fff, 546px 868px #fff,
      406px 898px #fff, 2482px 41px #fff, 1696px 764px #fff, 952px 779px #fff,
      1588px 1344px #fff, 1919px 1421px #fff, 1582px 539px #fff,
      2504px 1146px #fff, 827px 523px #fff, 2241px 576px #fff, 924px 1299px #fff,
      1472px 167px #fff, 678px 2514px #fff, 1726px 800px #fff,
      2300px 2335px #fff, 64px 1673px #fff, 837px 2475px #fff, 2228px 204px #fff,
      1346px 1838px #fff, 1266px 1100px #fff, 560px 227px #fff,
      398px 1548px #fff, 892px 1944px #fff, 1048px 559px #fff, 889px 2154px #fff,
      2474px 1942px #fff, 18px 1078px #fff, 2025px 977px #fff, 70px 570px #fff,
      1674px 419px #fff, 1709px 691px #fff, 2376px 1649px #fff, 60px 1077px #fff,
      1738px 528px #fff, 1416px 83px #fff, 819px 609px #fff, 2224px 1826px #fff,
      1865px 1015px #fff, 2063px 1430px #fff, 795px 731px #fff,
      1335px 394px #fff, 769px 1569px #fff, 815px 452px #fff, 2075px 210px #fff,
      1569px 327px #fff, 2187px 933px #fff, 796px 2417px #fff, 817px 2381px #fff,
      1555px 2513px #fff, 879px 682px #fff, 1525px 1104px #fff,
      1560px 1693px #fff, 1314px 1573px #fff, 1870px 408px #fff,
      509px 2332px #fff, 27px 387px #fff, 1023px 1766px #fff, 1732px 830px #fff,
      1838px 173px #fff, 782px 2111px #fff, 2199px 200px #fff, 1492px 258px #fff,
      2031px 223px #fff, 481px 1968px #fff, 1443px 2192px #fff,
      2242px 2329px #fff, 398px 832px #fff, 773px 1577px #fff, 1299px 412px #fff,
      2267px 402px #fff, 511px 213px #fff, 1996px 536px #fff, 2533px 2192px #fff,
      1735px 962px #fff, 1294px 684px #fff, 863px 1750px #fff, 938px 1956px #fff,
      1375px 638px #fff, 351px 384px #fff, 2485px 533px #fff, 2269px 596px #fff,
      1594px 2282px #fff, 1614px 251px #fff, 493px 986px #fff, 2365px 349px #fff,
      1998px 2354px #fff, 2220px 1143px #fff, 349px 1456px #fff,
      1458px 710px #fff, 911px 1276px #fff, 401px 2080px #fff, 111px 1412px #fff,
      2271px 832px #fff, 2190px 1992px #fff, 2439px 1371px #fff,
      2478px 1322px #fff, 628px 90px #fff, 1px 2339px #fff, 158px 1164px #fff,
      2187px 2421px #fff, 2516px 360px #fff, 2273px 2515px #fff,
      1854px 971px #fff, 1472px 280px #fff, 318px 2268px #fff, 840px 1078px #fff,
      241px 255px #fff, 52px 1542px #fff, 1641px 861px #fff, 1911px 2267px #fff,
      1667px 1376px #fff, 1400px 339px #fff, 2511px 977px #fff,
      2380px 1920px #fff, 636px 816px #fff, 1465px 2204px #fff,
      788px 2187px #fff, 1106px 813px #fff, 1849px 303px #fff, 2220px 651px #fff,
      1540px 2557px #fff, 230px 652px #fff, 2058px 1415px #fff, 52px 1388px #fff,
      2150px 2423px #fff, 2221px 1324px #fff, 610px 738px #fff,
      2075px 1624px #fff, 2410px 1803px #fff, 240px 735px #fff,
      2477px 654px #fff, 954px 360px #fff, 95px 1031px #fff, 1203px 1945px #fff,
      83px 424px #fff, 236px 816px #fff, 936px 497px #fff, 541px 2081px #fff,
      1832px 554px #fff, 1123px 82px #fff, 1102px 1153px #fff,
      2180px 2320px #fff, 246px 1618px #fff, 792px 2486px #fff,
      352px 1654px #fff, 377px 1406px #fff, 1611px 2234px #fff,
      1700px 558px #fff, 2234px 1977px #fff, 1122px 1155px #fff,
      1969px 2172px #fff, 1027px 285px #fff, 489px 2553px #fff,
      337px 1580px #fff, 1182px 900px #fff, 2199px 880px #fff, 1033px 652px #fff,
      331px 1854px #fff, 2306px 2065px #fff, 2338px 932px #fff,
      1446px 2456px #fff, 1668px 1019px #fff, 838px 896px #fff,
      1996px 711px #fff, 2306px 1345px #fff, 166px 2032px #fff, 752px 231px #fff,
      2172px 2006px #fff, 802px 959px #fff, 183px 738px #fff, 1993px 2233px #fff,
      1576px 183px #fff, 1898px 769px #fff, 2329px 535px #fff, 704px 2187px #fff,
      1564px 1333px #fff, 1653px 2403px #fff, 2408px 2385px #fff,
      2398px 770px #fff, 640px 1094px #fff, 783px 1568px #fff, 177px 1280px #fff,
      313px 2148px #fff, 556px 636px #fff, 1526px 432px #fff, 848px 530px #fff,
      2227px 2077px #fff, 1040px 751px #fff, 346px 1693px #fff, 2512px 52px #fff,
      2506px 423px #fff, 1917px 1705px #fff, 1839px 2354px #fff,
      2307px 447px #fff, 413px 168px #fff, 2100px 1525px #fff,
      1747px 1739px #fff, 1083px 1904px #fff, 1265px 2122px #fff,
      177px 2550px #fff;
    height: 1px;
    width: 1px;
  }

  .particle-4:after {
    box-shadow: 0px 0px #fff, 1497px 767px #fff, 1066px 815px #fff,
      1206px 2108px #fff, 801px 407px #fff, 2206px 1493px #fff,
      1693px 1601px #fff, 1445px 1292px #fff, 2496px 180px #fff,
      1789px 445px #fff, 2309px 1132px #fff, 2119px 1434px #fff,
      565px 1767px #fff, 1631px 707px #fff, 7px 529px #fff, 725px 251px #fff,
      705px 1799px #fff, 2472px 1096px #fff, 2028px 896px #fff,
      1190px 1262px #fff, 1250px 237px #fff, 1167px 2531px #fff,
      1775px 660px #fff, 69px 1810px #fff, 140px 1757px #fff, 719px 265px #fff,
      2210px 2128px #fff, 1529px 1793px #fff, 2056px 301px #fff,
      603px 2046px #fff, 1400px 614px #fff, 1024px 2262px #fff,
      2540px 1360px #fff, 1205px 987px #fff, 18px 2046px #fff,
      2031px 1975px #fff, 521px 1781px #fff, 410px 1033px #fff,
      874px 2400px #fff, 1023px 437px #fff, 1868px 2200px #fff, 772px 342px #fff,
      1657px 2270px #fff, 1048px 616px #fff, 1944px 2152px #fff,
      975px 476px #fff, 1169px 2456px #fff, 1249px 1219px #fff,
      1971px 1655px #fff, 1448px 1411px #fff, 2537px 1609px #fff,
      9px 1765px #fff, 827px 1429px #fff, 2084px 2347px #fff, 1517px 662px #fff,
      1622px 2368px #fff, 327px 422px #fff, 1235px 111px #fff,
      2005px 1645px #fff, 2256px 438px #fff, 1317px 93px #fff, 573px 398px #fff,
      1925px 331px #fff, 83px 1636px #fff, 2161px 379px #fff, 662px 337px #fff,
      339px 2541px #fff, 1414px 1432px #fff, 742px 280px #fff, 300px 256px #fff,
      2396px 442px #fff, 2230px 974px #fff, 2392px 1159px #fff, 801px 18px #fff,
      1366px 1637px #fff, 472px 82px #fff, 718px 666px #fff, 73px 1627px #fff,
      2187px 1639px #fff, 1886px 1369px #fff, 2096px 1223px #fff,
      1248px 1953px #fff, 109px 2175px #fff, 1928px 1020px #fff,
      36px 1772px #fff, 1038px 1938px #fff, 2552px 893px #fff, 544px 2340px #fff,
      591px 1367px #fff, 454px 947px #fff, 1482px 1647px #fff, 344px 2127px #fff,
      1389px 2119px #fff, 629px 1873px #fff, 1433px 2418px #fff,
      212px 1773px #fff, 279px 1936px #fff, 1854px 1304px #fff, 73px 615px #fff,
      761px 125px #fff, 902px 599px #fff, 2140px 944px #fff, 413px 2449px #fff,
      1794px 1180px #fff, 1229px 1866px #fff, 2450px 308px #fff,
      1794px 625px #fff, 1026px 179px #fff, 144px 2293px #fff, 639px 1998px #fff,
      1250px 858px #fff, 1865px 881px #fff, 785px 2200px #fff, 1860px 411px #fff,
      1362px 74px #fff, 595px 2290px #fff, 1586px 1117px #fff, 576px 1923px #fff,
      1975px 94px #fff, 258px 458px #fff, 2122px 1565px #fff, 2147px 70px #fff,
      1664px 206px #fff, 2522px 1115px #fff, 1095px 853px #fff,
      533px 1931px #fff, 559px 2180px #fff, 947px 1821px #fff, 362px 1233px #fff,
      1245px 21px #fff, 867px 1433px #fff, 827px 1671px #fff, 2130px 982px #fff,
      1448px 1990px #fff, 1147px 129px #fff, 1583px 123px #fff,
      1478px 557px #fff, 552px 1324px #fff, 2407px 1194px #fff,
      153px 2417px #fff, 2320px 1619px #fff, 1765px 2471px #fff,
      1179px 412px #fff, 188px 547px #fff, 552px 1321px #fff, 1808px 2143px #fff,
      2255px 1717px #fff, 2327px 2406px #fff, 571px 2449px #fff,
      2142px 779px #fff, 1558px 1365px #fff, 984px 10px #fff, 1209px 1267px #fff,
      1883px 750px #fff, 1536px 426px #fff, 974px 93px #fff, 952px 439px #fff,
      2190px 1513px #fff, 1808px 2311px #fff, 1351px 1967px #fff,
      275px 875px #fff, 1616px 749px #fff, 578px 1603px #fff, 694px 663px #fff,
      1386px 824px #fff, 1662px 606px #fff, 1851px 833px #fff,
      2459px 2209px #fff, 625px 1958px #fff, 2072px 2467px #fff,
      1179px 274px #fff, 647px 5px #fff, 2343px 2255px #fff, 2308px 1600px #fff,
      1156px 2351px #fff, 2160px 364px #fff, 1935px 1167px #fff,
      955px 242px #fff, 856px 2473px #fff, 1887px 942px #fff, 1140px 2163px #fff,
      391px 1191px #fff, 2260px 336px #fff, 785px 1009px #fff, 165px 1899px #fff,
      1129px 2290px #fff, 1333px 384px #fff, 610px 596px #fff,
      1745px 1109px #fff, 1655px 2163px #fff, 989px 1906px #fff,
      1911px 295px #fff, 563px 1360px #fff, 922px 519px #fff, 2393px 1306px #fff,
      1964px 407px #fff, 114px 1254px #fff, 604px 1760px #fff,
      1973px 1835px #fff, 1451px 296px #fff, 949px 1835px #fff,
      273px 1542px #fff, 2319px 980px #fff, 1445px 2474px #fff,
      1147px 223px #fff, 658px 768px #fff, 2051px 66px #fff, 157px 1207px #fff,
      1606px 134px #fff, 1734px 1946px #fff, 2201px 884px #fff,
      2423px 1234px #fff, 1467px 1918px #fff, 2366px 2387px #fff,
      2468px 2058px #fff, 1558px 605px #fff, 340px 1058px #fff,
      2370px 245px #fff, 1742px 341px #fff, 921px 1837px #fff,
      1051px 1153px #fff, 207px 1961px #fff, 1028px 2468px #fff,
      2013px 1413px #fff, 1756px 988px #fff, 1624px 1885px #fff,
      1596px 924px #fff, 699px 2455px #fff, 718px 766px #fff, 1341px 2537px #fff,
      2522px 1167px #fff, 1227px 1503px #fff, 1682px 1927px #fff,
      2410px 1049px #fff, 2435px 1912px #fff, 894px 2436px #fff,
      2451px 1497px #fff, 2246px 1437px #fff, 2224px 1190px #fff,
      1259px 417px #fff, 2283px 187px #fff, 2006px 2001px #fff,
      1283px 144px #fff, 1611px 2448px #fff, 1462px 1767px #fff,
      993px 1837px #fff, 672px 1534px #fff, 1678px 1113px #fff,
      1299px 1398px #fff, 731px 277px #fff, 2152px 2102px #fff,
      1540px 539px #fff, 2394px 985px #fff, 1636px 866px #fff, 1164px 691px #fff,
      1793px 1705px #fff, 2335px 2500px #fff, 757px 610px #fff,
      1999px 1561px #fff, 2073px 1094px #fff, 1270px 396px #fff,
      82px 1863px #fff, 1127px 250px #fff, 767px 2297px #fff, 335px 2206px #fff,
      544px 1595px #fff, 131px 2162px #fff, 2116px 1818px #fff,
      1687px 2293px #fff, 2190px 565px #fff, 2490px 2501px #fff,
      767px 222px #fff, 2264px 1484px #fff, 971px 498px #fff, 170px 1934px #fff,
      1455px 1590px #fff, 1483px 30px #fff, 1275px 37px #fff, 992px 238px #fff,
      2136px 597px #fff, 143px 371px #fff, 769px 2462px #fff, 1737px 1752px #fff,
      2248px 196px #fff, 1103px 482px #fff, 1132px 891px #fff,
      2333px 1648px #fff, 2472px 1496px #fff, 1046px 2458px #fff,
      231px 862px #fff, 334px 24px #fff, 348px 1189px #fff, 1333px 2225px #fff,
      2524px 356px #fff, 17px 1735px #fff, 1294px 2373px #fff, 281px 2346px #fff,
      199px 1436px #fff, 548px 32px #fff, 696px 1975px #fff, 1748px 827px #fff,
      1814px 1292px #fff, 175px 1643px #fff, 556px 2345px #fff, 58px 2422px #fff,
      885px 1220px #fff, 2203px 876px #fff, 2534px 1426px #fff,
      528px 1005px #fff, 2419px 463px #fff, 915px 1556px #fff, 966px 1324px #fff,
      1895px 1206px #fff, 2374px 374px #fff, 2071px 624px #fff,
      1729px 1298px #fff, 2293px 2083px #fff, 2341px 1087px #fff,
      138px 1735px #fff, 799px 1950px #fff, 696px 2477px #fff, 178px 1141px #fff,
      2295px 2045px #fff, 1486px 754px #fff, 411px 1239px #fff,
      991px 1800px #fff, 1274px 381px #fff, 30px 225px #fff, 268px 271px #fff,
      1659px 396px #fff, 2486px 2177px #fff, 1253px 2286px #fff,
      2204px 567px #fff, 329px 16px #fff, 1473px 2002px #fff, 1670px 1581px #fff,
      350px 1851px #fff, 1388px 983px #fff, 1136px 1115px #fff,
      1019px 419px #fff, 1101px 1626px #fff, 613px 894px #fff,
      1428px 2113px #fff, 2290px 1054px #fff, 42px 2256px #fff,
      2318px 1736px #fff, 1657px 1079px #fff, 1058px 1676px #fff,
      723px 2396px #fff, 584px 634px #fff, 1353px 832px #fff, 8px 1270px #fff,
      773px 437px #fff, 706px 2264px #fff, 1421px 1754px #fff, 169px 2446px #fff,
      304px 595px #fff, 341px 1301px #fff, 187px 2384px #fff, 374px 1202px #fff,
      1829px 1294px #fff, 1248px 513px #fff, 1701px 1778px #fff,
      1728px 1249px #fff, 1784px 83px #fff, 531px 2530px #fff, 71px 821px #fff,
      1997px 1664px #fff, 1950px 292px #fff, 2102px 785px #fff,
      1310px 1446px #fff, 343px 1164px #fff, 687px 2338px #fff,
      1461px 2217px #fff, 32px 2545px #fff, 2044px 2481px #fff, 512px 69px #fff,
      484px 771px #fff, 2106px 2443px #fff, 1909px 814px #fff,
      1986px 1494px #fff, 278px 2184px #fff, 2305px 2182px #fff,
      2270px 1013px #fff, 965px 1178px #fff, 2355px 2127px #fff,
      1523px 736px #fff, 794px 144px #fff, 309px 1650px #fff, 1243px 249px #fff,
      140px 2257px #fff, 1071px 529px #fff, 691px 1578px #fff, 1546px 261px #fff,
      1797px 2550px #fff, 9px 121px #fff, 1097px 240px #fff, 1657px 604px #fff,
      533px 2211px #fff, 310px 1156px #fff, 1305px 722px #fff;
    height: 1px;
    width: 1px;
  }

  @-webkit-keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }

  @keyframes animParticle {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(-2560px);
    }
  }
</style>

<blockquote>
<p>感谢 @芝士部落格 提供了友链页面模板~</p>
</blockquote>
<p>在友链形成的网络中漫游，是一件很有意思的事情。</p>
<p><strong>以前的人们通过信笺交流，而我们通过友链串联起一个「世界」。希望你我都能在这个「世界」中有所收获</strong></p>
<p><strong>注：</strong> <span style="color:red;">下方友链次序每次刷新页面随机排列。<span></p>
<div class="linkpage"><ul id="friendsList"></ul></div>
<h2 id="交换友链" class="headerLink">
    <a href="#%e4%ba%a4%e6%8d%a2%e5%8f%8b%e9%93%be" class="header-mark"></a>交换友链</h2><p>如果你觉得我的博客有些意思，而且也有自己的博客，并且博客运行时间超过半年，至少有 6 篇自认为有价值的原创文章，欢迎与我交换友链~</p>
<p>可通过 <a href="https://github.com/ryan4yin/ryan4yin.space/issues" target="_blank" rel="noopener noreffer">Issues</a> 或者评论区提交友链申请，格式如下：</p>
<pre><code>站点名称：This Cute World
站点地址：https://thiscute.world/
个人形象：https://thiscute.world/avatar/myself.webp
站点描述：赞美快乐~
</code></pre>
<script type="text/javascript">
// 以下为样例内容，按照格式可以随意修改
var myFriends = [
    ["https://chee5e.space", "https://chee5e.space/images/avatar.jpg", "@芝士部落格", "有思想，也有忧伤和理想，芝士就是力量"], 
    // ["https://sanshiliuxiao.top/", "https://cdn.jsdelivr.net/gh/vensing/static@latest/avatar/sanshiliuxiao.jpg", "@三十六咲", "快走吧，趁风停止之前"], 
    ["https://rea.ink/", "/avatar/rea.ink.webp", "@倾书", "清风皓月，光景常新 <= 前端"], 
    ["https://jdragon.club/", "/avatar/jdragon.webp", "@谭宇", "Hello world! <= Java"], 
    // ["https://www.jianshu.com/u/af3a36ae8d16", "/avatar/li2niu.webp", "@李二牛", "深耕Web服务端 马拉松爱好者(PB330) <= Java"], 
    // ["https://www.i-lab.top/", "https://www.i-lab.top/favicon.ico", "@震邦的算法日常", "南北传"], 
    ["https://cxcn.xyz/", "https://cxcn.xyz/avatar.webp", "@单单", "但知行好事，莫要问前程"], 
    ["https://farer.org/", "/avatar/farer.webp", "@Stray Episode", "Scientific Evocation"], 
    ["https://wasteland.touko.moe", "https://wasteland.touko.moe/images/avatar.png", "@Touko Hoshino", "My Exploration, My Whisper"], 
    ["https://blog.k8s.li/", "/avatar/muzi.webp", "@木子", "垃圾佬、搬砖社畜、运维工程师 <= 莫得感情的读书机器"], 
    ["https://www.addesp.com", "https://www.addesp.com/avatar", "@ADD-SP", "记录 & 分享 & 感受 <= 网络协议"], 
    ["https://yidajiabei.xyz/", "/avatar/tianheg.webp", "@一大加贝", "学习技术，热爱生活"], 
    ["https://guanqr.com/", "https://cdn.jsdelivr.net/gh/guanqr/blog/static/icons/android-chrome-512x512.png", "@荷戟独彷徨", "爱光学，爱生活，爱创造"], 
    ["https://exploro.one", "https://avatars.githubusercontent.com/u/4038871?s=460&u=d2f1c2eea96acb15578f2e513ba5fa673aa3d250&v=4", "@探索子", "Learn by doing. <= 硬核数学"], 
    ["https://panqiincs.me/", "https://panqiincs.me/images/avatar.jpg", "@辛未羊", "人生如逆旅，我亦是行人 <= 信号系统"], 
    ["https://a-wing.top/", "https://a-wing.top/assets/avatar.png", "@新一", "Hi! 上天不? <= 无人机大佬来卷互联网了"], 
    ["https://www.cnblogs.com/hellxz/", "/avatar/hellxz.webp", "@东北小狐狸", "若你不能簡單解釋一件事，那麼你就是不夠了解它。"], 
    ["https://stdrc.cc/", "/avatar/richardchien.webp", "@Richard Chien", "一只腊鸡的技术成长 <= Nonebot作者/OS大佬"], 
    ["https://fmcf.cc/", "https://q1.qlogo.cn/g?b=qq&nk=2357307393&s=640", "@幸吾有志", "他戴着花冠，踏于风雪，探寻迷途的救赎，绽放生命的曙光"], 
    ["https://www.lionad.art/", "/avatar/lionad-morotar.webp", "@仿生狮子", "前端攻城狮 | 砸吉他 | 午夜恶魔 | 兴趣泛滥 | 逃离地球"], 
    ["https://ryanyang.cn/", "/avatar/ryanyang.webp", "@ryanyang", "一位智慧的阿拉伯诗人 <= Java 后端大佬"], 
    ["https://bohecat.com/", "https://tc.bohecat.com/image/WX20220210-123651%402x.png", "@薄荷的猫草", "90后懒癌博主一枚~"], 
    ["https://naccl.top/", "https://naccl.top/img/avatar.jpg", "@Naccl", "游龙当归海，海不迎我自来也。"], 
    ["https://ilimeng.cn/", "https://ilimeng.cn/SLiMan.png", "@离梦", "一个记性不好的00后博主"], 
    ["https://www.eatrice.cn", "/avatar/eatrice.jpg", "@吃白饭的休伯利安号", "非专业搬砖的土木工程师"], 
    ["https://blog.010sec.cn/", "/avatar/c4rt1y.webp", "@c4rt1y", "<= 运维搬砖人"], 
    ["https://mcenjoy.cn/", "https://mcenjoy.cn/avatar", "@mcenjoy", "记录生活点滴 <= 密码学/Golang/逆向"], 
    ["https://ferryxie.com/", "/avatar/ferryxie.webp", "@Ferry", "金融科技与人文思考并存"], 
    ["https://bbing.com.cn/", "https://fastly.jsdelivr.net/gh/caibingcheng/resources@main/images/2B2pd1.png", "@BBing", "自由 分享 合作 <= C/C++/Linux 高手"], 
];



// 以下为核心功能内容，修改前请确保理解您的行为内容与可能造成的结果
var  targetList = document.getElementById("friendsList");
while (myFriends.length > 0) {
    var rndNum = Math.floor(Math.random()*myFriends.length);
    var friendNode = document.createElement("li");
    var friend_link = document.createElement("a"), 
        friend_img = document.createElement("img"), 
        friend_name = document.createElement("h4"), 
        friend_about = document.createElement("p")
    ;
    friend_link.target = "_blank";
    friend_link.href = myFriends[rndNum][0];
    friend_img.src=myFriends[rndNum][1];
    friend_name.innerText = myFriends[rndNum][2];
    friend_about.innerText = myFriends[rndNum][3];
    friend_link.appendChild(friend_img);
    friend_link.appendChild(friend_name);
    friend_link.appendChild(friend_about);
    friendNode.appendChild(friend_link);
    targetList.appendChild(friendNode);
    myFriends.splice(rndNum, 1);
}
</script>
<style>

.linkpage ul {
    color: rgba(255,255,255,.15)
}

.linkpage ul:after {
    content: " ";
    clear: both;
    display: block
}

.linkpage li {
    float: left;
    width: 48%;
    position: relative;
    -webkit-transition: .3s ease-out;
    transition: .3s ease-out;
    border-radius: 5px;
    line-height: 1.3;
    height: 90px;
    display: block
}

.linkpage h3 {
    margin: 15px -25px;
    padding: 0 25px;
    border-left: 5px solid #51aded;
    background-color: #f7f7f7;
    font-size: 25px;
    line-height: 40px
}

.linkpage li:hover {
    background: rgba(230,244,250,.5);
    cursor: pointer
}

.linkpage li a {
    padding: 0 10px 0 90px
}

.linkpage li a img {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    position: absolute;
    top: 15px;
    left: 15px;
    cursor: pointer;
    margin: auto;
    border: none
}

.linkpage li a h4 {
    color: #333;
    font-size: 18px;
    margin: 0 0 7px;
    padding-left: 90px
}

.linkpage li a h4:hover {
    color: #51aded
}

.linkpage li a h4, .linkpage li a p {
    cursor: pointer;
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
    line-height: 1.4;
    margin: 0 !important;
}

.linkpage li a p {
    font-size: 12px;
    color: #999;
    padding-left: 90px
}

@media(max-width: 460px) {
    .linkpage li {
        width:97%
    }

    .linkpage ul {
        padding-left: 5px
    }
}

</style>
]]></content></entry><entry><title type="html">Pulumi 使用体验 - 基础设施代码化</title><link href="https://thiscute.world/posts/expirence-of-pulumi/"/><id>https://thiscute.world/posts/expirence-of-pulumi/</id><author><name>ryan4yin</name></author><published>2021-01-08T18:51:30+08:00</published><updated>2021-01-08T18:51:30+08:00</updated><content type="html"><![CDATA[<p><a href="https://github.com/pulumi/pulumi" target="_blank" rel="noopener noreffer">Pulumi</a> 是一个基础设施的自动管理工具，使用 Python/TypeScript/Go/Dotnet 编写好声明式的资源配置，就能实现一键创建/修改/销毁各类资源，这里的资源可以是：</p>
<ul>
<li>AWS/阿里云等云上的负载均衡、云服务器、TLS 证书、DNS、CDN、OSS、数据库&hellip;几乎所有的云上资源</li>
<li>本地自建的 vSphere/Kubernetes/ProxmoxVE/libvirt 环境中的虚拟机、容器等资源</li>
</ul>
<p>相比直接调用 AWS/阿里云/Kubernetes 的 API，使用 pulumi 的好处有：</p>
<ul>
<li>声明式配置：你只需要声明你的资源属性就 OK，所有的状态管理、异常处理都由 pulumi 完成。</li>
<li>统一的配置方式：提供统一的配置方法，来声明式的配置所有 AWS/阿里云/Kubernetes 资源。</li>
<li>声明式配置的可读性更好，更便于维护</li>
</ul>
<p>试想一下，通过传统的手段去从零搭建一个云上测试环境、或者本地开发环境，需要手工做多少繁琐的工作。</p>
<p>而依靠 Pulumi 这类「基础设施即代码（Infrastructure as Code, IaC）」的工具，只需要一行命令就能搭建好一个可复现的云上测试环境或本地开发环境。</p>
<p>比如我们的阿里云测试环境，包括两个 kubernetes 集群、负载均衡、VPC 网络、数据库、云监控告警/日志告警、RAM账号权限体系等等，是一个比较复杂的体系。</p>
<p>人工去配置这么多东西，想要复现是很困难的，非常繁琐而且容易出错。</p>
<p>但是使用 pulumi，只需要一行命令，就能创建并配置好这五花八门一大堆的玩意儿。
销毁整个测试环境也只需要一行命令。</p>
<p><strong>实际使用体验</strong>：我们使用 Pulumi 自动化了阿里云测试环境搭建 95%+ 的操作，这个比例随着阿里云的 pulumi provider 的完善，还可以进一步提高！</p>
<h2 id="pulumi-vs-terraform-vs-cloudformation" class="headerLink">
    <a href="#pulumi-vs-terraform-vs-cloudformation" class="header-mark"></a>Pulumi vs Terraform vs CloudFormation</h2><p>先介绍下 CloudFormation，它是 AWS 提供的一个 IaC 工具， 它使用 json/yaml 编写声明式配置文件，然后完全在 AWS 云上进行资源的创建、管理、销毁。
其所创建的资源跟 CloudFormation Task 同生命周期，因此删除该 CloudFormation Task 就会自动销毁所有相关资源。
因此它的好处应该是可以完全在云上运行，本地客户端只是一个提交配置的工具。而缺点则是只能在 AWS 上使用。</p>
<p>而在通用的「基础设施即代码」领域，有一个工具比 Pulumi 更流行，它就是 <a href="https://www.terraform.io/" target="_blank" rel="noopener noreffer">Terraform</a>.</p>
<p>实际上我们一开始使用的也是 Terraform，但是后来使用 Pulumi 完全重写了一遍。</p>
<p>主要原因是，Pulumi 解决了 Terraform 配置的一个痛点：配置语法太过简单，导致配置繁琐。而且还要额外学习一门 DSL - HCL</p>
<p>Terraform 虽然应用广泛，但是它默认使用的 HCL 语言太简单，表现力不够强。
这就导致在一些场景下使用 Terraform，会出现大量的重复配置。</p>
<p>一个典型的场景是「批量创建资源，动态生成资源参数」。比如批量创建一批名称类似的 ECS 服务器/VPC交换机。如果使用 terraform，就会出现大量的重复配置。</p>
<p>改用 terraform 提供的 module 能在一定程度上实现配置的复用，但是它还是解决不了问题。
要使用 module，你需要付出时间去学习 module 的概念，为了拼接参数，你还需要学习 HCL 的一些高级用法。</p>
<p>但是付出了这么多，最后写出的 module 还是不够灵活——它被 HCL 局限住了。</p>
<p>为了实现如此的参数化动态化，我们不得不引入 Python 等其他编程语言。于是构建流程就变成了：</p>
<ol>
<li>借助 Python 等其他语言先生成出 HCL 配置</li>
<li>通过 <code>terraform</code> 命令行进行 plan 与 apply</li>
<li>通过 Python 代码解析 <code>terraform.tfstat</code>，获取 apply 结果，再进行进一步操作。</li>
</ol>
<p>这显然非常繁琐，主要困难就在于 Python 和 Terraform 之间的交互。</p>
<p>进一步思考，<strong>既然其他编程语言如 Python/Go 的引入不可避免，那是不是能使用它们彻底替代掉 HCL 呢？能不能直接使用 Python/Go 编写配置</strong>？如果 Terraform 原生就支持 Python/Go 来编写配置，那就不存在交互问题了。</p>
<p>相比于使用领域特定语言 HCL，使用通用编程语言编写配置，好处有：</p>
<ol>
<li>Python/Go/TypeScript 等通用的编程语言，也支持 Yaml 这样方便自动化生成的配置语言，能满足你的一切需求。</li>
<li>作为一个开发人员/DevOps，你应该对 Python/Go 等语言相当熟悉，可以直接利用上已有的经验。</li>
<li>更方便测试：可以使用各编程语言中流行的测试框架来测试 pulumi 配置！</li>
</ol>
<p>于是 Pulumi 横空出世。</p>
<blockquote>
<p>另一个和 Pulumi 功能类似的工具，是刚出炉没多久的 <a href="https://github.com/hashicorp/terraform-cdk" target="_blank" rel="noopener noreffer">terraform-cdk</a>，但是目前它还很不成熟。</p>
</blockquote>
<h2 id="pulumi-特点介绍" class="headerLink">
    <a href="#pulumi-%e7%89%b9%e7%82%b9%e4%bb%8b%e7%bb%8d" class="header-mark"></a>Pulumi 特点介绍</h2><ol start="4">
<li>原生支持通过 Python/Go/TypeScript/Dotnet 等语言编写配置，也就完全解决了上述的 terraform 和 python 的交互问题。</li>
<li>pulumi 是目前最流行的 真-IaaS 工具，对各语言的支持都很成熟。</li>
<li>兼容 terraform 的所有 provider，只是需要自行使用 <a href="https://github.com/pulumi/pulumi-tf-provider-boilerplate" target="_blank" rel="noopener noreffer">pulumi-tf-provider-boilerplate</a> 重新打包，有些麻烦。
<ol>
<li>pulumi 官方的 provider 几乎全都是封装的 terraform provider，包括 aws/azure/alicloud，目前只发现 kubernetes 是原生的（独苗啊）。</li>
</ol>
</li>
<li>状态管理和 secrets 管理有如下几种选择：
<ol>
<li>使用 app.pulumi.com（默认）:免费版提供 stack 历史管理，可以看到所有的历史记录。另外还提供一个资源关系的可视化面板。总之很方便，但是多人合作就需要收费。</li>
<li>本地文件存储：<code>pulumi login file:///app/data</code></li>
<li><a href="https://www.pulumi.com/docs/intro/concepts/state/#logging-into-the-aws-s3-backend" target="_blank" rel="noopener noreffer">云端对象存储</a>，支持 s3 等对象存储协议，因此可以使用 AWS 或者本地的 MinIO 来做 Backend.
<ul>
<li><code>pulumi login 's3://&lt;bucket-path&gt;?endpoint=my.minio.local:8080&amp;disableSSL=true&amp;s3ForcePathStyle=true'</code></li>
<li>minio/aws 的 creadential 可以通过 <code>AWS_ACCESS_KEY_ID</code> 和 <code>AWS_SECRET_ACCESS_KEY</code> 两个环境变量设置。另外即使是使用 MinIO，<code>AWS_REGION</code> 这个没啥用的环境变量也必须设置！否则会报错。</li>
</ul>
</li>
<li><a href="https://github.com/pulumi/pulumi/issues/4727" target="_blank" rel="noopener noreffer">gitlab 13 支持 Terraform HTTP State 协议</a>，等这个 pr 合并，pulumi 也能以 gitlab 为 backend 了。</li>
<li>使用 pulumi 企业版（自建服务）：比 app.pulumi.com 提供更多的特性，但是显然是收费的。。</li>
</ol>
</li>
</ol>
<p>总之，非常香，强烈推荐各位 DevOps 试用。</p>
<hr>
<blockquote>
<p>以下内容是我对 pulumi 的一些思考，以及使用 pulumi 遇到的各种问题+解决方法，适合对 pulumi 有一定了解的同学阅读。</p>
</blockquote>
<blockquote>
<p>如果你刚接触 Pulumi 而且有兴趣学习，建议先移步 <a href="https://www.pulumi.com/docs/get-started/install/" target="_blank" rel="noopener noreffer">pulumi get started</a> 入个门，再接着看下面的内容。</p>
</blockquote>
<h2 id="使用建议" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8%e5%bb%ba%e8%ae%ae" class="header-mark"></a>使用建议</h2><ol>
<li><strong>建议查看对应的 terraform provider 文档：pulumi 的 provider 基本都是封装的 terraform 版本，而且文档是自动生成的，比（简）较（直）难（一）看（坨）懂（shi），examples 也少。</strong></li>
<li>stack: pulumi 官方提供了两种 stack 用法：<a href="https://www.pulumi.com/docs/intro/concepts/organizing-stacks-projects/" target="_blank" rel="noopener noreffer">「单体」和「微-stack」</a>
<ol>
<li>单体: one stack rule them all，通过 stack 参数来控制步骤。stack 用来区分环境 dev/pro 等。</li>
<li>微-stack: 每一个 stack 是一个步骤，所有 stack 组成一个完整的项目。</li>
<li>实际使用中，我发现「微-stack」模式需要使用到 pulumi 的 inter-stack dependencies，报一堆的错，而且不够灵活。因此目前更推荐「单体」模式。</li>
</ol>
</li>
</ol>
<p>我们最近使用 pulumi 完全重写了以前用 terraform 编写的云上配置，简化了很多繁琐的配置，也降低了我们 Python 运维代码和 terraform 之间的交互难度。
另外我们还充分利用上了 Python 的类型检查和语法检查，很多错误 IDE 都能直接给出提示，强化了配置的一致性和可维护性。</p>
<p>不过由于阿里云 provider 暂时还：</p>
<ol>
<li>不支持管理 ASM 服务网格、DTS 数据传输等资源</li>
<li>OSS 等产品的部分参数也暂时不支持配置（比如 OSS 不支持配置图片样式、ElasticSearch 暂时不支持自动创建 7.x 版本）</li>
<li>不支持创建 ElasticSearch 7.x</li>
</ol>
<p>这些问题，导致我们仍然有部分配置需要手动处理，另外一些耗时长的资源，需要单独去创建。
因此还不能实现完全的「一键」。</p>
<h2 id="常见问题" class="headerLink">
    <a href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" class="header-mark"></a>常见问题</h2><h3 id="1-output-的用法" class="headerLink">
    <a href="#1-output-%e7%9a%84%e7%94%a8%e6%b3%95" class="header-mark"></a>1. <code>Output</code> 的用法</h3><ol>
<li>pulumi 通过资源之间的属性引用（<code>Output[str]</code>）来确定依赖关系，如果你通过自定义的属性(<code>str</code>)解耦了资源依赖，会导致资源创建顺序错误而创建失败。</li>
<li><code>Output[str]</code> 是一个异步属性，类似 Future，不能被用在 pulumi 参数之外的地方！</li>
<li><code>Output[str]</code> 提供两种方法能直接对 <code>Output[str]</code> 进行一些操作：
<ol>
<li><code>Output.concat(&quot;http://&quot;, domain, &quot;/&quot;, path)</code>: 此方法将 str 与 <code>Output[str]</code> 拼接起来，返回一个新的 <code>Output[str]</code> 对象，可用做 pulumi 属性。</li>
<li><code>domain.apply(lambda it: print(it))</code>: <code>Output[str]</code> 的 <code>apply</code> 方法接收一个函数。在异步获取到数据后，pulumi 会调用这个函数，把具体的数据作为参数传入。
<ul>
<li>另外 <code>apply</code> 也会将传入函数的返回值包装成 <code>Output</code> 类型返回出来。</li>
<li>可用于：在获取到数据后，将数据打印出来/发送到邮箱/调用某个 API 上传数据等等。</li>
</ul>
</li>
<li><code>Output.all(output1, output2, ...).apply(lambda it: print(it))</code> 可用于将多个 <code>output</code> 值，拼接成一个 <code>Output</code> 类型，其内部的 raw 值为一个 tuple 对象 <code>(str1, str2, ...)</code>.
<ol>
<li>官方举例：<code>connection_string = Output.all(sql_server.name, database.name).apply(lambda args: f&quot;Server=tcp:{args[0]}.database.windows.net;initial catalog={args[1]}...&quot;)</code></li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="2-如何使用多个云账号多个-k8s-集群" class="headerLink">
    <a href="#2-%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8%e5%a4%9a%e4%b8%aa%e4%ba%91%e8%b4%a6%e5%8f%b7%e5%a4%9a%e4%b8%aa-k8s-%e9%9b%86%e7%be%a4" class="header-mark"></a>2. 如何使用多个云账号/多个 k8s 集群？</h3><p>默认情况下 pulumi 使用默认的 provider，但是 pulumi 所有的资源都有一个额外的 <code>opts</code> 参数，可用于设定其他 provider。</p>
<p>通过这个 <code>opts</code>，我们可以实现在一个 pulumi 项目中，使用多个云账号，或者管理多个 k8s 集群。</p>
<p>示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pulumi</span> <span class="kn">import</span> <span class="n">get_stack</span><span class="p">,</span> <span class="n">ResourceOptions</span><span class="p">,</span> <span class="n">StackReference</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pulumi_alicloud</span> <span class="kn">import</span> <span class="n">Provider</span><span class="p">,</span> <span class="n">oss</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 自定义 provider，key/secret 通过参数设定，而不是从默认的环境变量读取。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 可以自定义很多个 providers</span>
</span></span><span class="line"><span class="cl"><span class="n">provider</span> <span class="o">=</span> <span class="n">pulumi_alicloud</span><span class="o">.</span><span class="n">Provider</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">   <span class="s2">&#34;custom-alicloud-provider&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="n">region</span><span class="o">=</span><span class="s2">&#34;cn-hangzhou&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="n">access_key</span><span class="o">=</span><span class="s2">&#34;xxx&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="n">secret_key</span><span class="o">=</span><span class="s2">&#34;jjj&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 通过 opts，让 pulumi 使用自定义的 provider（替换掉默认的）</span>
</span></span><span class="line"><span class="cl"><span class="n">bucket</span> <span class="o">=</span> <span class="n">oss</span><span class="o">.</span><span class="n">Bucket</span><span class="p">(</span><span class="o">...</span><span class="p">,</span> <span class="n">opts</span><span class="o">=</span><span class="n">ResourceOptions</span><span class="p">(</span><span class="n">provider</span><span class="o">=</span><span class="n">provider</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-inter-stack-属性传递" class="headerLink">
    <a href="#3-inter-stack-%e5%b1%9e%e6%80%a7%e4%bc%a0%e9%80%92" class="header-mark"></a>3. inter-stack 属性传递</h3><blockquote>
<p>这东西还没搞透，待研究。</p>
</blockquote>
<p>多个 stack 之间要互相传递参数，需要通过 <code>pulumi.export</code> 导出属性，通过 <code>stack.require_xxx</code> 获取属性。</p>
<p>从另一个 stack 读取属性的示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pulumi</span> <span class="kn">import</span> <span class="n">StackReference</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">cfg</span> <span class="o">=</span> <span class="n">pulumi</span><span class="o">.</span><span class="n">Config</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">stack_name</span> <span class="o">=</span> <span class="n">pulumi</span><span class="o">.</span><span class="n">get_stack</span><span class="p">()</span>  <span class="c1"># stack 名称</span>
</span></span><span class="line"><span class="cl"><span class="n">project</span> <span class="o">=</span> <span class="n">pulumi</span><span class="o">.</span><span class="n">get_project</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">infra</span> <span class="o">=</span> <span class="n">StackReference</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;ryan4yin/</span><span class="si">{</span><span class="n">project</span><span class="si">}</span><span class="s2">/</span><span class="si">{</span><span class="n">stack_name</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 这个属性在上一个 stack 中被 export 出来</span>
</span></span><span class="line"><span class="cl"><span class="n">vpc_id</span> <span class="o">=</span> <span class="n">infra</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="s2">&#34;resources.vpc.id&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-pulumi-up-被中断或者对资源做了手动修改会发生什么" class="headerLink">
    <a href="#4-pulumi-up-%e8%a2%ab%e4%b8%ad%e6%96%ad%e6%88%96%e8%80%85%e5%af%b9%e8%b5%84%e6%ba%90%e5%81%9a%e4%ba%86%e6%89%8b%e5%8a%a8%e4%bf%ae%e6%94%b9%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88" class="header-mark"></a>4. <code>pulumi up</code> 被中断，或者对资源做了手动修改，会发生什么？</h3><ol>
<li>强行中断 <code>pulumi up</code>，会导致资源进入 <code>pending</code> 状态，必须手动修复。
<ol>
<li>修复方法：<code>pulumi stack export</code>，删除 pending 资源，再 <code>pulumi stack import</code></li>
</ol>
</li>
<li>手动删除了云上资源，或者修改了一些对资源管理无影响的参数，对 <code>pulumi</code> 没有影响，它能正确检测到这种情况。
<ol>
<li>可以通过 <code>pulumi refresh</code> 手动从云上拉取最新的资源状态。</li>
</ol>
</li>
<li>手动更改了资源之间的依赖关系（比如绑定 EIP 之类的），很可能导致 pulumi 无法正确管理资源之间的依赖。
<ul>
<li>这种情况必须先手动还原依赖关系（或者把相关资源全部手动删除掉），然后才能继续使用 pulumi。</li>
</ul>
</li>
</ol>
<h3 id="5-如何手动声明资源间的依赖关系" class="headerLink">
    <a href="#5-%e5%a6%82%e4%bd%95%e6%89%8b%e5%8a%a8%e5%a3%b0%e6%98%8e%e8%b5%84%e6%ba%90%e9%97%b4%e7%9a%84%e4%be%9d%e8%b5%96%e5%85%b3%e7%b3%bb" class="header-mark"></a>5. 如何手动声明资源间的依赖关系？</h3><p>有时候因为一些问题（比如 pulumi provider 功能缺失，使用了 restful api 实现部分功能），pulumi 可能无法识别到某些资源之间的依赖关系。</p>
<p>这时可以为资源添加 <code>dependsOn</code> 属性，这个属性能显式地声明依赖关系。</p>
<h3 id="6-如何导入已经存在的资源" class="headerLink">
    <a href="#6-%e5%a6%82%e4%bd%95%e5%af%bc%e5%85%a5%e5%b7%b2%e7%bb%8f%e5%ad%98%e5%9c%a8%e7%9a%84%e8%b5%84%e6%ba%90" class="header-mark"></a>6. 如何导入已经存在的资源？</h3><p>如果你司不是一开始就使用了 pulumi 这类工具，那通常绝大部分云上资源都是手动管理、或者由其他工具自动化管理的，该如何将它们纳入 pulumi 管辖呢？</p>
<p>官方有提供一篇相关文档 <a href="https://www.pulumi.com/docs/guides/adopting/import/" target="_blank" rel="noopener noreffer">Importing Infrastructure</a>.</p>
<p>文档有提到两种资源导入的方法，导入成功后都会自动生成资源的状态，以及对应的 pulumi 代码。
第一种是使用 <code>pulumi import</code> 命令，第二种是在代码中使用 <code>import</code> 参数。</p>
<p>除此之外，社区还有几个其他资源导入工具（reverse IaC）值得研究：</p>
<ul>
<li><a href="https://github.com/iann0036/former2" target="_blank" rel="noopener noreffer">former2</a>: 为已有的 AWS 资源生成 terraform/pulumi/cloudformation 等配置，但是不支持生成 tfstate 状态</li>
<li><a href="https://github.com/GoogleCloudPlatform/terraformer" target="_blank" rel="noopener noreffer">terraformer</a>: 为已有的 AWS/GCP/Azure/Alicloud/DigitalOcean 等多种云资源生成 terraform 配置以及 tfstate 状态</li>
<li><a href="https://github.com/cycloidio/terracognita" target="_blank" rel="noopener noreffer">terracognita</a>: 功能跟 terraformer 一样，都支持生成 terraform 配置以及 tfstate 状态，但是它支持 AWS/GCP/Azure 三朵云</li>
<li><a href="https://github.com/pulumi/pulumi-terraform" target="_blank" rel="noopener noreffer">pulumi-terraform</a>: 这个 provider 使你可以在 pulumi 项目里使用 tfstate 状态文件</li>
<li><a href="https://github.com/pulumi/tf2pulumi" target="_blank" rel="noopener noreffer">tf2pulumi</a>: 将 terraform 配置转换为 pulumi typescript 配置</li>
</ul>
<h4 id="61-通过-pulumi-import-命令导入资源" class="headerLink">
    <a href="#61-%e9%80%9a%e8%bf%87-pulumi-import-%e5%91%bd%e4%bb%a4%e5%af%bc%e5%85%a5%e8%b5%84%e6%ba%90" class="header-mark"></a>6.1 通过 pulumi import 命令导入资源</h4><p>使用 <code>pulumi import</code> 命令导入资源的好处是，不需要为每个资源手写代码，此命令会<strong>自动生成资源的 stack state 与配置代码</strong>。</p>
<p>使用此命令导入的资源，默认会启用删除保护，你可通过参数 <code>--protect=false</code> 来关闭删除保护。</p>
<p>资源名称可通过命令行参数，或者 Json 文件来指定。</p>
<p>下面我们演示一个导入一个 s3 bucket 的流程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 导入一个名为 test-sre 的 s3 bucket，资源 ID 为 p-test-sre</span>
</span></span><span class="line"><span class="cl">$ pulumi import aws:s3/bucket:Bucket p-test-sre test-sre
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">Do you want to perform this import? yes
</span></span><span class="line"><span class="cl">Importing <span class="o">(</span>dev<span class="o">)</span>:
</span></span><span class="line"><span class="cl">     Type                 Name             Status
</span></span><span class="line"><span class="cl"> +   pulumi:pulumi:Stack  pulumi-test-dev  <span class="nv">created</span>
</span></span><span class="line"><span class="cl"> <span class="o">=</span>   └─ aws:s3:Bucket     p-test-sre       imported
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Resources:
</span></span><span class="line"><span class="cl">    + <span class="m">1</span> <span class="nv">created</span>
</span></span><span class="line"><span class="cl">    <span class="o">=</span> <span class="m">1</span> imported
</span></span><span class="line"><span class="cl">    <span class="m">2</span> changes
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Duration: 8s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please copy the following code into your Pulumi application. Not doing so
</span></span><span class="line"><span class="cl">will cause Pulumi to report that an update will happen on the next update command.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please note that the imported resources are marked as protected. To destroy them
</span></span><span class="line"><span class="cl">you will need to remove the <span class="sb">`</span>protect<span class="sb">`</span> option and run <span class="sb">`</span>pulumi update<span class="sb">`</span> *before*
</span></span><span class="line"><span class="cl">the destroy will take effect.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">import pulumi
</span></span><span class="line"><span class="cl">import pulumi_aws as aws
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">p_test_sre</span> <span class="o">=</span> aws.s3.Bucket<span class="o">(</span><span class="s2">&#34;p-test-sre&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">arn</span><span class="o">=</span><span class="s2">&#34;arn:aws:s3:::test-sre&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">bucket</span><span class="o">=</span><span class="s2">&#34;test-sre&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">hosted_zone_id</span><span class="o">=</span><span class="s2">&#34;ZZBBCC332211KK&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">request_payer</span><span class="o">=</span><span class="s2">&#34;BucketOwner&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">tags</span><span class="o">={</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Name&#34;</span>: <span class="s2">&#34;test-sre&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Team&#34;</span>: <span class="s2">&#34;Platform&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">opts</span><span class="o">=</span>pulumi.ResourceOptions<span class="o">(</span><span class="nv">protect</span><span class="o">=</span>True<span class="o">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>能看到它会自动导入对应资源的 state，并同时打印出对应的 python 代码，要求我们手动将代码复制粘贴到项目中。
而且代码会自带 arn/hosted_zone_id/protect 等属性，说明这个资源实际上是无法像普通 pulumi 资源一样，通过 <code>pulumi up</code>/<code>pulumi destroy</code> 自动创建销毁的。要通过 pulumi 删除该资源，需要首先解除删除保护，然后将对应的代码片段删除掉，最后执行 <code>pulumi up</code>。</p>
<p>也可通过 json 来批量导入资源，首先编写一个 json 资源清单：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">	&#34;resources&#34;: [{
</span></span><span class="line"><span class="cl">			&#34;type&#34;: &#34;aws:s3/bucket:Bucket&#34;,
</span></span><span class="line"><span class="cl">			&#34;name&#34;: &#34;s3-bucket_xxx-debug&#34;,
</span></span><span class="line"><span class="cl">			&#34;id&#34;: &#34;xxx-debug&#34;
</span></span><span class="line"><span class="cl">		},
</span></span><span class="line"><span class="cl">		{
</span></span><span class="line"><span class="cl">			&#34;type&#34;: &#34;aws:s3/accessPoint:AccessPoint&#34;,
</span></span><span class="line"><span class="cl">			&#34;name&#34;: &#34;s3-accesspoint_xxx-debug&#34;,
</span></span><span class="line"><span class="cl">			&#34;id&#34;: &#34;112233445566:xxx-debug&#34;
</span></span><span class="line"><span class="cl">		}
</span></span><span class="line"><span class="cl">	]
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后执行如下命令批量导入资源：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">$ pulumi import -f test-resources.json
</span></span><span class="line"><span class="cl">......
</span></span><span class="line"><span class="cl">Do you want to perform this import? yes
</span></span><span class="line"><span class="cl">Importing <span class="o">(</span>dev<span class="o">)</span>:
</span></span><span class="line"><span class="cl">     Type                   Name                             Status       
</span></span><span class="line"><span class="cl">     pulumi:pulumi:Stack    pulumi-test-dev                               
</span></span><span class="line"><span class="cl"> <span class="o">=</span>   ├─ aws:s3:AccessPoint  s3-accesspoint_xxx-debug  <span class="nv">imported</span>     
</span></span><span class="line"><span class="cl"> <span class="o">=</span>   └─ aws:s3:Bucket       s3-bucket_xxx-debug       imported     
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">Resources:
</span></span><span class="line"><span class="cl">    <span class="o">=</span> <span class="m">2</span> imported
</span></span><span class="line"><span class="cl">    <span class="m">2</span> unchanged
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Duration: 8s
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please copy the following code into your Pulumi application. Not doing so
</span></span><span class="line"><span class="cl">will cause Pulumi to report that an update will happen on the next update command.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">Please note that the imported resources are marked as protected. To destroy them
</span></span><span class="line"><span class="cl">you will need to remove the <span class="sb">`</span>protect<span class="sb">`</span> option and run <span class="sb">`</span>pulumi update<span class="sb">`</span> *before*
</span></span><span class="line"><span class="cl">the destroy will take effect.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">import pulumi
</span></span><span class="line"><span class="cl">import pulumi_aws as aws
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nv">s3_bucket_snappea_dl_debug</span> <span class="o">=</span> aws.s3.Bucket<span class="o">(</span><span class="s2">&#34;s3-bucket_xxx-debug&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">arn</span><span class="o">=</span><span class="s2">&#34;arn:aws:s3:::xxx-debug&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">bucket</span><span class="o">=</span><span class="s2">&#34;xxx-debug&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">hosted_zone_id</span><span class="o">=</span><span class="s2">&#34;ZZBBCC332211KK&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">request_payer</span><span class="o">=</span><span class="s2">&#34;BucketOwner&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">tags</span><span class="o">={</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Name&#34;</span>: <span class="s2">&#34;xxx-debug&#34;</span>,
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Team&#34;</span>: <span class="s2">&#34;Xxx&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="o">}</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">opts</span><span class="o">=</span>pulumi.ResourceOptions<span class="o">(</span><span class="nv">protect</span><span class="o">=</span>True<span class="o">))</span>
</span></span><span class="line"><span class="cl"><span class="nv">s3_accesspoint_snappea_dl_debug</span> <span class="o">=</span> aws.s3.AccessPoint<span class="o">(</span><span class="s2">&#34;s3-accesspoint_xxx-debug&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">account_id</span><span class="o">=</span><span class="s2">&#34;112233445566&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">bucket</span><span class="o">=</span><span class="s2">&#34;xxx-debug&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">name</span><span class="o">=</span><span class="s2">&#34;xxx-debug&#34;</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">public_access_block_configuration</span><span class="o">=</span>aws.s3.AccessPointPublicAccessBlockConfigurationArgs<span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="nv">block_public_acls</span><span class="o">=</span>False,
</span></span><span class="line"><span class="cl">        <span class="nv">block_public_policy</span><span class="o">=</span>False,
</span></span><span class="line"><span class="cl">        <span class="nv">ignore_public_acls</span><span class="o">=</span>False,
</span></span><span class="line"><span class="cl">        <span class="nv">restrict_public_buckets</span><span class="o">=</span>False,
</span></span><span class="line"><span class="cl">    <span class="o">)</span>,
</span></span><span class="line"><span class="cl">    <span class="nv">opts</span><span class="o">=</span>pulumi.ResourceOptions<span class="o">(</span><span class="nv">protect</span><span class="o">=</span>True<span class="o">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>能看到同样的生成出了两个资源的 stack 状态，以及对应的代码。</p>
<h4 id="62-通过代码导入资源" class="headerLink">
    <a href="#62-%e9%80%9a%e8%bf%87%e4%bb%a3%e7%a0%81%e5%af%bc%e5%85%a5%e8%b5%84%e6%ba%90" class="header-mark"></a>6.2 通过代码导入资源</h4><p>通过代码导入资源，需要你手工为每个资源编写代码，并且确保代码的所有参数与资源本身的状态完全一致。</p>
<p>因此可以看到这种导入方式很不灵活，通常不推荐使用，<code>pulumi import</code> 自动生成代码它不香么 emmmm</p>
<p>大概的流程如下，首先编写一个资源的配置代码，并将其标注为 <code>import</code>:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">p_test_sre</span> <span class="o">=</span> <span class="n">aws</span><span class="o">.</span><span class="n">s3</span><span class="o">.</span><span class="n">Bucket</span><span class="p">(</span><span class="s2">&#34;p-test-sre&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">bucket</span><span class="o">=</span><span class="s2">&#34;test-sre&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">tags</span><span class="o">=</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Name&#34;</span><span class="p">:</span> <span class="s2">&#34;test-sre&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Team&#34;</span><span class="p">:</span> <span class="s2">&#34;xxx&#34;</span><span class="p">,</span>  <span class="c1"># 这里我故意写错了，pulumi 会检测到这里有问题，提示导入将失败</span>
</span></span><span class="line"><span class="cl">    <span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="n">opts</span><span class="o">=</span><span class="n">pulumi</span><span class="o">.</span><span class="n">ResourceOptions</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">       <span class="n">protect</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">       <span class="n">import_</span><span class="o">=</span><span class="s2">&#34;test-sre&#34;</span><span class="p">,</span>  <span class="c1"># 标记需要导入此资源，导入成功后需要手工删除此标记。</span>
</span></span><span class="line"><span class="cl"><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后执行 <code>pulumi up</code> 就会开始导入此资源，如果设定的参数与资源状态不匹配，会有对应的错误提示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">❯ pulumi up
</span></span><span class="line"><span class="cl">Previewing update (dev):
</span></span><span class="line"><span class="cl">     Type                 Name             Plan       Info
</span></span><span class="line"><span class="cl">     pulumi:pulumi:Stack  pulumi-test-dev             
</span></span><span class="line"><span class="cl"> =   └─ aws:s3:Bucket     p-test-sre       import     [diff: -tags]; 1 warning
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl">Diagnostics:
</span></span><span class="line"><span class="cl">  aws:s3:Bucket (p-test-sre):
</span></span><span class="line"><span class="cl">    warning: inputs to import do not match the existing resource; importing this resource will fail
</span></span></code></pre></td></tr></table>
</div>
</div><p>在确保参数完全一致后，导入就会成功，导入成功后，需要手动删除代码中的 <code>import</code> 这个标记。</p>
<h3 id="63-如何从-pulumi-中移除被导入的资源" class="headerLink">
    <a href="#63-%e5%a6%82%e4%bd%95%e4%bb%8e-pulumi-%e4%b8%ad%e7%a7%bb%e9%99%a4%e8%a2%ab%e5%af%bc%e5%85%a5%e7%9a%84%e8%b5%84%e6%ba%90" class="header-mark"></a>6.3 如何从 pulumi 中移除被导入的资源</h3><p>格式如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pulumi state delete &lt;resource URN&gt; <span class="o">[</span>flags<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>比如要删除先前导入的 <code>arn:aws:s3:::test-sre</code>，首先删除对应的代码，然后执行 <code>pulumi preview</code>，就会报错并打印出对应的资源 urn:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="err">$</span><span class="w"> </span><span class="n">pulumi</span><span class="w"> </span><span class="n">preview</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="n">Diagnostics</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="n">aws</span><span class="p">:</span><span class="n">s3</span><span class="p">:</span><span class="nf">Bucket</span><span class="w"> </span><span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="n">test</span><span class="o">-</span><span class="n">sre</span><span class="p">):</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">error</span><span class="p">:</span><span class="w"> </span><span class="n">Preview</span><span class="w"> </span><span class="n">failed</span><span class="p">:</span><span class="w"> </span><span class="n">unable</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="k">delete</span><span class="w"> </span><span class="n">resource</span><span class="w"> </span><span class="s2">&#34;urn:pulumi:dev::pulumi-test::aws:s3/bucket:Bucket::p-test-sre&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">as</span><span class="w"> </span><span class="n">it</span><span class="w"> </span><span class="k">is</span><span class="w"> </span><span class="n">currently</span><span class="w"> </span><span class="n">marked</span><span class="w"> </span><span class="k">for</span><span class="w"> </span><span class="n">protection</span><span class="p">.</span><span class="w"> </span><span class="k">To</span><span class="w"> </span><span class="n">unprotect</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">resource</span><span class="p">,</span><span class="w"> </span><span class="n">either</span><span class="w"> </span><span class="n">remove</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="o">`</span><span class="n">protect</span><span class="o">`</span><span class="w"> </span><span class="n">flag</span><span class="w"> </span><span class="k">from</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">resource</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="n">your</span><span class="w"> </span><span class="n">Pulumi</span><span class="w"> </span><span class="n">program</span><span class="w"> </span><span class="k">and</span><span class="w"> </span><span class="n">run</span><span class="w"> </span><span class="o">`</span><span class="n">pulumi</span><span class="w"> </span><span class="n">up</span><span class="o">`</span><span class="w"> </span><span class="k">or</span><span class="w"> </span><span class="k">use</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">command</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">pulumi</span><span class="w"> </span><span class="n">state</span><span class="w"> </span><span class="n">unprotect</span><span class="w"> </span><span class="s1">&#39;urn:pulumi:dev::pulumi-test::aws:s3/bucket:Bucket::p-test-sre&#39;</span><span class="o">`</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>接下来使用如下命令强制从 state 文件中移除此资源（仅修改配置，对实际资源无任何影响）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pulumi state delete urn:pulumi:dev::pulumi-test::aws:s3/bucket:Bucket::p-test-sre --force
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="5-pulumi-kubernetes" class="headerLink">
    <a href="#5-pulumi-kubernetes" class="header-mark"></a>5. pulumi-kubernetes？</h3><p>pulumi-kubernetes 是一条龙服务：</p>
<ol>
<li>在 yaml 配置生成这一步，它能结合/替代掉 helm/kustomize，或者你高度自定义的 Python 脚本。</li>
<li>在 yaml 部署这一步，它能替代掉 argo-cd 这类 gitops 工具。</li>
<li>强大的状态管理，argo-cd 也有状态管理，可以对比看看。</li>
</ol>
<p>也可以仅通过 kubernetes_pulumi 生成 yaml，再通过 argo-cd 部署，这样 pulumi_kubernetes 就仅用来简化 yaml 的编写，仍然通过 gitops 工具/kubectl 来部署。</p>
<p>使用 pulumi-kubernetes 写配置，要警惕逻辑和数据的混合程度。
因为 kubernetes 的配置复杂度比较高，如果动态配置比较多，很容易就会写出难以维护的 python 代码来。</p>
<p>渲染 yaml 的示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pulumi</span> <span class="kn">import</span> <span class="n">get_stack</span><span class="p">,</span> <span class="n">ResourceOptions</span><span class="p">,</span> <span class="n">StackReference</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pulumi_kubernetes</span> <span class="kn">import</span> <span class="n">Provider</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pulumi_kubernetes.apps.v1</span> <span class="kn">import</span> <span class="n">Deployment</span><span class="p">,</span> <span class="n">DeploymentSpecArgs</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pulumi_kubernetes.core.v1</span> <span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="n">ContainerArgs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">ContainerPortArgs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">EnvVarArgs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">PodSpecArgs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">PodTemplateSpecArgs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">ResourceRequirementsArgs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">Service</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">ServicePortArgs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">ServiceSpecArgs</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pulumi_kubernetes.meta.v1</span> <span class="kn">import</span> <span class="n">LabelSelectorArgs</span><span class="p">,</span> <span class="n">ObjectMetaArgs</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">provider</span> <span class="o">=</span> <span class="n">Provider</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">   <span class="s2">&#34;render-yaml&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">   <span class="n">render_yaml_to_directory</span><span class="o">=</span><span class="s2">&#34;rendered&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">deployment</span> <span class="o">=</span> <span class="n">Deployment</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s2">&#34;redis&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="n">spec</span><span class="o">=</span><span class="n">DeploymentSpecArgs</span><span class="p">(</span><span class="o">...</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">   <span class="n">opts</span><span class="o">=</span><span class="n">ResourceOptions</span><span class="p">(</span><span class="n">provider</span><span class="o">=</span><span class="n">provider</span><span class="p">),</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如示例所示，pulumi-kubernetes 的配置是完全结构化的，比 yaml/helm/kustomize 要灵活非常多。</p>
<p>总之它非常灵活，既可以和 helm/kustomize 结合使用，替代掉 argocd/kubectl。
也可以和 argocd/kubectl 使用，替代掉 helm/kustomize。</p>
<p>具体怎么使用好？我也还在研究。</p>
<h3 id="6-阿里云资源-replace-报错" class="headerLink">
    <a href="#6-%e9%98%bf%e9%87%8c%e4%ba%91%e8%b5%84%e6%ba%90-replace-%e6%8a%a5%e9%94%99" class="header-mark"></a>6. 阿里云资源 replace 报错？</h3><p>阿里云有部分资源，只能创建删除，不允许修改，比如「资源组」。
对这类资源做变更时，pulumi 会直接报错：「Resources aleardy exists」，
这类资源，通常都有一个「force」参数，指示是否强制修改——即先删除再重建。</p>
<h3 id="7-有些资源属性无法使用-pulumi-配置" class="headerLink">
    <a href="#7-%e6%9c%89%e4%ba%9b%e8%b5%84%e6%ba%90%e5%b1%9e%e6%80%a7%e6%97%a0%e6%b3%95%e4%bd%bf%e7%94%a8-pulumi-%e9%85%8d%e7%bd%ae" class="header-mark"></a>7. 有些资源属性无法使用 pulumi 配置？</h3><p>这得看各云服务提供商的支持情况。</p>
<p>比如阿里云很多资源的属性，pulumi 都无法完全配置，因为 alicloud provider 的功能还不够全面。</p>
<p>目前我们生产环境，大概 95%+ 的东西，都可以使用 pulumi 实现自动化配置。
而其他 OSS 的高级参数、新出的 ASM 服务网格、kubernetes 的授权管理、ElasticSearch7 等资源，还是需要手动配置。</p>
<p>这个没办法，只能等阿里云提供支持。</p>
<h3 id="8-cicd-中如何使-pulumi-将状态保存到文件" class="headerLink">
    <a href="#8-cicd-%e4%b8%ad%e5%a6%82%e4%bd%95%e4%bd%bf-pulumi-%e5%b0%86%e7%8a%b6%e6%80%81%e4%bf%9d%e5%ad%98%e5%88%b0%e6%96%87%e4%bb%b6" class="header-mark"></a>8. CI/CD 中如何使 pulumi 将状态保存到文件？</h3><p>CI/CD 中我们可能会希望 pulumi 将状态保存到本地，避免连接 pulumi 中心服务器。
这一方面能加快速度，另一方面一些临时状态我们可能根本不想存储，可以直接丢弃。</p>
<p>方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 指定状态文件路径</span>
</span></span><span class="line"><span class="cl">pulumi login file://&lt;file-path&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 保存到默认位置: ~/.pulumi/credentials.json</span>
</span></span><span class="line"><span class="cl">pulumi login --local
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 保存到远程 S3 存储（minio/ceph 或者各类云对象存储服务，都兼容 aws 的 s3 协议）</span>
</span></span><span class="line"><span class="cl">pulumi login s3://&lt;bucket-path&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>登录完成后，再进行 <code>pulumi up</code> 操作，数据就会直接保存到你设定的路径下。</p>
<h3 id="9-如何估算资源变更导致的成本变化" class="headerLink">
    <a href="#9-%e5%a6%82%e4%bd%95%e4%bc%b0%e7%ae%97%e8%b5%84%e6%ba%90%e5%8f%98%e6%9b%b4%e5%af%bc%e8%87%b4%e7%9a%84%e6%88%90%e6%9c%ac%e5%8f%98%e5%8c%96" class="header-mark"></a>9. 如何估算资源变更导致的成本变化？</h3><p>目前 pulumi 貌似没有类似的工具，但是 terraform 有一个 <a href="https://github.com/infracost/infracost" target="_blank" rel="noopener noreffer">infracost</a> 可以干这个活，值得关注。</p>
<h2 id="缺点" class="headerLink">
    <a href="#%e7%bc%ba%e7%82%b9" class="header-mark"></a>缺点</h2><h3 id="1-报错信息不直观" class="headerLink">
    <a href="#1-%e6%8a%a5%e9%94%99%e4%bf%a1%e6%81%af%e4%b8%8d%e7%9b%b4%e8%a7%82" class="header-mark"></a>1. 报错信息不直观</h3><p>pulumi 和 terraform 都有一个缺点，就是封装层次太高了。</p>
<p>封装的层次很高，优点是方便了我们使用，可以使用很统一很简洁的声明式语法编写配置。
而缺点，则是出了 bug，报错信息往往不够直观，导致问题不好排查。</p>
<h3 id="2-资源状态被破坏时修复起来非常麻烦" class="headerLink">
    <a href="#2-%e8%b5%84%e6%ba%90%e7%8a%b6%e6%80%81%e8%a2%ab%e7%a0%b4%e5%9d%8f%e6%97%b6%e4%bf%ae%e5%a4%8d%e8%b5%b7%e6%9d%a5%e9%9d%9e%e5%b8%b8%e9%ba%bb%e7%83%a6" class="header-mark"></a>2. 资源状态被破坏时，修复起来非常麻烦</h3><p>在很多情况下，都可能发生资源状态被破坏的问题：</p>
<ol>
<li>在创建资源 A，因为参数是已知的，你直接使用了常量而不是 <code>Output</code>。这会导致 pulumi 无法识别到依赖关系！从而创建失败，或者删除时资源状态被破坏！</li>
<li>有一个 pulumi stack 一次在三台物理机上创建资源。你白天创建资源晚上删除资源，但是某一台物理机晚上会关机。这将导致 pulumi 无法查询到这台物理机上的资源状态，这个 pulumi stack 在晚上就无法使用，它会一直报错！</li>
</ol>
<h2 id="常用-provider" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8-provider" class="header-mark"></a>常用 Provider</h2><ul>
<li><a href="https://github.com/pulumi/pulumi-alicloud" target="_blank" rel="noopener noreffer">pulumi-alicloud</a>: 管理阿里云资源</li>
<li><a href="https://github.com/pulumi/pulumi-vault" target="_blank" rel="noopener noreffer">pulumi-vault</a>: 我这边用它来快速初始化 vault，创建与管理 vault 的所有配置。</li>
</ul>
<h2 id="我创建维护的-provider" class="headerLink">
    <a href="#%e6%88%91%e5%88%9b%e5%bb%ba%e7%bb%b4%e6%8a%a4%e7%9a%84-provider" class="header-mark"></a>我创建维护的 Provider</h2><p>由于 Pulumi 生态还比较小，有些 provider 只有 terraform 才有。</p>
<p>我为了造(方)福(便)大(自)众(己)，创建并维护了两个本地虚拟机相关的 Providers:</p>
<ul>
<li><a href="https://github.com/ryan4yin/pulumi-proxmox" target="_blank" rel="noopener noreffer">ryan4yin/pulumi-proxmox</a>: 目前只用来自动创建 PVE 虚拟机
<ul>
<li>可以考虑结合 kubespray/kubeadm 快速创建 k8s 集群</li>
</ul>
</li>
<li><a href="https://github.com/ryan4yin/pulumi-libvirt" target="_blank" rel="noopener noreffer">ryan4yin/pulumi-libvirt</a>: 快速创建 kvm 虚拟机
<ul>
<li>可以考虑结合 kubespray/kubeadm 快速创建 k8s 集群</li>
</ul>
</li>
</ul>]]></content></entry><entry><title type="html">openSUSE 使用指南</title><link href="https://thiscute.world/posts/opensuse-instruction/"/><id>https://thiscute.world/posts/opensuse-instruction/</id><author><name>ryan4yin</name></author><published>2021-01-04T08:42:21+08:00</published><updated>2021-01-04T08:42:21+08:00</updated><content type="html"><![CDATA[<p>openSUSE 是一个基于 RPM 的发行版，这和 RHEL/CentOS 一致。
但是它的官方包管理器是专有的 zypper，挺好用的，软件也很新。</p>
<p>我最近从 <a href="https://thiscute.world/posts/manjaro-instruction/" rel="">Manjaro</a> 切换到了 openSUSE，发现 KDE 桌面确实比 Manjaro 更丝滑，而且社区源 OBS 体验下来比 AUR 更舒服。</p>
<p>尤其是容器/Kubernetes 方面，源里面的东西比 AUR 更丰富，而且是官方维护的。
本文算是对迁移流程做的一个总结。</p>
<blockquote>
<p>本文以 openSUSE Tumbleweed 为基础编写，这是一个和 Manjaro/Arch 一样的滚动发行版，软件源都很新。
openSUSE 社区的大部分用户都是使用的 Tumbleweed.
它的硬件兼容性也要比 openSUSE Leap（稳定版）好——实测小米游戏本安装 Leap，休眠后 Touchpad 会失灵。</p>
</blockquote>
<h2 id="一zypper-的基础命令" class="headerLink">
    <a href="#%e4%b8%80zypper-%e7%9a%84%e5%9f%ba%e7%a1%80%e5%91%bd%e4%bb%a4" class="header-mark"></a>一、zypper 的基础命令</h2><p>zypper 的源在国内比较慢，但实际上下载的时候，zypper 会智能选择最快的镜像源下载软件包，比如国内的清华源等。</p>
<p>但是我发现官方的源索引更新太慢，甚至经常失败。因此没办法，还是得手动设置镜像源：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 禁用原有的官方软件源</span>
</span></span><span class="line"><span class="cl">sudo zypper mr --disable repo-oss repo-non-oss repo-update repo-update-non-oss repo-debug
</span></span><span class="line"><span class="cl"><span class="c1"># 添加北外镜像源</span>
</span></span><span class="line"><span class="cl">sudo zypper ar -fcg https://mirrors.bfsu.edu.cn/opensuse/tumbleweed/repo/oss/ bfsu-oss
</span></span><span class="line"><span class="cl">sudo zypper ar -fcg https://mirrors.bfsu.edu.cn/opensuse/tumbleweed/repo/non-oss/ bfsu-non-oss
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后就是 zypper 的常用命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo zypper refresh  <span class="c1"># refresh all repos</span>
</span></span><span class="line"><span class="cl">sudo zypper update   <span class="c1"># update all softwares</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo zypper search --installed-only  &lt;package-name&gt;  <span class="c1"># 查找本地安装的程序</span>
</span></span><span class="line"><span class="cl">sudo zypper search &lt;package-name&gt;  <span class="c1"># 查找本地和软件源中的程序</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo zypper install &lt;package-name&gt;  <span class="c1"># 安装程序</span>
</span></span><span class="line"><span class="cl">sudo zypper remove --clean-deps &lt;package-name&gt;  <span class="c1"># 卸载程序，注意添加 --clean-deps 或者 -u，否则不会卸载依赖项！</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo zypper clean  <span class="c1"># 清理本地的包缓存</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="install-softwares" class="headerLink">
    <a href="#install-softwares" class="header-mark"></a>Install Softwares</h2><blockquote>
<p>这里需要用到 <a href="https://mirrors.openSUSE.org/list/bs.html" target="_blank" rel="noopener noreffer">OBS(Open Build Service, 类似 arch 的 AUR，但是是预编译的包)</a>，因为 OBS 东西太多了，因此不存在完整的国内镜像，平均速度大概 300kb/s。
建议有条件可以在路由器上加智能代理提速。</p>
</blockquote>
<p>安装需要用到的各类软件:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 启用 Packman 仓库，使用北交镜像源</span>
</span></span><span class="line"><span class="cl">sudo zypper ar -cfp <span class="m">90</span> <span class="s1">&#39;https://mirror.bjtu.edu.cn/packman/suse/openSUSE_Tumbleweed/&#39;</span> packman-bjtu
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># install video player and web browser</span>
</span></span><span class="line"><span class="cl">sudo zypper install mpv ffmpeg-4 chromium firefox
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># install screenshot and other utils</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 安装好后可以配个截图快捷键 alt+a =&gt; `flameshot gui`</span>
</span></span><span class="line"><span class="cl">sudo zypper install flameshot peek nomacs
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># install git clang/make/cmake</span>
</span></span><span class="line"><span class="cl">sudo zypper install git gcc clang make cmake
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># install wireshark</span>
</span></span><span class="line"><span class="cl">sudo zypper install wireshark
</span></span><span class="line"><span class="cl">sudo gpasswd --add <span class="nv">$USER</span> wireshark  <span class="c1">#  将你添加到 wireshark 用户组中</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="ide--编程语言" class="headerLink">
    <a href="#ide--%e7%bc%96%e7%a8%8b%e8%af%ad%e8%a8%80" class="header-mark"></a>IDE + 编程语言</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># install vscode: https://en.openSUSE.org/Visual_Studio_Code</span>
</span></span><span class="line"><span class="cl">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
</span></span><span class="line"><span class="cl">sudo zypper addrepo https://packages.microsoft.com/yumrepos/vscode vscode
</span></span><span class="line"><span class="cl">sudo zypper refresh
</span></span><span class="line"><span class="cl">sudo zypper install code
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 dotnet 5: https://docs.microsoft.com/en-us/dotnet/core/install/linux-openSUSE#openSUSE-15-</span>
</span></span><span class="line"><span class="cl">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc
</span></span><span class="line"><span class="cl">sudo zypper addrepo https://packages.microsoft.com/openSUSE/15/prod/ microsoft-prod
</span></span><span class="line"><span class="cl">sudo zypper refresh
</span></span><span class="line"><span class="cl">sudo zypper install dotnet-sdk-5.0
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装新版本的 go（源中的版本比较低，更建议从 go 官网下载安装）</span>
</span></span><span class="line"><span class="cl">sudo zypper install go
</span></span></code></pre></td></tr></table>
</div>
</div><p>通过 tarball/script 安装：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># rustup，rust 环境管理器</span>
</span></span><span class="line"><span class="cl">curl --proto <span class="s1">&#39;=https&#39;</span> --tlsv1.2 -sSf https://sh.rustup.rs <span class="p">|</span> sh
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># jetbrains toolbox app，用于安装和管理 pycharm/idea/goland/android studio 等 IDE</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 参见：https://www.jetbrains.com/toolbox-app/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 不使用系统 python，改用 miniconda 装 python3.8</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 参考：https://github.com/ContinuumIO/docker-images/blob/master/miniconda3/debian/Dockerfile</span>
</span></span><span class="line"><span class="cl">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /tmp/miniconda.sh
</span></span><span class="line"><span class="cl">sudo /bin/bash /tmp/miniconda.sh -b -p /opt/conda
</span></span><span class="line"><span class="cl">rm /tmp/miniconda.sh
</span></span><span class="line"><span class="cl">sudo /opt/conda/bin/conda clean -tipsy
</span></span><span class="line"><span class="cl">sudo ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;. /opt/conda/etc/profile.d/conda.sh&#34;</span> &gt;&gt; ~/.bashrc
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;conda activate base&#34;</span> &gt;&gt; ~/.bashrc
</span></span><span class="line"><span class="cl"><span class="c1"># miniconda 的 entrypoint 默认安装在如下目录，添加到 PATH 中</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s2">&#34;export PATH=\$PATH:\$HOME/.local/bin&#34;</span> &gt;&gt; ~/.bashrc
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来安装 VSCode 插件，下列是我的插件列表：</p>
<ol>
<li>语言：
<ol>
<li>python/go/rust/c#/julia/flutter</li>
<li>xml/yaml/toml</li>
<li>vscode proto3</li>
</ol>
</li>
<li>ansible/terraform</li>
<li>markdown all in one + Markdown Preview Enhanced</li>
<li>美化：
<ol>
<li>community material theme</li>
<li>vscode icons</li>
<li>glasslt-vsc</li>
</ol>
</li>
<li>docker/kubernetes</li>
<li>IntelliJ IDEA Keybindings</li>
<li>gitlens</li>
<li>prettier</li>
<li>utils
<ol>
<li>comment translate</li>
<li>path intellisense</li>
<li>svg</li>
<li>visual studio intellicode</li>
</ol>
</li>
<li>antlr4</li>
<li>remote ssh + remote containers</li>
<li>rest client</li>
<li>vscode databases</li>
</ol>
<h3 id="容器--kubernetes" class="headerLink">
    <a href="#%e5%ae%b9%e5%99%a8--kubernetes" class="header-mark"></a>容器 + Kubernetes</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 时髦的新容器套装: https://documentation.suse.com/sles/15-SP2/html/SLES-all/cha-podman-overview.html</span>
</span></span><span class="line"><span class="cl">sudo zypper in podman kompose skopeo buildah katacontainers
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 kubernetes 相关工具，tumbleweed 官方仓库的包都非常新！很舒服</span>
</span></span><span class="line"><span class="cl">sudo zypper in helm k9s kubernetes-client
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 本地测试目前还是 docker-compose 最方便，docker 仍有必要安装</span>
</span></span><span class="line"><span class="cl">sudo zypper in docker
</span></span><span class="line"><span class="cl">sudo gpasswd --add <span class="nv">$USER</span> docker
</span></span><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> docker
</span></span><span class="line"><span class="cl">sudo systemctl start docker
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 简单起见，直接用 pip 安装 docker-compose 和 podman-compose</span>
</span></span><span class="line"><span class="cl">sudo pip install docker-compose podman-compose
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="办公音乐聊天" class="headerLink">
    <a href="#%e5%8a%9e%e5%85%ac%e9%9f%b3%e4%b9%90%e8%81%8a%e5%a4%a9" class="header-mark"></a>办公、音乐、聊天</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 添加 openSUSE_zh 源：https://build.opensuse.org/project/show/home:opensuse_zh</span>
</span></span><span class="line"><span class="cl">sudo zypper addrepo <span class="s1">&#39;https://download.opensuse.org/repositories/home:/opensuse_zh/openSUSE_Tumbleweed&#39;</span> openSUSE_zh
</span></span><span class="line"><span class="cl">sudo zypper refresh
</span></span><span class="line"><span class="cl">sudo zypper install wps-office netease-cloud-music
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># linux qq: https://im.qq.com/linuxqq/download.html</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 虽然简陋但也够用，发送文件比 KDE Connect 要方便一些。</span>
</span></span><span class="line"><span class="cl">sudo rpm -ivh linux_qq.rpm
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="安装输入法" class="headerLink">
    <a href="#%e5%ae%89%e8%a3%85%e8%be%93%e5%85%a5%e6%b3%95" class="header-mark"></a>安装输入法</h3><p>我用的输入法是小鹤音形，首先安装 fcitx-rime:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 添加 m17n obs 源：https://build.openSUSE.org/repositories/M17N</span>
</span></span><span class="line"><span class="cl">sudo zypper addrepo <span class="s1">&#39;https://download.opensuse.org/repositories/M17N/openSUSE_Tumbleweed&#39;</span> m17n
</span></span><span class="line"><span class="cl">sudo zypper refresh
</span></span><span class="line"><span class="cl">sudo zypper install fcitx5 fcitx5-configtool fcitx5-qt5 fcitx5-rime
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，从 <a href="http://flypy.ys168.com/" target="_blank" rel="noopener noreffer">http://flypy.ys168.com/</a> 下载最新的鼠须管（MacOS）配置文件，将解压得到的 rime 文件夹拷贝到 ~/.local/share/fcitx5/ 下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mv rime ~/.local/share/fcitx5/
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在重启系统，在 fcitx5 配置里面添加 rime「中州韵」，就可以正常使用小鹤音形了。</p>
<h3 id="qemukvm" class="headerLink">
    <a href="#qemukvm" class="header-mark"></a>QEMU/KVM</h3><p>不得不说，openSUSE 安装 KVM 真的超方便，纯 GUI 操作：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># see: https://doc.openSUSE.org/documentation/leap/virtualization/html/book-virt/cha-vt-installation.html</span>
</span></span><span class="line"><span class="cl">sudo yast2 virtualization
</span></span><span class="line"><span class="cl"><span class="c1"># enter to terminal ui, select kvm + kvm tools, and then install it.</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>KVM 的详细文档参见 <a href="../../virutal%20machine/KVM/README.md" rel="">KVM/README.md</a></p>
<h3 id="kde-connect" class="headerLink">
    <a href="#kde-connect" class="header-mark"></a>KDE Connect</h3><p>KDE Connect 是一个 PC 手机协同工具，可以在电脑和手机之间共享剪切版、远程输入、发送文件、共享文件夹、通知同步等等。
总而言之非常好用，只要手机和 PC 处于同一个局域网就行，不需要什么数据线。</p>
<p>如果安装系统时选择了打开防火墙，KDE Connect 是连不上的，需要手动开放端口号：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># see: https://userbase.kde.org/KDEConnect#firewalld</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 还可以使用 --add-source=xx.xx.xx.xx/xx 设置 ip 白名单</span>
</span></span><span class="line"><span class="cl">sudo firewall-cmd --zone<span class="o">=</span>public --permanent --add-port<span class="o">=</span>1714-1764/tcp
</span></span><span class="line"><span class="cl">sudo firewall-cmd --zone<span class="o">=</span>public --permanent --add-port<span class="o">=</span>1714-1764/udp
</span></span><span class="line"><span class="cl">sudo systemctl restart firewalld.service
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后手机（Android）安装好 KDE Connect，就能开始享受了。</p>
<p>目前存在的 Bug:</p>
<ul>
<li><input disabled="" type="checkbox"> Android 10 禁止了后台应用读取剪切版，这导致 KDE Connect 只能从 PC 同步到手机，而无法反向同步。
<ul>
<li>如果你有 ROOT 权限，可以参考 <a href="https://szclsya.me/posts/android/fix-clipboard-android-10/" target="_blank" rel="noopener noreffer">Fix clipboard permission on Android 10</a> 的方法，安装 ClipboardWhitelist 来打开权限。</li>
<li>否则，貌似就只能使用手机端的「远程输入」模块来手动传输文本了。</li>
</ul>
</li>
</ul>
<h3 id="qv2ray-代理" class="headerLink">
    <a href="#qv2ray-%e4%bb%a3%e7%90%86" class="header-mark"></a>Qv2ray 代理</h3><p>Qv2ray 是我用过的比较好用的 GUI 代理工具，通过插件可支持常见的所有代理协议。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># see: https://build.openSUSE.org/repositories/home:zzndb</span>
</span></span><span class="line"><span class="cl">sudo zypper addrepo <span class="s1">&#39;https://download.opensuse.org/repositories/home:/zzndb/openSUSE_Tumbleweed&#39;</span> qv2ray
</span></span><span class="line"><span class="cl">sudo zypper refresh
</span></span><span class="line"><span class="cl">sudo zypper install Qv2ray QvPlugin-Trojan QvPlugin-SS
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="vpn-连接与防火墙" class="headerLink">
    <a href="#vpn-%e8%bf%9e%e6%8e%a5%e4%b8%8e%e9%98%b2%e7%81%ab%e5%a2%99" class="header-mark"></a>VPN 连接与防火墙</h3><p>防火墙默认会禁用 pptp 等 vpn 协议的端口，需要手动打开.</p>
<p>允许使用 PPTP 协议：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 允许 gre 数据包流入网络</span>
</span></span><span class="line"><span class="cl">sudo firewall-cmd --permanent --zone<span class="o">=</span>public --direct --add-rule ipv4 filter INPUT <span class="m">0</span> -p gre -j ACCEPT
</span></span><span class="line"><span class="cl">sudo firewall-cmd --permanent --zone<span class="o">=</span>public --direct --add-rule ipv6 filter INPUT <span class="m">0</span> -p gre -j ACCEPT
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># masquerade: 自动使用 interface 地址伪装所有流量（将主机当作路由器使用，vpn 是虚拟网络，需要这个功能）</span>
</span></span><span class="line"><span class="cl">sudo firewall-cmd --permanent --zone<span class="o">=</span>public --add-masquerade
</span></span><span class="line"><span class="cl"><span class="c1"># pptp 客户端使用固定端口 1723/tcp 通信</span>
</span></span><span class="line"><span class="cl">firewall-cmd --add-port<span class="o">=</span>1723/tcp --permanent
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo firewall-cmd --reload
</span></span></code></pre></td></tr></table>
</div>
</div><p>允许使用 wireguard 协议，此协议只使用 tcp 协议，而且可以端口号可以自定义。不过 wireguard 自身的配置文件 <code>/etc/wireguard/xxx.conf</code> 就能配置 iptables 参数放行相关端口，这里就不赘述了。</p>
<h2 id="其他设置" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96%e8%ae%be%e7%bd%ae" class="header-mark"></a>其他设置</h2><p>从 Windows 带过来的习惯是单击选中文件，双击才打开，这个可以在「系统设置」-「工作空间行为」-「常规行为」-「点击行为」中修改。</p>]]></content></entry><entry><title type="html">2020 年年终总结</title><link href="https://thiscute.world/posts/2020-summary/"/><id>https://thiscute.world/posts/2020-summary/</id><author><name>ryan4yin</name></author><published>2020-12-12T23:45:00+08:00</published><updated>2020-12-12T23:45:00+08:00</updated><content type="html"><![CDATA[<h2 id="闲言碎语" class="headerLink">
    <a href="#%e9%97%b2%e8%a8%80%e7%a2%8e%e8%af%ad" class="header-mark"></a>闲言碎语</h2><p>一晃一年又过去了，今年可真是魔幻的一年，口罩带了一年没能摘下来，美国疫情感染人数 1500 万。</p>
<p>上面这段话要是让去年的我看到了，没准都以为今年真的生化危机了hhh&hellip;</p>
<p>言归正传，从去年 6 月底入职，到现在有一年半了，这一年半学到的东西真的非常多，完全重塑了我的技术栈。现在我的整个技术栈，基本都是围绕着云原生这一块发展了。</p>
<h2 id="活动" class="headerLink">
    <a href="#%e6%b4%bb%e5%8a%a8" class="header-mark"></a>活动</h2><p>今年也参加了几个技术沙龙，有些收获，但是没去年那么新奇了，主要是很多东西自己已经懂了hhh。大概有这么几个活动：</p>
<ol>
<li>2019 年腾讯蓝鲸第5届运维技术沙龙：在深圳腾讯大厦参加的，点心和咖啡很棒，讲的东西里，腾讯自己分享的「研发运维一体化平台」比较有收获，我收藏了那一份 PPT</li>
<li>Rancher - 企业云原生的探索与落地：去年参加 Rancher 的沙龙觉得很高大上，因为自己很多东西都不懂。但是今年来听，明显就感觉他们讲的很基础，对我没什么价值了。也侧面说明我确实进步了非常多哈哈。</li>
<li>2020 PyconChina 深圳场：额，也觉得没什么干货，好几个都是在推销自家的产品（Azure AI 平台和一个 Django 写的低代码平台），有个讲 Nix 包管理的大佬但是没讲好，后面我们就直接溜了&hellip;</li>
</ol>
<p>另外就是，今年心血来潮买了四张 Live House 的演出票，体验下来觉得钱花得很值，给我充值了不少正能量。</p>
<ol>
<li>景德镇文艺复兴《小歌行》：这是我超级喜欢的一个乐队，演出效果超棒！听到了完整的故事，而且见到了九三姑娘本人，太高兴了！</li>
<li>徐海俏 - 游离片刻：这位歌手我之前其实没接触过，但是听了下她的《空》发现很不错很帅气，就买了。但是整场下来感觉俏俏状态不佳，有点唱不动的感觉。中场问歌迷们有没有带野格酒，末了又问深圳现在能游泳么哈哈，是个很随性的歌手。后面可能还真游泳去了。</li>
<li>夏小虎 - 逝年：这是个民谣歌手，以前上大学的时候听过，只有吉他和人声，其实是有些伤感的歌。因为我最近状态很好，我去之前还担心氛围不适合我。然后夏小虎说开心最重要，带了个乐队来伴奏，架子鼓就是灵魂，整个演出都因鼓点而欢快了起来。效果也非常棒！</li>
<li>时光胶囊乐队：这也是一个国风后摇乐队，在一个深圳福田一个小酒吧「红糖罐上步店」演出的，比较简陋，人也不多，就四五十人的样子（出乎意料）。但是演出效果很棒，《旅途》《忆长安》《磐石》都非常好听。尤其是在这样的场合唱《我不知道你的名字》，挺有感触的。</li>
</ol>
<h2 id="技术能力总结" class="headerLink">
    <a href="#%e6%8a%80%e6%9c%af%e8%83%bd%e5%8a%9b%e6%80%bb%e7%bb%93" class="header-mark"></a>技术能力总结</h2><p>今年我的工作重点有这么几个：</p>
<ol>
<li>重构及维护 CI/CD 代码，让它能在多个产品线上复用</li>
<li>云上环境管理：今年熟悉了阿里云这一套东西，并且用上了自动化工具对云上环境进行管理。
<ul>
<li>一开始是使用 terraform，但是 terraform 的 hcl 语法不够灵活，最近切换到了 pulumi+python，不得不说真香。目前云上的资源及配置 95% 都完全用 pulumi 管理了（还剩大概 5% 因为各种原因，需要手动配置）。</li>
</ul>
</li>
<li>kubernetes云原生: 今年我在这个领域的进步最大，熟悉了 k8s/istio/flagger/vault/prometheus/helm/traefik 等等。不过目前这里面大部分工具还停留在「会用」的状态。</li>
<li>服务器虚拟化系统从 vSphere 切换到 PVE
<ul>
<li>VMware 的 vCenter 吃的资源太多，而且还不能自动扩缩容硬盘，Python SDK 也超难用。因此我在公司尝试使用 PVE 替换 vSphere 这一套，效果很不错。</li>
<li>PVE+pulumi/terraform+cloudinit 能实现自动化部署虚拟机，自动配置网络、账号及SSH密钥、自动扩缩容硬盘，非常方便！</li>
<li>而且 PVE 不收费，去中心化，一套用下来舒服太多了。只是 pve+cloud-init 门槛稍微高一点，需要一定时间去熟悉。</li>
</ul>
</li>
<li>CI/CD 系统：基于 Jenkins 的 CI/CD 在我司各种水土不服，小毛病不断。Jenkins 本身就存在单点故障，不适合云原生，加上 Jenkinsfile 有学习成本，而且不方便复用，我就想把 Jenkins 换掉。我在这一年里调研了大量的开源 CI/CD 工具，都各有不足。主要还是因为我们当下的 Jenkins 承载了太多的功能，已经是一个CI/CD、自动化测试、自动化运维平台了，另一方面公司后端的流水线还存在依赖关系，需要进行复杂的编排。
<ul>
<li>目前我就找到 Argo Workflows 的功能很符合我们的需求，目前正在尝试迁移一部分功能到 Argo Workflows 试用。</li>
<li>因为 argo 的 UI 和 jenkins 差别过大，暂定仍以 jenkins 为前端，通过 python 将任务分派给 argo 运行。这样 argo 对使用者而言是隐形的，用户体验基本上没区别。</li>
</ul>
</li>
<li>杂事：修水电、修服务器、组装办公电脑、搬机房&hellip;</li>
</ol>
<h2 id="今年在技术方面的感受" class="headerLink">
    <a href="#%e4%bb%8a%e5%b9%b4%e5%9c%a8%e6%8a%80%e6%9c%af%e6%96%b9%e9%9d%a2%e7%9a%84%e6%84%9f%e5%8f%97" class="header-mark"></a>今年在技术方面的感受</h2><ol>
<li>Podman/Skopeo/Buildah/Kaniko 等技术进一步发展，正在逐渐蚕食 Docker 的地盘.
<ol>
<li>kubernetes 已经弃用 docker-shim，直接对接 containerd，下一步应该是彻底切换到 CRI-O。</li>
</ol>
</li>
<li>Istio 1.5 合并为单体架构效果很明显，各微信公众号三天两头就讲服务网格，服务网格是毋庸置疑的未来</li>
<li>阿里云的 OAM 进一步发展，目前阿里基于 OAM 研发的 Kubevela 致力于封装 Kubernetes 的功能，让小白也能用上 Kubernetes。而这同时还能保留 k8s 完整的能力，值得期待。</li>
<li>云上安全越来越引起重视了，目前 CNCF 社区上容器安全相关的项目在快速发展。包括镜像安全/安全容器(kata containers)等。</li>
<li>使用 Kubernetes 来管理数据库已经是大趋势，毕竟成本优势太明显了。
<ul>
<li>很多公司已经在使用 docker 运行数据库，毕竟性能没啥损失，就能方便很多。但是仍然手动搭建集群，也不使用分布式存储。</li>
<li>目前好像只有大厂如阿里京东才有这个实力，使用 kubernetes 和分布式存储来跑数据库。容器化的分布式存储系统维护(如 ceph)，其中的难点我目前还不是很清楚，不过无外乎性能、稳定性、故障恢复这些。</li>
</ul>
</li>
</ol>
<h2 id="明年的展望" class="headerLink">
    <a href="#%e6%98%8e%e5%b9%b4%e7%9a%84%e5%b1%95%e6%9c%9b" class="header-mark"></a>明年的展望</h2><ol>
<li>Go 语言必须学起来，今年入门了两遍语法，但是没写过啥东西，又忘差不多了。</li>
<li>要进一步熟悉 k8s/istio/flagger/vault/prometheus/helm/traefik/caddy 这些工具，会用还不够，要深入底层。</li>
<li>深入学习计算机网络 + Linux 网络 + Kubernetes 网络！这非常重要。</li>
<li>学习 Podman/Docker 的底层原理，学习 katacontainers 等安全容器技术。</li>
<li>为 kubevela/dapr/knative 等云原生项目做一些贡献，要参与到开源中去。</li>
<li>掌握 Argo Workflows/tekton，将 CI/CD 搬到 k8s 上去。</li>
<li>学习设计模式</li>
<li>有机会的话，熟悉下分布式存储、分布式数据库。这方面我目前还相当欠缺。</li>
<li>学习 KVM 虚拟化</li>
</ol>
<p>如果学（xian）有（de）余（dan）力（teng）的话，也可以考虑搞搞下面这几个：</p>
<ol>
<li>rust 语言：rust 通过 owner+lifetime 实现内存的智能管理，性能很高，而且编译器提示非常友好，值得一学。</li>
<li>机器学习/深度学习: 这个领域可是当下的大热门，可以用 python/julia 玩一玩，顺便补一补微积分线代概率论。。</li>
<li>《编程语言实现模式》：嗯，希望能自己造轮子，写些简单的 parser。</li>
<li>elixir: ruby 语法+ erlang 并发模型(actor), 如果有时间的话，也可以玩玩，了解下原生分布式的函数式语言的特点。</li>
</ol>
<p>回看了下去年的总结，发现我 go/c# 都没学多少，设计模式也没动，python 还在原地踏步hhh&hellip; 去年的展望很多都没实现。</p>
<p>不过云原生这一块倒是进步很快，总体很满意今年的成果哈哈~</p>
<p>明年加油！</p>
]]></content></entry><entry><title type="html">「小歌行」-景德镇文艺复兴-2020巡演-深圳</title><link href="https://thiscute.world/posts/jingdezhen-renaissance-band-2020-shenzhen/"/><id>https://thiscute.world/posts/jingdezhen-renaissance-band-2020-shenzhen/</id><author><name>ryan4yin</name></author><published>2020-11-28T11:49:00+08:00</published><updated>2020-11-28T11:49:00+08:00</updated><content type="html"><![CDATA[<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>2020 年 11 月 28 日，我第一次参加 Live House，演出乐队是「景德镇文艺复兴」。</p>
<p>「景德镇文艺复兴」是我很喜欢的一支后摇乐队，我喜欢上这支乐队，还得从我的昵称「於清樂」说起。</p>
<p>17 年的时候，听了许多后摇，网易云就给我推荐「景德镇文艺复兴」的歌，如此结缘。</p>
<p>其中有一首歌是「满世」，后摇嘛，歌词只有四句：</p>
<pre><code>月下灵鸟吟
花香无处寻
再看破土人
一满又一世
</code></pre>
<p>听这首歌的时候，我想起看过韩寒的《长安乱》，里面女主名叫「喜乐」，这名字里寄托着家人对她的期许——平安喜乐。
我心里也升起一个不可能实现的愿望：</p>
<pre><code>希冀能于这尘世之中，享得半世清闲，一生喜乐
</code></pre>
<p>这愿望已然不可能实现，过往的岁月里，我有过太多苦恼，做过了太多错事；可遇见的未来，也还没到清闲享乐的时候。
那至少把昵称改成「於清樂」，提醒着自己，你有过这样一个愿望。</p>
<h2 id="演出" class="headerLink">
    <a href="#%e6%bc%94%e5%87%ba" class="header-mark"></a>演出</h2><p>演出的内容是《小歌行》这张专辑，乐队通过一个自创的神话故事，将整张专辑串成了一个类似音乐剧的形式，进行演出，效果很棒！</p>
<p>我用手机录下了几乎全程，因为第一次参加 Live House，又是自己这么喜欢的乐队，想要录下来，留做纪念。</p>
<p>视频已经上传到了 Bilibili:</p>
<div class="bilibili"><iframe src="//player.bilibili.com/player.html?bvid=BV1mv411t76G&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>

<p>录到最后手机没电了，为了留点电量刷公交车卡和门禁卡，最后一首《水码头》没有录完。（到家时真的差点刷不了门禁hhh）</p>
<p>好了，下面是演出的照片集锦：</p>
<p><figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128113509598-520668629.webp" title="/images/jingdezhen-renaissance-band/968138-20201128113509598-520668629.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128113509598-520668629.webp" data-sub-html="<h2>Live House 入口的宣传海报</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128113509598-520668629.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128113509598-520668629.webp, /images/jingdezhen-renaissance-band/968138-20201128113509598-520668629.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128113509598-520668629.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128113509598-520668629.webp">
    </a><figcaption class="image-caption">Live House 入口的宣传海报</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128113624303-2016722864.webp" title="/images/jingdezhen-renaissance-band/968138-20201128113624303-2016722864.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128113624303-2016722864.webp" data-sub-html="<h2>老村长1</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128113624303-2016722864.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128113624303-2016722864.webp, /images/jingdezhen-renaissance-band/968138-20201128113624303-2016722864.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128113624303-2016722864.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128113624303-2016722864.webp">
    </a><figcaption class="image-caption">老村长1</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128113628764-1153463538.webp" title="/images/jingdezhen-renaissance-band/968138-20201128113628764-1153463538.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128113628764-1153463538.webp" data-sub-html="<h2>老村长2</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128113628764-1153463538.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128113628764-1153463538.webp, /images/jingdezhen-renaissance-band/968138-20201128113628764-1153463538.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128113628764-1153463538.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128113628764-1153463538.webp">
    </a><figcaption class="image-caption">老村长2</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128113638014-1594750779.webp" title="/images/jingdezhen-renaissance-band/968138-20201128113638014-1594750779.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128113638014-1594750779.webp" data-sub-html="<h2>老村长3</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128113638014-1594750779.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128113638014-1594750779.webp, /images/jingdezhen-renaissance-band/968138-20201128113638014-1594750779.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128113638014-1594750779.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128113638014-1594750779.webp">
    </a><figcaption class="image-caption">老村长3</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114120474-1364776540.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114120474-1364776540.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114120474-1364776540.webp" data-sub-html="<h2>拉小提琴的小哥哥</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114120474-1364776540.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114120474-1364776540.webp, /images/jingdezhen-renaissance-band/968138-20201128114120474-1364776540.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114120474-1364776540.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114120474-1364776540.webp">
    </a><figcaption class="image-caption">拉小提琴的小哥哥</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114814888-740961187.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114814888-740961187.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114814888-740961187.webp" data-sub-html="<h2>九三舞蹈</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114814888-740961187.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114814888-740961187.webp, /images/jingdezhen-renaissance-band/968138-20201128114814888-740961187.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114814888-740961187.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114814888-740961187.webp">
    </a><figcaption class="image-caption">九三舞蹈</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114128067-1544370442.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114128067-1544370442.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114128067-1544370442.webp" data-sub-html="<h2>小提琴伴奏</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114128067-1544370442.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114128067-1544370442.webp, /images/jingdezhen-renaissance-band/968138-20201128114128067-1544370442.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114128067-1544370442.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114128067-1544370442.webp">
    </a><figcaption class="image-caption">小提琴伴奏</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114139889-1898640004.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114139889-1898640004.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114139889-1898640004.webp" data-sub-html="<h2>九三是朝廷命官</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114139889-1898640004.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114139889-1898640004.webp, /images/jingdezhen-renaissance-band/968138-20201128114139889-1898640004.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114139889-1898640004.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114139889-1898640004.webp">
    </a><figcaption class="image-caption">九三是朝廷命官</figcaption>
    </figure></p>
<p><figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114147861-2104586359.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114147861-2104586359.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114147861-2104586359.webp" data-sub-html="<h2>阿弥陀佛</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114147861-2104586359.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114147861-2104586359.webp, /images/jingdezhen-renaissance-band/968138-20201128114147861-2104586359.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114147861-2104586359.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114147861-2104586359.webp">
    </a><figcaption class="image-caption">阿弥陀佛</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114155271-1084407368.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114155271-1084407368.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114155271-1084407368.webp" data-sub-html="<h2>唱</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114155271-1084407368.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114155271-1084407368.webp, /images/jingdezhen-renaissance-band/968138-20201128114155271-1084407368.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114155271-1084407368.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114155271-1084407368.webp">
    </a><figcaption class="image-caption">唱</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114227530-1597188845.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114227530-1597188845.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114227530-1597188845.webp" data-sub-html="<h2>唱</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114227530-1597188845.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114227530-1597188845.webp, /images/jingdezhen-renaissance-band/968138-20201128114227530-1597188845.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114227530-1597188845.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114227530-1597188845.webp">
    </a><figcaption class="image-caption">唱</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114241120-99677935.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114241120-99677935.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114241120-99677935.webp" data-sub-html="<h2>唱</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114241120-99677935.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114241120-99677935.webp, /images/jingdezhen-renaissance-band/968138-20201128114241120-99677935.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114241120-99677935.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114241120-99677935.webp">
    </a><figcaption class="image-caption">唱</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114247824-172194041.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114247824-172194041.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114247824-172194041.webp" data-sub-html="<h2>唱</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114247824-172194041.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114247824-172194041.webp, /images/jingdezhen-renaissance-band/968138-20201128114247824-172194041.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114247824-172194041.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114247824-172194041.webp">
    </a><figcaption class="image-caption">唱</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114253686-145509147.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114253686-145509147.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114253686-145509147.webp" data-sub-html="<h2>唱</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114253686-145509147.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114253686-145509147.webp, /images/jingdezhen-renaissance-band/968138-20201128114253686-145509147.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114253686-145509147.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114253686-145509147.webp">
    </a><figcaption class="image-caption">唱</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114300937-1249145761.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114300937-1249145761.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114300937-1249145761.webp" data-sub-html="<h2>九三最漂亮的一瞬间</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114300937-1249145761.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114300937-1249145761.webp, /images/jingdezhen-renaissance-band/968138-20201128114300937-1249145761.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114300937-1249145761.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114300937-1249145761.webp">
    </a><figcaption class="image-caption">九三最漂亮的一瞬间</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114309169-866899330.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114309169-866899330.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114309169-866899330.webp" data-sub-html="<h2>九三超帅气</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114309169-866899330.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114309169-866899330.webp, /images/jingdezhen-renaissance-band/968138-20201128114309169-866899330.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114309169-866899330.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114309169-866899330.webp">
    </a><figcaption class="image-caption">九三超帅气</figcaption>
    </figure></p>
<p>结束：</p>
<p><figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114357231-542104843.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114357231-542104843.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114357231-542104843.webp" data-sub-html="<h2>Live House 后台</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114357231-542104843.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114357231-542104843.webp, /images/jingdezhen-renaissance-band/968138-20201128114357231-542104843.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114357231-542104843.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114357231-542104843.webp">
    </a><figcaption class="image-caption">Live House 后台</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114431651-1177933036.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114431651-1177933036.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114431651-1177933036.webp" data-sub-html="<h2>结束鞠躬</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114431651-1177933036.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114431651-1177933036.webp, /images/jingdezhen-renaissance-band/968138-20201128114431651-1177933036.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114431651-1177933036.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114431651-1177933036.webp">
    </a><figcaption class="image-caption">结束鞠躬</figcaption>
    </figure>
<figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114503863-1307895977.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114503863-1307895977.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114503863-1307895977.webp" data-sub-html="<h2>大合照</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114503863-1307895977.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114503863-1307895977.webp, /images/jingdezhen-renaissance-band/968138-20201128114503863-1307895977.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114503863-1307895977.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114503863-1307895977.webp">
    </a><figcaption class="image-caption">大合照</figcaption>
    </figure></p>
<p>签售：</p>
<p><figure><a class="lightgallery" href="/images/jingdezhen-renaissance-band/968138-20201128114723297-452926719.webp" title="/images/jingdezhen-renaissance-band/968138-20201128114723297-452926719.webp" data-thumbnail="/images/jingdezhen-renaissance-band/968138-20201128114723297-452926719.webp" data-sub-html="<h2>签售</h2>">
        <img
            class="lazyload"
            data-src="/images/jingdezhen-renaissance-band/968138-20201128114723297-452926719.webp"
            data-srcset="/images/jingdezhen-renaissance-band/968138-20201128114723297-452926719.webp, /images/jingdezhen-renaissance-band/968138-20201128114723297-452926719.webp 1.5x, /images/jingdezhen-renaissance-band/968138-20201128114723297-452926719.webp 2x"
            data-sizes="auto"
            alt="/images/jingdezhen-renaissance-band/968138-20201128114723297-452926719.webp">
    </a><figcaption class="image-caption">签售</figcaption>
    </figure></p>]]></content></entry><entry><title type="html">Base64 编码并不唯一</title><link href="https://thiscute.world/posts/base64-encoding-is-not-unique/"/><id>https://thiscute.world/posts/base64-encoding-is-not-unique/</id><author><name>ryan4yin</name></author><published>2020-05-31T00:13:00+08:00</published><updated>2020-05-31T00:13:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，不保证正确</p>
</blockquote>
<h1 id="问题" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98" class="header-mark"></a>问题</h1><p>我以前只知道 Base64 这个编码算法很常用，自己也经常在 JWT 等场景下使用，但是从来没了解过它的原理，一直先入为主地认为它的编码应该是唯一的。</p>
<p>但是今天测试 JWT 时，发现修改 JWT 的最后一个字符（其实不是我发现的。。），居然有可能不影响 JWT 的正确性。比如下这个使用 HS256 算法的 JWT:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
</span></span></code></pre></td></tr></table>
</div>
</div><p>把它的最后一个字符改成 <code>d</code> <code>e</code>或者 <code>f</code>，都能成功通过 <code>http://jwt.io</code> 的验证。</p>
<p>这让我觉得很奇怪（难道我发现了一个 Bug？），在QQ群里一问，就有大佬找到根本原因：<strong>这是 Base64 编码的特性</strong>。并且通过 python 进行了实际演示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">base64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 使用 jwt 的 signature 进行验证</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s2">&#34;SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c==&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="sa">b</span><span class="s1">&#39;I</span><span class="se">\xf9</span><span class="s1">J</span><span class="se">\xc7\x04</span><span class="s1">IH</span><span class="se">\xc7\x8a</span><span class="s1">(]</span><span class="se">\x90</span><span class="s1">O</span><span class="se">\x87\xf0\xa4\xc7\x89\x7f</span><span class="s1">~</span><span class="se">\x8f</span><span class="s1">:N</span><span class="se">\xb2</span><span class="s1">%V</span><span class="se">\x9d</span><span class="s1">B</span><span class="se">\xcb</span><span class="s1">0</span><span class="se">\xe5</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s2">&#34;SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5d==&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="sa">b</span><span class="s1">&#39;I</span><span class="se">\xf9</span><span class="s1">J</span><span class="se">\xc7\x04</span><span class="s1">IH</span><span class="se">\xc7\x8a</span><span class="s1">(]</span><span class="se">\x90</span><span class="s1">O</span><span class="se">\x87\xf0\xa4\xc7\x89\x7f</span><span class="s1">~</span><span class="se">\x8f</span><span class="s1">:N</span><span class="se">\xb2</span><span class="s1">%V</span><span class="se">\x9d</span><span class="s1">B</span><span class="se">\xcb</span><span class="s1">0</span><span class="se">\xe5</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s2">&#34;SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5e==&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">4</span><span class="p">]:</span> <span class="sa">b</span><span class="s1">&#39;I</span><span class="se">\xf9</span><span class="s1">J</span><span class="se">\xc7\x04</span><span class="s1">IH</span><span class="se">\xc7\x8a</span><span class="s1">(]</span><span class="se">\x90</span><span class="s1">O</span><span class="se">\x87\xf0\xa4\xc7\x89\x7f</span><span class="s1">~</span><span class="se">\x8f</span><span class="s1">:N</span><span class="se">\xb2</span><span class="s1">%V</span><span class="se">\x9d</span><span class="s1">B</span><span class="se">\xcb</span><span class="s1">0</span><span class="se">\xe5</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s2">&#34;SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5f==&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">5</span><span class="p">]:</span> <span class="sa">b</span><span class="s1">&#39;I</span><span class="se">\xf9</span><span class="s1">J</span><span class="se">\xc7\x04</span><span class="s1">IH</span><span class="se">\xc7\x8a</span><span class="s1">(]</span><span class="se">\x90</span><span class="s1">O</span><span class="se">\x87\xf0\xa4\xc7\x89\x7f</span><span class="s1">~</span><span class="se">\x8f</span><span class="s1">:N</span><span class="se">\xb2</span><span class="s1">%V</span><span class="se">\x9d</span><span class="s1">B</span><span class="se">\xcb</span><span class="s1">0</span><span class="se">\xe5</span><span class="s1">&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 两个等于号之后的任何内容，都会被直接丢弃。这个是实现相关的，有的 base64 处理库对这种情况会报错。</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s2">&#34;SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5f==fdf=df==dfd=fderwe=r&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">6</span><span class="p">]:</span> <span class="sa">b</span><span class="s1">&#39;I</span><span class="se">\xf9</span><span class="s1">J</span><span class="se">\xc7\x04</span><span class="s1">IH</span><span class="se">\xc7\x8a</span><span class="s1">(]</span><span class="se">\x90</span><span class="s1">O</span><span class="se">\x87\xf0\xa4\xc7\x89\x7f</span><span class="s1">~</span><span class="se">\x8f</span><span class="s1">:N</span><span class="se">\xb2</span><span class="s1">%V</span><span class="se">\x9d</span><span class="s1">B</span><span class="se">\xcb</span><span class="s1">0</span><span class="se">\xe5</span><span class="s1">&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到有两个现象：</p>
<ul>
<li>将同一个 base64 串的最后一个字母分别改成 <code>d</code> <code>e</code> <code>f</code>，解码出来的内容没有任何变化。</li>
<li>在 base64 串末尾 <code>==</code> 后面添加了一堆随机字符，对解码出的内容也没有任何影响。</li>
</ul>
<h2 id="原因分析" class="headerLink">
    <a href="#%e5%8e%9f%e5%9b%a0%e5%88%86%e6%9e%90" class="header-mark"></a>原因分析</h2><p>base64 编码将二进制内容(bytes)从左往右每 6 bits 分为一组，每一组编码为一个可打印字符。
bas64 从 ASCII 字符集中选出了 64 个字符（<code>=</code>号除外）进行编码。因为 $2^6=64$，使用 64 个字符才能保证上述编码的唯一性。</p>
<p>但是被编码的二进制内容(bytes)的 bits 数不一定是 6 的倍数，无法被编码为 6 bits 一组。
为了解决这个问题，就需要在这些二进制内容的末尾填充上 2 或 4 个 bit 位，这样才能使用 base64 进行编码。</p>
<p>关于这些被填充的 bits，在 RFC4648 中定义了规范行为：全部补 0.
但是这并不是一个强制的行为，因此实际上你可以随便补，在进行 base64 解析时，被填补的 bits 会被直接忽略掉。</p>
<p>这就导致了上面描述的行为：修改 <code>JWT</code> 的最后一个字符(6 bits，其中可能包含 2 或 4 个填充比特位)可能并不影响被编码的实际内容！</p>
<p>RFC4684 中对这个 bits 填充的描述如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">   3.5.  Canonical Encoding
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   The padding step in base 64 and base 32 encoding can, if improperly
</span></span><span class="line"><span class="cl">   implemented, lead to non-significant alterations of the encoded data.
</span></span><span class="line"><span class="cl">   For example, if the input is only one octet for a base 64 encoding,
</span></span><span class="line"><span class="cl">   then all six bits of the first symbol are used, but only the first
</span></span><span class="line"><span class="cl">   two bits of the next symbol are used.  These pad bits MUST be set to
</span></span><span class="line"><span class="cl">   zero by conforming encoders, which is described in the descriptions
</span></span><span class="line"><span class="cl">   on padding below.  If this property do not hold, there is no
</span></span><span class="line"><span class="cl">   canonical representation of base-encoded data, and multiple base-
</span></span><span class="line"><span class="cl">   encoded strings can be decoded to the same binary data.  If this
</span></span><span class="line"><span class="cl">   property (and others discussed in this document) holds, a canonical
</span></span><span class="line"><span class="cl">   encoding is guaranteed.
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   In some environments, the alteration is critical and therefore
</span></span><span class="line"><span class="cl">   decoders MAY chose to reject an encoding if the pad bits have not
</span></span><span class="line"><span class="cl">   been set to zero.  The specification referring to this may mandate a
</span></span><span class="line"><span class="cl">   specific behaviour.
</span></span></code></pre></td></tr></table>
</div>
</div><p>它讲到在某些环境下，base64 解析器可能会严格检查被填充的这几个 bits，要求它们全部为 0.
但是我测试发现，Python 标准库和 <code>https://jwt.io</code> 都没有做这样的限制。因此我认为绝大部分环境下，被填充的 bits 都是会被忽略的。</p>
<h2 id="问题一为什么只需要填充-2-或-4-个-bit-位" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98%e4%b8%80%e4%b8%ba%e4%bb%80%e4%b9%88%e5%8f%aa%e9%9c%80%e8%a6%81%e5%a1%ab%e5%85%85-2-%e6%88%96-4-%e4%b8%aa-bit-%e4%bd%8d" class="header-mark"></a>问题一：为什么只需要填充 2 或 4 个 bit 位？</h2><p>这是看到「填充上 2 或 4 个 bit 位」时的第一想法——如果要补足到 6 的倍数，不应该是要填充 1-5 个 bit 位么？</p>
<p>要解答这个问题，我们得看 base64 的定义。在 RFC4648 的 base64 定义中，有如下这样一段话：</p>
<blockquote>
<p>The Base 64 encoding is designed to represent arbitrary sequences of
<strong>octets</strong> in a form that allows the use of both upper- and lowercase
letters but that need not be human readable.</p>
</blockquote>
<p>注意重点：<strong>octets</strong>—— 和 bytes 同义，表示 8 bits 一组的位序列。这表示 <strong>base64 只支持编码 bits 数为 8 的倍数的二进制内容，而 $8x \bmod 6$ 的结果只可能是 0/2/4 三种情况。</strong></p>
<p>因此只需要填充 2 或 4 个 bit 位。</p>
<p>这样的假设也并没有什么问题，因为现代计算机都是统一使用 8 bits(byte) 为最小的可读单位的。即使是 c 语言的「位域」也是如此。
因为 <strong>Byte(8 bits) 现代 CPU 数据读写操作的基本单位</strong>，学过汇编的对这个应该都有些印象。</p>
<p>你仔细想想，所有文件的最小计量单位，是不是都是 byte？</p>
<h2 id="问题二为什么用-python-测试时可能需要在-jwt-signature-的末尾添加多个-而-jwt-中不需要" class="headerLink">
    <a href="#%e9%97%ae%e9%a2%98%e4%ba%8c%e4%b8%ba%e4%bb%80%e4%b9%88%e7%94%a8-python-%e6%b5%8b%e8%af%95%e6%97%b6%e5%8f%af%e8%83%bd%e9%9c%80%e8%a6%81%e5%9c%a8-jwt-signature-%e7%9a%84%e6%9c%ab%e5%b0%be%e6%b7%bb%e5%8a%a0%e5%a4%9a%e4%b8%aa-%e8%80%8c-jwt-%e4%b8%ad%e4%b8%8d%e9%9c%80%e8%a6%81" class="header-mark"></a>问题二：为什么用 <code>python</code> 测试时可能需要在 JWT signature 的末尾添加多个 <code>=</code>，而 JWT 中不需要？</h2><p>前面已经讲过，base64 的编码步骤是是将字节(byte, 8 bits)序列，从左往右每 6 个 bits 转换成一个可打印字符。</p>
<p>查阅 RFC4648 第 4 小节中 baae64 的定义，能看到它实际上是每次处理 24 bits，因为这是 6 和 8 的最小公倍数，可以刚好用 4 个字符表示。
**在被处理的字节序列的比特(bits)数不是 24 的整数时，就需要在序列末尾填充 0 使末尾的 bits 数是 6 的倍数(6-bit groups)。**有可能会出现三种情况：</p>
<ol>
<li>被处理的字节序列 S 的比特数刚好是 24 的倍数：不需要补比特位，末尾也就不需要加 <code>=</code></li>
<li>S 的比特数是 $24x+8$: 末尾需要补 4 个 bits，这样末尾剩余的 bits 才是 6-bit groups，才能编码成 base64。然后添加两个 <code>==</code> 使编码后的字符数为 4 的倍数。</li>
<li>S 的比特数为 $24x+16$：末尾需要添加 2 个 bits 才能编码成 base64。然后添加一个 <code>=</code> 使编码后的字符数为 4 的倍数。</li>
</ol>
<p>其实可以看到，添加 <code>=</code> 的目的只是为了使编码后的字符数为 4 的倍数而已，<strong><code>=</code> 这个 padding 其实是冗余信息，完全可以去掉。</strong></p>
<p>在解码完成后，应用程序会自动去除掉末尾这不足 1 byte 的 2 或 4 个填充位。</p>
<p>因此 JWT 就去掉了它以减少传输的数据量。</p>
<p>可以用前面讲到的 JWT signature 进行验证：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="kn">import</span> <span class="nn">base64</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="n">s</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s2">&#34;SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c==&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># len(s) * 8 得到 bits 数</span>
</span></span><span class="line"><span class="cl"><span class="n">In</span> <span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span> <span class="o">%</span> <span class="mi">24</span>
</span></span><span class="line"><span class="cl"><span class="n">Out</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="mi">8</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到这里的被编码内容比特数为 $24x+8$，所以末尾需要添加两个 <code>==</code> 号才符合 RFC4648 的定义。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://stackoverflow.com/questions/4492426/remove-trailing-when-base64-encoding" target="_blank" rel="noopener noreffer">Remove trailing “=” when base64 encoding</a></li>
<li><a href="https://tools.ietf.org/html/rfc4648" target="_blank" rel="noopener noreffer">RFC4648 - base64 定义</a></li>
<li><a href="https://stackoverflow.com/questions/37893325/difference-betweeen-rfc-3548-and-rfc-4648" target="_blank" rel="noopener noreffer">Difference betweeen RFC 3548 and RFC 4648</a></li>
<li><a href="https://www.jianshu.com/p/f1f4e10ad10e" target="_blank" rel="noopener noreffer">Base64隐写原理和提取脚本</a></li>
</ul>
]]></content></entry><entry><title type="html">使用 tcpdump 和 Wireshark 进行远程实时抓包分析</title><link href="https://thiscute.world/posts/tcpdump-and-wireshark/"/><id>https://thiscute.world/posts/tcpdump-and-wireshark/</id><author><name>ryan4yin</name></author><published>2020-05-28T16:20:26+08:00</published><updated>2020-05-28T16:20:26+08:00</updated><content type="html"><![CDATA[<h1 id="抓包分析" class="headerLink">
    <a href="#%e6%8a%93%e5%8c%85%e5%88%86%e6%9e%90" class="header-mark"></a>抓包分析</h1><p>抓包分析工具主要有两种：</p>
<ol>
<li>http/https 网络代理工具：<a href="https://github.com/mitmproxy/mitmproxy" target="_blank" rel="noopener noreffer">mitmproxy</a>/fiddler 都属于这一类，用于分析 http 非常方便。但是只支持 http/https，有局限性。</li>
<li>tcp/udp/icmp 等网络嗅探工具：tcpdump/tshark 都属于这一类，网络故障分析等场景常用。</li>
</ol>
<p>这里主要介绍如何使用 tcpdump + wireshark 进行远程实时抓包分析。
而 mitmproxy 抓包和 wireshark 本地抓包都相当简单，就不介绍了。</p>
<blockquote>
<p>P.S. tshark 是 wireshark 的命令行版本，用法 tcpdump 非常相似。</p>
</blockquote>
<h2 id="一wireshark-的基本用法" class="headerLink">
    <a href="#%e4%b8%80wireshark-%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%94%a8%e6%b3%95" class="header-mark"></a>一、wireshark 的基本用法</h2><p>WireShark 的 UI 界面如何使用，网上能搜得到各种类型的 wireshark 演示，多看几篇博客就会了。
搜索 [xxx 协议 wireshark 抓包分析] 就能找到各种各样的演示，比如</p>
<ol>
<li>「gRPC 协议 wireshark 抓包分析」</li>
<li>「WebSocket 协议 wireshark 抓包分析」</li>
<li>「TCP 协议 wireshark 抓包分析」</li>
<li>等等</li>
</ol>
<p>主要需要介绍的，应该是 wireshark 的数据包过滤器。
wireshark 中有两种包过滤器：</p>
<ol>
<li>捕获过滤器：在抓包的时候使用它对数据包进行过滤。</li>
<li>显示过滤器：对抓到的所有数据包进行过滤。</li>
</ol>
<p>显示过滤器是最有用的，下面简要介绍下显示过滤器的语法。</p>
<p>可以直接通过「<strong>协议名称</strong>」进行过滤：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 只看 tcp 流量
</span></span><span class="line"><span class="cl">tcp
</span></span><span class="line"><span class="cl"># 只看 http 流量
</span></span><span class="line"><span class="cl">http
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 使用感叹号（或 not）进行反向过滤
</span></span><span class="line"><span class="cl">!arp  # 过滤掉所有 arp 数据包
</span></span></code></pre></td></tr></table>
</div>
</div><p>也可以通过「<strong>协议名称.协议属性</strong>」和「比较操作符（比如 <code>==</code>）」进行更精确的过滤：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 通过 ip 的源地址 src 或 dst 进行过滤
</span></span><span class="line"><span class="cl">ip.src==192.168.1.33
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 通过 IP 地址（ip.addr）进行过滤（匹配 ip.src 或 ip.dst）
</span></span><span class="line"><span class="cl">ip.addr==192.168.0.5
</span></span><span class="line"><span class="cl"># 上一条过滤表达式等价于：
</span></span><span class="line"><span class="cl">ip.src==192.168.0.5 or ip.dst==192.168.0.5
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 通过 tcp 端口号进行过滤
</span></span><span class="line"><span class="cl">tcp.port==80
</span></span><span class="line"><span class="cl">tcp.port&gt;4000
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 通过 http 的 host 属性进行过滤
</span></span><span class="line"><span class="cl">http.host != &#34;xxx.baidu.com&#34;
</span></span><span class="line"><span class="cl"># 通过 http.referer 属性进行过滤
</span></span><span class="line"><span class="cl">http.referer == &#34;xxx.baidu.com&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 多个过滤器之间用 and、or 进行组合
</span></span><span class="line"><span class="cl">http.host != &#34;xxx.baidu.com&#34; and http.referer == &#34;xxx.baidu.com&#34;
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二tcpdump--ssh--wireshark-远程实时抓包" class="headerLink">
    <a href="#%e4%ba%8ctcpdump--ssh--wireshark-%e8%bf%9c%e7%a8%8b%e5%ae%9e%e6%97%b6%e6%8a%93%e5%8c%85" class="header-mark"></a>二、tcpdump + ssh + wireshark 远程实时抓包</h2><p>在进行远程网络抓包分析时，我们通常的做法是：</p>
<ol>
<li>使用 <code>tcpdump</code> 在远程主机上抓包，保存为 pcap 文件。</li>
<li>将 pcap 文件拷贝到本地，使用 wireshark 对其进行分析。</li>
</ol>
<p>但是这样做没有时效性，而且数据拷贝来去也比较麻烦。</p>
<p>考虑使用流的方式，在远程主机上使用 <code>tcpdump</code> 抓包，本地使用 <code>wireshark</code> 进行实时分析。</p>
<p>使用 ssh 协议进行流式传输的示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># eth0 更换成你的机器 interface 名称，虚拟机可能是 ens33</span>
</span></span><span class="line"><span class="cl">ssh root@some.host <span class="s2">&#34;tcpdump -i eth0 -l -w -&#34;</span> <span class="p">|</span> wireshark -k -i -
</span></span></code></pre></td></tr></table>
</div>
</div><p>在不方便使用 ssh 协议的情况下（比如容器抓包、Android 抓包），可以考虑使用 <code>nc</code>(netcat) 进行数据流的转发：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 1. 远程主机抓包：将数据流通过 11111 端口暴露出去</span>
</span></span><span class="line"><span class="cl">tcpdump -i wlan0 -s0 -w - <span class="p">|</span> nc -l -p <span class="m">11111</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 本地主机从远程主机的 11111 端口读取数据，提供给 wireshark</span>
</span></span><span class="line"><span class="cl">nc &lt;remote-host&gt; <span class="m">11111</span> <span class="p">|</span> wireshark -k -S -i -
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果是抓取 Android 手机的数据，方便起见，可以通过 adb 多进行一次数据转发：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 方案一：root 手机后，将 arm 版的 tcpdump 拷贝到手机内进行抓包</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 在 adb shell 里使用 tcpdump 抓 WiFi 的数据包，转发到 11111 端口</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 需要先获取到 root 权限，将 tcpdump 拷贝到 /system/bin/ 目录下</span>
</span></span><span class="line"><span class="cl">tcpdump -i wlan0 -s0 -w - <span class="p">|</span> nc -l -p <span class="m">11111</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 在本机使用 adb forward 将手机的 11111 端口绑定到本机(PC)的 11111 端口</span>
</span></span><span class="line"><span class="cl">adb forward tcp:11111 tcp:11111
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 直接从本机(PC)的 11111 端口读取数据，提供给 wireshark</span>
</span></span><span class="line"><span class="cl">nc localhost <span class="m">11111</span> <span class="p">|</span> wireshark -k -S -i -
</span></span><span class="line"><span class="cl"><span class="c1">## 通过数据转发，本机 11111 端口的数据，就是安卓手机内 tcmpdump 的 stdout 内容。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方案二：</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果手机不方便 root，推荐 PC 开启 WiFi 热点，手机连上这个热点访问网络。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 这样手机的数据就一定会走 PC，直接在 PC 上通过 wireshark 抓包就行。</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果你只需要简单地抓 http/https 包，请使用 fiddler/mitmproxy</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果需要对 Kubernetes 集群中的容器进行抓包，推荐直接使用 <a href="https://github.com/eldadru/ksniff" target="_blank" rel="noopener noreffer">ksniff</a>!</p>
<h3 id="windows-系统" class="headerLink">
    <a href="#windows-%e7%b3%bb%e7%bb%9f" class="header-mark"></a>Windows 系统</h3><p>另外如果你本机是 Windows 系统，要分 shell 讨论：</p>
<ol>
<li><code>cmd</code>: 可以直接使用上述命令。</li>
<li><code>powershell</code>: **PowerShell 管道对 <code>native commands</code> 的支持不是很好，管道两边的命令貌似是串行执行的，这会导致 wireshark 无法启动！**目前没有找到好的解决方法。。</li>
</ol>
<p>另外如果你使用 <code>wsl</code>，那么可以通过如下命令使 <code>wsl</code> 调用 windows 中的 wireshark 进行抓包分析：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 添加软链接</span>
</span></span><span class="line"><span class="cl">sudo ln -s <span class="s2">&#34;</span><span class="k">$(</span>which wireshark.exe<span class="k">)</span><span class="s2">&#34;</span> /usr/local/bin/wireshark
</span></span></code></pre></td></tr></table>
</div>
</div><p>添加了上述软链接后，就可以正常地在 <code>wsl</code> 中使用前面介绍的所有抓包指令了（包括 <a href="https://github.com/eldadru/ksniff" target="_blank" rel="noopener noreffer">ksniff</a>）。
它能正常调用 windows 中的 wireshark，数据流也能正常地通过 shell 管道传输。</p>
<h2 id="三直接在命令行抓包检查" class="headerLink">
    <a href="#%e4%b8%89%e7%9b%b4%e6%8e%a5%e5%9c%a8%e5%91%bd%e4%bb%a4%e8%a1%8c%e6%8a%93%e5%8c%85%e6%a3%80%e6%9f%a5" class="header-mark"></a>三、直接在命令行抓包检查</h2><h3 id="termshark" class="headerLink">
    <a href="#termshark" class="header-mark"></a>termshark</h3><p>可以直接使用命令行 UI 工具 <a href="https://github.com/gcla/termshark" target="_blank" rel="noopener noreffer">termshark</a> 进行实时抓包分析</p>
<p>有的时候，远程实时抓包因为某些原因无法实现，而把 pcap 数据拷贝到本地分析又比较麻烦。
这时你可以考虑直接使用命令行版本的 <code>wireshark</code> UI: <a href="https://github.com/gcla/termshark" target="_blank" rel="noopener noreffer">termshark</a>，直接在命令行进行实时的抓包分析。</p>
<p><a href="https://github.com/aylei/kubectl-debug" target="_blank" rel="noopener noreffer">kubectl-debug</a> 默认的调试镜像中，就自带 <code>termshark</code>.</p>
<h3 id="tcpdump" class="headerLink">
    <a href="#tcpdump" class="header-mark"></a>tcpdump</h3><p>也可以直接使用 tcpdump 将抓到的数据打印到 stdout 查看，常用命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 1. 嗅探所有接口，80 端口上所有 HTTP 协议请求与响应的 headers 以及 body</span>
</span></span><span class="line"><span class="cl">tcpdump -A -s <span class="m">0</span> <span class="s1">&#39;tcp port 80 and (((ip[2:2] - ((ip[0]&amp;0xf)&lt;&lt;2)) - ((tcp[12]&amp;0xf0)&gt;&gt;2)) != 0)&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 嗅探 eth0 接口，80 端口上所有 HTTP GET 请求（&#39;GET &#39; =&gt; 0x47455420）</span>
</span></span><span class="line"><span class="cl">tcpdump -A -i eth0 -s <span class="m">0</span> <span class="s1">&#39;tcp port 80 and tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x47455420&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 嗅探 eth0 接口，80 端口上所有 HTTP POST 请求（&#39;POST&#39; =&gt; 0x504F5354）</span>
</span></span><span class="line"><span class="cl">tcpdump -A -i eth0 -s <span class="m">0</span> <span class="s1">&#39;tcp port 80 and tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504F5354&#39;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/92993778" target="_blank" rel="noopener noreffer">WireShark使用教程</a></li>
<li><a href="https://techzone.ergon.ch/tcpdump" target="_blank" rel="noopener noreffer">Tracing network traffic using tcpdump and tshark</a></li>
<li><a href="https://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/" target="_blank" rel="noopener noreffer">Android remote sniffing using Tcpdump, nc and Wireshark</a></li>
<li><a href="https://www.jianshu.com/p/a62ed1bb5b20" target="_blank" rel="noopener noreffer">聊聊tcpdump与Wireshark抓包分析</a></li>
</ul>
]]></content></entry><entry><title type="html">使用 Istio 进行 JWT 身份验证（充当 API 网关）</title><link href="https://thiscute.world/posts/use-istio-for-jwt-auth/"/><id>https://thiscute.world/posts/use-istio-for-jwt-auth/</id><author><name>ryan4yin</name></author><published>2020-04-06T21:48:26+08:00</published><updated>2020-04-06T21:48:26+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文基于 Istio1.5 编写测试</p>
</blockquote>
<p>Istio 支持使用 JWT 对终端用户进行身份验证（Istio End User Authentication），支持多种 JWT 签名算法。</p>
<p>目前主流的 JWT 算法是 RS256/ES256。（请忽略 HS256，该算法不适合分布式 JWT 验证）</p>
<p>这里以 RSA256 算法为例进行介绍，ES256 的配置方式也是一样的。</p>
<h3 id="1-介绍-jwk-与-jwks" class="headerLink">
    <a href="#1-%e4%bb%8b%e7%bb%8d-jwk-%e4%b8%8e-jwks" class="header-mark"></a>1. 介绍 JWK 与 JWKS</h3><p>Istio 要求提供 JWKS 格式的信息，用于 JWT 签名验证。因此这里得先介绍一下 JWK 和 JWKS.</p>
<p>JWKS ，也就是 JWK Set，json 结构如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">&#34;keys&#34;: [
</span></span><span class="line"><span class="cl">  &lt;jwk-1&gt;,
</span></span><span class="line"><span class="cl">  &lt;jwk-2&gt;,
</span></span><span class="line"><span class="cl">  ...
</span></span><span class="line"><span class="cl">]}
</span></span></code></pre></td></tr></table>
</div>
</div><p>JWKS 描述一组 JWK 密钥。它能同时描述多个可用的公钥，应用场景之一是密钥的 Rotate.</p>
<p>而 JWK，全称是 Json Web Key，它描述了一个加密密钥（公钥或私钥）的各项属性，包括密钥的值。</p>
<p>Istio 使用 JWK 描述验证 JWT 签名所需要的信息。在使用 RSA 签名算法时，JWK 描述的应该是用于验证的 RSA 公钥。</p>
<p>一个 RSA 公钥的 JWK 描述如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">    &#34;alg&#34;: &#34;RS256&#34;,  # 算法「可选参数」
</span></span><span class="line"><span class="cl">    &#34;kty&#34;: &#34;RSA&#34;,    # 密钥类型
</span></span><span class="line"><span class="cl">    &#34;use&#34;: &#34;sig&#34;,    # 被用于签名「可选参数」
</span></span><span class="line"><span class="cl">    &#34;kid&#34;: &#34;NjVBRjY5MDlCMUIwNzU4RTA2QzZFMDQ4QzQ2MDAyQjVDNjk1RTM2Qg&#34;,  # key 的唯一 id
</span></span><span class="line"><span class="cl">    &#34;n&#34;: &#34;yeNlzlub94YgerT030codqEztjfU_S6X4DbDA_iVKkjAWtYfPHDzz_sPCT1Axz6isZdf3lHpq_gYX4Sz-cbe4rjmigxUxr-FgKHQy3HeCdK6hNq9ASQvMK9LBOpXDNn7mei6RZWom4wo3CMvvsY1w8tjtfLb-yQwJPltHxShZq5-ihC9irpLI9xEBTgG12q5lGIFPhTl_7inA1PFK97LuSLnTJzW0bj096v_TMDg7pOWm_zHtF53qbVsI0e3v5nmdKXdFf9BjIARRfVrbxVxiZHjU6zL6jY5QJdh1QCmENoejj_ytspMmGW7yMRxzUqgxcAqOBpVm0b-_mW3HoBdjQ&#34;,
</span></span><span class="line"><span class="cl">    &#34;e&#34;: &#34;AQAB&#34;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>RSA 是基于大数分解的加密/签名算法，上述参数中，<code>e</code> 是公钥的模数(modulus)，<code>n</code> 是公钥的指数(exponent)，两个参数都是 base64 字符串。</p>
<p>JWK 中 RSA 公钥的具体定义参见 <a href="https://tools.ietf.org/html/rfc7518#page-30" target="_blank" rel="noopener noreffer">RSA Keys - JSON Web Algorithms (JWA)</a></p>
<h3 id="2-jwk-的生成" class="headerLink">
    <a href="#2-jwk-%e7%9a%84%e7%94%9f%e6%88%90" class="header-mark"></a>2. JWK 的生成</h3><p>要生成 JWK 公钥，需要先生成私钥，生成方法参见 <a href="/posts/jwt-algorithm-key-generation/#使用-openssl-生成-rsaecc-公私钥" rel="">JWT 签名算法 HS256、RS256 及 ES256 及密钥生成</a>。</p>
<blockquote>
<p>公钥不需要用上述方法生成，因为我们需要的是 JWK 格式的公钥。后面会通过 python 生成出 JWK 公钥。</p>
</blockquote>
<p>上面的命令会将生成出的 RSA 私钥写入 key.pem 中，查看一下私钥内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">ryan@RYAN-MI-DESKTOP:~/istio$ cat key.pem
</span></span><span class="line"><span class="cl">-----BEGIN RSA PRIVATE KEY-----
</span></span><span class="line"><span class="cl">MIIEpAIBAAKCAQEAt1cKkQqPh8iOv5BhKh7Rx6A2+1ldpO/jczML/0GBKu4X+lHr
</span></span><span class="line"><span class="cl">Y8YbJrt29jyAXlWM8vHC7tXsqgUG+WziRD0D8nhnh10XC14SeH+3mVuBqph+TqhX
</span></span><span class="line"><span class="cl">TWsh9gtAIbeUHJjEI4I79QK4/wquPHHIGZBQDQQnuMh6vAS3VaUYJdEIoKvUBnAy
</span></span><span class="line"><span class="cl">Y35kJZgyJSbrxLsEExL2zujUD/OY+/In2bq/3rFtDGNlgHyC7Gu2zXSXvfOA4O5m
</span></span><span class="line"><span class="cl">9BBXOc7eEqj7PoOKNaTxLN3YcuRtgR6NIXL4KLb6oyvIzoeiprt4+9q7sc3Dnkc5
</span></span><span class="line"><span class="cl">EV9kwWlEW2DHzhP6VYca0WXIIXc53U1AM3ewxwIDAQABAoIBABIKhaaqJF+XM7zU
</span></span><span class="line"><span class="cl">B0uuxrPfJynqrFVbqcUfQ9H1bzF7Rm7CeuhRiUBxeA5Y+8TMpFcPxT/dWzGL1xja
</span></span><span class="line"><span class="cl">RxWx715/zKg8V9Uth6HF55o2r/bKlLtGw3iBz1C34LKwrul1eu+HlEDS6MNoGKco
</span></span><span class="line"><span class="cl">BynE0qvFOedsCu/Pgv7xhQPLow60Ty1uM0AhbcPgi6yJ5ksRB1XjtEnW0t+c8yQS
</span></span><span class="line"><span class="cl">nU3mU8k230SdMhf4Ifud/5TPLjmXdFpyPi9uYiVdJ5oWsmMWEvekXoBnHWDDF/eT
</span></span><span class="line"><span class="cl">VkVMiTBorT4qn+Ax1VjHL2VOMO5ZbXEcpbIc3Uer7eZAaDQ0NPZK37IkIn9TiZ21
</span></span><span class="line"><span class="cl">cqzgbCkCgYEA5enHZbD5JgfwSNWCaiNrcBhYjpCtvfbT82yGW+J4/Qe/H+bY/hmJ
</span></span><span class="line"><span class="cl">RRTKf0kVPdRwZzq7GphVMWIuezbOk0aFGhk/SzIveW8QpLY0FV/5xFnGNjV9AuNc
</span></span><span class="line"><span class="cl">xrmgVshUsyQvr1TFkbdkC6yuvNgQfXfnbEoaPsXYEMCii2zqdF5lWGUCgYEAzCR2
</span></span><span class="line"><span class="cl">6g8vEQx0hdRS5d0zD2/9IRYNzfP5oK0+F3KHH2OuwlmQVIo7IhCiUgqserXNBDef
</span></span><span class="line"><span class="cl">hj+GNcU8O/yXLomAXG7VG/cLWRrpY8d9bcRMrwb0/SkNr0yNrkqHiWQ/PvR+2MLk
</span></span><span class="line"><span class="cl">viWFZTTp8YizPA+8pSC/oFd1jkZF0UhKVAREM7sCgYB5+mfxyczFopyW58ADM7uC
</span></span><span class="line"><span class="cl">g0goixXCnTuiAEfgY+0wwXVjJYSme0HaxscQdOOyJA1ml0BBQeShCKgEcvVyKY3g
</span></span><span class="line"><span class="cl">ZNixunR5hrVbzdcgKAVJaR/CDuq+J4ZHYKByqmJVkLND4EPZpWSM1Rb31eIZzw2W
</span></span><span class="line"><span class="cl">5FG8UBbr/GfAdQ6GorY+CQKBgQCzWQHkBmz6VG/2t6AQ9LIMSP4hWEfOfh78q9dW
</span></span><span class="line"><span class="cl">MDdIO4JomtkzfLIQ7n49B8WalShGITwUbLDTgrG1neeQahsMmg6+X99nbD5JfBTV
</span></span><span class="line"><span class="cl">H9WjG8CWvb+ZF++NhUroSNtLyu+6LhdaeopkbQVvPwMArG62wDu6ebv8v/5MrG8o
</span></span><span class="line"><span class="cl">uwrUSwKBgQCxV43ZqTRnEuDlF7jMN+2JZWhpbrucTG5INoMPOC0ZVatePszZjYm8
</span></span><span class="line"><span class="cl">LrmqQZHer2nqtFpyslwgKMWgmVLJTH7sVf0hS9po0+iSYY/r8e/c85UdUreb0xyT
</span></span><span class="line"><span class="cl">x8whrOnMMODCAqu4W/Rx1Lgf2vXIx0pZmlt8Df9i2AVg/ePR6jO3Nw==
</span></span><span class="line"><span class="cl">-----END RSA PRIVATE KEY-----
</span></span></code></pre></td></tr></table>
</div>
</div><p>接下来通过 Python 编程生成 RSA Public Key 和 JWK（jwk 其实就是公钥的另一个表述形式而已）:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 需要先安装依赖: pip install jwcrypto</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">jwcrypto.jwk</span> <span class="kn">import</span> <span class="n">JWK</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">private_key</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s2">&#34;key.pem&#34;</span><span class="p">)</span><span class="o">.</span><span class="n">read_bytes</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">jwk</span> <span class="o">=</span> <span class="n">JWK</span><span class="o">.</span><span class="n">from_pem</span><span class="p">(</span><span class="n">private_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 导出公钥 RSA Public Key</span>
</span></span><span class="line"><span class="cl"><span class="n">public_key</span> <span class="o">=</span> <span class="n">jwk</span><span class="o">.</span><span class="n">public</span><span class="p">()</span><span class="o">.</span><span class="n">export_to_pem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">public_key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;=&#34;</span><span class="o">*</span><span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 导出 JWK</span>
</span></span><span class="line"><span class="cl"><span class="n">jwk_bytes</span> <span class="o">=</span> <span class="n">jwk</span><span class="o">.</span><span class="n">public</span><span class="p">()</span><span class="o">.</span><span class="n">export</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">jwk_bytes</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Istio 需要 JWK 进行 JWT 验证，而我们手动验证 JWT 时一般需要用到 Public Key. 方便起见，上述代码把这两个都打印了出来。内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># Public Key 内容，不包含这行注释
</span></span><span class="line"><span class="cl">-----BEGIN PUBLIC KEY-----
</span></span><span class="line"><span class="cl">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAt1cKkQqPh8iOv5BhKh7R
</span></span><span class="line"><span class="cl">x6A2+1ldpO/jczML/0GBKu4X+lHrY8YbJrt29jyAXlWM8vHC7tXsqgUG+WziRD0D
</span></span><span class="line"><span class="cl">8nhnh10XC14SeH+3mVuBqph+TqhXTWsh9gtAIbeUHJjEI4I79QK4/wquPHHIGZBQ
</span></span><span class="line"><span class="cl">DQQnuMh6vAS3VaUYJdEIoKvUBnAyY35kJZgyJSbrxLsEExL2zujUD/OY+/In2bq/
</span></span><span class="line"><span class="cl">3rFtDGNlgHyC7Gu2zXSXvfOA4O5m9BBXOc7eEqj7PoOKNaTxLN3YcuRtgR6NIXL4
</span></span><span class="line"><span class="cl">KLb6oyvIzoeiprt4+9q7sc3Dnkc5EV9kwWlEW2DHzhP6VYca0WXIIXc53U1AM3ew
</span></span><span class="line"><span class="cl">xwIDAQAB
</span></span><span class="line"><span class="cl">-----END PUBLIC KEY-----
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># jwk 内容
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl"> &#39;e&#39;: &#39;AQAB&#39;,
</span></span><span class="line"><span class="cl"> &#39;kid&#39;: &#39;oyYwZSLCLVVPHdVp0jXIcLNpGn6dMCumlY-6wSenmFo&#39;,
</span></span><span class="line"><span class="cl"> &#39;kty&#39;: &#39;RSA&#39;,
</span></span><span class="line"><span class="cl"> &#39;n&#39;: &#39;t1cKkQqPh8iOv5BhKh7Rx6A2-1ldpO_jczML_0GBKu4X-lHrY8YbJrt29jyAXlWM8vHC7tXsqgUG-WziRD0D8nhnh10XC14SeH-3mVuBqph-TqhXTWsh9gtAIbeUHJjEI4I79QK4_wquPHHIGZBQDQQnuMh6vAS3VaUYJdEIoKvUBnAyY35kJZgyJSbrxLsEExL2zujUD_OY-_In2bq_3rFtDGNlgHyC7Gu2zXSXvfOA4O5m9BBXOc7eEqj7PoOKNaTxLN3YcuRtgR6NIXL4KLb6oyvIzoeiprt4-9q7sc3Dnkc5EV9kwWlEW2DHzhP6VYca0WXIIXc53U1AM3ewxw&#39;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-测试密钥可用性" class="headerLink">
    <a href="#4-%e6%b5%8b%e8%af%95%e5%af%86%e9%92%a5%e5%8f%af%e7%94%a8%e6%80%a7" class="header-mark"></a>4. 测试密钥可用性</h3><p>接下来在 <a href="https://jwt.io" target="_blank" rel="noopener noreffer">jwt.io</a> 中填入测试用的公钥私钥，还有 Header/Payload。一是测试公私钥的可用性，二是生成出 JWT 供后续测试 Istio JWT 验证功能的可用性。
<figure><img src="/images/use-istio-for-jwt-auth/jwt.io.webp"/>
</figure>
</p>
<p>可以看到左下角显示「Signature Verified」，成功地生成出了 JWT。后续可以使用这个 JWT 访问 Istio 网关，测试 Istio JWT 验证功能。</p>
<h3 id="5-启用-istio-的身份验证" class="headerLink">
    <a href="#5-%e5%90%af%e7%94%a8-istio-%e7%9a%84%e8%ba%ab%e4%bb%bd%e9%aa%8c%e8%af%81" class="header-mark"></a>5. 启用 Istio 的身份验证</h3><p>编写 istio 配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;security.istio.io/v1beta1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;RequestAuthentication&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;jwt-example&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-system </span><span class="w"> </span><span class="c"># istio-system 名字空间中的配置，默认情况下会应用到所有名字空间</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">istio</span><span class="p">:</span><span class="w"> </span><span class="l">ingressgateway </span><span class="w"> </span><span class="c"># 在带有这些 labels 的 ingressgateway/sidecar 上生效</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">jwtRules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="c"># issuer 即签发者，需要和 JWT payload 中的 iss 属性完全一致。</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">issuer</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;testing@secure.istio.io&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jwks</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    {
</span></span></span><span class="line"><span class="cl"><span class="sd">        &#34;keys&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="sd">            {
</span></span></span><span class="line"><span class="cl"><span class="sd">                &#34;e&#34;: &#34;AQAB&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sd">                &#34;kid&#34;: &#34;oyYwZSLCLVVPHdVp0jXIcLNpGn6dMCumlY-6wSenmFo&#34;,  # kid 需要与 jwt header 中的 kid 完全一致。
</span></span></span><span class="line"><span class="cl"><span class="sd">                &#34;kty&#34;: &#34;RSA&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sd">                &#34;n&#34;: &#34;t1cKkQqPh8iOv5BhKh7Rx6A2-1ldpO_jczML_0GBKu4X-lHrY8YbJrt29jyAXlWM8vHC7tXsqgUG-WziRD0D8nhnh10XC14SeH-3mVuBqph-TqhXTWsh9gtAIbeUHJjEI4I79QK4_wquPHHIGZBQDQQnuMh6vAS3VaUYJdEIoKvUBnAyY35kJZgyJSbrxLsEExL2zujUD_OY-_In2bq_3rFtDGNlgHyC7Gu2zXSXvfOA4O5m9BBXOc7eEqj7PoOKNaTxLN3YcuRtgR6NIXL4KLb6oyvIzoeiprt4-9q7sc3Dnkc5EV9kwWlEW2DHzhP6VYca0WXIIXc53U1AM3ewxw&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">        ]
</span></span></span><span class="line"><span class="cl"><span class="sd">    }
</span></span></span><span class="line"><span class="cl"><span class="sd">      # jwks 或 jwksUri 二选其一
</span></span></span><span class="line"><span class="cl"><span class="sd">      # jwksUri: &#34;http://nginx.test.local/istio/jwks.json&#34;</span><span class="w">    
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>现在 <code>kubectl apply</code> 一下，JWT 验证就添加到全局了。</p>
<p>可以看到 jwtRules 是一个列表，因此可以为每个 issuers 配置不同的 jwtRule.</p>
<p>对同一个 issuers（jwt 签发者），可以通过 jwks 设置多个公钥，以实现JWT签名密钥的轮转。
JWT 的验证规则是：</p>
<ol>
<li>JWT 的 payload 中有 issuer 属性，首先通过 issuer 匹配到对应的 istio 中配置的 jwks。</li>
<li>JWT 的 header 中有 kid 属性，第二步在 jwks 的公钥列表中，中找到 kid 相同的公钥。</li>
<li>使用找到的公钥进行 JWT 签名验证。</li>
</ol>
<blockquote>
<p>配置中的 <code>spec.selector</code> 可以省略，这样会直接在整个 namespace 中生效，而如果是在 <code>istio-system</code> 名字空间，该配置将在全集群的所有 sidecar/ingressgateway 上生效！</p>
</blockquote>
<h3 id="6-启用-payload-转发authorization-转发" class="headerLink">
    <a href="#6-%e5%90%af%e7%94%a8-payload-%e8%bd%ac%e5%8f%91authorization-%e8%bd%ac%e5%8f%91" class="header-mark"></a>6. 启用 Payload 转发/Authorization 转发</h3><p>默认情况下，Istio 在完成了身份验证之后，会去掉 Authorization 请求头再进行转发。
这将导致我们的后端服务获取不到对应的 Payload，无法判断 End User 的身份。
因此我们需要启用 Istio 的 Authorization 请求头的转发功能，在前述的 <code>RequestAuthentication</code> yaml 配置中添加一个参数就行：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;security.istio.io/v1beta1&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;RequestAuthentication&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;jwt-example&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">istio</span><span class="p">:</span><span class="w"> </span><span class="l">ingressgateway</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">jwtRules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">issuer</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;testing@secure.istio.io&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">jwks</span><span class="p">:</span><span class="w"> </span><span class="p">|</span><span class="sd">
</span></span></span><span class="line"><span class="cl"><span class="sd">    {
</span></span></span><span class="line"><span class="cl"><span class="sd">        &#34;keys&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="sd">            {
</span></span></span><span class="line"><span class="cl"><span class="sd">                &#34;e&#34;: &#34;AQAB&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sd">                &#34;kid&#34;: &#34;oyYwZSLCLVVPHdVp0jXIcLNpGn6dMCumlY-6wSenmFo&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sd">                &#34;kty&#34;: &#34;RSA&#34;,
</span></span></span><span class="line"><span class="cl"><span class="sd">                &#34;n&#34;: &#34;t1cKkQqPh8iOv5BhKh7Rx6A2-1ldpO_jczML_0GBKu4X-lHrY8YbJrt29jyAXlWM8vHC7tXsqgUG-WziRD0D8nhnh10XC14SeH-3mVuBqph-TqhXTWsh9gtAIbeUHJjEI4I79QK4_wquPHHIGZBQDQQnuMh6vAS3VaUYJdEIoKvUBnAyY35kJZgyJSbrxLsEExL2zujUD_OY-_In2bq_3rFtDGNlgHyC7Gu2zXSXvfOA4O5m9BBXOc7eEqj7PoOKNaTxLN3YcuRtgR6NIXL4KLb6oyvIzoeiprt4-9q7sc3Dnkc5EV9kwWlEW2DHzhP6VYca0WXIIXc53U1AM3ewxw&#34;
</span></span></span><span class="line"><span class="cl"><span class="sd">            }
</span></span></span><span class="line"><span class="cl"><span class="sd">        ]
</span></span></span><span class="line"><span class="cl"><span class="sd">    }</span><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="c"># ===================== 添加如下参数===========================</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">forwardOriginalToken</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">  </span><span class="c"># 转发 Authorization 请求头</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>加了转发后，流程图如下（需要 mermaid 渲染）：</p>
<div class="mermaid" id="id-1"></div>
<h3 id="7-设定强制认证规则" class="headerLink">
    <a href="#7-%e8%ae%be%e5%ae%9a%e5%bc%ba%e5%88%b6%e8%ae%a4%e8%af%81%e8%a7%84%e5%88%99" class="header-mark"></a>7. 设定强制认证规则</h3><p>Istio 的 JWT 验证规则，默认情况下会直接忽略不带 Authorization 请求头（即 JWT）的流量，因此这类流量能直接进入网格内部。
通常这是没问题的，因为没有 Authorization 的流量即使进入到内部，也会因为无法通过 payload 判别身份而被拒绝操作。
如果需要禁止不带 JWT 的流量，就需要额外配置 AuthorizationPolicy 策略。</p>
<p>比如拒绝任何 JWT 无效的请求（包括 Authorization 的情况）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">security.istio.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">AuthorizationPolicy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;deny-requests-with-out-authorization&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">istio</span><span class="p">:</span><span class="w"> </span><span class="l">ingressgateway</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">action</span><span class="p">:</span><span class="w"> </span><span class="l">DENY</span><span class="w"> </span><span class="c"># 拒绝</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">from</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">source</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">notRequestPrincipals</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;*&#34;</span><span class="p">]</span><span class="w">  </span><span class="c"># 不存在任何请求身份（Principal）的 requests</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>如果仅希望强制要求对部分 path 的请求必须带有 Authorization Header，可以这样设置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">apiVersion</span><span class="p">:</span><span class="w"> </span><span class="l">security.istio.io/v1beta1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">kind</span><span class="p">:</span><span class="w"> </span><span class="l">AuthorizationPolicy</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">metadata</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;deny-requests-with-out-authorization&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">namespace</span><span class="p">:</span><span class="w"> </span><span class="l">istio-system</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">spec</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">selector</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">matchLabels</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">istio</span><span class="p">:</span><span class="w"> </span><span class="l">ingressgateway</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">action</span><span class="p">:</span><span class="w"> </span><span class="l">DENY</span><span class="w"> </span><span class="c"># 拒绝</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">rules</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span>- <span class="nt">from</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">source</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">notRequestPrincipals</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;*&#34;</span><span class="p">]</span><span class="w">  </span><span class="c"># 不存在任何请求身份（Principal）的 requests</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c"># 仅强制要求如下 host/path 相关的请求，必须带上 JWT token</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">to</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span>- <span class="nt">operation</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hosts</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;another-host.com&#34;</span><span class="p">]</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">paths</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">&#34;/headers&#34;</span><span class="p">]</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>注意这两个 Istio CR 返回的错误码是不同的：</p>
<ul>
<li><strong>RequestsAuthentication 验证失败的请求，Istio 会返回 401 状态码</strong>。</li>
<li><strong>AuthorizationPolicy 验证失败的请求，Istio 会返回 403 状态码</strong>。</li>
</ul>
<p>这会导致在使用 AuthorizationPolicy 禁止了不带 Authorization 头的流量后，这类请求会直接被返回 403，在使用 RESTful API 时，这种情况可能会造成问题。</p>
<h3 id="8-response-headers" class="headerLink">
    <a href="#8-response-headers" class="header-mark"></a>8. Response Headers</h3><p>RequestsAuthentication 不支持自定义响应头信息，这导致对于前后端分离的 Web API 而言，
一旦 JWT 失效，Istio 会直接将 401 返回给前端 Web 页面。
因为响应头中不包含 <code>Access-Crontrol-Allow-Origin</code>，响应将被浏览器拦截！</p>
<p>这可能需要通过 EnvoyFilter 自定义响应头，添加跨域信息。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://auth0.com/docs/tokens/references/jwks-properties" target="_blank" rel="noopener noreffer">JSON Web Key Set Properties - Auth0</a></li>
<li><a href="https://tools.ietf.org/html/rfc7517" target="_blank" rel="noopener noreffer">JWK - RFC7517</a></li>
<li><a href="https://github.com/istio/istio/tree/master/security/tools/jwt/samples" target="_blank" rel="noopener noreffer">Sample JWT and JWKS data for demo - Istio Security</a></li>
<li><a href="https://istio.io/docs/tasks/security/authentication/authn-policy/#end-user-authentication" target="_blank" rel="noopener noreffer">End User Authentication - Istio</a></li>
<li><a href="https://istio.io/docs/reference/config/security/jwt/" target="_blank" rel="noopener noreffer">JWTRule - Istio</a></li>
<li><a href="https://jwt.io/" target="_blank" rel="noopener noreffer">jwt.io - 动态生成 jwt</a></li>
</ul>]]></content></entry><entry><title type="html">Linux网络学习笔记（二）：域名解析(DNS)——以 CoreDNS 为例</title><link href="https://thiscute.world/posts/about-dns-protocol/"/><id>https://thiscute.world/posts/about-dns-protocol/</id><author><name>ryan4yin</name></author><published>2020-03-29T15:49:23+08:00</published><updated>2020-03-29T15:49:23+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，观点不一定正确. 适合对 Kubernetes 有一定了解的同学。</p>
</blockquote>
<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>最近一直在学习 Kubernetes，但是手头没有个自有域名，要测试 ingress 就比较麻烦，每次都是手动改 hosts 文件。。</p>
<p>今天突然想到——K8s 内部就是用 DNS 做的服务发现，我为啥不自己弄一个 DNS 服务器呢？然后所有节点的 DNS 都配成它，这样有需要时直接改这个 DNS 服务器的配置就行， 一劳永逸。</p>
<p>我首先想到的是 群晖/Windows Server 自带的那种自带图形化界面的 DNS 服务器，但是这俩都是平台特定的。</p>
<p>网上搜一圈没找到类似带 UI 的 DNS 工具，搜到的 powerdns/bind 相比 coredns 也没看出啥优势来，所以决定就用 CoreDNS，刚好熟悉一下它的具体使用。</p>
<p>不过讲 CoreDNS 前，我们还是先来熟悉一下 DNS 的基础概念吧。</p>
<h2 id="一dns-是个啥" class="headerLink">
    <a href="#%e4%b8%80dns-%e6%98%af%e4%b8%aa%e5%95%a5" class="header-mark"></a>一、DNS 是个啥？</h2><blockquote>
<p>没有写得很清楚，不适合初学。建议先通过别的资料熟悉下 DNS 基础。</p>
</blockquote>
<p>DNS，即域名系统（Domain Name System），是一项负责将一个 human readable 的所谓域名，转换成一个 ip 地址的协议。</p>
<p>而域名的好处，有如下几项：</p>
<ol>
<li>域名对人类更友好，可读的字符串比一串 ip 数字可好记多了。</li>
<li>一个域名可以对应多个 ip，可实现所谓的负载均衡。</li>
<li>多个域名可以对应同一个 ip，以不同的域名访问该 ip，能访问不同的应用。（通过 nginx 做代理实现）</li>
</ol>
<p>DNS 协议是一个基于 UDP 的应用层协议，它默认使用 53 端口进行通信。
应用程序通常将 DNS 解析委派给操作系统的 DNS Resolver 来执行，程序员对它几乎无感知。</p>
<p>DNS 虽然说一般只用来查个 ip 地址，但是它提供的记录类型还蛮多的，主要有如下几种：</p>
<ol>
<li><code>A</code> 记录：它记录域名与 IPv4 地址的对应关系。目前用的最多的 DNS 记录就是这个。</li>
<li><code>AAAA</code> 记录：它对应的是 IPv6，可以理解成新一代的 <code>A</code> 记录。以后会用的越来越多的。</li>
<li><code>NS</code> 记录：记录 DNS 域对应的权威服务器<strong>域名</strong>，权威服务器域名必须要有对应的 <code>A</code> 记录。
<ul>
<li>通过这个记录，可以将子域名的解析分配给别的 DNS 服务器。</li>
</ul>
</li>
<li><code>CNAME</code> 记录: 记录域名与另一个域名的对应关系，用于给域名起别名。这个用得也挺多的。</li>
<li><code>MX</code> 记录：记录域名对应的邮件服务器域名，邮件服务器的域名必须要有对应的 <code>A</code> 记录。</li>
<li><code>SRV</code> 记录：SRV 记录用于提供服务发现，看名字也能知道它和 SERVICE 有关。
<ul>
<li>SRV 记录的内容有固定格式：<code>优先级 权重 端口 目标地址</code>，例如 <code>0 5 5060 sipserver.example.com</code></li>
<li>主要用于企业域控(AD)、微服务发现（Kubernetes）</li>
</ul>
</li>
</ol>
<p>上述的所有 DNS 记录，都是属于将域名解析为 IP 地址，或者另一个域名，这被称做** DNS 正向解析**。
除了这个正向解析外，还有个非常冷门的<strong>反向解析</strong>，基本上只在设置邮件服务器时才会用到。（Kubernetes 可能也有用到）</p>
<p>反向解析主要的记录类型是：<strong><code>PTR</code> 记录</strong>，它提供将 IP 地址反向解析为域名的功能。
而且因为域名是从右往左读的（最右侧是根, <code>www.baidu.com.</code>），而 IP 的网段（如 <code>192.168.0.0/16</code>）刚好相反，是左边优先。
因此 PTR 记录的“域名”必须将 IP 地址反着写，末尾再加上 <code>.in-addr.arpa.</code> 表示这是一个反向解析的域名。（ipv6 使用 <code>ip6.arpa.</code>）
拿 baidu.com 的邮件服务器测试一下：
<figure><a class="lightgallery" href="/images/about-dns-protocol/968138-20200207101308247-1165339332.webp" title="/images/about-dns-protocol/968138-20200207101308247-1165339332.webp" data-thumbnail="/images/about-dns-protocol/968138-20200207101308247-1165339332.webp" data-sub-html="<h2>PTR 记录查询</h2>">
        <img
            class="lazyload"
            data-src="/images/about-dns-protocol/968138-20200207101308247-1165339332.webp"
            data-srcset="/images/about-dns-protocol/968138-20200207101308247-1165339332.webp, /images/about-dns-protocol/968138-20200207101308247-1165339332.webp 1.5x, /images/about-dns-protocol/968138-20200207101308247-1165339332.webp 2x"
            data-sizes="auto"
            alt="/images/about-dns-protocol/968138-20200207101308247-1165339332.webp">
    </a><figcaption class="image-caption">PTR 记录查询</figcaption>
    </figure></p>
<p>其他还有些 <code>TXT</code>、<code>CAA</code> 等奇奇怪怪的记录，就用到的时候自己再查了。</p>
<h2 id="二域名的分层结构" class="headerLink">
    <a href="#%e4%ba%8c%e5%9f%9f%e5%90%8d%e7%9a%84%e5%88%86%e5%b1%82%e7%bb%93%e6%9e%84" class="header-mark"></a>二、域名的分层结构</h2><p>国际域名系统被分成四层：</p>
<ol>
<li><strong>根域（Root Zone）</strong>：所有域名的根。
<ul>
<li>根域名服务器负责解析<code>顶级域名</code>，给出顶级域名的 DNS 服务器地址。</li>
<li>全世界仅有十三组根域名服务器，这些服务器的 ip 地址基本不会变动。</li>
<li>它的域名是 &ldquo;&quot;，空字符串。而它的**全限定域名（FQDN）**是 <code>.</code>，因为 FQDN 总是以 <code>.</code> 结尾。（FQDN 在后面解释，可暂时忽略）</li>
</ul>
</li>
<li><strong>顶级域（Top Level Domains, TLD）</strong>：<code>.com</code> <code>.cn</code> 等国际、国家级的域名
<ul>
<li>顶级域名服务器负责解析<code>次级域名</code>，给出次级域名的 DNS 服务器地址。</li>
<li>每个顶级域名都对应各自的服务器，它们之间是完全独立的。<code>.cn</code> 的域名解析仅由 <code>.cn</code> 顶级域名服务器提供。</li>
<li>目前国际 DNS 系统中已有上千个 TLD，包括中文「.我爱你」甚至藏文域名，详细列表参见 <a href="http://www.iana.org/domains/root/db" target="_blank" rel="noopener noreffer">IANA TLD 数据库</a></li>
<li>除了国际可用的 TLD，还有一类类似「内网 IP 地址」的“私有 TLD”，最常见的比如  xxx.local xxx.lan，被广泛用在集群通信中。后面详细介绍</li>
</ul>
</li>
<li><strong>次级域（Second Level Domains）</strong>：这个才是个人/企业能够买到的域名，比如 <code>baidu.com</code>
<ul>
<li>每个次级域名都有一到多个权威 DNS 服务器，这些 DNS 服务器会以 NS 记录的形式保存在对应的顶级域名（TLD）服务器中。</li>
<li>权威域名服务器则负责给出最终的解析结果：ip 地址(A 记录 )，另一个域名（CNAME 记录）、另一个 DNS 服务器（NS 记录）等。</li>
</ul>
</li>
<li><strong>子域（Sub Domians）</strong>：<code>*.baidu.com</code> 统统都是 <code>baidu.com</code> 的子域。
<ul>
<li>每一个子域都可以有自己独立的权威 DNS 服务器，这通过在子域中添加 NS 记录实现。</li>
</ul>
</li>
</ol>
<p>普通用户通常是通过域名提供商如阿里云购买的次级域名，接下来我们以 <code>rea.ink</code> 为例介绍域名的购买到可用的整个流程。</p>
<p>域名的购买与使用流程：</p>
<ol>
<li>你在某域名提供商处购买了一个域名 <code>rea.ink</code></li>
<li>域名提供商向 <code>.ink</code> 对应的顶级域名服务器中插入一条以上的 NS 记录，指向它自己的次级 DNS 服务器，如 <code>dns25.hichina.com.</code>
<ul>
<li>阿里云会向 TLD 中插入几条 NS 记录，指向阿里云的次级 DNS 服务器（如 <code>vip1.alidns.com</code>）。</li>
</ul>
</li>
<li>你在该域名提供商的 DNS 管理界面中添加 <code>A</code> 记录，值为你的服务器 IP。</li>
<li>OK 现在 ping 一下 <code>rea.ink</code>，就会发现它已经解析到你自己的服务器了。</li>
</ol>
<p>上述流程中忽略了我大天朝的特殊国情——备案，勿介意。</p>
<h2 id="三dns-递归解析器在浏览器中输入域名后发生了什么" class="headerLink">
    <a href="#%e4%b8%89dns-%e9%80%92%e5%bd%92%e8%a7%a3%e6%9e%90%e5%99%a8%e5%9c%a8%e6%b5%8f%e8%a7%88%e5%99%a8%e4%b8%ad%e8%be%93%e5%85%a5%e5%9f%9f%e5%90%8d%e5%90%8e%e5%8f%91%e7%94%9f%e4%ba%86%e4%bb%80%e4%b9%88" class="header-mark"></a>三、DNS 递归解析器：在浏览器中输入域名后发生了什么？</h2><p>下面的图片拷贝自 Amazon Aws 文档，它展示了在不考虑任何 DNS 缓存的情况下，一次 Web 请求的经过，详细描绘了 DNS 解析的部分。</p>
<p><figure><a class="lightgallery" href="/images/about-dns-protocol/968138-20200205165225054-57338322.webp" title="/images/about-dns-protocol/968138-20200205165225054-57338322.webp" data-thumbnail="/images/about-dns-protocol/968138-20200205165225054-57338322.webp" data-sub-html="<h2>DNS 解析流程</h2>">
        <img
            class="lazyload"
            data-src="/images/about-dns-protocol/968138-20200205165225054-57338322.webp"
            data-srcset="/images/about-dns-protocol/968138-20200205165225054-57338322.webp, /images/about-dns-protocol/968138-20200205165225054-57338322.webp 1.5x, /images/about-dns-protocol/968138-20200205165225054-57338322.webp 2x"
            data-sizes="auto"
            alt="/images/about-dns-protocol/968138-20200205165225054-57338322.webp">
    </a><figcaption class="image-caption">DNS 解析流程</figcaption>
    </figure></p>
<p>其中的第 3 4 5 步按顺序向前面讲过的根域名服务器、顶级域名服务器、权威域名服务器发起请求，以获得下一个 DNS 服务器的信息。这很清晰。</p>
<p>图中当前还没介绍的部分，是紫色的 <code>DNS Resolver</code>(域名解析器)，也叫 <code>Recursive DNS resolver</code>（<strong>DNS 递归解析器</strong>）。
它本身只负责递归地请求 3 4 5 步中的上游服务器，然后把获取的最终结果返回给客户端，同时将记录缓存到本地以加快解析速度。</p>
<p>这个 DNS 解析器，其实就是所谓的<strong>公共 DNS 服务器</strong>：Google 的 <code>8.8.8.8</code>，国内著名的 <code>114.114.114.114</code>。</p>
<p>这些公共 DNS 用户量大，缓存了大量的 DNS 记录，有效地降低了上游 DNS 服务器的压力，也加快了网络上的 DNS 查询速度。</p>
<p>接下来使用 <code>dig +trace baidu.com</code> 复现一下上述的查询流程（这种情况下 dig 自己就是一个 DNS 递归解析器）：</p>
<p><figure><a class="lightgallery" href="/images/about-dns-protocol/968138-20200207101817456-1276700345.webp" title="/images/about-dns-protocol/968138-20200207101817456-1276700345.webp" data-thumbnail="/images/about-dns-protocol/968138-20200207101817456-1276700345.webp" data-sub-html="<h2>dig &#43;trace baidu.com</h2>">
        <img
            class="lazyload"
            data-src="/images/about-dns-protocol/968138-20200207101817456-1276700345.webp"
            data-srcset="/images/about-dns-protocol/968138-20200207101817456-1276700345.webp, /images/about-dns-protocol/968138-20200207101817456-1276700345.webp 1.5x, /images/about-dns-protocol/968138-20200207101817456-1276700345.webp 2x"
            data-sizes="auto"
            alt="/images/about-dns-protocol/968138-20200207101817456-1276700345.webp">
    </a><figcaption class="image-caption">dig +trace baidu.com</figcaption>
    </figure></p>
<p>另外前面有讲过 DNS 的反向解析，也是同样的层级结构，是从根服务器开始往下查询的，下面拿 baidu 的一个邮件服务器进行测试：</p>
<p><figure><a class="lightgallery" href="/images/about-dns-protocol/968138-20200207102331250-71048478.webp" title="/images/about-dns-protocol/968138-20200207102331250-71048478.webp" data-thumbnail="/images/about-dns-protocol/968138-20200207102331250-71048478.webp" data-sub-html="<h2>反向解析</h2>">
        <img
            class="lazyload"
            data-src="/images/about-dns-protocol/968138-20200207102331250-71048478.webp"
            data-srcset="/images/about-dns-protocol/968138-20200207102331250-71048478.webp, /images/about-dns-protocol/968138-20200207102331250-71048478.webp 1.5x, /images/about-dns-protocol/968138-20200207102331250-71048478.webp 2x"
            data-sizes="auto"
            alt="/images/about-dns-protocol/968138-20200207102331250-71048478.webp">
    </a><figcaption class="image-caption">反向解析</figcaption>
    </figure></p>
<blockquote>
<p>dig 工具未来可能会被 drill 取代。</p>
</blockquote>
<h3 id="dns-泛解析通配符-" class="headerLink">
    <a href="#dns-%e6%b3%9b%e8%a7%a3%e6%9e%90%e9%80%9a%e9%85%8d%e7%ac%a6-" class="header-mark"></a>DNS 泛解析通配符 <code>*</code></h3><p>DNS 记录允许使用通配符 <code>*</code>，并且该通配符可匹配任意级数的子域！！！比如 <code>*.example.com</code> 就可以匹配所有的一二三四级域名等等，<strong>但是无法匹配 <code>example.com</code> 本身！</strong></p>
<h3 id="ttltime-to-live" class="headerLink">
    <a href="#ttltime-to-live" class="header-mark"></a>TTL（Time To Live）</h3><p>上面讲了<strong>公共 DNS 服务器</strong>通过缓存技术，降低了上游 DNS 服务器的压力，也加快了网络上的 DNS 查询速度。</p>
<p>可缓存总得有个过期时间吧！为了精确地控制 DNS 记录的过期时间，每条 DNS 记录都要求设置一个时间属性——TTL，单位为秒。这个时间可以自定义。</p>
<p>任何一条 DNS 缓存，在超过过期时间后都必须丢弃！
另外在没超时的时候，DNS 缓存也可以被主动或者被动地刷新。</p>
<h2 id="四本地-dns-服务器与私有-dns-域" class="headerLink">
    <a href="#%e5%9b%9b%e6%9c%ac%e5%9c%b0-dns-%e6%9c%8d%e5%8a%a1%e5%99%a8%e4%b8%8e%e7%a7%81%e6%9c%89-dns-%e5%9f%9f" class="header-mark"></a>四、本地 DNS 服务器与私有 DNS 域</h2><p>这类服务器只在当前局域网内有效，是一个私有的 DNS 服务器，企业常用。一般通过 DHCP 或者手动配置的方式，使内网的服务器都默认使用局域网 DNS 服务器进行解析。该服务器可以只解析自己的私有 DNS 域，而将其他 DNS 域的解析 forward 到公网 DNS 解析器去。</p>
<p>这个私有 DNS 域，会覆盖掉公网的同名域(如果公网上有这个域的话)。
私有 dns 域也可使用公网不存在的 TLD，比如 xxx.local xxx.lan 等。vmware vcenter 就默认使用 vsphere.local 作为它的 sso (单点登录)系统的域名。kubernetes 默认使用 <code>svc.cluster.local</code> 作为集群内部域名。</p>
<p>私有 DNS 域的选择，参见 <a href="https://www.cnblogs.com/kirito-c/p/12624815.html" target="_blank" rel="noopener noreffer">DNS 私有域的选择：internal.xxx.com xxx.local 还是 xxx.zone？</a></p>
<p>局域网 DNS 服务器的规模与层级，视局域网的大小而定。一般小公司一个就行，要容灾设三个副本也够了。</p>
<p>以 CoreDNS 为例，局域网 DNS 服务器也可以被设置成一个 DNS Resolver，可以设置只转发特定域名的 DNS 解析。这叫将某个域设为「转发区域」。</p>
<h2 id="五操作系统的-dns-解析器" class="headerLink">
    <a href="#%e4%ba%94%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f%e7%9a%84-dns-%e8%a7%a3%e6%9e%90%e5%99%a8" class="header-mark"></a>五、操作系统的 DNS 解析器</h2><p>应用程序实际上都是调用的操作系统的 DNS Resolver 进行域名解析的。在 Linux 中 DNS Resolver 由 glibc/musl 提供，配置文件为 <code>/etc/resolv.conf</code>。</p>
<p>比如 Python 的 DNS 解析，就来自于标准库的 socket 包，这个包只是对底层 c 语言库的一个简单封装。</p>
<p>基本上只有专门用于网络诊断的 DNS 工具包，才会自己实现 DNS 协议。</p>
<h3 id="1-hosts-文件" class="headerLink">
    <a href="#1-hosts-%e6%96%87%e4%bb%b6" class="header-mark"></a>1. hosts 文件</h3><p>操作系统中还有一个特殊文件：Linux 中的 <code>/etc/hosts</code> 和 Windows 中的 <code>C:\Windows\System32\drivers\etc\hosts</code></p>
<p>系统中的 DNS resolver 会首先查看这个 <code>hosts</code> 文件中有没有该域名的记录，如果有就直接返回了。没找到才会去查找本地 DNS 缓存、别的 DNS 服务器。</p>
<p>只有部分专门用于网络诊断的应用程序（e.g. dig）不会依赖 OS 的 DNS 解析器，因此这个 <code>hosts</code> 会失效。<code>hosts</code> 对于绝大部分程序都有效。</p>
<blockquote>
<p>移动设备上 hosts 可能会失效，部分 app 会绕过系统，使用新兴的 HTTPDNS 协议进行 DNS 解析。</p>
</blockquote>
<h3 id="2-httpdns" class="headerLink">
    <a href="#2-httpdns" class="header-mark"></a>2. HTTPDNS</h3><p>传统的 DNS 协议因为使用了明文的 UDP 协议，很容易被劫持。顺应移动互联网的兴起，目前一种新型的 DNS 协议——HTTPDNS 应用越来越广泛，国内的阿里云腾讯云都提供了这项功能。</p>
<p>HTTPDNS 通过 HTTP 协议直接向权威 DNS 服务器发起请求，绕过了一堆中间的 DNS 递归解析器。好处有二：</p>
<ol>
<li>权威 DNS 服务器能直接获取到客户端的真实 IP（而不是某个中间 DNS 递归解析器的 IP），能实现就近调度。</li>
<li>因为是直接与权威 DNS 服务器连接，避免了 DNS 缓存污染的问题。</li>
</ol>
<p>HTTPDNS 协议需要程序自己引入 SDK，或者直接请求 HTTP API。</p>
<h3 id="3-默认-dns-服务器" class="headerLink">
    <a href="#3-%e9%bb%98%e8%ae%a4-dns-%e6%9c%8d%e5%8a%a1%e5%99%a8" class="header-mark"></a>3. 默认 DNS 服务器</h3><p>操作系统的 DNS 解析器通常会允许我们配置多个上游 Name Servers，比如 Linux 就是通过 <code>/etc/resolv.conf</code> 配置 DNS 服务器的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">$ cat /etc/resolv.conf 
</span></span><span class="line"><span class="cl">nameserver 8.8.8.8
</span></span><span class="line"><span class="cl">nameserver 8.8.4.4
</span></span><span class="line"><span class="cl">search lan
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>不过现在这个文件基本不会手动修改了，各 Linux 发行版都推出了自己的网络配置工具，由这些工具自动生成 Linux 的各种网络配置，更方便。
比如 Ubuntu 就推荐使用 netplan 工具进行网络设置。</p>
</blockquote>
<blockquote>
<p>Kubernetes 就是通过使用容器卷映射的功能，修改 /etc/resolv.conf，使集群的所有容器都使用集群 DNS 服务器（CoreDNS）进行 DNS 解析。</p>
</blockquote>
<p>通过重复使用 <code>nameserver</code> 字段，可以指定多个 DNS 服务器（Linux 最多三个）。DNS 查询会按配置中的顺序选用 DNS 服务器。
**仅在靠前的 DNS 服务器没有响应（timeout）时，才会使用后续的 DNS 服务器！所以指定的服务器中的 DNS 记录最好完全一致！！！**不要把第一个配内网 DNS，第二个配外网！！！</p>
<h3 id="4-dns-搜索域" class="headerLink">
    <a href="#4-dns-%e6%90%9c%e7%b4%a2%e5%9f%9f" class="header-mark"></a>4. DNS 搜索域</h3><p>上一小节给出的 <code>/etc/resolv.conf</code> 文件内容的末尾，有这样一行: <code>search lan</code>，它指定的，是所谓的 DNS 搜索域。</p>
<p>讲到 <code>DNS 搜索域</code>，就不得不提到一个名词：全限定域名（Full Qulified Domain Name, FQDN），即一个域名的完整名称，<code>www.baidu.com</code>。</p>
<p>一个普通的域名，有下列四种可能：</p>
<ol>
<li><code>www.baidu.com.</code>: 末尾的 <code>.</code> 表示根域，说明 <code>www.baidu.com</code> 是一个 FQDN，因此不会使用搜索域！</li>
<li><code>www.baidu.com</code>: 末尾没 <code>.</code>，但是域名包含不止一个 <code>.</code>。首先当作 FQDN 进行查询，没查找再按顺序在各搜索域中查询。
<ul>
<li><code>/etc/resolv.conf</code> 的 <code>options</code> 参数中，可以指定域名中包含 <code>.</code> 的临界个数，默认是 1.</li>
</ul>
</li>
<li><code>local</code>: 不包含 <code>.</code>，被当作 <code>host</code> 名称，非 FQDN。首先在 <code>/etc/hosts</code> 中查找，没找到的话，再按顺序在各搜索域中查找。</li>
</ol>
<blockquote>
<p>上述搜索顺序可以通过 <code>host -v &lt;domain-name&gt;</code> 进行测试，该命令会输出它尝试过的所有 FQDN。
修改 <code>/etc/resolv.conf</code> 中的 <code>search</code> 属性并测试，然后查看输出。</p>
</blockquote>
<p>就如上面说例举的，在没有 <code>DNS 搜索域</code> 这个东西的条件下，我们访问任何域名，都必须输入一个全限定域名 FQDN。
有了搜索域我们就可以稍微偷点懒，省略掉域名的一部分后缀，让 DNS Resolver 自己去在各搜索域中搜索。</p>
<p>在 Kubernetes 中就使用到了搜索域，k8s 中默认的域名 FQDN 是 <code>service.namespace.svc.cluster.local</code>，
但是对于 default namespace 中的 service，我们可以直接通过 <code>service</code> 名称查询到它的 IP。
对于其他名字空间中的 service，也可以通过 <code>service.namespace</code> 查询到它们的 IP，不需要给出 FQDN。</p>
<p>Kubernetes 中 <code>/etc/resolv.conf</code> 的示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">nameserver 10.43.0.10
</span></span><span class="line"><span class="cl">search default.svc.cluster.local svc.cluster.local cluster.local
</span></span><span class="line"><span class="cl">options ndots:5
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到 k8s 设置了一系列的搜索域，并且将 <code>.</code> 的临界值设为了 5。
也就是少于 5 个 dots 的域名，都首先当作非 FQDN 看待，优先在搜索域里面查找。</p>
<p>该配置文件的详细描述参见 <a href="http://man7.org/linux/man-pages/man5/resolv.conf.5.html" target="_blank" rel="noopener noreffer">manpage - resolv.conf</a>，或者在 Linux 中使用 <code>man resolv.conf</code> 命令查看。</p>
<h2 id="六dns-诊断的命令行工具" class="headerLink">
    <a href="#%e5%85%addns-%e8%af%8a%e6%96%ad%e7%9a%84%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%b7%a5%e5%85%b7" class="header-mark"></a>六、DNS 诊断的命令行工具</h2><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">dig +trace baidu.com  <span class="c1"># 诊断 dns 的主要工具，非常强大</span>
</span></span><span class="line"><span class="cl">host -a baidu.com  <span class="c1"># host 基本就是 dig 的弱化版，不过 host 有个有点就是能打印出它测试过的所有 FQDN</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">nslookup baidu.com <span class="c1"># 和 host 没啥大差别，多个交互式查询不过一般用不到</span>
</span></span><span class="line"><span class="cl">whois baidu.com <span class="c1"># 查询域名注册信息，内网诊断用不到</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>详细的使用请 <code>man dig</code></p>
<h2 id="七coredns-的使用" class="headerLink">
    <a href="#%e4%b8%83coredns-%e7%9a%84%e4%bd%bf%e7%94%a8" class="header-mark"></a>七、CoreDNS 的使用</h2><p>主流的本地 DNS 服务器中，提供 UI 界面的有 Windows DNS Server 和群晖 DNS Server，很方便，不过这两个都是操作系统绑定的。</p>
<p>开源的 DNS 服务器里边儿，BIND 好像是最有名的，各大 Linux 发行版自带的 <code>dig/host/nslookup</code>，最初都是 Bind 提供的命令行工具。
不过为了一举两得（DNS+K8s），咱还是直接学习 CoreDNS 的使用。</p>
<p>CoreDNS 最大的特点是灵活，可以很方便地给它编写插件以提供新功能。功能非常强大，相比传统 DNS 服务器，它非常“现代化”。在 K8s 中它被用于提供服务发现功能。</p>
<p>接下来以 CoreDNS 为例，讲述如何配置一个 DNS 服务器，添加私有的 DNS 记录，并设置转发规则以解析公网域名。</p>
<h3 id="1-配置文件corefile" class="headerLink">
    <a href="#1-%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6corefile" class="header-mark"></a>1. 配置文件：Corefile</h3><p>CoreDNS 因为是 Go 语言写的，编译结果是单个可执行文件，它默认以当前文件夹下的 Corefile 为配置文件。以 kubernetes 中的 Corefile 为例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">.:53 {
</span></span><span class="line"><span class="cl">    errors  # 启用错误日志
</span></span><span class="line"><span class="cl">    health  # 启用健康检查 api
</span></span><span class="line"><span class="cl">    ready  # 启用 readiness 就绪 api
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    # 启用 kubernetes 集群支持，详见 https://coredns.io/plugins/kubernetes/
</span></span><span class="line"><span class="cl">    # 此插件只处理 cluster.local 域，以及 PTR 解析
</span></span><span class="line"><span class="cl">    kubernetes cluster.local in-addr.arpa ip6.arpa {
</span></span><span class="line"><span class="cl">      pods insecure
</span></span><span class="line"><span class="cl">      upstream  # 
</span></span><span class="line"><span class="cl">      fallthrough in-addr.arpa ip6.arpa  # 向下传递 DNS 反向查询
</span></span><span class="line"><span class="cl">      ttl 30  # 过期时间
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">    prometheus :9153  # 启用 prometheus metrics 支持
</span></span><span class="line"><span class="cl">    forward . 114.114.114.114 19.29.29.29 # 将非集群域名的 DNS 请求，转发给公网 DNS 服务器。
</span></span><span class="line"><span class="cl">    cache 30  # 启用前端缓存，缓存的 TTL 设为 30
</span></span><span class="line"><span class="cl">    loop    # 检测并停止死循环解析
</span></span><span class="line"><span class="cl">    reload  # 支持动态更新 Corefile
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    # 随机化 A/AAAA/MX 记录的顺序以实现负载均衡。
</span></span><span class="line"><span class="cl">    #   因为 DNS resolver 通常使用第一条记录，而第一条记录是随机的。这样客户端的请求就能被随机分配到多个后端。
</span></span><span class="line"><span class="cl">    loadbalance
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>Corefile 首先定义 DNS 域，域后的代码块内定义需要使用的各种插件。**注意这里的插件顺序是没有任何意义的！**插件的调用链是在 CoreDNS 编译时就定义好的，不能在运行时更改。</p>
<p>通过上述配置启动的 CoreDNS 是无状态的，它以 Kubernetes ApiServer 为数据源，CoreDNS 本身只相当于一个查询器/缓存，因此它可以很方便地扩缩容。</p>
<h3 id="2-将-coredns-设置成一个私有-dns-服务器" class="headerLink">
    <a href="#2-%e5%b0%86-coredns-%e8%ae%be%e7%bd%ae%e6%88%90%e4%b8%80%e4%b8%aa%e7%a7%81%e6%9c%89-dns-%e6%9c%8d%e5%8a%a1%e5%99%a8" class="header-mark"></a>2. 将 CoreDNS 设置成一个私有 DNS 服务器</h3><p>现在清楚了 Corefile 的结构，让我们来设计一个通过文件配置 DNS 条目的 Corefile 配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl"># 定义可复用 Block
</span></span><span class="line"><span class="cl">(common) {
</span></span><span class="line"><span class="cl">    log
</span></span><span class="line"><span class="cl">    errors
</span></span><span class="line"><span class="cl">    cache
</span></span><span class="line"><span class="cl">    loop    # 检测并停止死循环解析
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 本地开发环境的 DNS 解析
</span></span><span class="line"><span class="cl">dev-env.local:53 {
</span></span><span class="line"><span class="cl">    import common  # 导入 Block
</span></span><span class="line"><span class="cl">    file dev-env.local { # 从文件 `dev-env.local` 中读取 DNS 数据
</span></span><span class="line"><span class="cl">        reload 30s  # 每 30s 检查一次配置的 Serial，若该值有变更则重载整个 Zone 的配置。
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 本地测试环境
</span></span><span class="line"><span class="cl">test-env.local:53 {
</span></span><span class="line"><span class="cl">    import common
</span></span><span class="line"><span class="cl">    file test-env.local {
</span></span><span class="line"><span class="cl">        reload 30s
</span></span><span class="line"><span class="cl">    }
</span></span><span class="line"><span class="cl">}
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 其他
</span></span><span class="line"><span class="cl">.:53 {
</span></span><span class="line"><span class="cl">    forward . 114.114.114.114  # 解析公网域名
</span></span><span class="line"><span class="cl">    log
</span></span><span class="line"><span class="cl">    errors
</span></span><span class="line"><span class="cl">    cache
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的 Corefile 定义了两个本地域名 <code>dev-env.local</code> 和 <code>test-env.local</code>，它们的 DNS 数据分别保存在 <code>file</code> 指定的文件中。</p>
<p>这个 <code>file</code> 指定的文件和 <code>bind9</code> 一样，都是使用在 <a href="https://tools.ietf.org/html/rfc1035#section-5.3" target="_blank" rel="noopener noreffer">rfc1035</a> 中定义的 Master File 格式，<code>dig</code> 命令输出的就是这种格式的内容。示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">;; 與整個領域相關性較高的設定包括 NS, A, MX, SOA 等標誌的設定處！
</span></span><span class="line"><span class="cl">$TTL    30
</span></span><span class="line"><span class="cl">@                       IN SOA   dev-env.local. devops.dev-env.local. (
</span></span><span class="line"><span class="cl">                                     20200202 ; SERIAL，每次修改此文件，都应该同步修改这个“版本号”，可将它设为修改时间。
</span></span><span class="line"><span class="cl">                                     7200     ; REFRESH
</span></span><span class="line"><span class="cl">                                     600      ; RETRY
</span></span><span class="line"><span class="cl">                                     3600000  ; EXPIRE
</span></span><span class="line"><span class="cl">                                     60)      ; MINIMUM
</span></span><span class="line"><span class="cl">@                       IN NS    dns1.dev-env.local.   ; DNS 伺服器名稱
</span></span><span class="line"><span class="cl">dns1.dev-env.local.    IN A     192.168.23.2         ; DNS 伺服器 IP
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">redis.dev-env.local.         IN A     192.168.23.21
</span></span><span class="line"><span class="cl">mysql.dev-env.local.         IN A     192.168.23.22
</span></span><span class="line"><span class="cl">elasticsearch.dev-env.local. IN A     192.168.23.23
</span></span><span class="line"><span class="cl">ftp                          IN A     192.168.23.25  ; 這是簡化的寫法！
</span></span></code></pre></td></tr></table>
</div>
</div><p>详细的格式说明参见 <a href="http://linux.vbird.org/linux_server/0350dns.php#DNS_master_name" target="_blank" rel="noopener noreffer">鳥哥的 Linux 私房菜 - DNS 正解資料庫檔案的設定</a>
<code>test-env.local</code> 也是一样的格式，根据上面的模板修改就行。这两个配置文件和 Corefile 放在同一个目录下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">root@test-ubuntu:~/dns-server# tree
</span></span><span class="line"><span class="cl">.
</span></span><span class="line"><span class="cl">├── coredns  # coredns binary
</span></span><span class="line"><span class="cl">├── Corefile
</span></span><span class="line"><span class="cl">├── dev-env.local
</span></span><span class="line"><span class="cl">└── test-env.local
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后通过 <code>./coredns</code> 启动 coredns。通过 dig 检验：
<figure><a class="lightgallery" href="/images/about-dns-protocol/968138-20200211182339141-1135337933.webp" title="/images/about-dns-protocol/968138-20200211182339141-1135337933.webp" data-thumbnail="/images/about-dns-protocol/968138-20200211182339141-1135337933.webp" data-sub-html="<h2>DNS 测试</h2>">
        <img
            class="lazyload"
            data-src="/images/about-dns-protocol/968138-20200211182339141-1135337933.webp"
            data-srcset="/images/about-dns-protocol/968138-20200211182339141-1135337933.webp, /images/about-dns-protocol/968138-20200211182339141-1135337933.webp 1.5x, /images/about-dns-protocol/968138-20200211182339141-1135337933.webp 2x"
            data-sizes="auto"
            alt="/images/about-dns-protocol/968138-20200211182339141-1135337933.webp">
    </a><figcaption class="image-caption">DNS 测试</figcaption>
    </figure></p>
<p>可以看到 <code>ftp.dev-env.local</code> 已经被成功解析了。</p>
<h3 id="3-可选插件external-pluginshttpscorednsioexplugins" class="headerLink">
    <a href="#3-%e5%8f%af%e9%80%89%e6%8f%92%e4%bb%b6external-pluginshttpscorednsioexplugins" class="header-mark"></a>3. <a href="https://coredns.io/explugins/" target="_blank" rel="noopener noreffer">可选插件（External Plugins）</a></h3><p>CoreDNS 提供的预编译版本，不包含 <a href="https://coredns.io/explugins/" target="_blank" rel="noopener noreffer">External Plugins</a> 中列出的部分，如果你需要，可以自行修改 <code>plugin.cfg</code>，然后手动编译。</p>
<p>不得不说 Go 语言的编译，比 C 语言是方便太多了。自动拉取依赖，一行命令编译！只要配好 <a href="https://github.com/goproxy/goproxy.cn" target="_blank" rel="noopener noreffer">GOPROXY</a>，启用可选插件其实相当简单。</p>
<h3 id="4-设置-dns-集群" class="headerLink">
    <a href="#4-%e8%ae%be%e7%bd%ae-dns-%e9%9b%86%e7%be%a4" class="header-mark"></a>4. 设置 DNS 集群</h3><p>单台 DNS 服务器的性能是有限的，而且存在单点故障问题。因此在要求高可用或者高性能的情况下，就需要设置 DNS 集群。</p>
<p>虽然说 CoreDNS 本身也支持各种 DNS Zone 传输，主从 DNS 服务器等功能，不过我想最简单的，可能还是直接用 K8s。</p>
<p>直接用 ConfigMap 存配置，通过 Deployment 扩容就行，多方便。</p>
<p>要修改起来更方便，还可以启用可选插件：redis，直接把配置以 json 的形式存在 redis 里，通过 redis-desktop-manager 进行查看与修改。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/06/dns.html" target="_blank" rel="noopener noreffer">DNS 原理入门</a></li>
<li><a href="https://www.cloudflare.com/learning/dns/what-is-dns/" target="_blank" rel="noopener noreffer">What Is DNS? | How DNS Works - Cloudflare</a></li>
<li><a href="https://aws.amazon.com/cn/route53/what-is-dns/?nc1=h_ls" target="_blank" rel="noopener noreffer">What is DNS? - Amazon AWS</a></li>
<li><a href="http://linux.vbird.org/linux_server/0350dns.php#DNS_resolver_whois" target="_blank" rel="noopener noreffer">鸟哥的 Linux 私房菜——主機名稱控制者： DNS 伺服器</a></li>
<li><a href="https://coredns.io/manual/toc/" target="_blank" rel="noopener noreffer">CoreDNS - Manual</a></li>
<li><a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/" target="_blank" rel="noopener noreffer">Kubernetes - DNS for Services and Pods</a></li>
<li><a href="https://kubernetes.io/docs/tasks/administer-cluster/dns-custom-nameservers/" target="_blank" rel="noopener noreffer">Kubernetes - Customizing DNS Service</a></li>
</ul>
]]></content></entry><entry><title type="html">JWT 签名算法 HS256、RS256 及 ES256 及密钥生成</title><link href="https://thiscute.world/posts/jwt-algorithm-key-generation/"/><id>https://thiscute.world/posts/jwt-algorithm-key-generation/</id><author><name>ryan4yin</name></author><published>2020-03-03T14:09:46+08:00</published><updated>2020-03-03T14:09:46+08:00</updated><content type="html"><![CDATA[<h1 id="签名算法" class="headerLink">
    <a href="#%e7%ad%be%e5%90%8d%e7%ae%97%e6%b3%95" class="header-mark"></a>签名算法</h1><p>介绍具体的 JWT 签名算法前，先解释一下签名、摘要/指纹、加密这几个名词的含义：</p>
<ol>
<li>数字签名(Digital Signature): 就和我们日常办理各种手续时需要在文件上签上你自己的名字一样，数字签名的主要用途也是用于身份认证。
<ol>
<li>更准确的讲，数字签名可保证数据的三个特性：真实性（未被伪造）、完整性（不存在缺失）、不可否认性（确实是由你本人认可并签名）</li>
</ol>
</li>
<li>数字摘要(digest)/数字指纹(fingerprint): 指的是数据的 Hash 值。</li>
<li>加密算法：这个应该不需要解释，就是对数据进行加密。。</li>
</ol>
<p>数字签名的具体实现，通常是先对数据进行一次 Hash 摘要(SHA1/SHA256/SHA512 等)，然后再使用非对称加密算法(RSA/ECDSA 等)的私钥对这个摘要进行加密，这样得到的结果就是原始数据的一个签名。</p>
<p>用户在验证数据时，只需要使用公钥解密出 Hash 摘要，然后自己再对数据进行一次同样的摘要，对比两个摘要是否相同即可。</p>
<blockquote>
<p>注意：签名算法是使用私钥加密，确保得到的签名无法被伪造，同时所有人都可以使用公钥解密来验证签名。这和正常的数据加密算法是相反的。（非对称加密算法支持使用密钥对的任何一个加密数据，再用另一个密钥解密）</p>
</blockquote>
<p>因为数字签名多了非对称加密这一步，就能保证只有拥有私钥的人才能生成出正确的数字签名，达到了防止伪造签名的目的。
而数字摘要（Hash）则谁都可以计算出来，通常<strong>由可信方公布数据的 Hash 值</strong>，用户下载数据后，可通过 Hash 值对比来判断数据是否损坏，或者被人调包。</p>
<p>重点在于，Hash 摘要必须由可信方公布出来，否则不能保证安全性。而数字签名可以随数据一起提供，不需要担心被伪造。</p>
<p>JWT 是签名和数据一起提供的，因此必须使用签名才能保证安全性。</p>
<blockquote>
<p>P.S. 在 Android/IOS 开发中，经常会遇到各类 API 或者 APP 商店要求提供 APP 的签名，还指明需要的是 MD5/SHA1 值。
这个地方需要填的 MD5/SHA1 值，实际上只是你「签名证书(=公钥+证书拥有者信息)」的「数字指纹/摘要」，和 JWT 的签名不是一回事。</p>
</blockquote>
<h1 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h1><p>JWT 规范的详细说明请见「参考」部分的链接。这里主要说明一下 JWT 最常见的几种签名算法(JWA)：HS256(HMAC-SHA256) 、RS256(RSA-SHA256) 还有 ES256(ECDSA-SHA256)。</p>
<p>这三种算法都是一种消息签名算法，得到的都只是一段无法还原的签名。区别在于<strong>消息签名</strong>与<strong>签名验证</strong>需要的 「key」不同。</p>
<ol>
<li>HS256 使用同一个「secret_key」进行签名与验证（对称加密）。一旦 secret_key 泄漏，就毫无安全性可言了。
<ul>
<li>因此 HS256 只适合集中式认证，签名和验证都必须由可信方进行。</li>
<li>传统的单体应用广泛使用这种算法，但是请不要在任何分布式的架构中使用它！</li>
</ul>
</li>
<li>RS256 是使用 RSA 私钥进行签名，使用 RSA 公钥进行验证。公钥即使泄漏也毫无影响，只要确保私钥安全就行。
<ul>
<li>RS256 可以将验证委托给其他应用，只要将公钥给他们就行。</li>
</ul>
</li>
<li>ES256 和 RS256 一样，都使用私钥签名，公钥验证。算法速度上差距也不大，但是它的签名长度相对短很多（省流量），并且算法强度和 RS256 差不多。</li>
</ol>
<p>对于单体应用而言，HS256 和 RS256 的安全性没有多大差别。
而对于需要进行多方验证的微服务架构而言，显然只有 RS256/ES256 才能提供足够的安全性。
在使用 RS256 时，只有「身份认证的微服务(auth)」需要用 RSA 私钥生成 JWT，其他微服务使用公开的公钥即可进行签名验证，私钥得到了更好的保护。</p>
<p>更进一步，「JWT 生成」和「JWT 公钥分发」都可以直接委托给第三方的通用工具，比如 <a href="https://github.com/ory/hydra" target="_blank" rel="noopener noreffer">hydra</a>。
甚至「JWT 验证」也可以委托给「API 网关」来处理，应用自身可以把认证鉴权完全委托给外部的平台，而应用自身只需要专注于业务。这也是目前的发展趋势。</p>
<p><a href="https://tools.ietf.org/html/rfc7518" target="_blank" rel="noopener noreffer">RFC 7518 - JSON Web Algorithms (JWA)</a> 中给出的 JWT 算法列表如下：</p>
<pre><code>+--------------+-------------------------------+--------------------+
| &quot;alg&quot; Param  | Digital Signature or MAC      | Implementation     |
| Value        | Algorithm                     | Requirements       |
+--------------+-------------------------------+--------------------+
| HS256        | HMAC using SHA-256            | Required           |
| HS384        | HMAC using SHA-384            | Optional           |
| HS512        | HMAC using SHA-512            | Optional           |
| RS256        | RSASSA-PKCS1-v1_5 using       | Recommended        |
|              | SHA-256                       |                    |
| RS384        | RSASSA-PKCS1-v1_5 using       | Optional           |
|              | SHA-384                       |                    |
| RS512        | RSASSA-PKCS1-v1_5 using       | Optional           |
|              | SHA-512                       |                    |
| ES256        | ECDSA using P-256 and SHA-256 | Recommended+       |
| ES384        | ECDSA using P-384 and SHA-384 | Optional           |
| ES512        | ECDSA using P-521 and SHA-512 | Optional           |
| PS256        | RSASSA-PSS using SHA-256 and  | Optional           |
|              | MGF1 with SHA-256             |                    |
| PS384        | RSASSA-PSS using SHA-384 and  | Optional           |
|              | MGF1 with SHA-384             |                    |
| PS512        | RSASSA-PSS using SHA-512 and  | Optional           |
|              | MGF1 with SHA-512             |                    |
| none         | No digital signature or MAC   | Optional           |
|              | performed                     |                    |
+--------------+-------------------------------+--------------------+

The use of &quot;+&quot; in the Implementation Requirements column indicates
that the requirement strength is likely to be increased in a future
version of the specification.
</code></pre>
<p>目前应该所有 jwt 相关的库都支持 HS256/RS256/ES256 这三种算法。</p>
<p>ES256 使用 ECDSA 进行签名，它的安全性和运算速度目前和 RS256 差距不大，但是拥有更短的签名长度。
对于需要频繁发送的 JWT 而言，更短的长度长期下来可以节约大量流量。</p>
<p>因此更推荐使用 ES256 算法。</p>
<h2 id="使用-openssl-生成-rsaecc-公私钥" class="headerLink">
    <a href="#%e4%bd%bf%e7%94%a8-openssl-%e7%94%9f%e6%88%90-rsaecc-%e5%85%ac%e7%a7%81%e9%92%a5" class="header-mark"></a>使用 OpenSSL 生成 RSA/ECC 公私钥</h2><p>RS256 使用 RSA 算法进行签名，可通过如下命令生成 RSA 密钥：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 1. 生成 2048 位（不是 256 位）的 RSA 密钥</span>
</span></span><span class="line"><span class="cl">openssl genrsa -out rsa-private-key.pem <span class="m">2048</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 通过密钥生成公钥</span>
</span></span><span class="line"><span class="cl">openssl rsa -in rsa-private-key.pem -pubout -out rsa-public-key.pem
</span></span></code></pre></td></tr></table>
</div>
</div><p>ES256 使用 ECDSA 算法进行签名，该算法使用 ECC 密钥，生成命令如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 1. 生成 ec 算法的私钥，使用 prime256v1 曲线（NIST P-256 标准），密钥长度 256 位。（强度大于 2048 位的 RSA 密钥）</span>
</span></span><span class="line"><span class="cl">openssl ecparam -genkey -name prime256v1 -out ecc-private-key.pem
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 通过密钥生成公钥</span>
</span></span><span class="line"><span class="cl">openssl ec -in ecc-private-key.pem -pubout -out ecc-public-key.pem
</span></span></code></pre></td></tr></table>
</div>
</div><p>密钥的使用应该就不需要介绍了，各类语言都有对应 JWT 库处理这些，请自行查看文档。</p>
<p>如果是调试/学习 JWT，需要手动签名与验证的话，推荐使用 <a href="https://jwt.io/" target="_blank" rel="noopener noreffer">jwt 工具网站 - jwt.io</a></p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://tools.ietf.org/html/rfc7518" target="_blank" rel="noopener noreffer">RFC 7518 - JSON Web Algorithms (JWA)</a></li>
<li><a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener noreffer">什么是 JWT &ndash; JSON WEB TOKEN</a></li>
<li><a href="https://jwt.io/" target="_blank" rel="noopener noreffer">jwt 工具网站 - jwt.io</a></li>
<li><a href="https://www.cnblogs.com/langshiquan/p/10701198.html" target="_blank" rel="noopener noreffer">JWT 算法比较</a></li>
</ul>
]]></content></entry><entry><title type="html">2019 年年终总结</title><link href="https://thiscute.world/posts/2019-summary/"/><id>https://thiscute.world/posts/2019-summary/</id><author><name>ryan4yin</name></author><published>2020-01-31T19:19:00+08:00</published><updated>2020-01-31T19:19:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>迟到的年终总结</p>
</blockquote>
<h2 id="闲言碎语" class="headerLink">
    <a href="#%e9%97%b2%e8%a8%80%e7%a2%8e%e8%af%ad" class="header-mark"></a>闲言碎语</h2><p>我是今年六月底到的深圳，运气很好，第一面就面上了现在所在的公司，以下就叫它 W 公司吧。
公司的技术栈也很适合我，在入职到现在的这半年里，我学到了不少知识。</p>
<p>但是运气也差，只有这么一家公司约了我面试，投的其他简历都石沉大海&hellip;</p>
<p>总之，今年尝试参加过两次技术分享，Rancher 的技术沙龙，前几天又去听了 OSChina 的源创会。</p>
<h2 id="技术能力总结" class="headerLink">
    <a href="#%e6%8a%80%e6%9c%af%e8%83%bd%e5%8a%9b%e6%80%bb%e7%bb%93" class="header-mark"></a>技术能力总结</h2><p>我入职后做的是运维开发，主要负责通过 Jenkins Pipeline + Python 进行自动化的测试、构建和部署：</p>
<ol>
<li>测试：指 UI 测试、API 测试、压力测试。单元测试算在构建流程中。</li>
<li>构建：更新依赖-&gt;单元测试-&gt;构建 Library 或镜像
<ul>
<li>公司的内部代码使用分层结构，底层封装了各种第三方包，并实现了一些通用的功能，形成了所谓的<strong>中台</strong>。目前是通过批量任务逐级自下向上构建。</li>
</ul>
</li>
<li>部署：扫描镜像仓库中各镜像，生成最新的 k8s 部署文件，然后进行部署。</li>
</ol>
<p>所以这半年中，我差不多熟悉了自动化运维的工作。主要包括</p>
<ol>
<li>Jenkins Pipeline 的编写，我们基本都是使用 Jenkins 调用 Python 代码来进行具体的构建。
<ul>
<li>公司的构建有很多自己特殊的需求，Jenkins 自带的插件无法满足。</li>
</ul>
</li>
<li>熟悉了 Python 的 subprocess 库，为了远程调用，又熟悉了 fabric（当作 library 用）。</li>
<li>做压测时，熟悉了 locust</li>
<li>因为基本都是通过命令行进行测试、构建，我现在比前后端组还熟悉 csharp/flutter/golang 的 cli&hellip;</li>
<li>学会了 Dockerfile 语法。我们的后端全部都是以容器方式部署的，这个是基本技能。</li>
<li>熟悉并且用上了 Kubernetes. 这东西基本上就是未来了，也将是我的主攻方向。</li>
</ol>
<p>但是，也存在一些问题：</p>
<ol>
<li>对 Linux/网络/vSphere 不够了解，导致每次处理这类问题只会排除法。</li>
<li>对监控/日志/告警不够了解，监控面板一堆参数却看不出问题，日志不知道怎么用 kibana 进行搜索，告警还没配过。。</li>
<li>解决问题的能力还有待提升，考虑总是不够全面，老是出问题。（不能让人放心）</li>
<li>总是想得太多，拖慢了解决问题的速度。（这倒也不能完全算是缺点。）</li>
</ol>
<h2 id="今年在技术上的感受" class="headerLink">
    <a href="#%e4%bb%8a%e5%b9%b4%e5%9c%a8%e6%8a%80%e6%9c%af%e4%b8%8a%e7%9a%84%e6%84%9f%e5%8f%97" class="header-mark"></a>今年在技术上的感受</h2><ol>
<li>Kubernetes 和云原生正在席卷整个互联网/物联网行业。</li>
<li>Kubernetes 目前主要用于 Stateless 应用，那后端的 数据库/缓存/消息服务 要如何做分布式呢？这也是大家关注的重点。</li>
<li>分布式、微服务模式下的<strong>监控(prometheus)、日志分析(elk)、安全、链路追踪(jaeger)</strong>，是运维关注的重点。</li>
<li>服务网格正在走向成熟，Istio 很值得学习和试用。</li>
<li>开源的分布式数据库/云数据库成为越来越多企业的选择，开源的 TiDB（HTAP）和阿里云的 PolarDB（计算存储分离）都应该了解了解。
<ul>
<li>Transaction Processing: <strong>面向交易</strong>，数据的变动(增删改)多，涉及的数据量和计算量(查)少，实时性要求高。</li>
<li>Analytical Processing：<strong>面向分析</strong>，数据的变动少，但涉及的数据量和计算量很多！</li>
<li>HTAP（Hybrid transaction/analytical processing）：混合型数据库，可同时被用于上述两种场景。</li>
</ul>
</li>
<li>Knative/Jenkins-X 这类 Serverless 的 CI/CD 也正在快速发展，需要深入调研。</li>
</ol>
<h2 id="明年的展望" class="headerLink">
    <a href="#%e6%98%8e%e5%b9%b4%e7%9a%84%e5%b1%95%e6%9c%9b" class="header-mark"></a>明年的展望</h2><p>作为一名萌新运维开发，明年显然还要继续在这条路上继续向前。</p>
<p>我明年的任务，第一件，就是优化掉部分自己目前存在的问题（前面有提到），第二呢，就是紧跟技术潮流。重点有下面几项：</p>
<ol>
<li>充实自己网络部分欠缺的知识，尤其是 DNS 解析(CoreDNS)和 NAT(iptables)这俩玩意儿。</li>
<li>学习数据库组件的使用和性能调优：MySQL/Redis/ElasticSearch/MongoDB，另外熟悉 PostgreSQL 和分布式数据库 TiDB/Vitess</li>
<li>Kubernetes/Istio</li>
<li>Kubernetes 上的 CI/CD：Knative, <a href="https://github.com/stefanprodan/gitops-istio" target="_blank" rel="noopener noreffer">Istio-GitOps</a></li>
<li>监控告警：Prometheus/Grafana</li>
<li>总结一套故障排除的方法论：网络故障、CPU/RAM/Disk 性能异常等、应用故障等。</li>
</ol>
<p>最重要的任务，是维护公司这一套微服务在阿里云上的正常运行，积累经验。</p>
<p>关注 <a href="https://landscape.cncf.io/" target="_blank" rel="noopener noreffer">CNCF 蓝图</a> 上的各项新技术。</p>
<p>另外呢，就是开发方面的任务：</p>
<ol>
<li>设计模式应该要学学了！</li>
<li>Python 不能止步于此，要制定源码学习计划。</li>
<li>学习 C# 语言，阅读公司的源码，熟悉企业级的业务代码。</li>
<li>学习 go 语言，用于 DevOps。（其实还想学 rust，不过明年可能没时间）</li>
<li>要把 xhup 那个项目完成，也不知道能不能抽出时间。。</li>
</ol>
]]></content></entry><entry><title type="html">Kubernetes 常见错误、原因及处理方法</title><link href="https://thiscute.world/posts/kubernetes-common-errors-and-solutions/"/><id>https://thiscute.world/posts/kubernetes-common-errors-and-solutions/</id><author><name>ryan4yin</name></author><published>2019-11-24T19:26:54+08:00</published><updated>2019-11-24T19:26:54+08:00</updated><content type="html"><![CDATA[<h2 id="pod-常见错误" class="headerLink">
    <a href="#pod-%e5%b8%b8%e8%a7%81%e9%94%99%e8%af%af" class="header-mark"></a>Pod 常见错误</h2><ol>
<li>OOMKilled: Pod 的内存使用超出了 resources.limits 中的限制，被强制杀死。</li>
<li><a href="https://cloud.tencent.com/developer/article/1411527" target="_blank" rel="noopener noreffer">SandboxChanged: Pod sandbox changed, it will be killed and re-created</a>: 很可能是由于内存限制导致容器被 OOMKilled，或者其他资源不足
<ol>
<li>如果是 OOM，容器通常会被重启，<code>kubectl describe</code> 能看到容器上次被重启的原因 <code>State.Last State.Reason = OOMKilled, Exit Code=137</code>.</li>
</ol>
</li>
<li>Pod 不断被重启，<code>kubectl describe</code> 显示重启原因 <code>State.Last State.Reason = Error, Exit Code=137</code>，137 对应 SIGKILL(<code>kill -9</code>) 信号，说明容器被强制重启。可能的原因：
<ol>
<li>最有可能的原因是，存活探针（livenessProbe）检查失败</li>
<li>节点资源不足，内核强制关闭了进程以释放资源，这种情况可以通过 <code>journalctl -k</code> 查看详细的系统日志。</li>
</ol>
</li>
<li>CrashLoopBackoff: Pod 进入 <strong>崩溃-重启</strong>循环，重启间隔时间从 10 20 40 80 一直翻倍到上限 300 秒，然后以 300 秒为间隔无限重启。</li>
<li>Pod 一直 Pending: 这说明没有任何节点能满足 Pod 的要求，容器无法被调度。比如端口被别的容器用 hostPort 占用，节点有污点等。</li>
<li><a href="" rel="">FailedCreateSandBox: Failed create pod sandbox: rpc error: code = DeadlineExceeded desc = context deadline exceeded</a>：很可能是 CNI 网络插件的问题（比如 ip 地址溢出），</li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/55094" target="_blank" rel="noopener noreffer">FailedSync: error determining status: rpc error: code = DeadlineExceeded desc = context deadline exceeded</a>: 常和前两个错误先后出现，很可能是 CNI 网络插件的问题。</li>
<li>开发集群，一次性部署所有服务时，各 Pod 互相争抢资源，导致 Pod 生存探针失败，不断重启，重启进一步加重资源使用。恶性循环。
<ul>
<li><strong>需要给每个 Pod 加上 resources.requests，这样资源不足时，后续 Pod 会停止调度，直到资源恢复正常。</strong></li>
</ul>
</li>
<li>Pod 出现大量的 Failed 记录，Deployment 一直重复建立 Pod: 通过 <code>kubectl describe/edit pod &lt;pod-name&gt;</code> 查看 pod <code>Events</code> 和 <code>Status</code>，一般会看到失败信息，如节点异常导致 Pod 被驱逐。</li>
<li><a href="https://zhuanlan.zhihu.com/p/70031676" target="_blank" rel="noopener noreffer">Kubernetes 问题排查：Pod 状态一直 Terminating</a></li>
<li>创建了 Deployment 后，却没有自动创建 Pod: 缺少某些创建 Pod 必要的东西，比如设定的 ServiceAccount 不存在。</li>
<li>Pod 运行失败，状态为 MatchNodeSelector: 对主节点进行关机、迁移等操作，导致主调度器下线时，会在一段时间内导致 Pod 调度失败，调度失败会报这个错。</li>
<li>Pod 仍然存在，但是 <code>Service</code> 的 Endpoints 却为空，找不到对应的 Pod IPs: 遇到过一次，是因为时间跳变（从未来的时间改回了当前时间）导致的问题。</li>
<li>Pod 无法调度，报错 <code>x node(s) had volume node affinity conflict</code>: 说明该 pod 所绑定的 PV 有 nodeAffinity 无法满足，可以 check 对应的 PV yaml. 通常原因是 PV 所在的可用区，没有可用的节点，导致 Pod 无法调度。
<ol>
<li>最简单的解决方法是，在对应的可用区补充节点</li>
<li>如果数据可以丢，也可以考虑直接删除重建 PV/PVC</li>
</ol>
</li>
</ol>
<h3 id="控制面故障可能会导致各类奇怪的异常现象" class="headerLink">
    <a href="#%e6%8e%a7%e5%88%b6%e9%9d%a2%e6%95%85%e9%9a%9c%e5%8f%af%e8%83%bd%e4%bc%9a%e5%af%bc%e8%87%b4%e5%90%84%e7%b1%bb%e5%a5%87%e6%80%aa%e7%9a%84%e5%bc%82%e5%b8%b8%e7%8e%b0%e8%b1%a1" class="header-mark"></a>控制面故障可能会导致各类奇怪的异常现象</h3><p>对于生产环境的集群，因为有高可用，通常我们比较少遇到控制面故障问题。但是一旦控制面发生故障，就可能会导致各类奇怪的异常现象。
如果能在排查问题时，把控制面异常考虑进来，在这种情况下，就能节约大量的排查时间，快速定位到问题。</p>
<p>其中比较隐晦的就是 controller-manager 故障导致的异常：</p>
<ol>
<li>节点的服务器已经被终止，但是 Kuberntes 里还显示 node 为 Ready 状态，不会更新为 NotReady.</li>
<li>被删除的 Pods 可能会卡在 Terminating 状态，只有强制删除才能删除掉它们。并且确认 Pod 没有 <code>metadata.finalizers</code> 属性</li>
<li>HPA 的动态伸缩功能失效</li>
<li>&hellip;</li>
</ol>
<p>如果这些现象同时发生，就要怀疑是否是 kube-controller-manager 出问题了.</p>
<p>其他控制面异常的详细分析，参见 <a href="./kubernetes%20%e6%8e%a7%e5%88%b6%e9%9d%a2%e6%95%85%e9%9a%9c%e7%8e%b0%e8%b1%a1%e5%8f%8a%e5%88%86%e6%9e%90.md" rel="">kubernetes 控制面故障现象及分析</a></p>
<h3 id="pod-无法删除" class="headerLink">
    <a href="#pod-%e6%97%a0%e6%b3%95%e5%88%a0%e9%99%a4" class="header-mark"></a>Pod 无法删除</h3><p>可能是某些资源无法被GC，这会导致容器已经 Exited 了，但是 Pod 一直处于 Terminating 状态。</p>
<p>这个问题在网上能搜到很多案例,但大都只是提供了如下的强制清理命令，未分析具体原因：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl delete pods &lt;pod&gt; --grace-period<span class="o">=</span><span class="m">0</span> --force
</span></span></code></pre></td></tr></table>
</div>
</div><p>最近找到几篇详细的原因分析文章，值得一看：</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1680612" target="_blank" rel="noopener noreffer">腾讯云原生 -【Pod Terminating原因追踪系列】之 containerd 中被漏掉的 runc 错误信息</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1680613" target="_blank" rel="noopener noreffer">腾讯云原生 -【Pod Terminating原因追踪系列之二】exec连接未关闭导致的事件阻塞</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1689486" target="_blank" rel="noopener noreffer">腾讯云原生 -【Pod Terminating原因追踪系列之三】让docker事件处理罢工的cancel状态码</a></li>
<li><a href="https://www.likakuli.com/posts/docker-pod-terminating/" target="_blank" rel="noopener noreffer">Pod terminating - 问题排查 - KaKu Li</a></li>
</ul>
<p>大致总结一下，主要原因来自 docker 18.06 以及 kubernetes 的 docker-shim 运行时的底层逻辑，已经在新版本被修复了。</p>
<h3 id="initcontainers-不断-restart但是-containers-却都显示已-ready" class="headerLink">
    <a href="#initcontainers-%e4%b8%8d%e6%96%ad-restart%e4%bd%86%e6%98%af-containers-%e5%8d%b4%e9%83%bd%e6%98%be%e7%a4%ba%e5%b7%b2-ready" class="header-mark"></a>initContainers 不断 restart，但是 Containers 却都显示已 ready</h3><p>Kubernetes 应该确保所有 initContainers 都 Completed，然后才能启动 Containers.</p>
<p>但是我们发现有一个节点上，所有包含 initContainers 的 Pod，状态全都是 <code>Init:CrashLoopBackOff</code> 或者 <code>Init:Error</code>.</p>
<p>而且进一步 <code>kubectl describe po</code> 查看细节，发现 initContainer 的状态为:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">    State:          Waiting
</span></span><span class="line"><span class="cl">      Reason:       CrashLoopBackOff
</span></span><span class="line"><span class="cl">    Last State:     Terminated
</span></span><span class="line"><span class="cl">      Reason:       Error
</span></span><span class="line"><span class="cl">      Exit Code:    2
</span></span><span class="line"><span class="cl">      Started:      Tue, 03 Aug 2021 06:02:42 +0000
</span></span><span class="line"><span class="cl">      Finished:     Tue, 03 Aug 2021 06:02:42 +0000
</span></span><span class="line"><span class="cl">    Ready:          False
</span></span><span class="line"><span class="cl">    Restart Count:  67
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 Containers 的状态居然是 ready:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">...
</span></span><span class="line"><span class="cl">    Host Port:      0/TCP
</span></span><span class="line"><span class="cl">    State:          Running
</span></span><span class="line"><span class="cl">      Started:      Tue, 03 Aug 2021 00:35:30 +0000
</span></span><span class="line"><span class="cl">    Ready:          True
</span></span><span class="line"><span class="cl">    Restart Count:  0
</span></span><span class="line"><span class="cl">...
</span></span></code></pre></td></tr></table>
</div>
</div><p>initContainers 还未运行成功，而 Containers 却 Ready 了，非常疑惑。</p>
<p>仔细想了下，早上因为磁盘余量告警，有手动运行过 <code>docker system prune</code> 命令，那么问题可能就是这条命令清理掉了已经 exited 的 initContainers 容器，导致 k8s 故障，不断尝试重启该容器。</p>
<p>网上一搜确实有相关的信息：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/62333064/cant-delete-exited-init-container" target="_blank" rel="noopener noreffer">https://stackoverflow.com/questions/62333064/cant-delete-exited-init-container</a></li>
<li><a href="https://github.com/kubernetes/kubernetes/issues/62362" target="_blank" rel="noopener noreffer">https://github.com/kubernetes/kubernetes/issues/62362</a></li>
</ul>
<p>结论：使用外部的垃圾清理命令可能导致 k8s 行为异常。</p>
<h2 id="节点常见错误" class="headerLink">
    <a href="#%e8%8a%82%e7%82%b9%e5%b8%b8%e8%a7%81%e9%94%99%e8%af%af" class="header-mark"></a>节点常见错误</h2><ol>
<li><a href="https://kubernetes.io/docs/tasks/administer-cluster/out-of-resource/#node-conditions" target="_blank" rel="noopener noreffer">DiskPressure</a>：节点的可用空间不足。（通过<code>df -h</code> 查看，保证可用空间不小于 15%）</li>
<li>The node was low on resource: ephemeral-storage: 同上，节点的存储空间不够了。</li>
</ol>
<p>节点存储告警可能的原因：</p>
<ol>
<li>kubelet 的资源 GC 设置有问题，遗留的镜像等资源未及时 GC 导致告警</li>
<li>存在运行的 pod 使用了大量存储空间，在节点上通过 <code>docker ps -a --size | grep G</code> 可以查看到</li>
<li>如果使用的是 EKS，并且磁盘告警的挂载点为 <code>/var/lib/kubelet/plugins/kubernetes.io/aws-ebs/mounts/aws/us-east-1b/vol-xxxxx</code>
<ol>
<li>显然是 EBS 存储卷快满了导致的</li>
<li>可通过 <code> kubectl get pv -A -o yaml | grep -C 30 vol-xxxxx</code> 来定位到具体的存储卷</li>
</ol>
</li>
</ol>
<h2 id="网络常见错误" class="headerLink">
    <a href="#%e7%bd%91%e7%bb%9c%e5%b8%b8%e8%a7%81%e9%94%99%e8%af%af" class="header-mark"></a>网络常见错误</h2><h3 id="1-ingressistio-gateway-返回值" class="headerLink">
    <a href="#1-ingressistio-gateway-%e8%bf%94%e5%9b%9e%e5%80%bc" class="header-mark"></a>1. Ingress/Istio Gateway 返回值</h3><ol>
<li>404：不存在该 Service/Istio Gateway，或者是服务自身返回 404</li>
<li>500：大概率是服务自身的错误导致 500，小概率是代理（Sidecar/Ingress 等）的错误</li>
<li>503：服务不可用，有如下几种可能的原因：
<ol>
<li>Service 对应的 Pods 不存在，endpoints 为空</li>
<li>Service 对应的 Pods 全部都 NotReady，导致 endpoints 为空</li>
<li>也有可能是服务自身出错返回的 503</li>
<li>如果你使用了 envoy sidecar， 503 可能的原因就多了。基本上 sidecar 与主容器通信过程中的任何问题都会使 envoy 返回 503，使客户端重试。
<ol>
<li>详见 <a href="https://blog.fleeto.us/post/istio-503-uc-debug/" target="_blank" rel="noopener noreffer">Istio：503、UC 和 TCP</a></li>
</ol>
</li>
</ol>
</li>
<li>502：Bad Gateway，通常是由于上游未返回正确的响应导致的，可能的根本原因：
<ol>
<li>应用程序未正确处理 SIGTERM 信号，在请求未处理完毕时直接终止了进程。详见 <a href="./%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5.md" rel="">优雅停止（Gracful Shutdown）与 502/504 报错 - K8s 最佳实践</a></li>
<li>网络插件 bug</li>
</ol>
</li>
<li>504：网关请求 upstream 超时，主要有两种可能
<ol>
<li>考虑是不是 Ingress Controller 的 IP 列表未更新，将请求代理到了不存在的 ip，导致得不到响应</li>
<li>Service Endpoints 移除不够及时，在 Pod 已经被终止后，仍然有个别请求被路由到了该 Pod，得不到响应导致 504。详见 <a href="./%e6%9c%80%e4%bd%b3%e5%ae%9e%e8%b7%b5.md" rel="">优雅停止（Gracful Shutdown）与 502/504 报错 - K8s 最佳实践</a></li>
<li>Pod 响应太慢，代码问题</li>
</ol>
</li>
</ol>
<p>再总结一下常见的几种错误：</p>
<ul>
<li>未设置优雅停止，导致 Pod 被重新终止时，有概率出现 502/504</li>
<li>服务的所有 Pods 的状态在「就绪」和「未就绪」之间摆动，导致间歇性地出现大量 503 错误</li>
<li>服务返回 5xx 错误导致客户端不断重试，请求流量被放大，导致服务一直起不来
<ul>
<li>解决办法：限流、熔断（网关层直接返回固定的相应内容）</li>
</ul>
</li>
</ul>
<p>Ingress 相关网络问题的排查流程：</p>
<ol>
<li>Which ingress controller?</li>
<li>Timeout between client and ingress controller, or between ingress controller and backend service/pod?</li>
<li>HTTP/504 generated by the ingress controller, proven by logs from the ingress controller?</li>
<li>If you port-forward to skip the internet between client and ingress controller, does the timeout still happen?</li>
</ol>
<h3 id="2-上了-istio-sidecar-后应用程序偶尔间隔几天半个月会-redis-连接相关的错误" class="headerLink">
    <a href="#2-%e4%b8%8a%e4%ba%86-istio-sidecar-%e5%90%8e%e5%ba%94%e7%94%a8%e7%a8%8b%e5%ba%8f%e5%81%b6%e5%b0%94%e9%97%b4%e9%9a%94%e5%87%a0%e5%a4%a9%e5%8d%8a%e4%b8%aa%e6%9c%88%e4%bc%9a-redis-%e8%bf%9e%e6%8e%a5%e7%9b%b8%e5%85%b3%e7%9a%84%e9%94%99%e8%af%af" class="header-mark"></a>2. 上了 istio sidecar 后，应用程序偶尔（间隔几天半个月）会 redis 连接相关的错误</h3><p>考虑是否和 tcp 长时间使用有关，比如连接长时间空闲的话，可能会被 istio sidecar 断开。
如果程序自身的重连机制有问题，就会导致这种现象。</p>
<p>确认方法：</p>
<ol>
<li>检查 istio 的 <code>idleTimeout</code> 时长（默认 1h）</li>
<li>创建三五个没流量的 Pod 放置 1h（与 istio idleTimeout 时长一致），看看是否会准时开始报 redis 的错。</li>
<li>对照组：创建三五个同样没流量的 Pod，但是不注入 istio sidecar，应该一直很正常</li>
</ol>
<p>这样就能确认问题，后续处理：</p>
<ol>
<li>抓包观察程序在出错后的 tcp 层行为</li>
<li>查阅 redis sdk 的相关 issue、代码，通过升级 SDK 应该能解决问题。</li>
</ol>
<h2 id="名字空间常见错误" class="headerLink">
    <a href="#%e5%90%8d%e5%ad%97%e7%a9%ba%e9%97%b4%e5%b8%b8%e8%a7%81%e9%94%99%e8%af%af" class="header-mark"></a>名字空间常见错误</h2><h3 id="名字空间无法删除" class="headerLink">
    <a href="#%e5%90%8d%e5%ad%97%e7%a9%ba%e9%97%b4%e6%97%a0%e6%b3%95%e5%88%a0%e9%99%a4" class="header-mark"></a>名字空间无法删除</h3><p>这通常是某些资源如 CR(custom resources)/存储等资源无法释放导致的。
比如常见的 monitoring 名字空间无法删除，应该就是 CR 无法 GC 导致的。</p>
<p>可手动删除 namespace 配置中的析构器（spec.finalizer，在名字空间生命周期结束前会生成的配置项），这样名字空间就会直接跳过 GC 步骤：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 编辑名字空间的配置</span>
</span></span><span class="line"><span class="cl">kubectl edit namespace &lt;ns-name&gt;
</span></span><span class="line"><span class="cl"><span class="c1"># 将 spec.finalizers 改成空列表 []</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果上述方法也无法删除名字空间，也找不到具体的问题，就只能直接从 etcd 中删除掉它了(有风险，谨慎操作！)。方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 登录到 etcd 容器中，执行如下命令：</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">ETCDCTL_API</span><span class="o">=</span><span class="m">3</span>
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> /etc/kubernetes/pki/etcd/
</span></span><span class="line"><span class="cl"><span class="c1"># 列出所有名字空间</span>
</span></span><span class="line"><span class="cl">etcdctl --cacert ca.crt --cert peer.crt --key peer.key get /registry/namespaces --prefix --keys-only
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># （谨慎操作！！！）强制删除名字空间 `monitoring`。这可能导致相关资源无法被 GC！</span>
</span></span><span class="line"><span class="cl">etcdctl --cacert ca.crt --cert peer.crt --key peer.key del /registry/namespaces/monitoring
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="kubectlistioctl-等客户端工具异常" class="headerLink">
    <a href="#kubectlistioctl-%e7%ad%89%e5%ae%a2%e6%88%b7%e7%ab%af%e5%b7%a5%e5%85%b7%e5%bc%82%e5%b8%b8" class="header-mark"></a>kubectl/istioctl 等客户端工具异常</h2><ol>
<li><code>socat not found</code>: kubectl 使用 <code>socat</code> 进行端口转发，集群的所有节点，以及本机都必须安装有 <code>socat</code> 工具。</li>
</ol>
<h2 id="批量清理-evicted-记录" class="headerLink">
    <a href="#%e6%89%b9%e9%87%8f%e6%b8%85%e7%90%86-evicted-%e8%ae%b0%e5%bd%95" class="header-mark"></a>批量清理 Evicted 记录</h2><p>有时候 Pod 因为节点选择器的问题，被不断调度到有问题的 Node 上，就会不断被 Evicted，导致出现大量的 Evicted Pods。
排查完问题后，需要手动清理掉这些 Evicted Pods.</p>
<p>批量删除 Evicted 记录:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">kubectl get pods <span class="p">|</span> grep Evicted <span class="p">|</span> awk <span class="s1">&#39;{print $1}&#39;</span> <span class="p">|</span> xargs kubectl delete pod
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="容器镜像gcpod驱逐以及节点压力" class="headerLink">
    <a href="#%e5%ae%b9%e5%99%a8%e9%95%9c%e5%83%8fgcpod%e9%a9%b1%e9%80%90%e4%bb%a5%e5%8f%8a%e8%8a%82%e7%82%b9%e5%8e%8b%e5%8a%9b" class="header-mark"></a>容器镜像GC、Pod驱逐以及节点压力</h2><p>节点压力 DiskPressure 会导致 Pod 被驱逐，也会触发容器镜像的 GC。</p>
<p>根据官方文档 <a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/out-of-resource" target="_blank" rel="noopener noreffer">配置资源不足时的处理方式</a>，Kubelet 提供如下用于配置容器 GC 及 Evicetion 的阈值：</p>
<ol>
<li><code>--eviction-hard</code> 和 <code>eviction-soft</code>: 对应旧参数 <code>--image-gc-high-threshold</code>，这两个参数配置镜像 GC 及驱逐的触发阈值。磁盘使用率的阈值默认为 85%
<ol>
<li>区别在于 <code>eviction-hard</code> 是立即驱逐，而 <code>eviction-soft</code> 在超过 <code>eviction-soft-grace-period</code> 之后才驱逐。</li>
</ol>
</li>
<li><code>--eviction-minimum-reclaim</code>: 对应旧参数 <code>--image-gc-low-threshold</code>。这是进行资源回收（镜像GC、Pod驱逐等）后期望达到的磁盘使用率百分比。磁盘使用率的阈值默认值为 80%。</li>
</ol>
<p>问：能否为 ImageGC 设置一个比 DiskPressure 更低的阈值？因为我们希望能自动进行镜像 GC，但是不想立即触发 Pod 驱逐。</p>
<p>答：这应该可以通过设置 <code>eviction-soft</code> 和长一点的 <code>eviction-soft-grace-period</code> 来实现。
另外 <code>--eviction-minimum-reclaim</code> 也可以设小一点，清理得更干净。示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">--eviction-soft<span class="o">=</span>memory.available&lt;1Gi,nodefs.available&lt;2Gi,imagefs.available&lt;200Gi
</span></span><span class="line"><span class="cl">--eviction-soft-grace-period<span class="o">=</span>3m
</span></span><span class="line"><span class="cl">--eviction-minimum-reclaim<span class="o">=</span>memory.available<span class="o">=</span>0Mi,nodefs.available<span class="o">=</span>1Gi,imagefs.available<span class="o">=</span>2Gi
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="其他问题" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96%e9%97%ae%e9%a2%98" class="header-mark"></a>其他问题</h2><h2 id="隔天-istio-等工具的-sidecar-自动注入莫名其妙失效了" class="headerLink">
    <a href="#%e9%9a%94%e5%a4%a9-istio-%e7%ad%89%e5%b7%a5%e5%85%b7%e7%9a%84-sidecar-%e8%87%aa%e5%8a%a8%e6%b3%a8%e5%85%a5%e8%8e%ab%e5%90%8d%e5%85%b6%e5%a6%99%e5%a4%b1%e6%95%88%e4%ba%86" class="header-mark"></a>隔天 Istio 等工具的 sidecar 自动注入莫名其妙失效了</h2><p>如果服务器晚上会关机，可能导致第二天网络插件出问题，导致 sidecar 注入器无法观察到 pod 的创建，也就无法完成 sidecar 注入。</p>
<h3 id="如何重新运行一个-job" class="headerLink">
    <a href="#%e5%a6%82%e4%bd%95%e9%87%8d%e6%96%b0%e8%bf%90%e8%a1%8c%e4%b8%80%e4%b8%aa-job" class="header-mark"></a>如何重新运行一个 Job？</h3><p>我们有一个 Job 因为外部原因运行失败了，修复好后就需要重新运行它。</p>
<p>方法是：删除旧的 Job，再使用同一份配置重建 Job.</p>
<p>如果你使用的是 fluxcd 这类 GitOps 工具，就只需要手工删除旧 Pod，fluxcd 会定时自动 apply 所有配置，这就完成了 Job 的重建。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://yq.aliyun.com/articles/703971?type=2" target="_blank" rel="noopener noreffer">Kubernetes管理经验</a></li>
<li><a href="https://www.reddit.com/r/kubernetes/comments/ced0py/504_gateway_timeout_when_accessing_workload_via/" target="_blank" rel="noopener noreffer">504 Gateway Timeout when accessing workload via ingress</a></li>
<li><a href="https://k8s.af/" target="_blank" rel="noopener noreffer">Kubernetes Failure Stories</a></li>
<li><a href="https://blog.fleeto.us/post/istio-503-uc-debug/" target="_blank" rel="noopener noreffer">Istio：503、UC 和 TCP</a></li>
<li><a href="https://imroc.cc/istio/" target="_blank" rel="noopener noreffer">istio 实践指南 - imroc.cc</a></li>
<li><a href="https://imroc.cc/kubernetes/" target="_blank" rel="noopener noreffer">Kubernetes 实践指南 - imroc.cc</a></li>
</ul>
]]></content></entry><entry><title type="html">Manjaro 使用指南</title><link href="https://thiscute.world/posts/manjaro-instruction/"/><id>https://thiscute.world/posts/manjaro-instruction/</id><author><name>ryan4yin</name></author><published>2019-07-13T20:38:24+08:00</published><updated>2019-07-13T20:38:24+08:00</updated><content type="html"><![CDATA[<p>Manjaro 是一个基于 Arch Linux 的 Linux 滚动发行版，用着挺舒服的。
最大的特点，是包仓库很丰富，而且都很新。代价是偶尔会出些小毛病。</p>
<blockquote>
<p>2021-09-22 更新：今天被群友科普，可能我下面列举的几个滚挂事件，可能都和我使用了 archlinuxcn 这个源有关，这确实有可能。</p>
</blockquote>
<p>我一年多的使用中，遇到过 qv2-ray 动态链接库炸掉的问题，没专门去找修复方法，好像是等了一两个月，升级了两个大版本才恢复。
另一个就是 <a href="https://github.com/microsoft/vscode/issues/110322" target="_blank" rel="noopener noreffer">VSCode - Incorrect locale &rsquo;en-US&rsquo; used everywhere</a></p>
<p>还遇到过 <code>libguestfs</code> 的一个问题：<code>vrit-v2v</code>/<code>virt-p2v</code> 两个工具被拆分出去，导致 manjaro 只能通过源码安装这俩货。这貌似目前仍旧没有解决。</p>
<p>总的来说体验很不错，能很及时地用上各种新版本的软件。</p>
<h2 id="一pacmanyay-的基础命令" class="headerLink">
    <a href="#%e4%b8%80pacmanyay-%e7%9a%84%e5%9f%ba%e7%a1%80%e5%91%bd%e4%bb%a4" class="header-mark"></a>一、pacman/yay 的基础命令</h2><p>Manjaro 装好后，需要运行的第一条命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo pacman -Syy <span class="c1">## 强制更新 package 目录</span>
</span></span><span class="line"><span class="cl">sudo pacman-mirrors --interactive --country China  <span class="c1"># 列出所有国内的镜像源，并提供交互式的界面手动选择镜像源</span>
</span></span><span class="line"><span class="cl">sudo pacman -Syyu  <span class="c1"># 强制更新 package 目录，并尝试更新已安装的所有 packages.</span>
</span></span><span class="line"><span class="cl">sudo pacman -S yay  <span class="c1"># 安装 yay</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>pacman 是 arch/manjaro 的官方包管理器，而刚刚安装的 yay，则是一个能查询 arch linux 的 aur 仓库的第三方包管理器，非常流行。</p>
<p>pacman 的常用命令语法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">pacman -S package_name        <span class="c1"># 安装软件  </span>
</span></span><span class="line"><span class="cl">pacman -S extra/package_name  <span class="c1"># 安装不同仓库中的版本</span>
</span></span><span class="line"><span class="cl">pacman -Syu                   <span class="c1"># 升级整个系统，y是更新数据库，yy是强制更新，u是升级软件</span>
</span></span><span class="line"><span class="cl">pacman -Ss string             <span class="c1"># 在包数据库中查询软件</span>
</span></span><span class="line"><span class="cl">pacman -Si package_name       <span class="c1"># 显示软件的详细信息</span>
</span></span><span class="line"><span class="cl">pacman -Sc                    <span class="c1"># 清除软件缓存，即/var/cache/pacman/pkg目录下的文件</span>
</span></span><span class="line"><span class="cl">pacman -R package_name        <span class="c1"># 删除单个软件</span>
</span></span><span class="line"><span class="cl">pacman -Rs package_name       <span class="c1"># 删除指定软件及其没有被其他已安装软件使用的依赖关系</span>
</span></span><span class="line"><span class="cl">pacman -Qs string             <span class="c1"># 查询已安装的软件包</span>
</span></span><span class="line"><span class="cl">pacman -Qi package_name       <span class="c1"># 查询本地安装包的详细信息</span>
</span></span><span class="line"><span class="cl">pacman -Ql package_name       <span class="c1"># 获取已安装软件所包含的文件的列表</span>
</span></span><span class="line"><span class="cl">pacman -U package.tar.zx      <span class="c1"># 从本地文件安装</span>
</span></span><span class="line"><span class="cl">pactree package_name          <span class="c1"># 显示软件的依赖树</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>yay 的用法和 pacman 完全类似，上述所有 <code>pacman xxx</code> 命令，均可替换成 <code>yay xxx</code> 执行。</p>
<p>此外，还有一条 <code>yay</code> 命令值得记一下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">yay -c  <span class="c1"># 卸载所有无用的依赖。类比 apt-get autoremove</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="常用软件与配置" class="headerLink">
    <a href="#%e5%b8%b8%e7%94%a8%e8%bd%af%e4%bb%b6%e4%b8%8e%e9%85%8d%e7%bd%ae" class="header-mark"></a>常用软件与配置</h2><h3 id="1-添加-archlinux-中文社区仓库" class="headerLink">
    <a href="#1-%e6%b7%bb%e5%8a%a0-archlinux-%e4%b8%ad%e6%96%87%e7%a4%be%e5%8c%ba%e4%bb%93%e5%ba%93" class="header-mark"></a>1. 添加 archlinux 中文社区仓库</h3><p><a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/" target="_blank" rel="noopener noreffer">Arch Linux 中文社区仓库</a> 是由 Arch Linux 中文社区驱动的非官方用户仓库，包含一些额外的软件包以及已有软件的 git 版本等变种。部分软件包的打包脚本来源于 AUR。</p>
<p>一些国内软件，如果直接从 aur 安装，那就会有一个编译过程，有点慢。而 archlinuxcn 有已经编译好的包，可以直接安装。更新速度也很快，推荐使用。</p>
<p>配置方法见 <a href="https://github.com/archlinuxcn/repo" target="_blank" rel="noopener noreffer">Arch Linux Chinese Community Repository</a>。</p>
<h3 id="2-安装常用软件" class="headerLink">
    <a href="#2-%e5%ae%89%e8%a3%85%e5%b8%b8%e7%94%a8%e8%bd%af%e4%bb%b6" class="header-mark"></a>2. 安装常用软件</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo pacman -S google-chrome  firefox         <span class="c1"># 浏览器</span>
</span></span><span class="line"><span class="cl">sudo pacman -S netease-cloud-music     <span class="c1"># 网易云音乐</span>
</span></span><span class="line"><span class="cl">sudo pacman -S noto-fonts-cjk wqy-bitmapfont wqy-microhei wqy-zenhei   <span class="c1"># 中文字体：思源系列、文泉系列</span>
</span></span><span class="line"><span class="cl">sudo pacman -S wps-office ttf-wps-fonts
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo pacman -S vim                     <span class="c1"># 命令行编辑器</span>
</span></span><span class="line"><span class="cl">sudo pacman -S git                     <span class="c1"># 版本管理工具</span>
</span></span><span class="line"><span class="cl">sudo pacman -S clang make cmake gdb    <span class="c1"># 编译调试环境</span>
</span></span><span class="line"><span class="cl">sudo pacman -S visual-studio-code-bin  <span class="c1"># 代码编辑器</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo pacman -S wireshark-qt  mitmproxy         <span class="c1"># 抓包工具</span>
</span></span><span class="line"><span class="cl">sudo pacman -S docker  <span class="c1"># docker 容器</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>其中 docker 和 wireshark 需要额外配置，否则会要求管理员权限：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh"><span class="line"><span class="cl">sudo groupadd wireshark
</span></span><span class="line"><span class="cl">sudo gpasswd --add <span class="nv">$USER</span> wireshark  <span class="c1">#  将你添加到 wireshark 用户组中</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">sudo groupadd docker
</span></span><span class="line"><span class="cl">sudo gpasswd --add <span class="nv">$USER</span> docker  <span class="c1"># 同上</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-中文输入法" class="headerLink">
    <a href="#3-%e4%b8%ad%e6%96%87%e8%be%93%e5%85%a5%e6%b3%95" class="header-mark"></a>3. 中文输入法</h3><p>有两个选择：<a href="https://rime.im/" target="_blank" rel="noopener noreffer">中州韵（rime）</a>和<a href="https://aur.archlinux.org/packages/fcitx-sogoupinyin/" target="_blank" rel="noopener noreffer">搜狗拼音（sogoupinyin）</a>。</p>
<p>简单省事用搜狗，要用特殊的输入方案（五笔、音形、二笔等等）就只有 rime 可选了。</p>
<h4 id="31-fcitx5-rime-配置小鹤音形" class="headerLink">
    <a href="#31-fcitx5-rime-%e9%85%8d%e7%bd%ae%e5%b0%8f%e9%b9%a4%e9%9f%b3%e5%bd%a2" class="header-mark"></a>3.1 fcitx5-rime 配置小鹤音形</h4><p>首先安装 fcitx5-rime, 注意这些组件一个都不能省略：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sudo pacman -S fcitx5  fcitx5-chinese-addons fcitx5-gtk  fcitx5-qt  kcm-fcitx5 fcitx5-rime
</span></span></code></pre></td></tr></table>
</div>
</div><p>第二步是修改环境变量，将 fcitx5-rime 设为默认输入法并自动启动。</p>
<p>添加 <code>~/.pam_environment</code> 文件，内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">INPUT_METHOD  DEFAULT=fcitx5
</span></span><span class="line"><span class="cl">GTK_IM_MODULE DEFAULT=fcitx5
</span></span><span class="line"><span class="cl">QT_IM_MODULE  DEFAULT=fcitx5
</span></span><span class="line"><span class="cl">XMODIFIERS    DEFAULT=@im=fcitx5
</span></span></code></pre></td></tr></table>
</div>
</div><p><a href="https://wiki.archlinux.org/index.php/PAM_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener noreffer">pam-env</a> 模块会在所有登录会话中读取上面的配置文件，包括 X11 会话和 Wayland 会话。</p>
<p>添加自动启动：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># ~/.xprofile 是 x11 GUI 的环境变量配置文件</span>
</span></span><span class="line"><span class="cl"><span class="nb">echo</span> <span class="s1">&#39;fcitx5 &amp;&#39;</span> &gt;&gt; ~/.xprofile
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后，从 <a href="http://flypy.ys168.com/" target="_blank" rel="noopener noreffer">http://flypy.ys168.com/</a> 下载最新的鼠须管（MacOS）配置文件，将解压得到的 rime 文件夹拷贝到 ~/.local/share/fcitx5/ 下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mv rime ~/.local/share/fcitx5/
</span></span></code></pre></td></tr></table>
</div>
</div><p>现在重启系统，在 fcitx5 配置里面添加 rime，就可以正常使用小鹤音形了。</p>
<h2 id="坑" class="headerLink">
    <a href="#%e5%9d%91" class="header-mark"></a>坑</h2><p>使用过程中，我也遇到了一些坑：</p>
<ol>
<li>安装软件包时，无法在线安装旧版本！除非你本地有旧版本的安装包没清除，才可以通过缓存安装旧版本。
<ul>
<li>这种问题没遇到时好说，但有时候新版本有问题，旧安装包也清理掉了无法回退，就非常麻烦。</li>
<li>而且就算你回退了版本，一升级它就又更新了。。</li>
</ul>
</li>
</ol>
<h2 id="彻底删除-manjaro-及其引导项" class="headerLink">
    <a href="#%e5%bd%bb%e5%ba%95%e5%88%a0%e9%99%a4-manjaro-%e5%8f%8a%e5%85%b6%e5%bc%95%e5%af%bc%e9%a1%b9" class="header-mark"></a>彻底删除 Manjaro 及其引导项</h2><p>最近(2021-01)切换到了 OpenSUSE，体验很好，于是决定删除掉 Manjaro。</p>
<p>一番操作，总结出的删除流程如下（以下命令均需要 root 权限）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 1. 删除 EFI 引导项</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 查看 efi 的所有启动项，找到 Manjaro 的编号</span>
</span></span><span class="line"><span class="cl">efibootmgr
</span></span><span class="line"><span class="cl"><span class="c1">## 删除掉 Manjaro 启动项</span>
</span></span><span class="line"><span class="cl">sudo efibootmgr --delete-bootnum -b <span class="m">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 删除 manjaro 的 bootloader</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 我使用了 manjaro 默认的安装策略，bootloader 被安装在了和 windows 相同的 EFI 分区下</span>
</span></span><span class="line"><span class="cl"><span class="c1">## 首先通过 opnsuse 的分区工具，找到 EFI 分区的设备号，然后挂载它</span>
</span></span><span class="line"><span class="cl">mkdir efi
</span></span><span class="line"><span class="cl">mount /dev/nvme0n1p1 efi
</span></span><span class="line"><span class="cl"><span class="c1"># 删除 Manjaro bootloader</span>
</span></span><span class="line"><span class="cl">rm -r EFI/Manjaro
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. 重建 grub2 引导项</span>
</span></span><span class="line"><span class="cl">grub2-mkconfig &gt;  /boot/grub2/grub.cfg
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 4. 最后，通过分区工具删除 Manjaro 的所有分区，我是 SSD，只有一个分区</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 5. 重启系统，所有东西就全删除干净了。</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://wiki.archlinux.org/index.php/Main_page_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener noreffer">Arch Linux Wiki - 中文</a></li>
<li><a href="https://aur.archlinux.org/packages" target="_blank" rel="noopener noreffer">AUR 仓库</a></li>
<li><a href="https://www.archlinuxcn.org/archlinux-cn-repo-and-mirror/" target="_blank" rel="noopener noreffer">Arch Linux 中文社区仓库</a></li>
<li><a href="https://github.com/Jguer/yay" target="_blank" rel="noopener noreffer">yay - Yet another Yogurt - An AUR Helper written in Go </a></li>
<li><a href="https://panqiincs.me/2019/06/05/after-installing-manjaro/" target="_blank" rel="noopener noreffer">安装Manjaro之后的配置 </a></li>
<li><a href="https://wiki.archlinux.org/index.php/Fcitx5_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener noreffer">Arch Linux Wiki - Fcitx5</a></li>
</ul>]]></content></entry><entry><title type="html">逃离我的大学</title><link href="https://thiscute.world/posts/escape-my-university/"/><id>https://thiscute.world/posts/escape-my-university/</id><author><name>ryan4yin</name></author><published>2019-06-20T22:32:31+08:00</published><updated>2019-06-20T22:32:31+08:00</updated><content type="html"><![CDATA[<p>四年大学惨淡收场，坐在火车硬座上，心里有些忐忑。</p>
<p>对面坐着一个 16 岁的女孩子，从合肥去深圳当安检，隐约听到“700 块一个月”，“再怎么着十天也有一休吧”，说实话深感惭愧。</p>
<p>小时候我妈对我有点保护过度，从小到大几乎没下田干过活，在家帮忙干过的活屈指可数。
因为读书尚可，稀里糊涂读了十多年书，现在惨淡收场。
而对面女孩子 16 岁，已经要去离家这么远的地方实习了（当安检），而且还听到对面说“想和他分了，每次都是我给他打电话，他从来没主动过，现在还抱怨我电话打少了&hellip;&hellip;”</p>
<p>感觉我 22 年，有点白活了。。</p>
<p>可即使这样，还是提不起多大动力去复习面试用的知识点。
心里慌的不行，可游戏照打不误。还瞒着家里，花白条分期买了个 6000 的小米游戏本，一月要还 500，万一工作找得不理想，我不知道这个钱窟窿到时候该怎么填上。。。</p>
<p>我的四年大学好像也有过些高光时刻，也有过许多值得铭记的欢乐时光，临到头来却是这么个惨淡的结尾。
也有想过努力努力，可一懒散起来，就有了借口——“当初差点高考都没参加，就直接退学了，现在起码还读了四年的三流一本，见了世面，赚到了。”</p>
<p>不知道十年后我再回首，会不会觉得现在内心的忐忑，不算什么。</p>
<p>总之呢，因为一句「搞计算机的话，深圳工作应该很多吧，不如过来找工作？」，我上了这趟火车。</p>
<p>学业啥的都随它去吧，是不是单车变摩托，就看这一把了&hellip;</p>
]]></content></entry><entry><title type="html">SQLAlchemy 学习笔记（三）：ORM 中的关系构建</title><link href="https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/"/><id>https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/</id><author><name>ryan4yin</name></author><published>2019-05-21T22:19:00+08:00</published><updated>2019-05-21T22:19:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，不保证正确。</p>
</blockquote>
<h2 id="一关系构建foreignkey-与-relationship" class="headerLink">
    <a href="#%e4%b8%80%e5%85%b3%e7%b3%bb%e6%9e%84%e5%bb%baforeignkey-%e4%b8%8e-relationship" class="header-mark"></a>一、关系构建：<code>ForeignKey</code> 与 <code>relationship</code></h2><p>关系构建的重点，在于搞清楚这两个函数的用法。<code>ForeignKey</code> 的用法已经在 <a href="https://www.cnblogs.com/kirito-c/p/10269485.html#%E8%A1%A8%E5%AE%9A%E4%B9%89%E4%B8%AD%E7%9A%84%E7%BA%A6%E6%9D%9F" target="_blank" rel="noopener noreffer">SQL表达式语言 - 表定义中的约束</a> 讲过了。主要是 <code>ondelete</code> 和 <code>onupdate</code> 两个参数的用法。</p>
<h2 id="二relationship" class="headerLink">
    <a href="#%e4%ba%8crelationship" class="header-mark"></a>二、<code>relationship</code></h2><p><code>relationship</code> 函数在 ORM 中用于构建表之间的关联关系。与 <code>ForeignKey</code> 不同的是，它定义的关系不属于表定义，而是动态计算的。
用它定义出来的属性，相当于 SQL 中的视图。</p>
<p>这个函数有点难用，一是因为它的有几个参数不太好理解，二是因为它的参数非常丰富，让人望而却步。下面通过<strong>一对多</strong>、<strong>多对一</strong>、<strong>多对多</strong>几个场景下 <code>relationship</code> 的使用，来一步步熟悉它的用法。</p>
<p>首先初始化：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">Table</span><span class="p">,</span> <span class="n">Column</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">ForeignKey</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">relationship</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Base</span> <span class="o">=</span> <span class="n">declarative_base</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="1-一对多" class="headerLink">
    <a href="#1-%e4%b8%80%e5%af%b9%e5%a4%9a" class="header-mark"></a>1. 一对多</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;parent&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 因为 Child 中有 Parent 的 ForeignKey，这边的声明不需要再额外指定什么。</span>
</span></span><span class="line"><span class="cl">    <span class="n">children</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">)</span>  <span class="c1"># children 的集合，相当于一个视图。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;child&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;parent.id&#39;</span><span class="p">))</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个 <code>Parent</code> 可以有多个 <code>Children</code>，通过 <code>relationship</code>，我们就能直接通过 <code>parent.children</code> 得到结果，免去繁琐的 query 语句。</p>
<h4 id="11-反向引用" class="headerLink">
    <a href="#11-%e5%8f%8d%e5%90%91%e5%bc%95%e7%94%a8" class="header-mark"></a>1.1 反向引用</h4><h5 id="111-backref-与-back_populates" class="headerLink">
    <a href="#111-backref-%e4%b8%8e-back_populates" class="header-mark"></a>1.1.1 <code>backref</code> 与 <code>back_populates</code></h5><p>那如果我们需要得知 <code>child</code> 的 <code>parent</code> 对象呢？能不能直接访问 <code>child.parent</code>？</p>
<p>为了实现这个功能，SQLAlchemy 提供了 <code>backref</code> 和 <code>back_populates</code> 两个参数。</p>
<p>两个参数的效果完全一致，区别在于，<code>backref</code> 只需要在 <code>Parent</code> 类中声明 <code>children</code>，<code>Child.parent</code> 会被动态创建。</p>
<p>而 <code>back_populates</code> 必须在两个类中显式地使用 <code>back_populates</code>，更显繁琐。（但是也更清晰？）</p>
<p>先看 <code>backref</code> 版：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;parent&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">children</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="n">backref</span><span class="o">=</span><span class="s2">&#34;parent&#34;</span><span class="p">)</span>  <span class="c1"># backref 表示，在 Child 类中动态创建 parent 属性，指向当前类。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Child 类不需要修改</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>再看 <code>back_populates</code> 版：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;parent&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">children</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span> <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;parent&#34;</span><span class="p">)</span>  <span class="c1"># back_populates </span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;child&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;parent.id&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 这边也必须声明，不能省略！</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Parent&#34;</span><span class="p">,</span> <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;children&#34;</span><span class="p">)</span>  <span class="c1"># parent 不是集合，是属性！</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>NOTE：声明的两个 <code>relationship</code> 不需要多余的说明，SQLAlchemy 能自动识别到 <code>parent.children</code> 是 collection，<code>child.parent</code> 是 attribute.</strong></p>
<h4 id="112-反向引用的参数sqlalchemyormbackrefname-kwargs" class="headerLink">
    <a href="#112-%e5%8f%8d%e5%90%91%e5%bc%95%e7%94%a8%e7%9a%84%e5%8f%82%e6%95%b0sqlalchemyormbackrefname-kwargs" class="header-mark"></a>1.1.2. 反向引用的参数：<code>sqlalchemy.orm.backref(name, **kwargs)</code></h4><p>使用 <code>back_populates</code> 时，我们可以很方便地在两个 <code>relationship</code> 函数中指定各种参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;parent&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">children</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span> <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;parent&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                        <span class="n">lazy</span><span class="o">=</span><span class="s1">&#39;dynamic&#39;</span><span class="p">)</span>  <span class="c1"># 指定 lazy 的值</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;child&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;parent.id&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Parent&#34;</span><span class="p">,</span> <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;children&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                      <span class="n">lazy</span><span class="o">=</span><span class="s1">&#39;dynamic&#39;</span><span class="p">)</span>  <span class="c1"># 指定 lazy 的值</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是如果使用 <code>backref</code>，因为我们只有一个 <code>relationship</code> 函数，<code>Child.parent</code> 是被隐式创建的，我们该如何指定这个属性的参数呢？</p>
<p>答案就是 <code>backref()</code> 函数，使用它替代 <code>backref</code> 参数的值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">backref</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;parent&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">children</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                            <span class="n">backref</span><span class="o">=</span><span class="n">backref</span><span class="p">(</span><span class="s2">&#34;parent&#34;</span><span class="p">,</span> <span class="n">lazy</span><span class="o">=</span><span class="s1">&#39;dynamic&#39;</span><span class="p">))</span>  <span class="c1"># 使用 backref() 函数，指定 Child.parent 属性的参数</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Child 类不需要修改</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>backref()</code> 的参数会被传递给 <code>relationship()</code>，因此它俩的参数也完全一致。</p>
<h3 id="2-多对一" class="headerLink">
    <a href="#2-%e5%a4%9a%e5%af%b9%e4%b8%80" class="header-mark"></a>2. 多对一</h3><p>A many-to-one is similar to a one-to-many relationship. The difference is that this relationship is looked at from the &ldquo;many&rdquo; side.</p>
<h3 id="3-一对一" class="headerLink">
    <a href="#3-%e4%b8%80%e5%af%b9%e4%b8%80" class="header-mark"></a>3. 一对一</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;parent&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">child</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                                    <span class="n">uselist</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span>   <span class="c1"># 不使用 collection！这是关键</span>
</span></span><span class="line"><span class="cl">                                    <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;parent&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;child&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent_id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;parent.id&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">     <span class="c1"># 包含 ForeignKey 的类，此属性默认为 attribute，因此不需要 uselist=False</span>
</span></span><span class="line"><span class="cl">    <span class="n">parent</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Parent&#34;</span><span class="p">,</span> <span class="n">back_populates</span><span class="o">=</span><span class="s2">&#34;child&#34;</span><span class="p">)</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-多对多" class="headerLink">
    <a href="#4-%e5%a4%9a%e5%af%b9%e5%a4%9a" class="header-mark"></a>4. 多对多</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 多对多，必须要使用一个关联表！</span>
</span></span><span class="line"><span class="cl"><span class="n">association_table</span> <span class="o">=</span> <span class="n">Table</span><span class="p">(</span><span class="s1">&#39;association&#39;</span><span class="p">,</span> <span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;left_id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;left.id&#39;</span><span class="p">)),</span>  <span class="c1"># 约定俗成的规矩，左边是 parent</span>
</span></span><span class="line"><span class="cl">    <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;right_id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;right.id&#39;</span><span class="p">))</span>  <span class="c1"># 右边是 child</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Parent</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;left&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">children</span> <span class="o">=</span> <span class="n">relationship</span><span class="p">(</span><span class="s2">&#34;Child&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                    <span class="n">secondary</span><span class="o">=</span><span class="n">association_table</span><span class="p">)</span>  <span class="c1"># 专用参数 secondary，用于指定使用的关联表</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">__tablename__</span> <span class="o">=</span> <span class="s1">&#39;right&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>要添加反向引用时，同样可以使用 <code>backref</code> 或 <code>back_populates</code>.</p>
<h4 id="41-user2user" class="headerLink">
    <a href="#41-user2user" class="header-mark"></a>4.1 user2user</h4><p>如果多对多关系中的两边都是 user，即都是同一个表时，该怎么声明？</p>
<p>例如用户的「关注」与「粉丝」，你是 user，你的粉丝是 user，你关注的账号也是 user。</p>
<p>这个时候，关联表 <code>association_table</code> 的两个键都是 <code>user</code>，<strong>SQLAlchemy 无法区分主次，需要手动指定</strong>，为此需要使用 <code>primaryjoin</code> 和 <code>secondaryjoin</code> 两个参数。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 关联表，左侧的 user 正在关注右侧的 user</span>
</span></span><span class="line"><span class="cl"><span class="n">followers</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Table</span><span class="p">(</span><span class="s1">&#39;followers&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="s1">&#39;follower_id&#39;</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;user.id&#39;</span><span class="p">)),</span>  <span class="c1"># 左侧</span>
</span></span><span class="line"><span class="cl">    <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="s1">&#39;followed_id&#39;</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;user.id&#39;</span><span class="p">))</span>  <span class="c1"># 右侧，被关注的 user</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">UserMixin</span><span class="p">,</span> <span class="n">db</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">username</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">email</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">120</span><span class="p">),</span> <span class="n">index</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">unique</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">password_hash</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">Column</span><span class="p">(</span><span class="n">db</span><span class="o">.</span><span class="n">String</span><span class="p">(</span><span class="mi">128</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 我关注的 users</span>
</span></span><span class="line"><span class="cl">    <span class="n">followed</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="n">relationship</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;User&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="n">secondary</span><span class="o">=</span><span class="n">followers</span><span class="p">,</span>  <span class="c1"># 指定多对多关联表</span>
</span></span><span class="line"><span class="cl">        <span class="n">primaryjoin</span><span class="o">=</span><span class="p">(</span><span class="n">followers</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">follower_id</span> <span class="o">==</span> <span class="nb">id</span><span class="p">),</span>  <span class="c1"># 左侧，用于获取「我关注的 users」的 join 条件</span>
</span></span><span class="line"><span class="cl">        <span class="n">secondaryjoin</span><span class="o">=</span><span class="p">(</span><span class="n">followers</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">followed_id</span> <span class="o">==</span> <span class="nb">id</span><span class="p">),</span>  <span class="c1"># 右侧，用于获取「我的粉丝」的 join 条件</span>
</span></span><span class="line"><span class="cl">        <span class="n">lazy</span><span class="o">=</span><span class="s1">&#39;dynamic&#39;</span><span class="p">,</span>  <span class="c1"># 延迟求值，这样才能用 filter_by 等过滤函数</span>
</span></span><span class="line"><span class="cl">        <span class="n">backref</span><span class="o">=</span><span class="n">db</span><span class="o">.</span><span class="n">backref</span><span class="p">(</span><span class="s1">&#39;followers&#39;</span><span class="p">,</span> <span class="n">lazy</span><span class="o">=</span><span class="s1">&#39;dynamic&#39;</span><span class="p">))</span>  <span class="c1"># followers 也要延迟求值</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里比较绕的，就是容易搞混 <code>primaryjoin</code> 和 <code>secondaryjoin</code> 两个参数。</p>
<ol>
<li>primaryjoin：（多对多中）用于从子对象查询其父对象的 condition（child.parents），默认只考虑外键。</li>
<li>secondaryjoin：（多对多中）用于从父对象查询其所有子对象的 condition（parent.children），同样的，默认情况下只考虑外键。</li>
</ol>
<h2 id="三orm-层-的-delete-cascade-vs-foreign-key-层的-on-delete-cascade" class="headerLink">
    <a href="#%e4%b8%89orm-%e5%b1%82-%e7%9a%84-delete-cascade-vs-foreign-key-%e5%b1%82%e7%9a%84-on-delete-cascade" class="header-mark"></a>三、ORM 层 的 “delete” cascade vs. FOREIGN KEY 层的 “ON DELETE” cascade</h2><p>之前有讲过 Table 定义中的级联操作：<code>ON DELETE</code> 和 <code>ON UPDATE</code>，可以通过 <code>ForeignKey</code> 的参数指定为 <code>CASCADE</code>.</p>
<p>可 SQLAlchemy 还有一个 <code>relationship</code> 生成 SQL 语句时的配置参数 <code>cascade</code>，另外 <code>passive_deletes</code> 也可以指定为 <code>cascade</code>。</p>
<p>有这么多的 cascade，我真的是很懵。这三个 cascade 到底有何差别呢？</p>
<p>外键约束中的 <code>ON DELETE</code> 和 <code>ON UPDATE</code>，与 ORM 层的 <code>CASCADE</code> 在功能上，确实有很多重叠的地方。
但是也有很多不同：</p>
<ol>
<li>数据库层面的 <code>ON DELETE</code> 级联能高效地处理 <strong>many-to-one</strong> 的关联；我们在 <code>many</code> 方定义外键，也在这里添加 <code>ON DELETE</code> 约束。而在 ORM 层，就<strong>刚好相反</strong>。SQLAlchemy 在 <code>one</code> 方处理 <code>many</code> 方的删除操作，这意味着它更适合处理 <strong>one-to-many</strong> 的关联。</li>
<li>数据库层面上，不带 <code>ON DELETE</code> 的外键常用于防止父数据被删除，而导致子数据成为无法被索引到的垃圾数据。如果要在一个 one-to-many 映射上实现这个行为，SQLAlchemy 将外键设置为 NULL 的默认行为可以通过以下两种方式之一捕获：
<ol>
<li>最简单也最常用的方法，当然是将外键定义为 <strong>NOT NULL</strong>. 尝试将该列设为 NULL 会触发 NOT NULL constraint exception.</li>
<li>另一种更特殊的方法，是将 <code>passive_deletes</code> 标志设置为字 <code>all</code>. 这会完全禁用 SQLAlchemy 将外键列设置为 NULL 的行为，并且 DELETE 父数据而不会对子数据产生任何影响。这样才能触发数据库层面的 <code>ON DELETE</code> 约束，或者其他的触发器。</li>
<li>数据库层面的 <code>ON DELETE</code> 级联 比 ORM 层面的级联更高效。数据库可以同时在多个 relationship 中链接一系列级联操作。</li>
<li>SQLAlchemy 不需要这么复杂，因为我们通过将 passive_deletes 选项与正确配置的外键约束结合使用，提供与数据库的 <code>ON DELETE</code> 功能的平滑集成。</li>
</ol>
</li>
</ol>
<h3 id="方法一orm-层的-cascade-实现" class="headerLink">
    <a href="#%e6%96%b9%e6%b3%95%e4%b8%80orm-%e5%b1%82%e7%9a%84-cascade-%e5%ae%9e%e7%8e%b0" class="header-mark"></a>方法一：ORM 层的 cascade 实现</h3><p><code>relationship</code> 的 <code>cascade</code> 参数决定了修改父表时，什么时候子表要进行级联操作。它的可选项有（str，选项之间用逗号分隔）：</p>
<ol>
<li><code>save-update</code>：默认选项之一。在 add（对应 SQL 的 insert 或 update）一个对象的时候，会 add 所有它相关联的对象。</li>
<li><code>merge</code>：默认选项之一。在 merge（相当字典的update操作，有就替换掉，没有就合并）一个对象的时候，会 merge 所有和它相关联的对象。</li>
<li><code>expunge</code> ：移除操作的时候，会将相关联的对象也进行移除。这个操作只是从session中移除，并不会真正的从数据库中删除。</li>
<li><code>delete</code>：删除父表数据时，同时删除与它关联的数据。</li>
<li><code>delete-orphan</code>：当子对象与父对象解除关系时，删除掉此子对象（孤儿）。（其实还是没懂。。）</li>
<li><code>refresh-expire</code>：不常用。</li>
<li><code>all</code>：表示选中除 <code>delete-orphan</code> 之外的所有选项。（因此 <code>all, delete-orphan</code> 很常用，它才是真正的 <code>all</code>）</li>
</ol>
<p>默认属性是 &ldquo;save-update, merge&rdquo;.</p>
<p>这只是简略的说明，上述几个参数的详细文档见 <a href="https://docs.sqlalchemy.org/en/13/orm/cascades.html#unitofwork-cascades" target="_blank" rel="noopener noreffer">SQLAlchemy - Cascades</a></p>
<h3 id="方法二数据库层的-cascade-实现" class="headerLink">
    <a href="#%e6%96%b9%e6%b3%95%e4%ba%8c%e6%95%b0%e6%8d%ae%e5%ba%93%e5%b1%82%e7%9a%84-cascade-%e5%ae%9e%e7%8e%b0" class="header-mark"></a>方法二：数据库层的 cascade 实现</h3><ol>
<li>将 <code>ForeignKey</code> 的 <code>ondelete</code> 和 <code>onupdate</code> 参数指定为 <code>CASCADE</code>，实现数据库层面的级联。</li>
<li>为 <code>relationship</code> 添加关键字参数 <code>passive_deletes=&quot;all&quot;</code>，这样就完全禁用 SQLAlchemy 将外键列设置为 NULL 的行为，并且 DELETE 父数据不会对子数据产生任何影响。</li>
</ol>
<p>这样 DELETE 操作时，就会触发数据库的 <code>ON DELETE</code> 约束，从而级联删除子数据。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://docs.sqlalchemy.org/en/13/orm/relationships.html" target="_blank" rel="noopener noreffer">SQLAlchemy - Relationship Configuration</a></li>
<li><a href="https://docs.sqlalchemy.org/en/13/orm/cascades.html#unitofwork-cascades" target="_blank" rel="noopener noreffer">SQLAlchemy - Cascades</a></li>
<li><a href="https://ia.jifangcheng.com/p/46" target="_blank" rel="noopener noreffer">SQLAlchemy 中的 backref 和 back_populates</a></li>
<li><a href="https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-viii-followers" target="_blank" rel="noopener noreffer">The Flask Mega-Tutorial Part VIII: Followers</a></li>
<li><a href="https://github.com/hackersandslackers/sqlalchemy-tutorial" target="_blank" rel="noopener noreffer">hackersandslackers/sqlalchemy-tutorial</a></li>
</ul>
]]></content></entry><entry><title type="html">瘾的退却</title><link href="https://thiscute.world/posts/webnovel-addiction-recovery/"/><id>https://thiscute.world/posts/webnovel-addiction-recovery/</id><author><name>ryan4yin</name></author><published>2019-04-14T21:27:32+08:00</published><updated>2019-04-14T21:27:32+08:00</updated><content type="html"><![CDATA[<p>这网络小说一起头，就停不下来。
开始还只是追更新，每天看看三四本书的更新（一更或二更）就行了，说不上心满意足，但也没多么欲求不满。</p>
<p>到了三月下旬，突然就想看本新书。念头一起就一发不可收拾，只挑二三十万字的连载书看——首要原因是怕收不住手，书太长的话，废寝忘食起来自己遭罪；其次是前二十多万字都可以免费看，后面才是收费章节。</p>
<p>感觉自己陆陆续续可能看了二三十本书，五六百万字就这么过了，二三十个故事就如过眼云烟，转眼就记不得几个书名了。
就像从小到大的同学老师一样，看小说看到讲高中室友，就尝试回想我的高中宿舍，一时竟连自己的床铺都搞错了，仔细回想下，也有好几个室友的名字长相都忘记了。这还算好了，毕竟高中三年，也过了这么长时间才淡忘。这网文的故事有的光怪陆离，有的异想天开，大部分都是专注一个「爽」字，无不是金手指打怪升级的套路。千篇一律下，能记住的没几个。</p>
<p>倒也有特立独行的，因此也就印象尤其深刻，《月明见君来/云胡不喜》是这样一本文笔优美的古言，为着“云胡不喜”一句，那时突然就喜欢上了《诗经》。
还有位作者的星际言情文：《星球上的完美家园》和《未来世界之我心安处》，写得极为细腻。尤其是前者，只是他写的研究生生活，有点刺激我这个曾经信誓旦旦要考研，现在却大学文凭都拿不到的学渣。。就看不下去。</p>
<p>有段时间对日系轻小说青睐有加，觉得里头的优秀作品就是比国内网文高个档次。现在一想，其实都一样，良莠不齐，都喜欢穿越重生异世界的套路。只是看多了动漫，才对轻小说多点好感而已。网文里写的好的书也不少。</p>
<p>这两天突然就有些厌倦了，字看多了开始头疼，厌烦。就像手冲后进入了贤者时间一样。。。这样一想，这书瘾到底还是没毒品那么可怕，再怎么凶猛，疯狂上一个月，也后继乏力了，不会越陷越深。</p>
<p>这一个月深居简出，连QQ都直接掐掉了好几天。我看起小说来就是这样，别的事完全没兴致理，疯狂起来就更是变本加厉。</p>
<p>忽地又想起了自己内心敏感、性格别扭、胆子小、受不得训斥。再加上这一个月的所作所为，真是凭实力啃老+单身。</p>
<p>颓废完了，自卑，就安慰自己全国大学生占比不过3%，又想想战争年代人们的悲惨，就觉得自己已经比很多人都活得好了。
生逢盛世，国泰民安，又能找到自己喜欢的东西，而且主动地追求了。
虽然没有尽全力，但是人生苦短嘛，要及时享乐。
酸甜苦辣混一起，我总归是知足的。</p>
<p>要真能穿越我肯定不会像过去那样干，但是不能穿越也不是太可惜。我经历过的糟心事和很多人有过的绝望比起来，根本不值一提，我还能有什么不满的呢？</p>
<p>这个世界总归是不会停止转动，也不会随我心意。
我讨厌的繁文缛节在人际交往中是必不可少的，我的自卑是藏不住的，我知识上的短板也是实实在在的。</p>
<p>我还能怎么做呢？总之向前走吧，不论是被人流裹挟着，还是被自己的欲望拉扯着，都只能向前——人生是没有退路的。</p>
]]></content></entry><entry><title type="html">Python 并发编程：PoolExecutor 篇</title><link href="https://thiscute.world/posts/python-concurrency-pool-executor/"/><id>https://thiscute.world/posts/python-concurrency-pool-executor/</id><author><name>ryan4yin</name></author><published>2019-03-15T22:34:00+08:00</published><updated>2019-03-15T22:34:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，如有疏漏，还请指正。</p>
</blockquote>
<p>使用多线程（threading）和多进程（multiprocessing）完成常规的并发需求，在启动的时候 start、join 等步骤不能省，复杂的需要还要用 1-2 个队列。
随着需求越来越复杂，如果没有良好的设计和抽象这部分的功能层次，代码量越多调试的难度就越大。</p>
<p>对于需要并发执行、但是对实时性要求不高的任务，我们可以使用 concurrent.futures 包中的 PoolExecutor 类来实现。</p>
<p>这个包提供了两个执行器：线程池执行器 ThreadPoolExecutor 和进程池执行器 ProcessPoolExecutor，两个执行器提供同样的 API。</p>
<blockquote>
<p>池的概念主要目的是为了重用：让线程或进程在生命周期内可以多次使用。它减少了创建创建线程和进程的开销，提高了程序性能。重用不是必须的规则，但它是程序员在应用中使用池的主要原因。</p>
</blockquote>
<p>池，只有固定个数的线程/进程，通过 max_workers 指定。</p>
<ol>
<li>任务通过 executor.submit 提交到 executor 的任务队列，返回一个 future 对象。
<ul>
<li>Future 是常见的一种并发设计模式。一个Future对象代表了一些尚未就绪（完成）的结果，在「将来」的某个时间就绪了之后就可以获取到这个结果。</li>
</ul>
</li>
<li>任务被调度到各个 workers 中执行。但是要注意，<strong>一个任务一旦被执行，在执行完毕前，会一直占用该 worker！</strong>
<ul>
<li>**如果 workers 不够用，其他的任务会一直等待！**因此 PoolExecutor 不适合实时任务。</li>
</ul>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">concurrent.futures</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">count</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">number_list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">evaluate_item</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">count</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>  <span class="c1"># count 是无限迭代器，会一直递增。</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s2"> - </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.01</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 进程池</span>
</span></span><span class="line"><span class="cl">    <span class="n">start_time_2</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 使用 with 在离开此代码块时，自动调用 executor.shutdown(wait=true) 释放 executor 资源</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="n">concurrent</span><span class="o">.</span><span class="n">futures</span><span class="o">.</span><span class="n">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span> <span class="k">as</span> <span class="n">executor</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 将 10 个任务提交给 executor，并收集 futures</span>
</span></span><span class="line"><span class="cl">        <span class="n">futures</span> <span class="o">=</span> <span class="p">[</span><span class="n">executor</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">evaluate_item</span><span class="p">,</span> <span class="n">item</span><span class="p">)</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">number_list</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># as_completed 方法等待 futures 中的 future 完成</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 一旦某个 future 完成，as_completed 就立即返回该 future</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 这个方法，使每次返回的 future，总是最先完成的 future</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 而不是先等待任务 1，再等待任务 2...</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">future</span> <span class="ow">in</span> <span class="n">concurrent</span><span class="o">.</span><span class="n">futures</span><span class="o">.</span><span class="n">as_completed</span><span class="p">(</span><span class="n">futures</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># result 返回被调用函数的返回值</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 如果调用抛出了异常，result 会抛出同样的异常</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 如果调用被取消，result 抛出 CancelledError 异常</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">future</span><span class="o">.</span><span class="n">result</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span> <span class="p">(</span><span class="s2">&#34;Thread pool execution in &#34;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start_time_2</span><span class="p">),</span> <span class="s2">&#34;seconds&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的代码中，item 为 1 2 3 4 5 的五个任务会一直占用所有的 workers，而 6 7 8 9 10 这五个任务会永远等待！！！</p>
<h2 id="api-详细说明" class="headerLink">
    <a href="#api-%e8%af%a6%e7%bb%86%e8%af%b4%e6%98%8e" class="header-mark"></a>API 详细说明</h2><p>concurrent.futures 包含三个部分的 API：</p>
<ol>
<li>PoolExecutor：也就是两个执行器的 API
<ul>
<li>构造器：主要的参数是 max_workers，用于指定线程池大小（或者说 workers 个数）</li>
<li><code>submit(fn, *args, **kwargs)</code>：将任务函数 fn 提交到执行器，args 和 kwargs 就是 fn 需要的参数。
<ul>
<li>返回一个 future，用于获取结果</li>
</ul>
</li>
<li><code>map(func, *iterables, timeout=None, chunksize=1)</code>：当任务是同一个，只有参数不同时，可以用这个方法代替 submit。iterables 的每个元素对应 func 的一组参数。
<ul>
<li>返回一个 futures 的迭代器</li>
</ul>
</li>
<li><code>shutdown(wait=True)</code>：关闭执行器，一般都使用 with 管理器自动关闭。</li>
</ul>
</li>
<li>Future：任务被提交给执行器后，会返回一个 future
<ul>
<li><code>future.result(timout=None)</code>：<strong>最常用的方法</strong>，返回任务的结果。如果任务尚未结束，这个方法会一直等待！
<ul>
<li>timeout 指定超时时间，为 None 时没有超时限制。超时会抛出 concurrent.futures.TimeoutError 异常。</li>
<li>如果调用抛出了异常，result 会抛出同样的异常</li>
<li>如果调用被取消，result 抛出 CancelledError 异常</li>
</ul>
</li>
<li><code>exception(timeout=None)</code>：返回任务抛出的异常。和 result() 一样，也会等待任务结束。
<ul>
<li>timeout 参数跟 result 一致，超时会抛出 concurrent.futures.TimeoutError 异常。
<ul>
<li>如果调用抛出了异常，exception 会返回同样的异常，否则返回 None</li>
<li>如果调用被取消，result 抛出 CancelledError 异常</li>
</ul>
</li>
</ul>
</li>
<li><code>cancel()</code>：取消此任务</li>
<li><code>add_done_callback(fn)</code>：future 完成后，会执行 <code>fn(future)</code>。</li>
<li><code>running()</code>：是否正在运行</li>
<li><code>done()</code>：future 是否已经结束了，boolean</li>
<li>&hellip;详见官方文档</li>
</ul>
</li>
<li>模块带有的实用函数
<ul>
<li><code>concurrent.futures.as_completed(fs, timeout=None)</code>：等待 fs （futures iterable）中的 future 完成
<ul>
<li>一旦 fs 中的某 future 完成了，这个函数就立即返回该 future。</li>
<li>这个方法，使每次返回的 future，总是最先完成的 future。而不是先等待任务 1，再等待任务 2&hellip;</li>
<li>常通过 <code>for future in as_completed(fs):</code> 使用此函数。</li>
</ul>
</li>
<li><code>concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)</code>：一直等待，直到 return_when 所指定的事发生，或者 timeout
<ul>
<li>return_when 有三个选项：ALL_COMPLETED（fs 中的 futures 全部完成），FIRST__COMPLETED（fs 中任意一个 future 完成）还有 FIRST_EXCEPTION（某任务抛出异常）</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="future-设计模式" class="headerLink">
    <a href="#future-%e8%ae%be%e8%ae%a1%e6%a8%a1%e5%bc%8f" class="header-mark"></a>Future 设计模式</h2><p>这里的 PoolExecutor 的特点，在于它使用了 Future 设计模式，使任务的执行，与结果的获取，变成一个异步的流程。
**我们先通过 submit/map 将任务放入任务队列，这时任务就已经开始执行了！**然后我们在需要的时候，通过 future 获取结果，或者直接 <code>add_done_callback(fn)</code>。</p>
<p>这里任务的执行是在新的 workers 中的，主进程/线程不会阻塞，因此主线程可以干其他的事。这种方式被称作异步编程。</p>
<h2 id="画外" class="headerLink">
    <a href="#%e7%94%bb%e5%a4%96" class="header-mark"></a>画外</h2><p>concurrent.futures 基于 multiprocessing.pool 实现，因此实际上它比直接使用 线程/进程 的 Pool 要慢一点。但是它提供了更方便简洁的 API。</p>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="http://www.dongwm.com/post/78/" target="_blank" rel="noopener noreffer">使用Python进行并发编程-PoolExecutor篇</a></li>
<li><a href="https://github.com/laixintao/python-parallel-programming-cookbook-cn" target="_blank" rel="noopener noreffer">Python Parallel Programming Cookbook</a></li>
<li><a href="https://docs.python.org/3/library/concurrent.futures.html" target="_blank" rel="noopener noreffer">concurrent.futures — Launching parallel tasks</a></li>
<li><a href="https://www.cnblogs.com/kirito-c/p/10306133.html" target="_blank" rel="noopener noreffer">进程线程协程与并发并行</a></li>
<li><a href="https://www.jianshu.com/p/fea4584d2890" target="_blank" rel="noopener noreffer">并行设计模式（一）&ndash; Future模式</a></li>
</ul>
]]></content></entry><entry><title type="html">Python 异步编程笔记：asyncio</title><link href="https://thiscute.world/posts/python-asyncio/"/><id>https://thiscute.world/posts/python-asyncio/</id><author><name>ryan4yin</name></author><published>2019-02-14T13:11:00+08:00</published><updated>2019-02-14T13:11:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，不保证正确。</p>
</blockquote>
<p>虽然说看到很多人不看好 asyncio，但是这个东西还是必须学的。。
基于协程的异步，在很多语言中都有，学会了 Python 的，就一通百通。</p>
<h2 id="一生成器-generator" class="headerLink">
    <a href="#%e4%b8%80%e7%94%9f%e6%88%90%e5%99%a8-generator" class="header-mark"></a>一、生成器 generator</h2><p>Python 的 asyncio 是通过 generator 实现的，要学习 async，先得复习下 generator.</p>
<h3 id="1-yield" class="headerLink">
    <a href="#1-yield" class="header-mark"></a>1. yield</h3><p>众所周知，yield 是用于定义 generator 函数的关键字，调用该函数，会返回一个 generator</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">yield</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">yield</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> 
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span><span class="p">()</span>  <span class="c1"># 返回的是 generator</span>
</span></span><span class="line"><span class="cl"><span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">f</span> <span class="n">at</span> <span class="mh">0x7f672c460570</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">f</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>  <span class="c1"># 通过 next 方法从 generator 获取值</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="o">.</span><span class="fm">__next__</span><span class="p">()</span>  <span class="c1"># next 方法实际是调用了 generator 的 __next__ 方法</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>  <span class="c1"># 生成器运行结束，产生一个 StopIteration 的 exception</span>
</span></span><span class="line"><span class="cl"><span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">  <span class="n">File</span> <span class="s2">&#34;&lt;stdin&gt;&#34;</span><span class="p">,</span> <span class="n">line</span> <span class="mi">1</span><span class="p">,</span> <span class="ow">in</span> <span class="o">&lt;</span><span class="n">module</span><span class="o">&gt;</span>
</span></span><span class="line"><span class="cl"><span class="ne">StopIteration</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>每次调用 next，generator 都只会运行到下一个 yield 关键字所在行，返回 yield 右侧的对象，然后暂停在该处，等待下一次 next 调用。</p>
<p>从上面的例子看，yield 就是延迟求值而已。**但是 yield 还有一个特性，就是它是一个 expression，有返回值！**看例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-Python" data-lang="Python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="n">r</span> <span class="o">=</span> <span class="k">yield</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">yield</span> <span class="n">r</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> 
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="n">func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>  <span class="c1"># 通过 next 调用，yield 的返回值为 None</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g2</span> <span class="o">=</span> <span class="n">func</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">next</span><span class="p">(</span><span class="n">g2</span><span class="p">)</span>  <span class="c1"># 首先需要通过 next 调用，运行到 yield 语句处</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="n">g2</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="mi">419</span><span class="p">)</span>  <span class="c1"># 现在用 send 方法，这会将当前所在的 yield 语句的值设置为你 send 的值，也就是 419</span>
</span></span><span class="line"><span class="cl"><span class="mi">419</span>  <span class="c1"># 然后 generator 运行到下一个 yield，返回右边的值并暂停</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>generator 有四个实例函数：<strong>next</strong>、send 是刚刚已经介绍了的，此外还有 throw 用于从 yield 所在处抛出 Exception，和 close 用于关闭 Generator。详见 <a href="https://docs.python.org/3/reference/expressions.html#generator-iterator-methods" target="_blank" rel="noopener noreffer">Generator-iterator methods</a></p>
<h3 id="2-yield-from-iterable" class="headerLink">
    <a href="#2-yield-from-iterable" class="header-mark"></a>2. yield from <iterable></h3><p>可以理解成是 <code>yield &lt;value&gt; from &lt;iterable&gt;</code>，每次调用时它都会从 &lt;iterable&gt; 中取值，直到遇到 StopIteration。才会从下一个 yield 取值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">yield from</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>  <span class="c1"># iterable</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">yield</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">yield from</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># iterable</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> 
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">f</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当然，<code>yield from &lt;iterable&gt;</code> 也是一个 expression，也有值。它的值就是 StopIteration 异常的第一个参数，内置类型的这个值都是 None.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="n">r</span> <span class="o">=</span> <span class="k">yield from</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>     <span class="k">yield</span> <span class="sa">f</span><span class="s2">&#34;value of yield from is </span><span class="si">{</span><span class="n">r</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span> 
</span></span><span class="line"><span class="cl"><span class="o">&gt;&gt;&gt;</span> <span class="nb">list</span><span class="p">(</span><span class="n">f</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;value of yield from is None&#39;</span><span class="p">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>当 &lt;iterable&gt; 是 generator 时，<code>yield from</code> 会直接将函数调用委托给这个子 generator，这里的调用包括了前面说过的 next、send、throw、close 四个函数。
并直接将 sub generator yield 的值 yield 给 caller.</p>
<h3 id="3-yield-和-return-混用会发生什么" class="headerLink">
    <a href="#3-yield-%e5%92%8c-return-%e6%b7%b7%e7%94%a8%e4%bc%9a%e5%8f%91%e7%94%9f%e4%bb%80%e4%b9%88" class="header-mark"></a>3. yield 和 return 混用会发生什么？</h3><p>generator 中的 <code>return value</code>，语义上等同于 <code>rasie StopIteration(value)</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt;&gt;&gt; def f<span class="o">()</span>:
</span></span><span class="line"><span class="cl">...     yield <span class="m">1</span>
</span></span><span class="line"><span class="cl">...     <span class="k">return</span> <span class="m">2</span>
</span></span><span class="line"><span class="cl">...     yield <span class="m">3</span>  <span class="c1"># 永远不会被执行</span>
</span></span><span class="line"><span class="cl">... 
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">g</span> <span class="o">=</span> f<span class="o">()</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; next<span class="o">(</span>g<span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="m">1</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; next<span class="o">(</span>g<span class="o">)</span>  <span class="c1"># return 引发 StopIteration</span>
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;&lt;input&gt;&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">StopIteration: <span class="m">2</span>
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; next<span class="o">(</span>g<span class="o">)</span>  <span class="c1"># 再次调用，StopIteration 变成无参了。</span>
</span></span><span class="line"><span class="cl">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span></span><span class="line"><span class="cl">  File <span class="s2">&#34;&lt;input&gt;&#34;</span>, line 1, in &lt;module&gt;
</span></span><span class="line"><span class="cl">StopIteration
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到 return 引发了 StopIteration 异常，而 return 的值则成了该异常的第一个参数。</p>
<p>之前说过 <code>yield from &lt;sub generator&gt;</code> 表达式的值，就是该 &lt;sub generator&gt; 的 StopIteration 异常的第一个参数，因此：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt;&gt;&gt; def f2<span class="o">()</span>:
</span></span><span class="line"><span class="cl">...     <span class="nv">a</span> <span class="o">=</span> yield from f<span class="o">()</span>
</span></span><span class="line"><span class="cl">...     yield a  <span class="c1"># a 是 f() 中 return 的值</span>
</span></span><span class="line"><span class="cl">...     
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; list<span class="o">(</span>f2<span class="o">())</span>
</span></span><span class="line"><span class="cl"><span class="o">[</span>1, 2<span class="o">]</span>
</span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><a href="https://www.python.org/dev/peps/pep-0479/#background-information" target="_blank" rel="noopener noreffer">PEP 479 &ndash; Change StopIteration handling inside generators</a> 修改了StopIteration 的行为，该 PEP 使人为 raise 的 StopIteration 引发一个 RuntimeError。
该 PEP 在 Python 3.5 版本添加到 <strong>future</strong> 中，并在 Python 3.7 成为默认行为。
因此除非你确实想要引发异常，否则应该使用 return 来结束一个 generator 并返回值。</p>
</blockquote>
<h2 id="二异步io协程与非阻塞-io" class="headerLink">
    <a href="#%e4%ba%8c%e5%bc%82%e6%ad%a5io%e5%8d%8f%e7%a8%8b%e4%b8%8e%e9%9d%9e%e9%98%bb%e5%a1%9e-io" class="header-mark"></a>二、异步IO、协程与非阻塞 IO</h2><p>先了解一下 <a href="https://www.cnblogs.com/kirito-c/p/10306133.html" target="_blank" rel="noopener noreffer">进程线程协程与并发并行</a> 和 <a href="https://www.cnblogs.com/kirito-c/p/10306234.html" target="_blank" rel="noopener noreffer">各种 IO 模型</a></p>
<h2 id="三asyncio-的简单使用" class="headerLink">
    <a href="#%e4%b8%89asyncio-%e7%9a%84%e7%ae%80%e5%8d%95%e4%bd%bf%e7%94%a8" class="header-mark"></a>三、asyncio 的简单使用</h2><p>asyncio 引入了两个新关键字：async 和 await，其中 async 能放在三个地方：</p>
<ol>
<li>async def：用于定义异步函数和异步生成器
<ul>
<li>不含有 yield 的是 async def 定义的是协程函数（coroutine function），调用该函数返回协程对象（coroutine object），协程对象需要通过 EventLoop 运行。</li>
<li>内部含有 yield 的 async def 定义的是异步生成器函数（asynchronous generator function），调用该函数返回异步生成器（async_generator）
<ul>
<li>异步生成器只能用在 Coroutine 中</li>
</ul>
</li>
<li>async def 中不允许使用 yield from</li>
</ul>
</li>
<li>async for：表示 for 迭代的是一个异步生成器，该 for 循环的每一次迭代，都是异步的。
<ul>
<li>只能用在 async def 的内部</li>
</ul>
</li>
<li>async with：表示 with 管理的是一个异步上下文管理器（asynchronous context manager）
<ul>
<li>该 context manager 的 enter 和 exit 两个步骤是异步的</li>
<li>只能用在 async def 的内部</li>
</ul>
</li>
</ol>
<p>注意异步 generator、context manager，它的 protocol 都和同步的不同，不能混为一谈。
具体而言，对同步 protocol <strong>xxx</strong> 函数，它的异步版本为 <strong>axxx</strong>，就是加个 a。</p>
<p>而 await，就相当于 yield from，差别在于 await 是异步的。还有我们关心的是 await 表达式的值，而 yield from 中我们更关心它向上层 yield 的值。</p>
<p>在 yield from 中，当前生成器调用另一个生成器，当前生成器会挂起，直到另一个生成器返回。</p>
<p>但是在 await 中，当前 Coroutine 挂起时， eventloop 会寻找其他 task 来跑，这就利用上了 IO 漫长的等待时间。</p>
<p>async for 是每次迭代都会 await 一次，如果迭代对象是 IO 操作，这个 IO 等待时间就会被利用上。</p>
<p>async with 也是同样，如果 context 的 enter 和 exit 是 IO 操作，这个 IO 时间就会被 eventloop 用于运行其他 task.</p>
<p>使用 asyncio 时，我们要用 async def 将所有的 IO 操作都定义成异步操作。然后在调用时，都使用 await/async for/async with 来调用。</p>
<h2 id="四coroutinetask-和-future" class="headerLink">
    <a href="#%e5%9b%9bcoroutinetask-%e5%92%8c-future" class="header-mark"></a>四、Coroutine、Task 和 Future</h2><p>首先，每个协程对象，都是一个独立的协程单元，协程对象之间可以异步运行。</p>
<p>协程需要放到 EventLoop 内运行，要运行一个协程 a，有三种方法：</p>
<ol>
<li>通过 asyncio.run(coro) 运行一个协程。
<ul>
<li>该方法会新建一个 EventLoop</li>
</ul>
</li>
<li>在另一个协程 b 中通过 await 调用 a。当 b 运行时， a 也会被 task 运行。</li>
<li>通过 asyncio.create_task(coro)，将需要运行的协程包装成 task，然后通过 task 相关的方法来异步运行它们。
<ul>
<li>asyncio.gather(*awaitable_objects): 并发执行所有的 task，阻塞到所有 task 结束。返回一个 result 列表。result 的列表顺序和 future 的顺序一致</li>
<li>asyncio.as_completed(aws, *, loop=None, timeout=None)，和 gather 的区别在于，它返回一个异步迭代器，每次迭代都返回最先完成的一个 future.</li>
</ul>
</li>
</ol>
<blockquote>
<p>concurrent.futures 是进程线程的异步执行，而 asyncio 是基于协程的单线程异步执行</p>
</blockquote>
<h2 id="五参考" class="headerLink">
    <a href="#%e4%ba%94%e5%8f%82%e8%80%83" class="header-mark"></a>五、参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/25228075" target="_blank" rel="noopener noreffer">从0到1，Python异步编程的演进之路</a></li>
<li><a href="https://www.zhihu.com/question/294188439/answer/555273313" target="_blank" rel="noopener noreffer">怎么掌握 asyncio</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27258289" target="_blank" rel="noopener noreffer">Python Async/Await入门指南</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30275154" target="_blank" rel="noopener noreffer">谈谈Python协程技术的演进</a></li>
<li><a href="https://docs.python.org/3/reference/compound_stmts.html#coroutines" target="_blank" rel="noopener noreffer">Python Doc - Coroutines</a></li>
<li><a href="https://docs.python.org/3/library/asyncio.html" target="_blank" rel="noopener noreffer">Python Doc - asyncio</a></li>
</ul>
]]></content></entry><entry><title type="html">SQLAlchemy 学习笔记（二）：ORM 基础</title><link href="https://thiscute.world/posts/sqlalchemy-notes-2-orm-basics/"/><id>https://thiscute.world/posts/sqlalchemy-notes-2-orm-basics/</id><author><name>ryan4yin</name></author><published>2019-02-11T19:52:00+08:00</published><updated>2019-02-11T19:52:00+08:00</updated><content type="html"><![CDATA[<p>照例先看层次图</p>
<figure><img src="/images/sqlalchemy-notes/sqlalchemy-arch.webp"/><figcaption>
            <h4>SQLAlchemy 层次结构</h4>
        </figcaption>
</figure>

<h3 id="一声明映射关系" class="headerLink">
    <a href="#%e4%b8%80%e5%a3%b0%e6%98%8e%e6%98%a0%e5%b0%84%e5%85%b3%e7%b3%bb" class="header-mark"></a>一、声明映射关系</h3><p>使用 ORM 时，我们首先需要定义要操作的表（通过 <code>Table</code>），然后再定义该表对应的 Python class，并声明两者之间的映射关系（通过 <code>Mapper</code>）。</p>
<p>方便起见，SQLAlchemy 提供了 Declarative 系统来一次完成上述三个步骤，Declarative 系统提供 base class，这个 base class 会为继承了它的 Python class（可称作 model）创建 Table，并维护两者的映射关系。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy.ext.declarative</span> <span class="kn">import</span> <span class="n">declarative_base</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">SQLAlchemy</span> <span class="kn">import</span> <span class="n">Column</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">String</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Base</span> <span class="o">=</span> <span class="n">declarative_base</span><span class="p">()</span>  <span class="c1"># 拿到 Base 类</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">username</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  <span class="c1"># 添加 index 提升搜索效率</span>
</span></span><span class="line"><span class="cl">    <span class="n">fullname</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">password</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">32</span><span class="p">))</span>  <span class="c1"># 真实情况下一般只存 hash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;&lt;User </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">username</span><span class="si">}</span><span class="s2">&gt;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这样就声明好了一个对象-关系映射，上一篇文章说过所有的 Table 都在某个 MetaData 中，可以通过 <code>Base.metadata</code> 获取它。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">Base</span><span class="o">.</span><span class="n">metadata</span><span class="o">.</span><span class="n">create_all</span><span class="p">(</span><span class="n">engine</span><span class="p">)</span>  <span class="c1"># 通过 metadata 创建表（或者说生成模式 schema）</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>engine 的创建请见上篇文档 <a href="https://www.cnblogs.com/kirito-c/p/10269485.html" target="_blank" rel="noopener noreffer">SQLAlchemy 学习笔记（一）：Engine 与 SQL 表达式语言</a></p>
<h4 id="约束条件" class="headerLink">
    <a href="#%e7%ba%a6%e6%9d%9f%e6%9d%a1%e4%bb%b6" class="header-mark"></a>约束条件</h4><blockquote>
<p>可参考 <a href="https://www.cnblogs.com/kirito-c/p/10295693.html" target="_blank" rel="noopener noreffer">SQL 基础笔记（三）：约束</a> 与 <a href="https://www.cnblogs.com/kirito-c/p/10269485.html#%E8%A1%A8%E5%AE%9A%E4%B9%89%E4%B8%AD%E7%9A%84%E7%BA%A6%E6%9D%9F" target="_blank" rel="noopener noreffer">SQLAlchemy 学习笔记（一）：Engine 与 SQL 表达式语言 - 表定义中的约束</a></p>
</blockquote>
<p>使用 ORM 来定义约束条件，与直接使用 SQL 表达式语言定义很类似，也有两种方法：</p>
<ol>
<li>直接将约束条件作为 <code>Column</code>、<code>ForeignKey</code> 的参数传入。这种方式最简洁，也最常用。</li>
<li>使用 <code>UniqueConstraint</code>、<code>CheckConstraint</code> 等类构造约束，然后放入 <code>__table_args__</code> 属性中。举例：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python3" data-lang="python3"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">id</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">username</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">32</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  <span class="c1"># 添加 index 提升搜索效率</span>
</span></span><span class="line"><span class="cl">    <span class="n">fullname</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">64</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">password</span> <span class="o">=</span> <span class="n">Column</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="mi">32</span><span class="p">))</span>  <span class="c1"># 真实情况下一般只存 hash</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 顾名思义，这是 `Table` 类的参数的序列。里面的约束条件会被用于构建 __table__</span>
</span></span><span class="line"><span class="cl">    <span class="n">__table_args__</span> <span class="o">=</span> <span class="p">(</span><span class="n">UniqueConstraint</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;c_user&#39;</span><span class="p">),)</span>  <span class="c1"># username 的唯一性约束</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="sa">f</span><span class="s2">&#34;&lt;User </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">username</span><span class="si">}</span><span class="s2">&gt;&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="二获取-session" class="headerLink">
    <a href="#%e4%ba%8c%e8%8e%b7%e5%8f%96-session" class="header-mark"></a>二、获取 session</h3><p>上一节讲 engine 时，我们是通过 connection 来与数据库交互，而在 ORM 中我们使用 Session 访问数据库。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy.orm</span> <span class="kn">import</span> <span class="n">sessionmaker</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">Session</span> <span class="o">=</span> <span class="n">sessionmaker</span><span class="p">(</span><span class="n">bind</span><span class="o">=</span><span class="n">engine</span><span class="p">)</span>  <span class="c1"># 获取 session</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="三增删改查" class="headerLink">
    <a href="#%e4%b8%89%e5%a2%9e%e5%88%a0%e6%94%b9%e6%9f%a5" class="header-mark"></a>三、增删改查</h3><p>直接使用 SQL 表达式语言时，我们使用 insert()、select()、update()、delete() 四个函数构造 SQL，使用 where() 添加条件，使用 model.join(another_model) 进行 join 操作。
而使用 ORM 时，数据库操作不再与 SQL 直接对应。我们现在是通过操作 Python 对象来操作数据库了。</p>
<p>现在，我们通过 db.session.add()、db.session.delete() 进行添加与删除，使用 db.session.query(Model) 进行查询，通过 filter 和 filter_by 添加过滤条件。
而修改，则是先查询出对应的 row 对象，直接修改这个对象，然后 commit 就行。</p>
<ol>
<li>增添：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ed_user</span> <span class="o">=</span> <span class="n">User</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;ed&#39;</span><span class="p">,</span> <span class="n">fullname</span><span class="o">=</span><span class="s1">&#39;Ed Jones&#39;</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="s1">&#39;edspassword&#39;</span><span class="p">)</span>  <span class="c1"># 用构造器构造对象</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">ed_user</span><span class="p">)</span>  <span class="c1"># 添加，此外还有批量添加 add_all([user1, user2...])</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>  <span class="c1"># 必须手动 commit</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>修改：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ed_user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">)</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;ed&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>  <span class="c1"># 先获取到 User 对象</span>
</span></span><span class="line"><span class="cl"><span class="n">ed_user</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s1">&#39;f8s7ccs&#39;</span>  <span class="c1"># 改了密码</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>  <span class="c1"># 提交</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 批量修改</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">home</span><span class="o">==</span><span class="s1">&#39;shanghai&#39;</span><span class="p">)</span> \
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">User</span><span class="o">.</span><span class="n">login_num</span><span class="p">:</span><span class="mi">0</span><span class="p">})</span>  <span class="c1"># 将所有上海的用户的 login_num 设为 0</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>删除：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">ed_user</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">)</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;ed&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>  <span class="c1"># 先获取到 User 对象</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">ed_user</span><span class="p">)</span>  <span class="c1"># 直接删除（session 知道 ed_user 属于哪个表）</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>  <span class="c1"># 提交</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 批量删除</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">home</span><span class="o">==</span><span class="s1">&#39;shanghai&#39;</span><span class="p">)</span> \
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">delete</span><span class="p">()</span>  <span class="c1"># 删除所有上海的用户</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>同样的，也可以在外面检查异常，然后调用 <code>session.rollback()</code> 实现失败回滚。</p>
<h3 id="四进阶查询" class="headerLink">
    <a href="#%e5%9b%9b%e8%bf%9b%e9%98%b6%e6%9f%a5%e8%af%a2" class="header-mark"></a>四、进阶查询</h3><ol>
<li>filter_by：使用关键字参数进行过滤，前面的演示中已经用过多次了。</li>
<li>filter：它对应 SQL 表达式语言中的 where，支持各种复杂的 SQL 语法。</li>
<li>group_by: 通过指定 column 分组</li>
<li>distinct(): 去重</li>
<li>join(): 关联</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s1">&#39;ed&#39;</span><span class="p">)</span>  <span class="c1"># 这个等同于 filter_by，但是更繁琐</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span> <span class="o">!=</span> <span class="s1">&#39;ed&#39;</span><span class="p">)</span>  <span class="c1"># 不等于，这个就是 filter_by 无法做到的了</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">like</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%e</span><span class="s1">d%&#39;</span><span class="p">))</span>  <span class="c1"># SQL like 的 like 语法</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">in_</span><span class="p">([</span><span class="s1">&#39;ed&#39;</span><span class="p">,</span> <span class="s1">&#39;wendy&#39;</span><span class="p">,</span> <span class="s1">&#39;jack&#39;</span><span class="p">]))</span>  <span class="c1"># 包含</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查询还可以嵌套</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">in_</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">like</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%e</span><span class="s1">d%&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="o">~</span><span class="n">User</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">in_</span><span class="p">([</span><span class="s1">&#39;ed&#39;</span><span class="p">,</span> <span class="s1">&#39;wendy&#39;</span><span class="p">,</span> <span class="s1">&#39;jack&#39;</span><span class="p">]))</span>  <span class="c1"># 不包含</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="kc">None</span><span class="p">)</span>  <span class="c1"># NULL 对应 Python 的 None</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">or_</span><span class="p">,</span> <span class="n">and_</span><span class="p">,</span> <span class="n">in_</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">or_</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s1">&#39;ed&#39;</span><span class="p">,</span> <span class="n">User</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s1">&#39;wendy&#39;</span><span class="p">))</span>  <span class="c1"># OR 语法</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">group_by</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>  <span class="c1"># 分组</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span><span class="o">.</span><span class="n">distinct</span><span class="p">()</span>  <span class="c1"># 去重</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">func</span>  <span class="c1"># SQL 函数包</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">func</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span><span class="p">))</span><span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">xxx</span><span class="o">=</span><span class="n">xxx</span><span class="p">)</span>  <span class="c1"># 使用 count 函数</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># join 关联</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 默认使用内联（inner），即只取两表的交集</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">,</span> <span class="n">Address</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">id</span><span class="o">==</span><span class="n">Address</span><span class="o">.</span><span class="n">user_id</span><span class="p">)</span>  <span class="c1"># 方法一</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">Address</span><span class="p">)</span><span class="o">.</span>\  <span class="c1"># 方法二</span>
</span></span><span class="line"><span class="cl">    <span class="nb">filter</span><span class="p">(</span><span class="n">Address</span><span class="o">.</span><span class="n">email_address</span><span class="o">==</span><span class="s1">&#39;jack@google.com&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 外联 outer join，将另一表的列联结到主表，没有的行为 NULL</span>
</span></span><span class="line"><span class="cl"><span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">)</span><span class="o">.</span><span class="n">outerjoin</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">addresses</span><span class="p">)</span> \
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">Address</span><span class="o">.</span><span class="n">email_address</span><span class="o">==</span><span class="s1">&#39;jack@google.com&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="执行查询获取数据" class="headerLink">
    <a href="#%e6%89%a7%e8%a1%8c%e6%9f%a5%e8%af%a2%e8%8e%b7%e5%8f%96%e6%95%b0%e6%8d%ae" class="header-mark"></a>执行查询，获取数据</h4><p>查询返回 query 对象，但 SQL 还没有被执行，直到你调用下列几个方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 构造 query 对象</span>
</span></span><span class="line"><span class="cl"><span class="n">query</span> <span class="o">=</span> <span class="n">session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">User</span><span class="p">)</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">like</span><span class="p">(</span><span class="s1">&#39;</span><span class="si">%e</span><span class="s1">d&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">order_by</span><span class="p">(</span><span class="n">User</span><span class="o">.</span><span class="n">id</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. all 返回所有结果的列表</span>
</span></span><span class="line"><span class="cl"><span class="n">res_list</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">all</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. first 先在 SQL 中加入限制 `limit 1`，然后执行。</span>
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 3. one 执行 sql 并获取所有结果</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果结果不止一行，抛出 MultipleResultsFound Error！！！</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 如果结果为空，抛出 NoResultFound Error ！！！</span>
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">one</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mf">4.</span> <span class="n">one_or_none</span> <span class="n">差别在于结果为空</span><span class="err">，</span><span class="n">它不抛出异常</span><span class="err">，</span><span class="n">而是返回</span> <span class="kc">None</span>
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">query</span><span class="o">.</span><span class="n">one_or_none</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h3><ul>
<li><a href="https://docs.sqlalchemy.org/en/latest/orm/tutorial.html" target="_blank" rel="noopener noreffer">SQLAlchemy 对象关系入门</a></li>
<li><a href="https://docs.sqlalchemy.org/en/latest/orm/basic_relationships.html" target="_blank" rel="noopener noreffer">SQLAlchemy ORM 的关联映射定义：一对多、多对多</a></li>
<li><a href="https://github.com/hackersandslackers/sqlalchemy-tutorial" target="_blank" rel="noopener noreffer">hackersandslackers/sqlalchemy-tutorial</a></li>
</ul>
]]></content></entry><entry><title type="html">WebSocket、HTTP/2 与 gRPC</title><link href="https://thiscute.world/posts/websocket-http2-and-grpc/"/><id>https://thiscute.world/posts/websocket-http2-and-grpc/</id><author><name>ryan4yin</name></author><published>2019-02-11T18:26:36+08:00</published><updated>2019-02-11T18:26:36+08:00</updated><content type="html"><![CDATA[<h2 id="一websocket" class="headerLink">
    <a href="#%e4%b8%80websocket" class="header-mark"></a>一、WebSocket</h2><p>WebSocket 是一个双向通信协议，它在握手阶段采用 HTTP/1.1 协议（暂时不支持 HTTP/2）。</p>
<p>握手过程如下：</p>
<ol>
<li>首先客户端向服务端发起一个特殊的 HTTP 请求，其消息头如下：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">GET /chat HTTP/1.1  // 请求行
</span></span><span class="line"><span class="cl">Host: server.example.com
</span></span><span class="line"><span class="cl">Upgrade: websocket  // required
</span></span><span class="line"><span class="cl">Connection: Upgrade // required
</span></span><span class="line"><span class="cl">Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== // required，一个 16bits 编码得到的 base64 串
</span></span><span class="line"><span class="cl">Origin: http://example.com  // 用于防止未认证的跨域脚本使用浏览器 websocket api 与服务端进行通信
</span></span><span class="line"><span class="cl">Sec-WebSocket-Protocol: chat, superchat  // optional, 子协议协商字段
</span></span><span class="line"><span class="cl">Sec-WebSocket-Version: 13
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>如果服务端支持该版本的 WebSocket，会返回 101 响应，响应标头如下：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">HTTP/1.1 101 Switching Protocols  // 状态行
</span></span><span class="line"><span class="cl">Upgrade: websocket   // required
</span></span><span class="line"><span class="cl">Connection: Upgrade  // required
</span></span><span class="line"><span class="cl">Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo= // required，加密后的 Sec-WebSocket-Key
</span></span><span class="line"><span class="cl">Sec-WebSocket-Protocol: chat // 表明选择的子协议
</span></span></code></pre></td></tr></table>
</div>
</div><p>握手完成后，接下来的 TCP 数据包就都是 WebSocket 协议的帧了。</p>
<p>可以看到，这里的握手不是 TCP 的握手，而是在 TCP 连接内部，从 HTTP/1.1 upgrade 到 WebSocket 的握手。</p>
<p>WebSocket 提供两种协议：不加密的 <code>ws://</code> 和 加密的 <code>wss://</code>. 因为是用 HTTP 握手，它和 HTTP 使用同样的端口：ws 是 80（HTTP），wss 是 443（HTTPS）</p>
<p>在 Python 编程中，可使用 <a href="https://github.com/aaugustin/websockets" target="_blank" rel="noopener noreffer">websockets</a> 实现的异步 WebSocket 客户端与服务端。此外 aiohttp 也提供了 WebSocket 支持。</p>
<p><strong>Note</strong>：如果你搜索 Flask 的 WebScoket 插件，得到的第一个结果很可能是 <a href="https://github.com/miguelgrinberg/python-socketio" target="_blank" rel="noopener noreffer">Flask-SocketIO</a>。但是 <strong>Flask-ScoektIO</strong> 使用的是它独有的 SocketIO 协议，并不是标准的 WebSocket。只是它刚好提供与 WebSocket 相同的功能而已。</p>
<p>SocketIO 的优势在于只要 Web 端使用了 SocketIO.js，就能支持该协议。而纯 WS 协议，只有较新的浏览器才支持。对于客户端非 Web 的情况，更好的选择可能是使用 Flask-Sockets。</p>
<h3 id="js-api" class="headerLink">
    <a href="#js-api" class="header-mark"></a>JS API</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// WebSocket API
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="s1">&#39;ws://websocket.example.com&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Show a connected message when the WebSocket is opened.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">socket</span><span class="p">.</span><span class="nx">onopen</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;WebSocket is connected.&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Handle messages sent by the server.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">socket</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Handle any error that occurs.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">socket</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;WebSocket Error: &#39;</span> <span class="o">+</span> <span class="nx">error</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二http2" class="headerLink">
    <a href="#%e4%ba%8chttp2" class="header-mark"></a>二、HTTP/2</h2><p>HTTP/2 于 2015 年标准化，主要目的是优化性能。其特性如下：</p>
<ol>
<li>二进制协议：HTTP/2 的消息头使用二进制格式，而非文本格式。并且使用专门设计的 HPack 算法压缩。</li>
<li>多路复用（Multiplexing）：就是说 HTTP/2 可以重复使用同一个 TCP 连接，并且连接是多路的，多个请求或响应可以同时传输。
<ul>
<li>对比之下，HTTP/1.1 的长连接也能复用 TCP 连接，但是只能串行，不能“多路”。</li>
</ul>
</li>
<li>服务器推送：服务端能够直接把资源推送给客户端，当客户端需要这些文件的时候，它已经在客户端了。（该推送对 Web App 是隐藏的，由浏览器处理）</li>
<li>HTTP/2 允许取消某个正在传输的数据流（通过发送 RST_STREAM 帧），而不关闭 TCP 连接。
<ul>
<li>这正是二进制协议的好处之一，可以定义多种功能的数据帧。</li>
</ul>
</li>
</ol>
<p>它允许服务端将资源推送到客户端缓存，我们访问淘宝等网站时，经常会发现很多请求的请求头部分会提示“provisional headers are shown”，这通常就是直接从缓存加载了资源，因此请求根本没有被发送。观察 Chrome Network 的 Size 列，这种请求的该字段一般都是 <code>from disk cache</code> 或者 <code>from memroy cache</code>.</p>
<p>Chrome 可以通过如下方式查看请求使用的协议：
<figure><img src="/images/websocket-http2-and-grpc/chrome-protocol.webp"/>
</figure>
</p>
<blockquote>
<p>2019-02-10: 使用 Chrome 查看，目前主流网站基本都已经部分使用了 HTTP/2，知乎、bilibili、GIthub 使用了 <code>wss</code> 协议，也有很多网站使用了 SSE（格式如 <code>data:image/png;base64,&lt;base64 string&gt;</code>）
而且很多网站都有使用 HTTP/2 + QUIC，该协议的新名称是 HTTP/3，它是基于 UDP 的 HTTP 协议。</p>
</blockquote>
<h3 id="sse" class="headerLink">
    <a href="#sse" class="header-mark"></a>SSE</h3><p>服务端推送事件，是通过 HTTP 长连接进行信息推送的一个功能。
它首先由浏览器向服务端建立一个 HTTP 长连接，然后服务端不断地通过这个长连接将消息推送给浏览器。JS API 如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="line"><span class="cl"><span class="c1">// create SSE connection
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">source</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventSource</span><span class="p">(</span><span class="s1">&#39;/dates&#39;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 连接建立时，这些 API 和 WebSocket 的很相似
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">source</span><span class="p">.</span><span class="nx">onopen</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// handle open event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 收到消息时（它只捕获未命名 event）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">source</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>  <span class="c1">// 发送过来的实际数据（string）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">var</span> <span class="nx">origin</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">origin</span><span class="p">;</span>  <span class="c1">// 服务器端URL的域名部分，即协议、域名和端口。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kd">var</span> <span class="nx">lastEventId</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">lastEventId</span><span class="p">;</span>  <span class="c1">// 数据的编号，由服务器端发送。如果没有编号，这个属性为空。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="c1">// handle message
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">source</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="c1">// handle error event
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="具体的实现" class="headerLink">
    <a href="#%e5%85%b7%e4%bd%93%e7%9a%84%e5%ae%9e%e7%8e%b0" class="header-mark"></a>具体的实现</h3><p>在收到客户端的 SSE 请求（HTTP 协议）时，服务端返回的响应首部如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Content-Type: text/event-stream
</span></span><span class="line"><span class="cl">Cache-Control: no-cache
</span></span><span class="line"><span class="cl">Connection: keep-alive
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 body 部分，SSE 定义了四种信息：</p>
<ol>
<li><code>data</code>：数据栏</li>
<li><code>event</code>：自定义数据类型</li>
<li><code>id</code> ：数据 id</li>
<li><code>retry</code>：最大间隔时间，超时则重新连接</li>
</ol>
<p>body 举例说明：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">: 这种格式的消息是注释，会被忽略\n\n
</span></span><span class="line"><span class="cl">: 通常服务器每隔一段时间就会发送一个注释，防止超时 retry\n\n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">: 下面这个是一个单行数据\n\n
</span></span><span class="line"><span class="cl">data: some text\n\n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">: 下面这个是多行数据，在客户端会重组成一个 data\n\n
</span></span><span class="line"><span class="cl">data: {\n
</span></span><span class="line"><span class="cl">data: &#34;foo&#34;: &#34;bar&#34;,\n
</span></span><span class="line"><span class="cl">data: &#34;baz&#34;, 555\n
</span></span><span class="line"><span class="cl">data: }\n\n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">: 这是一个命名 event，只会被事件名与之相同的 listener 捕获\n\n
</span></span><span class="line"><span class="cl">event: foo\n
</span></span><span class="line"><span class="cl">data: a foo event\n\n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">: 未命名事件，会被 onmessage 捕获\n\n
</span></span><span class="line"><span class="cl">data: an unnamed event\n\n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">event: bar\n
</span></span><span class="line"><span class="cl">data: a bar event\n\n
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">: 这个 id 对应 event.lastEventId\n\n
</span></span><span class="line"><span class="cl">id: msg1\n
</span></span><span class="line"><span class="cl">data: message\n\n
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="websockethttp2-与-sse-的比较" class="headerLink">
    <a href="#websockethttp2-%e4%b8%8e-sse-%e7%9a%84%e6%af%94%e8%be%83" class="header-mark"></a>WebSocket、HTTP/2 与 SSE 的比较</h3><ol>
<li>
<p>加密与否：</p>
<ul>
<li>WebSocket 支持明文通信 <code>ws://</code> 和加密 <code>wss://</code>，</li>
<li>而 HTTP/2 协议虽然没有规定必须加密，但是<a href="https://en.wikipedia.org/wiki/HTTP/2#Encryption" target="_blank" rel="noopener noreffer">主流浏览器都只支持 HTTP/2 over TLS</a>.</li>
<li>SSE 是使用的 HTTP 协议通信，支持 http/https</li>
</ul>
</li>
<li>
<p>消息推送：</p>
<ul>
<li>WebSocket是全双工通道，可以双向通信。而且消息是直接推送给 Web App.</li>
<li>SSE 只能<strong>单向串行地</strong>从服务端将数据推送给 Web App.</li>
<li>HTTP/2 虽然也支持 Server Push，但是服务器只能主动将资源推送到客户端缓存！并不允许将数据推送到客户端里跑的 Web App 本身。服务器推送只能由浏览器处理，不会在应用程序代码中弹出服务器数据，这意味着应用程序没有 API 来获取这些事件的通知。
<ul>
<li>为了接近实时地将数据推送给 Web App， HTTP/2 可以结合 SSE（Server-Sent Event）使用。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>WebSocket 在需要接近实时双向通信的领域，很有用武之地。而 HTTP/2 + SSE 适合用于展示实时数据。</p>
<p>另外在客户端非浏览器的情况下，使用不加密的 HTTP/2 也是可能的。</p>
<h3 id="requests-查看-http-协议版本号" class="headerLink">
    <a href="#requests-%e6%9f%a5%e7%9c%8b-http-%e5%8d%8f%e8%ae%ae%e7%89%88%e6%9c%ac%e5%8f%b7" class="header-mark"></a>requests 查看 HTTP 协议版本号</h3><p>可以通过 <code>resp.raw.version</code> 得到响应的 HTTP 版本号：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">&gt;&gt;&gt; import requests
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; <span class="nv">resp</span> <span class="o">=</span> requests.get<span class="o">(</span><span class="s2">&#34;https://zhihu.com&#34;</span><span class="o">)</span>      
</span></span><span class="line"><span class="cl">&gt;&gt;&gt; resp.raw.version
</span></span><span class="line"><span class="cl"><span class="m">11</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是 requests 默认使用 HTTP/1.1，并且不支持 HTTP/2.（不过这也不是什么大问题，HTTP/2 只是做了性能优化，用 HTTP/1.1 也就是慢一点而已。）</p>
<h2 id="三grpc-协议" class="headerLink">
    <a href="#%e4%b8%89grpc-%e5%8d%8f%e8%ae%ae" class="header-mark"></a>三、gRPC 协议</h2><p>gRPC 是一个远程过程调用框架，默认使用 protobuf3 进行数据的高效序列化与 service 定义，使用 HTTP/2 进行数据传输。
这里讨论的是 <a href="https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md" target="_blank" rel="noopener noreffer">gRPC over HTTP/2</a> 协议。</p>
<p>目前 gRPC 主要被用在微服务通信中，但是因为其优越的性能，它也很契合游戏、loT 等需要高性能低延迟的场景。</p>
<p>其实光从协议先进程度上讲，gRPC 基本全面超越 REST:</p>
<ol>
<li>使用二进制进行数据序列化，比 json 更节约流量、序列化与反序列化也更快。</li>
<li>protobuf3 要求 api 被完全清晰的定义好，而 REST api 只能靠程序员自觉定义。</li>
<li>gRPC 官方就支持从 api 定义生成代码，而 REST api 需要借助 openapi-codegen 等第三方工具。</li>
<li>支持 4 种通信模式：一对一(unary)、客户端流、服务端流、双端流。更灵活</li>
</ol>
<p>只是目前 gRPC 对 broswer 的支持仍然不是很好，如果你需要通过浏览器访问 api，那 gRPC 可能不是你的菜。
如果你的产品只打算面向 App 等可控的客户端，可以考虑上 gRPC。</p>
<p>对同时需要为浏览器和 APP 提供服务应用而言，也可以考虑 APP 使用 gRPC 协议，而浏览器使用 API 网关提供的 HTTP 接口，在 API 网关上进行 HTTP - gRPC 协议转换。</p>
<h3 id="grpc-over-http2-定义" class="headerLink">
    <a href="#grpc-over-http2-%e5%ae%9a%e4%b9%89" class="header-mark"></a>gRPC over HTTP/2 定义</h3><p>详细的定义参见官方文档 <a href="https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md" target="_blank" rel="noopener noreffer">gRPC over HTTP/2</a>.</p>
<p>这里是简要说明几点：</p>
<ol>
<li>gRPC 完全隐藏了 HTTP/2 本身的 method、headers、path 等语义，这些信息对用户而言完全不可见了。
<ol>
<li>请求统一使用 POST，响应状态统一为 200。只要响应是标准的 gRPC 格式，响应中的 HTTP 状态码将被完全忽略。</li>
</ol>
</li>
<li>gRPC 定义了自己的 status 状态码、格式固定的 path、还有它自己的 headers。</li>
</ol>
<h2 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h2><ul>
<li><a href="https://www.oschina.net/translate/how-does-javascript-actually-work-part-5" target="_blank" rel="noopener noreffer">深入探索 WebSockets 和 HTTP/2</a></li>
<li><a href="https://www.cnblogs.com/etoah/p/5891285.html" target="_blank" rel="noopener noreffer">HTTP/2 特性与抓包分析</a></li>
<li><a href="http://www.cnblogs.com/goody9807/p/4257192.html" target="_blank" rel="noopener noreffer">SSE：服务器发送事件,使用长链接进行通讯</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events" target="_blank" rel="noopener noreffer">Using server-sent events - MDN</a></li>
<li><a href="https://caniuse.com/#search=http2" target="_blank" rel="noopener noreffer">Can I Use HTTP/2 on Browsers</a></li>
<li><a href="https://stackoverflow.com/questions/37012486/python-3-x-how-to-get-http-version-using-requests-library" target="_blank" rel="noopener noreffer">Python 3.x how to get http version (using requests library)</a></li>
<li><a href="https://www.zhihu.com/question/20215561/answer/40316953" target="_blank" rel="noopener noreffer">WebSocket 是什么原理？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/26407649" target="_blank" rel="noopener noreffer">原生模块打造一个简单的 WebSocket 服务器</a></li>
<li><a href="https://cloud.google.com/blog/products/api-management/understanding-grpc-openapi-and-rest-and-when-to-use-them" target="_blank" rel="noopener noreffer">Google Cloud - API design: Understanding gRPC, OpenAPI and REST and when to use them</a></li>
</ul>
]]></content></entry><entry><title type="html">Chrome 与 Firefox-Dev 的 DevTools</title><link href="https://thiscute.world/posts/web-browser-dev-tools/"/><id>https://thiscute.world/posts/web-browser-dev-tools/</id><author><name>ryan4yin</name></author><published>2019-02-11T16:53:26+08:00</published><updated>2019-02-11T16:53:26+08:00</updated><content type="html"><![CDATA[<p>不管是做爬虫还是写 Web App，Chrome 和 Firefox 的 DevTools 都是超常用的，但是经常发现别人的截图有什么字段我找不到，别人的什么功能我的 Chrome 没有，仔细一搜索才知道，原来是我不会用。。</p>
<hr>
<p><code>Ctrl + Shift + I</code>：打开 DevTools
<code>Ctrl + Shift + J</code>：打开控制台</p>
<h3 id="搜索" class="headerLink">
    <a href="#%e6%90%9c%e7%b4%a2" class="header-mark"></a>搜索</h3><ol>
<li>
<p><code>Ctrl + F</code>：在当前位置搜索关键字</p>
<ul>
<li>在网页界面用这个快捷键，就是页内搜索</li>
<li>在 Network 的 Response 页面，就是在 Response 中搜索</li>
</ul>
</li>
<li>
<p><code>Ctrl + Shift + F</code>：全文搜索，在当前 Web App 的所有文件中搜索。</p>
<ul>
<li>**爬虫必备！！！**要寻找一些特殊字符串的来源，用它搜索屡试不爽。</li>
</ul>
</li>
</ol>
<h3 id="command" class="headerLink">
    <a href="#command" class="header-mark"></a>Command</h3><p>在 DevTools 里按快捷键 <code>Ctrl + Shift + P</code> 就能打开 Command 输入框，它和 vscode/sublime 的 Command 一样，用好了特别方便。</p>
<h3 id="network" class="headerLink">
    <a href="#network" class="header-mark"></a>Network</h3><h4 id="1-属性列" class="headerLink">
    <a href="#1-%e5%b1%9e%e6%80%a7%e5%88%97" class="header-mark"></a>1. 属性列</h4><p>Chrome 可以右键属性列名来增减属性列，Firefox-Dev 也是一样：</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211093455289-773908727.webp"/>
</figure>

<figure><img src="/images/web-browser-dev-tools/968138-20190211150559673-23181676.webp"/>
</figure>

<h4 id="2-copy" class="headerLink">
    <a href="#2-copy" class="header-mark"></a>2. copy</h4><p>在 Chrome 中右键某个请求，选中 copy，会给出几个 options：</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211134155594-369771298.webp"/>
</figure>

<p>而 Firefox-Dev 的更强一点，可以复制消息头（请求头和响应头）：</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211134845686-1048423446.webp"/>
</figure>

<h4 id="3-response-的-pretty-print" class="headerLink">
    <a href="#3-response-%e7%9a%84-pretty-print" class="header-mark"></a>3. response 的 pretty print</h4><p>Chrome 的 Response 页面左下角，有<code>{}</code>按钮，可以 beautify 响应。</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211145915794-1971618603.webp"/>
</figure>

<p>而 Firefox-Dev 只在 Debugger 页面提供该按钮，Response 中不支持。</p>
<p>Firefox 响应的 preview 和 payload 是放在 Response 页面下。而 Chrome 是分成了两个标签页</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211150146579-1141462696.webp"/>
</figure>

<figure><img src="/images/web-browser-dev-tools/968138-20190211150217505-933154713.webp"/>
</figure>

<h4 id="4-导出-har" class="headerLink">
    <a href="#4-%e5%af%bc%e5%87%ba-har" class="header-mark"></a>4. 导出 HAR</h4><p>右键任意一个请求，选择 <code>save all as HAR</code>，就可以导出 HAR 文件。（Chrome 有 with content，导出的 HAR 文件会含有所有请求与响应的 body）</p>
<p>该文件可用于存储当前监听到的所有浏览器请求信息。在以后需要分析这些请求时，将 HAR 文件拖到 Network 页面即可恢复所有请求。</p>
<h4 id="5-raw-headers原始消息头" class="headerLink">
    <a href="#5-raw-headers%e5%8e%9f%e5%a7%8b%e6%b6%88%e6%81%af%e5%a4%b4" class="header-mark"></a>5. Raw Headers（原始消息头）</h4><p>Chrome 只支持查看 HTTP/1.x 的 Raw Headers，对这种请求，会给出 <code>view source</code> 选项。</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211142152309-1418680644.webp"/>
</figure>

<p>Chrome 不能查看 HTTP/2 的 Raw Headers。</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211142301777-1440991898.webp"/>
</figure>

<p>而 Firefox 则支持查看 HTTP/2 的 Raw Headers。（是恢复后的，HTTP/2 的原始消息头是二进制压缩形式）</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211142424361-986461531.webp"/>
</figure>

<p>它还提供 Edit and Resend 请求的功能，这点要给个赞～</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211172845339-1004306694.webp"/>
</figure>

<h4 id="6-审查-websocketchrome-only" class="headerLink">
    <a href="#6-%e5%ae%a1%e6%9f%a5-websocketchrome-only" class="header-mark"></a>6. 审查 WebSocket（Chrome only）</h4><p>在 NetWork 中点击对应的 WebScoket 请求，在右侧选择 Frames 标签，就可以看到所有的消息了</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211161734224-864236086.webp"/>
</figure>

<h4 id="7-跨页面加载时保留网络请求记录" class="headerLink">
    <a href="#7-%e8%b7%a8%e9%a1%b5%e9%9d%a2%e5%8a%a0%e8%bd%bd%e6%97%b6%e4%bf%9d%e7%95%99%e7%bd%91%e7%bb%9c%e8%af%b7%e6%b1%82%e8%ae%b0%e5%bd%95" class="header-mark"></a>7. 跨页面加载时，保留网络请求记录</h4><p>当页面重载或者页面跳转时，默认情况下，Network面板下的网络请求记录表也是刷新的。如果想保留之前页面的网络请求数据，可以勾选Preserve log.</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211191616024-1591891666.webp"/>
</figure>

<p>常用的一个应用场景：登录/注册时会调用登录/注册API，开发者想查看这个接口返回的情况，但是登录/注册成功后一般会跳转到新的页面，导致了Network面板的请求记录被刷新从而看不到登录/注册接口返回的情况。此时勾选上Preserve log，无论跳转到那个页面，都能在Network网络请求记录表中查看到之前接口返回的情况。</p>
<h3 id="javascript-控制台" class="headerLink">
    <a href="#javascript-%e6%8e%a7%e5%88%b6%e5%8f%b0" class="header-mark"></a>JavaScript 控制台</h3><ol>
<li>可以通过 <code>$x(&lt;xpath&gt;, &lt;DOM-element&gt;)</code>，用 xpath 查询 DOM 元素。</li>
</ol>
<figure><img src="/images/web-browser-dev-tools/968138-20190211151856683-1227556897.webp"/>
</figure>

<ol>
<li>通过控制台左上方的选单，可以切换 JS 的环境，它默认是当前页面（top）。</li>
</ol>
<h3 id="elements-页面firefox-dev-是-inspector-页面" class="headerLink">
    <a href="#elements-%e9%a1%b5%e9%9d%a2firefox-dev-%e6%98%af-inspector-%e9%a1%b5%e9%9d%a2" class="header-mark"></a>Elements 页面（Firefox-Dev 是 Inspector 页面）</h3><h4 id="1-dom-元素断点chrome-only" class="headerLink">
    <a href="#1-dom-%e5%85%83%e7%b4%a0%e6%96%ad%e7%82%b9chrome-only" class="header-mark"></a>1. DOM 元素断点（Chrome only）</h4><p>在 <code>Elements</code> 页面，右键一个元素，有一个 <code>Break on</code> 选项，可以控制在特定事件发生时 Break.
- subtree modification: 子节点被修改
- attribute modification：当前节点的属性被修改。（inline style 被修改也会触发此事件）
- node removal：节点被移除</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211152916189-42263251.webp"/>
</figure>

<h4 id="2-检索元素上注册的事件chrome-only" class="headerLink">
    <a href="#2-%e6%a3%80%e7%b4%a2%e5%85%83%e7%b4%a0%e4%b8%8a%e6%b3%a8%e5%86%8c%e7%9a%84%e4%ba%8b%e4%bb%b6chrome-only" class="header-mark"></a>2. 检索元素上注册的事件（Chrome only）</h4><p>在 Elements 页面选中一个元素（或者直接右键检查该元素），然后在右侧窗口，选择 Event Listeners 标签，就可以看到该元素上注册的所有事件。</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211154036983-2040723318.webp"/>
</figure>

<h4 id="3-颜色选择器" class="headerLink">
    <a href="#3-%e9%a2%9c%e8%89%b2%e9%80%89%e6%8b%a9%e5%99%a8" class="header-mark"></a>3. 颜色选择器</h4><p>选中任一元素，在右侧选择 Styles 选单，会显示当前元素的 css 属性。</p>
<p>其中所有的颜色小方块都是可以点击的，点击颜色方块后</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211160511912-2063790850.webp"/>
</figure>

<ol>
<li>可以将颜色属性转换成多个格式（Chrome only）
<ul>
<li>默认格式：<code>#207981</code></li>
<li>RGB格式：<code>rgb(32, 121, 129)</code></li>
<li>HSL格式：<code>hsl(185, 60%, 32%)</code></li>
</ul>
</li>
<li>提供 color picker，可用于在网页任意位置取色。（Firefox-Dev 也有）</li>
<li>提供复制按键，直接将该颜色当前格式的表达复制到剪切板</li>
</ol>
<h3 id="元素审查" class="headerLink">
    <a href="#%e5%85%83%e7%b4%a0%e5%ae%a1%e6%9f%a5" class="header-mark"></a>元素审查</h3><p><code>Ctrl + Shift + C</code> 或者点击 DevTools 最左上角的小箭头按钮，就能进入元素审查模式。</p>
<p>该模式下会自动审查鼠标所指的元素，Elements 页面也会自动定位到该元素。</p>
<h3 id="sources-页面firefox-dev-是-debuuger-页面" class="headerLink">
    <a href="#sources-%e9%a1%b5%e9%9d%a2firefox-dev-%e6%98%af-debuuger-%e9%a1%b5%e9%9d%a2" class="header-mark"></a>Sources 页面（Firefox-Dev 是 Debuuger 页面）</h3><p>Sources 右侧的 Debugger 支持各种断点调试。</p>
<ol>
<li>条件断点
Sources 中，在任意 JS 代码的行号上单击鼠标左键，就能在该行设置一个普通断点（在 Response 中可不行）。在行号上右键，能直接设置条件断点。
<figure><img src="/images/web-browser-dev-tools/968138-20190211154841386-1840257581.webp"/>
    </figure>
</li>
<li>XHR 断点：在右侧 Debugger 中，可以添加 XHR 断点。
<ul>
<li>如果条件留空，一旦有 XHR 发起，就会无条件进入调试。</li>
<li>条件是 “Break When URL Contaions <your string>”</li>
</ul>
</li>
<li>Watch Expressions：表达式审查
<ul>
<li>双击选中 JS 代码中的任意变量，然后右键它，可以将该变量添加到 Watch 中，这样就可以随时观察它的值。</li>
<li>也可以在右侧 Watch 中手动输入 JS 表达式。</li>
</ul>
</li>
<li>DOM 元素断点（Chrome only）：在 Elements 部分讲过了。</li>
</ol>
<p>Chrome 的断点功能比 Firefox-Dev 的更丰富。</p>
<h3 id="screenshot" class="headerLink">
    <a href="#screenshot" class="header-mark"></a>Screenshot</h3><h4 id="1-for-chrome" class="headerLink">
    <a href="#1-for-chrome" class="header-mark"></a>1. For Chrome</h4><p>方法一：在 DevTools 界面，按快捷键 <code>Ctrl + Shift + P</code> 打开 Command 窗口，然后输入 <code>screenshot</code>，在下拉栏里选择你需要的截图命令就行。</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190212163124375-995667384.webp"/>
</figure>

<p>方法二：
先进 dev tools，点击 左上角的设备图标（toggle device toolbar），然后页面顶部就会出现一个导航栏，在这里好选择设备或者自定义图像尺寸，然后点击该导航栏右侧（不是 dev tools 右侧）的 options 图标，会有两个选项：“截图（capture screenshot）”和“截网页全图（capture full size screenshot）”，如下：</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211102530072-2093584274.webp"/>
</figure>

<h4 id="2-for-firefox" class="headerLink">
    <a href="#2-for-firefox" class="header-mark"></a>2. For Firefox</h4><ol>
<li>只截显示出来的部分：和 Chrome 一样点击设备图标，然后在页面上面的 toolbar 就有截图按钮</li>
<li><figure><img src="/images/web-browser-dev-tools/968138-20190211163703764-1641229843.webp"/>
</figure>
</li>
<li>截网页全图：在 DevTools 右边的 options 中进入 Settings，勾选 <code>take a screenshot of the entire page</code>，DevTools 右上角就会出现截图按钮了。</li>
</ol>
<figure><img src="/images/web-browser-dev-tools/968138-20190211163941562-1320561581.webp"/>
</figure>

<h3 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h3><h4 id="1-fake-geolocationchrome-only" class="headerLink">
    <a href="#1-fake-geolocationchrome-only" class="header-mark"></a>1. Fake Geolocation（Chrome only）</h4><p>在 Chrome 中进入 DevTools，点击右上角的 options 按钮，选择 More tools -&gt; Sensors，在 Geolocation 处选择 Custom location，就可以修改地理位置了。</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211161131091-420638637.webp"/>
</figure>

<h4 id="2-自定义请求头" class="headerLink">
    <a href="#2-%e8%87%aa%e5%ae%9a%e4%b9%89%e8%af%b7%e6%b1%82%e5%a4%b4" class="header-mark"></a>2. 自定义请求头</h4><h4 id="for-chrome" class="headerLink">
    <a href="#for-chrome" class="header-mark"></a>For Chrome</h4><p>和 上一小节一样，先进 More tools，选择 Network conditions，取消勾选 Select atuomatically，就可以修改请求头了。</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211170346973-560763838.webp"/>
</figure>

<p>上面的演示中，使用 <code>python-requests/2.21.0</code> 做 user agent，知乎返回 404.</p>
<h4 id="for-firefox" class="headerLink">
    <a href="#for-firefox" class="header-mark"></a>For Firefox</h4><p>打开设备模拟，在 toolbar 的右上角勾选 <code>show user agent</code>，然后就可以在 toolbar 修改 user agent 了：</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211170804371-405922156.webp"/>
</figure>

<h3 id="3-request-blockingchrome-only" class="headerLink">
    <a href="#3-request-blockingchrome-only" class="header-mark"></a>3. Request Blocking（Chrome only）</h3><p>在 Network 的任意请求上右键，菜单中就有 Block request URL（阻塞该 URL）和 Block request domain（阻塞请求所在的整个域）</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211171736248-156227886.webp"/>
</figure>

<p>然后就可以在 More tools -&gt; Request blocking 中看到你设置的阻塞条件。</p>
<figure><img src="/images/web-browser-dev-tools/968138-20190211172032733-566193435.webp"/>
</figure>

<h3 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h3><ul>
<li><a href="https://juejin.im/book/5c526902e51d4543805ef35e/section/5c526998e51d4506953e5574" target="_blank" rel="noopener noreffer">你不知道的 Chrome 调试技巧</a></li>
<li><a href="https://legacy.gitbook.com/book/leeon/devtools/details" target="_blank" rel="noopener noreffer">Chrome Dev Tools 中文手册</a></li>
<li><a href="https://www.mozilla.org/zh-CN/firefox/developer/" target="_blank" rel="noopener noreffer">Firefox Quantum：开发者版本</a></li>
<li><a href="https://www.labnol.org/internet/web-page-screenshots-in-google-chrome/19851/" target="_blank" rel="noopener noreffer">How to Capture Screenshots in Google Chrome without using Extensions</a></li>
<li><a href="https://segmentfault.com/a/1190000008407729" target="_blank" rel="noopener noreffer">Chrome DevTools - Network</a></li>
</ul>
]]></content></entry><entry><title type="html">通过 systemctl 设置自定义 Service</title><link href="https://thiscute.world/posts/systemd-basics/"/><id>https://thiscute.world/posts/systemd-basics/</id><author><name>ryan4yin</name></author><published>2019-01-28T20:13:00+08:00</published><updated>2019-01-28T20:13:00+08:00</updated><content type="html"><![CDATA[<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>如果要在Linux 上设置一个开机自启，出现问题自动重启，并且有良好日志的程序，比较流行的方法有 <code>supervisord</code>、<code>systemd</code>，除此之外，还有 upstart、runit 等类似的工具。
但是自从 systemd 被 ubuntu、centos 等主流 Linux 发行版应用以来，systemd 渐渐成为主流方案。</p>
<p>如果你需要跨平台(Linux/MacOSX/FreeBSD)的方案，那么建议使用 <code>supervisord</code>，如果只需要支持 Linux 则建议选用 <code>systemd</code>.</p>
<h3 id="配置说明" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae%e8%af%b4%e6%98%8e" class="header-mark"></a>配置说明</h3><p>要自定义一个服务，需要在 <code>/usr/lib/systemd/system/</code> 下添加一个配置文件：<code>&lt;software-name&gt;.service</code></p>
<blockquote>
<p>如果 <code>/usr/lib/systemd/system/</code> 不存在，可考虑使用 <code>/lib/systemd/system/</code> 或 <code>/etc/systemd/system/</code></p>
</blockquote>
<blockquote>
<p><code>ExecXXX</code> 中的命令，均可以正常使用转义字符以及环境变量插值语法，比如用 <code>\</code> 结尾表示换行，用 $Xxx 获取环境变量。</p>
</blockquote>
<p>配置文件的内容说明：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Unit</span><span class="p">]</span><span class="err">:</span> <span class="err">服务的启动顺序与依赖关系</span>
</span></span><span class="line"><span class="cl"><span class="nx">Description</span><span class="err">:</span> <span class="err">当前服务的简单描述</span>
</span></span><span class="line"><span class="cl"><span class="nx">After</span><span class="err">:</span> <span class="err">当前服务（&lt;</span><span class="nx">software-name</span><span class="err">&gt;</span><span class="p">.</span><span class="nx">service</span><span class="err">）需要在这些服务启动后，才启动</span>
</span></span><span class="line"><span class="cl"><span class="nx">Before</span><span class="err">:</span> <span class="err">和</span> <span class="nx">After</span> <span class="err">相反，当前服务需要在这些服务启动前，先启动</span>
</span></span><span class="line"><span class="cl"><span class="nx">Wants</span><span class="err">：表示当前服务</span><span class="s2">&#34;弱依赖&#34;</span><span class="err">于这些服务。即当前服务依赖于它们，但是没有它们，当前服务也能正常运行。</span>
</span></span><span class="line"><span class="cl"><span class="nx">Requires</span><span class="err">:</span> <span class="err">表示</span><span class="s2">&#34;强依赖&#34;</span><span class="err">关系，即如果该服务启动失败或异常退出，那么当前服务也必须退出。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Service</span><span class="p">]</span> <span class="err">服务运行参数的设置</span>
</span></span><span class="line"><span class="cl"><span class="nx">Type</span><span class="p">=</span><span class="nx">forking</span>  <span class="err">后台运行的形式</span>
</span></span><span class="line"><span class="cl"><span class="nx">PIDFile</span><span class="p">=</span><span class="err">/</span><span class="nx">software-name</span><span class="err">/</span><span class="nx">pid</span>   <span class="nx">pid</span><span class="err">文件路径</span>
</span></span><span class="line"><span class="cl"><span class="nx">EnvironmentFile</span><span class="p">=</span><span class="err">/</span><span class="nx">xxx</span><span class="err">/</span><span class="nx">prod</span><span class="p">.</span><span class="nx">env</span>  <span class="err">通过文件设定环境变量，注意这东西不支持环境变量的插值语法</span> <span class="err">$</span><span class="p">{</span><span class="nx">xxx</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">WorkingDirectory</span><span class="p">=</span><span class="err">/</span><span class="nx">xxx</span><span class="err">/</span><span class="nx">xxx</span>    <span class="err">工作目录</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStartPre</span>  <span class="err">为启动做准备的命令</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStart</span>  <span class="err">服务的具体运行命令（对非</span> <span class="nx">workingdirectory</span> <span class="err">的文件，必须用绝对路径！</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecReload</span>  <span class="err">重载命令，如果程序支持</span> <span class="nx">HUP</span> <span class="err">信号的话，通常将此项设为</span> <span class="err">`/</span><span class="nx">bin</span><span class="err">/</span><span class="nx">kill</span> <span class="nx">-HUP</span> <span class="err">$</span><span class="nx">MAINPID</span><span class="err">`</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStop</span>  <span class="err">停止命令</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStartPre</span><span class="err">：启动服务之前执行的命令</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStartPost</span><span class="err">：启动服务之后执行的命令</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStopPost</span><span class="err">：停止服务之后执行的命令</span>
</span></span><span class="line"><span class="cl"><span class="nx">RuntimeDirectory</span><span class="p">=</span><span class="nx">xxxx</span>
</span></span><span class="line"><span class="cl"><span class="nx">RuntimeDirectoryMode</span><span class="p">=</span><span class="mi">0775</span>
</span></span><span class="line"><span class="cl"><span class="nx">PrivateTmp</span><span class="p">=</span><span class="nx">True</span>  <span class="err">表示给服务分配独立的临时空间</span>
</span></span><span class="line"><span class="cl"><span class="nx">RestartSec</span>  <span class="err">自动重启当前服务间隔的秒数</span>
</span></span><span class="line"><span class="cl"><span class="nx">Restart</span>  <span class="err">定义何种情况</span> <span class="nx">Systemd</span> <span class="err">会自动重启当前服务，可能的值包括</span><span class="nx">always</span><span class="err">（总是重启）、</span><span class="nx">on-success</span><span class="err">、</span><span class="nx">on-failure</span> <span class="err">等</span>
</span></span><span class="line"><span class="cl"><span class="c"># 程序的 user 和 group</span>
</span></span><span class="line"><span class="cl"><span class="nx">User</span><span class="p">=</span><span class="nx">ryan</span>
</span></span><span class="line"><span class="cl"><span class="nx">Group</span><span class="p">=</span><span class="nx">ryan</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">注意：启动、重载、停止命令全部要求使用绝对路径</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Install</span><span class="p">]</span> <span class="err">定义如何安装这个配置文件，即怎样做到开机启动。</span>
</span></span><span class="line"><span class="cl"><span class="c"># Target的含义是服务组，表示一组服务。</span>
</span></span><span class="line"><span class="cl"><span class="nx">WantedBy</span><span class="p">=</span><span class="nx">multi-user</span><span class="p">.</span><span class="nx">target</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><strong>注意，service 文件不支持行内注释！！！注释必须单独一行</strong></p>
<h3 id="type-说明" class="headerLink">
    <a href="#type-%e8%af%b4%e6%98%8e" class="header-mark"></a>Type 说明</h3><p>Type 感觉是整个配置文件里面最不好理解的一个配置项，它的实际作用就是：<strong>告诉 systemd 你的 Service 是如何启动的</strong></p>
<ol>
<li>
<p><code>Type=simple</code>（默认值）：<code>ExecStart</code> 命令会立即启动你的服务，并且持续运行，不会退出。</p>
</li>
<li>
<p><code>Type=forking</code>：<code>ExecStart</code> 命令会 fork 出你的服务主进程，然后正常退出。使用此 Type 时应同时指定 <code>PIDFile=</code>，systemd 使用它跟踪服务的主进程。</p>
</li>
<li>
<p><code>Type=oneshot</code>：<code>ExecStart</code> 命令。可能需要同时设置 <code>RemainAfterExit=yes</code> 使得 <code>systemd</code> 在服务进程退出之后仍然认为服务处于激活状态</p>
</li>
<li>
<p><code>Type=notify</code>：与 <code>Type=simple</code> 相同，但约定服务会在就绪后向 systemd 发送一个信号，以表明自己已经启动成功。</p>
<ul>
<li>细节：systemd 会创建一个 unix socket，并将地址通过 $NOTIFY_SOCKET 环境变量提供给服务，同时监听该 socket 上的信号。服务可以使用 systemd 提供的 C 函数 <code>sd_notify()</code> 或者命令行工具 <code>systemd-notify</code> 发送信号给 systemd.</li>
<li>因为多了个 notify 信号，所以这一 Type 要比 simple 更精确一点。但是需要服务的配合，</li>
</ul>
</li>
<li>
<p><code>Type=dbus</code>：若以此方式启动，当指定的 BusName 出现在 DBus 系统总线上时，systemd 认为服务就绪。</p>
</li>
<li>
<p><code>Type=idle</code>：没搞明白，不过通常也用不到。</p>
</li>
</ol>
<p>更详细的见 <a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener noreffer">Systemd 入门教程：命令篇 - 阮一峰</a>。</p>
<h3 id="配置举例" class="headerLink">
    <a href="#%e9%85%8d%e7%bd%ae%e4%b8%be%e4%be%8b" class="header-mark"></a>配置举例</h3><p>比如 shadsocks Server Service，的配置文件 <code>ss-server.service</code> 的内容为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Unit</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">Description</span><span class="p">=</span><span class="nx">shadsocks</span> <span class="nx">server</span>
</span></span><span class="line"><span class="cl"><span class="nx">After</span><span class="p">=</span><span class="nx">network</span><span class="p">.</span><span class="nx">target</span> <span class="nx">auditd</span><span class="p">.</span><span class="nx">service</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Service</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">Type</span><span class="p">=</span><span class="nx">forking</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStart</span><span class="p">=</span><span class="err">/</span><span class="nx">usr</span><span class="err">/</span><span class="nx">local</span><span class="err">/</span><span class="nx">bin</span><span class="err">/</span><span class="nx">ssserver</span> <span class="nx">-c</span> <span class="err">/</span><span class="nx">etc</span><span class="err">/</span><span class="nx">shadsocks</span><span class="p">.</span><span class="nx">json</span> <span class="nx">--user</span> <span class="nx">shadsocks</span> <span class="nx">--pid-file</span> <span class="err">/</span><span class="nx">var</span><span class="err">/</span><span class="nx">run</span><span class="err">/</span><span class="nx">shadsocks</span><span class="p">.</span><span class="nx">pid</span> <span class="nx">-d</span> <span class="nx">start</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStop</span><span class="p">=</span><span class="err">/</span><span class="nx">usr</span><span class="err">/</span><span class="nx">local</span><span class="err">/</span><span class="nx">bin</span><span class="err">/</span><span class="nx">ssserver</span> <span class="nx">-c</span> <span class="err">/</span><span class="nx">etc</span><span class="err">/</span><span class="nx">shadsocks</span><span class="p">.</span><span class="nx">json</span> <span class="nx">--user</span> <span class="nx">shadsocks</span> <span class="nx">--pid-file</span> <span class="err">/</span><span class="nx">var</span><span class="err">/</span><span class="nx">run</span><span class="err">/</span><span class="nx">shadsocks</span><span class="p">.</span><span class="nx">pid</span> <span class="nx">-d</span> <span class="nx">stop</span>
</span></span><span class="line"><span class="cl"><span class="nx">PIDFile</span><span class="p">=</span><span class="err">/</span><span class="nx">var</span><span class="err">/</span><span class="nx">run</span><span class="err">/</span><span class="nx">shadsocks</span><span class="p">.</span><span class="nx">pid</span>
</span></span><span class="line"><span class="cl"><span class="nx">Restart</span><span class="p">=</span><span class="nx">always</span>
</span></span><span class="line"><span class="cl"><span class="nx">RestartSec</span><span class="p">=</span><span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Install</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">WantedBy</span><span class="p">=</span><span class="nx">multi-user</span><span class="p">.</span><span class="nx">target</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>而 enginx 的配置文件 <code>nginx.service</code> 的内容是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Unit</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">Description</span><span class="p">=</span><span class="nx">The</span> <span class="nx">NGINX</span> <span class="nx">HTTP</span> <span class="nx">and</span> <span class="nx">reverse</span> <span class="nx">proxy</span> <span class="nx">server</span>
</span></span><span class="line"><span class="cl"><span class="nx">After</span><span class="p">=</span><span class="nx">syslog</span><span class="p">.</span><span class="nx">target</span> <span class="nx">network-online</span><span class="p">.</span><span class="nx">target</span> <span class="nx">remote-fs</span><span class="p">.</span><span class="nx">target</span> <span class="nx">nss-lookup</span><span class="p">.</span><span class="nx">target</span>
</span></span><span class="line"><span class="cl"><span class="nx">Wants</span><span class="p">=</span><span class="nx">network-online</span><span class="p">.</span><span class="nx">target</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Service</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">Type</span><span class="p">=</span><span class="nx">forking</span>
</span></span><span class="line"><span class="cl"><span class="nx">PIDFile</span><span class="p">=</span><span class="err">/</span><span class="nx">run</span><span class="err">/</span><span class="nx">nginx</span><span class="p">.</span><span class="nx">pid</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStartPre</span><span class="p">=</span><span class="err">/</span><span class="nx">usr</span><span class="err">/</span><span class="nx">sbin</span><span class="err">/</span><span class="nx">nginx</span> <span class="nx">-t</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStart</span><span class="p">=</span><span class="err">/</span><span class="nx">usr</span><span class="err">/</span><span class="nx">sbin</span><span class="err">/</span><span class="nx">nginx</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecReload</span><span class="p">=</span><span class="err">/</span><span class="nx">usr</span><span class="err">/</span><span class="nx">sbin</span><span class="err">/</span><span class="nx">nginx</span> <span class="nx">-s</span> <span class="nx">reload</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStop</span><span class="p">=</span><span class="err">/</span><span class="nx">bin</span><span class="err">/</span><span class="nx">kill</span> <span class="nx">-s</span> <span class="nx">QUIT</span> <span class="err">$</span><span class="nx">MAINPID</span>
</span></span><span class="line"><span class="cl"><span class="nx">PrivateTmp</span><span class="p">=</span><span class="kc">true</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Install</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">WantedBy</span><span class="p">=</span><span class="nx">multi-user</span><span class="p">.</span><span class="nx">target</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>为了使用环境变量插值，而使用 sh 启动的 etcd 服务，它的 <code>etcd.service</code> 配置如下:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Unit</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">Description</span><span class="p">=</span><span class="nx">etcd</span> <span class="nx">key-value</span> <span class="nx">store</span>
</span></span><span class="line"><span class="cl"><span class="nx">Documentation</span><span class="p">=</span><span class="nx">https</span><span class="err">://</span><span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="err">/</span><span class="nx">etcd-io</span><span class="err">/</span><span class="nx">etcd</span>
</span></span><span class="line"><span class="cl"><span class="nx">After</span><span class="p">=</span><span class="nx">network</span><span class="p">.</span><span class="nx">target</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Service</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">Type</span><span class="p">=</span><span class="nx">simple</span>
</span></span><span class="line"><span class="cl"><span class="c"># EnvironmentFile 不支持使用 ${xxx} 变量插值，这里不适合使用</span>
</span></span><span class="line"><span class="cl"><span class="c"># EnvironmentFile=/data/etcd.env</span>
</span></span><span class="line"><span class="cl"><span class="c"># -a 表示传递环境变量</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStart</span><span class="p">=</span><span class="err">/</span><span class="nx">bin</span><span class="err">/</span><span class="nx">bash</span> <span class="nx">-ac</span> <span class="s1">&#39;. /data/etcd.env; /data/bin/etcd&#39;</span>
</span></span><span class="line"><span class="cl"><span class="nx">Restart</span><span class="p">=</span><span class="nx">always</span>
</span></span><span class="line"><span class="cl"><span class="nx">RestartSec</span><span class="p">=</span><span class="mi">5</span><span class="nx">s</span>
</span></span><span class="line"><span class="cl"><span class="nx">LimitNOFILE</span><span class="p">=</span><span class="mi">40000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Install</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">WantedBy</span><span class="p">=</span><span class="nx">multi-user</span><span class="p">.</span><span class="nx">target</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你不需要在 <code>/data/etcd.env</code> 中使用环境变量的插值语法，那可以这样写:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Unit</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">Description</span><span class="p">=</span><span class="nx">etcd</span> <span class="nx">key-value</span> <span class="nx">store</span>
</span></span><span class="line"><span class="cl"><span class="nx">Documentation</span><span class="p">=</span><span class="nx">https</span><span class="err">://</span><span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="err">/</span><span class="nx">etcd-io</span><span class="err">/</span><span class="nx">etcd</span>
</span></span><span class="line"><span class="cl"><span class="nx">After</span><span class="p">=</span><span class="nx">network</span><span class="p">.</span><span class="nx">target</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Service</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">Type</span><span class="p">=</span><span class="nx">notify</span>
</span></span><span class="line"><span class="cl"><span class="nx">EnvironmentFile</span><span class="p">=</span><span class="err">/</span><span class="nx">data</span><span class="err">/</span><span class="nx">etcd</span><span class="p">.</span><span class="nx">env</span>
</span></span><span class="line"><span class="cl"><span class="c"># ExecXXX 的命令中是可以使用 ${Xxx} 插值语法的</span>
</span></span><span class="line"><span class="cl"><span class="nx">ExecStart</span><span class="p">=</span><span class="err">/</span><span class="nx">data</span><span class="err">/</span><span class="nx">bin</span><span class="err">/</span><span class="nx">etcd</span> <span class="err">\</span>
</span></span><span class="line"><span class="cl">    <span class="nx">--initial-advertise-peer-urls</span> <span class="nx">http</span><span class="err">://$</span><span class="p">{</span><span class="nx">THIS_IP</span><span class="p">}</span><span class="err">:</span><span class="mi">2380</span> <span class="err">\</span>
</span></span><span class="line"><span class="cl">    <span class="nx">--listen-peer-urls</span> <span class="nx">http</span><span class="err">://$</span><span class="p">{</span><span class="nx">THIS_IP</span><span class="p">}</span><span class="err">:</span><span class="mi">2380</span> <span class="err">\</span>
</span></span><span class="line"><span class="cl">    <span class="nx">--advertise-client-urls</span> <span class="nx">http</span><span class="err">://$</span><span class="p">{</span><span class="nx">THIS_IP</span><span class="p">}</span><span class="err">:</span><span class="mi">2379</span> <span class="err">\</span>
</span></span><span class="line"><span class="cl">    <span class="nx">--listen-client-urls</span> <span class="nx">http</span><span class="err">://$</span><span class="p">{</span><span class="nx">THIS_IP</span><span class="p">}</span><span class="err">:</span><span class="mi">2379</span> <span class="err">\</span>
</span></span><span class="line"><span class="cl">    <span class="nx">--initial-cluster</span> <span class="s2">&#34;${NAME_1}=http://${HOST_1}:2380,${NAME_2}=http://${HOST_2}:2380,${NAME_3}=http://${HOST_3}:2380&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">Restart</span><span class="p">=</span><span class="nx">always</span>
</span></span><span class="line"><span class="cl"><span class="nx">RestartSec</span><span class="p">=</span><span class="mi">5</span><span class="nx">s</span>
</span></span><span class="line"><span class="cl"><span class="nx">LimitNOFILE</span><span class="p">=</span><span class="mi">40000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">[</span><span class="nx">Install</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">WantedBy</span><span class="p">=</span><span class="nx">multi-user</span><span class="p">.</span><span class="nx">target</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="服务的启动关闭" class="headerLink">
    <a href="#%e6%9c%8d%e5%8a%a1%e7%9a%84%e5%90%af%e5%8a%a8%e5%85%b3%e9%97%ad" class="header-mark"></a>服务的启动、关闭</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">systemctl enable ss-server.service  # 启用服务，即开机自动启动
</span></span><span class="line"><span class="cl">systemctl disable ss-server.service  # 取消服务，取消开机启动
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl start ss-server.service   # 启动服务
</span></span><span class="line"><span class="cl">systemctl stop ss-server.service   # 停止服务
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl restart ss-server.service   # 重启服务(stop + start)
</span></span><span class="line"><span class="cl">systemctl reload ss-server.service   # 服务不 stop，直接加载配置更新等（对应 ExecReload）
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"># 检查状态
</span></span><span class="line"><span class="cl">systemctl status ss-server.service -l
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">systemctl list-units --type=service  # 查看所有服务
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h3><ul>
<li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener noreffer">Systemd 入门教程：命令篇 - 阮一峰</a></li>
<li><a href="http://www.jinbuguo.com/systemd/systemd.exec.html" target="_blank" rel="noopener noreffer">systemd.exec 中文手册</a></li>
</ul>
]]></content></entry><entry><title type="html">SQLAlchemy 学习笔记（一）：Engine 与 SQL 表达式语言</title><link href="https://thiscute.world/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/"/><id>https://thiscute.world/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/</id><author><name>ryan4yin</name></author><published>2019-01-21T14:02:00+08:00</published><updated>2019-01-21T14:02:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，如有错误烦请指正。</p>
</blockquote>
<p>SQLAlchemy 是一个用 Python 实现的 ORM （Object Relational Mapping）框架，它由多个组件构成，这些组件可以单独使用，也能独立使用。它的组件层次结构如下：</p>
<figure><img src="/images/sqlalchemy-notes/sqlalchemy-arch.webp"/><figcaption>
            <h4>SQLAlchemy 层次结构</h4>
        </figcaption>
</figure>

<p>其中最常用的组件，应该是 <strong>ORM</strong> 和 <strong>SQL 表达式语言</strong>，这两者既可以独立使用，也能结合使用。</p>
<p><strong>ORM</strong> 的好处在于它</p>
<ol>
<li>自动处理了数据库和 Python 对象之间的映射关系，屏蔽了两套系统之间的差异。程序员不需要再编写复杂的 SQL 语句，直接操作 Python 对象就行。</li>
<li>屏蔽了各数据库之间的差异，更换底层数据库不需要修改 SQL 语句，改下配置就行。</li>
<li>使数据库结构文档化，models 定义很清晰地描述了数据库的结构。</li>
<li>避免了不规范、冗余、风格不统一的 SQL 语句，可以避免很多人为 Bug，也方便维护。</li>
</ol>
<p>但是 ORM 需要消耗额外的性能来处理对象关系映射，此外用 ORM 做多表关联查询或复杂 SQL 查询时，效率低下。因此它适用于场景不太复杂，性能要求不太苛刻的场景。</p>
<p>都说 ORM 学习成本高，我自己也更倾向于直接使用 SQL 语句（毕竟更熟悉），因此这一篇笔记不涉及 ORM 部分，只记录 SQLAlchemy 的 Engine 与 SQL 表达式语言。</p>
<h2 id="一直接使用-enginehttpsdocssqlalchemyorgenlatestcoreengineshtmlsqlalchemycreate_engine-和-connections" class="headerLink">
    <a href="#%e4%b8%80%e7%9b%b4%e6%8e%a5%e4%bd%bf%e7%94%a8-enginehttpsdocssqlalchemyorgenlatestcoreengineshtmlsqlalchemycreate_engine-%e5%92%8c-connections" class="header-mark"></a>一、直接使用 <a href="https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine" target="_blank" rel="noopener noreffer">Engine</a> 和 Connections</h2><p>第一步是创建数据库引擎实例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">create_engine</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="s1">&#39;sqlite:///:memory:&#39;</span><span class="p">,</span> 
</span></span><span class="line"><span class="cl">                    <span class="n">echo</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span>  <span class="c1"># echo=True 表示打印出自动生成的 SQL 语句（通过 logging）</span>
</span></span><span class="line"><span class="cl">                    <span class="n">pool_size</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>  <span class="c1"># 连接池容量，默认为 5，生产环境下太小，需要修改。</span>
</span></span><span class="line"><span class="cl">                    <span class="c1"># 下面是 connection 回收的时间限制，默认 -1 不回收</span>
</span></span><span class="line"><span class="cl">                    <span class="n">pool_recycle</span><span class="o">=</span><span class="mi">7200</span><span class="p">)</span>   <span class="c1"># 超过 2 小时就重新连接（MySQL 默认的连接最大闲置时间为 8 小时）</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p><code>create_engine</code> 接受的第一个参数是数据库 URI，格式为 <code>dialect+driver://username:password@host:port/database</code>，dialect 是具体的数据库名称，driver 是驱动名称。key-value 是可选的参数。举例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># PostgreSQL</span>
</span></span><span class="line"><span class="cl">postgresql+psycopg2://scott:tiger@localhost/dbtest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># MySQL + PyMySQL（或者用更快的  mysqlclient）</span>
</span></span><span class="line"><span class="cl">mysql+pymysql://scott:tiger@localhost/dbtest
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># sqlite 内存数据库</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 注意 sqlite 要用三个斜杠，表示不存在 hostname，sqlite://&lt;nohostname&gt;/&lt;path&gt;</span>
</span></span><span class="line"><span class="cl">sqlite:///:memory:
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># sqlite 文件数据库</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 四个斜杠是因为文件的绝对路径以 / 开头：/home/ryan/Codes/Python/dbtest.db</span>
</span></span><span class="line"><span class="cl">sqlite:////home/ryan/Codes/Python/dbtest.db
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># SQL Server + pyodbc</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 首选基于 dsn 的连接，dsn 的配置请搜索hhh</span>
</span></span><span class="line"><span class="cl">mssql+pyodbc://scott:tiger@some_dsn
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果你的密码中含有 &lsquo;@&rsquo; 等特殊字符，就不能直接放入 URI 中，必须使用 <code>urllib.parse.quote_plus</code> 编码，然后再插入 URI.</p>
<p>引擎创建后，我们就可以直接获取 connection，然后执行 SQL 语句了。这种用法相当于把 SQLAlchemy 当成带 log 的数据库连接池使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">with</span> <span class="n">engine</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;select username from users&#34;</span><span class="p">)</span>  <span class="c1"># 无参直接使用</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 使用问号作占位符，前提是下层的 DBAPI 支持。更好的方式是使用 text()，这个后面说</span>
</span></span><span class="line"><span class="cl">    <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="s2">&#34;INSERT INTO table (id, value) VALUES (?, ?)&#34;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&#34;v1&#34;</span><span class="p">)</span>  <span class="c1"># 参数不需要包装成元组</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 查询返回的是 ResultProxy 对象，有和 dbapi 相同的 fetchone()、fetchall()、first() 等方法，还有一些拓展方法</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">result</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;username:&#34;</span><span class="p">,</span> <span class="n">row</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>但是要注意的是，connection 的 execute 是自动提交的（autocommit），这就像在 shell 里打开一个数据库客户端一样，分号结尾的 SQL 会被自动提交。
只有在 <code>BEGIN TRANSACTION</code> 内部，<code>AUTOCOMMIT</code> 会被临时设置为 <code>FALSE</code>，可以通过如下方法开始一个内部事务：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">transaction_a</span><span class="p">(</span><span class="n">connection</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">trans</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">begin</span><span class="p">()</span>  <span class="c1"># 开启一个 transaction</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># do sthings</span>
</span></span><span class="line"><span class="cl">        <span class="n">trans</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>  <span class="c1"># 这里需要手动提交</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">trans</span><span class="o">.</span><span class="n">rollback</span><span class="p">()</span>  <span class="c1"># 出现异常则 rollback</span>
</span></span><span class="line"><span class="cl">        <span class="k">raise</span>
</span></span><span class="line"><span class="cl"><span class="c1"># do other things</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">with</span> <span class="n">engine</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span> <span class="k">as</span> <span class="n">conn</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">transaction_a</span><span class="p">(</span><span class="n">conn</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="1-使用-texthttpsdocssqlalchemyorgenlatestcoresqlelementhtmlsqlalchemysqlexpressiontext-构建-sql" class="headerLink">
    <a href="#1-%e4%bd%bf%e7%94%a8-texthttpsdocssqlalchemyorgenlatestcoresqlelementhtmlsqlalchemysqlexpressiontext-%e6%9e%84%e5%bb%ba-sql" class="header-mark"></a>1. 使用 <a href="https://docs.sqlalchemy.org/en/latest/core/sqlelement.html#sqlalchemy.sql.expression.text" target="_blank" rel="noopener noreffer">text()</a> 构建 SQL</h3><p>相比直接使用 string，text() 的优势在于它：</p>
<ol>
<li>提供了统一的参数绑定语法，与具体的 DBAPI 无关。</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 1. 参数绑定语法</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">text</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 使用 :key 做占位符</span>
</span></span><span class="line"><span class="cl">            <span class="n">text</span><span class="p">(</span><span class="s1">&#39;select * from table where id &lt; :id and typeName=:type&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span><span class="s1">&#39;type&#39;</span><span class="p">:</span><span class="s1">&#39;USER_TABLE&#39;</span><span class="p">})</span>  <span class="c1"># 用 dict 传参数，更易读</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 参数类型指定</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">DateTime</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">date_param</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">today</span><span class="p">()</span><span class="o">+</span><span class="n">timedelta</span><span class="p">(</span><span class="n">days</span><span class="o">=-</span><span class="mi">1</span><span class="o">*</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sql</span><span class="o">=</span><span class="s2">&#34;delete from caw_job_alarm_log  where alarm_time &lt; :alarm_time_param&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># bindparams 是 bindparam 的列表，bindparam 则提供参数的一些额外信息（类型、值、限制等）</span>
</span></span><span class="line"><span class="cl"><span class="n">t</span><span class="o">=</span><span class="n">text</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="n">bindparams</span><span class="o">=</span><span class="p">[</span><span class="n">bindparam</span><span class="p">(</span><span class="s1">&#39;alarm_time_param&#39;</span><span class="p">,</span> <span class="n">type_</span><span class="o">=</span><span class="n">DateTime</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kc">True</span><span class="p">)])</span>
</span></span><span class="line"><span class="cl"><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="p">{</span><span class="s2">&#34;alarm_time_param&#34;</span><span class="p">:</span> <span class="n">date_param</span><span class="p">})</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>可以很方便地转换 Result 中列的类型</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">stmt</span> <span class="o">=</span> <span class="n">text</span><span class="p">(</span><span class="s2">&#34;SELECT * FROM table&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 使用 typemap 指定将 id 列映射为 Integer 类型，name 映射为 String 类型</span>
</span></span><span class="line"><span class="cl">            <span class="n">typemap</span><span class="o">=</span><span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span> <span class="n">Integer</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">:</span> <span class="n">String</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">          <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">result</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">stmt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 对多个查询结果，可以用 for obj in result 遍历</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 也可用 fetchone() 只获取一个</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二sql-表达式语言" class="headerLink">
    <a href="#%e4%ba%8csql-%e8%a1%a8%e8%be%be%e5%bc%8f%e8%af%ad%e8%a8%80" class="header-mark"></a>二、SQL 表达式语言</h2><blockquote>
<p>复杂的 SQL 查询可以直接用 raw sql 写，而增删改一般都是单表操作，用 SQL 表达式语言最方便。</p>
</blockquote>
<p>SQLAlchemy 表达式语言是一个使用 Python 结构表示关系数据库结构和表达式的系统。</p>
<h3 id="1-定义并创建表" class="headerLink">
    <a href="#1-%e5%ae%9a%e4%b9%89%e5%b9%b6%e5%88%9b%e5%bb%ba%e8%a1%a8" class="header-mark"></a>1. 定义并创建表</h3><p>SQL 表达式语言使用 Table 来定义表，而表的列则用 Column 定义。Column 总是关联到一个 Table 对象上。</p>
<p>一组 Table 对象以及它们的子对象的集合就被称作「数据库元数据（database metadata）」。metadata 就像你的网页分类收藏夹，相关的 Table 放在一个 metadata 中。</p>
<p>下面是创建元数据（一组相关联的表）的例子，：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">Table</span><span class="p">,</span> <span class="n">Column</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">String</span><span class="p">,</span> <span class="n">MetaData</span><span class="p">,</span> <span class="n">ForeignKey</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">metadata</span> <span class="o">=</span> <span class="n">MetaData</span><span class="p">()</span>  <span class="c1"># 先创建元数据（收藏夹）</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">users</span> <span class="o">=</span> <span class="n">Table</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="n">metadata</span><span class="p">,</span>  <span class="c1"># 创建 user 表，并放到 metadata 中</span>
</span></span><span class="line"><span class="cl">              <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">              <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">String</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">              <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;fullname&#39;</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">             <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">addresses</span> <span class="o">=</span> <span class="n">Table</span><span class="p">(</span><span class="s1">&#39;address&#39;</span><span class="p">,</span> <span class="n">metadata</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">                  <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                  <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;user_id&#39;</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="n">ForeignKey</span><span class="p">(</span><span class="s1">&#39;user.id&#39;</span><span class="p">)),</span>  <span class="c1"># 外键约束，引用 user 表的 id 列</span>
</span></span><span class="line"><span class="cl">                  <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;email_address&#39;</span><span class="p">,</span> <span class="n">String</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                 <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">metadata</span><span class="o">.</span><span class="n">create_all</span><span class="p">(</span><span class="n">engine</span><span class="p">)</span>  <span class="c1"># 使用 engine 创建 metadata 内的所有 Tables（会检测表是否已经存在，所以可以重复调用）</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="表定义中的约束" class="headerLink">
    <a href="#%e8%a1%a8%e5%ae%9a%e4%b9%89%e4%b8%ad%e7%9a%84%e7%ba%a6%e6%9d%9f" class="header-mark"></a>表定义中的约束</h4><blockquote>
<p>应该给所有的约束命名，即为 <code>name</code> 参数指定一个不冲突的列名。详见 <a href="https://alembic.sqlalchemy.org/en/latest/naming.html" target="_blank" rel="noopener noreffer">The Importance of Naming Constraints</a></p>
</blockquote>
<p>表还有一个属性：<a href="https://www.cnblogs.com/kirito-c/p/10295693.html" target="_blank" rel="noopener noreffer">约束条件</a>。下面一一进行说明。</p>
<ol>
<li><strong>外键约束</strong>：用于在删除或更新某个值或行时，对主键/外键关系中一组数据列强制进行的操作限制。
<ol>
<li>用法一：<code>Column('user_id', None, ForeignKey('user.id'))</code>，直接在 <code>Column</code> 中指定。这也是最常用的方法</li>
<li>用法二：通过 <code>ForeignKeyConstraint(columns, refcolumns)</code> 构建约束，作为参数传给 <code>Table</code>.</li>
</ol>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">item</span> <span class="o">=</span> <span class="n">Table</span><span class="p">(</span><span class="s1">&#39;item&#39;</span><span class="p">,</span> <span class="n">metadata</span><span class="p">,</span>  <span class="c1"># 商品 table</span>
</span></span><span class="line"><span class="cl">    <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="kc">True</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="n">String</span><span class="p">(</span><span class="mi">60</span><span class="p">),</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;invoice_id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>  <span class="c1"># 发票 id，是外键</span>
</span></span><span class="line"><span class="cl">    <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;ref_num&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="kc">False</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">    <span class="n">ForeignKeyConstraint</span><span class="p">([</span><span class="s1">&#39;invoice_id&#39;</span><span class="p">,</span> <span class="s1">&#39;ref_num&#39;</span><span class="p">],</span>  <span class="c1"># 当前表中的外键名称</span>
</span></span><span class="line"><span class="cl">                         <span class="p">[</span><span class="s1">&#39;invoice.id&#39;</span><span class="p">,</span> <span class="s1">&#39;invoice.ref_num&#39;</span><span class="p">])</span>  <span class="c1"># 被引用的外键名称的序列（被引用的表）</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li><code>on delete</code> 与 <code>on update</code>：<strong>外键约束的两个约束条件</strong>，通过 <code>ForeignKey()</code> 或 <code>ForeignKeyConstraint()</code> 的关键字参数 <code>ondelete/onupdate</code> 传入。
可选值有：
<ol>
<li><strong>默认行为 <code>NO ACTION</code></strong>：什么都不做，直接报错。</li>
<li><code>CASCADE</code>：删除/更新 父表数据时，<strong>从表数据会同时被 删除/更新</strong>。（无报错）</li>
<li><code>RESTRICT</code>：<strong>不允许直接 删除/更新 父表数据</strong>，直接报错。（和默认行为基本一致）</li>
<li><code>SET NULL</code> or <code>SET DEFAULT</code>：删除/更新 父表数据时，将对应的从表数据重置为 <code>NULL</code> 或者默认值。</li>
</ol>
</li>
<li><strong>唯一性约束</strong>：<code>UniqueConstraint('col2', 'col3', name='uix_1')</code>，作为参数传给 <code>Table</code>.</li>
<li><strong>CHECK 约束</strong>：<code>CheckConstraint('col2 &gt; col3 + 5', name='check1')</code>， 作为参数传给 <code>Table</code>.</li>
<li>主键约束：不解释
<ol>
<li>方法一：通过 <code>Column('id', Integer, primary_key=True)</code> 指定主键。（参数 <code>primary_key</code> 可在多个 <code>Column</code> 上使用）</li>
<li>方法二：使用 <code>PrimaryKeyConstraint</code></li>
</ol>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">PrimaryKeyConstraint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">my_table</span> <span class="o">=</span> <span class="n">Table</span><span class="p">(</span><span class="s1">&#39;mytable&#39;</span><span class="p">,</span> <span class="n">metadata</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;version_id&#39;</span><span class="p">,</span> <span class="n">Integer</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">            <span class="n">Column</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">,</span> <span class="n">String</span><span class="p">(</span><span class="mi">50</span><span class="p">)),</span>
</span></span><span class="line"><span class="cl">            <span class="n">PrimaryKeyConstraint</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;version_id&#39;</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;mytable_pk&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-增删改查语句" class="headerLink">
    <a href="#2-%e5%a2%9e%e5%88%a0%e6%94%b9%e6%9f%a5%e8%af%ad%e5%8f%a5" class="header-mark"></a>2. 增删改查语句</h3><ol>
<li><strong>增</strong>:</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 方法一，使用 values 传参</span>
</span></span><span class="line"><span class="cl"><span class="n">ins</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">insert</span><span class="p">()</span><span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s2">&#34;Jack&#34;</span><span class="p">,</span> <span class="n">fullname</span><span class="o">=</span><span class="s2">&#34;Jack Jones&#34;</span><span class="p">)</span>  <span class="c1"># 可以通过 str(ins) 查看自动生成的 sql</span>
</span></span><span class="line"><span class="cl"><span class="n">connection</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">ins</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方法二，参数传递给 execute()</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">users</span><span class="o">.</span><span class="n">insert</span><span class="p">(),</span> <span class="nb">id</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s1">&#39;wendy&#39;</span><span class="p">,</span> <span class="n">fullname</span><span class="o">=</span><span class="s1">&#39;Wendy Williams&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 方法三，批量 INSERT，相当于 executemany</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">addresses</span><span class="o">.</span><span class="n">insert</span><span class="p">(),</span> <span class="p">[</span>  <span class="c1"># 插入到 addresses 表</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span><span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;email_address&#39;</span><span class="p">:</span> <span class="s1">&#39;jack@yahoo.com&#39;</span><span class="p">},</span>  <span class="c1"># 传入 dict 列表</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span><span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;email_address&#39;</span><span class="p">:</span> <span class="s1">&#39;jack@msn.com&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span><span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;email_address&#39;</span><span class="p">:</span> <span class="s1">&#39;www@www.org&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">    <span class="p">{</span><span class="s1">&#39;user_id&#39;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;email_address&#39;</span><span class="p">:</span> <span class="s1">&#39;wendy@aol.com&#39;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 此外，通过使用 bindparam，INSERT 还可以执行更复杂的操作</span>
</span></span><span class="line"><span class="cl"><span class="n">stmt</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">insert</span><span class="p">()</span> \ 
</span></span><span class="line"><span class="cl">         <span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">bindparam</span><span class="p">(</span><span class="s1">&#39;_name&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34; .. name&#34;</span><span class="p">)</span>  <span class="c1"># string 拼接</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span><span class="mi">4</span><span class="p">,</span> <span class="s1">&#39;_name&#39;</span><span class="p">:</span><span class="s1">&#39;name1&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span> <span class="s1">&#39;_name&#39;</span><span class="p">:</span><span class="s1">&#39;name2&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">        <span class="p">{</span><span class="s1">&#39;id&#39;</span><span class="p">:</span><span class="mi">6</span><span class="p">,</span> <span class="s1">&#39;_name&#39;</span><span class="p">:</span><span class="s1">&#39;name3&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">     <span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li><strong>删</strong>：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">_table</span><span class="o">.</span><span class="n">delete</span><span class="p">()</span> \
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">_table</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">f1</span><span class="o">==</span><span class="n">value1</span><span class="p">)</span> \
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">_table</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">f2</span><span class="o">==</span><span class="n">value2</span><span class="p">)</span>  <span class="c1"># where 指定条件</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="3">
<li><strong>改</strong>：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 举例</span>
</span></span><span class="line"><span class="cl"><span class="n">stmt</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">update</span><span class="p">()</span> \
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">users</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="s1">&#39;jack&#39;</span><span class="p">)</span> \
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s1">&#39;tom&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">stmt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 批量更新</span>
</span></span><span class="line"><span class="cl"><span class="n">stmt</span> <span class="o">=</span> <span class="n">users</span><span class="o">.</span><span class="n">update</span><span class="p">()</span> \
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">users</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">bindparam</span><span class="p">(</span><span class="s1">&#39;oldname&#39;</span><span class="p">))</span> \
</span></span><span class="line"><span class="cl">             <span class="o">.</span><span class="n">values</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">bindparam</span><span class="p">(</span><span class="s1">&#39;newname&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">stmt</span><span class="p">,</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">     <span class="p">{</span><span class="s1">&#39;oldname&#39;</span><span class="p">:</span><span class="s1">&#39;jack&#39;</span><span class="p">,</span> <span class="s1">&#39;newname&#39;</span><span class="p">:</span><span class="s1">&#39;ed&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">     <span class="p">{</span><span class="s1">&#39;oldname&#39;</span><span class="p">:</span><span class="s1">&#39;wendy&#39;</span><span class="p">,</span> <span class="s1">&#39;newname&#39;</span><span class="p">:</span><span class="s1">&#39;mary&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">     <span class="p">{</span><span class="s1">&#39;oldname&#39;</span><span class="p">:</span><span class="s1">&#39;jim&#39;</span><span class="p">,</span> <span class="s1">&#39;newname&#39;</span><span class="p">:</span><span class="s1">&#39;jake&#39;</span><span class="p">},</span>
</span></span><span class="line"><span class="cl">     <span class="p">])</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以看到，所有的条件都是通过 <code>where</code> 指定的，它和后面 ORM 的 filter 接受的参数是一样的。（详细的会在第二篇文章里讲）</p>
<ol start="4">
<li><strong>查</strong></li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy.sql</span> <span class="kn">import</span> <span class="n">select</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 1. 字段选择</span>
</span></span><span class="line"><span class="cl"><span class="n">s1</span> <span class="o">=</span> <span class="n">select</span><span class="p">([</span><span class="n">users</span><span class="p">])</span>  <span class="c1"># 相当于 select * from users</span>
</span></span><span class="line"><span class="cl"><span class="n">s2</span> <span class="o">=</span> <span class="n">select</span><span class="p">([</span><span class="n">users</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">users</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">fullname</span><span class="p">])</span>  <span class="c1"># 这个就是只 select 一部分</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 2. 添加过滤条件</span>
</span></span><span class="line"><span class="cl"><span class="n">s3</span> <span class="o">=</span> <span class="n">select</span><span class="p">([</span><span class="n">users</span><span class="p">])</span> \
</span></span><span class="line"><span class="cl">    <span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">users</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">addresses</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">user_id</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">execute</span><span class="p">(</span><span class="n">s1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 可用 for row in res 遍历结果集，也可用 fetchone() 只获取一行</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>查询返回的是 ResultProxy 对象，这是 SQLAlchemy 对 Python DB-API 的 cursor 的一个封装类，要从中获取结果行，主要有下列几个方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">row1</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">fetchone</span><span class="p">()</span>  <span class="c1"># 对应 cursor.fetchone()</span>
</span></span><span class="line"><span class="cl"><span class="n">row2</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">fetchall</span><span class="p">()</span>  <span class="c1"># 对应 cursor.fetchall()</span>
</span></span><span class="line"><span class="cl"><span class="n">row3</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">fetchmany</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>  <span class="c1"># 对应 cursor.fetchmany(size=3)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">row4</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">first</span><span class="p">()</span>  <span class="c1"># 获取一行，然后立即调用 result 的 close() 方法</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">col</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="n">mytable</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">mycol</span><span class="p">]</span> <span class="c1"># 获取 mycol 这一列</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">result</span><span class="o">.</span><span class="n">rowcount</span>  <span class="c1"># 结果集的行数</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">同时</span><span class="err">，</span><span class="n">result</span> <span class="n">也实现了</span> <span class="nb">next</span> <span class="n">protocol</span><span class="err">，</span><span class="n">因此可以直接用</span> <span class="k">for</span> <span class="n">循环遍历</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="where-进阶" class="headerLink">
    <a href="#where-%e8%bf%9b%e9%98%b6" class="header-mark"></a>where 进阶</h3><p>通过使用 or_、and_、in_ model.join 等方法，where 可以构建更复杂的 SQL 语句。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">sqlalchemy.sql</span> <span class="kn">import</span> <span class="n">and_</span><span class="p">,</span> <span class="n">or_</span><span class="p">,</span> <span class="n">not_</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">s</span> <span class="o">=</span> <span class="n">select</span><span class="p">([(</span><span class="n">users</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">fullname</span> <span class="o">+</span>
</span></span><span class="line"><span class="cl">               <span class="s2">&#34;, &#34;</span> <span class="o">+</span> <span class="n">addresses</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">email_address</span><span class="p">)</span><span class="o">.</span>
</span></span><span class="line"><span class="cl">                <span class="n">label</span><span class="p">(</span><span class="s1">&#39;title&#39;</span><span class="p">)])</span><span class="o">.</span>\
</span></span><span class="line"><span class="cl">        <span class="n">where</span><span class="p">(</span><span class="n">users</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">addresses</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">user_id</span><span class="p">)</span><span class="o">.</span>\
</span></span><span class="line"><span class="cl">        <span class="n">where</span><span class="p">(</span><span class="n">users</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">between</span><span class="p">(</span><span class="s1">&#39;m&#39;</span><span class="p">,</span> <span class="s1">&#39;z&#39;</span><span class="p">))</span><span class="o">.</span>\
</span></span><span class="line"><span class="cl">        <span class="n">where</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">               <span class="n">or_</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">                  <span class="n">addresses</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">email_address</span><span class="o">.</span><span class="n">like</span><span class="p">(</span><span class="s1">&#39;%@aol.com&#39;</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">                  <span class="n">addresses</span><span class="o">.</span><span class="n">c</span><span class="o">.</span><span class="n">email_address</span><span class="o">.</span><span class="n">like</span><span class="p">(</span><span class="s1">&#39;%@msn.com&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">               <span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="链接" class="headerLink">
    <a href="#%e9%93%be%e6%8e%a5" class="header-mark"></a>链接</h2><ul>
<li><a href="https://docs.sqlalchemy.org/en/latest/core/connections.html" target="_blank" rel="noopener noreffer">使用 Engines 和 Connections</a></li>
<li><a href="https://docs.sqlalchemy.org/en/latest/core/tutorial.html" target="_blank" rel="noopener noreffer">SQL 表达式语言入门</a></li>
<li><a href="https://docs.sqlalchemy.org/en/13/core/constraints.html" target="_blank" rel="noopener noreffer">SQLAlchemy - 定义约束</a></li>
<li><a href="https://www.cnblogs.com/harrychinese/archive/2012/09/12/My_Own_Tutorial_For_SqlAlchemy.html" target="_blank" rel="noopener noreffer">SQLAlchemy个人学习笔记完整汇总</a></li>
<li><a href="https://github.com/hackersandslackers/sqlalchemy-tutorial" target="_blank" rel="noopener noreffer">hackersandslackers/sqlalchemy-tutorial</a></li>
</ul>
]]></content></entry><entry><title type="html">SQL 基础笔记（三）约束</title><link href="https://thiscute.world/posts/sql-basics-3-restrict/"/><id>https://thiscute.world/posts/sql-basics-3-restrict/</id><author><name>ryan4yin</name></author><published>2019-01-20T21:08:46+08:00</published><updated>2019-01-20T21:08:46+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记不保证正确。</p>
</blockquote>
<p>数据类型是限制我们可以在表里存储什么数据的一种方法。不过，对于许多应用来说， 这种限制实在是太粗糙了。比如，一个包含产品价格的字段应该只接受正数。 但是没有哪种标准数据类型只接受正数。 另外一个问题是你可能需要根据其它字段或者其它行的数据来约束字段数据。比如， 在一个包含产品信息的表中，每个产品编号都应该只有一行。</p>
<p>对于这些问题，SQL 允许你在字段和表上定义约束。约束允许你对数据施加任意控制。 如果用户企图在字段里存储违反约束的数据，那么就会抛出一个错误。 这种情况同时也适用于数值来自默认值的情况。</p>
<h3 id="1-外键-foreign-key" class="headerLink">
    <a href="#1-%e5%a4%96%e9%94%ae-foreign-key" class="header-mark"></a>1. 外键 <code>FOREIGN KEY</code></h3><p>外键约束声明一个字段(或者一组字段)的数值必须匹配另外一个表中出现的数值。
创建外键约束的前提是，该外键所在的表已经存在，并且外键必须是 UNIQUE 的。（主键默认 UNIQUE 且 NOT NULL）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">&lt;</span><span class="err">字段名</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">类型</span><span class="o">&gt;</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">&lt;</span><span class="err">字段名</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">类型</span><span class="o">&gt;</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="o">&lt;</span><span class="err">外键所在的表名</span><span class="o">&gt;</span><span class="w"> </span><span class="p">(</span><span class="o">&lt;</span><span class="err">字段名</span><span class="o">&gt;</span><span class="p">),</span><span class="w">  </span><span class="c1">-- 这创建了一个外键
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>还有另一种语法，它支持以多个字段为外键（<strong>字段约束也可以写成表约束，也就是放在一个独立的行中。而反过来很可能不行</strong>）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">CREATE TABLE &lt;表名&gt; (
</span></span><span class="line"><span class="cl">    &lt;字段名1&gt; &lt;类型&gt; PRIMARY KEY,
</span></span><span class="line"><span class="cl">    &lt;字段名2&gt; &lt;类型&gt;
</span></span><span class="line"><span class="cl">    &lt;字段名3&gt; &lt;类型&gt;
</span></span><span class="line"><span class="cl">    ...
</span></span><span class="line"><span class="cl">    FOREIGN KEY (&lt;字段名2&gt;,  &lt;字段名3&gt;) REFERENCES &lt;外键所在的表名&gt; (&lt;字段名4&gt;, &lt;字段名5&gt;)
</span></span><span class="line"><span class="cl">);
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个表也可以包含多个外键约束。这个特性用于实现表之间的多对多关系。 比如你有关于产品和订单的表，但现在你想允许一个订单可以包含多种产品 (上面那个结构是不允许这么做的)，你可以使用这样的结构：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">products</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">product_no</span><span class="w"> </span><span class="nb">integer</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">price</span><span class="w"> </span><span class="nb">numeric</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">orders</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">order_id</span><span class="w"> </span><span class="nb">integer</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">shipping_address</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">order_items</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">product_no</span><span class="w"> </span><span class="nb">integer</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">products</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">order_id</span><span class="w"> </span><span class="nb">integer</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">orders</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">quantity</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">product_no</span><span class="p">,</span><span class="w"> </span><span class="n">order_id</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>外键能通过 <code>ALTER</code> 语句添加或删除</p>
<h3 id="2-级联操作-on-delete-与-on-update" class="headerLink">
    <a href="#2-%e7%ba%a7%e8%81%94%e6%93%8d%e4%bd%9c-on-delete-%e4%b8%8e-on-update" class="header-mark"></a>2. 级联操作 <code>ON DELETE</code> 与 <code>ON UPDATE</code></h3><p>上面说过：外键约束声明一个字段(或者一组字段)的数值必须匹配另外一个表中出现的数值。</p>
<p>但是以 1. 中最后一个 sql 为例，如果一个订单（order）在创建之后，该订单包含的某个产品（product）被删除了，会发生什么？</p>
<p>这个例子中，订单包含的产品通过外键被记录在 order_items 表中。现在如果你要删除 product 中某个被 order_items 引用了的行，默认情况为 <code>NO ACTION</code>，就是直接报错。</p>
<p>这个行为也可以手动指定：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">products</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">product_no</span><span class="w"> </span><span class="nb">integer</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">price</span><span class="w"> </span><span class="nb">numeric</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">orders</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">order_id</span><span class="w"> </span><span class="nb">integer</span><span class="w"> </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">shipping_address</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">order_items</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">product_no</span><span class="w"> </span><span class="nb">integer</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">products</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="k">DELETE</span><span class="w"> </span><span class="k">RESTRICT</span><span class="p">,</span><span class="w">  </span><span class="c1">-- 限制，也就是禁止删除被它引用的行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">order_id</span><span class="w"> </span><span class="nb">integer</span><span class="w"> </span><span class="k">REFERENCES</span><span class="w"> </span><span class="n">orders</span><span class="w"> </span><span class="k">ON</span><span class="w"> </span><span class="k">DELETE</span><span class="w"> </span><span class="k">CASCADE</span><span class="p">,</span><span class="w">    </span><span class="c1">-- 级联，在删除被它引用的行的时候，这一行本身也会被自动删除掉
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="n">quantity</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="n">product_no</span><span class="p">,</span><span class="w"> </span><span class="n">order_id</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>除了 <code>RESTRICT</code> 和 <code>CASCADE</code> 外，在外键上的动作还有两个选项：<code>SET NULL</code> 和 <code>SET DEFAULT</code>，顾名思义，就是在被引用的行删除后将外键设置为 <code>NULL</code> 或默认值。</p>
<p><code>ON UPDATE</code> 与 <code>ON DELETE</code> 的动作是一样的，只是 <code>CASCADE</code> 表示同步更新。</p>
<h3 id="3-check-约束" class="headerLink">
    <a href="#3-check-%e7%ba%a6%e6%9d%9f" class="header-mark"></a>3. <code>CHECK</code> 约束</h3><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">products</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">product_no</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">price</span><span class="w"> </span><span class="nb">numeric</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">price</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>你还可以给这个约束取一个独立的名字。这样就可以令错误消息更清晰， 并且在你需要修改它的时候引用这个名字。语法是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">products</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">product_no</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">price</span><span class="w"> </span><span class="nb">numeric</span><span class="w"> </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">positive_price</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">price</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>稍微复杂一点的例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">products</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">product_no</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">price</span><span class="w"> </span><span class="nb">numeric</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">price</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">discounted_price</span><span class="w"> </span><span class="nb">numeric</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">discounted_price</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="w"> </span><span class="k">AND</span><span class="w"> </span><span class="n">price</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">discounted_price</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>同样的，可以为 CHECK 命名，令错误信息更清晰：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="n">products</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">product_no</span><span class="w"> </span><span class="nb">integer</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">name</span><span class="w"> </span><span class="nb">text</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">price</span><span class="w"> </span><span class="nb">numeric</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">price</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="n">discounted_price</span><span class="w"> </span><span class="nb">numeric</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">discounted_price</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="mi">0</span><span class="p">),</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">CONSTRAINT</span><span class="w"> </span><span class="n">valid_discount</span><span class="w"> </span><span class="k">CHECK</span><span class="w"> </span><span class="p">(</span><span class="n">price</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">discounted_price</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>要注意的是，<strong>当约束表达式计算结果为真或 NULL 的时候，检查约束会被认为是满足条件的</strong>。 因为大多数表达式在含有 NULL 操作数的时候结果都是 NULL ，所以这些约束不能阻止字段值为 NULL 。要排除掉 NULL，只能使用 <code>NOT NULL</code> 约束。（所以就说 NULL 是万恶之源hhh）</p>
<h3 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h3><ul>
<li><a href="http://www.postgres.cn/docs/9.4/ddl-constraints.html" target="_blank" rel="noopener noreffer">约束</a></li>
</ul>
]]></content></entry><entry><title type="html">Julia 学习笔记（一）：数组</title><link href="https://thiscute.world/posts/julia-notes-1-array/"/><id>https://thiscute.world/posts/julia-notes-1-array/</id><author><name>ryan4yin</name></author><published>2019-01-14T19:51:00+08:00</published><updated>2019-01-14T19:51:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人向，只会记录一些需要注意的点。</p>
</blockquote>
<h2 id="前言" class="headerLink">
    <a href="#%e5%89%8d%e8%a8%80" class="header-mark"></a>前言</h2><p>学习 Julia 已经有一段时间了，但是进步缓慢。这一方面是最近代码写得少，一方面是 Julia 学习资料少、中文资料更少，但也有我没做笔记的缘故导致学习效率不佳。</p>
<p>最近发现一份很不错的入门教程：<a href="https://zh.wikibooks.org/wiki/Introducing_Julia" target="_blank" rel="noopener noreffer">Introducing_Julia</a>，但是它的中文版本仍然有很多不足，就打算给它添加翻译和润色（<a href="https://github.com/zxj5470" target="_blank" rel="noopener noreffer">zxj5470</a> 完成了绝大部分翻译工作），顺便总结一份自己的笔记。</p>
<p><strong>NOTE</strong>：Julia 的主要语言特征在于<strong>类型系统</strong>和<strong>多重派发</strong>，而主要的科学计算特征则是<strong>矩阵</strong>和整个标准库及生态圈。</p>
<h2 id="一数组" class="headerLink">
    <a href="#%e4%b8%80%e6%95%b0%e7%bb%84" class="header-mark"></a>一、数组</h2><p>在 Julia 中，数组被用作列表（lists）、向量（vectors）、表（tables）和矩阵（matrices）。</p>
<h3 id="1-数组的创建" class="headerLink">
    <a href="#1-%e6%95%b0%e7%bb%84%e7%9a%84%e5%88%9b%e5%bb%ba" class="header-mark"></a>1. 数组的创建</h3><p>这里尤其需要注意的是数组构造的几种方法，以及它们的区别。</p>
<h4 id="11-一维数组vectorlist" class="headerLink">
    <a href="#11-%e4%b8%80%e7%bb%b4%e6%95%b0%e7%bb%84vectorlist" class="header-mark"></a>1.1 一维数组（vector/list）</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>  <span class="c"># 逗号分隔的语法用于创建一维数组</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>向量，指列向量，Julia 使用的是 Fortran Order，各种操作都是<strong>列优先于行</strong>的。（和 numpy 相反，numpy 是 C Order 的，行优先于列）</p>
<h4 id="12-二维数组tablematrix" class="headerLink">
    <a href="#12-%e4%ba%8c%e7%bb%b4%e6%95%b0%e7%bb%84tablematrix" class="header-mark"></a>1.2. 二维数组（table/matrix）</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">mat</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]</span>  <span class="c"># 空格分隔的语法，用于创建二维数组（或称行向量）</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span><span class="o">×</span><span class="mi">4</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]</span>  <span class="c"># 分号和换行符(\n)，用于分隔数组中不同的行</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span><span class="o">×</span><span class="mi">2</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>  <span class="mi">2</span>
</span></span><span class="line"><span class="cl"> <span class="mi">3</span>  <span class="mi">4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>空格对应函数 <code>hcat</code>，表示横向拼接各个矩阵/元素。
分号和换行对应函数 <code>vcat</code>，表示垂直拼接各个矩阵/元素。</p>
<p>下面的例子演示了拼接（空格）和单纯分隔各个元素（逗号）的区别：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span><span class="p">]</span> <span class="mi">5</span><span class="p">]</span> <span class="c"># 用空格做横向拼接（或称水平拼接）</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span><span class="o">×</span><span class="mi">5</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">4</span>  <span class="mi">5</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">5</span><span class="p">]</span> <span class="c"># 用逗号分隔</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Any</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>      
</span></span><span class="line"><span class="cl"> <span class="mi">2</span>      
</span></span><span class="line"><span class="cl">  <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"> <span class="mi">5</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>能看到在拼接操作中，<code>[3 4]</code> 被“解开”了，而用逗号时，它的行为和 Python 的 <code>list</code> 一样（区别只是 Julia 的 list 列优先）。</p>
<p>使用拼接需要注意的情况举例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="mi">5</span><span class="p">]</span>  <span class="c"># 横向拼接要求 items 的行数相同！</span>
</span></span><span class="line"><span class="cl"><span class="n">ERROR</span><span class="o">:</span> <span class="kt">DimensionMismatch</span><span class="p">(</span><span class="s">&#34;mismatch in dimension 1 (expected 1 got 2)&#34;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因为 <code>[3, 4]</code> 有两行，而 数组中的其他项是数值，显然行数不同，所以抛出了 Error.</p>
<p>可以想见，垂直拼接则要求 items 的列数相同。</p>
<p>另外当垂直拼接用于基本元素时，效果等同于逗号。（结果都是单列数组）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">h</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span><span class="p">;</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[[</span><span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">];</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>  <span class="c"># 等价于 [[1, 2]; [3, 4]]</span>
</span></span><span class="line"><span class="cl"><span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-数组的索引" class="headerLink">
    <a href="#2-%e6%95%b0%e7%bb%84%e7%9a%84%e7%b4%a2%e5%bc%95" class="header-mark"></a>2. 数组的索引</h3><p>数组的索引方式和 numpy 很类似。有很多高级索引方式。</p>
<p>这里我想说的是类似“齐次坐标”的索引特性。</p>
<p>首先，单个元素可以看作是零维的向量，数学上零维也可以看作是任意维，因此可以这样玩：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>  <span class="c"># 被当成二维</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>  <span class="c"># 2[1] 仍然是整数 2</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>  <span class="c"># 三维</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="mf">3.14</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mf">3.14</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="nb">π</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nb">π</span> <span class="o">=</span> <span class="mf">3.1415926535897</span><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="sc">&#39;1&#39;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="sc">&#39;1&#39;</span><span class="o">:</span> <span class="n">ASCII</span><span class="o">/</span><span class="n">Unicode</span> <span class="n">U</span><span class="o">+</span><span class="mi">0031</span> <span class="p">(</span><span class="n">category</span> <span class="n">Nd</span><span class="o">:</span> <span class="kt">Number</span><span class="p">,</span> <span class="n">decimal</span> <span class="n">digit</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="sc">&#39;1&#39;</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="sc">&#39;1&#39;</span><span class="o">:</span> <span class="n">ASCII</span><span class="o">/</span><span class="n">Unicode</span> <span class="n">U</span><span class="o">+</span><span class="mi">0031</span> <span class="p">(</span><span class="n">category</span> <span class="n">Nd</span><span class="o">:</span> <span class="kt">Number</span><span class="p">,</span> <span class="n">decimal</span> <span class="n">digit</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>多维数组也能使用类似“齐次坐标”的索引方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">2</span><span class="o">×</span><span class="mi">2</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>  <span class="mi">2</span>
</span></span><span class="line"><span class="cl"> <span class="mi">3</span>  <span class="mi">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>  <span class="c"># m[1] 是整数 1，这相当于 1[1]</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>多维矩阵，在更高的维度上，也能被当成“零维”来看待，前面说过了“零维”也相当于“无限维”，所以多维数组也能用这么索引。</p>
<p>但是拓展的维度索引只能是 1！既然被看作“零维”，就只相当于一个点，自然不可能有更高的索引：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="mi">1</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">ERROR</span><span class="o">:</span> <span class="kt">BoundsError</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">ERROR</span><span class="o">:</span> <span class="kt">BoundsError</span><span class="o">:</span> <span class="n">attempt</span> <span class="n">to</span> <span class="n">access</span> <span class="mi">2</span><span class="o">×</span><span class="mi">2</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span> <span class="n">at</span> <span class="n">index</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">ERROR</span><span class="o">:</span> <span class="kt">BoundsError</span><span class="o">:</span> <span class="n">attempt</span> <span class="n">to</span> <span class="n">access</span> <span class="mi">2</span><span class="o">×</span><span class="mi">2</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span> <span class="n">at</span> <span class="n">index</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="o">...</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-推导式comprehensionhttpsdocsjulialangorgenv1manualarrayscomprehensions-1与生成器表达式generator-expressionhttpsdocsjulialangorgenv1manualarraysgenerator-expressions-1" class="headerLink">
    <a href="#3-%e6%8e%a8%e5%af%bc%e5%bc%8fcomprehensionhttpsdocsjulialangorgenv1manualarrayscomprehensions-1%e4%b8%8e%e7%94%9f%e6%88%90%e5%99%a8%e8%a1%a8%e8%be%be%e5%bc%8fgenerator-expressionhttpsdocsjulialangorgenv1manualarraysgenerator-expressions-1" class="header-mark"></a>3. 推导式（<a href="https://docs.julialang.org/en/v1/manual/arrays/#Comprehensions-1" target="_blank" rel="noopener noreffer">comprehension</a>）与生成器表达式（<a href="https://docs.julialang.org/en/v1/manual/arrays/#Generator-Expressions-1" target="_blank" rel="noopener noreffer">generator expression</a>）</h3><p>和 Python 的列表推导式与生成器表达式很像，但是更强大——Julia 是面向矩阵的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span> <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">]</span>  <span class="c"># 这个语法和 Python 一致</span>
</span></span><span class="line"><span class="cl"><span class="mi">9</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="mi">3</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"> <span class="mi">6</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">]</span>  <span class="c"># 这个是多维的语法</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span><span class="o">×</span><span class="mi">3</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="mi">3</span>  <span class="mi">4</span>  <span class="mi">5</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>  <span class="mi">5</span>  <span class="mi">6</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 在后面加 guard 的情况下，结果坍缩成一维（这时两种语法结果没有差别）</span>
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span> <span class="k">if</span> <span class="n">iseven</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl"><span class="mi">5</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">2</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="mi">4</span>
</span></span><span class="line"><span class="cl"> <span class="mi">6</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c"># 在前面做判断，因为没有过滤元素，所以仍然保持了原有结构。</span>
</span></span><span class="line"><span class="cl"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[(</span><span class="n">iseven</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="mi">3</span><span class="o">×</span><span class="mi">3</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">1</span>
</span></span><span class="line"><span class="cl"> <span class="mi">2</span>  <span class="mi">1</span>  <span class="mi">2</span>
</span></span><span class="line"><span class="cl"> <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">1</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content></entry><entry><title type="html">常见压缩格式的区别，及 Linux 下的压缩相关指令</title><link href="https://thiscute.world/posts/compression-related-instructions-under-linux/"/><id>https://thiscute.world/posts/compression-related-instructions-under-linux/</id><author><name>ryan4yin</name></author><published>2019-01-14T19:51:00+08:00</published><updated>2019-01-14T19:51:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>可先浏览加粗部分</p>
</blockquote>
<h2 id="一常见压缩档" class="headerLink">
    <a href="#%e4%b8%80%e5%b8%b8%e8%a7%81%e5%8e%8b%e7%bc%a9%e6%a1%a3" class="header-mark"></a>一、常见压缩档</h2><pre><code>*.zip        |    zip 程序压缩打包的档案；  （很常见，但是因为不包含文档名编码信息，跨平台可能会乱码）
*.rar        |    rar 程序压缩打包的档案；（在windows上很常见，但是是商业软件。）
*.gz         |   gzip 程序压缩的档案； （linux目前使用最广泛的压缩格式）
*.bz2        |   bzip2 程序压缩的档案；
*.xz         |    xz 程序压缩的档案；
*.tar        |    tar 程序打包的资料，并没有压缩过；
*.tar.gz     |    tar 程序打包的档案，其中并且经过 gzip 的压缩 （最常见）
*.tar.bz2    |   tar 程序打包的档案，其中并且经过 bzip2 的压缩 
*.tar.xz     |   tar 程序打包的档案，其中并且经过 xz 的压缩 （新一代压缩选择）
*.7z         |  7zip 程序压缩打包的档案。
</code></pre>
<p>目前最常见的是 <code>tar.gz</code> <code>tar.xz</code> <code>tar.7z</code> 这三种格式。</p>
<h2 id="二以能否压缩多文档分类" class="headerLink">
    <a href="#%e4%ba%8c%e4%bb%a5%e8%83%bd%e5%90%a6%e5%8e%8b%e7%bc%a9%e5%a4%9a%e6%96%87%e6%a1%a3%e5%88%86%e7%b1%bb" class="header-mark"></a>二、以能否压缩多文档分类</h2><ol>
<li>
<p><code>gzip</code> <code>bzip2</code> <code>xz</code> 这三个压缩格式都<strong>只能压缩单个文档</strong>。（换而言之，该进程的输入输出都是流，不包含文档树信息。）
因此如果要用它们压缩多个文档或目录，需要使用另一个软件来先将要压缩的文档打包成一个文档（包含文档树信息），这个命令就是 <code>tar</code>.
先使用 <code>tar</code> 归档要压缩的多文档，再对生成的 <code>*.tar</code> 使用 上述压缩指令（或者直接使用管道重定向），Linux 下是这样实现多文档压缩的。</p>
</li>
<li>
<p>而 <code>7z</code> 和 <code>zip</code>，以及 <code>rar</code> 格式，都<strong>同时具有了 归档(tar) 和 压缩 两个功能</strong>，（也就是该格式包含了文档树信息咯）也就是说它们可以直接压缩多个文档。</p>
</li>
</ol>
<h2 id="三各格式使用的算法差别" class="headerLink">
    <a href="#%e4%b8%89%e5%90%84%e6%a0%bc%e5%bc%8f%e4%bd%bf%e7%94%a8%e7%9a%84%e7%ae%97%e6%b3%95%e5%b7%ae%e5%88%ab" class="header-mark"></a>三、各格式使用的算法差别</h2><ol>
<li><code>gzip</code> 成熟的格式，使用的算法基于 DEFLATE。（压缩比适中）</li>
<li><code>7z</code> 新一代格式，使用的压缩算法可替换，默认是使用的 lzma/lzma2 算法，使用 AES-256 作为加密算法。</li>
<li><code>xz</code> 同样使用的 lzma/lzma2 算法，不过只能压缩一个文档。（压缩比很高，相对的用时也更多）</li>
<li><code>zip</code> 同样是支持多种算法的压缩格式，默认应该是使用的 DEFLATE 算法。诞生较早，有很多缺陷。（跨平台乱码、容易被破解等）</li>
<li><code>rar</code> 使用 类DEFLATE 的专有算法，使用 AES 加密。(rar5.0 以后使用 AES-256CBC)</li>
</ol>
<p>不过 <code>zip</code> 被广泛应用在安卓的 <code>apk</code> 格式、<code>java</code> 的 <code>jar</code>、电子书的 <code>epub</code>，还有 github、云硬盘的多文档下载中，原因嘛大概是 <code>zip</code> 很流行，所以不用担心目标平台没解压软件吧。</p>
<h2 id="四如何选用压缩方案" class="headerLink">
    <a href="#%e5%9b%9b%e5%a6%82%e4%bd%95%e9%80%89%e7%94%a8%e5%8e%8b%e7%bc%a9%e6%96%b9%e6%a1%88" class="header-mark"></a>四、如何选用压缩方案</h2><ol>
<li><code>tar.gz</code> 在 linux 上最常见，在压缩率和压缩时间上拥有良好的平衡。如果有任何疑惑，就选用它吧，不会错。</li>
<li><code>tar.xz</code> 是新一代的压缩格式，虽然拥有更好的压缩率，压缩/解压速度相对要慢很多倍。一般在电脑性能足够好的时候，可选用它。</li>
<li><code>7z</code> 和 xz 同为新一代压缩格式，它更复杂，支持多文档压缩。而且更适合跨平台，推荐使用。</li>
<li><code>zip</code> 因为跨平台容易导致文档名乱码，不建议使用。（虽然有这样的缺陷，但是却意外的用得很广泛，在前一节有说过）</li>
<li><code>rar</code> 性能不差，但是是商业格式，不开源，不建议使用。（<strong>做得比较好的是它的 recovery records，在网络环境不好，容易导致包损坏时，这个功能就特别棒</strong>）</li>
<li><code>tar.bz2</code> 算是 linux 压缩历史上，过渡时期的产物，性能也介于 gz 和 xz 之间，一般来说不需要考虑它。</li>
</ol>
<p>总的来说，就是 Windows 上推荐使用 <code>7z</code>，而 Linux 上 推荐使用 <code>tar.gz</code> <code>tar.xz</code> <code>7z</code> 之一。此外 <code>rar</code> 的损坏很容易修复，<code>zip</code> 受众多（要注意乱码问题），也可以考虑。</p>
<h2 id="五linux-上的压缩相关指令" class="headerLink">
    <a href="#%e4%ba%94linux-%e4%b8%8a%e7%9a%84%e5%8e%8b%e7%bc%a9%e7%9b%b8%e5%85%b3%e6%8c%87%e4%bb%a4" class="header-mark"></a>五、Linux 上的压缩相关指令</h2><h3 id="1-tar-指令" class="headerLink">
    <a href="#1-tar-%e6%8c%87%e4%bb%a4" class="header-mark"></a>1. tar 指令</h3><p>通过之前的介绍，可以看出常用的就是 tar gzip xz 等，如果要压缩多个文档，需要先使用tar，再用管道重定向到 gzip 或 xz，比较麻烦，而这几个指令又很常用。于是后来对tar做了增强。
tar 最初只是一个归档进程，而压缩则由其他的压缩软件来完成（一个进程只干一件事）。后来为了方便，丧心病狂地集成了各种压缩指令。因此这里就只介绍这一个命令了（它囊括了所有）。
tar 的选项与参数非常的多！我们只讲几个常用的选项，更多选项您可以自行 man tar 查询啰！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="o">[</span>dmtsai@study ~<span class="o">]</span>$ tar <span class="o">[</span>-z<span class="p">|</span>-j<span class="p">|</span>-J<span class="o">]</span> <span class="o">[</span>cv<span class="o">]</span> <span class="o">[</span>-f 待创建的新档名<span class="o">]</span> filename... &lt;<span class="o">==</span>打包与压缩
</span></span><span class="line"><span class="cl"><span class="o">[</span>dmtsai@study ~<span class="o">]</span>$ tar <span class="o">[</span>-z<span class="p">|</span>-j<span class="p">|</span>-J<span class="o">]</span> <span class="o">[</span>tv<span class="o">]</span> <span class="o">[</span>-f 既有的 tar档名<span class="o">]</span>             &lt;<span class="o">==</span>察看档名
</span></span><span class="line"><span class="cl"><span class="o">[</span>dmtsai@study ~<span class="o">]</span>$ tar <span class="o">[</span>-z<span class="p">|</span>-j<span class="p">|</span>-J<span class="o">]</span> <span class="o">[</span>xv<span class="o">]</span> <span class="o">[</span>-f 既有的 tar档名<span class="o">]</span> <span class="o">[</span>-C 目录<span class="o">]</span>   &lt;<span class="o">==</span>解压缩
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="选项与参数" class="headerLink">
    <a href="#%e9%80%89%e9%a1%b9%e4%b8%8e%e5%8f%82%e6%95%b0" class="header-mark"></a>选项与参数</h4><pre><code>-c  ：创建打包档案，可搭配 -v 来察看过程中被打包的档名(filename)
-t  ：察看打包档案的内容含有哪些档名，重点在察看『档名』就是了；
-x  ：解打包或解压缩的功能，可以搭配 -C (大写) 在特定目录解开
      特别留意的是， -c, -t, -x 不可同时出现在一串指令列中。
-z  ：透过 gzip  的支持进行压缩/解压缩：此时档名最好为 *.tar.gz
-j  ：透过 bzip2 的支持进行压缩/解压缩：此时档名最好为 *.tar.bz2
-J  ：透过 xz    的支持进行压缩/解压缩：此时档名最好为 *.tar.xz
      特别留意， -z, -j, -J 不可以同时出现在一串指令列中
-v  ：在压缩/解压缩的过程中，将正在处理的档名显示出来！
-f filename：-f 后面要立刻接要被处理的档名！建议 -f 单独写一个选项啰！(比较不会忘记)
-C 目录    ：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。
</code></pre>
<p>其他后续练习会使用到的选项介绍：</p>
<blockquote>
<p>-p(小写) ：保留备份资料的原本权限与属性，常用于备份(-c)重要的设定档
-P(大写) ：保留绝对路径，亦即允许备份资料中含有根目录存在之意；
&ndash;exclude=FILE：在压缩的过程中，不要将 FILE 打包！</p>
</blockquote>
<h4 id="其实最简单的使用-tar-就只要记忆底下的方式即可" class="headerLink">
    <a href="#%e5%85%b6%e5%ae%9e%e6%9c%80%e7%ae%80%e5%8d%95%e7%9a%84%e4%bd%bf%e7%94%a8-tar-%e5%b0%b1%e5%8f%aa%e8%a6%81%e8%ae%b0%e5%bf%86%e5%ba%95%e4%b8%8b%e7%9a%84%e6%96%b9%e5%bc%8f%e5%8d%b3%e5%8f%af" class="header-mark"></a>其实最简单的使用 tar 就只要记忆底下的方式即可</h4><ul>
<li><strong>压　缩：<code>tar -zcv -f filename.tar.gz &lt;要被压缩的档案或目录名称&gt;</code></strong></li>
<li><strong>查看文档树：<code>tar -ztv -f filename.tar.gz</code></strong></li>
<li><strong>解压缩：<code>tar -zxv -f filename.tar.gz -C</code> &lt;欲解压缩的目录&gt;`</strong></li>
</ul>
<p>上面的命令需要根据压缩格式的不同，选用 <code>-z</code> <code>-j</code> <code>-J</code> 选项，而实际上文档的后缀就已经表明了它的压缩格式，不免让人觉得多余。
因此就有这幺一条通用的压缩/解压 option</p>
<pre><code>-a, --auto-compress
              Use archive suffix to determine the compression program.
</code></pre>
<p>使用这个，便有了<strong>通用的解压指令</strong>：</p>
<blockquote>
<p><strong><font color=#0099ff size=4>tar -axv -f file.tar.* </font> （它适用于上述三种压缩格式）</strong></p>
</blockquote>
<h4 id="仅解压指定的文档" class="headerLink">
    <a href="#%e4%bb%85%e8%a7%a3%e5%8e%8b%e6%8c%87%e5%ae%9a%e7%9a%84%e6%96%87%e6%a1%a3" class="header-mark"></a>仅解压指定的文档</h4><ol>
<li>先查看文档树找到需要解压的文档的文档名</li>
<li>tar -zxv -f 打包档.tar.gz 待解开档名</li>
</ol>
<h4 id="打包某目录但不含该目录下的某些档案之作法" class="headerLink">
    <a href="#%e6%89%93%e5%8c%85%e6%9f%90%e7%9b%ae%e5%bd%95%e4%bd%86%e4%b8%8d%e5%90%ab%e8%af%a5%e7%9b%ae%e5%bd%95%e4%b8%8b%e7%9a%84%e6%9f%90%e4%ba%9b%e6%a1%a3%e6%a1%88%e4%b9%8b%e4%bd%9c%e6%b3%95" class="header-mark"></a>打包某目录，但不含该目录下的某些档案之作法</h4><p>使用 &ndash;exclude=FILE 选项（支持文档名的模式匹配，而且可重复）</p>
<pre><code>tar -zcv -f filename.tar.gz directory --exclude=FILE1 --exclude=func*
</code></pre>
<h5 id="只打包目录中比指定时刻更新的文档" class="headerLink">
    <a href="#%e5%8f%aa%e6%89%93%e5%8c%85%e7%9b%ae%e5%bd%95%e4%b8%ad%e6%af%94%e6%8c%87%e5%ae%9a%e6%97%b6%e5%88%bb%e6%9b%b4%e6%96%b0%e7%9a%84%e6%96%87%e6%a1%a3" class="header-mark"></a>只打包目录中比指定时刻更新的文档</h5><p>使用 <code>--newer-mtime=&quot;2015/06/17&quot;</code> 选项。</p>
<h5 id="tarfile-tarball" class="headerLink">
    <a href="#tarfile-tarball" class="header-mark"></a>tarfile, tarball</h5><pre><code>tarfile  |  纯打包、未压缩的 tar 文档
tarball  |  压缩了的 tar 文档
</code></pre>
<h4 id="2-zip格式linux-一般也会自带详细的请man" class="headerLink">
    <a href="#2-zip%e6%a0%bc%e5%bc%8flinux-%e4%b8%80%e8%88%ac%e4%b9%9f%e4%bc%9a%e8%87%aa%e5%b8%a6%e8%af%a6%e7%bb%86%e7%9a%84%e8%af%b7man" class="header-mark"></a>2. zip格式（linux 一般也会自带，详细的请man）</h4><ol>
<li>
<p>压缩命令：<code>zip</code></p>
<ul>
<li>压缩目录：<code>zip -r filename.zip directory</code>
<ul>
<li><code>r</code> 表示递归压缩，压缩包会包含这个目录</li>
</ul>
</li>
</ul>
</li>
<li>
<p>解压命令：<code>unzip</code></p>
<ul>
<li>解压到某目录：<code>unzip -d directory filename.zip</code>    (<code>-d dir</code> 表示将内容解压到dir目录内)
<ul>
<li>-t 测试压缩档的完整性</li>
<li>-x filename 排除某文档</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="3-7z格式需要p7zipdeepin自带更多的请man" class="headerLink">
    <a href="#3-7z%e6%a0%bc%e5%bc%8f%e9%9c%80%e8%a6%81p7zipdeepin%e8%87%aa%e5%b8%a6%e6%9b%b4%e5%a4%9a%e7%9a%84%e8%af%b7man" class="header-mark"></a>3. 7z格式（需要p7zip，deepin自带，更多的请man）</h4><ol>
<li>查看目录树：<code>7z l file.7z</code>    (List contents of archive)</li>
<li>压缩：<code>7z a file.7z file1 directory1</code>   (a 为创建压缩档或向压缩档中添加文档/目录，一次可指定多个要压缩的文档或目录)</li>
<li>解压：<code>7z x file.7z -o directory</code>    (解压到指定目录)</li>
<li>测试完整性： <code>7z t file.7z</code></li>
</ol>
<p><code>p7zip</code> 安装好后，会提供 <code>7z</code>、<code>7za</code>、<code>7zr</code> 三个指令，一般来说直接用 <code>7z</code> 就行。</p>
<blockquote>
<p>P.S. <code>7z</code> 不会保存 Linux 文档的用户、用户组信息，因此不能直接用于 <code>Linux</code> 系统备份，此时建议用 <code>tar.xz</code> 或 <code>tar.7z</code>（也就是先用tar打包）</p>
</blockquote>
<h4 id="4-rar格式还是那句话更多的请man" class="headerLink">
    <a href="#4-rar%e6%a0%bc%e5%bc%8f%e8%bf%98%e6%98%af%e9%82%a3%e5%8f%a5%e8%af%9d%e6%9b%b4%e5%a4%9a%e7%9a%84%e8%af%b7man" class="header-mark"></a>4. rar格式（还是那句话，更多的请man）</h4><p><code>rar</code> 是非开源的格式，Linux 默认是不会包含 <code>rar</code> 压缩软件的，但是它的解压软件是开源的，<code>deepin</code> 自带 <code>unrar</code>，顺便 <code>7zip</code> 也可解压 <code>rar</code> 文档。
若想用linux创建rar压缩档，需要从<a href="https://www.rarlab.com" target="_blank" rel="noopener noreffer">rarlab</a>上下载 Linux 版，（deepin源自带）不过要注意的是该 linux 版是 40 天试用版，要长期使用的话，可能需要破解。（rar 的 key 网上一搜一大把）</p>
<ol>
<li>压缩：<code>rar a file.rar file</code>  （这个是试用的）</li>
<li>解压：<code>unrar x file.rar</code>      （这个开源免费）</li>
</ol>
<p>其实我挺中意 <code>rar</code> 的修复功能的，不知道为啥 <code>7z</code> <code>xz</code> 这样的新格式没有添加类似的 <code>recorvery records</code>。上次下个 <code>idea</code> 的 <code>tarball</code>，下了四五次才下到一个完整的，要是用 <code>rar</code> 的话，大概一键修复就好了，可 <code>tar.gz</code> 我不知道怎幺修复，只好一遍遍重复下载。。</p>
<h3 id="六参考" class="headerLink">
    <a href="#%e5%85%ad%e5%8f%82%e8%80%83" class="header-mark"></a>六、参考</h3><ul>
<li><a href="http://linux.vbird.org/linux_basic/0240tarcompress.php" target="_blank" rel="noopener noreffer">档案与档案系统的压缩,打包与备份</a></li>
<li>维基百科</li>
<li><a href="https://www.zhihu.com/question/26026741/answer/31869734" target="_blank" rel="noopener noreffer">rar tar gz zip 7z 有什幺区别? - 知乎</a></li>
<li><a href="https://www.zhihu.com/question/37019479/answer/70054550" target="_blank" rel="noopener noreffer">为什幺linux的包都是.tar.gz？要解压两次 - 知乎</a></li>
</ul>
]]></content></entry><entry><title type="html">在回声中重历</title><link href="https://thiscute.world/posts/relive-in-the-echo/"/><id>https://thiscute.world/posts/relive-in-the-echo/</id><author><name>ryan4yin</name></author><published>2019-01-08T17:55:45+08:00</published><updated>2019-01-08T17:55:45+08:00</updated><content type="html"><![CDATA[<meting-js server="netease" type="song" id="35032582" theme="#448aff"></meting-js>
<p>高中考虑志向的时候，我最开始想选择电子信息工程，因为小时候就喜欢摆弄各种电子器件，这个方向硬件软件都能玩，就感觉很有趣，只是担心自己高三太放浪形骸考不上。
偶然想起在学校阅览室读杂志时，曾被<a href="https://read.douban.com/ebook/3088216/" target="_blank" rel="noopener noreffer"><strong>科幻世界2013年12期</strong></a>里沖氏武彦的《<strong>在回声中重历</strong>》给打动——用耳朵“看见”世界实在是太奇妙了，我当时痴痴地幻想了好几天。</p>
<p>这样我开始考虑选择声学。</p>
<p>我从同桌推荐的《刀剑神域》开始接触日本的 ACG 文化，后来接触到初音未来和洛天依，就对<strong>歌声合成</strong>(singing synthesis)产生了很大的兴趣，仔细一想发现这也应该是声学的范畴，这使我坚定了我选择声学的想法。</p>
<p>从那时到现在的各种破事，实在不想多说，就略过不提了。总之我选择了声学，然后干得很失败。。。</p>
<p>为啥想写这篇文章呢？
话还得从去年十一月份说起，当时要学 Matlab，就在 bilibili 上找了个教程：<a href="https://www.bilibili.com/video/av2558198/" target="_blank" rel="noopener noreffer">自制合成器演奏鸟之诗</a>，讲用 Matlab 做吉他音合成，讲得特别棒，我跟着做出了 <a href="https://github.com/ryan4yin/guitar-synthesizer" target="_blank" rel="noopener noreffer">guitar-synthesizer</a> 这个小玩意儿。</p>
<p>然后今天发现那个教程的作者就是做歌声合成的，而且从 2011 年 13 岁开始，因为想让初音唱中文，就开始写代码，一写就写到现在，从初中写到留学美国常春藤，从简单的时域拼接到现在的深度神经网络、隐马尔可夫模型。他在上个暑假到雅马哈（vocaloid 的制作公司）实习，并推出了自己第五次重制的歌声合成引擎 <a href="https://synthesizerv.com/zh-cn/" target="_blank" rel="noopener noreffer">Synthesizer V</a>。
这一系列的事迹，七年五次重制，从初中生到现在双修计算机科学和数学，简直让人叹为观止。
这位作者的名字叫<a href="https://github.com/Sleepwalking" target="_blank" rel="noopener noreffer">华侃如（Kanru Hua）</a>，网络常用昵称 sleepwalking，他的个人网站 <a href="https://webhost.engr.illinois.edu/~khua5/index.php/about-me/" target="_blank" rel="noopener noreffer">Kanru Hua&rsquo;s Website - About Me</a>.</p>
<p>通过他的博客，我了解到歌声合成需要两个方向的知识：信号处理和机器学习。</p>
<p>于是我想起了我的初心。</p>
<p>我小的时候特别喜欢拆各种电子设备，曾经用手机电池和坏手电做过手电筒，再加上个手机振动器用来吓人，还喜欢在家做各种实验。
可整个大学，我的各种手工课实验课弄得一塌糊涂，垫底的存在。这样说来，如果当初选了电子信息工程，可能会混得更差。</p>
<p>信号处理学得一团糟，一直想努力可在这方面总是半途而废。</p>
<p>说到底还是自控力太差，为何我就不能按部就班一回呢？到底是怎么搞的会养成这样的性格，这样的时候会很恨自己窝囊的性格。</p>
<p>如果我也能像室友一样按部就班的完成学业，只在空闲时间做自己的事&hellip;可惜没有如果。</p>
<p>经常会告诉自己做过的事已经不可逆转了，不需要后悔，所以也不会后悔。大概潜意识里还是会有怨念，所以才会在这样的时刻爆发出满满的恶意。</p>
<p>只是后悔却不做出改变是没有用的，但我完全不相信自己能改掉这样的性格，自暴自弃。纵欲一时爽，一直纵欲一直爽hhh&hellip;</p>
<p>说虽这样说，还是想继续挣扎下去，信号处理就像一道槛，不跨过去我无法面对自己。</p>
<p>“希望明年年底的总结中，我不要再这么丧”，这样大声说出来的话，言就能“灵”吧？我记得我运气一直挺好的（又窝囊到要靠运气。。）</p>
<hr>
<p><strong>更新：</strong></p>
<p>今天二书介绍给我一篇文章<a href="https://lutaonan.com/blog/my-coding-road/" target="_blank" rel="noopener noreffer">我的编程经历</a>，作者和我一样“不能兼顾兴趣与学业”，大一结束就退学了，现在在阿里巴巴工作。
他博客的观点很中肯：</p>
<blockquote>
<p>我家人都是很传统的一代，不理解我学习编程最终能做出什么，他们主张先完成学业，再做这件事。但是我很清楚我自己的智商，不足以多线程处理不同的大领域，所以我顶着压力，努力地做出来他们能看出来的「成绩」，才能换来他们的理解。所以，如果你通过你的理性分析，坚持认为某件事情是对的，就努力的去做，不要放弃了以后看到另一个人做了你曾经想做的东西然后感慨当初应该怎么样怎么样。    &ndash;<a href="https://lutaonan.com/blog/my-coding-road/" target="_blank" rel="noopener noreffer">我的编程经历</a></p>
</blockquote>
<blockquote>
<p>只有在已经拥有解决问题的能力的时候，才有资格考虑退学这件事。   &ndash;<a href="https://lutaonan.com/blog/you-dont-need-to-drop-out/" target="_blank" rel="noopener noreffer">你根本用不着退学</a></p>
</blockquote>
<p>我仔细想了想，我不需要太在意自己“不能兼顾”、“自控力太弱”。如果真考虑清楚了得失，我只需要“拥有解决问题的能力”，然后去做我想做的就行了。</p>
<p>我自控力很弱，而且这么多年了一直改不了，即使再延期一年，也有可能还是拿不到毕业证，折磨自己而已。
而上班的话，就暑假实习的经验来看，工作都有进度条催着，反而活的更有朝气。</p>
]]></content></entry><entry><title type="html">SQL 基础笔记（二）进阶查询</title><link href="https://thiscute.world/posts/sql-basics-2-queries/"/><id>https://thiscute.world/posts/sql-basics-2-queries/</id><author><name>ryan4yin</name></author><published>2018-06-17T14:17:46+08:00</published><updated>2018-06-17T14:17:46+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本笔记整理自<a href="https://book.douban.com/subject/24841239/" target="_blank" rel="noopener noreffer">《SQL 基础教程》</a>、<a href="https://book.douban.com/subject/3354490/" target="_blank" rel="noopener noreffer">《MySQL 必知必会》</a>和网上资料。个人笔记不保证正确。</p>
</blockquote>
<h2 id="一复杂查询" class="headerLink">
    <a href="#%e4%b8%80%e5%a4%8d%e6%9d%82%e6%9f%a5%e8%af%a2" class="header-mark"></a>一、复杂查询</h2><h3 id="视图" class="headerLink">
    <a href="#%e8%a7%86%e5%9b%be" class="header-mark"></a>视图</h3><p>将 SELECT 查询包装成一个虚拟表，该虚拟表就被称为视图。（因为只是一个包装，因此视图的数据也会随着原表的更新而更新）</p>
<ol>
<li>用途：
<ol>
<li>简化复杂的SQL查询，用它替换子查询，能降低查询的嵌套深度。</li>
<li>SELECT 查询的重用，减少重复查询。</li>
<li>&hellip;</li>
</ol>
</li>
<li>创建视图：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">VIEW</span><span class="w"> </span><span class="o">&lt;</span><span class="err">视图名称</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="o">&lt;</span><span class="err">视图列名</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">视图列名</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">...</span><span class="w"> </span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">AS</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">&lt;</span><span class="k">SELECT</span><span class="w"> </span><span class="err">语句</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中 SELECT 的结果列和视图列名一一对应。
3. 视图的限制
1. 视图的 SELECT 子句，不能包含 ORDER BY 子句。因为视图也是表，而表是集合，它没有顺序。（也有些DB支持该用法，但不通用）
1. 视图的更新：只在很有限的条件下，才能在视图上使用 INSERT/DELETE/UPDATE 这样的变更数据的语句。（<strong>视图应该只用于检索，能不更新就不要更新它</strong>）
4. 删除视图：<code>DROP VIEW &lt;视图名称&gt;;</code></p>
<h3 id="子查询" class="headerLink">
    <a href="#%e5%ad%90%e6%9f%a5%e8%af%a2" class="header-mark"></a>子查询</h3><p>子查询，其实就是一次性的视图:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FROM</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">SELECT</span><span class="w"> </span><span class="p">...</span><span class="w">  </span><span class="c1">-- 这就是一个子查询：嵌套的 select 语句
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="p">)</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="o">&lt;</span><span class="err">别名</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上面的查询的 FROM 子句中，给另一 SELECT 子句定义了一个别名，并将它作为了查询对象。这就是一个子查询。</p>
<p>子查询不仅能用于 FROM，还能用在 WHERE 子句等很多地方。</p>
<h4 id="关联子查询" class="headerLink">
    <a href="#%e5%85%b3%e8%81%94%e5%ad%90%e6%9f%a5%e8%af%a2" class="header-mark"></a>关联子查询</h4><p>即用到了外部数据的子查询语句：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FROM</span><span class="w"> </span><span class="n">product</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">p1</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">SELECT</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">FROM</span><span class="w"> </span><span class="n">duck</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="n">p2</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="k">WHERE</span><span class="w"> </span><span class="n">p1</span><span class="p">.</span><span class="n">price</span><span class="w"> </span><span class="o">&gt;</span><span class="w"> </span><span class="n">p2</span><span class="p">.</span><span class="n">price</span><span class="w">   </span><span class="c1">-- 这里，内部子查询访问了外部查询的表p1，因此是一个关联子查询。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">    </span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="二函数谓词case-表达式" class="headerLink">
    <a href="#%e4%ba%8c%e5%87%bd%e6%95%b0%e8%b0%93%e8%af%8dcase-%e8%a1%a8%e8%be%be%e5%bc%8f" class="header-mark"></a>二、函数、谓词、CASE 表达式</h2><h3 id="函数httpsdevmysqlcomdocrefman57enfunctionshtml" class="headerLink">
    <a href="#%e5%87%bd%e6%95%b0httpsdevmysqlcomdocrefman57enfunctionshtml" class="header-mark"></a><a href="https://dev.mysql.com/doc/refman/5.7/en/functions.html" target="_blank" rel="noopener noreffer"><strong>函数</strong></a></h3><blockquote>
<p>给出的链接都是 MySQL 的</p>
</blockquote>
<ol>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/numeric-functions.html" target="_blank" rel="noopener noreffer">算术函数</a>
<ul>
<li>加减乘除：+ - * /</li>
<li>ABS 绝对值</li>
<li>MOD 求余</li>
<li>ROUND 四舍五入</li>
</ul>
</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/string-functions.html" target="_blank" rel="noopener noreffer">字符串函数</a>
<ul>
<li>CONCAT(str1,str2,&hellip;)   拼接</li>
<li>LENGTH(str)  字符串的 <strong>bytes</strong> 长度</li>
<li>CHAR_LENGTH(str)</li>
<li>LOWER/UPPER  大小写转换</li>
<li>REPLACE(str,from_str,to_str) 替换</li>
<li>SUBSTRING(str FROM pos FOR len) 截取</li>
</ul>
</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html" target="_blank" rel="noopener noreffer">时间和日期函数</a>
<ul>
<li>CURRENT_DATE  当前日期</li>
<li>CURRENT_TIME 当前时间</li>
<li>CURRENT_TIMESTAMP  当前的日期和时间</li>
<li>EXTRACT(unit FROM date) 截取日期元素，unit 可为 <code>YEAR</code> <code>MONTH</code> <code>HOUR</code> 等等</li>
</ul>
</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/cast-functions.html" target="_blank" rel="noopener noreffer">转换函数</a>
<ul>
<li>CAST(expr AS type) 将 expr 的结果转换成 type 类型</li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/comparison-operators.html#function_coalesce" target="_blank" rel="noopener noreffer">COALESCE(value,&hellip;)</a>  从左往右扫描，返回第一个非 NULL 的值。常用于将 NULL 转换为其他值。eg. COALESCE(sth, 1) 如果 sth 为 NULL 就会返回1.</li>
</ul>
</li>
<li>聚合函数：基本就五个，已经学过了。</li>
</ol>
<h3 id="谓词" class="headerLink">
    <a href="#%e8%b0%93%e8%af%8d" class="header-mark"></a>谓词</h3><p>即返回布尔值的表达式</p>
<h4 id="like谓词简单字符串匹配慢" class="headerLink">
    <a href="#like%e8%b0%93%e8%af%8d%e7%ae%80%e5%8d%95%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8c%b9%e9%85%8d%e6%85%a2" class="header-mark"></a>LIKE谓词——简单字符串匹配（慢）</h4><blockquote>
<p>匹配整个列</p>
</blockquote>
<ul>
<li><code>%</code>：任意字符出现任意次</li>
<li><code>_</code>：匹配任意一个字符</li>
</ul>
<p>举例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="n">name</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FROM</span><span class="w"> </span><span class="n">list</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">name</span><span class="w"> </span><span class="k">LIKE</span><span class="w"> </span><span class="s1">&#39;%Ryan%&#39;</span><span class="p">;</span><span class="w">  </span><span class="c1">-- 匹配任意包含 &#39;Ryan&#39; 的字符串
</span></span></span></code></pre></td></tr></table>
</div>
</div><h4 id="regexp谓词正则字符串匹配" class="headerLink">
    <a href="#regexp%e8%b0%93%e8%af%8d%e6%ad%a3%e5%88%99%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8c%b9%e9%85%8d" class="header-mark"></a>REGEXP谓词——正则字符串匹配</h4><blockquote>
<p>MySQL 只实现了通用正则的一个子集，而且是search模式。（非match）</p>
</blockquote>
<h4 id="其他" class="headerLink">
    <a href="#%e5%85%b6%e4%bb%96" class="header-mark"></a>其他</h4><ul>
<li>BETWEEN：范围匹配，eg. <code>BETWEEN 1 AND 10</code></li>
<li>IS NULL、IS NOT NULL</li>
<li>IN、NOT IN：是否在某集合内</li>
<li>EXISTS、NOT EXISTS（比较难的一个，入门阶段不要求）：该谓词比较特殊，只需要右侧一个参数，**而且该参数绝大多数情况下，都是一个关联子查询。**而且该子查询的SELECT子句的参数基本可以随意，通常使用<code>SELECT *</code>. 对于子查询有返回值的列，它返回True，否则返回False. 但要注意为 NULL 时返回 UNKNOW.（而 WHERE 只认 True）</li>
</ul>
<h3 id="case-表达式" class="headerLink">
    <a href="#case-%e8%a1%a8%e8%be%be%e5%bc%8f" class="header-mark"></a>CASE 表达式</h3><ol>
<li>if - else if - else 形式：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CASE</span><span class="w"> </span><span class="k">WHEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">求值表达式</span><span class="o">&gt;</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">求值表达式</span><span class="o">&gt;</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">求值表达式</span><span class="o">&gt;</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">ELSE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">END</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>switch 模式（但不需要break）</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CASE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w"> </span><span class="k">THEN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">ELSE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">END</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这是对 CASE 后的元素做switch比较。</p>
<h2 id="三集合运算" class="headerLink">
    <a href="#%e4%b8%89%e9%9b%86%e5%90%88%e8%bf%90%e7%ae%97" class="header-mark"></a>三、集合运算</h2><h3 id="注意事项" class="headerLink">
    <a href="#%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="header-mark"></a>注意事项</h3><ol>
<li>作为运算对象的结果集，<strong>列字段必须一一对应</strong>，而且对应列的类型必须相同。</li>
</ol>
<h3 id="结果集的交并差" class="headerLink">
    <a href="#%e7%bb%93%e6%9e%9c%e9%9b%86%e7%9a%84%e4%ba%a4%e5%b9%b6%e5%b7%ae" class="header-mark"></a>结果集的交并差</h3><ol>
<li><code>&lt;查询1&gt; UNION &lt;查询2&gt;</code>：对两个结果集求并</li>
<li><code>UNION ALL</code>：添加 ALL 能使结果集包含重复行。</li>
<li><code>&lt;查询1&gt; INTERSECT &lt;查询2&gt;</code>：两结果集的交集</li>
<li><code>&lt;查询1&gt; EXCEPT &lt;查询2&gt;</code>：两结果集的差集</li>
</ol>
<h3 id="以列为单位对表进行联结join" class="headerLink">
    <a href="#%e4%bb%a5%e5%88%97%e4%b8%ba%e5%8d%95%e4%bd%8d%e5%af%b9%e8%a1%a8%e8%bf%9b%e8%a1%8c%e8%81%94%e7%bb%93join" class="header-mark"></a>以列为单位，对表进行联结(JOIN)</h3><blockquote>
<p>最强大的功能之一</p>
</blockquote>
<p>交并差是以行为单位的操作，是竖向的运算。而联结是以列为单位的操作，是横向的拼接。</p>
<h4 id="内联inner-join" class="headerLink">
    <a href="#%e5%86%85%e8%81%94inner-join" class="header-mark"></a>内联(INNER JOIN)</h4><blockquote>
<p><strong>内联结果只包含两表的交集</strong></p>
</blockquote>
<p>语法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FROM</span><span class="w"> </span><span class="p">(</span><span class="n">product</span><span class="w"> </span><span class="k">INNER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">shop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">ON</span><span class="w"> </span><span class="n">product</span><span class="p">.</span><span class="n">p_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">shop</span><span class="p">.</span><span class="n">p_id</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">filter_condition</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>使用 跟在 INNER JOIN 子句后的 ON 子句指定联结条件。（这里我特意用了括号，表示 JOIN 和 ON 两个子句是配套的）</p>
<p>也有另一个很常用的语法（但是现在已经不推荐使用）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FROM</span><span class="w"> </span><span class="n">product</span><span class="p">,</span><span class="w"> </span><span class="n">shop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="n">product</span><span class="p">.</span><span class="n">p_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">shop</span><span class="p">.</span><span class="n">p_id</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">AND</span><span class="w"> </span><span class="n">filter_condition</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于 shop 表中有多行对应同一个 product 的情况（有多人购买了同一款商品），结果中该 product 会被复制给 shop 中的多个购买记录。（也就是说该 product 会变成多行）</p>
<blockquote>
<p>INNER 可以省略，也就是说只写 JOIN，就默认是 INNER JOIN</p>
</blockquote>
<h4 id="外联outer-join" class="headerLink">
    <a href="#%e5%a4%96%e8%81%94outer-join" class="header-mark"></a>外联(OUTER JOIN)</h4><blockquote>
<p>**外联以某表为主表，将另一表的列联结到该表。**另一表没有值的列，就用 NULL 代替。使用<code>LEFT</code> 或 <code>RIGHT</code>指定主表。（两个关键字都能实现同样的效果，不过用 LEFT 的多一些）</p>
</blockquote>
<p>语法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">FROM</span><span class="w"> </span><span class="n">product</span><span class="w"> </span><span class="k">LEFT</span><span class="w"> </span><span class="k">OUTER</span><span class="w"> </span><span class="k">JOIN</span><span class="w"> </span><span class="n">shop</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="k">ON</span><span class="w"> </span><span class="n">product</span><span class="p">.</span><span class="n">p_id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">shop</span><span class="p">.</span><span class="n">p_id</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这和内联很相似，差别只是联结关键词改成了<code>LEFT OUTER JOIN</code>。这表示以左边的表为主表，把右边的表的内容联结上去。因此左表的所有列都会出现在结果集中。</p>
<p>多表联查举例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="c1">-- 登录异常的账号及密码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">select</span><span class="w"> </span><span class="k">distinct</span><span class="w"> </span><span class="n">batches</span><span class="p">.</span><span class="n">identity_number</span><span class="w"> </span><span class="k">as</span><span class="w"> </span><span class="s1">&#39;登录失败账号&#39;</span><span class="p">,</span><span class="w"> </span><span class="n">accounts</span><span class="p">.</span><span class="n">password</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="k">from</span><span class="w"> </span><span class="p">((</span><span class="n">batches</span><span class="w"> </span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="n">tasks</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">on</span><span class="w"> </span><span class="n">batches</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">tasks</span><span class="p">.</span><span class="n">batch_id</span><span class="p">)</span><span class="w">   </span><span class="c1">-- 批次表联结具体的任务表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="o">`</span><span class="n">status</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">on</span><span class="w"> </span><span class="n">tasks</span><span class="p">.</span><span class="n">id</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">status</span><span class="p">.</span><span class="n">task_id</span><span class="p">)</span><span class="w">  </span><span class="c1">-- 再联结上状态表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">        </span><span class="k">left</span><span class="w"> </span><span class="k">outer</span><span class="w"> </span><span class="k">join</span><span class="w"> </span><span class="n">accounts</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">			</span><span class="k">on</span><span class="w"> </span><span class="n">batches</span><span class="p">.</span><span class="n">identity_number</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">accounts</span><span class="p">.</span><span class="n">identity_number</span><span class="w">  </span><span class="c1">-- 再联结上账号表
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">	</span><span class="k">where</span><span class="w"> </span><span class="o">`</span><span class="n">status</span><span class="o">`</span><span class="p">.</span><span class="n">step_type</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">&#39;check_login&#39;</span><span class="w">     </span><span class="c1">-- 只提取 &#34;check_login&#34; 步骤的记录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="w">		</span><span class="k">and</span><span class="w"> </span><span class="n">status</span><span class="p">.</span><span class="n">status</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="s1">&#39;info&#39;</span><span class="w">  </span><span class="c1">-- 状态不为 info，说明登录异常
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>此外还有 FULL OUTER JOIN 表示返回左右两表的所有行！所有没有匹配的行都给出 NULL</p>
<blockquote>
<p>P.S. 其中的关键字 OUTER 通常可省略。但是 LEFT、RIGHT、FULL 不可以省略。</p>
</blockquote>
<h2 id="画外字段引用符号" class="headerLink">
    <a href="#%e7%94%bb%e5%a4%96%e5%ad%97%e6%ae%b5%e5%bc%95%e7%94%a8%e7%ac%a6%e5%8f%b7" class="header-mark"></a>画外：字段引用符号</h2><p>如果数据库的字段名/数据库名/表名可能和数据库关键字重复，就需要用引用符号将他们引用起来，消除歧义。</p>
<p>MySQL 中经常用反引号干这个事。
而 SQL Server 则使用方括号。
标准 SQL 使用双引号。在看到这些符号时要知道这些差别。</p>
<h2 id="查询语句分析" class="headerLink">
    <a href="#%e6%9f%a5%e8%af%a2%e8%af%ad%e5%8f%a5%e5%88%86%e6%9e%90" class="header-mark"></a>查询语句分析</h2><ul>
<li><a href="https://www.cnblogs.com/xuanzhi201111/p/4175635.html" target="_blank" rel="noopener noreffer">MySQL Explain详解</a></li>
</ul>
<h2 id="常见问题" class="headerLink">
    <a href="#%e5%b8%b8%e8%a7%81%e9%97%ae%e9%a2%98" class="header-mark"></a>常见问题</h2><h3 id="隐式类型转换" class="headerLink">
    <a href="#%e9%9a%90%e5%bc%8f%e7%b1%bb%e5%9e%8b%e8%bd%ac%e6%8d%a2" class="header-mark"></a>隐式类型转换</h3><p>在MySQL中，当操作符与不同类型的操作数一起使用时，会发生类型转换以使操作数兼容。则会发生隐式类型转换。</p>
<p>隐式类型转换会导致查询不会走索引！！！可能会严重拖累性能。另外还可能会导致各种奇怪的问题。</p>
<p>详见 <a href="https://www.cnblogs.com/BOHB-yunying/p/12458589.html" target="_blank" rel="noopener noreffer">MYSQL隐式类型转换</a></p>
<p>完。（接下来就是用 Python/Java 连接 MySQL 了）</p>
]]></content></entry><entry><title type="html">SQL 基础笔记（一）</title><link href="https://thiscute.world/posts/sql-basics-1/"/><id>https://thiscute.world/posts/sql-basics-1/</id><author><name>ryan4yin</name></author><published>2018-06-15T16:27:46+08:00</published><updated>2018-06-15T16:27:46+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本笔记整理自<a href="https://book.douban.com/subject/24841239/" target="_blank" rel="noopener noreffer">《SQL 基础教程》</a>、<a href="https://book.douban.com/subject/3354490/" target="_blank" rel="noopener noreffer">《MySQL 必知必会》</a>和网上资料。个人笔记不保证正确。</p>
</blockquote>
<h2 id="一基础" class="headerLink">
    <a href="#%e4%b8%80%e5%9f%ba%e7%a1%80" class="header-mark"></a>一、基础</h2><p>SQL，即结构化查询语言，是为访问与操作关系数据库中的数据而设计的语言。</p>
<ol>
<li>关系数据库以行(row)为单位读写数据</li>
<li>SQL 根据功能的不同，可分为三类（其中DML用得最多，增删查改嘛）
<ol>
<li>DDL(Data Definition Language, 数据定义语言): CREATE/DROP/ALTER</li>
<li>DML(Data Manipulation Language, 数据操作语言): SELECT/INSERT/UPDATE/DELETE</li>
<li>DCL(Data Control Language, 数据控制语言): COMMIT/ROLLBACK/GRANT/REVOKE</li>
</ol>
</li>
<li>SQL 语句要以分号结尾。换行在 SQL 中不表示结束，而等同于空格。</li>
<li>SQL 不区分**关键字(Keyword)**的大小写，但是描述符就不一定了。
<ul>
<li>这里有个坑：MySQL 中，数据库和表其实就是数据目录下的目录和文件，因而，<strong>操作系统的敏感性决定数据库名和表名 是否大小写敏感</strong>。这就意味着<strong>数据库名</strong>和<strong>表名</strong>在 Windows 中是大小写不敏感的，而在大多数类型的 Unix/Linux 系统中是大小写敏感的。（注意仅指数据库名和表名）可通过修改配置文件的<code>lower_case_table_names</code>属性来统一这一行为。</li>
<li>而<strong>字段名</strong>、<strong>字段内容</strong>都是内部数据，是操作系统无关的。它们的大小写敏感性，由 MySQL 的的校对（COLLATE）规则来控制。该规则体现在 MySQL 的 校对字符集（COLLATION）的后缀上：比如 utf8字符集，<code>utf8_general_ci</code>表示不区分大小写，这个是 utf8 字符集默认的校对规则；<code>utf8_general_cs</code> 表示区分大小写，<code>utf8_bin</code> 表示二进制比较，同样也区分大小写 。</li>
</ul>
</li>
<li>SQL 中的字符串和日期需要用单引号引用起来，日期有特定格式<code>年-月-日</code></li>
</ol>
<p>修改字符集：<code>set names &lt;字符集名&gt;</code>
记住在 MySQL 中，utf-8mb4 才是完全的 utf-8字符集。</p>
<h2 id="二ddl" class="headerLink">
    <a href="#%e4%ba%8cddl" class="header-mark"></a>二、DDL</h2><h3 id="1-数据库的创建和删除" class="headerLink">
    <a href="#1-%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9a%84%e5%88%9b%e5%bb%ba%e5%92%8c%e5%88%a0%e9%99%a4" class="header-mark"></a>1. 数据库的创建和删除</h3><ol>
<li>创建数据库</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">数据库名称</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">DATABASE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">数据库名称</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-创建表" class="headerLink">
    <a href="#2-%e5%88%9b%e5%bb%ba%e8%a1%a8" class="header-mark"></a>2. 创建表：</h3><h4 id="关系表的设计" class="headerLink">
    <a href="#%e5%85%b3%e7%b3%bb%e8%a1%a8%e7%9a%84%e8%ae%be%e8%ae%a1" class="header-mark"></a>关系表的设计</h4><p>关系表的设计，要确保把信息分解成多个表，一类信息一个表，各表通过某些常用的，基本不会改变的值（即关系表设计中的关系，也常称为外键）互相关联。尽量不要有冗余数据。</p>
<h4 id="语句" class="headerLink">
    <a href="#%e8%af%ad%e5%8f%a5" class="header-mark"></a>语句：</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">&lt;</span><span class="err">列名</span><span class="mi">1</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">数据类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">该列所需约束</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">&lt;</span><span class="err">列名</span><span class="mi">2</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">数据类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">该列所需约束</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">&lt;</span><span class="err">列名</span><span class="mi">3</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">数据类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">该列所需约束</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">&lt;</span><span class="err">该表的约束</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">该表的约束</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>举例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">CREATE</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">`</span><span class="n">persons</span><span class="o">`</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">(</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="w"> </span><span class="nb">INT</span><span class="w"> </span><span class="n">UNSIGNED</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="w"> </span><span class="n">AUTO_INCREMENT</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="o">`</span><span class="n">name</span><span class="o">`</span><span class="w"> </span><span class="nb">CHAR</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span><span class="w"> </span><span class="k">NOT</span><span class="w"> </span><span class="k">NULL</span><span class="p">,</span><span class="w"> 
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">PRIMARY</span><span class="w"> </span><span class="k">KEY</span><span class="w"> </span><span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="p">)</span><span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span><span class="w"> </span><span class="k">DEFAULT</span><span class="w"> </span><span class="n">CHARSET</span><span class="o">=</span><span class="n">utf8mb4</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>后面的是设置引擎和默认字符集。工作上，表的设计一定要深思熟虑，因为改起来很困难。</p>
<h4 id="字段类型mysql" class="headerLink">
    <a href="#%e5%ad%97%e6%ae%b5%e7%b1%bb%e5%9e%8bmysql" class="header-mark"></a>字段类型（MySQL）</h4><p>有四类数据类型：字符串、数字、日期、二进制。它们又根据数据长度的区别，下分为多个类型。</p>
<ol>
<li>字符串：
<img
        class="lazyload"
        data-src="/images/sql-basic/968138-20180615170308408-1360197489.webp"
        data-srcset="/images/sql-basic/968138-20180615170308408-1360197489.webp, /images/sql-basic/968138-20180615170308408-1360197489.webp 1.5x, /images/sql-basic/968138-20180615170308408-1360197489.webp 2x"
        data-sizes="auto"
        alt="/images/sql-basic/968138-20180615170308408-1360197489.webp"
        title="string types"></li>
<li>数字
<img
        class="lazyload"
        data-src="/images/sql-basic/968138-20180615170501735-1087517507.webp"
        data-srcset="/images/sql-basic/968138-20180615170501735-1087517507.webp, /images/sql-basic/968138-20180615170501735-1087517507.webp 1.5x, /images/sql-basic/968138-20180615170501735-1087517507.webp 2x"
        data-sizes="auto"
        alt="/images/sql-basic/968138-20180615170501735-1087517507.webp"
        title="numeric types"></li>
<li>日期
<img
        class="lazyload"
        data-src="/images/sql-basic/968138-20180615170610668-439886214.webp"
        data-srcset="/images/sql-basic/968138-20180615170610668-439886214.webp, /images/sql-basic/968138-20180615170610668-439886214.webp 1.5x, /images/sql-basic/968138-20180615170610668-439886214.webp 2x"
        data-sizes="auto"
        alt="/images/sql-basic/968138-20180615170610668-439886214.webp"
        title="date types"></li>
<li>二进制
<img
        class="lazyload"
        data-src="/images/sql-basic/968138-20180615170949680-176119067.webp"
        data-srcset="/images/sql-basic/968138-20180615170949680-176119067.webp, /images/sql-basic/968138-20180615170949680-176119067.webp 1.5x, /images/sql-basic/968138-20180615170949680-176119067.webp 2x"
        data-sizes="auto"
        alt="/images/sql-basic/968138-20180615170949680-176119067.webp"
        title="binary types"></li>
</ol>
<h4 id="约束" class="headerLink">
    <a href="#%e7%ba%a6%e6%9d%9f" class="header-mark"></a>约束</h4><p>SQL 约束是除了数据类型之外，对列中数据追加的限定条件。</p>
<ol>
<li>类型约束：<code>NOT NULL</code>、<code>AUTO_INCREMENT</code>、<code>UNSIGNED</code>（这个只 MySQL 支持）</li>
<li>默认值：<code>DEFAULT</code>，举例 <code>&lt;列名3&gt; VARCHAR(32) NOT NULL DEFAULT &quot;los angeles&quot;</code></li>
<li>表约束：<code>PRIMARY KEY</code> 主键约束（主键默认 UNIQUE 且 NOT NULL）</li>
</ol>
<p>此外还有 <code>FOREIGN KEY</code> 和 <code>CHECK</code> 两个约束语句，在<a href="https://www.cnblogs.com/kirito-c/p/10295693.html" target="_blank" rel="noopener noreffer">进阶笔记</a>中介绍。</p>
<blockquote>
<p>P.S. 字段约束也可以写成表约束（比如主键约束），而反过来很可能不行。</p>
</blockquote>
<h3 id="3-删除表和更新表定义" class="headerLink">
    <a href="#3-%e5%88%a0%e9%99%a4%e8%a1%a8%e5%92%8c%e6%9b%b4%e6%96%b0%e8%a1%a8%e5%ae%9a%e4%b9%89" class="header-mark"></a>3. 删除表和更新表定义</h3><ol>
<li>删除表（危险操作）
<ul>
<li>删除整个表：</li>
</ul>
</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DROP</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><pre><code>- 只清空表内数据，但留下表：
</code></pre>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">TRUNCATE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="p">;</span><span class="w">  </span><span class="c1">-- 非标准SQL语句，但是大部分DB都支持。（可能不能ROLLBACK）
</span></span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>更新表定义（麻烦的操作）
所以所创建表前要仔细想好格式了，更新表定义是不得已才能为之。
添加列定义：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="w"> </span><span class="k">ADD</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">列名</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">数据类型</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&lt;</span><span class="err">该列的约束</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>删除列定义：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">ALTER</span><span class="w"> </span><span class="k">TABLE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="w"> </span><span class="k">DROP</span><span class="w"> </span><span class="k">COLUMN</span><span class="w"> </span><span class="o">&lt;</span><span class="err">列名</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="三dml" class="headerLink">
    <a href="#%e4%b8%89dml" class="header-mark"></a>三、DML</h2><blockquote>
<p>万恶之源 NULL</p>
</blockquote>
<h3 id="1-查询重点" class="headerLink">
    <a href="#1-%e6%9f%a5%e8%af%a2%e9%87%8d%e7%82%b9" class="header-mark"></a>1. 查询（重点）</h3><ol>
<li>基本语句：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">SELECT &lt;字段1&gt; AS &lt;别名1&gt;,
</span></span><span class="line"><span class="cl">     &lt;字段2&gt; AS &lt;别名2&gt;,
</span></span><span class="line"><span class="cl">     ...
</span></span><span class="line"><span class="cl">FROM &lt;表名&gt;
</span></span><span class="line"><span class="cl">WHERE &lt;过滤条件&gt;;
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>可<strong>用 <code>DISTINCT</code> 修饰列名</strong>，使查询结果无重。例：<code>SELECT DISTINCT &lt;列名&gt; FROM &lt;表名&gt;</code></li>
<li>过滤条件可使用比较运算(&lt;&gt;、=等)和逻辑运算(AND OR NOT).</li>
<li>过滤条件中，<strong>比较运算会永远忽略 NULL 值</strong>，如果需要对 NULL 值做操作，需要使用 <strong>IS NULL</strong> 或 <strong>IS NOT NULL</strong>（说忽略也许不太准确，NULL 既不为真也不为假，反正少用NULL。。）</li>
<li>包含NULL的四则运算，得到的结果总为NULL</li>
</ol>
<h3 id="2-聚合与排序重点" class="headerLink">
    <a href="#2-%e8%81%9a%e5%90%88%e4%b8%8e%e6%8e%92%e5%ba%8f%e9%87%8d%e7%82%b9" class="header-mark"></a>2. 聚合与排序（重点）</h3><h4 id="聚合函数" class="headerLink">
    <a href="#%e8%81%9a%e5%90%88%e5%87%bd%e6%95%b0" class="header-mark"></a>聚合函数</h4><p>即对列进行统计分析的函数，主要有五个：</p>
<ol>
<li>COUNT：计算列的行数。（只有<code>COUNT(*)</code>会计算NULL行）</li>
<li>SUM：求该列之和。</li>
<li>AVG：求该列的平均值。</li>
<li>MAX/MIN：求该列的 最大/最小 值</li>
</ol>
<p>NOTE：</p>
<ol>
<li><strong>聚合函数计算时会排除所有NULL行。只有COUNT(*)例外，NULL行也会被它计数。</strong></li>
<li>MAX/MIN 几乎适用于所有数据类型的列（对非数值型，以其二进制值来排序），而SUM/AVG只能用于数值类型的列。</li>
<li>聚合函数操作的列，也能用DISTINCT修饰。例：<code>SELECT COUNT(DISTINCT &lt;列名&gt;) FROM &lt;表名&gt;</code></li>
<li>聚合函数只能用于SELECT子句和还没讲的HAVING子句（以及 ORDER BY 子句）中。</li>
</ol>
<h4 id="分组group-by" class="headerLink">
    <a href="#%e5%88%86%e7%bb%84group-by" class="header-mark"></a>分组(GROUP BY)</h4><p>分组以聚合键为分类标准，将数据分为多个逻辑组，从而能分别对每个组进行聚合运算。（分组是为了分类聚合）</p>
<ol>
<li>若出现了 GROUP BY 子句，查询结果一定是每一组一行。</li>
<li>GROUP BY 会将 NULL 作为一组特定数据，显示为空。</li>
</ol>
<h4 id="聚合对select子句的限制" class="headerLink">
    <a href="#%e8%81%9a%e5%90%88%e5%af%b9select%e5%ad%90%e5%8f%a5%e7%9a%84%e9%99%90%e5%88%b6" class="header-mark"></a>聚合对SELECT子句的限制</h4><p>首先要理解的是：</p>
<ol>
<li>聚合函数的操作对象为某一列，而产生的结果只有一个值。</li>
<li>GROUP BY 的操作对象为一列或者多列，产生的结果呢，是每一组一个值。</li>
</ol>
<p>因此为了避免歧义，只要使用了聚合函数或 GROUP BY 二者之一，SELECT 子句就只能包含：</p>
<ol>
<li>常数</li>
<li>其他聚合函数（该聚合函数的操作对象可以为其他列）</li>
<li>如果使用了 GROUP BY 子句，还能包括该子句所指定的列名。（也就是聚合键）但是<strong>绝不能包含其他的列名</strong>，因为这会有歧义。</li>
</ol>
<p>此外，还有一个问题是由 SQL 的执行顺序引起的。应该能很容易猜到，<strong>SELECT 语句的执行顺序和书写顺序是不一致的</strong>。
查询应该是从表开始，所以 FROM 语句一定先执行。然后应该要过滤(WHERE)，再是分组(GROUP BY)，最后才是 SELECT 语句。（就已经学到的子句而言，顺序是这样）
因此按理说，<strong>SELECT 语句 定义的别名，是不能在 GROUP BY 里使用的</strong>。（也有些DB支持该用法，但不通用）</p>
<h4 id="对聚合结果进行过滤having" class="headerLink">
    <a href="#%e5%af%b9%e8%81%9a%e5%90%88%e7%bb%93%e6%9e%9c%e8%bf%9b%e8%a1%8c%e8%bf%87%e6%bb%a4having" class="header-mark"></a>对聚合结果进行过滤(HAVING)</h4><p>从刚刚说过的SQL执行顺序可见，WHERE要比GROUP BY先执行，因此如果想过滤分组后的结果，不能用它。而应该使用 HAVING 子句。
HAVING 子句和 WHERE 子句都是用来过滤的，但是执行顺序的不同也就决定了它们的用途不同。</p>
<p>NOTE：</p>
<ol>
<li>有时候，会发现某个过滤条件，不论是先执行（就是写在WHERE子句中）还是后执行（写在HAVING中）都没问题，这时候应该将它写在WHERE子句中，这样GROUP BY操作的数据会更少，处理更快。</li>
<li>HAVING 子句的元素，也存在和 SELECT 子句同样的限制。不能使用聚合键以外的列名。</li>
</ol>
<h4 id="排序order-by" class="headerLink">
    <a href="#%e6%8e%92%e5%ba%8forder-by" class="header-mark"></a>排序(ORDER BY)</h4><p><strong>ORDER BY 子句在 SELECT 子句之后执行</strong>，因此它能使用 SELECT 子句中定义的别名。（而 GROUP BY 之前已经说过不能用别名了）
格式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">SELECT</span><span class="w"> </span><span class="o">&lt;</span><span class="err">字段</span><span class="mi">1</span><span class="o">&gt;</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="o">&lt;</span><span class="err">别名</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="o">&lt;</span><span class="err">字段</span><span class="mi">2</span><span class="o">&gt;</span><span class="w"> </span><span class="k">AS</span><span class="w"> </span><span class="o">&lt;</span><span class="err">别名</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">     </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">FROM</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">WHERE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">过滤条件</span><span class="mi">1</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">GROUP</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="o">&lt;</span><span class="err">列名</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">列名</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">HAVING</span><span class="w"> </span><span class="o">&lt;</span><span class="err">过滤条件</span><span class="mi">2</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="k">ORDER</span><span class="w"> </span><span class="k">BY</span><span class="w"> </span><span class="o">&lt;</span><span class="err">列名</span><span class="o">/</span><span class="err">别名</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">,</span><span class="w"> </span><span class="o">&lt;</span><span class="err">列名</span><span class="o">/</span><span class="err">别名</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">...</span><span class="w">  </span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>多排序键/列：指定多排序键时的排序规则为：<strong>优先使用左侧的列，如果该列存在相同值，再接着参考右侧的键，依此类推。</strong>（如果左侧键值不同，右侧的键就不会被使用了）</li>
<li>NULL 值的顺序：<strong>排序键中出现了 NULL 值时，这类值会在结果的开头或结尾汇总</strong>，究竟是排在开头还是结尾，并没有特殊规定。</li>
<li>ORDER BY 子句只影响结果的先后顺序，因此排序键可以是结果集以外的东西，比如其他的列，或者使用了 GROUP BY 时，还能用聚合函数。</li>
</ol>
<h3 id="3-数据的增删改" class="headerLink">
    <a href="#3-%e6%95%b0%e6%8d%ae%e7%9a%84%e5%a2%9e%e5%88%a0%e6%94%b9" class="header-mark"></a>3. 数据的增、删、改</h3><h4 id="插入insert-into-也算用的多了" class="headerLink">
    <a href="#%e6%8f%92%e5%85%a5insert-into-%e4%b9%9f%e7%ae%97%e7%94%a8%e7%9a%84%e5%a4%9a%e4%ba%86" class="header-mark"></a>插入(INSERT INTO) 也算用的多了</h4><p>语法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">INSERT</span><span class="w"> </span><span class="k">INTO</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="p">(</span><span class="err">列名</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="err">列名</span><span class="mi">2</span><span class="p">...)</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">VALUES</span><span class="w"> </span><span class="p">(</span><span class="err">值</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="err">值</span><span class="mi">2</span><span class="p">...);</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>或者也可以使用 SELECT 语句来替代 VALUES 子句，达到将 SELECT 到的结果集插入某表的效果。（但是不要用ORDER BY，因为结果是<strong>集</strong>，没有顺序，排序是徒劳无功的）
插入时主键不能重复，否则会报错。（因此如果需要包含重复数据，一般都会定义一个自增的id字段）</p>
<h4 id="删除delete" class="headerLink">
    <a href="#%e5%88%a0%e9%99%a4delete" class="header-mark"></a>删除(DELETE)</h4><p>清空表（危险操作，而且效率不如 TRUNCATE）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>条件删除：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">DELETE</span><span class="w"> </span><span class="k">FROM</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">条件</span><span class="o">&gt;</span><span class="p">;</span><span class="w"> 
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>因此使用DELETE时，一定要记得带WHERE，不然就好玩了。。</p>
<h4 id="更新update" class="headerLink">
    <a href="#%e6%9b%b4%e6%96%b0update" class="header-mark"></a>更新(UPDATE)</h4><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-sql" data-lang="sql"><span class="line"><span class="cl"><span class="k">UPDATE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表名</span><span class="o">&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">SET</span><span class="w"> </span><span class="o">&lt;</span><span class="err">列名</span><span class="mi">1</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;</span><span class="err">算术表达式</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="o">&lt;</span><span class="err">列名</span><span class="mi">2</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&lt;</span><span class="err">表达式</span><span class="mi">2</span><span class="o">&gt;</span><span class="p">,</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="p">...</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="k">WHERE</span><span class="w"> </span><span class="o">&lt;</span><span class="err">条件</span><span class="o">&gt;</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>同 DELETE 一样，不带 WHERE 子句的 UPDATE 是很危险的。</p>
<h2 id="四dcl---事务处理mysql" class="headerLink">
    <a href="#%e5%9b%9bdcl---%e4%ba%8b%e5%8a%a1%e5%a4%84%e7%90%86mysql" class="header-mark"></a>四、DCL - 事务处理(MySQL)</h2><p><strong>事务是一系列不可分割的数据库操作</strong>，也就是说，这一系列操作要么全部执行，要么全部不执行。如果执行过程中发生了问题（检查执行状态），可以通过执行 ROLLBACK 回滚到该事务执行前的状态。（<strong>注意并不会自动回滚</strong>）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-mysql" data-lang="mysql"><span class="line"><span class="cl"><span class="n">START</span><span class="w"> </span><span class="n">TRANSACTION</span><span class="p">;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="c1">-- do somthing
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="n">COMMIT</span><span class="p">;</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>START TRANSACTION</code>: 标识事务的开始</li>
<li><code>COMMIT</code>：提交事务。一旦提交，所执行过的操作就已成定论，恢复不了了。</li>
<li><code>ROLLBACK</code>：事务回滚，**只能回滚未 COMMIT 的 DML 操作！**也就是说只能用在 <code>START TRANSACTION</code> 和 <code>COMMIT</code> 之间，并且只能回滚 <code>INSERT/UPDATE/DELETE</code>。（回滚 SELECT 没啥意义）</li>
<li><code>SAVEPOINT &lt;保留点&gt;</code> 和 <code>ROLLBACK TO &lt;保留点&gt;</code>：同样只能用在 <code>START TRANSACTION</code> 和 <code>COMMIT</code> 之间，其优势在于，<code>ROLLBACK TO</code> 可以指定回滚到某特定保留点，更灵活，而 <code>ROLLBACK</code> 只能回滚到事务开始前。</li>
</ul>
<p>需要注意的有：</p>
<ol>
<li><code>COMMIT</code> 和 <code>ROLLBACK</code> 语句也是事务的结束，因此如果执行了 <code>ROLLBACK</code>，那它与 <code>COMMIT</code> 之间的内容会被跳过。（在这一点上，它相当于大多数 PL 的 return）</li>
<li><strong>如果事务执行出现问题，问题行后面的所有语句都不会被执行！包括 <code>COMMIT</code> 和 <code>ROLLBACK</code>！</strong> 如果想用纯 SQL 实现事务原子性，必须使用存储过程检查执行状态！举例如下：</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">CREATE PROCEDURE my_test()
</span></span><span class="line"><span class="cl">    BEGIN
</span></span><span class="line"><span class="cl">        DECLARE EXIT HANDLER FOR SQLEXCEPTION ROLLBACK  -- 检测到 SQLEXCEPTION 则 rollback，然后 exit
</span></span><span class="line"><span class="cl">        START TRANSACTION
</span></span><span class="line"><span class="cl">            INSERT INTO table_test VALUES(1, &#39;A&#39;)
</span></span><span class="line"><span class="cl">            INSERT INTO table_test VALUES(1, &#39;B&#39;)  -- 这里主键冲突，会触发 SQLEXCEPTION
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            COMMIT
</span></span><span class="line"><span class="cl">    END
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">CALL my_test()
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者<strong>在 PL 中通过异常处理执行 <code>ROLLBACK</code></strong>。（事务虽然中止了，但并未结束！所以仍然可以 <code>ROLLBACK</code> 或者 <code>COMMIT</code>）</p>
<h3 id="数据何时被提交到数据库" class="headerLink">
    <a href="#%e6%95%b0%e6%8d%ae%e4%bd%95%e6%97%b6%e8%a2%ab%e6%8f%90%e4%ba%a4%e5%88%b0%e6%95%b0%e6%8d%ae%e5%ba%93" class="header-mark"></a>数据何时被提交到数据库</h3><ol>
<li>显式提交：在事务中使用 <code>COMMIT</code> 提交数据操作被称为显式提交</li>
<li>隐式提交：非 DML 操作会被立即提交，也就是说这些语句本身就隐含了提交语义</li>
<li>自动提交： 如果 <code>AUTOCOMMIT</code> 被设置为 <code>ON</code>，当前 session 中的 DML 语句会在执行后被自动提交（<code>START TRANSACTION</code> 内部的 DML 除外，在它内部必须显式 <code>COMMIT</code>）</li>
</ol>
<p>所有的 DML 语句都是要显式提交的，MySQL session 的 <code>AUTOCOMMIT</code> 默认为 <code>ON</code>，所以 DML 会被自动提交。</p>
<blockquote>
<p>P.S. 许多语言的数据库 API 会定义自己的事务操作，不一定与这里一致。</p>
</blockquote>
]]></content></entry><entry><title type="html">Python 视频转字符动画（二）进阶</title><link href="https://thiscute.world/posts/video2chars-2/"/><id>https://thiscute.world/posts/video2chars-2/</id><author><name>ryan4yin</name></author><published>2018-05-25T18:08:02+08:00</published><updated>2022-08-13T14:16:02+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文最初于 2018-05-25 发表在<a href="https://www.cnblogs.com/kirito-c/p/9089873.html" target="_blank" rel="noopener noreffer">博客园</a>，2022-08-13 搬迁至 <a href="https://thiscute.world" target="_blank" rel="noopener noreffer">https://thiscute.world</a></p>
</blockquote>
<h3 id="0-话说在前头" class="headerLink">
    <a href="#0-%e8%af%9d%e8%af%b4%e5%9c%a8%e5%89%8d%e5%a4%b4" class="header-mark"></a>0. 话说在前头</h3><p>最新版使用了画布方式实现，和本文相比改动非常大，如果对旧版本的实现没啥兴趣，可以直接移步 <a href="https://github.com/ryan4yin/video2chars/blob/master/doc/README-zh-cn.md" target="_blank" rel="noopener noreffer">video2chars</a>，它的效果动画见 <a href="https://www.bilibili.com/video/av30469888/" target="_blank" rel="noopener noreffer">极乐净土</a>。新版本的核心代码不算注释70行不到，功能更强大。</p>
<p>下面的效果动画是使用 html 实现的字符动画效果（上一篇的效果动画是 shell 版的）：</p>
<div class="video-shortcode">
  <video width="640" height="480" preload="auto" controls autoplay="true" loop="true">
    <source src="/videos/video2chars-2/video2chars-html.webm" type="video/webm">
    There should have been a video here but your browser does not seem
    to support it.
  </video>
</div>

<blockquote>
<p>本文的优化仍然是针对 shell 版本的，html 版由于缺陷太大就不写文章介绍了。</p>
</blockquote>
<h3 id="1-速度优化" class="headerLink">
    <a href="#1-%e9%80%9f%e5%ba%a6%e4%bc%98%e5%8c%96" class="header-mark"></a>1. 速度优化</h3><p>要是每次播放都要等个一分钟，也太痛苦了一点。
所以可以用 pickle 模块把 video_chars 保存下来，下次播放时，如果发现当前目录下有这个保存下来的数据，就跳过转换，直接播放了。这样就快多了。
只需要改一下测试代码，
先在开头添加两个依赖</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">pickle</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后在文件结尾添加代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">file_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    将指定对象，以file_nam为名，保存到本地
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s1">&#39;wb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">pickle</span><span class="o">.</span><span class="n">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    从当前文件夹的指定文件中load对象
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;rb&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">pickle</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_file_name</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    从文件路径中提取出不带拓展名的文件名
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 从文件路径获取文件名 _name</span>
</span></span><span class="line"><span class="cl">    <span class="n">path</span><span class="p">,</span> <span class="n">file_name_with_extension</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 拿到文件名前缀</span>
</span></span><span class="line"><span class="cl">    <span class="n">file_name</span><span class="p">,</span> <span class="n">file_extension</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">file_name_with_extension</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">file_name</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">has_file</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">file_name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    判断指定目录下，是否存在某文件
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">file_name</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">get_video_chars</span><span class="p">(</span><span class="n">video_path</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    返回视频对应的字符视频
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">video_dump</span> <span class="o">=</span> <span class="n">get_file_name</span><span class="p">(</span><span class="n">video_path</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&#34;.pickle&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 如果 video_dump 已经存在于当前文件夹，就可以直接读取进来了</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">has_file</span><span class="p">(</span><span class="s2">&#34;.&#34;</span><span class="p">,</span> <span class="n">video_dump</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;发现该视频的转换缓存，直接读取&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">video_chars</span> <span class="o">=</span> <span class="n">load</span><span class="p">(</span><span class="n">video_dump</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;未发现缓存，开始字符视频转换&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;开始逐帧读取&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 视频转字符动画</span>
</span></span><span class="line"><span class="cl">        <span class="n">imgs</span> <span class="o">=</span> <span class="n">video2imgs</span><span class="p">(</span><span class="n">video_path</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;视频已全部转换到图像， 开始逐帧转换为字符画&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">video_chars</span> <span class="o">=</span> <span class="n">imgs2chars</span><span class="p">(</span><span class="n">imgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;转换完成，开始缓存结果&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 把转换结果保存下来</span>
</span></span><span class="line"><span class="cl">        <span class="n">dump</span><span class="p">(</span><span class="n">video_chars</span><span class="p">,</span> <span class="n">video_dump</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;缓存完毕&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">video_chars</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 宽，高</span>
</span></span><span class="line"><span class="cl">    <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 视频路径，换成你自己的</span>
</span></span><span class="line"><span class="cl">    <span class="n">video_path</span> <span class="o">=</span> <span class="s2">&#34;BadApple.mp4&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">video_chars</span> <span class="o">=</span> <span class="n">get_video_chars</span><span class="p">(</span><span class="n">video_path</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">play_video</span><span class="p">(</span><span class="n">video_chars</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>另一个优化方法就是边转换边播放，就是同时执行上述三个步骤。学会了的话，可以自己实现一下试试。</p>
<h3 id="2-字符视频和音乐同时播放" class="headerLink">
    <a href="#2-%e5%ad%97%e7%ac%a6%e8%a7%86%e9%a2%91%e5%92%8c%e9%9f%b3%e4%b9%90%e5%90%8c%e6%97%b6%e6%92%ad%e6%94%be" class="header-mark"></a>2. 字符视频和音乐同时播放</h3><p>没有配乐的动画，虽然做出来了是很有成就感，但是你可能看上两遍就厌倦了。
所以让我们来给它加上配乐。（不要担心，其实就只需要添加几行代码而已）</p>
<p>首先我们需要找个方法来播放视频的配乐，怎么做呢？
先介绍一下一个跨平台视频播放器：<a href="https://mpv.io" target="_blank" rel="noopener noreffer"><strong>mpv</strong></a>，它有很棒的命令行支持，请先安装好它。
要让 mpv 只播放视频的音乐部分，只需要命令：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mpv --no-video video_path
</span></span></code></pre></td></tr></table>
</div>
</div><p>好了，现在有了音乐，可总不能还让人开俩shell，先放音乐，再放字符画吧。
这时候，我们需要的功能是：<a href="https://www.cnblogs.com/kirito-c/p/9088276.html#python-invoke" target="_blank" rel="noopener noreffer">使用 Python 调用外部应用</a>.
但是 mpv 使用了类似 curses 的功能，标准库的 os.system 不能隐藏掉这个部分，播放效果不尽如人意。
因此我使用了 <a href="https://github.com/pyinvoke/invoke" target="_blank" rel="noopener noreffer">pyinvoke</a> 模块，只要给它指定参数<code>hide=True</code>，就可以完美隐藏掉被调用程序的输出（指 stdout，其实 subprocess 也可以的）。运行下面代码前，请先用pip安装好 invoke.（能够看到这里的，安装个模块还不是小菜一碟）</p>
<p>好了废话说这么多，上代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">invoke</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">video_path</span> <span class="o">=</span> <span class="s2">&#34;BadApple.mp4&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">invoke</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;mpv --no-video </span><span class="si">{</span><span class="n">video_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">hide</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">warn</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>运行上面的测试代码，如果听到了音乐，而shell啥都没输出，但是能听到音乐的话，就正常了。我们继续。（这里使用了python3.6的f字符串）</p>
<p>音乐已经有了，那就好办了。
添加一个播放音乐的函数</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">invoke</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">play_audio</span><span class="p">(</span><span class="n">video_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">invoke</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;mpv --no-video </span><span class="si">{</span><span class="n">video_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">hide</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">warn</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后修改main()方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 宽，高</span>
</span></span><span class="line"><span class="cl">    <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">48</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 视频路径，换成你自己的</span>
</span></span><span class="line"><span class="cl">    <span class="n">video_path</span> <span class="o">=</span> <span class="s2">&#34;BadApple.mp4&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 只转换三十秒，这个属性是才添加的，但是上一篇的代码没有更新。你可能需要先上github看看最新的代码。其实就稍微改了一点。</span>
</span></span><span class="line"><span class="cl">    <span class="n">seconds</span> <span class="o">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 这里的fps是帧率，也就是每秒钟播放的的字符画数。用于和音乐同步。这个更新也没写进上一篇，请上github看看新代码。</span>
</span></span><span class="line"><span class="cl">    <span class="n">video_chars</span><span class="p">,</span> <span class="n">fps</span> <span class="o">=</span> <span class="n">get_video_chars</span><span class="p">(</span><span class="n">video_path</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">seconds</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 播放音轨</span>
</span></span><span class="line"><span class="cl">    <span class="n">play_audio</span><span class="p">(</span><span class="n">video_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 播放视频</span>
</span></span><span class="line"><span class="cl">    <span class="n">play_video</span><span class="p">(</span><span class="n">video_chars</span><span class="p">,</span> <span class="n">fps</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后运行。。并不是我坑你，你只听到了声音，却没看到字符画。。原因是： invoke.run()函数是阻塞的，音乐没放完，代码就到不了<code>play_video(video_chars, fps)</code>这一行。</p>
<p>所以 <code>play_audio</code> 还要改一下，改成这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">invoke</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">play_audio</span><span class="p">(</span><span class="n">video_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">call</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="n">invoke</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;mpv --no-video </span><span class="si">{</span><span class="n">video_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">,</span> <span class="n">hide</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">warn</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 这里创建子线程来执行音乐播放指令，因为 invoke.run() 是一个阻塞的方法，要同时播放字符画和音乐的话，就要用多线程/进程。</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># P.S. 更新：现在发现可以用 subprocess.Popen 实现异步调用 mpv，不需要开新线程。有兴趣的同学可以自己试试。</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">call</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">.</span><span class="n">setDaemon</span><span class="p">(</span><span class="kc">True</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这里使用标准库的 threading.Thread 类来创建子线程，让音乐的播放在子线程里执行，然后字符动画还是主线程执行，Ok，这就可以看到最终效果了。实际上只添加了十多行代码而已。</p>
<h3 id="3-彩色字符动画" class="headerLink">
    <a href="#3-%e5%bd%a9%e8%89%b2%e5%ad%97%e7%ac%a6%e5%8a%a8%e7%94%bb" class="header-mark"></a>3. 彩色字符动画</h3><ol>
<li>html+javascript 方式：核心都是一样的内容，只是需要点 html 和 javascript 的知识。代码见 <a href="https://github.com/ryan4yin/video2chars/blob/v0.3/src/video2html.py" target="_blank" rel="noopener noreffer">video2chars-html</a></li>
<li>画布方式：直接把画在图片上，然后自动合成为 mp4 文件。这种方式要优于 html 方式，而且有个很方便的库能用，核心代码就 70 行的样子。代码见 <a href="https://github.com/ryan4yin/video2chars/" target="_blank" rel="noopener noreffer">video2chars</a></li>
</ol>
<h3 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h3><ul>
<li><a href="https://blog.csdn.net/kongfu_cat/article/details/79681719" target="_blank" rel="noopener noreffer">Python将视频转换为全字符视频（含音频）</a></li>
</ul>
]]></content></entry><entry><title type="html">学英语啊学英语</title><link href="https://thiscute.world/posts/learning-english/"/><id>https://thiscute.world/posts/learning-english/</id><author><name>ryan4yin</name></author><published>2018-05-16T20:00:02+08:00</published><updated>2018-05-16T20:00:02+08:00</updated><content type="html"><![CDATA[<p>对我而言，学英语是一件挺痛苦的事。从初中开始学英文，可从来不觉得它有趣，主动性也就不强。</p>
<p>直到我开始学计算机，我开始认识到英文是不可避免的。于是尝试了很多方法。</p>
<p>最普遍的方式：背单词，可我从初中背到现在，背单词的计划从没哪次坚持超过一个月的。</p>
<p>后来听说看英文原版书有效，信心满满，结果也是看了一星期 Harry Potter，稍微看了点 Animal Farm，就没后续了。</p>
<p>又想练听力，开始听 ESLPod、EnglishPod，也就听了一个月的时间。。</p>
<p>练口语，听完了《赖世雄美语音标》，又看了点美国的口语纠正视频。这件事干得倒还算可以，口语的确标准了不少。不过也就花了十多天，就没然后了。</p>
<p>我学计算机的过程，和我的英文学习过程也有不少重合的地方。</p>
<p>印象中第一次读英文资料，是想学计算机图形学，被知乎上的高手们推荐看一个英文教程。死嗑了三天，坚持不下去放弃了。。</p>
<p>之后听了季索清学长的推荐，又见知乎上也都说 Python 好，就开始学 Python。看了 A Byte of Python, 印象中花了一天看完的，但是没在脑子里留下啥印象。</p>
<p>后来慢慢的开始熟悉 Python，在图书馆借了 Head First Python 英文版，可能是被厚度吓到了，看了几页就不了了之了。。</p>
<p>再后来用 Github，Pycharm IDEA 也是英文的，Python doc 和 Java doc 也全是英文的，标准库里的注释是英文的，Error 信息是英文的&hellip;&hellip; 虽然学啥都半途而废，但英文水平的确是慢慢地提升着。</p>
<p>慢慢地，能够不怎么吃力地看懂 Python 标准库了，有问题也可以看英文博客解决了。</p>
<p>最近看一个动漫看完不过瘾，转去看这部动漫的轻小说。轻小说中文翻译的太呆板，发现居然有英文的，直接啃起了英文。</p>
<p>换了好几部小说，现在在看 <a href="https://www.baka-tsuki.org/project/index.php?title=Hai_to_Gensou_no_Grimgar" target="_blank" rel="noopener noreffer">Grimgar of Fantasy and Ash</a>、<a href="https://www.baka-tsuki.org/project/index.php?title=Tasogare-iro_no_Uta_Tsukai" target="_blank" rel="noopener noreffer">Tasogare-iro no Uta Tsukai(黄昏色の詠使い)</a>，还找了个英文动漫网站，颇有以后看动漫也只看英文字幕的打算。希望能持续下去吧。</p>
<p>不过也有点苦恼，因为暑假就要找工作，现在却沉迷看英文小说。。本来这个月该学算法的，可半个月都过了，我的进度大概才认真的时候的五天的样子。。真不知道未来会是啥样。</p>
]]></content></entry><entry><title type="html">《十二国记》</title><link href="https://thiscute.world/posts/the-twelve-kingdoms/"/><id>https://thiscute.world/posts/the-twelve-kingdoms/</id><author><name>ryan4yin</name></author><published>2018-04-27T10:49:14+08:00</published><updated>2018-04-27T10:49:14+08:00</updated><content type="html"><![CDATA[<p>看完了动画，也看了点小说。最敬佩、最喜欢、最向往的人物是珠晶，也就是供王。能感觉得到她是所有角色中，最自信、方向最明确的，而且她思考一直比较理性。身为富商之女，年仅十二，却能拥有超出所有国民的觉悟，“既然大人们没有勇气，那就由我去当王！”，并最终称王，不得不敬佩。她有句让人难以忘却的台词，“我之所以能过着比别人更好的生活，是因为我担负了相比更沉重的责任。如果没能完成相应的使命，我就会像峰王一样被砍掉脑袋。而祥琼没有认识到这一点，她不想担负责任，却觉得自己应该享受荣华富贵。”</p>
<p>其次就是“专职心理治疗”的乐俊小老鼠了，我简直有点怀疑存不存在这样可敬的老鼠(废话)。乐俊成熟得不适合当主角，几乎无可挑剔，大概也因此而戏份不多。</p>
<p><img
        class="lazyload"
        data-src="/images/the-twelve-kingdoms/968138-20201122221647185-1479026304.webp"
        data-srcset="/images/the-twelve-kingdoms/968138-20201122221647185-1479026304.webp, /images/the-twelve-kingdoms/968138-20201122221647185-1479026304.webp 1.5x, /images/the-twelve-kingdoms/968138-20201122221647185-1479026304.webp 2x"
        data-sizes="auto"
        alt="/images/the-twelve-kingdoms/968138-20201122221647185-1479026304.webp"
        title="乐俊"></p>
<p>而花了大篇幅描写的庆东国的景王，还有一路走来的祥琼和铃、更夜还有泰麒，他们一度迷失掉了自我，虽然作为结果的他们实现了自我救赎，但是这个过程我喜欢不起来。大概因为我也是个偏激的人吧&hellip;&hellip;</p>
<p><img
        class="lazyload"
        data-src="/images/the-twelve-kingdoms/968138-20201122221704136-1512420559.webp"
        data-srcset="/images/the-twelve-kingdoms/968138-20201122221704136-1512420559.webp, /images/the-twelve-kingdoms/968138-20201122221704136-1512420559.webp 1.5x, /images/the-twelve-kingdoms/968138-20201122221704136-1512420559.webp 2x"
        data-sizes="auto"
        alt="/images/the-twelve-kingdoms/968138-20201122221704136-1512420559.webp"
        title="景王"></p>
<p><img
        class="lazyload"
        data-src="/images/the-twelve-kingdoms/968138-20201122221721050-408249578.webp"
        data-srcset="/images/the-twelve-kingdoms/968138-20201122221721050-408249578.webp, /images/the-twelve-kingdoms/968138-20201122221721050-408249578.webp 1.5x, /images/the-twelve-kingdoms/968138-20201122221721050-408249578.webp 2x"
        data-sizes="auto"
        alt="/images/the-twelve-kingdoms/968138-20201122221721050-408249578.webp"
        title="十二国记"></p>
<p>珠晶遇到了顽丘，景王和祥琼被乐俊救赎，铃也有自己的贵人，更夜在斡由被杀时终于承认了自己的错误，泰麒也是被麒麟们合力救回来的。</p>
<p>谁都不可能只活在自己的世界，就能得到救赎。(这样就又得到了一个和刺猬的优雅类似的结论&hellip;)</p>
]]></content></entry><entry><title type="html">Java 中文编码分析</title><link href="https://thiscute.world/posts/how-java-handles-chinese/"/><id>https://thiscute.world/posts/how-java-handles-chinese/</id><author><name>ryan4yin</name></author><published>2018-03-11T16:39:00+08:00</published><updated>2018-03-11T16:39:00+08:00</updated><content type="html"><![CDATA[<h3 id="一charat-与-codeponitat" class="headerLink">
    <a href="#%e4%b8%80charat-%e4%b8%8e-codeponitat" class="header-mark"></a>一、charAt 与 codePonitAt</h3><p>我们知道 Java 内部使用的是 utf-16 作为它的 char、String 的字符编码方式，这里我们叫它内部字符集。而 utf-16 是变长编码，一个字符的编码被称为一个 code point，它可能是 16 位 —— 一个 code unit，也可能是 32 位 —— 两个 code unit。
Java 的 char 类型长度为二字节，它对应的是 code unit。换句话说，一个字符的编码，可能需要用两个 char 来存储。</p>
<p>作为一个输入法爱好者，我偶尔会编程处理一些生僻字。其中有些生僻字大概是后来才加入 unicode 字符集里的，直接用 charAt 方法读取它们，会得到一堆问号。原因很清楚 —— 因为这些字符（eg. &ldquo;𫖯&rdquo;）是用两个 code unit，也就是两个 char 表示的。charAt 找不到对应的编码，就会将这些 char 输出成「?」。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="c1">//示例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;𫖯&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>   <span class="c1">//输出：2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">0</span><span class="o">));</span>  <span class="c1">//输出：?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">1</span><span class="o">));</span>  <span class="c1">//输出：?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>因此，涉及到中文，一定要使用 String 而不是 char，并且使用 codePoint 相关方法来处理它。否则的话，如果用户使用了生僻字，很可能就会得到不想要的结果。</p>
<p>下面是一个使用 codePoint 遍历一个字符串的示例，需要注意的是，codePoint 是 int 类型的（因为 char 不足以保存一个 codepoint），因此需要做些额外的转换：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;赵孟𫖯孟&#34;</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">codePointCount</span><span class="o">(</span><span class="n">0</span><span class="o">,</span><span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">                    <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">toChars</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">codePointAt</span><span class="o">(</span><span class="n">i</span><span class="o">))));</span>
</span></span><span class="line"><span class="cl">                    <span class="c1">// 这里的轨迹是：类型为 int 的 codepoint -&gt; char数组 -&gt; String 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 结果：
</span></span></span><span class="line"><span class="cl"><span class="cm">        赵
</span></span></span><span class="line"><span class="cl"><span class="cm">        孟
</span></span></span><span class="line"><span class="cl"><span class="cm">        𫖯
</span></span></span><span class="line"><span class="cl"><span class="cm">        ?
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>问题来了，「𫖯」这个字是正常地输出了，可最后的「孟」却变成了黑人问号。。
原因就在于 codepointAt(i) 是以 char 偏移量索引的。。所以只是这样输出也是不行的。。</p>
<p>正确的遍历姿势是这样的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">final</span> <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">offset</span> <span class="o">=</span> <span class="n">0</span><span class="o">;</span> <span class="n">offset</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="o">)</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">final</span> <span class="kt">int</span> <span class="n">codepoint</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">codePointAt</span><span class="o">(</span><span class="n">offset</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">toChars</span><span class="o">(</span><span class="n">codepoint</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="n">offset</span> <span class="o">+=</span> <span class="n">Character</span><span class="o">.</span><span class="na">charCount</span><span class="o">(</span><span class="n">codepoint</span><span class="o">);</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>这个代码保持了一个变量offset, 来指示下一个 codepoint 的偏移量。最后那一句在处理完毕后，更新这个偏移量</p>
<p>而 Java 8 添加了 <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html#codePoints--" target="_blank" rel="noopener noreffer"><code>CharSequence#codePoints</code></a>， 该方法返回一个 <code>IntStream</code>，该流包含所有的 codepoint。可以直接通过 forEach 方法来遍历他。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="n">string</span><span class="o">.</span><span class="na">codePoints</span><span class="o">().</span><span class="na">forEach</span><span class="o">(</span>
</span></span><span class="line"><span class="cl">        <span class="n">c</span> <span class="o">-&gt;</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">toChars</span><span class="o">(</span><span class="n">c</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl"><span class="o">);</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>或者用循环</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">c</span> <span class="o">:</span> <span class="n">string</span><span class="o">.</span><span class="na">codePoints</span><span class="o">().</span><span class="na">toArray</span><span class="o">()){</span>
</span></span><span class="line"><span class="cl">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">toChars</span><span class="o">(</span><span class="n">c</span><span class="o">)));</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h3 id="二内部字符集与输出字符集内码与外码" class="headerLink">
    <a href="#%e4%ba%8c%e5%86%85%e9%83%a8%e5%ad%97%e7%ac%a6%e9%9b%86%e4%b8%8e%e8%be%93%e5%87%ba%e5%ad%97%e7%ac%a6%e9%9b%86%e5%86%85%e7%a0%81%e4%b8%8e%e5%a4%96%e7%a0%81" class="header-mark"></a>二、内部字符集与输出字符集（内码与外码）</h3><p>现在我们知道了中文字符在 java 内部可能会保存成两个 char，可还有个问题：如果我把一个字符输出到某个流，它还会是两个 char，也就是 4 字节么？
回想一下，Java io 有字符流，字符流使用 jvm 默认的字符集输出，而若要指定字符集，可使用转换流。
因此，一个中文字符，在内部是使用 utf-16 表示，可输出就不一定了。
来看个示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">java.io.UnsupportedEncodingException</span><span class="o">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Test</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span></span><span class="line"><span class="cl">            <span class="kd">throws</span> <span class="n">UnsupportedEncodingException</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&#34;中&#34;</span><span class="o">;</span>   <span class="c1">//𫖯
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34;: chars: &#34;</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34;: utf-8 bytes:&#34;</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&#34;utf-8&#34;</span><span class="o">).</span><span class="na">length</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34;: unicode bytes: &#34;</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&#34;unicode&#34;</span><span class="o">).</span><span class="na">length</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">&#34;: utf-16 bytes: &#34;</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="s">&#34;utf-16&#34;</span><span class="o">).</span><span class="na">length</span><span class="o">);</span>
</span></span><span class="line"><span class="cl">    <span class="o">}</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>输出为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">中: chars: 1      // 2 bytes 
</span></span><span class="line"><span class="cl">中: utf-8 bytes:3
</span></span><span class="line"><span class="cl">中: unicode bytes: 4
</span></span><span class="line"><span class="cl">中: utf-16 bytes: 4
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">𫖯: chars: 2       // 4 bytes
</span></span><span class="line"><span class="cl">𫖯: utf-8 bytes:4
</span></span><span class="line"><span class="cl">𫖯: unicode bytes: 6
</span></span><span class="line"><span class="cl">𫖯: utf-16 bytes: 6
</span></span></code></pre></td></tr></table>
</div>
</div><p>一个「中」字，内部存储只用了一个 char，也就是 2 个字节。可转换成 utf-8 编码后，却用了 3 个字节。怎么会不一样呢，是不是程序出了问题？
当然不是程序的问题，这是内码(utf-16)转换成外码(utf-8)，字符集发生了改变，所使用的字节数自然也可能会改变。（尤其这俩字符集还都是变长编码）</p>
<h3 id="三utf-16utf-16leutf-16bebom" class="headerLink">
    <a href="#%e4%b8%89utf-16utf-16leutf-16bebom" class="header-mark"></a>三、utf-16、utf-16le、utf-16be、bom</h3><p>不知道在刚刚的示例中，你有没有发现问题：同是 utf-16，为何「中」和「𫖯」的 <code>s.getBytes(&quot;utf-16&quot;).length</code> 比  <code>s.length</code> 要多个 2？开头就说了 String 也是 <code>utf-16</code> 编码的，这两个数应该相等才对不是吗？
原因在于，utf-16 以 16 位为单位表示数据，而计算机是以字节为基本单位来存储/读取数据的。因此一个 utf-16 的 code unit 会被存储为两个字节，需要明确指明这两个字节的先后顺序，计算机才能正确地找出它对应的字符。而 utf-16 本身并没有指定这些，所以它会在字符串开头插入一个两字节的数据，来存储这些信息（大端还是小端）。这两个字节被称为BOM（Byte Order Mark）。刚刚发现的多出的两字节就是这么来的。
如果你指定编码为 utf-16le 或 utf-16be，就不会有这个 BOM 的存在了。这时就需要你自己记住该文件的大小端。。</p>
<h3 id="四更多utf-8-unicode" class="headerLink">
    <a href="#%e5%9b%9b%e6%9b%b4%e5%a4%9autf-8-unicode" class="header-mark"></a>四、更多：utf-8 unicode</h3><ol>
<li>在 windows 中，utf-8 格式的文件也可能会带有 BOM，但 utf-8 的基本单位本来就是一个字节，因此它不需要 BOM 来表示 所谓大小端。这个 BOM 一般是用来表示该文件是一个 utf-8 文件。不过 linux 系统则对这种带 BOM 的文件不太友好。不般不建议加。。（虽如此说，上面的测试中，utf-8 的数据应该是没加 bom 的结果）</li>
<li>unicode字符集UCS（Unicode Character Set） 就是一张包含全世界所有文字的一个编码表，但是 UCS 太占内存了，所以实际使用基本都是使用它的其他变体。一般来说，指定字符集时使用的 unicode 基本等同于 utf-16.（所以你会发现第二节演示的小程序里，utf-16 和 unicode 得出的结果是一样的。）</li>
</ol>
<h3 id="四与-python3-对比" class="headerLink">
    <a href="#%e5%9b%9b%e4%b8%8e-python3-%e5%af%b9%e6%af%94" class="header-mark"></a>四、与 Python3 对比</h3><p>python3 在字符串表示上，做了大刀阔斧的改革，python3 的 len(str) 得到的就是 unicode 字符数，因此程序员完全不需要去考虑字符的底层表示的问题。（实际上其内部表示也可能随着更新而变化）带 BOM 的 utf-8 也可通过指定字符集为 <code>utf-8-sig</code> 解决。若需要做字符集层面处理，需要 encode 为特定字符集的 byte 类型。</p>
<blockquote>
<p>Encoding pertains mostly to files and transfers. Once
loaded into a Python string, text in memory has no notion of an “encoding,” and is
simply a sequence of Unicode characters (a.k.a. code points) stored generically.
&ndash; Learning Python 5th</p>
</blockquote>
<blockquote>
<p>P.S. Python2 存在和 Java 相同的问题</p>
</blockquote>
<h3 id="参考" class="headerLink">
    <a href="#%e5%8f%82%e8%80%83" class="header-mark"></a>参考</h3><ul>
<li><a href="https://www.zhihu.com/question/27562173/answer/37188642" target="_blank" rel="noopener noreffer">java 语言中的一个字符占几个字节？ - RednaxelaFX - 知乎</a></li>
<li><a href="https://stackoverflow.com/questions/1527856/how-can-i-iterate-through-the-unicode-codepoints-of-a-java-string" target="_blank" rel="noopener noreffer">How can I iterate through the unicode codepoints of a Java String?</a></li>
<li><a href="http://blog.csdn.net/softman11/article/details/6124345" target="_blank" rel="noopener noreffer">彻底搞懂字符编码(unicode,mbcs,utf-8,utf-16,utf-32,big endian,little endian&hellip;)</a></li>
<li><a href="http://blog.csdn.net/tianjf0514/article/details/7854624" target="_blank" rel="noopener noreffer">Java_字符编码</a></li>
</ul>
<p>本文允许转载，但要求附上源链接：<a href="http://www.cnblogs.com/kirito-c/p/8544408.html" target="_blank" rel="noopener noreffer">Java 中文编码分析</a></p>
]]></content></entry><entry><title type="html">进程线程协程与并发并行</title><link href="https://thiscute.world/posts/process-thread-coroutines-concurrency-parallelism/"/><id>https://thiscute.world/posts/process-thread-coroutines-concurrency-parallelism/</id><author><name>ryan4yin</name></author><published>2018-01-23T16:39:00+08:00</published><updated>2018-01-23T16:39:00+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>个人笔记，不保证正确。</p>
</blockquote>
<h3 id="一进程-process并行运算分布式" class="headerLink">
    <a href="#%e4%b8%80%e8%bf%9b%e7%a8%8b-process%e5%b9%b6%e8%a1%8c%e8%bf%90%e7%ae%97%e5%88%86%e5%b8%83%e5%bc%8f" class="header-mark"></a>一、进程 Process：（并行运算，分布式）</h3><p>每一个进程，都可以看作是一个完整的 Program，它有自己完全独立的内容。不与其他进程直接共享数据。（一个工作(job)可以由多个 process 完成，例如电脑上的qq/360就会有好几个进程，这种程序可能会有一个守护进程，当主进程挂掉，它会自动重启主进程。）</p>
<p>每个进程可以由多个线程组成。进程抽象由操作系统提供，Linux 是使用 fork 函数，Windows 是用 CreateProccess。</p>
<h3 id="二线程-thread并发执行" class="headerLink">
    <a href="#%e4%ba%8c%e7%ba%bf%e7%a8%8b-thread%e5%b9%b6%e5%8f%91%e6%89%a7%e8%a1%8c" class="header-mark"></a>二、线程 Thread：（并发执行）</h3><p>属于同一个进程的线程之间，是共享一套工作内容的。这使得线程的创建和移除开销很小，但同时也使编程变得复杂。</p>
<figure><img src="/images/process-thread-coroutines-concurrency-parallelism/threads-vs-processes.webp"/>
</figure>

<p>关于线程，分用户级线程和内核级线程。不同的语言中，这两种线程的对应关系也不尽相同。</p>
<ul>
<li>
<p>多对一模型
将多个用户级线程映射到一个内核级线程，线程管理在用户空间完成，这种模型下操作系统并不知道多线程的存在。Python 就是这种模型。</p>
<ul>
<li><strong>优点</strong>：线程管理是在用户空间进行的，切换上下文开销比较小，性能较高。</li>
<li><strong>缺点</strong>：当一个线程在使用内核服务时被阻塞，那么整个进程都会被阻塞；多个线程不能并行地运行在多处理机上。</li>
</ul>
</li>
<li>
<p>一对一模型
将每个用户级线程映射到一个内核级线程。Java的线程就属于这种模型。</p>
<ul>
<li><strong>优点</strong>：当一个线程被阻塞后，允许另一个线程继续执行，所以并发能力较强；能很好的利用到CPU的多核心。</li>
<li><strong>缺点</strong>：每创建一个用户级线程都需要创建一个内核级线程与其对应，这样创建线程的开销比较大，会影响到应用程序的性能。并且切换线程要进出内核，代价比较大。</li>
</ul>
</li>
<li>
<p>多对多模型
将n个用户级线程映射到m个内核级线程上，要求 m &lt;= n。GO（1.5之后）的协程就属于这种线程模型。</p>
<ul>
<li><strong>特点</strong>：既克服了多对一模型的并发度不高的缺点，又克服了一对一模型的一个用户进程占用太多内核级线程，开销太大的缺点。又拥有多对一模型和一对一模型各自的优点。</li>
</ul>
</li>
</ul>
<h3 id="三协程-coroutine并发执行" class="headerLink">
    <a href="#%e4%b8%89%e5%8d%8f%e7%a8%8b-coroutine%e5%b9%b6%e5%8f%91%e6%89%a7%e8%a1%8c" class="header-mark"></a>三、协程 Coroutine（并发执行）</h3><p>如果说线程是轻量级的进程，那么协程就是轻量级的线程。线程跑在进程里，协程就跑在线程里。</p>
<p>优点：</p>
<ol>
<li>协程是跑在同一个线程里，并且是由程序本身来调度的。协程间的切换就是函数的调用，完全没有线程切换那么大的开销。
<ul>
<li>线程的数量越多，协程的优势越大</li>
</ul>
</li>
<li>因为协程是程序调度的，它实际上是串行运行的，因此不需要复杂的锁机制来保证线程安全。
<ul>
<li>在协程中控制共享资源不加锁，只需要判断状态就好了。这免去了锁机制带来的开销。</li>
</ul>
</li>
</ol>
<p>因为协程跑在单个线程内，所占用的 CPU 资源有限，所以多协程<strong>并不能提升计算性能</strong>。不仅如此，因为多了程序本身的调度开销，计算密集型程序的性能反而会下降。</p>
<p>此外，协程代码中<strong>决不能出现阻塞</strong>，否则整个线程都会停下来等待该操作完成，这就麻烦了。</p>
<p>协程适合用于 IO 密集型任务，可用于简化异步 IO 的 callback hell。例如 Python 的 asyncio 就是用协程实现的。</p>
<h3 id="并发并行" class="headerLink">
    <a href="#%e5%b9%b6%e5%8f%91%e5%b9%b6%e8%a1%8c" class="header-mark"></a>并发并行</h3><p>由此，又引出两个名词：</p>
<ol>
<li>并发（Concurrent）：多个任务交替进行。</li>
<li>并行（Parallel）：多个任务同时进行。</li>
</ol>
<p>一张图说明两者的差别</p>
<figure><img src="/images/process-thread-coroutines-concurrency-parallelism/concurrency-vs-parallelism.webp"/>
</figure>

<p><strong>Note</strong>：进程 和 线程 都可能是 并发 或 并行 的。关键看你程序的运行状态。多核是并行的前提。并发则只要求交替执行，因此单核也没问题。</p>
<h3 id="同步异步" class="headerLink">
    <a href="#%e5%90%8c%e6%ad%a5%e5%bc%82%e6%ad%a5" class="header-mark"></a>同步异步</h3><ol>
<li>同步：不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，称这些程序单元是同步执行的。
<ul>
<li>多线程编程中，所有修改共享变量的行为，都必须加锁，保证顺序执行，保证同步。或者加原子锁，保证该修改操作是原子的。</li>
<li>同步意味着有序</li>
</ul>
</li>
<li>异步：为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式。
<ul>
<li>不相关的程序单元之间可以是异步的。比如爬虫下载网页</li>
<li>异步意味着无序</li>
</ul>
</li>
</ol>
<ul>
<li><a href="https://www.cnblogs.com/euphie/p/7008077.html" target="_blank" rel="noopener noreffer">进程、线程和协程</a></li>
</ul>
]]></content></entry><entry><title type="html">《尘缘》</title><link href="https://thiscute.world/posts/fate-of-mortals/"/><id>https://thiscute.world/posts/fate-of-mortals/</id><author><name>ryan4yin</name></author><published>2017-11-18T01:52:00+08:00</published><updated>2017-11-18T01:52:00+08:00</updated><content type="html"><![CDATA[<p>店小二杀了巡界使，然后离了客栈，入了道德宗，应了一错缘，又给道德宗干了一堆破事，活的浑浑噩噩。</p>
<p>受了一剑斩缘后，本以为终于能求得解脱，谁知造化弄人，自己竟又从地府回得人界。</p>
<p>本一心复仇，临到头还是没对吟风下得杀手。</p>
<p>欲与顾清再续缘，却被说一句看不穿。</p>
<p>再次醒来，本欲杀上天界，可看到青衣时，猛然醒悟。</p>
<p>什么王图霸业，什么诸界称雄，什么夙世情仇，在这一刻，皆化浮云。眼中便只有这一世尘缘了。</p>
<p>青石与巡界使，被命运捉弄，被贬下凡间受百世轮回，九十九世相濡以沫，最后一世却横生波折。</p>
<p>终于回得仙界，相对大笑三声，相忘于江湖。</p>
]]></content></entry><entry><title type="html">又一个期末</title><link href="https://thiscute.world/posts/the-end-of-another-semester/"/><id>https://thiscute.world/posts/the-end-of-another-semester/</id><author><name>ryan4yin</name></author><published>2017-06-27T01:28:45+08:00</published><updated>2017-06-27T01:28:45+08:00</updated><content type="html"><![CDATA[<!-- Love Story - The Piano Guys -->
<meting-js server="netease" type="song" id="29460780" theme="#448aff"></meting-js>
<p>啊啊，还有十天就可以摆脱这个城市，回到那个令人安心的山林里了，一边期待着，一边焦躁着，想着为什么剩下的十天这么难熬这样的问题。</p>
<p>复习又是一塌糊涂，我也太懒了点。</p>
<p>这样懒散的我还做着码完几千行代码这样的春秋大梦，太不现实了。有点想认命了。</p>
<p>半夜一点多，寝室空调还是不习惯，过道阳台上的凉风倒是很舒服，这座城市此刻的静谧倒也有几分韵味。</p>
<p>不过不管怎么说，好想回家&hellip;</p>
]]></content></entry><entry><title type="html">《无限的未知》</title><link href="https://thiscute.world/posts/infinite-ryvius/"/><id>https://thiscute.world/posts/infinite-ryvius/</id><author><name>ryan4yin</name></author><published>2017-06-14T13:05:38+08:00</published><updated>2017-06-14T16:41:51+08:00</updated><content type="html"><![CDATA[<p>即使大人的世界也千疮百孔，但是要是让我们自己来做的话，只能做的更差？
所以你看船里的小社会是什么样子的吧，嫉妒、欺骗、恐惧、自暴自弃、愤怒、自私&hellip;&hellip;各种欲望。
于是阶级分化、工作效率低下，有人开始求助于神，暴动也时不时的发生。</p>
<p>舰长害怕有人死去，害怕承担责任，不敢冒险，喜欢上强势的阿岚，心心念念那个人，把事情搞的一团糟。祐希心里有话不讲，一味的揍人泄愤。伊克米恐惧死亡，恐惧得不像样。梢有点自我中心，觉得伊克米是她一个人的，只为了她而努力。阿岚很有当舰长的能力，但是一心复仇，除了这个其他的都不怎么管。
男主忍受着各种非议和殴打，但是坚守本心。不管局势如何变化，他一直在做着正确的事，虽然有时候正确的事未必是最好的&hellip;&hellip;</p>
<p>人在坏掉。</p>
<p>大家都在自欺欺人吗？</p>
<p>真的可以抛弃过去活下去吗？</p>
<p>如果不可以，那为了活着，背负过去是必要的？</p>
<p>最后反转剧情，靠的还是一个「情」字。也对，科技发展的动力也是人的欲望。</p>
<p><strong>欲望有好有坏，理智的把握它。无欲无求，就是死</strong>。</p>
]]></content></entry><entry><title type="html">欧几里得算法求最大公约数(GCD)的数学原理</title><link href="https://thiscute.world/posts/mathematics-in-euclidean-gcd/"/><id>https://thiscute.world/posts/mathematics-in-euclidean-gcd/</id><author><name>ryan4yin</name></author><published>2017-05-26T23:58:53+08:00</published><updated>2017-05-26T23:58:53+08:00</updated><content type="html"><![CDATA[<p>很早就学过欧几里得算法，但是一直不知道它的原理。几乎每本算法书都会提到它，但是貌似只有数学书上才会见到它的原理。。。</p>
<p>前段时间粗粗看了点数论（《什么是数学》），惊讶于这个原理的奇妙。现在把它通俗地写下来，以免自己忘记。</p>
<p>欧几里得算法是求两个数的最大公约数(Greatest Common Divisor (GCD))的算法，我们首先假设<strong>有两个数 $a$ 和 $b$，其中 $a$ 是不小于 $b$ 的数</strong>，</p>
<p>记 $a$ 被 $b$ 除的余数为 $r$，那么 $a$ 可以写成这样的形式：</p>
<p>$$a = bq + r$$</p>
<p>其中 $q$ 是整数（我们不需要去管 $q$ 到底是多少，这和我们的目标无关）。</p>
<p>现在假设 $a$ 和 $b$ 的一个约数为 $u$，那么 $a$ 和 $b$ 都能被 $u$ 整除，即</p>
<p>$$a = su$$
$$b = tu$$</p>
<p>$s$ 和 $t$ 都是整数（同样的，我们只需要知道存在这样的整数 $s$ 和 $t$ 就行）。</p>
<p>这样可以得出</p>
<p>$$r = a - bq = su - (tu)q = (s - tq)u$$</p>
<p>所以 $r$ 也能被 $u$ 整除，一般规律如下</p>
<blockquote>
<p>$a$ 和 $b$ 的约数也整除它们的余数 $r$，所以 $a$ 和 $b$ 的任一约数同时也是 $b$ 和 $r$ 的约数。  —— 条件一</p>
</blockquote>
<p>反过来可以得出</p>
<blockquote>
<p>$b$ 和 $r$ 的任一约数同时也是 $a$ 和 $b$ 的约数。  ——条件二</p>
</blockquote>
<p>这是因为对 $b$ 和 $r$ 每一个约数 $v$，有</p>
<p>$$b = kv$$</p>
<p>$$r = cv$$</p>
<p>于是有</p>
<p>$$a = bq + r = (kv)q + cv = (kq + c)v$$</p>
<p>由条件一和条件二可知</p>
<blockquote>
<p>$a$ 和 $b$ 的约数的集合，全等于 $b$ 和 $r$ 的约数的集合。</p>
</blockquote>
<p>于是</p>
<blockquote>
<p>$a$ 和 $b$ 的最大公约数，就是 $b$ 和 $r$ 的最大公约数。</p>
</blockquote>
<p>接下来用递推法，</p>
<p>$a \div b$ 余 $r$，现在设</p>
<p>$b \div r$ 余 $r_1$</p>
<p>$r \div r_1$ 余 $r_2$</p>
<p>……</p>
<p>$r_{n-3} \div r_{n-2}$ 余 $r_{n-1}$</p>
<p>$r_{n-2} \div r_{n-1}$ 余 $r_n=0$</p>
</br>
<p>因为 $a \ge b$，可以看出余数 $r_n$ 会越来越小，最终变成 $0$.</p>
<p>当 $r_{n-1} \neq 0$ 且 $r_n = 0$ 时，可知 $r_{n-2}$ 可被 $r_{n-1}$ 整除（余数为 $0$ 嘛）</p>
<p>此时 $r_{n-2}$ 和 $r_{n-1}$ 的约数就只有：$r_{n-1}$ 和 $r_{n-1}$ 的因数，所以他们的最大公约数就是 $r_{n-1}$！</p>
<p>所以 $r_{n-1}$ 就是 $a$ 和 $b$ 的最大公约数。（若 $r = 0$，则 $b$ 为最大公约数）</p>
<p>这个递推法写成c语言函数是这样的（比推导更简洁&hellip;）:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="kt">unsigned</span> <span class="kt">int</span> <span class="nf">Gcd</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">M</span><span class="p">,</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">Rem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span><span class="p">(</span><span class="n">N</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">        <span class="n">Rem</span> <span class="o">=</span> <span class="n">M</span> <span class="o">%</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">M</span> <span class="o">=</span> <span class="n">N</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">        <span class="n">N</span> <span class="o">=</span> <span class="n">Rem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">Rem</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>可以发现这里没有要求 <code>M&gt;=N</code>，这是因为如果那样，循环会自动交换它们的值。</p>
<blockquote>
<p>P.S. 此外，还有最小公倍数(Least Common Multiple (LCM))算法，详见 <a href="https://www.mathportal.org/calculators/numbers-calculators/gcd-lcm-calculator.php" target="_blank" rel="noopener noreffer">GCD and LCM calculator</a></p>
</blockquote>
]]></content></entry><entry><title type="html">我患上了阅读焦虑症</title><link href="https://thiscute.world/posts/reading-anxiety/"/><id>https://thiscute.world/posts/reading-anxiety/</id><author><name>ryan4yin</name></author><published>2017-03-07T12:39:00+08:00</published><updated>2017-03-07T12:39:00+08:00</updated><content type="html"><![CDATA[<p>生活总是在给你希望之时，再埋点伏笔。本来我以为进了大学，就是一个全新的世界了，我可以重新开始，只要我很努力很努力，一切困难都将不堪一击。</p>
<p>显然那个时候，我还不知道，<strong>现实不同于想象</strong>。</p>
<p>高三在高压下全线崩溃，因此对大学寄予了过多期望。但这期望同时也带来了更大的压力。</p>
<p>我患上了阅读焦虑症。</p>
<p>从进入大学的那一刻起，就开始疯狂地制定阅读计划，泡图书馆，看各种学习方法、读书方法、记忆方法、速读术之类的书籍，恨不得一目十行。</p>
<p>但是很快的，我就发现自己出了问题：我太想提升自己了，因此翻开书的第一页，就期盼着翻到最后一页，读书的愉悦，被对看完一本书的渴望冲淡了。更多的时候，感觉到的是还没把这本书看完的焦虑。</p>
<p>而且因为长时间全神贯注，<strong>一本书看不到一半，耐心也渐渐失去，于是翻页速度越来越快</strong>，这个时候所谓的“阅读”已经名存实亡了。</p>
<p>这样的阅读的结果，只是在读书量上徒然添加几个数字，于自我提升而言，却是收效甚微。我很明白这一点，但是明白和作出改变之间，隔着一道鸿沟，我怎么也跨不过去。明明知道松弛有度效率会更高，但是心理上的焦虑让我无法说服自己放下书本哪怕一分钟，直到自己的耐心消耗殆尽……</p>
<p>买了一大堆文学书放在柜头。可笑的是，大一整整一年，除了韩寒，我没看任何一本文学书超过半小时。“快速浏览”完十几本方法类书籍后，我开始阅读技术书籍。但是除了韩寒的书和几本技术书籍，阅读过程中的焦虑感从未远离我，这不仅降低了我的学习效率，更让我的倦怠期长了数倍(过度消耗精力)。其结果是，往往一本厚一点的书读上两三天，就有半个月会厌倦到不想碰它。</p>
<p>我能感觉到如果按着计划读书，我的成果绝不会差到现在这样。也想着有计划性一点，可是一看QQ，人家初三的小男孩已经学遍了高中数学、算法、初等数论、自然数学……网上认识的同龄人已经开始做神经网络了，知乎上一大群自学者也在努力攻克python/c/算法，我就停不下来，甚至平静下来做个计划都觉得浪费时间(实际上很明显这样带着焦虑阅读才是浪费时间)。</p>
<p><strong>迫切的想要成为那个“自己想要成为的人”，因此连基本的理性都无法保持。</strong></p>
<p>我想要的是从容、带着脑子的阅读，而不是这样走马观花，盲目追求量的阅读。</p>
<p>我又焦虑地打开知乎，不断搜索，然后写下这篇文章。</p>
]]></content></entry><entry><title type="html">少有人迹的校园</title><link href="https://thiscute.world/posts/quiet-and-peaceful-campus/"/><id>https://thiscute.world/posts/quiet-and-peaceful-campus/</id><author><name>ryan4yin</name></author><published>2017-02-18T06:03:09+08:00</published><updated>2017-02-18T06:03:09+08:00</updated><content type="html"><![CDATA[<!-- 遥远的歌 -->
<meting-js server="netease" type="song" id="418257688" theme="#448aff"></meting-js>
<p>2017年2月的18号，清晨6点。天还只是朦朦亮，当空挂着半边弯月，一颗不知名的星星(大约是大角星)缀在月的旁边。
还没开学，学校几乎看不到人。</p>
<p>南食堂的一楼已亮起了灯，鸟儿们开始鸣叫个不停，可以听出有好几种鸟叫声。</p>
<p>易海仍是风平浪静。</p>
<p>我背着书包，拖着皮箱，耳边最清晰的声音便是皮箱轮胎与地面的摩擦声。</p>
<p>手机随便放起一首歌，恰好是《遥远的歌》。这首歌真是应景呢，逝去的时光遥远得无法触及，自己也离家千里，未来更是难以捉摸。</p>
<p>我还会记得吗？记得这个我印象中，最宁静安详的，安徽建筑大学。</p>]]></content></entry><entry><title type="html">忽而假末</title><link href="https://thiscute.world/posts/the-holiday-is-coming-to-an-end/"/><id>https://thiscute.world/posts/the-holiday-is-coming-to-an-end/</id><author><name>ryan4yin</name></author><published>2017-02-06T20:17:55+08:00</published><updated>2017-02-06T20:17:55+08:00</updated><content type="html"><![CDATA[<meting-js server="netease" type="song" id="415086030" theme="#448aff"></meting-js>
<p>上个暑假，刚刚从低谷爬出来，那时候整个人散发着一股子向上的气息，豪情万丈，甚至感染了周围的亲朋好友。那个时候，满以为以后的挫折都不能阻挡我的脚步。</p>
<p>可是，到底为什么，现在又变成了这个样子了呢？人生这样的东西，总是出人意料，以至于怎么也猜不透。</p>
<p>十二月十四，我度过了我的十九岁生日，现在应该正是那所谓的青春将逝未逝之时。而我的青春应该最辉煌的时候，我在干什么呢？</p>
<p>我在翻山越岭。</p>
<p>上山时一路坎坷，累的要死不活的。陡然间萌生退意，心就在不断挣扎。就在却意战胜壮志之时，忽然间天地开阔，才发觉自己已然站在了大山之巅，于是一切痛苦尽皆远去，心也变得如这天地一般开阔。这个时候自然豪情万丈，看山山美，看水水秀。想当然的就觉得后面的山岭有再多的阻碍，也不能阻挡这个见过如此美景的登山人了。</p>
<p>可是事与愿违，山岭就像时间一样看不到边，翻过了一座又是一座，这又是一种更大的痛苦。这个登山人身心俱疲，只好万事随缘，继续一脚深，一脚浅的往那无尽山岭行去。</p>
<p>最近看了是枝裕和的电影《比海更深》，“我的人生到底出了什么差错？” 这样一个问句，道出了多少辛酸苦辣……想起了以前写过一篇文章，标题是《对不起，我没有成为你想成为的那个人》。</p>
<p>理想与现实之间仿佛总隔着一道鸿沟。</p>
<p>现在没有了万丈豪情，不再敢说“未来将是一片坦途”；也没有绝望到要写“我的人生到底出了什么差错？”这样的句子，那还是用我最喜欢的那个模棱两可的四字词作结吧。</p>
<blockquote>
<p>且行且寻</p>
</blockquote>
]]></content></entry><entry><title type="html">Python 视频转字符动画（一）60 行代码</title><link href="https://thiscute.world/posts/video2chars-1-basics/"/><id>https://thiscute.world/posts/video2chars-1-basics/</id><author><name>ryan4yin</name></author><published>2016-10-18T08:37:02+08:00</published><updated>2022-08-13T14:16:02+08:00</updated><content type="html"><![CDATA[<blockquote>
<p>本文最初于 2016-10-18 发表在<a href="http://www.cnblogs.com/kirito-c/p/5971988.html" target="_blank" rel="noopener noreffer">博客园</a>，2022-08-13 搬迁至 <a href="https://thiscute.world" target="_blank" rel="noopener noreffer">https://thiscute.world</a></p>
</blockquote>
<p>昨晚我朋友 @三十六咲 跟我说在网上看到了别人做的视频转字符动画，觉得很厉害，我于是也打算玩玩。今天中午花时间实现了这样一个小玩意。
顺便把过程记录在这里。</p>
<blockquote>
<p>注：最新版使用了画布方式实现，和本文相比改动非常大，如果对旧版本的实现没啥兴趣，可以直接移步 <a href="https://github.com/ryan4yin/video2chars/blob/master/doc/README-zh-cn.md" target="_blank" rel="noopener noreffer">video2chars</a>，它的效果动画见 <a href="https://www.bilibili.com/video/av30469888/" target="_blank" rel="noopener noreffer">极乐净土</a>。新版本的核心代码不算注释70行不到，功能更强大。</p>
</blockquote>
<h3 id="效果" class="headerLink">
    <a href="#%e6%95%88%e6%9e%9c" class="header-mark"></a>效果</h3><p>先上效果，来点动力。</p>
<p>源视频 <a href="https://www.bilibili.com/video/av706/" target="_blank" rel="noopener noreffer">【東方】Bad Apple!! ＰＶ【影絵】</a> 转换后的效果如下：</p>
<div class="video-shortcode">
  <video width="640" height="480" preload="auto" controls autoplay="true" loop="true">
    <source src="/videos/video2chars-1-basics/video2chars-cli-badapple.webm" type="video/webm">
    There should have been a video here but your browser does not seem
    to support it.
  </video>
</div>

<h3 id="步骤" class="headerLink">
    <a href="#%e6%ad%a5%e9%aa%a4" class="header-mark"></a>步骤</h3><ol>
<li>将视频转化为一帧一帧的图片</li>
<li>把图片转化为字符画</li>
<li>按顺序播放字符画</li>
</ol>
<h3 id="一准备" class="headerLink">
    <a href="#%e4%b8%80%e5%87%86%e5%a4%87" class="header-mark"></a>一、准备</h3><h4 id="1-模块" class="headerLink">
    <a href="#1-%e6%a8%a1%e5%9d%97" class="header-mark"></a>1. 模块</h4><p>这个程序需要用到这样几个模块:</p>
<ol>
<li>opencv-python # 用来读取视频和图片</li>
<li>numpy # opencv-python 依赖于它</li>
</ol>
<p>准备阶段，首先安装依赖：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pip3 install numpy opencv-python
</span></span></code></pre></td></tr></table>
</div>
</div><p>然后新建python代码文档，在开头添加上下面的导入语句</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#-*- coding:utf-8 -*-</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># numpy 是一个矩阵运算库，图像处理需要用到。</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>
</span></span></code></pre></td></tr></table>
</div>
</div><h4 id="2-材料" class="headerLink">
    <a href="#2-%e6%9d%90%e6%96%99" class="header-mark"></a>2. 材料</h4><p>材料就是需要转换的视频文件了，我这里用的是<a href="https://github.com/ryan4yin/video2chars/blob/v0.3/resources/BadApple.mp4" target="_blank" rel="noopener noreffer">BadApple.mp4</a>，下载下来和代码放到同一目录下
你也可以换成自己的，建议是学习时尽量选个短一点的视频，几十秒就行了，不然调试起来很痛苦。（或者自己稍微修改一下函数，只转换一定范围、一定数量的帧。）
此外，要选择对比度高的视频。否则的话，就需要彩色字符才能有足够好的表现，有时间我试试。</p>
<h3 id="二按帧读取视频" class="headerLink">
    <a href="#%e4%ba%8c%e6%8c%89%e5%b8%a7%e8%af%bb%e5%8f%96%e8%a7%86%e9%a2%91" class="header-mark"></a>二、按帧读取视频</h3><p>现在继续添加代码，实现第一步：按帧读取视频。
下面这个函数，接受视频路径和字符视频的尺寸信息，返回一个img列表，其中的img是尺寸都为指定大小的灰度图。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#导入 opencv</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">cv2</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">video2imgs</span><span class="p">(</span><span class="n">video_name</span><span class="p">,</span> <span class="n">size</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    :param video_name: 字符串, 视频文件的路径
</span></span></span><span class="line"><span class="cl"><span class="s2">    :param size: 二元组，(宽, 高)，用于指定生成的字符画的尺寸
</span></span></span><span class="line"><span class="cl"><span class="s2">    :return: 一个 img 对象的列表，img对象实际上就是 numpy.ndarray 数组
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">img_list</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 从指定文件创建一个VideoCapture对象</span>
</span></span><span class="line"><span class="cl">    <span class="n">cap</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">VideoCapture</span><span class="p">(</span><span class="n">video_name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 如果cap对象已经初始化完成了，就返回true，换句话说这是一个 while true 循环</span>
</span></span><span class="line"><span class="cl">    <span class="k">while</span> <span class="n">cap</span><span class="o">.</span><span class="n">isOpened</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># cap.read() 返回值介绍：</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#   ret 表示是否读取到图像</span>
</span></span><span class="line"><span class="cl">        <span class="c1">#   frame 为图像矩阵，类型为 numpy.ndarry.</span>
</span></span><span class="line"><span class="cl">        <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">cap</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">ret</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 转换成灰度图，也可不做这一步，转换成彩色字符视频。</span>
</span></span><span class="line"><span class="cl">            <span class="n">gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">cv2</span><span class="o">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># resize 图片，保证图片转换成字符画后，能完整地在命令行中显示。</span>
</span></span><span class="line"><span class="cl">            <span class="n">img</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">interpolation</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">INTER_AREA</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># 分帧保存转换结果</span>
</span></span><span class="line"><span class="cl">            <span class="n">img_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 结束时要释放空间</span>
</span></span><span class="line"><span class="cl">    <span class="n">cap</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">img_list</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>写完后可以写个main方法测试一下，像这样：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">imgs</span> <span class="o">=</span> <span class="n">video2imgs</span><span class="p">(</span><span class="s2">&#34;BadApple.mp4&#34;</span><span class="p">,</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">48</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">imgs</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>如果运行没报错，就没问题
代码里的注释应该写得很清晰了，继续下一步。</p>
<h3 id="三图像转化为字符画" class="headerLink">
    <a href="#%e4%b8%89%e5%9b%be%e5%83%8f%e8%bd%ac%e5%8c%96%e4%b8%ba%e5%ad%97%e7%ac%a6%e7%94%bb" class="header-mark"></a>三、图像转化为字符画</h3><p>视频转换成了图像，这一步便是把图像转换成字符画
下面这个函数，接受一个img对象为参数，返回对应的字符画。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 用于生成字符画的像素，越往后视觉上越明显。。这是我自己按感觉排的，你可以随意调整。</span>
</span></span><span class="line"><span class="cl"><span class="n">pixels</span> <span class="o">=</span> <span class="s2">&#34; .,-&#39;`:!1+*abcdefghijklmnopqrstuvwxyz&lt;&gt;()\/</span><span class="si">{}</span><span class="s2">[]?234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ%&amp;@#$&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">img2chars</span><span class="p">(</span><span class="n">img</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    :param img: numpy.ndarray, 图像矩阵
</span></span></span><span class="line"><span class="cl"><span class="s2">    :return: 字符串的列表：图像对应的字符画，其每一行对应图像的一行像素
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 灰度是用8位表示的，最大值为255。</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 这里将灰度转换到0-1之间</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 使用 numpy 的逐元素除法加速，这里 numpy 会直接对 img 中的所有元素都除以 255</span>
</span></span><span class="line"><span class="cl">    <span class="n">percents</span> <span class="o">=</span> <span class="n">img</span> <span class="o">/</span> <span class="mi">255</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 将灰度值进一步转换到 0 到 (len(pixels) - 1) 之间，这样就和 pixels 里的字符对应起来了</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 同样使用 numpy 的逐元素算法，然后使用 astype 将元素全部转换成 int 值。</span>
</span></span><span class="line"><span class="cl">    <span class="n">indexes</span> <span class="o">=</span> <span class="p">(</span><span class="n">percents</span> <span class="o">*</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">pixels</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span><span class="o">.</span><span class="n">astype</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">int</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># 要注意这里的顺序和 之前的 size 刚好相反（numpy 的 shape 返回 (行数、列数)）</span>
</span></span><span class="line"><span class="cl">    <span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">=</span> <span class="n">img</span><span class="o">.</span><span class="n">shape</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">line</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">width</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">index</span> <span class="o">=</span> <span class="n">indexes</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 添加字符像素（最后面加一个空格，是因为命令行有行距却没几乎有字符间距，用空格当间距）</span>
</span></span><span class="line"><span class="cl">            <span class="n">line</span> <span class="o">+=</span> <span class="n">pixels</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&#34; &#34;</span>
</span></span><span class="line"><span class="cl">        <span class="n">res</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">res</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>上面的函数只接受一帧为参数，一次只转换一帧，可我们需要的是转换所有的帧，所以就再把它包装一下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">imgs2chars</span><span class="p">(</span><span class="n">imgs</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">video_chars</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="n">imgs</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">video_chars</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">img2chars</span><span class="p">(</span><span class="n">img</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">video_chars</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>好了，现在我们可以测试一下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">imgs</span> <span class="o">=</span> <span class="n">video2imgs</span><span class="p">(</span><span class="s2">&#34;BadApple.mp4&#34;</span><span class="p">,</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">48</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">video_chars</span> <span class="o">=</span> <span class="n">imgs2chars</span><span class="p">(</span><span class="n">imgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">video_chars</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">10</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>没报错的话，就可以下一步了。(这一步比较慢，测试阶段建议用短一点的视频，或者稍微改一下，只处理前30秒之类的)</p>
<h3 id="四播放字符视频" class="headerLink">
    <a href="#%e5%9b%9b%e6%92%ad%e6%94%be%e5%ad%97%e7%ac%a6%e8%a7%86%e9%a2%91" class="header-mark"></a>四、播放字符视频</h3><p>写了这么多代码，现在终于要出成果了。现在就是最激动人心的一步：播放字符画了。
同样的，我把它封装成了一个函数。下面这个函数接受一个字符画的列表并播放。</p>
<ol>
<li>通用版（<strong>使用 shell 的 clear 命令清屏，但是因为效率不高，可能会有一闪一闪的问题</strong>）
这个版本适用于 linux/windows</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 导入需要的模块</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">subprocess</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">play_video</span><span class="p">(</span><span class="n">video_chars</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    播放字符视频
</span></span></span><span class="line"><span class="cl"><span class="s2">    :param video_chars: 字符画的列表，每个元素为一帧
</span></span></span><span class="line"><span class="cl"><span class="s2">    :return: None
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 获取字符画的尺寸</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">video_chars</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">len</span><span class="p">(</span><span class="n">video_chars</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">pic_i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">video_chars</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 显示 pic_i，即第i帧字符画</span>
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">line_i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 将pic_i的第i行写入第i列。</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="n">video_chars</span><span class="p">[</span><span class="n">pic_i</span><span class="p">][</span><span class="n">line_i</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mi">24</span><span class="p">)</span>  <span class="c1"># 粗略地控制播放速度。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># 调用 shell 命令清屏</span>
</span></span><span class="line"><span class="cl">        <span class="n">subprocess</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s2">&#34;clear&#34;</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="kc">True</span><span class="p">)</span>  <span class="c1"># linux 版</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># subrpocess.run(&#34;cls&#34;, shell=True)  # cmd 版，windows 系统请用这一行。</span>
</span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li>Unix系版本（<strong>使用了只支援 unix 系 的 curses 库，比 clear 更流畅</strong>）</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 导入需要的模块</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">time</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">curses</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">play_video</span><span class="p">(</span><span class="n">video_chars</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    播放字符视频，
</span></span></span><span class="line"><span class="cl"><span class="s2">    :param video_chars: 字符画的列表，每个元素为一帧
</span></span></span><span class="line"><span class="cl"><span class="s2">    :return: None
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="c1"># 获取字符画的尺寸</span>
</span></span><span class="line"><span class="cl">    <span class="n">width</span><span class="p">,</span> <span class="n">height</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">video_chars</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">len</span><span class="p">(</span><span class="n">video_chars</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># 初始化curses，这个是必须的，直接抄就行</span>
</span></span><span class="line"><span class="cl">    <span class="n">stdscr</span> <span class="o">=</span> <span class="n">curses</span><span class="o">.</span><span class="n">initscr</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">curses</span><span class="o">.</span><span class="n">start_color</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># 调整窗口大小，宽度最好略大于字符画宽度。另外注意curses的height和width的顺序</span>
</span></span><span class="line"><span class="cl">        <span class="n">stdscr</span><span class="o">.</span><span class="n">resize</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">for</span> <span class="n">pic_i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">video_chars</span><span class="p">)):</span>
</span></span><span class="line"><span class="cl">            <span class="c1"># 显示 pic_i，即第i帧字符画</span>
</span></span><span class="line"><span class="cl">            <span class="k">for</span> <span class="n">line_i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">                <span class="c1"># 将pic_i的第i行写入第i列。(line_i, 0)表示从第i行的开头开始写入。最后一个参数设置字符为白色</span>
</span></span><span class="line"><span class="cl">                <span class="n">stdscr</span><span class="o">.</span><span class="n">addstr</span><span class="p">(</span><span class="n">line_i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">video_chars</span><span class="p">[</span><span class="n">pic_i</span><span class="p">][</span><span class="n">line_i</span><span class="p">],</span> <span class="n">curses</span><span class="o">.</span><span class="n">COLOR_WHITE</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">stdscr</span><span class="o">.</span><span class="n">refresh</span><span class="p">()</span>  <span class="c1"># 写入后需要refresh才会立即更新界面</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mi">24</span><span class="p">)</span>  <span class="c1"># 粗略地控制播放速度(24帧/秒)。更精确的方式是使用游戏编程里，精灵的概念</span>
</span></span><span class="line"><span class="cl">    <span class="k">finally</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1"># curses 使用前要初始化，用完后无论有没有异常，都要关闭</span>
</span></span><span class="line"><span class="cl">        <span class="n">curses</span><span class="o">.</span><span class="n">endwin</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>好，接下来就是见证奇迹的时刻
<strong>不过开始前要注意，字符画的播放必须在shell窗口下运行，在pycharm里运行会看到一堆无意义字符。另外播放前要先最大化shell窗口</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">imgs</span> <span class="o">=</span> <span class="n">video2imgs</span><span class="p">(</span><span class="s2">&#34;BadApple.mp4&#34;</span><span class="p">,</span> <span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="mi">48</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="n">video_chars</span> <span class="o">=</span> <span class="n">imgs2chars</span><span class="p">(</span><span class="n">imgs</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">input</span><span class="p">(</span><span class="s2">&#34;`转换完成！按enter键开始播放&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">play_video</span><span class="p">(</span><span class="n">video_chars</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>写完后，开个shell，最大化窗口，然后键入（文件名换成你的）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">python3 video2chars.py
</span></span></code></pre></td></tr></table>
</div>
</div><p>可能要等很久。我使用示例视频大概需要 12 秒左右。看到提示的时候，按回车，开始播放！</p>
<p>**这样就完成了视频到字符动画的转换, 除去注释, 大概七十行代码的样子. 稍微超出了点预期, 不过效果真是挺棒的. **</p>
<h3 id="五进一步优化" class="headerLink">
    <a href="#%e4%ba%94%e8%bf%9b%e4%b8%80%e6%ad%a5%e4%bc%98%e5%8c%96" class="header-mark"></a>五、进一步优化</h3><p>到了这里，核心功能基本都完成了。
不过仔细想想，其实还有很多可以做的：</p>
<ul>
<li>能不能手动指定要转换的区间、帧率？</li>
<li>每次转换都要很久的时间，能不能边转换边播放？或者转换后把数据保存起来，下次播放时，就直接读缓存。</li>
<li>为啥我的字符动画没有声音，看无声电影么？</li>
<li>视频的播放速度能不能精确控制？</li>
<li>能不能用彩色字符？</li>
</ul>
<p>这些东西，就不写这里了，再写下去，你们肯定要说我这标题是骗人了哈哈。
所以如果有兴趣的，请移步这个系列的下一篇：<a href="https://thiscute.world/posts/video2chars-2/" target="_blank" rel="noopener noreffer">视频转字符动画（二）进阶</a></p>
<h3 id="六总结" class="headerLink">
    <a href="#%e5%85%ad%e6%80%bb%e7%bb%93" class="header-mark"></a>六、总结</h3><p>完整代码见 <a href="https://github.com/ryan4yin/video2chars/blob/v0.3/src/video2chars.py" target="_blank" rel="noopener noreffer">video2chars.py</a>，要注意的是代码库的代码，包含了第二篇文章的内容（音频、缓存、帧率控制等），而且相对这篇文章也有一些小改动（目的是方便使用，但是稍微增加了点代码量，所以改动没有写在这篇文章里了）
想运行起来的话，还是建议跟着文章做。。</p>
<h3 id="七参考" class="headerLink">
    <a href="#%e4%b8%83%e5%8f%82%e8%80%83" class="header-mark"></a>七、参考</h3><ul>
<li><a href="https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_gui/py_video_display/py_video_display.html#display-video" target="_blank" rel="noopener noreffer">Opencv-Python Tutorials - Video Playing</a></li>
<li><a href="https://www.shiyanlou.com/courses/370" target="_blank" rel="noopener noreffer">Python 图片转字符画</a></li>
</ul>
<blockquote>
<p>允许转载, 但是要求附上来源链接: <a href="/posts/video2chars-1-basics/" rel="">Python 视频转字符动画（一）60 行代码</a></p>
</blockquote>
]]></content></entry></feed>