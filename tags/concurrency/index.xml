<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Concurrency - 标签 - This Cute World</title><link>https://thiscute.world/tags/concurrency/</link><description>Concurrency - 标签 - This Cute World</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Fri, 15 Mar 2019 22:34:00 +0800</lastBuildDate><atom:link href="https://thiscute.world/tags/concurrency/" rel="self" type="application/rss+xml"/><item><title>Python 并发编程：PoolExecutor 篇</title><link>https://thiscute.world/posts/python-concurrency-pool-executor/</link><pubDate>Fri, 15 Mar 2019 22:34:00 +0800</pubDate><author><name>於清樂</name><uri>https://thiscute.world/authors/ryan4yin/</uri></author><guid>https://thiscute.world/posts/python-concurrency-pool-executor/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/python-concurrency-pool-executor/python-concurrency.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，如有疏漏，还请指正。</p>

</blockquote><p>使用多线程（threading）和多进程（multiprocessing）完成常规的并发需求，在启动的时候
start、join 等步骤不能省，复杂的需要还要用 1-2 个队列。随着需求越来越复杂，如果没有良好的设计和抽象这部分的功能层次，代码量越多调试的难度就越大。</p>]]></description></item><item><title>进程线程协程与并发并行</title><link>https://thiscute.world/posts/process-thread-coroutines-concurrency-parallelism/</link><pubDate>Tue, 23 Jan 2018 16:39:00 +0800</pubDate><author><name>於清樂</name><uri>https://thiscute.world/authors/ryan4yin/</uri></author><guid>https://thiscute.world/posts/process-thread-coroutines-concurrency-parallelism/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/process-thread-coroutines-concurrency-parallelism/concurrency-vs-parallelism.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，不保证正确。</p>

</blockquote><h3 id="一进程-process并行运算分布式" class="headerLink">
    <a href="#%e4%b8%80%e8%bf%9b%e7%a8%8b-process%e5%b9%b6%e8%a1%8c%e8%bf%90%e7%ae%97%e5%88%86%e5%b8%83%e5%bc%8f" class="header-mark"></a>一、进程 Process：（并行运算，分布式）</h3><p>每一个进程，都可以看作是一个完整的 Program，它有自己完全独立的内容。不与其他进程直接共享数据。（一个工作(job)可以由多个 process 完成，例如电脑上的qq/360就会有好几个进程，这种程序可能会有一个守护进程，当主进程挂掉，它会自动重启主进程。）</p>]]></description></item></channel></rss>