<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>总结 - 标签 - Ryan4Yin's Space</title><link>https://ryan4yin.space/tags/%E6%80%BB%E7%BB%93/</link><description>总结 - 标签 - Ryan4Yin's Space</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaoyin_c@qq.com (ryan4yin)</managingEditor><webMaster>xiaoyin_c@qq.com (ryan4yin)</webMaster><lastBuildDate>Sat, 06 Feb 2021 08:46:46 +0800</lastBuildDate><atom:link href="https://ryan4yin.space/tags/%E6%80%BB%E7%BB%93/" rel="self" type="application/rss+xml"/><item><title>我在创业公司做技术一年多的一点体会</title><link>https://ryan4yin.space/posts/end-of-the-first-round/</link><pubDate>Sat, 06 Feb 2021 08:46:46 +0800</pubDate><author>作者</author><guid>https://ryan4yin.space/posts/end-of-the-first-round/</guid><description><![CDATA[<blockquote>
<p>本文可能充斥着学生型思维，请见谅。</p>
</blockquote>
<blockquote>
<p>2021-09-04 更新：在新公司认识到了自己技术、方法论、思维模式等多方面的不足。
这篇文章的部分内容让我觉得有点羞耻&hellip;不过就这样吧，毕竟这确实是我当时的所思所想&hellip;
目前一直在学习新公司的工作文化、方法论，但是不太顺利，总有种做数学大题的感觉——「老师讲的我都懂，但是实际做题时就是意识不到应该这么做」。
最近感觉想通了一些——「一是以前的思维模式还存在惯性，二是做事的方法不够科学」，因此调整了工作方法，每周会专门花一些时间去思考「关键问题」、「如何解决」，而不是只盯这着手上这点事。
工作真正的目的是解决「关键问题」，实现「关键目标」，而不是把排到手上的事做完。很可能做完你手上的事仍然是不够的，或者你手上的事情是完全没必要的！
这种工作方式在极客时间的《10x程序员工作法》中讲得很详细，我最近也在学习这个专栏。</p>
</blockquote>
<h2 id="人有悲欢离合月有阴晴圆缺">人有悲欢离合，月有阴晴圆缺</h2>
<p>今年年底的时候，自己心思摇摆不定，这影响到了我的工作，顺势就向公司提出了离职。</p>
<p>这两三天和老板、技术经理，还包括公司比较强的同事们，都做了一番沟通。
这一是公司希望我能够认同公司的路线和理念，跟着一条道往前走。二呢我也很想知道，老板、技术经理、还有技术骨干们，为什么能这么坚定不疑？为什么这么拼？</p>
<p>结果是我和公司都发现，我们不是一路人，观念存在冲突，于是火速离职。办完交接，签完离职协议，拿着离职协议和离职证明，光速撤退。</p>
<p>这是我毕业后的第一份工作，2019 年 6 月底入职，在公司呆了一年多，学到了很多东西，绝不仅仅只是技术。因此我觉得自己有必要做一个技术以外的总结。</p>
<p>任何一家公司都有好有坏，但是按照惯例，这篇文章会避而不谈公司不好的东西。公司的名称呢，这里就用 W 来代替吧。</p>
<h2 id="自我认识">自我认识</h2>
<p>我刚进 W 公司时，是一个刚毕业的小白，只是兴趣使然喜欢技术。因为专业不同，周围也接触不到多少搞技术的，就比较「独」。</p>
<p>在 W 公司我获得了和一群有上进心的人们互相协作的机会，大家在一步一步往前走的感觉，让我在职期间一直非常快乐。</p>
<p>我们的技术经理也给了 DevOps 团队足够的自由，甚至是鼓励我们去探索、尝试新技术。这是我这一年多 DevOps 这个方向进步这么快的最大原因。</p>
<p>然后在和技术经理、同事们坦诚沟通的时候，我也了解到了<strong>自己的能力，不仅仅在技术。我对公司的价值，也绝不仅仅在技术。</strong>
这是我以前从来没有想过的，我喜欢技术，而且找工作发现职位要求也都是写的技术，我真的就一直以为技术就是一切。</p>
<blockquote>
<p>这里我尤其要感谢技术经理，是他帮我把自己对公司的价值和不足分析得如此透彻。</p>
</blockquote>
<p>下面是我结合经理和同事对我的评价，还有自己的想法，列出的一些评判比较：</p>
<ul>
<li><strong>理解能力、洞察能力</strong>：在公司，我这方面的能力是拔尖的。和人交流，我经常能很快地把握住核心。</li>
<li><strong>表达能力</strong>：我的表达能力也是公司里拔尖的。同事跟我讲，听我描述一条鱼，他能清晰地看到鱼的骨头。
<ul>
<li>其实我日常写博客时，经常觉得自己表达地不够好，很多人的文章就比我写得更好。不同的角度看到的东西真的区别很大，感谢我的同事们。</li>
</ul>
</li>
<li><strong>探索能力</strong>：我日常喜欢逛 github，翻 CNCF Landscape，我的兴趣驱动着自己去探索各种新技术，思考它们的优劣。
<ul>
<li>但是我的大部分同事们都不是这样的，很多同事只读中文文档和博客，英文也必须依赖不怎么靠谱的翻译。
另外他们工期紧业务多，也没我们 DevOps 这边这么多的时间去探索试用新技术。</li>
<li>因此，我的探索能力要强于大多数同事。</li>
</ul>
</li>
<li><strong>全局思考能力</strong>: 放眼全局、思考未来，在众多选择中能够并且敢于做出决策。我目前还很缺乏这样的能力。
<ul>
<li>说到底我目前还是个普通人的思路，没有把自己放在决策者的位置上去思考。</li>
<li>其次呢，我的知识面还太窄，导致我根本看不清好坏，很多时候就无法独立做出决策。我需要扩大自己的知识面。</li>
</ul>
</li>
<li><strong>技术能力</strong>：我的技术能力在公司里能评到 80 分吧。我技术不算好，基础薄弱，但是在我们一个小创业公司内部比较，能到 80 分。</li>
<li><strong>管理能力</strong>：DevOps 就两三人，因为我具有上面这些能力，矮个子里拔高的，理所当然地我成了领头的。但是性格使然，我管理能力是公司最差的&hellip;</li>
<li><strong>创业思维</strong>：公司是创业公司，技术骨干们都是创业思维。但是说实话我从来没想过要去创业，不愿意投入太多。这也是我离职的原因。</li>
</ul>
<p>因此，技术经理认为，我可能更适合当讲师哈哈。</p>
<p>在公司也确实给同事们讲过几次课，能够看到同事们高兴地鼓掌，告诉我「讲得可以」，我就很开心。这种心情就和有人在我博客里评论「感谢，很有帮助」是一样的。</p>
<h2 id="我的收获">我的收获</h2>
<p>首先技术就不用说了，从我这一年多的博客文章就能看到，我的技术进步相当大。</p>
<p>还有就是提升了对自我的认识，这一点前面也已经阐述过了。</p>
<p>那其他方面我收获了啥呢？大概有下面这些：</p>
<ol>
<li>我发现，技术经理几十年的技术经验和生活经历，能让他不了解的技术领域中，也能快速找出真正有价值的东西。——<strong>经验和阅历给了他强大的洞察能力</strong>。</li>
<li>技术产品中最有价值的东西，也最难看透的东西，并不是技术本身，而是理念、抽象。比如 DevOps、基础设施即代码、云计算、开源。
<ul>
<li>这很难，但是能领先所有人，最先发现这些宏观概念的价值，并押注的人，就能获得巨大的先手优势。</li>
<li>但是「世人大都愚昧」，或者说「太过聪明」，导致这类创业团队可能和社会格格不入。不论成功失败，这类永远是少数人。</li>
</ul>
</li>
<li>理性的沟通是好的，但是有时候情绪化的沟通反而更有效果。
<ul>
<li>我们技术经理是一个超级理性的人，但是我和他沟通，他的想法并不能很好的传达给我。反而情绪化的老板跟我沟通，我更能感同身受。</li>
</ul>
</li>
<li>我认识了形形色色的人，公司的同事、领导，很多都有值得我学习的地方。有些感悟
<ul>
<li>富二代不在意钱，没普通人这么斤斤计较，只在意公司氛围，以及自己能做什么。反而更愿意付出更多，能够乐在其中，也更容易成功。创业公司大概很喜欢这类人。</li>
<li>世界上大部分人都是普通人。大众认同的观点，不一定就是正确的观点。大众观点的变化也能体现出社会的变迁。
<ul>
<li>比如当年大跃进全民的狂热，和现在公司倡导 996，社会舆论则积极反抗。公司和民众站在了对立面。</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>除了上面这些虚的，还有更实在的：</p>
<ol>
<li><strong>快乐</strong>：经理为人相当好，同事之间合作大都也很愉快，人事小姐姐超级专业，无微不至地照顾我们。在职期间我收获了相当多的快乐。</li>
<li><strong>自信心</strong>：我进公司之前，作为一个跨专业的小白，非常没有底气，而且在学校的时候整个人非常颓废。但是在 W 公司，我学到了技术，工作乐在其中，还收获了同事和领导的肯定。我建立起了自信心。</li>
<li><strong>Money</strong>: 虽然不多，但是我好歹也是个有些闲钱了的人hhh</li>
</ol>
<h2 id="未来">未来</h2>
<p>毕业后，第一份工作就这样结束了。有点仓促，因为很出乎意料，但细想下来也是情理之中。</p>
<p>下面就是过年了，过年呢，就照着既有的计划来吧，继续提升下技术能力。<strong>至少对目前的我而言，技术还是我的能力基础和找工作的最大依仗，其他能力目前还是在围绕技术成长</strong>。</p>
<p>年后准备找下一份工作。这一次，我希望能多走一走，看一看，不着急做决定。</p>
<p>我觉得自己的眼界还太狭窄了，我对世界还很缺乏了解。以至于很多东西，我根本无法作出评判。</p>
<p>既然现在跳出了一座我的「围城」，自然要去多看看，外面的世界是个啥样子。</p>
<p>或许也没什么区别？那也得看过才能下结论啊（笑</p>
<h2 id="文末">文末</h2>
<p>文章的最后，祝大家、也祝我自己在 2021 年里——</p>
<blockquote>
<p>拆破玉笼飞彩凤，顿开金锁走蛟龙。</p>
</blockquote>
]]></description></item><item><title>2020 年年终总结</title><link>https://ryan4yin.space/posts/2020-summary/</link><pubDate>Sat, 12 Dec 2020 23:45:00 +0800</pubDate><author>作者</author><guid>https://ryan4yin.space/posts/2020-summary/</guid><description><![CDATA[<h2 id="闲言碎语">闲言碎语</h2>
<p>一晃一年又过去了，今年可真是魔幻的一年，口罩带了一年没能摘下来，美国疫情感染人数 1500 万。</p>
<p>上面这段话要是让去年的我看到了，没准都以为今年真的生化危机了hhh&hellip;</p>
<p>言归正传，从去年 6 月底入职，到现在有一年半了，这一年半学到的东西真的非常多，完全重塑了我的技术栈。现在我的整个技术栈，基本都是围绕着云原生这一块发展了。</p>
<h2 id="活动">活动</h2>
<p>今年也参加了几个技术沙龙，有些收获，但是没去年那么新奇了，主要是很多东西自己已经懂了hhh。大概有这么几个活动：</p>
<ol>
<li>2019 年腾讯蓝鲸第5届运维技术沙龙：在深圳腾讯大厦参加的，点心和咖啡很棒，讲的东西里，腾讯自己分享的「研发运维一体化平台」比较有收获，我收藏了那一份 PPT</li>
<li>Rancher - 企业云原生的探索与落地：去年参加 Rancher 的沙龙觉得很高大上，因为自己很多东西都不懂。但是今年来听，明显就感觉他们讲的很基础，对我没什么价值了。也侧面说明我确实进步了非常多哈哈。</li>
<li>2020 PyconChina 深圳场：额，也觉得没什么干货，好几个都是在推销自家的产品（Azure AI 平台和一个 Django 写的低代码平台），有个讲 Nix 包管理的大佬但是没讲好，后面我们就直接溜了&hellip;</li>
</ol>
<p>另外就是，今年心血来潮买了四张 Live House 的演出票，体验下来觉得钱花得很值，给我充值了不少正能量。</p>
<ol>
<li>景德镇文艺复兴《小歌行》：这是我超级喜欢的一个乐队，演出效果超棒！听到了完整的故事，而且见到了九三姑娘本人，太高兴了！</li>
<li>徐海俏 - 游离片刻：这位歌手我之前其实没接触过，但是听了下她的《空》发现很不错很帅气，就买了。但是整场下来感觉俏俏状态不佳，有点唱不动的感觉。中场问歌迷们有没有带野格酒，末了又问深圳现在能游泳么哈哈，是个很随性的歌手。后面可能还真游泳去了。</li>
<li>夏小虎 - 逝年：这是个民谣歌手，以前上大学的时候听过，只有吉他和人声，其实是有些伤感的歌。因为我最近状态很好，我去之前还担心氛围不适合我。然后夏小虎说开心最重要，带了个乐队来伴奏，架子鼓就是灵魂，整个演出都因鼓点而欢快了起来。效果也非常棒！</li>
<li>时光胶囊乐队：这也是一个国风后摇乐队，在一个深圳福田一个小酒吧「红糖罐上步店」演出的，比较简陋，人也不多，就四五十人的样子（出乎意料）。但是演出效果很棒，《旅途》《忆长安》《磐石》都非常好听。尤其是在这样的场合唱《我不知道你的名字》，挺有感触的。</li>
</ol>
<h2 id="技术能力总结">技术能力总结</h2>
<p>今年我的工作重点有这么几个：</p>
<ol>
<li>重构及维护 CI/CD 代码，让它能在多个产品线上复用</li>
<li>云上环境管理：今年熟悉了阿里云这一套东西，并且用上了自动化工具对云上环境进行管理。
<ul>
<li>一开始是使用 terraform，但是 terraform 的 hcl 语法不够灵活，最近切换到了 pulumi+python，不得不说真香。目前云上的资源及配置 95% 都完全用 pulumi 管理了（还剩大概 5% 因为各种原因，需要手动配置）。</li>
</ul>
</li>
<li>kubernetes云原生: 今年我在这个领域的进步最大，熟悉了 k8s/istio/flagger/vault/prometheus/helm/traefik 等等。不过目前这里面大部分工具还停留在「会用」的状态。</li>
<li>服务器虚拟化系统从 vSphere 切换到 PVE
<ul>
<li>VMware 的 vCenter 吃的资源太多，而且还不能自动扩缩容硬盘，Python SDK 也超难用。因此我在公司尝试使用 PVE 替换 vSphere 这一套，效果很不错。</li>
<li>PVE+pulumi/terraform+cloudinit 能实现自动化部署虚拟机，自动配置网络、账号及SSH密钥、自动扩缩容硬盘，非常方便！</li>
<li>而且 PVE 不收费，去中心化，一套用下来舒服太多了。只是 pve+cloud-init 门槛稍微高一点，需要一定时间去熟悉。</li>
</ul>
</li>
<li>CI/CD 系统：基于 Jenkins 的 CI/CD 在我司各种水土不服，小毛病不断。Jenkins 本身就存在单点故障，不适合云原生，加上 Jenkinsfile 有学习成本，而且不方便复用，我就想把 Jenkins 换掉。我在这一年里调研了大量的开源 CI/CD 工具，都各有不足。主要还是因为我们当下的 Jenkins 承载了太多的功能，已经是一个CI/CD、自动化测试、自动化运维平台了，另一方面公司后端的流水线还存在依赖关系，需要进行复杂的编排。
<ul>
<li>目前我就找到 Argo Workflows 的功能很符合我们的需求，目前正在尝试迁移一部分功能到 Argo Workflows 试用。</li>
<li>因为 argo 的 UI 和 jenkins 差别过大，暂定仍以 jenkins 为前端，通过 python 将任务分派给 argo 运行。这样 argo 对使用者而言是隐形的，用户体验基本上没区别。</li>
</ul>
</li>
<li>杂事：修水电、修服务器、组装办公电脑、搬机房&hellip;</li>
</ol>
<h2 id="今年在技术方面的感受">今年在技术方面的感受</h2>
<ol>
<li>Podman/Skopeo/Buildah/Kaniko 等技术进一步发展，正在逐渐蚕食 Docker 的地盘.
<ol>
<li>kubernetes 已经弃用 docker-shim，直接对接 containerd，下一步应该是彻底切换到 CRI-O。</li>
</ol>
</li>
<li>Istio 1.5 合并为单体架构效果很明显，各微信公众号三天两头就讲服务网格，服务网格是毋庸置疑的未来</li>
<li>阿里云的 OAM 进一步发展，目前阿里基于 OAM 研发的 Kubevela 致力于封装 Kubernetes 的功能，让小白也能用上 Kubernetes。而这同时还能保留 k8s 完整的能力，值得期待。</li>
<li>云上安全越来越引起重视了，目前 CNCF 社区上容器安全相关的项目在快速发展。包括镜像安全/安全容器(kata containers)等。</li>
<li>使用 Kubernetes 来管理数据库已经是大趋势，毕竟成本优势太明显了。
<ul>
<li>很多公司已经在使用 docker 运行数据库，毕竟性能没啥损失，就能方便很多。但是仍然手动搭建集群，也不使用分布式存储。</li>
<li>目前好像只有大厂如阿里京东才有这个实力，使用 kubernetes 和分布式存储来跑数据库。容器化的分布式存储系统维护(如 ceph)，其中的难点我目前还不是很清楚，不过无外乎性能、稳定性、故障恢复这些。</li>
</ul>
</li>
</ol>
<h2 id="明年的展望">明年的展望</h2>
<ol>
<li>Go 语言必须学起来，今年入门了两遍语法，但是没写过啥东西，又忘差不多了。</li>
<li>要进一步熟悉 k8s/istio/flagger/vault/prometheus/helm/traefik/caddy 这些工具，会用还不够，要深入底层。</li>
<li>深入学习计算机网络 + Linux 网络 + Kubernetes 网络！这非常重要。</li>
<li>学习 Podman/Docker 的底层原理，学习 katacontainers 等安全容器技术。</li>
<li>为 kubevela/dapr/knative 等云原生项目做一些贡献，要参与到开源中去。</li>
<li>掌握 Argo Workflows/tekton，将 CI/CD 搬到 k8s 上去。</li>
<li>学习设计模式</li>
<li>有机会的话，熟悉下分布式存储、分布式数据库。这方面我目前还相当欠缺。</li>
<li>学习 KVM 虚拟化</li>
</ol>
<p>如果学（xian）有（de）余（dan）力（teng）的话，也可以考虑搞搞下面这几个：</p>
<ol>
<li>rust 语言：rust 通过 owner+lifetime 实现内存的智能管理，性能很高，而且编译器提示非常友好，值得一学。</li>
<li>机器学习/深度学习: 这个领域可是当下的大热门，可以用 python/julia 玩一玩，顺便补一补微积分线代概率论。。</li>
<li>《编程语言实现模式》：嗯，希望能自己造轮子，写些简单的 parser。</li>
<li>elixir: ruby 语法+ erlang 并发模型(actor), 如果有时间的话，也可以玩玩，了解下原生分布式的函数式语言的特点。</li>
</ol>
<p>回看了下去年的总结，发现我 go/c# 都没学多少，设计模式也没动，python 还在原地踏步hhh&hellip; 去年的展望很多都没实现。</p>
<p>不过云原生这一块倒是进步很快，总体很满意今年的成果哈哈~</p>
<p>明年加油！</p>
]]></description></item><item><title>2021 年 - 渐入佳境</title><link>https://ryan4yin.space/posts/2021-summary/</link><pubDate>Sat, 12 Dec 2020 23:45:00 +0800</pubDate><author>作者</author><guid>https://ryan4yin.space/posts/2021-summary/</guid><description><![CDATA[<h2 id="闲言碎语">闲言碎语</h2>
<p>一晃一年又是过去了。今年年初从 W 公司离职后，我非常幸运地进了现在的公司，在融入新公司的过程中也是五味杂陈。
不过总体结果我自己还是挺满意的，目前工作已经步入正轨，也在新公司发现了非常多的机会。</p>
<p>一些重要事情还是没怎么想通，不过毕竟风口上的猪都能飞，今年小小努力一把，大部分时间仍然随波逐流，却也渐入佳境。</p>
<h2 id="生活">生活</h2>
<ul>
<li>加入了我司的冲浪小分队，第一次冲浪、海边烧烤</li>
<li>跟两个堂弟一起穿越深圳东西冲海岸线，风景非常棒，不过路上也是又热又渴</li>
<li>定期团建，跟 SRE 小伙伴公款吃喝，今年下馆子次数估计是我去年的七八倍</li>
<li>又买了双轮滑鞋，学会了倒滑、压步转向，复习了大学时学过的若干基础技巧</li>
</ul>
<h2 id="读书">读书</h2>
<ul>
<li>年初辞职后游山玩水，心思稍微安定了些，看了大半本《走出荒野》。</li>
<li>6 月份社区组织打新冠疫苗时，在等候室看了本《青春驿站——深圳打工妹写真》，讲述八九十年代打工妹的生活。很真实，感情很细腻。</li>
<li>年末二爷爷去世，参加完葬礼后，心态有些变化，看完了大一时买下的《月宫 Moon Palace》，讲述主角的悲剧人生。</li>
<li>其余大部分业余时间，无聊，又不想学点东西，也不想运动，于是看了非常多的网络小说打发时间。</li>
</ul>
<h2 id="音乐">音乐</h2>
<p>年初辞职后，练了一段时间的竹笛跟蓝调口琴，但后来找到工作后就基本沉寂了。</p>
<p>总的来说还是原地踏步吧。</p>
<h2 id="工作与技术">工作与技术</h2>
<p>回看下了 2020 年的总结与展望，今年实际的进步，跟去年期望的差别很大。最初的目标大概只实现了 10%，但是接触到了许多意料之外的东西，总体还是满意的：</p>
<ul>
<li>熟悉了新公司的文化与工作方式，这感觉是个很大的收获，我的工作方式有了很大的改善</li>
<li>接触并且熟悉了新公司的 AWS 线上环境
<ul>
<li>负责管理维护线上 Kubernetes 管理平台，第一次接触到的线上集群峰值 QPS 就有好几万。从一开始的小心翼翼，到现在也转变成了老手，这算是意义重大吧</li>
<li>使用 python 写了几个 Kubernetes 管理平台的服务，这也是我第一次写线上服务，很有些成就感</li>
<li>参与 AWS 成本的分析与管控，有了一些不错的成果</li>
<li>学会了 Nginx 的简单使用，刚好够用于维护公司先有的 Nginx 代理配置。</li>
</ul>
</li>
<li>随便写了几个 go 的 demo，基本没啥进步</li>
<li>学了一个星期的 rust 语言，快速看完了 the book，用 rust 重写了个 video2chars</li>
<li>学习了 Linux 容器的底层原理：cgroups/namespace 技术，并且用 go/rust 实现了个 demo</li>
<li>学习了 Linux 的各种网络接口、Iptables</li>
<li>熟悉了 PromQL/Grafana，现在也能拷贝些 PromQL 查各种数据了</li>
</ul>
<p>如果要给自己打分的话，那就是「良好」吧。因为并没有很强的进取心，所以出来的结果也并不能称之为「优秀」。</p>
<h2 id="今年在技术方面的感受">今年在技术方面的感受</h2>
<ul>
<li>Istio 服务网格：体会到了它有点重，而且它的发展跟我们的需求不一定匹配
<ul>
<li>Sidecar 模式的成本太高了，在未调优的情况下，它会给服务带来 1/3 到 1/4 的成本提升，以及延迟上升</li>
<li>比如切量权重固定为 100，不支持 pod 的 warm up，而它重点发展的虚拟机支持我们却完全不需要</li>
<li>一直在思考是持续往 Istio 投入，还是换其他的方案</li>
</ul>
</li>
<li>服务网格到底该做成什么样子，我还并不很确定
<ul>
<li>Cilium 推出的基于 eBPF 的 Service Mesh 是一个新趋势（它使用高级特性时会退化成 Per Node Proxy 模式），成本、延迟方面都吊打 Sidecar 模式的其他服务网格，是今年服务网格领域的大新闻。</li>
<li>我们曾尝试使用中心化网关来替代 Sidecar 以降低成本。但是跨区流量成本、HTTP/GRPC 多协议共存，这些都是挑战。而且这也并不是社区的最佳实践，现在我觉得维持 Sidecar 其实反而能提升资源利用率，我们的集群资源利用率目前很低。如果能把控好，这部分成本或许是可以接受的。</li>
</ul>
</li>
<li>K8s 集群管理这方面，发现了 K8s 集群升级的诸多不便</li>
<li>WASM 与 Rust 蓬勃发展，未来可期</li>
<li>成本控制方面，体会到了 ARM 架构以及 Spot 竞价实例的好处</li>
<li>跨区流量成本有很大的潜在优化空间</li>
<li>今年各云厂商故障频发，没有<strong>跨 region 的服务迁移</strong>就会很难受，需要持续关注下 <a href="https://github.com/karmada-io/karmada" target="_blank" rel="noopener noreferrer">karmada</a> 这类多集群管理方案。
<ul>
<li>Google 账号系统宕机</li>
<li>Fastly CDN 故障</li>
<li>Facebook 故障</li>
<li>AWS 更是各种可用区故障，12/7 的故障导致 AWS 大部分服务都崩了。因此我们 SRE 今年经常是救各种大火小火&hellip;</li>
</ul>
</li>
</ul>
<h2 id="明年的展望">明年的展望</h2>
<p>我看了下 2020 年总结中写的「展望」，大概只实现了 20% 不到。
今年感觉应该写得更聚焦一些，争取能实现 60%.</p>
<ol>
<li>熟练掌握 Go/Rust 语言，并用于至少一个项目中</li>
<li>深入学习如下技术
<ol>
<li>Kubernetes 源码</li>
</ol>
</li>
<li>网络技术
<ol>
<li>服务网格 Istio</li>
<li>代理工具 Envoy/APISIX</li>
<li>网络插件 Cilium + eBPF</li>
</ol>
</li>
<li>AWS K8s 成本与服务稳定性优化
<ol>
<li>节约跨可用区/跨域的流量成本</li>
<li>K8s 新特性：<a href="https://kubernetes.io/docs/concepts/services-networking/topology-aware-hints/" target="_blank" rel="noopener noreferrer">Topology Aware Hints</a></li>
<li>Istio: <a href="https://istio.io/latest/docs/tasks/traffic-management/locality-load-balancing/" target="_blank" rel="noopener noreferrer">Locality Load Balancing</a></li>
<li>实例类型优化：
<ol>
<li>使用更合适的实例类型</li>
<li>使用 ARM 架构机型，降本增效</li>
</ol>
</li>
<li>推广 GRPC 协议</li>
</ol>
</li>
<li>打通本地开发环境与云上的运行环境：
<ol>
<li><a href="https://github.com/nocalhost/nocalhost" target="_blank" rel="noopener noreferrer">nocalhost</a></li>
</ol>
</li>
<li>探索新技术与可能性（优先级低）
<ol>
<li>基于 Kubernetes 的服务平台，未来的发展方向
<ol>
<li>kubevela</li>
<li>buildpack</li>
<li>是否应该推进 gitops</li>
<li>openkruise</li>
</ol>
</li>
<li>Serverless 平台的进展
<ol>
<li>Knative</li>
<li>OpenFunction</li>
</ol>
</li>
<li>跨集群的应用部署、容灾
<ol>
<li>karmada</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></description></item></channel></rss>