<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>tcpdump - 标签 - This Cute World</title><link>https://thiscute.world/tags/tcpdump/</link><description>tcpdump - 标签 - This Cute World</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaoyin_c@qq.com (ryan4yin)</managingEditor><webMaster>xiaoyin_c@qq.com (ryan4yin)</webMaster><lastBuildDate>Thu, 28 May 2020 16:20:26 +0800</lastBuildDate><atom:link href="https://thiscute.world/tags/tcpdump/" rel="self" type="application/rss+xml"/><item><title>使用 tcpdump 和 Wireshark 进行远程实时抓包分析</title><link>https://thiscute.world/posts/tcpdump-and-wireshark/</link><pubDate>Thu, 28 May 2020 16:20:26 +0800</pubDate><author>xiaoyin_c@qq.com</author><dc:creator>ryan4yin</dc:creator><guid>https://thiscute.world/posts/tcpdump-and-wireshark/</guid><description><![CDATA[<h1 id="抓包分析">抓包分析</h1>
<p>抓包分析工具主要有两种：</p>
<ol>
<li>http/https 网络代理工具：<a href="https://github.com/mitmproxy/mitmproxy" target="_blank" rel="noopener noreferrer">mitmproxy</a>/fiddler 都属于这一类，用于分析 http 非常方便。但是只支持 http/https，有局限性。</li>
<li>tcp/udp/icmp 等网络嗅探工具：tcpdump/tshark 都属于这一类，网络故障分析等场景常用。</li>
</ol>
<p>这里主要介绍如何使用 tcpdump + wireshark 进行远程实时抓包分析。
而 mitmproxy 抓包和 wireshark 本地抓包都相当简单，就不介绍了。</p>
<blockquote>
<p>P.S. tshark 是 wireshark 的命令行版本，用法 tcpdump 非常相似。</p>
</blockquote>
<h2 id="一wireshark-的基本用法">一、wireshark 的基本用法</h2>
<p>WireShark 的 UI 界面如何使用，网上能搜得到各种类型的 wireshark 演示，多看几篇博客就会了。
搜索 [xxx 协议 wireshark 抓包分析] 就能找到各种各样的演示，比如</p>
<ol>
<li>「gRPC 协议 wireshark 抓包分析」</li>
<li>「WebSocket 协议 wireshark 抓包分析」</li>
<li>「TCP 协议 wireshark 抓包分析」</li>
<li>等等</li>
</ol>
<p>主要需要介绍的，应该是 wireshark 的数据包过滤器。
wireshark 中有两种包过滤器：</p>
<ol>
<li>捕获过滤器：在抓包的时候使用它对数据包进行过滤。</li>
<li>显示过滤器：对抓到的所有数据包进行过滤。</li>
</ol>
<p>显示过滤器是最有用的，下面简要介绍下显示过滤器的语法。</p>
<p>可以直接通过「<strong>协议名称</strong>」进行过滤：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># 只看 tcp 流量
tcp
# 只看 http 流量
http

# 使用感叹号（或 not）进行反向过滤
!arp  # 过滤掉所有 arp 数据包
</code></pre></td></tr></table>
</div>
</div><p>也可以通过「<strong>协议名称.协议属性</strong>」和「比较操作符（比如 <code>==</code>）」进行更精确的过滤：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"># 通过 ip 的源地址 src 或 dst 进行过滤
ip.src==192.168.1.33

# 通过 IP 地址（ip.addr）进行过滤（匹配 ip.src 或 ip.dst）
ip.addr==192.168.0.5
# 上一条过滤表达式等价于：
ip.src==192.168.0.5 or ip.dst==192.168.0.5

# 通过 tcp 端口号进行过滤
tcp.port==80
tcp.port&gt;4000

# 通过 http 的 host 属性进行过滤
http.host != &#34;xxx.baidu.com&#34;
# 通过 http.referer 属性进行过滤
http.referer == &#34;xxx.baidu.com&#34;

# 多个过滤器之间用 and、or 进行组合
http.host != &#34;xxx.baidu.com&#34; and http.referer == &#34;xxx.baidu.com&#34;
</code></pre></td></tr></table>
</div>
</div><h2 id="二tcpdump--ssh--wireshark-远程实时抓包">二、tcpdump + ssh + wireshark 远程实时抓包</h2>
<p>在进行远程网络抓包分析时，我们通常的做法是：</p>
<ol>
<li>使用 <code>tcpdump</code> 在远程主机上抓包，保存为 pcap 文件。</li>
<li>将 pcap 文件拷贝到本地，使用 wireshark 对其进行分析。</li>
</ol>
<p>但是这样做没有时效性，而且数据拷贝来去也比较麻烦。</p>
<p>考虑使用流的方式，在远程主机上使用 <code>tcpdump</code> 抓包，本地使用 <code>wireshark</code> 进行实时分析。</p>
<p>使用 ssh 协议进行流式传输的示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># eth0 更换成你的机器 interface 名称，虚拟机可能是 ens33</span>
ssh root@some.host <span class="s2">&#34;tcpdump -i eth0 -l -w -&#34;</span> <span class="p">|</span> wireshark -k -i -
</code></pre></td></tr></table>
</div>
</div><p>在不方便使用 ssh 协议的情况下（比如容器抓包、Android 抓包），可以考虑使用 <code>nc</code>(netcat) 进行数据流的转发：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 1. 远程主机抓包：将数据流通过 11111 端口暴露出去</span>
tcpdump -i wlan0 -s0 -w - <span class="p">|</span> nc -l -p <span class="m">11111</span>

<span class="c1"># 2. 本地主机从远程主机的 11111 端口读取数据，提供给 wireshark</span>
nc &lt;remote-host&gt; <span class="m">11111</span> <span class="p">|</span> wireshark -k -S -i -
</code></pre></td></tr></table>
</div>
</div><p>如果是抓取 Android 手机的数据，方便起见，可以通过 adb 多进行一次数据转发：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 方案一：root 手机后，将 arm 版的 tcpdump 拷贝到手机内进行抓包</span>
<span class="c1"># 1. 在 adb shell 里使用 tcpdump 抓 WiFi 的数据包，转发到 11111 端口</span>
<span class="c1">## 需要先获取到 root 权限，将 tcpdump 拷贝到 /system/bin/ 目录下</span>
tcpdump -i wlan0 -s0 -w - <span class="p">|</span> nc -l -p <span class="m">11111</span>

<span class="c1"># 2. 在本机使用 adb forward 将手机的 11111 端口绑定到本机(PC)的 11111 端口</span>
adb forward tcp:11111 tcp:11111

<span class="c1"># 3. 直接从本机(PC)的 11111 端口读取数据，提供给 wireshark</span>
nc localhost <span class="m">11111</span> <span class="p">|</span> wireshark -k -S -i -
<span class="c1">## 通过数据转发，本机 11111 端口的数据，就是安卓手机内 tcmpdump 的 stdout 内容。</span>

<span class="c1"># 方案二：</span>
<span class="c1"># 如果手机不方便 root，推荐 PC 开启 WiFi 热点，手机连上这个热点访问网络。</span>
<span class="c1"># 这样手机的数据就一定会走 PC，直接在 PC 上通过 wireshark 抓包就行。</span>
<span class="c1"># 如果你只需要简单地抓 http/https 包，请使用 fiddler/mitmproxy</span>
</code></pre></td></tr></table>
</div>
</div><p>如果需要对 Kubernetes 集群中的容器进行抓包，推荐直接使用 <a href="https://github.com/eldadru/ksniff" target="_blank" rel="noopener noreferrer">ksniff</a>!</p>
<h3 id="windows-系统">Windows 系统</h3>
<p>另外如果你本机是 Windows 系统，要分 shell 讨论：</p>
<ol>
<li><code>cmd</code>: 可以直接使用上述命令。</li>
<li><code>powershell</code>: **PowerShell 管道对 <code>native commands</code> 的支持不是很好，管道两边的命令貌似是串行执行的，这会导致 wireshark 无法启动！**目前没有找到好的解决方法。。</li>
</ol>
<p>另外如果你使用 <code>wsl</code>，那么可以通过如下命令使 <code>wsl</code> 调用 windows 中的 wireshark 进行抓包分析：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># 添加软链接</span>
sudo ln -s <span class="s2">&#34;</span><span class="k">$(</span>which wireshark.exe<span class="k">)</span><span class="s2">&#34;</span> /usr/local/bin/wireshark
</code></pre></td></tr></table>
</div>
</div><p>添加了上述软链接后，就可以正常地在 <code>wsl</code> 中使用前面介绍的所有抓包指令了（包括 <a href="https://github.com/eldadru/ksniff" target="_blank" rel="noopener noreferrer">ksniff</a>）。
它能正常调用 windows 中的 wireshark，数据流也能正常地通过 shell 管道传输。</p>
<h2 id="2-termsharkhttpsgithubcomgclatermshark-直接通过命令行-ui-进行实时抓包分析">2. <a href="https://github.com/gcla/termshark" target="_blank" rel="noopener noreferrer">termshark</a>: 直接通过命令行 UI 进行实时抓包分析</h2>
<p>有的时候，远程实时抓包因为某些原因无法实现，而把 pcap 数据拷贝到本地分析又比较麻烦。
这时你可以考虑直接使用命令行版本的 <code>wireshark</code> UI: <a href="https://github.com/gcla/termshark" target="_blank" rel="noopener noreferrer">termshark</a>，直接在命令行进行实时的抓包分析。</p>
<p><a href="https://github.com/aylei/kubectl-debug" target="_blank" rel="noopener noreferrer">kubectl-debug</a> 默认的调试镜像中，就自带 <code>termshark</code>.</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/92993778" target="_blank" rel="noopener noreferrer">WireShark使用教程</a></li>
<li><a href="https://techzone.ergon.ch/tcpdump" target="_blank" rel="noopener noreferrer">Tracing network traffic using tcpdump and tshark</a></li>
<li><a href="https://blog.dornea.nu/2015/02/20/android-remote-sniffing-using-tcpdump-nc-and-wireshark/" target="_blank" rel="noopener noreferrer">Android remote sniffing using Tcpdump, nc and Wireshark</a></li>
<li><a href="https://www.jianshu.com/p/a62ed1bb5b20" target="_blank" rel="noopener noreferrer">聊聊tcpdump与Wireshark抓包分析</a></li>
</ul>
]]></description></item></channel></rss>