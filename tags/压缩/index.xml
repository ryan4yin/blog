<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>压缩 - 标签 - This Cute World</title><link>https://thiscute.world/tags/%E5%8E%8B%E7%BC%A9/</link><description>压缩 - 标签 - This Cute World</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaoyin_c@qq.com (ryan4yin)</managingEditor><webMaster>xiaoyin_c@qq.com (ryan4yin)</webMaster><lastBuildDate>Mon, 14 Jan 2019 19:51:00 +0800</lastBuildDate><atom:link href="https://thiscute.world/tags/%E5%8E%8B%E7%BC%A9/" rel="self" type="application/rss+xml"/><item><title>常见压缩格式的区别，及 Linux 下的压缩相关指令</title><link>https://thiscute.world/posts/compression-related-instructions-under-linux/</link><pubDate>Mon, 14 Jan 2019 19:51:00 +0800</pubDate><author>xiaoyin_c@qq.com</author><dc:creator>ryan4yin</dc:creator><guid>https://thiscute.world/posts/compression-related-instructions-under-linux/</guid><description><![CDATA[<blockquote>
<p>可先浏览加粗部分</p>
</blockquote>
<h2 id="一常见压缩档">一、常见压缩档</h2>
<pre><code>*.zip        |    zip 程序压缩打包的档案；  （很常见，但是因为不包含文档名编码信息，跨平台可能会乱码）
*.rar        |    rar 程序压缩打包的档案；（在windows上很常见，但是是商业软件。）
*.gz         |   gzip 程序压缩的档案； （linux目前使用最广泛的压缩格式）
*.bz2        |   bzip2 程序压缩的档案；
*.xz         |    xz 程序压缩的档案；
*.tar        |    tar 程序打包的资料，并没有压缩过；
*.tar.gz     |    tar 程序打包的档案，其中并且经过 gzip 的压缩 （最常见）
*.tar.bz2    |   tar 程序打包的档案，其中并且经过 bzip2 的压缩 
*.tar.xz     |   tar 程序打包的档案，其中并且经过 xz 的压缩 （新一代压缩选择）
*.7z         |  7zip 程序压缩打包的档案。
</code></pre>
<p>目前最常见的是 <code>tar.gz</code> <code>tar.xz</code> <code>tar.7z</code> 这三种格式。</p>
<h2 id="二以能否压缩多文档分类">二、以能否压缩多文档分类</h2>
<ol>
<li>
<p><code>gzip</code> <code>bzip2</code> <code>xz</code> 这三个压缩格式都<strong>只能压缩单个文档</strong>。（换而言之，该进程的输入输出都是流，不包含文档树信息。）
因此如果要用它们压缩多个文档或目录，需要使用另一个软件来先将要压缩的文档打包成一个文档（包含文档树信息），这个命令就是 <code>tar</code>.
先使用 <code>tar</code> 归档要压缩的多文档，再对生成的 <code>*.tar</code> 使用 上述压缩指令（或者直接使用管道重定向），Linux 下是这样实现多文档压缩的。</p>
</li>
<li>
<p>而 <code>7z</code> 和 <code>zip</code>，以及 <code>rar</code> 格式，都<strong>同时具有了 归档(tar) 和 压缩 两个功能</strong>，（也就是该格式包含了文档树信息咯）也就是说它们可以直接压缩多个文档。</p>
</li>
</ol>
<h2 id="三各格式使用的算法差别">三、各格式使用的算法差别</h2>
<ol>
<li><code>gzip</code> 成熟的格式，使用的算法基于 DEFLATE。（压缩比适中）</li>
<li><code>7z</code> 新一代格式，使用的压缩算法可替换，默认是使用的 lzma/lzma2 算法，使用 AES-256 作为加密算法。</li>
<li><code>xz</code> 同样使用的 lzma/lzma2 算法，不过只能压缩一个文档。（压缩比很高，相对的用时也更多）</li>
<li><code>zip</code> 同样是支持多种算法的压缩格式，默认应该是使用的 DEFLATE 算法。诞生较早，有很多缺陷。（跨平台乱码、容易被破解等）</li>
<li><code>rar</code> 使用 类DEFLATE 的专有算法，使用 AES 加密。(rar5.0 以后使用 AES-256CBC)</li>
</ol>
<p>不过 <code>zip</code> 被广泛应用在安卓的 <code>apk</code> 格式、<code>java</code> 的 <code>jar</code>、电子书的 <code>epub</code>，还有 github、云硬盘的多文档下载中，原因嘛大概是 <code>zip</code> 很流行，所以不用担心目标平台没解压软件吧。</p>
<h2 id="四如何选用压缩方案">四、如何选用压缩方案</h2>
<ol>
<li><code>tar.gz</code> 在 linux 上最常见，在压缩率和压缩时间上拥有良好的平衡。如果有任何疑惑，就选用它吧，不会错。</li>
<li><code>tar.xz</code> 是新一代的压缩格式，虽然拥有更好的压缩率，压缩/解压速度相对要慢很多倍。一般在电脑性能足够好的时候，可选用它。</li>
<li><code>7z</code> 和 xz 同为新一代压缩格式，它更复杂，支持多文档压缩。而且更适合跨平台，推荐使用。</li>
<li><code>zip</code> 因为跨平台容易导致文档名乱码，不建议使用。（虽然有这样的缺陷，但是却意外的用得很广泛，在前一节有说过）</li>
<li><code>rar</code> 性能不差，但是是商业格式，不开源，不建议使用。（<strong>做得比较好的是它的 recovery records，在网络环境不好，容易导致包损坏时，这个功能就特别棒</strong>）</li>
<li><code>tar.bz2</code> 算是 linux 压缩历史上，过渡时期的产物，性能也介于 gz 和 xz 之间，一般来说不需要考虑它。</li>
</ol>
<p>总的来说，就是 Windows 上推荐使用 <code>7z</code>，而 Linux 上 推荐使用 <code>tar.gz</code> <code>tar.xz</code> <code>7z</code> 之一。此外 <code>rar</code> 的损坏很容易修复，<code>zip</code> 受众多（要注意乱码问题），也可以考虑。</p>
<h2 id="五linux-上的压缩相关指令">五、Linux 上的压缩相关指令</h2>
<h3 id="1-tar-指令">1. tar 指令</h3>
<p>通过之前的介绍，可以看出常用的就是 tar gzip xz 等，如果要压缩多个文档，需要先使用tar，再用管道重定向到 gzip 或 xz，比较麻烦，而这几个指令又很常用。于是后来对tar做了增强。
tar 最初只是一个归档进程，而压缩则由其他的压缩软件来完成（一个进程只干一件事）。后来为了方便，丧心病狂地集成了各种压缩指令。因此这里就只介绍这一个命令了（它囊括了所有）。
tar 的选项与参数非常的多！我们只讲几个常用的选项，更多选项您可以自行 man tar 查询啰！</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>dmtsai@study ~<span class="o">]</span>$ tar <span class="o">[</span>-z<span class="p">|</span>-j<span class="p">|</span>-J<span class="o">]</span> <span class="o">[</span>cv<span class="o">]</span> <span class="o">[</span>-f 待创建的新档名<span class="o">]</span> filename... &lt;<span class="o">==</span>打包与压缩
<span class="o">[</span>dmtsai@study ~<span class="o">]</span>$ tar <span class="o">[</span>-z<span class="p">|</span>-j<span class="p">|</span>-J<span class="o">]</span> <span class="o">[</span>tv<span class="o">]</span> <span class="o">[</span>-f 既有的 tar档名<span class="o">]</span>             &lt;<span class="o">==</span>察看档名
<span class="o">[</span>dmtsai@study ~<span class="o">]</span>$ tar <span class="o">[</span>-z<span class="p">|</span>-j<span class="p">|</span>-J<span class="o">]</span> <span class="o">[</span>xv<span class="o">]</span> <span class="o">[</span>-f 既有的 tar档名<span class="o">]</span> <span class="o">[</span>-C 目录<span class="o">]</span>   &lt;<span class="o">==</span>解压缩
</code></pre></td></tr></table>
</div>
</div><h4 id="选项与参数">选项与参数</h4>
<pre><code>-c  ：创建打包档案，可搭配 -v 来察看过程中被打包的档名(filename)
-t  ：察看打包档案的内容含有哪些档名，重点在察看『档名』就是了；
-x  ：解打包或解压缩的功能，可以搭配 -C (大写) 在特定目录解开
      特别留意的是， -c, -t, -x 不可同时出现在一串指令列中。
-z  ：透过 gzip  的支持进行压缩/解压缩：此时档名最好为 *.tar.gz
-j  ：透过 bzip2 的支持进行压缩/解压缩：此时档名最好为 *.tar.bz2
-J  ：透过 xz    的支持进行压缩/解压缩：此时档名最好为 *.tar.xz
      特别留意， -z, -j, -J 不可以同时出现在一串指令列中
-v  ：在压缩/解压缩的过程中，将正在处理的档名显示出来！
-f filename：-f 后面要立刻接要被处理的档名！建议 -f 单独写一个选项啰！(比较不会忘记)
-C 目录    ：这个选项用在解压缩，若要在特定目录解压缩，可以使用这个选项。
</code></pre>
<p>其他后续练习会使用到的选项介绍：</p>
<blockquote>
<p>-p(小写) ：保留备份资料的原本权限与属性，常用于备份(-c)重要的设定档
-P(大写) ：保留绝对路径，亦即允许备份资料中含有根目录存在之意；
&ndash;exclude=FILE：在压缩的过程中，不要将 FILE 打包！</p>
</blockquote>
<h4 id="其实最简单的使用-tar-就只要记忆底下的方式即可">其实最简单的使用 tar 就只要记忆底下的方式即可</h4>
<ul>
<li><strong>压　缩：<code>tar -zcv -f filename.tar.gz &lt;要被压缩的档案或目录名称&gt;</code></strong></li>
<li><strong>查看文档树：<code>tar -ztv -f filename.tar.gz</code></strong></li>
<li><strong>解压缩：<code>tar -zxv -f filename.tar.gz -C</code> &lt;欲解压缩的目录&gt;`</strong></li>
</ul>
<p>上面的命令需要根据压缩格式的不同，选用 <code>-z</code> <code>-j</code> <code>-J</code> 选项，而实际上文档的后缀就已经表明了它的压缩格式，不免让人觉得多余。
因此就有这幺一条通用的压缩/解压 option</p>
<pre><code>-a, --auto-compress
              Use archive suffix to determine the compression program.
</code></pre>
<p>使用这个，便有了<strong>通用的解压指令</strong>：</p>
<blockquote>
<p><strong><font color=#0099ff size=4>tar -axv -f file.tar.* </font> （它适用于上述三种压缩格式）</strong></p>
</blockquote>
<h4 id="仅解压指定的文档">仅解压指定的文档</h4>
<ol>
<li>先查看文档树找到需要解压的文档的文档名</li>
<li>tar -zxv -f 打包档.tar.gz 待解开档名</li>
</ol>
<h4 id="打包某目录但不含该目录下的某些档案之作法">打包某目录，但不含该目录下的某些档案之作法</h4>
<p>使用 &ndash;exclude=FILE 选项（支持文档名的模式匹配，而且可重复）</p>
<pre><code>tar -zcv -f filename.tar.gz directory --exclude=FILE1 --exclude=func*
</code></pre>
<h5 id="只打包目录中比指定时刻更新的文档">只打包目录中比指定时刻更新的文档</h5>
<p>使用 <code>--newer-mtime=&quot;2015/06/17&quot;</code> 选项。</p>
<h5 id="tarfile-tarball">tarfile, tarball</h5>
<pre><code>tarfile  |  纯打包、未压缩的 tar 文档
tarball  |  压缩了的 tar 文档
</code></pre>
<h4 id="2-zip格式linux-一般也会自带详细的请man">2. zip格式（linux 一般也会自带，详细的请man）</h4>
<ol>
<li>
<p>压缩命令：<code>zip</code></p>
<ul>
<li>压缩目录：<code>zip -r filename.zip directory</code>
<ul>
<li><code>r</code> 表示递归压缩，压缩包会包含这个目录</li>
</ul>
</li>
</ul>
</li>
<li>
<p>解压命令：<code>unzip</code></p>
<ul>
<li>解压到某目录：<code>unzip -d directory filename.zip</code>    (<code>-d dir</code> 表示将内容解压到dir目录内)
<ul>
<li>-t 测试压缩档的完整性</li>
<li>-x filename 排除某文档</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="3-7z格式需要p7zipdeepin自带更多的请man">3. 7z格式（需要p7zip，deepin自带，更多的请man）</h4>
<ol>
<li>查看目录树：<code>7z l file.7z</code>    (List contents of archive)</li>
<li>压缩：<code>7z a file.7z file1 directory1</code>   (a 为创建压缩档或向压缩档中添加文档/目录，一次可指定多个要压缩的文档或目录)</li>
<li>解压：<code>7z x file.7z -o directory</code>    (解压到指定目录)</li>
<li>测试完整性： <code>7z t file.7z</code></li>
</ol>
<p><code>p7zip</code> 安装好后，会提供 <code>7z</code>、<code>7za</code>、<code>7zr</code> 三个指令，一般来说直接用 <code>7z</code> 就行。</p>
<blockquote>
<p>P.S. <code>7z</code> 不会保存 Linux 文档的用户、用户组信息，因此不能直接用于 <code>Linux</code> 系统备份，此时建议用 <code>tar.xz</code> 或 <code>tar.7z</code>（也就是先用tar打包）</p>
</blockquote>
<h4 id="4-rar格式还是那句话更多的请man">4. rar格式（还是那句话，更多的请man）</h4>
<p><code>rar</code> 是非开源的格式，Linux 默认是不会包含 <code>rar</code> 压缩软件的，但是它的解压软件是开源的，<code>deepin</code> 自带 <code>unrar</code>，顺便 <code>7zip</code> 也可解压 <code>rar</code> 文档。
若想用linux创建rar压缩档，需要从<a href="https://www.rarlab.com" target="_blank" rel="noopener noreferrer">rarlab</a>上下载 Linux 版，（deepin源自带）不过要注意的是该 linux 版是 40 天试用版，要长期使用的话，可能需要破解。（rar 的 key 网上一搜一大把）</p>
<ol>
<li>压缩：<code>rar a file.rar file</code>  （这个是试用的）</li>
<li>解压：<code>unrar x file.rar</code>      （这个开源免费）</li>
</ol>
<p>其实我挺中意 <code>rar</code> 的修复功能的，不知道为啥 <code>7z</code> <code>xz</code> 这样的新格式没有添加类似的 <code>recorvery records</code>。上次下个 <code>idea</code> 的 <code>tarball</code>，下了四五次才下到一个完整的，要是用 <code>rar</code> 的话，大概一键修复就好了，可 <code>tar.gz</code> 我不知道怎幺修复，只好一遍遍重复下载。。</p>
<h3 id="六参考">六、参考</h3>
<ul>
<li><a href="http://linux.vbird.org/linux_basic/0240tarcompress.php" target="_blank" rel="noopener noreferrer">档案与档案系统的压缩,打包与备份</a></li>
<li>维基百科</li>
<li><a href="https://www.zhihu.com/question/26026741/answer/31869734" target="_blank" rel="noopener noreferrer">rar tar gz zip 7z 有什幺区别? - 知乎</a></li>
<li><a href="https://www.zhihu.com/question/37019479/answer/70054550" target="_blank" rel="noopener noreferrer">为什幺linux的包都是.tar.gz？要解压两次 - 知乎</a></li>
</ul>
]]></description></item></channel></rss>