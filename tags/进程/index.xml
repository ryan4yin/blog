<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>进程 - 标签 - This Cute World</title><link>https://thiscute.world/tags/%E8%BF%9B%E7%A8%8B/</link><description>进程 - 标签 - This Cute World</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>xiaoyin_c@qq.com (ryan4yin)</managingEditor><webMaster>xiaoyin_c@qq.com (ryan4yin)</webMaster><lastBuildDate>Tue, 23 Jan 2018 16:39:00 +0800</lastBuildDate><atom:link href="https://thiscute.world/tags/%E8%BF%9B%E7%A8%8B/" rel="self" type="application/rss+xml"/><item><title>进程线程协程与并发并行</title><link>https://thiscute.world/posts/process-thread-coroutines-concurrency-parallelism/</link><pubDate>Tue, 23 Jan 2018 16:39:00 +0800</pubDate><author>xiaoyin_c@qq.com</author><dc:creator>ryan4yin</dc:creator><guid>https://thiscute.world/posts/process-thread-coroutines-concurrency-parallelism/</guid><description><![CDATA[<blockquote>
<p>个人笔记，不保证正确。</p>
</blockquote>
<h3 id="一进程-process并行运算分布式">一、进程 Process：（并行运算，分布式）</h3>
<p>每一个进程，都可以看作是一个完整的 Program，它有自己完全独立的内容。不与其他进程直接共享数据。（一个工作(job)可以由多个 process 完成，例如电脑上的qq/360就会有好几个进程，这种程序可能会有一个守护进程，当主进程挂掉，它会自动重启主进程。）</p>
<p>每个进程可以由多个线程组成。进程抽象由操作系统提供，Linux 是使用 fork 函数，Windows 是用 CreateProccess。</p>
<h3 id="二线程-thread并发执行">二、线程 Thread：（并发执行）</h3>
<p>属于同一个进程的线程之间，是共享一套工作内容的。这使得线程的创建和移除开销很小，但同时也使编程变得复杂。
<figure>
</figure>
</p>
<p>关于线程，分用户级线程和内核级线程。不同的语言中，这两种线程的对应关系也不尽相同。</p>
<ul>
<li>
<p>多对一模型
将多个用户级线程映射到一个内核级线程，线程管理在用户空间完成，这种模型下操作系统并不知道多线程的存在。Python 就是这种模型。</p>
<ul>
<li><strong>优点</strong>：线程管理是在用户空间进行的，切换上下文开销比较小，性能较高。</li>
<li><strong>缺点</strong>：当一个线程在使用内核服务时被阻塞，那么整个进程都会被阻塞；多个线程不能并行地运行在多处理机上。</li>
</ul>
</li>
<li>
<p>一对一模型
将每个用户级线程映射到一个内核级线程。Java的线程就属于这种模型。</p>
<ul>
<li><strong>优点</strong>：当一个线程被阻塞后，允许另一个线程继续执行，所以并发能力较强；能很好的利用到CPU的多核心。</li>
<li><strong>缺点</strong>：每创建一个用户级线程都需要创建一个内核级线程与其对应，这样创建线程的开销比较大，会影响到应用程序的性能。并且切换线程要进出内核，代价比较大。</li>
</ul>
</li>
<li>
<p>多对多模型
将n个用户级线程映射到m个内核级线程上，要求 m &lt;= n。GO（1.5之后）的协程就属于这种线程模型。</p>
<ul>
<li><strong>特点</strong>：既克服了多对一模型的并发度不高的缺点，又克服了一对一模型的一个用户进程占用太多内核级线程，开销太大的缺点。又拥有多对一模型和一对一模型各自的优点。</li>
</ul>
</li>
</ul>
<h3 id="三协程-coroutine并发执行">三、协程 Coroutine（并发执行）</h3>
<p>如果说线程是轻量级的进程，那么协程就是轻量级的线程。线程跑在进程里，协程就跑在线程里。</p>
<p>优点：</p>
<ol>
<li>协程是跑在同一个线程里，并且是由程序本身来调度的。协程间的切换就是函数的调用，完全没有线程切换那么大的开销。
<ul>
<li>线程的数量越多，协程的优势越大</li>
</ul>
</li>
<li>因为协程是程序调度的，它实际上是串行运行的，因此不需要复杂的锁机制来保证线程安全。
<ul>
<li>在协程中控制共享资源不加锁，只需要判断状态就好了。这免去了锁机制带来的开销。</li>
</ul>
</li>
</ol>
<p>因为协程跑在单个线程内，所占用的 CPU 资源有限，所以多协程<strong>并不能提升计算性能</strong>。不仅如此，因为多了程序本身的调度开销，计算密集型程序的性能反而会下降。</p>
<p>此外，协程代码中<strong>决不能出现阻塞</strong>，否则整个线程都会停下来等待该操作完成，这就麻烦了。</p>
<p>协程适合用于 IO 密集型任务，可用于简化异步 IO 的 callback hell。例如 Python 的 asyncio 就是用协程实现的。</p>
<h3 id="并发并行">并发并行</h3>
<p>由此，又引出两个名词：</p>
<ol>
<li>并发（Concurrent）：多个任务交替进行。</li>
<li>并行（Parallel）：多个任务同时进行。</li>
</ol>
<p>一张图说明两者的差别
<figure>
</figure>
</p>
<p><strong>Note</strong>：进程 和 线程 都可能是 并发 或 并行 的。关键看你程序的运行状态。多核是并行的前提。并发则只要求交替执行，因此单核也没问题。</p>
<h3 id="同步异步">同步异步</h3>
<ol>
<li>同步：不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，称这些程序单元是同步执行的。
<ul>
<li>多线程编程中，所有修改共享变量的行为，都必须加锁，保证顺序执行，保证同步。或者加原子锁，保证该修改操作是原子的。</li>
<li>同步意味着有序</li>
</ul>
</li>
<li>异步：为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式。
<ul>
<li>不相关的程序单元之间可以是异步的。比如爬虫下载网页</li>
<li>异步意味着无序</li>
</ul>
</li>
</ol>
<ul>
<li><a href="https://www.cnblogs.com/euphie/p/7008077.html" target="_blank" rel="noopener noreferrer">进程、线程和协程</a></li>
</ul>
]]></description></item></channel></rss>