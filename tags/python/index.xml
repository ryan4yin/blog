<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python - 标签 - This Cute World</title><link>https://thiscute.world/tags/python/</link><description>Python - 标签 - This Cute World</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 13 Feb 2022 01:17:00 +0800</lastBuildDate><atom:link href="https://thiscute.world/tags/python/" rel="self" type="application/rss+xml"/><item><title>Python 实用技巧与常见错误集锦</title><link>https://thiscute.world/posts/python-tips-and-tricks/</link><pubDate>Sun, 13 Feb 2022 01:17:00 +0800</pubDate><author><name>作者</name></author><guid>https://thiscute.world/posts/python-tips-and-tricks/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/python-tips-and-tricks/python-tips-and-tricks.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，不保证正确。</p>

</blockquote><blockquote>
  <p>内容比较多，建议参照目录浏览。</p>

</blockquote><h2 id="一标准库" class="headerLink">
    <a href="#%e4%b8%80%e6%a0%87%e5%87%86%e5%ba%93" class="header-mark"></a>一、标准库</h2><h3 id="1-文件路径---pathlib" class="headerLink">
    <a href="#1-%e6%96%87%e4%bb%b6%e8%b7%af%e5%be%84---pathlib" class="header-mark"></a>1. 文件路径 - pathlib</h3><p>提供了 OS 无关的文件路径抽象，可以完全替代旧的 <code>os.path</code> 和 <code>glob</code>.</p>
<p>学会了 <code>pathlib.Path</code>，你就会了 Python 处理文件路径的所有功能。</p>]]></description></item><item><title>SQLAlchemy 学习笔记（三）：ORM 中的关系构建</title><link>https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/</link><pubDate>Tue, 21 May 2019 22:19:00 +0800</pubDate><author><name>作者</name></author><guid>https://thiscute.world/posts/sqlalchemy-notes-3-relationship-and-foreignkey/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/sqlalchemy-notes-3-relationship-and-foreignkey/sqlalchemy-relationships.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，不保证正确。</p>

</blockquote><h2 id="一关系构建foreignkey-与-relationship" class="headerLink">
    <a href="#%e4%b8%80%e5%85%b3%e7%b3%bb%e6%9e%84%e5%bb%baforeignkey-%e4%b8%8e-relationship" class="header-mark"></a>一、关系构建：<code>ForeignKey</code> 与 <code>relationship</code></h2><p>关系构建的重点，在于搞清楚这两个函数的用法。<code>ForeignKey</code> 的用法已经在<a href="https://www.cnblogs.com/kirito-c/p/10269485.html#%E8%A1%A8%E5%AE%9A%E4%B9%89%E4%B8%AD%E7%9A%84%E7%BA%A6%E6%9D%9F" target="_blank" rel="noopener noreferrer">SQL表达式语言 - 表定义中的约束</a>
讲过了。主要是 <code>ondelete</code> 和 <code>onupdate</code> 两个参数的用法。</p>]]></description></item><item><title>Python 并发编程：PoolExecutor 篇</title><link>https://thiscute.world/posts/python-concurrency-pool-executor/</link><pubDate>Fri, 15 Mar 2019 22:34:00 +0800</pubDate><author><name>作者</name></author><guid>https://thiscute.world/posts/python-concurrency-pool-executor/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/python-concurrency-pool-executor/python-concurrency.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，如有疏漏，还请指正。</p>

</blockquote><p>使用多线程（threading）和多进程（multiprocessing）完成常规的并发需求，在启动的时候
start、join 等步骤不能省，复杂的需要还要用 1-2 个队列。随着需求越来越复杂，如果没有良好的设计和抽象这部分的功能层次，代码量越多调试的难度就越大。</p>]]></description></item><item><title>Python 异步编程笔记：asyncio</title><link>https://thiscute.world/posts/python-asyncio/</link><pubDate>Thu, 14 Feb 2019 13:11:00 +0800</pubDate><author><name>作者</name></author><guid>https://thiscute.world/posts/python-asyncio/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/python-asyncio/asyncio-banner.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，不保证正确。</p>

</blockquote><p>虽然说看到很多人不看好 asyncio，但是这个东西还是必须学的。。基于协程的异步，在很多语言中都有，学会了 Python 的，就一通百通。</p>]]></description></item><item><title>SQLAlchemy 学习笔记（二）：ORM 基础</title><link>https://thiscute.world/posts/sqlalchemy-notes-2-orm-basics/</link><pubDate>Mon, 11 Feb 2019 19:52:00 +0800</pubDate><author><name>作者</name></author><guid>https://thiscute.world/posts/sqlalchemy-notes-2-orm-basics/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/sqlalchemy-notes-2-orm-basics/sqlalchemy-models.webp" referrerpolicy="no-referrer">
            </div><p>照例先看层次图</p>
<figure><img src="/images/sqlalchemy-notes/sqlalchemy-arch.webp"><figcaption>
      <h4>SQLAlchemy 层次结构</h4>
    </figcaption>
</figure>

<h3 id="一声明映射关系" class="headerLink">
    <a href="#%e4%b8%80%e5%a3%b0%e6%98%8e%e6%98%a0%e5%b0%84%e5%85%b3%e7%b3%bb" class="header-mark"></a>一、声明映射关系</h3><p>使用 ORM 时，我们首先需要定义要操作的表（通过 <code>Table</code>），然后再定义该表对应的 Python
class，并声明两者之间的映射关系（通过 <code>Mapper</code>）。</p>]]></description></item><item><title>SQLAlchemy 学习笔记（一）：Engine 与 SQL 表达式语言</title><link>https://thiscute.world/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/</link><pubDate>Mon, 21 Jan 2019 14:02:00 +0800</pubDate><author><name>作者</name></author><guid>https://thiscute.world/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/</guid><description><![CDATA[<div class="featured-image">
                <img src="/posts/sqlalchemy-notes-1-engine-and-sql-expression-language/sqlalchemy-intro.webp" referrerpolicy="no-referrer">
            </div><blockquote>
  <p>个人笔记，如有错误烦请指正。</p>

</blockquote><p>SQLAlchemy 是一个用 Python 实现的 ORM （Object Relational Mapping）框架，它由多个组件构成，这些组件可以单独使用，也能独立使用。它的组件层次结构如下：</p>]]></description></item></channel></rss>