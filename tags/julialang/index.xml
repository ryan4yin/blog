<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>JuliaLang - 标签 - This Cute World</title><link>https://thiscute.world/tags/julialang/</link><description>JuliaLang - 标签 - This Cute World</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Mon, 14 Jan 2019 19:51:00 +0800</lastBuildDate><atom:link href="https://thiscute.world/tags/julialang/" rel="self" type="application/rss+xml"/><item><title>Julia 学习笔记（一）：数组</title><link>https://thiscute.world/posts/julia-notes-1-array/</link><pubDate>Mon, 14 Jan 2019 19:51:00 +0800</pubDate><dc:creator>ryan4yin</dc:creator><guid>https://thiscute.world/posts/julia-notes-1-array/</guid><description><![CDATA[<blockquote>
<p>个人向，只会记录一些需要注意的点。</p>
</blockquote>
<h2 id="前言">前言</h2>
<p>学习 Julia 已经有一段时间了，但是进步缓慢。这一方面是最近代码写得少，一方面是 Julia 学习资料少、中文资料更少，但也有我没做笔记的缘故导致学习效率不佳。</p>
<p>最近发现一份很不错的入门教程：<a href="https://zh.wikibooks.org/wiki/Introducing_Julia" target="_blank" rel="noopener noreferrer">Introducing_Julia</a>，但是它的中文版本仍然有很多不足，就打算给它添加翻译和润色（<a href="https://github.com/zxj5470" target="_blank" rel="noopener noreferrer">zxj5470</a> 完成了绝大部分翻译工作），顺便总结一份自己的笔记。</p>
<p><strong>NOTE</strong>：Julia 的主要语言特征在于<strong>类型系统</strong>和<strong>多重派发</strong>，而主要的科学计算特征则是<strong>矩阵</strong>和整个标准库及生态圈。</p>
<h2 id="一数组">一、数组</h2>
<p>在 Julia 中，数组被用作列表（lists）、向量（vectors）、表（tables）和矩阵（matrices）。</p>
<h3 id="1-数组的创建">1. 数组的创建</h3>
<p>这里尤其需要注意的是数组构造的几种方法，以及它们的区别。</p>
<h4 id="11-一维数组vectorlist">1.1 一维数组（vector/list）</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>  <span class="c"># 逗号分隔的语法用于创建一维数组</span>
<span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>
 <span class="mi">2</span>
 <span class="mi">3</span>
 <span class="mi">4</span>
</code></pre></td></tr></table>
</div>
</div><p>向量，指列向量，Julia 使用的是 Fortran Order，各种操作都是<strong>列优先于行</strong>的。（和 numpy 相反，numpy 是 C Order 的，行优先于列）</p>
<h4 id="12-二维数组tablematrix">1.2. 二维数组（table/matrix）</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">mat</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]</span>  <span class="c"># 空格分隔的语法，用于创建二维数组（或称行向量）</span>
<span class="mi">1</span><span class="o">×</span><span class="mi">4</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">4</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]</span>  <span class="c"># 分号和换行符(\n)，用于分隔数组中不同的行</span>
<span class="mi">2</span><span class="o">×</span><span class="mi">2</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>  <span class="mi">2</span>
 <span class="mi">3</span>  <span class="mi">4</span>
</code></pre></td></tr></table>
</div>
</div><p>空格对应函数 <code>hcat</code>，表示横向拼接各个矩阵/元素。
分号和换行对应函数 <code>vcat</code>，表示垂直拼接各个矩阵/元素。</p>
<p>下面的例子演示了拼接（空格）和单纯分隔各个元素（逗号）的区别：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="p">[</span><span class="mi">3</span> <span class="mi">4</span><span class="p">]</span> <span class="mi">5</span><span class="p">]</span> <span class="c"># 用空格做横向拼接（或称水平拼接）</span>
<span class="mi">1</span><span class="o">×</span><span class="mi">5</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">4</span>  <span class="mi">5</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="mi">5</span><span class="p">]</span> <span class="c"># 用逗号分隔</span>
<span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Any</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>      
 <span class="mi">2</span>      
  <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
 <span class="mi">5</span>
</code></pre></td></tr></table>
</div>
</div><p>能看到在拼接操作中，<code>[3 4]</code> 被“解开”了，而用逗号时，它的行为和 Python 的 <code>list</code> 一样（区别只是 Julia 的 list 列优先）。</p>
<p>使用拼接需要注意的情况举例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="mi">5</span><span class="p">]</span>  <span class="c"># 横向拼接要求 items 的行数相同！</span>
<span class="n">ERROR</span><span class="o">:</span> <span class="kt">DimensionMismatch</span><span class="p">(</span><span class="s">&#34;mismatch in dimension 1 (expected 1 got 2)&#34;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>因为 <code>[3, 4]</code> 有两行，而 数组中的其他项是数值，显然行数不同，所以抛出了 Error.</p>
<p>可以想见，垂直拼接则要求 items 的列数相同。</p>
<p>另外当垂直拼接用于基本元素时，效果等同于逗号。（结果都是单列数组）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">v</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>
 <span class="mi">2</span>
 <span class="mi">3</span>
 <span class="mi">4</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">h</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span><span class="p">;</span> <span class="mi">4</span><span class="p">]</span>
<span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>
 <span class="mi">2</span>
 <span class="mi">3</span>
 <span class="mi">4</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="p">[[</span><span class="mi">1</span><span class="p">;</span> <span class="mi">2</span><span class="p">];</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>  <span class="c"># 等价于 [[1, 2]; [3, 4]]</span>
<span class="mi">4</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>
 <span class="mi">2</span>
 <span class="mi">3</span>
 <span class="mi">4</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="2-数组的索引">2. 数组的索引</h3>
<p>数组的索引方式和 numpy 很类似。有很多高级索引方式。</p>
<p>这里我想说的是类似“齐次坐标”的索引特性。</p>
<p>首先，单个元素可以看作是零维的向量，数学上零维也可以看作是任意维，因此可以这样玩：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="mi">2</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>  <span class="c"># 被当成二维</span>
<span class="mi">2</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>  <span class="c"># 2[1] 仍然是整数 2</span>
<span class="mi">2</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="mi">2</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>  <span class="c"># 三维</span>
<span class="mi">2</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="mf">3.14</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="mf">3.14</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="nb">π</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="nb">π</span> <span class="o">=</span> <span class="mf">3.1415926535897</span><span class="o">...</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="sc">&#39;1&#39;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="sc">&#39;1&#39;</span><span class="o">:</span> <span class="n">ASCII</span><span class="o">/</span><span class="n">Unicode</span> <span class="n">U</span><span class="o">+</span><span class="mi">0031</span> <span class="p">(</span><span class="n">category</span> <span class="n">Nd</span><span class="o">:</span> <span class="kt">Number</span><span class="p">,</span> <span class="n">decimal</span> <span class="n">digit</span><span class="p">)</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="sc">&#39;1&#39;</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="sc">&#39;1&#39;</span><span class="o">:</span> <span class="n">ASCII</span><span class="o">/</span><span class="n">Unicode</span> <span class="n">U</span><span class="o">+</span><span class="mi">0031</span> <span class="p">(</span><span class="n">category</span> <span class="n">Nd</span><span class="o">:</span> <span class="kt">Number</span><span class="p">,</span> <span class="n">decimal</span> <span class="n">digit</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>多维数组也能使用类似“齐次坐标”的索引方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">2</span><span class="p">;</span> <span class="mi">3</span> <span class="mi">4</span><span class="p">]</span>
<span class="mi">2</span><span class="o">×</span><span class="mi">2</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>  <span class="mi">2</span>
 <span class="mi">3</span>  <span class="mi">4</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>  <span class="c"># m[1] 是整数 1，这相当于 1[1]</span>
<span class="mi">1</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="mi">1</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>多维矩阵，在更高的维度上，也能被当成“零维”来看待，前面说过了“零维”也相当于“无限维”，所以多维数组也能用这么索引。</p>
<p>但是拓展的维度索引只能是 1！既然被看作“零维”，就只相当于一个点，自然不可能有更高的索引：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="mi">1</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="n">ERROR</span><span class="o">:</span> <span class="kt">BoundsError</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="n">ERROR</span><span class="o">:</span> <span class="kt">BoundsError</span><span class="o">:</span> <span class="n">attempt</span> <span class="n">to</span> <span class="n">access</span> <span class="mi">2</span><span class="o">×</span><span class="mi">2</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span> <span class="n">at</span> <span class="n">index</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="o">...</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="n">m</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="n">ERROR</span><span class="o">:</span> <span class="kt">BoundsError</span><span class="o">:</span> <span class="n">attempt</span> <span class="n">to</span> <span class="n">access</span> <span class="mi">2</span><span class="o">×</span><span class="mi">2</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span> <span class="n">at</span> <span class="n">index</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="3-推导式comprehensionhttpsdocsjulialangorgenv1manualarrayscomprehensions-1与生成器表达式generator-expressionhttpsdocsjulialangorgenv1manualarraysgenerator-expressions-1">3. 推导式（<a href="https://docs.julialang.org/en/v1/manual/arrays/#Comprehensions-1" target="_blank" rel="noopener noreferrer">comprehension</a>）与生成器表达式（<a href="https://docs.julialang.org/en/v1/manual/arrays/#Generator-Expressions-1" target="_blank" rel="noopener noreferrer">generator expression</a>）</h3>
<p>和 Python 的列表推导式与生成器表达式很像，但是更强大——Julia 是面向矩阵的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-julia" data-lang="julia"><span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span> <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">]</span>  <span class="c"># 这个语法和 Python 一致</span>
<span class="mi">9</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">2</span>
 <span class="mi">3</span>
 <span class="mi">4</span>
 <span class="mi">3</span>
 <span class="mi">4</span>
 <span class="mi">5</span>
 <span class="mi">4</span>
 <span class="mi">5</span>
 <span class="mi">6</span>

<span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">]</span>  <span class="c"># 这个是多维的语法</span>
<span class="mi">3</span><span class="o">×</span><span class="mi">3</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">2</span>  <span class="mi">3</span>  <span class="mi">4</span>
 <span class="mi">3</span>  <span class="mi">4</span>  <span class="mi">5</span>
 <span class="mi">4</span>  <span class="mi">5</span>  <span class="mi">6</span>

<span class="c"># 在后面加 guard 的情况下，结果坍缩成一维（这时两种语法结果没有差别）</span>
<span class="n">julia</span><span class="o">&gt;</span> <span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">j</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span> <span class="k">if</span> <span class="n">iseven</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">)]</span>
<span class="mi">5</span><span class="o">-</span><span class="n">element</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">2</span>
 <span class="mi">4</span>
 <span class="mi">4</span>
 <span class="mi">4</span>
 <span class="mi">6</span>

<span class="c"># 在前面做判断，因为没有过滤元素，所以仍然保持了原有结构。</span>
<span class="n">julia</span><span class="o">&gt;</span> <span class="p">[(</span><span class="n">iseven</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="p">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span> <span class="n">j</span> <span class="k">in</span> <span class="mi">1</span><span class="o">:</span><span class="mi">3</span><span class="p">]</span>
<span class="mi">3</span><span class="o">×</span><span class="mi">3</span> <span class="kt">Array</span><span class="p">{</span><span class="kt">Int64</span><span class="p">,</span><span class="mi">2</span><span class="p">}</span><span class="o">:</span>
 <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">1</span>
 <span class="mi">2</span>  <span class="mi">1</span>  <span class="mi">2</span>
 <span class="mi">1</span>  <span class="mi">2</span>  <span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item></channel></rss>